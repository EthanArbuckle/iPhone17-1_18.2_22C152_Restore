uint64_t CMMsl::AnchorCorrection::AnchorCorrection(uint64_t this)
{
  *(void *)this = off_1003A4720;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A4720;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::AnchorCorrection::~AnchorCorrection(CMMsl::AnchorCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A4720;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AnchorCorrection::~AnchorCorrection(this);

  operator delete();
}

uint64_t CMMsl::AnchorCorrection::AnchorCorrection(uint64_t this, const CMMsl::AnchorCorrection *a2)
{
  *(void *)this = off_1003A4720;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) |= 1u;
    *(void *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::AnchorCorrection::operator=(uint64_t a1, const CMMsl::AnchorCorrection *a2)
{
  if ((const CMMsl::AnchorCorrection *)a1 != a2)
  {
    CMMsl::AnchorCorrection::AnchorCorrection((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::AnchorCorrection::~AnchorCorrection((CMMsl::AnchorCorrection *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AnchorCorrection *a2, CMMsl::AnchorCorrection *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::AnchorCorrection::AnchorCorrection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4720;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AnchorCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AnchorCorrection::AnchorCorrection((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::AnchorCorrection::~AnchorCorrection((CMMsl::AnchorCorrection *)&v7);
  }
  return a1;
}

uint64_t CMMsl::AnchorCorrection::formatText(CMMsl::AnchorCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "lastConvergenceTimestamp", *((double *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AnchorCorrection::readFrom(CMMsl::AnchorCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v21);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(CMMsl::DeviceMotionCorrection *this)
{
  *(void *)this = off_1003A5360;
  *((_DWORD *)this + 40) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A5360;
  *((_DWORD *)this + 40) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

uint64_t CMMsl::AnchorCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 24))
  {
    double v5 = *(double *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::AnchorCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

BOOL CMMsl::DeviceMotionCorrection::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 160))
  {
    if ((*(unsigned char *)(a2 + 160) & 1) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 160))
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 32);
  unint64_t v2 = *(float **)(a1 + 40);
  uint64_t v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 56);
  uint64_t v5 = *(float **)(a1 + 64);
  uint64_t v7 = *(float **)(a2 + 56);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 64) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  char v9 = *(float **)(a1 + 104);
  uint64_t v8 = *(float **)(a1 + 112);
  unsigned int v10 = *(float **)(a2 + 104);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 112) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  unint64_t v12 = *(float **)(a1 + 8);
  unint64_t v11 = *(float **)(a1 + 16);
  char v13 = *(float **)(a2 + 8);
  if ((char *)v11 - (char *)v12 != *(void *)(a2 + 16) - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*v12 != *v13) {
      return 0;
    }
    ++v12;
    ++v13;
  }
  char v15 = *(float **)(a1 + 80);
  v14 = *(float **)(a1 + 88);
  unsigned int v16 = *(float **)(a2 + 80);
  if ((char *)v14 - (char *)v15 != *(void *)(a2 + 88) - (void)v16) {
    return 0;
  }
  while (v15 != v14)
  {
    if (*v15 != *v16) {
      return 0;
    }
    ++v15;
    ++v16;
  }
  uint64_t v18 = *(void *)(a1 + 128);
  uint64_t v17 = *(void *)(a1 + 136);
  v19 = *(float **)(a2 + 128);
  if (v17 - v18 != *(void *)(a2 + 136) - (void)v19) {
    return 0;
  }
  if (v18 == v17) {
    return 1;
  }
  uint64_t v20 = v18 + 4;
  do
  {
    float v21 = *v19++;
    BOOL result = *(float *)(v20 - 4) == v21;
    BOOL v23 = *(float *)(v20 - 4) != v21 || v20 == v17;
    v20 += 4;
  }
  while (!v23);
  return result;
}

unint64_t CMMsl::AnchorCorrection::hash_value(CMMsl::AnchorCorrection *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  }
  if (*((unsigned char *)this + 24))
  {
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
  }
  else
  {
    double v3 = 0.0;
  }
  return *(void *)&v3 ^ v2;
}

uint64_t CMMsl::AnchorCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(uint64_t this)
{
  *(void *)this = off_1003A4758;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A4758;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::AnchorMotionCorrespondence::~AnchorMotionCorrespondence(CMMsl::AnchorMotionCorrespondence *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(CMMsl::AnchorMotionCorrespondence *this, const CMMsl::AnchorMotionCorrespondence *a2)
{
  *(void *)this = off_1003A4758;
  *((_DWORD *)this + 11) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    char v3 = 8;
    *((unsigned char *)this + 44) = 8;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 44) = v3;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 44) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        return result;
      }
LABEL_12:
      double result = *((double *)a2 + 1);
      *((unsigned char *)this + 44) = v3 | 1;
      *((double *)this + 1) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  char v5 = *((unsigned char *)a2 + 40);
  v3 |= 0x10u;
  *((unsigned char *)this + 44) = v3;
  *((unsigned char *)this + 40) = v5;
  if (*((unsigned char *)a2 + 44)) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::AnchorMotionCorrespondence::operator=(uint64_t a1, const CMMsl::AnchorMotionCorrespondence *a2)
{
  if ((const CMMsl::AnchorMotionCorrespondence *)a1 != a2)
  {
    CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence((CMMsl::AnchorMotionCorrespondence *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    int v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v10;
    char v10 = v3;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AnchorMotionCorrespondence *a2, CMMsl::AnchorMotionCorrespondence *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LOBYTE(v3) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4758;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A4758;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::AnchorMotionCorrespondence::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v10 = off_1003A4758;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    char v4 = *(unsigned char *)(a2 + 40);
    int v14 = *(_DWORD *)(a1 + 44);
    long long v12 = *(_OWORD *)(a1 + 24);
    char v5 = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v4;
    char v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 8);
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 8) = v7;
    long long v11 = v6;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::AnchorMotionCorrespondence::formatText(CMMsl::AnchorMotionCorrespondence *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "dThetaNorm", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "lastCorrespondenceTimestamp", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "lastUpdateTimestamp", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "state", *((unsigned char *)this + 40));
  if ((*((unsigned char *)this + 44) & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AnchorMotionCorrespondence::readFrom(CMMsl::AnchorMotionCorrespondence *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 44) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_37;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_41;
        case 2u:
          *((unsigned char *)this + 44) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_37;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_41;
        case 3u:
          *((unsigned char *)this + 44) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_37;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_41;
        case 4u:
          *((unsigned char *)this + 44) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v22 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v22 = v21 != 0;
          }
          *((unsigned char *)this + 40) = v22;
          break;
        case 5u:
          *((unsigned char *)this + 44) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_41:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_37:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AnchorMotionCorrespondence::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 40), 4u);
    if ((*(unsigned char *)(v3 + 44) & 1) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 5u);
}

BOOL CMMsl::AnchorMotionCorrespondence::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 44) & 1) == 0;
  if (*(unsigned char *)(a1 + 44)) {
    return (*(unsigned char *)(a2 + 44) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::AnchorMotionCorrespondence::hash_value(CMMsl::AnchorMotionCorrespondence *this)
{
  if ((*((unsigned char *)this + 44) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 0x10) != 0)
  {
LABEL_9:
    uint64_t v4 = *((unsigned __int8 *)this + 40);
    if (*((unsigned char *)this + 44)) {
      goto LABEL_10;
    }
LABEL_19:
    double v5 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ *(void *)&v5;
  }
LABEL_18:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 1) == 0) {
    goto LABEL_19;
  }
LABEL_10:
  double v5 = *((double *)this + 1);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ *(void *)&v5;
}

void *CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(void *this)
{
  *this = off_1003A4790;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A4790;
  this[1] = 0;
  return this;
}

void CMMsl::AppleCV3DSLAMState::~AppleCV3DSLAMState(CMMsl::AppleCV3DSLAMState *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A4790;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AppleCV3DSLAMState::~AppleCV3DSLAMState(this);

  operator delete();
}

void *CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(void *this, const CMMsl::AppleCV3DSLAMState *a2)
{
  *this = off_1003A4790;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AppleCV3DSLAMState *CMMsl::AppleCV3DSLAMState::operator=(const CMMsl::AppleCV3DSLAMState *a1, const CMMsl::AppleCV3DSLAMState *a2)
{
  if (a1 != a2)
  {
    CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AppleCV3DSLAMState::~AppleCV3DSLAMState((CMMsl::AppleCV3DSLAMState *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AppleCV3DSLAMState *a2, CMMsl::AppleCV3DSLAMState *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(void *a1, uint64_t a2)
{
  *a1 = off_1003A4790;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A4790;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::AppleCV3DSLAMState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A4790;
    v6[1] = v4;
    CMMsl::AppleCV3DSLAMState::~AppleCV3DSLAMState((CMMsl::AppleCV3DSLAMState *)v6);
  }
  return a1;
}

uint64_t CMMsl::AppleCV3DSLAMState::formatText(CMMsl::AppleCV3DSLAMState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AppleCV3DSLAMState::readFrom(CMMsl::AppleCV3DSLAMState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::CV3DSLAMState::CV3DSLAMState(CMMsl::CV3DSLAMState *this)
{
  *(void *)this = off_1003A4E20;
  *((_DWORD *)this + 22) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A4E20;
  *((_DWORD *)this + 22) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

uint64_t CMMsl::AppleCV3DSLAMState::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::AppleCV3DSLAMState::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::CV3DSLAMState::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::CV3DSLAMState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if ((*(unsigned char *)(a2 + 88) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 88))
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 8);
  uint64_t v2 = *(double **)(a1 + 16);
  int v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(double **)(a1 + 32);
  uint64_t v5 = *(double **)(a1 + 40);
  uint64_t v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v10 = *(double **)(a2 + 56);
  if (v8 - v9 != *(void *)(a2 + 64) - (void)v10) {
    return 0;
  }
  if (v9 == v8) {
    return 1;
  }
  uint64_t v11 = v9 + 8;
  do
  {
    double v12 = *v10++;
    BOOL result = *(double *)(v11 - 8) == v12;
    BOOL v14 = *(double *)(v11 - 8) != v12 || v11 == v8;
    v11 += 8;
  }
  while (!v14);
  return result;
}

CMMsl::CV3DSLAMState *CMMsl::AppleCV3DSLAMState::hash_value(CMMsl::AppleCV3DSLAMState *this)
{
  BOOL result = (CMMsl::CV3DSLAMState *)*((void *)this + 1);
  if (result) {
    return (CMMsl::CV3DSLAMState *)CMMsl::CV3DSLAMState::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::AppleCV3DSLAMState::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

double CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(CMMsl::AudioAccessoryDeviceMotion *this)
{
  *(void *)this = off_1003A47C8;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 29) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A47C8;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 29) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion(CMMsl::AudioAccessoryDeviceMotion *this)
{
  *(void *)this = off_1003A47C8;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion(this);

  operator delete();
}

CMMsl::AudioAccessoryDeviceMotion *CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(CMMsl::AudioAccessoryDeviceMotion *this, const CMMsl::AudioAccessoryDeviceMotion *a2)
{
  *(void *)this = off_1003A47C8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((void *)a2 + 9)) {
    operator new();
  }
  if (this != a2) {
    sub_100024308((char *)this + 8, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 0x40) != 0)
  {
    int v10 = *((_DWORD *)a2 + 24);
    *((_WORD *)this + 58) |= 0x40u;
    *((_DWORD *)this + 24) = v10;
    __int16 v4 = *((_WORD *)a2 + 58);
    if ((v4 & 0x20) == 0)
    {
LABEL_7:
      if ((v4 & 0x10) == 0) {
        goto LABEL_8;
      }
      goto LABEL_24;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_7;
  }
  int v11 = *((_DWORD *)a2 + 23);
  *((_WORD *)this + 58) |= 0x20u;
  *((_DWORD *)this + 23) = v11;
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v12 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 58) |= 0x10u;
  *((_DWORD *)this + 22) = v12;
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v13 = *((_DWORD *)a2 + 26);
  *((_WORD *)this + 58) |= 0x100u;
  *((_DWORD *)this + 26) = v13;
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v14 = *((void *)a2 + 8);
  *((_WORD *)this + 58) |= 2u;
  *((void *)this + 8) = v14;
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v15 = *((_DWORD *)a2 + 27);
  *((_WORD *)this + 58) |= 0x200u;
  *((_DWORD *)this + 27) = v15;
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v16 = *((void *)a2 + 7);
  *((_WORD *)this + 58) |= 1u;
  *((void *)this + 7) = v16;
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  int v17 = *((_DWORD *)a2 + 21);
  *((_WORD *)this + 58) |= 8u;
  *((_DWORD *)this + 21) = v17;
  if ((*((_WORD *)a2 + 58) & 0x80) != 0)
  {
LABEL_14:
    int v5 = *((_DWORD *)a2 + 25);
    *((_WORD *)this + 58) |= 0x80u;
    *((_DWORD *)this + 25) = v5;
  }
LABEL_15:
  if (this != a2) {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  __int16 v6 = *((_WORD *)a2 + 58);
  if ((v6 & 4) != 0)
  {
    int v7 = *((_DWORD *)a2 + 20);
    *((_WORD *)this + 58) |= 4u;
    *((_DWORD *)this + 20) = v7;
    __int16 v6 = *((_WORD *)a2 + 58);
  }
  if ((v6 & 0x400) != 0)
  {
    char v8 = *((unsigned char *)a2 + 112);
    *((_WORD *)this + 58) |= 0x400u;
    *((unsigned char *)this + 112) = v8;
  }
  return this;
}

CMMsl *CMMsl::AudioAccessoryDeviceMotion::operator=(CMMsl *a1, const CMMsl::AudioAccessoryDeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion((CMMsl::AudioAccessoryDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AudioAccessoryDeviceMotion *)v5, v3);
    CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion((CMMsl::AudioAccessoryDeviceMotion *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AudioAccessoryDeviceMotion *a2, CMMsl::AudioAccessoryDeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  int v8 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v8;
  LODWORD(v7) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v7;
  LODWORD(v7) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v7;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v10;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  uint64_t v14 = *((void *)this + 6);
  uint64_t v13 = *((void *)this + 7);
  uint64_t v15 = *((void *)a2 + 7);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)this + 7) = v15;
  LODWORD(v9) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v9;
  float result = *((float *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((float *)a2 + 25) = result;
  *((void *)a2 + 6) = v14;
  *((void *)a2 + 7) = v13;
  LODWORD(v13) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 112);
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((unsigned char *)a2 + 112) = v13;
  return result;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(void *)a1 = off_1003A47C8;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v6 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100274A30(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

CMMsl *CMMsl::AudioAccessoryDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AudioAccessoryDeviceMotion *)v5, v3);
    CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion((CMMsl::AudioAccessoryDeviceMotion *)v5);
  }
  return a1;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::formatText(CMMsl::AudioAccessoryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "activity", *((_DWORD *)this + 20));
    __int16 v5 = *((_WORD *)this + 58);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "arrivalTimestamp", *((float *)this + 21));
  if (*((_WORD *)this + 58)) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "btcTimestamp", *((void *)this + 7));
LABEL_5:
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "filteredAcceleration", v8);
  }
  uint64_t v9 = (float *)*((void *)this + 4);
  uint64_t v10 = (float *)*((void *)this + 5);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(a2, "gyroBias", v11);
  }
  __int16 v12 = *((_WORD *)this + 58);
  if ((v12 & 0x400) != 0)
  {
    PB::TextFormatter::format(a2, "isInEar", *((unsigned char *)this + 112));
    __int16 v12 = *((_WORD *)this + 58);
    if ((v12 & 0x10) == 0)
    {
LABEL_11:
      if ((v12 & 0x20) == 0) {
        goto LABEL_12;
      }
      goto LABEL_29;
    }
  }
  else if ((v12 & 0x10) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 22));
  __int16 v12 = *((_WORD *)this + 58);
  if ((v12 & 0x20) == 0)
  {
LABEL_12:
    if ((v12 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "quiescentMode", *((_DWORD *)this + 23));
  __int16 v12 = *((_WORD *)this + 58);
  if ((v12 & 0x40) == 0)
  {
LABEL_13:
    if ((v12 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "quiescentNoise", *((float *)this + 24));
  __int16 v12 = *((_WORD *)this + 58);
  if ((v12 & 0x80) == 0)
  {
LABEL_14:
    if ((v12 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "sampleLatency", *((float *)this + 25));
  __int16 v12 = *((_WORD *)this + 58);
  if ((v12 & 2) == 0)
  {
LABEL_15:
    if ((v12 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "sensorTimeUponReceival", *((double *)this + 8));
  if ((*((_WORD *)this + 58) & 0x100) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 26));
LABEL_17:
  uint64_t v13 = *((void *)this + 9);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "super");
  }
  if ((*((_WORD *)this + 58) & 0x200) != 0) {
    PB::TextFormatter::format(a2, "timeSyncStatus", *((_DWORD *)this + 27));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AudioAccessoryDeviceMotion::readFrom(CMMsl::AudioAccessoryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 32);
    uint64_t v9 = (char *)this + 48;
    uint64_t v10 = (void **)((char *)this + 8);
    float v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if (v24 != 2)
          {
            v111 = (char *)*((void *)this + 2);
            unint64_t v110 = *((void *)this + 3);
            if ((unint64_t)v111 >= v110)
            {
              v139 = (char *)*v10;
              uint64_t v140 = (v111 - (unsigned char *)*v10) >> 2;
              unint64_t v141 = v140 + 1;
              if ((unint64_t)(v140 + 1) >> 62) {
LABEL_251:
              }
                sub_10000EE98();
              uint64_t v142 = v110 - (void)v139;
              if (v142 >> 1 > v141) {
                unint64_t v141 = v142 >> 1;
              }
              if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v143 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v143 = v141;
              }
              if (v143)
              {
                v144 = (char *)sub_100024458((uint64_t)v11, v143);
                v139 = (char *)*((void *)this + 1);
                v111 = (char *)*((void *)this + 2);
              }
              else
              {
                v144 = 0;
              }
              v151 = &v144[4 * v140];
              *(_DWORD *)v151 = 0;
              v112 = v151 + 4;
              while (v111 != v139)
              {
                int v152 = *((_DWORD *)v111 - 1);
                v111 -= 4;
                *((_DWORD *)v151 - 1) = v152;
                v151 -= 4;
              }
              *((void *)this + 1) = v151;
              *((void *)this + 2) = v112;
              *((void *)this + 3) = &v144[4 * v143];
              if (v139) {
                operator delete(v139);
              }
            }
            else
            {
              *(_DWORD *)v111 = 0;
              v112 = v111 + 4;
            }
            *((void *)this + 2) = v112;
            goto LABEL_234;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v25 = *((void *)a2 + 1);
          unint64_t v26 = *((void *)a2 + 2);
          while (v25 < v26 && !*((unsigned char *)a2 + 24))
          {
            v28 = (char *)*((void *)this + 2);
            unint64_t v27 = *((void *)this + 3);
            if ((unint64_t)v28 >= v27)
            {
              v30 = (char *)*v10;
              uint64_t v31 = (v28 - (unsigned char *)*v10) >> 2;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62) {
                goto LABEL_251;
              }
              uint64_t v33 = v27 - (void)v30;
              if (v33 >> 1 > v32) {
                unint64_t v32 = v33 >> 1;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34)
              {
                v35 = (char *)sub_100024458((uint64_t)v11, v34);
                v30 = (char *)*((void *)this + 1);
                v28 = (char *)*((void *)this + 2);
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[4 * v31];
              *(_DWORD *)v36 = 0;
              v29 = v36 + 4;
              while (v28 != v30)
              {
                int v37 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *((_DWORD *)v36 - 1) = v37;
                v36 -= 4;
              }
              *((void *)this + 1) = v36;
              *((void *)this + 2) = v29;
              *((void *)this + 3) = &v35[4 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(_DWORD *)v28 = 0;
              v29 = v28 + 4;
            }
            *((void *)this + 2) = v29;
            unint64_t v38 = *((void *)a2 + 1);
            if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
              goto LABEL_178;
            }
            *(v29 - 1) = *(_DWORD *)(*(void *)a2 + v38);
            unint64_t v26 = *((void *)a2 + 2);
            unint64_t v25 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v25;
          }
          goto LABEL_179;
        case 3u:
          *((_WORD *)this + 58) |= 0x40u;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
            goto LABEL_236;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v39);
          goto LABEL_238;
        case 4u:
          *((_WORD *)this + 58) |= 0x20u;
          unint64_t v40 = *((void *)a2 + 1);
          unint64_t v41 = *((void *)a2 + 2);
          uint64_t v42 = *(void *)a2;
          if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
          {
            char v43 = 0;
            unsigned int v44 = 0;
            uint64_t v45 = 0;
            do
            {
              unint64_t v46 = v40 + 1;
              *((void *)a2 + 1) = v40 + 1;
              char v47 = *(unsigned char *)(v42 + v40);
              v45 |= (unint64_t)(v47 & 0x7F) << v43;
              if ((v47 & 0x80) == 0) {
                goto LABEL_204;
              }
              v43 += 7;
              unint64_t v40 = v46;
              BOOL v18 = v44++ > 8;
            }
            while (!v18);
LABEL_138:
            LODWORD(v45) = 0;
            goto LABEL_204;
          }
          char v113 = 0;
          unsigned int v114 = 0;
          uint64_t v45 = 0;
          if (v41 <= v40) {
            unint64_t v41 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v115 = v40 + 1;
              char v116 = *(unsigned char *)(v42 + v40);
              *((void *)a2 + 1) = v115;
              v45 |= (unint64_t)(v116 & 0x7F) << v113;
              if (v116 < 0)
              {
                v113 += 7;
                unint64_t v40 = v115;
                BOOL v18 = v114++ > 8;
                if (v18) {
                  goto LABEL_138;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v45) = 0;
              }
            }
            break;
          }
LABEL_204:
          *((_DWORD *)this + 23) = v45;
          goto LABEL_240;
        case 5u:
          *((_WORD *)this + 58) |= 0x10u;
          unint64_t v48 = *((void *)a2 + 1);
          unint64_t v49 = *((void *)a2 + 2);
          uint64_t v50 = *(void *)a2;
          if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
          {
            char v51 = 0;
            unsigned int v52 = 0;
            uint64_t v53 = 0;
            do
            {
              unint64_t v54 = v48 + 1;
              *((void *)a2 + 1) = v48 + 1;
              char v55 = *(unsigned char *)(v50 + v48);
              v53 |= (unint64_t)(v55 & 0x7F) << v51;
              if ((v55 & 0x80) == 0) {
                goto LABEL_207;
              }
              v51 += 7;
              unint64_t v48 = v54;
              BOOL v18 = v52++ > 8;
            }
            while (!v18);
LABEL_145:
            LODWORD(v53) = 0;
            goto LABEL_207;
          }
          char v117 = 0;
          unsigned int v118 = 0;
          uint64_t v53 = 0;
          if (v49 <= v48) {
            unint64_t v49 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v49 == v48)
            {
              LODWORD(v53) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v119 = v48 + 1;
              char v120 = *(unsigned char *)(v50 + v48);
              *((void *)a2 + 1) = v119;
              v53 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                unint64_t v48 = v119;
                BOOL v18 = v118++ > 8;
                if (v18) {
                  goto LABEL_145;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v53) = 0;
              }
            }
            break;
          }
LABEL_207:
          *((_DWORD *)this + 22) = v53;
          goto LABEL_240;
        case 6u:
          *((_WORD *)this + 58) |= 0x100u;
          unint64_t v56 = *((void *)a2 + 1);
          unint64_t v57 = *((void *)a2 + 2);
          uint64_t v58 = *(void *)a2;
          if (v56 <= 0xFFFFFFFFFFFFFFF5 && v56 + 10 <= v57)
          {
            char v59 = 0;
            unsigned int v60 = 0;
            uint64_t v61 = 0;
            do
            {
              unint64_t v62 = v56 + 1;
              *((void *)a2 + 1) = v56 + 1;
              char v63 = *(unsigned char *)(v58 + v56);
              v61 |= (unint64_t)(v63 & 0x7F) << v59;
              if ((v63 & 0x80) == 0) {
                goto LABEL_210;
              }
              v59 += 7;
              unint64_t v56 = v62;
              BOOL v18 = v60++ > 8;
            }
            while (!v18);
LABEL_152:
            LODWORD(v61) = 0;
            goto LABEL_210;
          }
          char v121 = 0;
          unsigned int v122 = 0;
          uint64_t v61 = 0;
          if (v57 <= v56) {
            unint64_t v57 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v57 == v56)
            {
              LODWORD(v61) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v123 = v56 + 1;
              char v124 = *(unsigned char *)(v58 + v56);
              *((void *)a2 + 1) = v123;
              v61 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                unint64_t v56 = v123;
                BOOL v18 = v122++ > 8;
                if (v18) {
                  goto LABEL_152;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v61) = 0;
              }
            }
            break;
          }
LABEL_210:
          *((_DWORD *)this + 26) = v61;
          goto LABEL_240;
        case 7u:
          *((_WORD *)this + 58) |= 2u;
          unint64_t v64 = *((void *)a2 + 1);
          if (v64 > 0xFFFFFFFFFFFFFFF7 || v64 + 8 > *((void *)a2 + 2)) {
            goto LABEL_236;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v64);
          uint64_t v65 = *((void *)a2 + 1) + 8;
          goto LABEL_239;
        case 8u:
          *((_WORD *)this + 58) |= 0x200u;
          unint64_t v66 = *((void *)a2 + 1);
          unint64_t v67 = *((void *)a2 + 2);
          uint64_t v68 = *(void *)a2;
          if (v66 <= 0xFFFFFFFFFFFFFFF5 && v66 + 10 <= v67)
          {
            char v69 = 0;
            unsigned int v70 = 0;
            uint64_t v71 = 0;
            do
            {
              unint64_t v72 = v66 + 1;
              *((void *)a2 + 1) = v66 + 1;
              char v73 = *(unsigned char *)(v68 + v66);
              v71 |= (unint64_t)(v73 & 0x7F) << v69;
              if ((v73 & 0x80) == 0) {
                goto LABEL_213;
              }
              v69 += 7;
              unint64_t v66 = v72;
              BOOL v18 = v70++ > 8;
            }
            while (!v18);
LABEL_159:
            LODWORD(v71) = 0;
            goto LABEL_213;
          }
          char v125 = 0;
          unsigned int v126 = 0;
          uint64_t v71 = 0;
          if (v67 <= v66) {
            unint64_t v67 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v67 == v66)
            {
              LODWORD(v71) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v127 = v66 + 1;
              char v128 = *(unsigned char *)(v68 + v66);
              *((void *)a2 + 1) = v127;
              v71 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                unint64_t v66 = v127;
                BOOL v18 = v126++ > 8;
                if (v18) {
                  goto LABEL_159;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v71) = 0;
              }
            }
            break;
          }
LABEL_213:
          *((_DWORD *)this + 27) = v71;
          goto LABEL_240;
        case 9u:
          *((_WORD *)this + 58) |= 1u;
          unint64_t v74 = *((void *)a2 + 1);
          unint64_t v75 = *((void *)a2 + 2);
          uint64_t v76 = *(void *)a2;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            char v77 = 0;
            unsigned int v78 = 0;
            uint64_t v79 = 0;
            do
            {
              unint64_t v80 = v74 + 1;
              *((void *)a2 + 1) = v74 + 1;
              char v81 = *(unsigned char *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0) {
                goto LABEL_216;
              }
              v77 += 7;
              unint64_t v74 = v80;
              BOOL v18 = v78++ > 8;
            }
            while (!v18);
LABEL_166:
            uint64_t v79 = 0;
            goto LABEL_216;
          }
          char v129 = 0;
          unsigned int v130 = 0;
          uint64_t v79 = 0;
          if (v75 <= v74) {
            unint64_t v75 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v75 == v74)
            {
              uint64_t v79 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v131 = v74 + 1;
              char v132 = *(unsigned char *)(v76 + v74);
              *((void *)a2 + 1) = v131;
              v79 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                unint64_t v74 = v131;
                BOOL v18 = v130++ > 8;
                if (v18) {
                  goto LABEL_166;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v79 = 0;
              }
            }
            break;
          }
LABEL_216:
          *((void *)this + 7) = v79;
          goto LABEL_240;
        case 0xAu:
          *((_WORD *)this + 58) |= 8u;
          unint64_t v82 = *((void *)a2 + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)a2 + 2)) {
            goto LABEL_236;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v82);
          goto LABEL_238;
        case 0xBu:
          *((_WORD *)this + 58) |= 0x80u;
          unint64_t v83 = *((void *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
            goto LABEL_236;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v83);
          goto LABEL_238;
        case 0xCu:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v84 = *((void *)a2 + 1);
            unint64_t v85 = *((void *)a2 + 2);
            while (v84 < v85 && !*((unsigned char *)a2 + 24))
            {
              v87 = (char *)*((void *)this + 5);
              unint64_t v86 = *((void *)this + 6);
              if ((unint64_t)v87 >= v86)
              {
                v89 = (char *)*v8;
                uint64_t v90 = (v87 - (unsigned char *)*v8) >> 2;
                unint64_t v91 = v90 + 1;
                if ((unint64_t)(v90 + 1) >> 62) {
                  goto LABEL_250;
                }
                uint64_t v92 = v86 - (void)v89;
                if (v92 >> 1 > v91) {
                  unint64_t v91 = v92 >> 1;
                }
                if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v93 = v91;
                }
                if (v93)
                {
                  v94 = (char *)sub_100024458((uint64_t)v9, v93);
                  v89 = (char *)*((void *)this + 4);
                  v87 = (char *)*((void *)this + 5);
                }
                else
                {
                  v94 = 0;
                }
                v95 = &v94[4 * v90];
                *(_DWORD *)v95 = 0;
                v88 = v95 + 4;
                while (v87 != v89)
                {
                  int v96 = *((_DWORD *)v87 - 1);
                  v87 -= 4;
                  *((_DWORD *)v95 - 1) = v96;
                  v95 -= 4;
                }
                *((void *)this + 4) = v95;
                *((void *)this + 5) = v88;
                *((void *)this + 6) = &v94[4 * v93];
                if (v89) {
                  operator delete(v89);
                }
              }
              else
              {
                *(_DWORD *)v87 = 0;
                v88 = v87 + 4;
              }
              *((void *)this + 5) = v88;
              unint64_t v97 = *((void *)a2 + 1);
              if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((void *)a2 + 2))
              {
LABEL_178:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v88 - 1) = *(_DWORD *)(*(void *)a2 + v97);
              unint64_t v85 = *((void *)a2 + 2);
              unint64_t v84 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v84;
            }
LABEL_179:
            PB::Reader::recallMark();
          }
          else
          {
            v134 = (char *)*((void *)this + 5);
            unint64_t v133 = *((void *)this + 6);
            if ((unint64_t)v134 >= v133)
            {
              v145 = (char *)*v8;
              uint64_t v146 = (v134 - (unsigned char *)*v8) >> 2;
              unint64_t v147 = v146 + 1;
              if ((unint64_t)(v146 + 1) >> 62) {
LABEL_250:
              }
                sub_10000EE98();
              uint64_t v148 = v133 - (void)v145;
              if (v148 >> 1 > v147) {
                unint64_t v147 = v148 >> 1;
              }
              if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v149 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v149 = v147;
              }
              if (v149)
              {
                v150 = (char *)sub_100024458((uint64_t)v9, v149);
                v145 = (char *)*((void *)this + 4);
                v134 = (char *)*((void *)this + 5);
              }
              else
              {
                v150 = 0;
              }
              v153 = &v150[4 * v146];
              *(_DWORD *)v153 = 0;
              v112 = v153 + 4;
              while (v134 != v145)
              {
                int v154 = *((_DWORD *)v134 - 1);
                v134 -= 4;
                *((_DWORD *)v153 - 1) = v154;
                v153 -= 4;
              }
              *((void *)this + 4) = v153;
              *((void *)this + 5) = v112;
              *((void *)this + 6) = &v150[4 * v149];
              if (v145) {
                operator delete(v145);
              }
            }
            else
            {
              *(_DWORD *)v134 = 0;
              v112 = v134 + 4;
            }
            *((void *)this + 5) = v112;
LABEL_234:
            unint64_t v155 = *((void *)a2 + 1);
            if (v155 <= 0xFFFFFFFFFFFFFFFBLL && v155 + 4 <= *((void *)a2 + 2))
            {
              *(v112 - 1) = *(_DWORD *)(*(void *)a2 + v155);
LABEL_238:
              uint64_t v65 = *((void *)a2 + 1) + 4;
LABEL_239:
              *((void *)a2 + 1) = v65;
            }
            else
            {
LABEL_236:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_240:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 0xDu:
          *((_WORD *)this + 58) |= 4u;
          unint64_t v98 = *((void *)a2 + 1);
          unint64_t v99 = *((void *)a2 + 2);
          uint64_t v100 = *(void *)a2;
          if (v98 <= 0xFFFFFFFFFFFFFFF5 && v98 + 10 <= v99)
          {
            char v101 = 0;
            unsigned int v102 = 0;
            uint64_t v103 = 0;
            do
            {
              unint64_t v104 = v98 + 1;
              *((void *)a2 + 1) = v98 + 1;
              char v105 = *(unsigned char *)(v100 + v98);
              v103 |= (unint64_t)(v105 & 0x7F) << v101;
              if ((v105 & 0x80) == 0) {
                goto LABEL_219;
              }
              v101 += 7;
              unint64_t v98 = v104;
              BOOL v18 = v102++ > 8;
            }
            while (!v18);
LABEL_175:
            LODWORD(v103) = 0;
            goto LABEL_219;
          }
          char v135 = 0;
          unsigned int v136 = 0;
          uint64_t v103 = 0;
          if (v99 <= v98) {
            unint64_t v99 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v99 == v98)
            {
              LODWORD(v103) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v137 = v98 + 1;
              char v138 = *(unsigned char *)(v100 + v98);
              *((void *)a2 + 1) = v137;
              v103 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                unint64_t v98 = v137;
                BOOL v18 = v136++ > 8;
                if (v18) {
                  goto LABEL_175;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v103) = 0;
              }
            }
            break;
          }
LABEL_219:
          *((_DWORD *)this + 20) = v103;
          goto LABEL_240;
        case 0xEu:
          *((_WORD *)this + 58) |= 0x400u;
          unint64_t v106 = *((void *)a2 + 1);
          if (v106 >= *((void *)a2 + 2))
          {
            BOOL v109 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v107 = v106 + 1;
            int v108 = *(unsigned __int8 *)(*(void *)a2 + v106);
            *((void *)a2 + 1) = v107;
            BOOL v109 = v108 != 0;
          }
          *((unsigned char *)this + 112) = v109;
          goto LABEL_240;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_240;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(CMMsl::AuxiliaryDeviceMotion *this)
{
  *(void *)this = off_1003A4800;
  *((_DWORD *)this + 38) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A4800;
  *((_DWORD *)this + 38) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  return result;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 72);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  __int16 v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 2u);
  }
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 96), 3u);
    __int16 v8 = *(_WORD *)(v3 + 116);
    if ((v8 & 0x20) == 0)
    {
LABEL_8:
      if ((v8 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 4u);
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 5u);
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 6u);
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 7u);
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x200) == 0)
  {
LABEL_12:
    if ((v8 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 8u);
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 1) == 0)
  {
LABEL_13:
    if ((v8 & 8) == 0) {
      goto LABEL_14;
    }
LABEL_30:
    this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xAu);
    if ((*(_WORD *)(v3 + 116) & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 56), 9u);
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 8) != 0) {
    goto LABEL_30;
  }
LABEL_14:
  if ((v8 & 0x80) != 0) {
LABEL_15:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xBu);
LABEL_16:
  uint64_t v9 = *(float **)(v3 + 32);
  uint64_t v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    this = PB::Writer::write(a2, v11, 0xCu);
  }
  __int16 v12 = *(_WORD *)(v3 + 116);
  if ((v12 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0xDu);
    __int16 v12 = *(_WORD *)(v3 + 116);
  }
  if ((v12 & 0x400) != 0)
  {
    char v13 = *(unsigned char *)(v3 + 112);
    return PB::Writer::write(a2, v13, 0xEu);
  }
  return this;
}

BOOL CMMsl::AudioAccessoryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a2 + 72);
  if (v4)
  {
    if (!v5 || !CMMsl::AuxiliaryDeviceMotion::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  float v7 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  __int16 v8 = *(float **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(void *)(a2 + 16) - (void)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8) {
        return 0;
      }
      ++v7;
      ++v8;
    }
    __int16 v9 = *(_WORD *)(a1 + 116);
    __int16 v10 = *(_WORD *)(a2 + 116);
    if ((v9 & 0x40) != 0)
    {
      if ((v10 & 0x40) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
        return 0;
      }
    }
    else if ((v10 & 0x40) != 0)
    {
      return 0;
    }
    if ((v9 & 0x20) != 0)
    {
      if ((v10 & 0x20) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
        return 0;
      }
    }
    else if ((v10 & 0x20) != 0)
    {
      return 0;
    }
    if ((v9 & 0x10) != 0)
    {
      if ((v10 & 0x10) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
        return 0;
      }
    }
    else if ((v10 & 0x10) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 116) & 0x100) != 0)
    {
      if ((*(_WORD *)(a2 + 116) & 0x100) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
        return 0;
      }
    }
    else if ((*(_WORD *)(a2 + 116) & 0x100) != 0)
    {
      return 0;
    }
    if ((v9 & 2) != 0)
    {
      if ((v10 & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
        return 0;
      }
    }
    else if ((v10 & 2) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 116) & 0x200) != 0)
    {
      if ((*(_WORD *)(a2 + 116) & 0x200) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
        return 0;
      }
    }
    else if ((*(_WORD *)(a2 + 116) & 0x200) != 0)
    {
      return 0;
    }
    if (v9)
    {
      if ((v10 & 1) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
        return 0;
      }
    }
    else if (v10)
    {
      return 0;
    }
    if ((v9 & 8) != 0)
    {
      if ((v10 & 8) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
        return 0;
      }
    }
    else if ((v10 & 8) != 0)
    {
      return 0;
    }
    if ((v9 & 0x80) != 0)
    {
      if ((v10 & 0x80) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
        return 0;
      }
    }
    else if ((v10 & 0x80) != 0)
    {
      return 0;
    }
    __int16 v12 = *(float **)(a1 + 32);
    float v11 = *(float **)(a1 + 40);
    char v13 = *(float **)(a2 + 32);
    if ((char *)v11 - (char *)v12 == *(void *)(a2 + 40) - (void)v13)
    {
      while (v12 != v11)
      {
        if (*v12 != *v13) {
          return 0;
        }
        ++v12;
        ++v13;
      }
      if ((v9 & 4) != 0)
      {
        if ((v10 & 4) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
          return 0;
        }
      }
      else if ((v10 & 4) != 0)
      {
        return 0;
      }
      BOOL result = (v10 & 0x400) == 0;
      if ((*(_WORD *)(a1 + 116) & 0x400) == 0) {
        return result;
      }
      if ((*(_WORD *)(a2 + 116) & 0x400) != 0 && *(unsigned __int8 *)(a1 + 112) == *(unsigned __int8 *)(a2 + 112)) {
        return 1;
      }
    }
  }
  return 0;
}

BOOL CMMsl::AuxiliaryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 152) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 152) & 2) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 152) & 2) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 56);
  unint64_t v2 = *(float **)(a1 + 64);
  uint64_t v4 = *(float **)(a2 + 56);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 64) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(float **)(a1 + 80);
  uint64_t v5 = *(float **)(a1 + 88);
  float v7 = *(float **)(a2 + 80);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 88) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  __int16 v9 = *(float **)(a1 + 32);
  __int16 v8 = *(float **)(a1 + 40);
  __int16 v10 = *(float **)(a2 + 32);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 40) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  __int16 v12 = *(float **)(a1 + 8);
  float v11 = *(float **)(a1 + 16);
  char v13 = *(float **)(a2 + 8);
  if ((char *)v11 - (char *)v12 != *(void *)(a2 + 16) - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*v12 != *v13) {
      return 0;
    }
    ++v12;
    ++v13;
  }
  if ((*(unsigned char *)(a1 + 152) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 152) & 8) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 152) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 152))
  {
    if ((*(unsigned char *)(a2 + 152) & 1) == 0 || *(void *)(a1 + 128) != *(void *)(a2 + 128)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 152))
  {
    return 0;
  }
  unint64_t v15 = *(float **)(a1 + 104);
  unsigned int v14 = *(float **)(a1 + 112);
  unint64_t v16 = *(float **)(a2 + 104);
  if ((char *)v14 - (char *)v15 != *(void *)(a2 + 112) - (void)v16) {
    return 0;
  }
  while (v15 != v14)
  {
    if (*v15 != *v16) {
      return 0;
    }
    ++v15;
    ++v16;
  }
  BOOL v17 = (*(unsigned char *)(a2 + 152) & 4) == 0;
  if ((*(unsigned char *)(a1 + 152) & 4) != 0) {
    return (*(unsigned char *)(a2 + 152) & 4) != 0 && *(_DWORD *)(a1 + 144) == *(_DWORD *)(a2 + 144);
  }
  return v17;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::hash_value(CMMsl::AudioAccessoryDeviceMotion *this)
{
  unint64_t v2 = (CMMsl::AuxiliaryDeviceMotion *)*((void *)this + 9);
  if (v2) {
    uint64_t v22 = CMMsl::AuxiliaryDeviceMotion::hash_value(v2);
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v3 = PBHashBytes();
  __int16 v4 = *((_WORD *)this + 58);
  if ((v4 & 0x40) != 0)
  {
    float v13 = *((float *)this + 24);
    if (v13 == 0.0) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = LODWORD(v13);
    }
    if ((v4 & 0x20) != 0)
    {
LABEL_6:
      uint64_t v6 = *((unsigned int *)this + 23);
      if ((v4 & 0x10) != 0) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if ((v4 & 0x20) != 0) {
      goto LABEL_6;
    }
  }
  uint64_t v6 = 0;
  if ((v4 & 0x10) != 0)
  {
LABEL_7:
    uint64_t v7 = *((unsigned int *)this + 22);
    if ((*((_WORD *)this + 58) & 0x100) != 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 58) & 0x100) != 0)
  {
LABEL_8:
    uint64_t v21 = *((unsigned int *)this + 26);
    if ((v4 & 2) != 0) {
      goto LABEL_9;
    }
LABEL_25:
    uint64_t v8 = 0;
    if ((*((_WORD *)this + 58) & 0x200) != 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_24:
  uint64_t v21 = 0;
  if ((v4 & 2) == 0) {
    goto LABEL_25;
  }
LABEL_9:
  if (*((double *)this + 8) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 8);
  }
  if ((*((_WORD *)this + 58) & 0x200) != 0)
  {
LABEL_13:
    uint64_t v9 = *((int *)this + 27);
    if (v4) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v9 = 0;
  if (v4)
  {
LABEL_14:
    uint64_t v10 = *((void *)this + 7);
    if ((v4 & 8) != 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v10 = 0;
  if ((v4 & 8) != 0)
  {
LABEL_15:
    float v11 = *((float *)this + 21);
    if (v11 == 0.0) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = LODWORD(v11);
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v12 = 0;
LABEL_29:
  uint64_t v14 = v3;
  if ((v4 & 0x80) != 0)
  {
    float v16 = *((float *)this + 25);
    if (v16 == 0.0) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = LODWORD(v16);
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v17 = PBHashBytes();
  if ((*((_WORD *)this + 58) & 4) != 0) {
    uint64_t v18 = *((unsigned int *)this + 20);
  }
  else {
    uint64_t v18 = 0;
  }
  if ((*((_WORD *)this + 58) & 0x400) != 0) {
    uint64_t v19 = *((unsigned __int8 *)this + 112);
  }
  else {
    uint64_t v19 = 0;
  }
  return v14 ^ v22 ^ v5 ^ v6 ^ v7 ^ v21 ^ v8 ^ v9 ^ v10 ^ v12 ^ v15 ^ v17 ^ v18 ^ v19;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

void CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion(CMMsl::AuxiliaryDeviceMotion *this)
{
  *(void *)this = off_1003A4800;
  unint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  __int16 v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion(this);

  operator delete();
}

CMMsl::AuxiliaryDeviceMotion *CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(CMMsl::AuxiliaryDeviceMotion *this, const CMMsl::AuxiliaryDeviceMotion *a2)
{
  *(void *)this = off_1003A4800;
  *(_OWORD *)((char *)this + 8) = 0u;
  __int16 v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 38) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0;
  if ((*((unsigned char *)a2 + 152) & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 17);
    *((unsigned char *)this + 152) = 2;
    *((void *)this + 17) = v6;
  }
  if (this != a2)
  {
    sub_100024308(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    sub_100024308((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  char v7 = *((unsigned char *)a2 + 152);
  if ((v7 & 8) != 0)
  {
    int v8 = *((_DWORD *)a2 + 37);
    *((unsigned char *)this + 152) |= 8u;
    *((_DWORD *)this + 37) = v8;
    char v7 = *((unsigned char *)a2 + 152);
  }
  if (v7)
  {
    uint64_t v9 = *((void *)a2 + 16);
    *((unsigned char *)this + 152) |= 1u;
    *((void *)this + 16) = v9;
  }
  if (this != a2) {
    sub_100024308((char *)this + 104, *((char **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
  }
  if ((*((unsigned char *)a2 + 152) & 4) != 0)
  {
    int v10 = *((_DWORD *)a2 + 36);
    *((unsigned char *)this + 152) |= 4u;
    *((_DWORD *)this + 36) = v10;
  }
  return this;
}

CMMsl *CMMsl::AuxiliaryDeviceMotion::operator=(CMMsl *a1, const CMMsl::AuxiliaryDeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion((CMMsl::AuxiliaryDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AuxiliaryDeviceMotion *)v5, v3);
    CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion((CMMsl::AuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AuxiliaryDeviceMotion *a2, CMMsl::AuxiliaryDeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v5;
  uint64_t v6 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v6;
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v7;
  uint64_t v8 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v8;
  uint64_t v9 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v11;
  uint64_t v12 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v12;
  uint64_t v13 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v13;
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v14;
  uint64_t v15 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v15;
  LODWORD(v15) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v15;
  uint64_t v16 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v16;
  uint64_t v17 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v17;
  uint64_t v19 = *((void *)this + 15);
  uint64_t v18 = *((void *)this + 16);
  uint64_t v20 = *((void *)a2 + 16);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)this + 16) = v20;
  double result = *((double *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((double *)a2 + 17) = result;
  *((void *)a2 + 15) = v19;
  *((void *)a2 + 16) = v18;
  LODWORD(v18) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v18;
  return result;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4800;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v6 = a1 + 104;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v7 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  sub_100274A30(v5, (__n128 *)(a2 + 80));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  sub_100274A30(v7, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  sub_100274A30(v6, (__n128 *)(a2 + 104));
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  return a1;
}

CMMsl *CMMsl::AuxiliaryDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AuxiliaryDeviceMotion *)v5, v3);
    CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion((CMMsl::AuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::formatText(CMMsl::AuxiliaryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "acceleration", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "biasCovariance", v10);
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "quaternion", v13);
  }
  uint64_t v14 = (float *)*((void *)this + 10);
  uint64_t v15 = (float *)*((void *)this + 11);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(a2, "rotationRate", v16);
  }
  char v17 = *((unsigned char *)this + 152);
  if (v17)
  {
    PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 16));
    char v17 = *((unsigned char *)this + 152);
    if ((v17 & 4) == 0)
    {
LABEL_11:
      if ((v17 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_21;
    }
  }
  else if ((*((unsigned char *)this + 152) & 4) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 36));
  char v17 = *((unsigned char *)this + 152);
  if ((v17 & 8) == 0)
  {
LABEL_12:
    if ((v17 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "statusDeprecated", *((_DWORD *)this + 37));
  if ((*((unsigned char *)this + 152) & 2) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 17));
LABEL_14:
  uint64_t v18 = (float *)*((void *)this + 13);
  uint64_t v19 = (float *)*((void *)this + 14);
  while (v18 != v19)
  {
    float v20 = *v18++;
    PB::TextFormatter::format(a2, "userAcceleration", v20);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AuxiliaryDeviceMotion::readFrom(CMMsl::AuxiliaryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 104);
    uint64_t v9 = (void **)((char *)this + 8);
    v191 = (char *)this + 24;
    v192 = (char *)this + 120;
    float v10 = (void **)((char *)this + 32);
    uint64_t v11 = (void **)((char *)this + 80);
    v189 = (char *)this + 96;
    v190 = (char *)this + 48;
    uint64_t v12 = (void **)((char *)this + 56);
    v188 = (char *)this + 72;
    while (1)
    {
      uint64_t v13 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        BOOL v19 = v15++ > 8;
        if (v19) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 152) |= 2u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
            goto LABEL_291;
          }
          *((void *)this + 17) = *(void *)(*(void *)a2 + v26);
          uint64_t v27 = *((void *)a2 + 1) + 8;
          goto LABEL_293;
        case 2u:
          if (v25 != 2)
          {
            unint64_t v123 = (char *)*((void *)this + 8);
            unint64_t v122 = *((void *)this + 9);
            if ((unint64_t)v123 >= v122)
            {
              v145 = (char *)*v12;
              uint64_t v146 = (v123 - (unsigned char *)*v12) >> 2;
              unint64_t v147 = v146 + 1;
              if ((unint64_t)(v146 + 1) >> 62) {
LABEL_304:
              }
                sub_10000EE98();
              uint64_t v148 = v122 - (void)v145;
              if (v148 >> 1 > v147) {
                unint64_t v147 = v148 >> 1;
              }
              if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v149 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v149 = v147;
              }
              if (v149)
              {
                v150 = (char *)sub_100024458((uint64_t)v188, v149);
                v145 = (char *)*((void *)this + 7);
                unint64_t v123 = (char *)*((void *)this + 8);
              }
              else
              {
                v150 = 0;
              }
              v175 = &v150[4 * v146];
              *(_DWORD *)v175 = 0;
              char v124 = v175 + 4;
              while (v123 != v145)
              {
                int v176 = *((_DWORD *)v123 - 1);
                v123 -= 4;
                *((_DWORD *)v175 - 1) = v176;
                v175 -= 4;
              }
              *((void *)this + 7) = v175;
              *((void *)this + 8) = v124;
              *((void *)this + 9) = &v150[4 * v149];
              if (v145) {
                operator delete(v145);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v123 = 0;
              char v124 = v123 + 4;
            }
            *((void *)this + 8) = v124;
            goto LABEL_289;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          while (v28 < v29 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v31 = (char *)*((void *)this + 8);
            unint64_t v30 = *((void *)this + 9);
            if ((unint64_t)v31 >= v30)
            {
              uint64_t v33 = (char *)*v12;
              uint64_t v34 = (v31 - (unsigned char *)*v12) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_304;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                unint64_t v38 = (char *)sub_100024458((uint64_t)v188, v37);
                uint64_t v33 = (char *)*((void *)this + 7);
                uint64_t v31 = (char *)*((void *)this + 8);
              }
              else
              {
                unint64_t v38 = 0;
              }
              unint64_t v39 = &v38[4 * v34];
              *(_DWORD *)unint64_t v39 = 0;
              unint64_t v32 = v39 + 4;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *((void *)this + 7) = v39;
              *((void *)this + 8) = v32;
              *((void *)this + 9) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v31 = 0;
              unint64_t v32 = v31 + 4;
            }
            *((void *)this + 8) = v32;
            unint64_t v41 = *((void *)a2 + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2)) {
              goto LABEL_169;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
            unint64_t v29 = *((void *)a2 + 2);
            unint64_t v28 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v28;
          }
          goto LABEL_170;
        case 3u:
          if (v25 != 2)
          {
            unsigned int v126 = (char *)*((void *)this + 11);
            unint64_t v125 = *((void *)this + 12);
            if ((unint64_t)v126 >= v125)
            {
              v151 = (char *)*v11;
              uint64_t v152 = (v126 - (unsigned char *)*v11) >> 2;
              unint64_t v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62) {
LABEL_305:
              }
                sub_10000EE98();
              uint64_t v154 = v125 - (void)v151;
              if (v154 >> 1 > v153) {
                unint64_t v153 = v154 >> 1;
              }
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v153;
              }
              if (v155)
              {
                v156 = (char *)sub_100024458((uint64_t)v189, v155);
                v151 = (char *)*((void *)this + 10);
                unsigned int v126 = (char *)*((void *)this + 11);
              }
              else
              {
                v156 = 0;
              }
              v177 = &v156[4 * v152];
              *(_DWORD *)v177 = 0;
              char v124 = v177 + 4;
              while (v126 != v151)
              {
                int v178 = *((_DWORD *)v126 - 1);
                v126 -= 4;
                *((_DWORD *)v177 - 1) = v178;
                v177 -= 4;
              }
              *((void *)this + 10) = v177;
              *((void *)this + 11) = v124;
              *((void *)this + 12) = &v156[4 * v155];
              if (v151) {
                operator delete(v151);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v126 = 0;
              char v124 = v126 + 4;
            }
            *((void *)this + 11) = v124;
            goto LABEL_289;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          while (v42 < v43 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v45 = (char *)*((void *)this + 11);
            unint64_t v44 = *((void *)this + 12);
            if ((unint64_t)v45 >= v44)
            {
              char v47 = (char *)*v11;
              uint64_t v48 = (v45 - (unsigned char *)*v11) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_305;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                unsigned int v52 = (char *)sub_100024458((uint64_t)v189, v51);
                char v47 = (char *)*((void *)this + 10);
                uint64_t v45 = (char *)*((void *)this + 11);
              }
              else
              {
                unsigned int v52 = 0;
              }
              uint64_t v53 = &v52[4 * v48];
              *(_DWORD *)uint64_t v53 = 0;
              unint64_t v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *((void *)this + 10) = v53;
              *((void *)this + 11) = v46;
              *((void *)this + 12) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v45 = 0;
              unint64_t v46 = v45 + 4;
            }
            *((void *)this + 11) = v46;
            unint64_t v55 = *((void *)a2 + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
              goto LABEL_169;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)a2 + v55);
            unint64_t v43 = *((void *)a2 + 2);
            unint64_t v42 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v42;
          }
          goto LABEL_170;
        case 4u:
          if (v25 != 2)
          {
            char v128 = (char *)*((void *)this + 5);
            unint64_t v127 = *((void *)this + 6);
            if ((unint64_t)v128 >= v127)
            {
              v157 = (char *)*v10;
              uint64_t v158 = (v128 - (unsigned char *)*v10) >> 2;
              unint64_t v159 = v158 + 1;
              if ((unint64_t)(v158 + 1) >> 62) {
LABEL_306:
              }
                sub_10000EE98();
              uint64_t v160 = v127 - (void)v157;
              if (v160 >> 1 > v159) {
                unint64_t v159 = v160 >> 1;
              }
              if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v161 = v159;
              }
              if (v161)
              {
                v162 = (char *)sub_100024458((uint64_t)v190, v161);
                v157 = (char *)*((void *)this + 4);
                char v128 = (char *)*((void *)this + 5);
              }
              else
              {
                v162 = 0;
              }
              v179 = &v162[4 * v158];
              *(_DWORD *)v179 = 0;
              char v124 = v179 + 4;
              while (v128 != v157)
              {
                int v180 = *((_DWORD *)v128 - 1);
                v128 -= 4;
                *((_DWORD *)v179 - 1) = v180;
                v179 -= 4;
              }
              *((void *)this + 4) = v179;
              *((void *)this + 5) = v124;
              *((void *)this + 6) = &v162[4 * v161];
              if (v157) {
                operator delete(v157);
              }
            }
            else
            {
              *(_DWORD *)char v128 = 0;
              char v124 = v128 + 4;
            }
            *((void *)this + 5) = v124;
            goto LABEL_289;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v56 = *((void *)a2 + 1);
          unint64_t v57 = *((void *)a2 + 2);
          while (v56 < v57 && !*((unsigned char *)a2 + 24))
          {
            char v59 = (char *)*((void *)this + 5);
            unint64_t v58 = *((void *)this + 6);
            if ((unint64_t)v59 >= v58)
            {
              uint64_t v61 = (char *)*v10;
              uint64_t v62 = (v59 - (unsigned char *)*v10) >> 2;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62) {
                goto LABEL_306;
              }
              uint64_t v64 = v58 - (void)v61;
              if (v64 >> 1 > v63) {
                unint64_t v63 = v64 >> 1;
              }
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v63;
              }
              if (v65)
              {
                unint64_t v66 = (char *)sub_100024458((uint64_t)v190, v65);
                uint64_t v61 = (char *)*((void *)this + 4);
                char v59 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v66 = 0;
              }
              unint64_t v67 = &v66[4 * v62];
              *(_DWORD *)unint64_t v67 = 0;
              unsigned int v60 = v67 + 4;
              while (v59 != v61)
              {
                int v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *((void *)this + 4) = v67;
              *((void *)this + 5) = v60;
              *((void *)this + 6) = &v66[4 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(_DWORD *)char v59 = 0;
              unsigned int v60 = v59 + 4;
            }
            *((void *)this + 5) = v60;
            unint64_t v69 = *((void *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2)) {
              goto LABEL_169;
            }
            *(v60 - 1) = *(_DWORD *)(*(void *)a2 + v69);
            unint64_t v57 = *((void *)a2 + 2);
            unint64_t v56 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v56;
          }
          goto LABEL_170;
        case 5u:
          if (v25 != 2)
          {
            unsigned int v130 = (char *)*((void *)this + 2);
            unint64_t v129 = *((void *)this + 3);
            if ((unint64_t)v130 >= v129)
            {
              v163 = (char *)*v9;
              uint64_t v164 = (v130 - (unsigned char *)*v9) >> 2;
              unint64_t v165 = v164 + 1;
              if ((unint64_t)(v164 + 1) >> 62) {
LABEL_307:
              }
                sub_10000EE98();
              uint64_t v166 = v129 - (void)v163;
              if (v166 >> 1 > v165) {
                unint64_t v165 = v166 >> 1;
              }
              if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v167 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v167 = v165;
              }
              if (v167)
              {
                v168 = (char *)sub_100024458((uint64_t)v191, v167);
                v163 = (char *)*((void *)this + 1);
                unsigned int v130 = (char *)*((void *)this + 2);
              }
              else
              {
                v168 = 0;
              }
              v181 = &v168[4 * v164];
              *(_DWORD *)v181 = 0;
              char v124 = v181 + 4;
              while (v130 != v163)
              {
                int v182 = *((_DWORD *)v130 - 1);
                v130 -= 4;
                *((_DWORD *)v181 - 1) = v182;
                v181 -= 4;
              }
              *((void *)this + 1) = v181;
              *((void *)this + 2) = v124;
              *((void *)this + 3) = &v168[4 * v167];
              if (v163) {
                operator delete(v163);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v130 = 0;
              char v124 = v130 + 4;
            }
            *((void *)this + 2) = v124;
            goto LABEL_289;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v70 = *((void *)a2 + 1);
          unint64_t v71 = *((void *)a2 + 2);
          while (v70 < v71 && !*((unsigned char *)a2 + 24))
          {
            char v73 = (char *)*((void *)this + 2);
            unint64_t v72 = *((void *)this + 3);
            if ((unint64_t)v73 >= v72)
            {
              unint64_t v75 = (char *)*v9;
              uint64_t v76 = (v73 - (unsigned char *)*v9) >> 2;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62) {
                goto LABEL_307;
              }
              uint64_t v78 = v72 - (void)v75;
              if (v78 >> 1 > v77) {
                unint64_t v77 = v78 >> 1;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v77;
              }
              if (v79)
              {
                unint64_t v80 = (char *)sub_100024458((uint64_t)v191, v79);
                unint64_t v75 = (char *)*((void *)this + 1);
                char v73 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v80 = 0;
              }
              char v81 = &v80[4 * v76];
              *(_DWORD *)char v81 = 0;
              unint64_t v74 = v81 + 4;
              while (v73 != v75)
              {
                int v82 = *((_DWORD *)v73 - 1);
                v73 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *((void *)this + 1) = v81;
              *((void *)this + 2) = v74;
              *((void *)this + 3) = &v80[4 * v79];
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(_DWORD *)char v73 = 0;
              unint64_t v74 = v73 + 4;
            }
            *((void *)this + 2) = v74;
            unint64_t v83 = *((void *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
              goto LABEL_169;
            }
            *(v74 - 1) = *(_DWORD *)(*(void *)a2 + v83);
            unint64_t v71 = *((void *)a2 + 2);
            unint64_t v70 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v70;
          }
          goto LABEL_170;
        case 6u:
          *((unsigned char *)this + 152) |= 8u;
          unint64_t v84 = *((void *)a2 + 1);
          unint64_t v85 = *((void *)a2 + 2);
          uint64_t v86 = *(void *)a2;
          if (v84 <= 0xFFFFFFFFFFFFFFF5 && v84 + 10 <= v85)
          {
            char v87 = 0;
            unsigned int v88 = 0;
            uint64_t v89 = 0;
            do
            {
              unint64_t v90 = v84 + 1;
              *((void *)a2 + 1) = v84 + 1;
              char v91 = *(unsigned char *)(v86 + v84);
              v89 |= (unint64_t)(v91 & 0x7F) << v87;
              if ((v91 & 0x80) == 0) {
                goto LABEL_247;
              }
              v87 += 7;
              unint64_t v84 = v90;
              BOOL v19 = v88++ > 8;
            }
            while (!v19);
LABEL_185:
            LODWORD(v89) = 0;
            goto LABEL_247;
          }
          char v131 = 0;
          unsigned int v132 = 0;
          uint64_t v89 = 0;
          if (v85 <= v84) {
            unint64_t v85 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v85 == v84)
            {
              LODWORD(v89) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v133 = v84 + 1;
              char v134 = *(unsigned char *)(v86 + v84);
              *((void *)a2 + 1) = v133;
              v89 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                unint64_t v84 = v133;
                BOOL v19 = v132++ > 8;
                if (v19) {
                  goto LABEL_185;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v89) = 0;
              }
            }
            break;
          }
LABEL_247:
          *((_DWORD *)this + 37) = v89;
          goto LABEL_294;
        case 7u:
          *((unsigned char *)this + 152) |= 1u;
          unint64_t v92 = *((void *)a2 + 1);
          unint64_t v93 = *((void *)a2 + 2);
          uint64_t v94 = *(void *)a2;
          if (v92 <= 0xFFFFFFFFFFFFFFF5 && v92 + 10 <= v93)
          {
            char v95 = 0;
            unsigned int v96 = 0;
            uint64_t v97 = 0;
            do
            {
              unint64_t v98 = v92 + 1;
              *((void *)a2 + 1) = v92 + 1;
              char v99 = *(unsigned char *)(v94 + v92);
              v97 |= (unint64_t)(v99 & 0x7F) << v95;
              if ((v99 & 0x80) == 0) {
                goto LABEL_250;
              }
              v95 += 7;
              unint64_t v92 = v98;
              BOOL v19 = v96++ > 8;
            }
            while (!v19);
LABEL_192:
            uint64_t v97 = 0;
            goto LABEL_250;
          }
          char v135 = 0;
          unsigned int v136 = 0;
          uint64_t v97 = 0;
          if (v93 <= v92) {
            unint64_t v93 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v93 == v92)
            {
              uint64_t v97 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v137 = v92 + 1;
              char v138 = *(unsigned char *)(v94 + v92);
              *((void *)a2 + 1) = v137;
              v97 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                unint64_t v92 = v137;
                BOOL v19 = v136++ > 8;
                if (v19) {
                  goto LABEL_192;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v97 = 0;
              }
            }
            break;
          }
LABEL_250:
          *((void *)this + 16) = v97;
          goto LABEL_294;
        case 8u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v100 = *((void *)a2 + 1);
            unint64_t v101 = *((void *)a2 + 2);
            while (v100 < v101 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v103 = (char *)*((void *)this + 14);
              unint64_t v102 = *((void *)this + 15);
              if ((unint64_t)v103 >= v102)
              {
                char v105 = (char *)*v8;
                uint64_t v106 = (v103 - (unsigned char *)*v8) >> 2;
                unint64_t v107 = v106 + 1;
                if ((unint64_t)(v106 + 1) >> 62) {
                  goto LABEL_308;
                }
                uint64_t v108 = v102 - (void)v105;
                if (v108 >> 1 > v107) {
                  unint64_t v107 = v108 >> 1;
                }
                if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v109 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v109 = v107;
                }
                if (v109)
                {
                  unint64_t v110 = (char *)sub_100024458((uint64_t)v192, v109);
                  char v105 = (char *)*((void *)this + 13);
                  uint64_t v103 = (char *)*((void *)this + 14);
                }
                else
                {
                  unint64_t v110 = 0;
                }
                v111 = &v110[4 * v106];
                *(_DWORD *)v111 = 0;
                unint64_t v104 = v111 + 4;
                while (v103 != v105)
                {
                  int v112 = *((_DWORD *)v103 - 1);
                  v103 -= 4;
                  *((_DWORD *)v111 - 1) = v112;
                  v111 -= 4;
                }
                *((void *)this + 13) = v111;
                *((void *)this + 14) = v104;
                *((void *)this + 15) = &v110[4 * v109];
                if (v105) {
                  operator delete(v105);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v103 = 0;
                unint64_t v104 = v103 + 4;
              }
              *((void *)this + 14) = v104;
              unint64_t v113 = *((void *)a2 + 1);
              if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((void *)a2 + 2))
              {
LABEL_169:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v104 - 1) = *(_DWORD *)(*(void *)a2 + v113);
              unint64_t v101 = *((void *)a2 + 2);
              unint64_t v100 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v100;
            }
LABEL_170:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v140 = (char *)*((void *)this + 14);
            unint64_t v139 = *((void *)this + 15);
            if ((unint64_t)v140 >= v139)
            {
              v169 = (char *)*v8;
              uint64_t v170 = (v140 - (unsigned char *)*v8) >> 2;
              unint64_t v171 = v170 + 1;
              if ((unint64_t)(v170 + 1) >> 62) {
LABEL_308:
              }
                sub_10000EE98();
              uint64_t v172 = v139 - (void)v169;
              if (v172 >> 1 > v171) {
                unint64_t v171 = v172 >> 1;
              }
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v173 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v173 = v171;
              }
              if (v173)
              {
                v174 = (char *)sub_100024458((uint64_t)v192, v173);
                v169 = (char *)*((void *)this + 13);
                uint64_t v140 = (char *)*((void *)this + 14);
              }
              else
              {
                v174 = 0;
              }
              v183 = &v174[4 * v170];
              *(_DWORD *)v183 = 0;
              char v124 = v183 + 4;
              while (v140 != v169)
              {
                int v184 = *((_DWORD *)v140 - 1);
                v140 -= 4;
                *((_DWORD *)v183 - 1) = v184;
                v183 -= 4;
              }
              *((void *)this + 13) = v183;
              *((void *)this + 14) = v124;
              *((void *)this + 15) = &v174[4 * v173];
              if (v169) {
                operator delete(v169);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v140 = 0;
              char v124 = v140 + 4;
            }
            *((void *)this + 14) = v124;
LABEL_289:
            unint64_t v185 = *((void *)a2 + 1);
            if (v185 <= 0xFFFFFFFFFFFFFFFBLL && v185 + 4 <= *((void *)a2 + 2))
            {
              *(v124 - 1) = *(_DWORD *)(*(void *)a2 + v185);
              uint64_t v27 = *((void *)a2 + 1) + 4;
LABEL_293:
              *((void *)a2 + 1) = v27;
            }
            else
            {
LABEL_291:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_294:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 9u:
          *((unsigned char *)this + 152) |= 4u;
          unint64_t v114 = *((void *)a2 + 1);
          unint64_t v115 = *((void *)a2 + 2);
          uint64_t v116 = *(void *)a2;
          if (v114 <= 0xFFFFFFFFFFFFFFF5 && v114 + 10 <= v115)
          {
            char v117 = 0;
            unsigned int v118 = 0;
            uint64_t v119 = 0;
            do
            {
              unint64_t v120 = v114 + 1;
              *((void *)a2 + 1) = v114 + 1;
              char v121 = *(unsigned char *)(v116 + v114);
              v119 |= (unint64_t)(v121 & 0x7F) << v117;
              if ((v121 & 0x80) == 0) {
                goto LABEL_253;
              }
              v117 += 7;
              unint64_t v114 = v120;
              BOOL v19 = v118++ > 8;
            }
            while (!v19);
LABEL_201:
            LODWORD(v119) = 0;
            goto LABEL_253;
          }
          char v141 = 0;
          unsigned int v142 = 0;
          uint64_t v119 = 0;
          if (v115 <= v114) {
            unint64_t v115 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v115 == v114)
            {
              LODWORD(v119) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v143 = v114 + 1;
              char v144 = *(unsigned char *)(v116 + v114);
              *((void *)a2 + 1) = v143;
              v119 |= (unint64_t)(v144 & 0x7F) << v141;
              if (v144 < 0)
              {
                v141 += 7;
                unint64_t v114 = v143;
                BOOL v19 = v142++ > 8;
                if (v19) {
                  goto LABEL_201;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v119) = 0;
              }
            }
            break;
          }
LABEL_253:
          *((_DWORD *)this + 36) = v119;
          goto LABEL_294;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_294;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 152) & 2) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 136), 1u);
  }
  int v4 = *(float **)(v3 + 56);
  uint64_t v5 = *(float **)(v3 + 64);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  float v7 = *(float **)(v3 + 80);
  uint64_t v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  float v10 = *(float **)(v3 + 32);
  uint64_t v11 = *(float **)(v3 + 40);
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  uint64_t v13 = *(float **)(v3 + 8);
  char v14 = *(float **)(v3 + 16);
  while (v13 != v14)
  {
    float v15 = *v13++;
    this = PB::Writer::write(a2, v15, 5u);
  }
  char v16 = *(unsigned char *)(v3 + 152);
  if ((v16 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 6u);
    char v16 = *(unsigned char *)(v3 + 152);
  }
  if (v16) {
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 128), 7u);
  }
  unint64_t v17 = *(float **)(v3 + 104);
  char v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    float v19 = *v17++;
    this = PB::Writer::write(a2, v19, 8u);
  }
  if ((*(unsigned char *)(v3 + 152) & 4) != 0)
  {
    unsigned int v20 = *(_DWORD *)(v3 + 144);
    return PB::Writer::writeVarInt(a2, v20, 9u);
  }
  return this;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::hash_value(CMMsl::AuxiliaryDeviceMotion *this)
{
  if ((*((unsigned char *)this + 152) & 2) != 0)
  {
    if (*((double *)this + 17) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 17);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  if ((*((unsigned char *)this + 152) & 8) != 0)
  {
    uint64_t v7 = *((unsigned int *)this + 37);
    if (*((unsigned char *)this + 152)) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (*((unsigned char *)this + 152))
    {
LABEL_8:
      uint64_t v8 = *((void *)this + 16);
      goto LABEL_11;
    }
  }
  uint64_t v8 = 0;
LABEL_11:
  uint64_t v9 = PBHashBytes();
  if ((*((unsigned char *)this + 152) & 4) != 0) {
    uint64_t v10 = *((unsigned int *)this + 36);
  }
  else {
    uint64_t v10 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

uint64_t CMMsl::AveragedALSData::AveragedALSData(uint64_t this)
{
  *(void *)this = off_1003A4838;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A4838;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::AveragedALSData::~AveragedALSData(CMMsl::AveragedALSData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::AveragedALSData::AveragedALSData(CMMsl::AveragedALSData *this, const CMMsl::AveragedALSData *a2)
{
  *(void *)this = off_1003A4838;
  *((_DWORD *)this + 5) = 0;
  if ((*((unsigned char *)a2 + 20) & 1) == 0)
  {
    char v2 = 2;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return *(float *)&v3;
    }
    goto LABEL_5;
  }
  uint64_t v3 = *((void *)a2 + 1);
  *((unsigned char *)this + 20) = 1;
  *((void *)this + 1) = v3;
  char v2 = 3;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((unsigned char *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

uint64_t CMMsl::AveragedALSData::operator=(uint64_t a1, const CMMsl::AveragedALSData *a2)
{
  if ((const CMMsl::AveragedALSData *)a1 != a2)
  {
    CMMsl::AveragedALSData::AveragedALSData((CMMsl::AveragedALSData *)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AveragedALSData *a2, CMMsl::AveragedALSData *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::AveragedALSData::AveragedALSData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4838;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A4838;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::AveragedALSData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A4838;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    int v10 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::AveragedALSData::formatText(CMMsl::AveragedALSData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "alsTrustedLux", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AveragedALSData::readFrom(CMMsl::AveragedALSData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_28;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 4;
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_28:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
      }
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::AveragedALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::AveragedALSData::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::AveragedALSData::hash_value(CMMsl::AveragedALSData *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v3 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ *(void *)&v1;
}

uint64_t CMMsl::BTConnection::BTConnection(uint64_t this)
{
  *(void *)this = off_1003A4870;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A4870;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BTConnection::~BTConnection(CMMsl::BTConnection *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::BTConnection::BTConnection(uint64_t this, const CMMsl::BTConnection *a2)
{
  *(void *)this = off_1003A4870;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 28) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 28))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 28) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    char v6 = *((unsigned char *)a2 + 24);
    *(unsigned char *)(this + 28) = v3 | 4;
    *(unsigned char *)(this + 24) = v6;
  }
  return this;
}

uint64_t CMMsl::BTConnection::operator=(uint64_t a1, const CMMsl::BTConnection *a2)
{
  if ((const CMMsl::BTConnection *)a1 != a2)
  {
    CMMsl::BTConnection::BTConnection((uint64_t)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v9;
    int v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 24);
    *(unsigned char *)(a1 + 24) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BTConnection *a2, CMMsl::BTConnection *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 24);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)a2 + 24) = v3;
  return result;
}

double CMMsl::BTConnection::BTConnection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4870;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A4870;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

uint64_t CMMsl::BTConnection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v8 = off_1003A4870;
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    char v4 = *(unsigned char *)(a2 + 24);
    int v11 = *(_DWORD *)(a1 + 28);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 24);
    *(unsigned char *)(a1 + 24) = v4;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::BTConnection::formatText(CMMsl::BTConnection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "fConnected", *((unsigned char *)this + 24));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "fEndTime", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "fStartTime", *((double *)this + 2));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BTConnection::readFrom(CMMsl::BTConnection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v22 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v22 = v21 != 0;
        }
        *((unsigned char *)this + 24) = v22;
        goto LABEL_38;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_38;
        }
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_31:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_38;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::BTConnection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 2) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  char v5 = *(unsigned char *)(v3 + 24);

  return PB::Writer::write(a2, v5, 3u);
}

BOOL CMMsl::BTConnection::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::BTConnection::hash_value(CMMsl::BTConnection *this)
{
  if ((*((unsigned char *)this + 28) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 28))
    {
LABEL_3:
      double v2 = *((double *)this + 1);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 28) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_11:
      uint64_t v3 = 0;
      return *(void *)&v2 ^ *(void *)&v1 ^ v3;
    }
  }
  else
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 28)) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v3 = *((unsigned __int8 *)this + 24);
  return *(void *)&v2 ^ *(void *)&v1 ^ v3;
}

uint64_t CMMsl::BacklightState::BacklightState(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = off_1003A48A8;
  return this;
}

{
  *(_DWORD *)(this + 28) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = off_1003A48A8;
  return this;
}

void CMMsl::BacklightState::~BacklightState(CMMsl::BacklightState *this)
{
  *(void *)this = off_1003A48A8;
  uint64_t v4 = *((void *)this + 2);
  double v2 = (void *)((char *)this + 16);
  uint64_t v3 = v4;
  *double v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    sub_100012E84((uint64_t)this + 8, v5);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BacklightState::~BacklightState(this);

  operator delete();
}

uint64_t CMMsl::BacklightState::BacklightState(uint64_t this, const CMMsl::BacklightState *a2)
{
  *(void *)(this + 8) = 0;
  *(void *)this = off_1003A48A8;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 28) = 0;
  if (*((unsigned char *)a2 + 28))
  {
    int v2 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) = 1;
    *(_DWORD *)(this + 24) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::BacklightState::operator=(uint64_t a1, const CMMsl::BacklightState *a2)
{
  if ((const CMMsl::BacklightState *)a1 != a2)
  {
    CMMsl::BacklightState::BacklightState((uint64_t)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    CMMsl::BacklightState::~BacklightState((CMMsl::BacklightState *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BacklightState *a2, CMMsl::BacklightState *a3)
{
  int v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  return this;
}

uint64_t CMMsl::BacklightState::BacklightState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A48A8;
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = (uint64_t *)(a1 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *v4;
  *int v4 = v6;
  if (v7) {
    sub_100012E84((uint64_t)v4, v7);
  }
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v9 = *v5;
  *uint64_t v5 = v8;
  if (v9) {
    sub_100012E84(a1 + 16, v9);
  }
  return a1;
}

uint64_t CMMsl::BacklightState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::BacklightState::BacklightState((uint64_t)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    CMMsl::BacklightState::~BacklightState((CMMsl::BacklightState *)&v6);
  }
  return a1;
}

uint64_t CMMsl::BacklightState::formatText(CMMsl::BacklightState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 28)) {
    PB::TextFormatter::format(a2, "backlightState", *((_DWORD *)this + 6));
  }
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BacklightState::readFrom(CMMsl::BacklightState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v20 == 2) {
        operator new();
      }
      if (v20 == 1)
      {
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_45;
            }
            unint64_t v32 = v21 + 1;
            char v33 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v21 = v32;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
LABEL_41:
              LODWORD(v26) = 0;
              goto LABEL_45;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
            if (v14) {
              goto LABEL_41;
            }
          }
        }
LABEL_45:
        *((_DWORD *)this + 6) = v26;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BacklightState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = this;
  if (*(unsigned char *)(this + 28)) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 24), 1u);
  }
  if (*(void *)(v2 + 8)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v2 + 16))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t CMMsl::BacklightState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  int v4 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      long long v7 = (unsigned __int8 *)v4[23];
    }
    else {
      long long v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      unsigned int v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      unsigned int v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_26;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_26:
  unint64_t v12 = *(unsigned __int8 **)(a1 + 16);
  char v13 = *(unsigned __int8 ***)(a2 + 16);
  uint64_t result = v13 == 0;
  if (!v12) {
    return result;
  }
  if (!v13) {
    return 0;
  }
  uint64_t v14 = v12[23];
  if ((v14 & 0x80u) == 0) {
    char v15 = (unsigned __int8 *)v12[23];
  }
  else {
    char v15 = (unsigned __int8 *)*((void *)v12 + 1);
  }
  unsigned int v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  int v17 = (char)v16;
  if ((char)v16 < 0) {
    unsigned int v16 = v13[1];
  }
  if (v15 != v16) {
    return 0;
  }
  if (v17 >= 0) {
    char v18 = *(unsigned __int8 **)(a2 + 16);
  }
  else {
    char v18 = *v13;
  }
  if ((v14 & 0x80) != 0) {
    return !memcmp(*(const void **)v12, v18, *((void *)v12 + 1));
  }
  if (!v12[23]) {
    return 1;
  }
  uint64_t v19 = v14 - 1;
  do
  {
    int v21 = *v12++;
    int v20 = v21;
    int v23 = *v18++;
    int v22 = v23;
    BOOL v25 = v19-- != 0;
    uint64_t result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

unint64_t CMMsl::BacklightState::hash_value(CMMsl::BacklightState *this)
{
  if (*((unsigned char *)this + 28)) {
    uint64_t v2 = *((unsigned int *)this + 6);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    unint64_t v4 = sub_100012EE0((uint64_t)&v8, v3);
  }
  else {
    unint64_t v4 = 0;
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    unint64_t v6 = sub_100012EE0((uint64_t)&v9, v5);
  }
  else {
    unint64_t v6 = 0;
  }
  return v4 ^ v2 ^ v6;
}

uint64_t CMMsl::BasebandCompassCoex::BasebandCompassCoex(uint64_t this)
{
  *(void *)this = off_1003A48E0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A48E0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BasebandCompassCoex::~BasebandCompassCoex(CMMsl::BasebandCompassCoex *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::BasebandCompassCoex::BasebandCompassCoex(uint64_t this, const CMMsl::BasebandCompassCoex *a2)
{
  *(void *)this = off_1003A48E0;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 28) = v3 | 2;
    *(_DWORD *)(this + 16) = v7;
    return this;
  }
  char v6 = *((unsigned char *)a2 + 24);
  v3 |= 8u;
  *(unsigned char *)(this + 28) = v3;
  *(unsigned char *)(this + 24) = v6;
  if ((*((unsigned char *)a2 + 28) & 2) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::BasebandCompassCoex::operator=(uint64_t a1, const CMMsl::BasebandCompassCoex *a2)
{
  if ((const CMMsl::BasebandCompassCoex *)a1 != a2)
  {
    CMMsl::BasebandCompassCoex::BasebandCompassCoex((uint64_t)&v8, a2);
    uint64_t v3 = v10;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v3;
    int v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    int v12 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 24);
    *(unsigned char *)(a1 + 24) = v11;
    char v11 = v6;
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BasebandCompassCoex *a2, CMMsl::BasebandCompassCoex *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 24);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)a2 + 24) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

double CMMsl::BasebandCompassCoex::BasebandCompassCoex(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A48E0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A48E0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BasebandCompassCoex::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a1 + 24);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v9[0] = off_1003A48E0;
    int v11 = *(_DWORD *)(a1 + 28);
    char v10 = v5;
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v6;
    void v9[2] = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BasebandCompassCoex::formatText(CMMsl::BasebandCompassCoex *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "inCoex", *((unsigned char *)this + 24));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "reserved", *((_DWORD *)this + 4));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "subType", *((_DWORD *)this + 5));
  if (*((unsigned char *)this + 28)) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BasebandCompassCoex::readFrom(CMMsl::BasebandCompassCoex *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 28) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_70;
            case 2u:
              *((unsigned char *)this + 28) |= 4u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v35 = 0;
                unsigned int v36 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_64;
                  }
                  unint64_t v37 = v21++;
                  char v38 = *(unsigned char *)(v22 + v37);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  BOOL v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_63:
                    unint64_t v2 = v37 + 1;
                    goto LABEL_64;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_63;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_64;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_64:
              *((_DWORD *)this + 5) = v25;
              goto LABEL_70;
            case 3u:
              *((unsigned char *)this + 28) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 24) = v28;
              goto LABEL_70;
            case 4u:
              *((unsigned char *)this + 28) |= 2u;
              unint64_t v29 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v30 = *(void *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_69;
                  }
                  unint64_t v41 = v29++;
                  char v42 = *(unsigned char *)(v30 + v41);
                  *((void *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_68:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_68;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_69:
              *((_DWORD *)this + 4) = v33;
LABEL_70:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_70;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BasebandCompassCoex::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(unsigned char *)(v3 + 24), 3u);
      if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  unsigned int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 4u);
}

BOOL CMMsl::BasebandCompassCoex::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
    return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::BasebandCompassCoex::hash_value(CMMsl::BasebandCompassCoex *this)
{
  if (*((unsigned char *)this + 28))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 28) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 5);
      if ((*((unsigned char *)this + 28) & 8) != 0) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 28) & 2) != 0) {
        goto LABEL_5;
      }
LABEL_11:
      uint64_t v4 = 0;
      return v2 ^ *(void *)&v1 ^ v3 ^ v4;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v3 = *((unsigned __int8 *)this + 24);
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1 ^ v3 ^ v4;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(uint64_t this)
{
  *(void *)this = off_1003A4918;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A4918;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::BasebandCompassCoexConstraints::~BasebandCompassCoexConstraints(CMMsl::BasebandCompassCoexConstraints *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(uint64_t this, const CMMsl::BasebandCompassCoexConstraints *a2)
{
  *(void *)this = off_1003A4918;
  *(_DWORD *)(this + 48) = 0;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    __int16 v3 = 2;
    *(_WORD *)(this + 48) = 2;
    *(void *)(this + 16) = v4;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if (v2)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 48) = v3;
    *(void *)(this + 8) = v5;
    __int16 v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    int v6 = *((_DWORD *)a2 + 10);
    v3 |= 0x40u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 40) = v6;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 28) = v7;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x400) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v8 = *((unsigned char *)a2 + 47);
  v3 |= 0x400u;
  *(_WORD *)(this + 48) = v3;
  *(unsigned char *)(this + 47) = v8;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  char v9 = *((unsigned char *)a2 + 45);
  v3 |= 0x100u;
  *(_WORD *)(this + 48) = v3;
  *(unsigned char *)(this + 45) = v9;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  char v10 = *((unsigned char *)a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(this + 48) = v3;
  *(unsigned char *)(this + 44) = v10;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v11 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v11;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v12 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 32) = v12;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      return this;
    }
LABEL_24:
    char v14 = *((unsigned char *)a2 + 46);
    *(_WORD *)(this + 48) = v3 | 0x200;
    *(unsigned char *)(this + 46) = v14;
    return this;
  }
LABEL_23:
  int v13 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 24) = v13;
  if ((*((_WORD *)a2 + 24) & 0x200) != 0) {
    goto LABEL_24;
  }
  return this;
}

CMMsl *CMMsl::BasebandCompassCoexConstraints::operator=(CMMsl *a1, const CMMsl::BasebandCompassCoexConstraints *a2)
{
  if (a1 != a2)
  {
    CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BasebandCompassCoexConstraints *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::BasebandCompassCoexConstraints *a2, CMMsl::BasebandCompassCoexConstraints *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v5) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LOBYTE(v3) = *((unsigned char *)this + 47);
  *((unsigned char *)this + 47) = *((unsigned char *)a2 + 47);
  *((unsigned char *)a2 + 47) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 45);
  *((unsigned char *)this + 45) = *((unsigned char *)a2 + 45);
  *((unsigned char *)a2 + 45) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v3;
  int v6 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v6;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LOBYTE(v6) = *((unsigned char *)this + 46);
  *((unsigned char *)this + 46) = *((unsigned char *)a2 + 46);
  *((unsigned char *)a2 + 46) = v6;
  return result;
}

float CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4918;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 47);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 46);
  return result;
}

CMMsl *CMMsl::BasebandCompassCoexConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BasebandCompassCoexConstraints *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::formatText(CMMsl::BasebandCompassCoexConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "activeCoex", *((unsigned char *)this + 44));
    __int16 v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "avgTemperature", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "blackout", *((unsigned char *)this + 45));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "gradient", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "instTemperature", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "isSettle", *((unsigned char *)this + 46));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "rapidGradientChange", *((unsigned char *)this + 47));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 9));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "temperature", *((float *)this + 10));
  if ((*((_WORD *)this + 24) & 2) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BasebandCompassCoexConstraints::readFrom(CMMsl::BasebandCompassCoexConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 24) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_30;
            case 2u:
              *((_WORD *)this + 24) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_30:
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_75;
            case 3u:
              *((_WORD *)this + 24) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 4u:
              *((_WORD *)this + 24) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 5u:
              *((_WORD *)this + 24) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 47) = v22;
              goto LABEL_81;
            case 6u:
              *((_WORD *)this + 24) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *((unsigned char *)this + 45) = v24;
              goto LABEL_81;
            case 7u:
              *((_WORD *)this + 24) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *((unsigned char *)this + 44) = v26;
              goto LABEL_81;
            case 8u:
              *((_WORD *)this + 24) |= 0x20u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v35 = 0;
                unsigned int v36 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_80;
                  }
                  unint64_t v37 = v27++;
                  char v38 = *(unsigned char *)(v28 + v37);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  BOOL v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_79:
                    unint64_t v2 = v37 + 1;
                    goto LABEL_80;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_79;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_80;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_80:
              *((_DWORD *)this + 9) = v31;
LABEL_81:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *((_WORD *)this + 24) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 0xAu:
              *((_WORD *)this + 24) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_74:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_75:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_55:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_81;
            case 0xBu:
              *((_WORD *)this + 24) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 46) = v34;
              goto LABEL_81;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_81;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 48);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 3u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 47), 5u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 45), 6u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 44), 7u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 8u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xAu);
    if ((*(_WORD *)(v3 + 48) & 0x200) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 9u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x200) == 0) {
    return this;
  }
LABEL_23:
  char v5 = *(unsigned char *)(v3 + 46);

  return PB::Writer::write(a2, v5, 0xBu);
}

BOOL CMMsl::BasebandCompassCoexConstraints::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 48);
  __int16 v3 = *(_WORD *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 47) != *(unsigned __int8 *)(a2 + 47)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 48) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 48) & 0x200) != 0) {
    return (*(_WORD *)(a2 + 48) & 0x200) != 0 && *(unsigned __int8 *)(a1 + 46) == *(unsigned __int8 *)(a2 + 46);
  }
  return v4;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::hash_value(CMMsl::BasebandCompassCoexConstraints *this)
{
  __int16 v1 = *((_WORD *)this + 24);
  if ((v1 & 2) == 0)
  {
    double v2 = 0.0;
    if (v1) {
      goto LABEL_3;
    }
LABEL_26:
    double v3 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_6;
    }
LABEL_27:
    uint64_t v5 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_28:
    uint64_t v7 = 0;
    if ((*((_WORD *)this + 24) & 0x400) != 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_3:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_27;
  }
LABEL_6:
  float v4 = *((float *)this + 10);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_28;
  }
LABEL_9:
  float v6 = *((float *)this + 7);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((_WORD *)this + 24) & 0x400) != 0)
  {
LABEL_12:
    uint64_t v8 = *((unsigned __int8 *)this + 47);
    if ((*((_WORD *)this + 24) & 0x100) != 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v8 = 0;
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_13:
    uint64_t v9 = *((unsigned __int8 *)this + 45);
    if ((v1 & 0x80) != 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v9 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    uint64_t v10 = *((unsigned __int8 *)this + 44);
    if ((v1 & 0x20) != 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v10 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_15:
    uint64_t v11 = *((unsigned int *)this + 9);
    if ((v1 & 0x10) != 0) {
      goto LABEL_16;
    }
LABEL_33:
    uint64_t v13 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_32:
  uint64_t v11 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_33;
  }
LABEL_16:
  float v12 = *((float *)this + 8);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_19:
    float v14 = *((float *)this + 6);
    uint64_t v15 = LODWORD(v14);
    if (v14 == 0.0) {
      uint64_t v15 = 0;
    }
    if ((*((_WORD *)this + 24) & 0x200) != 0) {
      goto LABEL_22;
    }
LABEL_35:
    uint64_t v16 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16;
  }
LABEL_34:
  uint64_t v15 = 0;
  if ((*((_WORD *)this + 24) & 0x200) == 0) {
    goto LABEL_35;
  }
LABEL_22:
  uint64_t v16 = *((unsigned __int8 *)this + 46);
  return *(void *)&v3 ^ *(void *)&v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16;
}

uint64_t CMMsl::BasebandSpeed::BasebandSpeed(uint64_t this)
{
  *(void *)this = off_1003A4950;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A4950;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::BasebandSpeed::~BasebandSpeed(CMMsl::BasebandSpeed *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::BasebandSpeed::BasebandSpeed(uint64_t this, const CMMsl::BasebandSpeed *a2)
{
  *(void *)this = off_1003A4950;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 28) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 4);
      *(unsigned char *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 20) = v7;
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::BasebandSpeed::operator=(uint64_t a1, const CMMsl::BasebandSpeed *a2)
{
  if ((const CMMsl::BasebandSpeed *)a1 != a2)
  {
    CMMsl::BasebandSpeed::BasebandSpeed((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BasebandSpeed *a2, CMMsl::BasebandSpeed *a3)
{
  int v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::BasebandSpeed::BasebandSpeed(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A4950;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = off_1003A4950;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BasebandSpeed::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[0] = off_1003A4950;
    v9[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BasebandSpeed::formatText(CMMsl::BasebandSpeed *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "reserved", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "scaledValue", *((_DWORD *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "speedRange", *((_DWORD *)this + 6));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "speedThreshold", *((_DWORD *)this + 7));
  if (*((unsigned char *)this + 32)) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BasebandSpeed::readFrom(CMMsl::BasebandSpeed *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)a2 + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v53 = v20++;
                  char v54 = *(unsigned char *)(v21 + v53);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_102;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_102:
                unint64_t v3 = v53 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v3 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_103;
                  }
                  v22 += 7;
                  unint64_t v20 = v3;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_103:
              *((void *)this + 1) = v24;
              goto LABEL_124;
            case 2u:
              *((unsigned char *)this + 32) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_108;
                  }
                  unint64_t v57 = v27++;
                  char v58 = *(unsigned char *)(v28 + v57);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_107:
                    unint64_t v3 = v57 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_107;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v3 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_108;
                }
                v29 += 7;
                unint64_t v27 = v3;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_108:
              *((_DWORD *)this + 7) = v31;
              goto LABEL_124;
            case 3u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_113;
                  }
                  unint64_t v61 = v33++;
                  char v62 = *(unsigned char *)(v34 + v61);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_112:
                    unint64_t v3 = v61 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_112;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v3 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_113;
                }
                v35 += 7;
                unint64_t v33 = v3;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_113:
              *((_DWORD *)this + 6) = v37;
              goto LABEL_124;
            case 4u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_118;
                  }
                  unint64_t v65 = v39++;
                  char v66 = *(unsigned char *)(v40 + v65);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_117:
                    unint64_t v3 = v65 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_117;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v3 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_118;
                }
                v41 += 7;
                unint64_t v39 = v3;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_118:
              *((_DWORD *)this + 5) = v43;
              goto LABEL_124;
            case 5u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_123;
                  }
                  unint64_t v69 = v45++;
                  char v70 = *(unsigned char *)(v46 + v69);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_122:
                    unint64_t v3 = v69 + 1;
                    goto LABEL_123;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_122;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v3 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_123;
                }
                v47 += 7;
                unint64_t v45 = v3;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_123:
              *((_DWORD *)this + 4) = v49;
LABEL_124:
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              goto LABEL_124;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BasebandSpeed::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 4u);
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_11:
  unsigned int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 5u);
}

BOOL CMMsl::BasebandSpeed::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::BasebandSpeed::hash_value(CMMsl::BasebandSpeed *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 7);
      if ((*((unsigned char *)this + 32) & 8) != 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v4 = 0;
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_11:
    uint64_t v5 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5;
  }
LABEL_9:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v5 = *((unsigned int *)this + 4);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5;
}

uint64_t CMMsl::BaselineResetCheck::BaselineResetCheck(uint64_t this)
{
  *(void *)this = off_1003A4988;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A4988;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BaselineResetCheck::~BaselineResetCheck(CMMsl::BaselineResetCheck *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::BaselineResetCheck::BaselineResetCheck(CMMsl::BaselineResetCheck *this, const CMMsl::BaselineResetCheck *a2)
{
  *(void *)this = off_1003A4988;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 0x10) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 25);
    v3 |= 0x10u;
    *((unsigned char *)this + 28) = v3;
    *((unsigned char *)this + 25) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    char v6 = *((unsigned char *)a2 + 24);
    v3 |= 8u;
    *((unsigned char *)this + 28) = v3;
    *((unsigned char *)this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return result;
      }
LABEL_12:
      float result = *((float *)a2 + 4);
      *((unsigned char *)this + 28) = v3 | 2;
      *((float *)this + 4) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 28) = v3;
  *((float *)this + 5) = result;
  if ((*((unsigned char *)a2 + 28) & 2) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::BaselineResetCheck::operator=(uint64_t a1, const CMMsl::BaselineResetCheck *a2)
{
  if ((const CMMsl::BaselineResetCheck *)a1 != a2)
  {
    CMMsl::BaselineResetCheck::BaselineResetCheck((CMMsl::BaselineResetCheck *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v11;
    int v11 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    LOWORD(v4) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v10;
    __int16 v10 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::BaselineResetCheck *a2, CMMsl::BaselineResetCheck *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 25);
  *((unsigned char *)this + 25) = *((unsigned char *)a2 + 25);
  *((unsigned char *)a2 + 25) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 24);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)a2 + 24) = v4;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::BaselineResetCheck::BaselineResetCheck(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4988;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A4988;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::BaselineResetCheck::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v5 = *(_WORD *)(a2 + 24);
    int v12 = *(_DWORD *)(a1 + 28);
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[0] = off_1003A4988;
    v10[1] = v6;
    LOWORD(v4) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v5;
    __int16 v11 = v4;
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 28) = v3;
    *(void *)(a1 + 16) = v8;
    v10[2] = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::BaselineResetCheck::formatText(CMMsl::BaselineResetCheck *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "lux", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "minPostSUIProx", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "possibleObstructed", *((unsigned char *)this + 24));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "resetTriggered", *((unsigned char *)this + 25));
  if (*((unsigned char *)this + 28)) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BaselineResetCheck::readFrom(CMMsl::BaselineResetCheck *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 28) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_58;
                  }
                  unint64_t v33 = v20++;
                  char v34 = *(unsigned char *)(v21 + v33);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  BOOL v14 = v32++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_57;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_57:
                unint64_t v2 = v33 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_58;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_58:
              *((void *)this + 1) = v24;
              goto LABEL_59;
            case 2u:
              *((unsigned char *)this + 28) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 25) = v28;
              goto LABEL_59;
            case 3u:
              *((unsigned char *)this + 28) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 24) = v30;
              goto LABEL_59;
            case 4u:
              *((unsigned char *)this + 28) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_40;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_53;
            case 5u:
              *((unsigned char *)this + 28) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_53:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_40:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_59;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
LABEL_59:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BaselineResetCheck::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 25), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
    if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 24), 3u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 16);

  return PB::Writer::write(a2, v5, 5u);
}

BOOL CMMsl::BaselineResetCheck::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
    return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::BaselineResetCheck::hash_value(CMMsl::BaselineResetCheck *this)
{
  if (*((unsigned char *)this + 28))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 28) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 25);
      if ((*((unsigned char *)this + 28) & 8) != 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 28) & 8) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned __int8 *)this + 24);
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_5:
    float v4 = *((float *)this + 5);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_15:
    uint64_t v7 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v7;
  }
LABEL_14:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  float v6 = *((float *)this + 4);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v2 ^ v1 ^ v3 ^ v5 ^ v7;
}

uint64_t CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(uint64_t this)
{
  *(void *)this = off_1003A49C0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A49C0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BatchedLocationFromOdometer::~BatchedLocationFromOdometer(CMMsl::BatchedLocationFromOdometer *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A49C0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BatchedLocationFromOdometer::~BatchedLocationFromOdometer(this);

  operator delete();
}

uint64_t CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(uint64_t this, const CMMsl::BatchedLocationFromOdometer *a2)
{
  *(void *)this = off_1003A49C0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 20))
  {
    int v2 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) |= 1u;
    *(_DWORD *)(this + 16) = v2;
  }
  return this;
}

const CMMsl::BatchedLocationFromOdometer *CMMsl::BatchedLocationFromOdometer::operator=(const CMMsl::BatchedLocationFromOdometer *a1, const CMMsl::BatchedLocationFromOdometer *a2)
{
  if (a1 != a2)
  {
    CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    CMMsl::BatchedLocationFromOdometer::~BatchedLocationFromOdometer((CMMsl::BatchedLocationFromOdometer *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BatchedLocationFromOdometer *a2, CMMsl::BatchedLocationFromOdometer *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A49C0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::BatchedLocationFromOdometer::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer((uint64_t)v6, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v8;
    uint64_t v8 = v4;
    CMMsl::BatchedLocationFromOdometer::~BatchedLocationFromOdometer((CMMsl::BatchedLocationFromOdometer *)v6);
  }
  return a1;
}

uint64_t CMMsl::BatchedLocationFromOdometer::formatText(CMMsl::BatchedLocationFromOdometer *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "batchedLocationFixType", *((_DWORD *)this + 4));
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BatchedLocationFromOdometer::readFrom(CMMsl::BatchedLocationFromOdometer *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v32 = v21 + 1;
            char v33 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v21 = v32;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v26) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 4) = v26;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionGPSLocation::MotionGPSLocation(uint64_t this)
{
  *(void *)this = off_1003A7698;
  *(void *)(this + 112) = 0;
  *(_DWORD *)(this + 180) = 0;
  return this;
}

{
  *(void *)this = off_1003A7698;
  *(void *)(this + 112) = 0;
  *(_DWORD *)(this + 180) = 0;
  return this;
}

uint64_t CMMsl::BatchedLocationFromOdometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::BatchedLocationFromOdometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::MotionGPSLocation::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if ((*(unsigned char *)(a1 + 20) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

BOOL CMMsl::MotionGPSLocation::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 180);
  int v3 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  int v9 = *(_DWORD *)(a1 + 180);
  int v10 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x20000) != 0)
  {
    if ((v10 & 0x20000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v10 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x80000) != 0)
  {
    if ((v10 & 0x80000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v10 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x40000) != 0)
  {
    if ((v10 & 0x40000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v10 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v9 & 0x200000) != 0)
  {
    if ((v10 & 0x200000) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v10 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x400000) != 0)
  {
    if ((v10 & 0x400000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v10 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x10000) != 0)
  {
    if ((v10 & 0x10000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v10 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x100000) != 0)
  {
    if ((v10 & 0x100000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v10 & 0x100000) != 0)
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a2 + 112);
  if (v4)
  {
    if (!v5 || !CMMsl::TrackRunData::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((v9 & 0x8000) != 0)
  {
    if ((v10 & 0x8000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v10 & 0x8000) != 0)
  {
    return 0;
  }
  BOOL result = (v10 & 0x4000) == 0;
  if ((v9 & 0x4000) == 0) {
    return result;
  }
  return (v10 & 0x4000) != 0 && *(float *)(a1 + 128) == *(float *)(a2 + 128);
}

unint64_t CMMsl::BatchedLocationFromOdometer::hash_value(CMMsl::BatchedLocationFromOdometer *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::MotionGPSLocation::hash_value((CMMsl::MotionGPSLocation *)v2);
  }
  if (*((unsigned char *)this + 20)) {
    uint64_t v3 = *((unsigned int *)this + 4);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::BatchedLocationFromOdometer::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::BatterySaverModeStatus::BatterySaverModeStatus(uint64_t this)
{
  *(void *)this = off_1003A49F8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = off_1003A49F8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::BatterySaverModeStatus::~BatterySaverModeStatus(CMMsl::BatterySaverModeStatus *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::BatterySaverModeStatus::BatterySaverModeStatus(uint64_t this, const CMMsl::BatterySaverModeStatus *a2)
{
  *(void *)this = off_1003A49F8;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(void *)this = off_1003A49F8;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::BatterySaverModeStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v7 = off_1003A49F8;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::BatterySaverModeStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    uint64_t v7 = off_1003A49F8;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BatterySaverModeStatus *a2, CMMsl::BatterySaverModeStatus *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::BatterySaverModeStatus::BatterySaverModeStatus(uint64_t result, uint64_t a2)
{
  *(void *)BOOL result = off_1003A49F8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  *(void *)BOOL result = off_1003A49F8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t CMMsl::BatterySaverModeStatus::formatText(CMMsl::BatterySaverModeStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "isBatterySaverModeEnabled", *((unsigned char *)this + 8));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BatterySaverModeStatus::readFrom(CMMsl::BatterySaverModeStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 8) = v21;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BatterySaverModeStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(unsigned char *)(this + 8), 1u);
  }
  return this;
}

BOOL CMMsl::BatterySaverModeStatus::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::BatterySaverModeStatus::hash_value(CMMsl::BatterySaverModeStatus *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

uint64_t CMMsl::BatteryStatus::BatteryStatus(uint64_t this)
{
  *(void *)this = off_1003A4A30;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A4A30;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BatteryStatus::~BatteryStatus(CMMsl::BatteryStatus *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::BatteryStatus::BatteryStatus(uint64_t this, const CMMsl::BatteryStatus *a2)
{
  *(void *)this = off_1003A4A30;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 24);
    v3 |= 8u;
    *(unsigned char *)(this + 28) = v3;
    *(unsigned char *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    char v6 = *((unsigned char *)a2 + 25);
    v3 |= 0x10u;
    *(unsigned char *)(this + 28) = v3;
    *(unsigned char *)(this + 25) = v6;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 28) = v3;
  *(_DWORD *)(this + 20) = v7;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_14:
    int v9 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 28) = v3 | 2;
    *(_DWORD *)(this + 16) = v9;
    return this;
  }
LABEL_13:
  char v8 = *((unsigned char *)a2 + 26);
  v3 |= 0x20u;
  *(unsigned char *)(this + 28) = v3;
  *(unsigned char *)(this + 26) = v8;
  if ((*((unsigned char *)a2 + 28) & 2) != 0) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::BatteryStatus::operator=(uint64_t a1, const CMMsl::BatteryStatus *a2)
{
  if ((const CMMsl::BatteryStatus *)a1 != a2)
  {
    CMMsl::BatteryStatus::BatteryStatus((uint64_t)&v8, a2);
    uint64_t v3 = v10;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v3;
    int v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v6;
    LOWORD(v6) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v11;
    __int16 v11 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 26);
    *(unsigned char *)(a1 + 26) = v12;
    char v12 = v6;
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BatteryStatus *a2, CMMsl::BatteryStatus *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 24);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)a2 + 24) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 25);
  *((unsigned char *)this + 25) = *((unsigned char *)a2 + 25);
  *((unsigned char *)a2 + 25) = v3;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 26);
  *((unsigned char *)this + 26) = *((unsigned char *)a2 + 26);
  *((unsigned char *)a2 + 26) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

double CMMsl::BatteryStatus::BatteryStatus(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4A30;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A4A30;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BatteryStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 26);
    __int16 v6 = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
    char v7 = *(unsigned char *)(a1 + 26);
    *(unsigned char *)(a1 + 26) = v5;
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v11[0] = off_1003A4A30;
    int v14 = *(_DWORD *)(a1 + 28);
    __int16 v12 = v6;
    char v13 = v7;
    *(_DWORD *)(a1 + 28) = v3;
    v11[1] = v8;
    v11[2] = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::BatteryStatus::formatText(CMMsl::BatteryStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "charged", *((unsigned char *)this + 24));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "chargerFamily", *((_DWORD *)this + 4));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "chargerType", *((_DWORD *)this + 5));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "connected", *((unsigned char *)this + 25));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "level", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "wasConnected", *((unsigned char *)this + 26));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BatteryStatus::readFrom(CMMsl::BatteryStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 28) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_78;
            case 2u:
              *((unsigned char *)this + 28) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 24) = v22;
              goto LABEL_78;
            case 3u:
              *((unsigned char *)this + 28) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *((unsigned char *)this + 25) = v24;
              goto LABEL_78;
            case 4u:
              *((unsigned char *)this + 28) |= 4u;
              unint64_t v25 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v26 = *(void *)a2;
              if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v29 = 0;
                if (v2 <= v25) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v25)
                  {
                    LODWORD(v29) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_72;
                  }
                  unint64_t v41 = v25++;
                  char v42 = *(unsigned char *)(v26 + v41);
                  *((void *)a2 + 1) = v25;
                  v29 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v29) = 0;
LABEL_71:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v29) = 0;
                }
                goto LABEL_71;
              }
              char v27 = 0;
              unsigned int v28 = 0;
              uint64_t v29 = 0;
              do
              {
                unint64_t v2 = v25 + 1;
                *((void *)a2 + 1) = v25 + 1;
                char v30 = *(unsigned char *)(v26 + v25);
                v29 |= (unint64_t)(v30 & 0x7F) << v27;
                if ((v30 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v27 += 7;
                unint64_t v25 = v2;
                BOOL v14 = v28++ > 8;
              }
              while (!v14);
              LODWORD(v29) = 0;
LABEL_72:
              *((_DWORD *)this + 5) = v29;
              goto LABEL_78;
            case 5u:
              *((unsigned char *)this + 28) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v32 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v32 = v31 != 0;
              }
              *((unsigned char *)this + 26) = v32;
              goto LABEL_78;
            case 6u:
              *((unsigned char *)this + 28) |= 2u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_77;
                  }
                  unint64_t v45 = v33++;
                  char v46 = *(unsigned char *)(v34 + v45);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_76:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_77;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_76;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_77;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_77:
              *((_DWORD *)this + 4) = v37;
LABEL_78:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_78;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BatteryStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 25), 3u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 26), 5u);
    if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 4u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 0x20) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_13:
  int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 6u);
}

BOOL CMMsl::BatteryStatus::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 26) != *(unsigned __int8 *)(a2 + 26)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 0x20) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
    return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::BatteryStatus::hash_value(CMMsl::BatteryStatus *this)
{
  if (*((unsigned char *)this + 28))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 28) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 24);
      if ((*((unsigned char *)this + 28) & 0x10) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 28) & 0x10) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned __int8 *)this + 25);
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_5:
    uint64_t v4 = *((unsigned int *)this + 5);
    if ((*((unsigned char *)this + 28) & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_14:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_7;
    }
LABEL_15:
    uint64_t v6 = 0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_13:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 28) & 0x20) == 0) {
    goto LABEL_14;
  }
LABEL_6:
  uint64_t v5 = *((unsigned __int8 *)this + 26);
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_7:
  uint64_t v6 = *((int *)this + 4);
  return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6;
}

uint64_t CMMsl::BioMotionAnchor::BioMotionAnchor(uint64_t this)
{
  *(void *)this = off_1003A4A68;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = off_1003A4A68;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::BioMotionAnchor::~BioMotionAnchor(CMMsl::BioMotionAnchor *this)
{
  *(void *)this = off_1003A4A68;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BioMotionAnchor::~BioMotionAnchor(this);

  operator delete();
}

CMMsl::BioMotionAnchor *CMMsl::BioMotionAnchor::BioMotionAnchor(CMMsl::BioMotionAnchor *this, const CMMsl::BioMotionAnchor *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = off_1003A4A68;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 13) = 0;
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (this != a2) {
    sub_1000330C4((char *)this + 8, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  char v4 = *((unsigned char *)a2 + 52);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 4);
    *((unsigned char *)this + 52) |= 1u;
    *((void *)this + 4) = v5;
    char v4 = *((unsigned char *)a2 + 52);
  }
  if ((v4 & 2) != 0)
  {
    char v6 = *((unsigned char *)a2 + 48);
    *((unsigned char *)this + 52) |= 2u;
    *((unsigned char *)this + 48) = v6;
  }
  return this;
}

uint64_t CMMsl::BioMotionAnchor::operator=(uint64_t a1, const CMMsl::BioMotionAnchor *a2)
{
  if ((const CMMsl::BioMotionAnchor *)a1 != a2)
  {
    CMMsl::BioMotionAnchor::BioMotionAnchor((CMMsl::BioMotionAnchor *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    int v15 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v6;
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v7;
    LOBYTE(v6) = *(unsigned char *)(a1 + 48);
    *(unsigned char *)(a1 + 48) = v14;
    char v14 = v6;
    CMMsl::BioMotionAnchor::~BioMotionAnchor((CMMsl::BioMotionAnchor *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionAnchor *a2, CMMsl::BioMotionAnchor *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  LOBYTE(v7) = *((unsigned char *)this + 48);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *((unsigned char *)a2 + 48) = v7;
  return result;
}

uint64_t CMMsl::BioMotionAnchor::BioMotionAnchor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4A68;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100274A30(v4, (__n128 *)(a2 + 8));
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t CMMsl::BioMotionAnchor::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::BioMotionAnchor::BioMotionAnchor((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    int v15 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v6;
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v7;
    LOBYTE(v6) = *(unsigned char *)(a1 + 48);
    *(unsigned char *)(a1 + 48) = v14;
    char v14 = v6;
    CMMsl::BioMotionAnchor::~BioMotionAnchor((CMMsl::BioMotionAnchor *)v9);
  }
  return a1;
}

uint64_t CMMsl::BioMotionAnchor::formatText(CMMsl::BioMotionAnchor *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 52)) {
    PB::TextFormatter::format(a2, "bioMotionTimestamp", *((double *)this + 4));
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "pose");
  }
  if ((*((unsigned char *)this + 52) & 2) != 0) {
    PB::TextFormatter::format(a2, "runSmoother", *((unsigned char *)this + 48));
  }
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "velocity", v8);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::BioMotionAnchor::readFrom(CMMsl::BioMotionAnchor *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)((char *)this + 8);
    char v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v23 = *((void *)a2 + 1);
            unint64_t v24 = *((void *)a2 + 2);
            while (v23 < v24 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v26 = (char *)*((void *)this + 2);
              unint64_t v25 = *((void *)this + 3);
              if ((unint64_t)v26 >= v25)
              {
                unsigned int v28 = (char *)*v8;
                uint64_t v29 = (v26 - (unsigned char *)*v8) >> 3;
                unint64_t v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 61) {
                  goto LABEL_88;
                }
                uint64_t v31 = v25 - (void)v28;
                if (v31 >> 2 > v30) {
                  unint64_t v30 = v31 >> 2;
                }
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v32 = v30;
                }
                if (v32)
                {
                  unint64_t v33 = (char *)sub_10000EEB0((uint64_t)v9, v32);
                  unsigned int v28 = (char *)*((void *)this + 1);
                  uint64_t v26 = (char *)*((void *)this + 2);
                }
                else
                {
                  unint64_t v33 = 0;
                }
                uint64_t v34 = &v33[8 * v29];
                *(void *)uint64_t v34 = 0;
                char v27 = v34 + 8;
                while (v26 != v28)
                {
                  uint64_t v35 = *((void *)v26 - 1);
                  v26 -= 8;
                  *((void *)v34 - 1) = v35;
                  v34 -= 8;
                }
                *((void *)this + 1) = v34;
                *((void *)this + 2) = v27;
                *((void *)this + 3) = &v33[8 * v32];
                if (v28) {
                  operator delete(v28);
                }
              }
              else
              {
                *(void *)uint64_t v26 = 0;
                char v27 = v26 + 8;
              }
              *((void *)this + 2) = v27;
              unint64_t v36 = *((void *)a2 + 1);
              if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v27 - 1) = *(void *)(*(void *)a2 + v36);
              unint64_t v24 = *((void *)a2 + 2);
              unint64_t v23 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v23;
            }
            PB::Reader::recallMark();
          }
          else
          {
            char v43 = (char *)*((void *)this + 2);
            unint64_t v42 = *((void *)this + 3);
            if ((unint64_t)v43 >= v42)
            {
              unint64_t v45 = (char *)*v8;
              uint64_t v46 = (v43 - (unsigned char *)*v8) >> 3;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61) {
LABEL_88:
              }
                sub_10000EE98();
              uint64_t v48 = v42 - (void)v45;
              if (v48 >> 2 > v47) {
                unint64_t v47 = v48 >> 2;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                char v50 = (char *)sub_10000EEB0((uint64_t)v9, v49);
                unint64_t v45 = (char *)*((void *)this + 1);
                char v43 = (char *)*((void *)this + 2);
              }
              else
              {
                char v50 = 0;
              }
              char v51 = &v50[8 * v46];
              *(void *)char v51 = 0;
              unsigned int v44 = v51 + 8;
              while (v43 != v45)
              {
                uint64_t v52 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v51 - 1) = v52;
                v51 -= 8;
              }
              *((void *)this + 1) = v51;
              *((void *)this + 2) = v44;
              *((void *)this + 3) = &v50[8 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(void *)char v43 = 0;
              unsigned int v44 = v43 + 8;
            }
            *((void *)this + 2) = v44;
            unint64_t v53 = *((void *)a2 + 1);
            if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *((void *)a2 + 2))
            {
              *(v44 - 1) = *(void *)(*(void *)a2 + v53);
LABEL_79:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_77:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_80:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 3u:
          *((unsigned char *)this + 52) |= 1u;
          unint64_t v37 = *((void *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((void *)a2 + 2)) {
            goto LABEL_77;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v37);
          goto LABEL_79;
        case 4u:
          *((unsigned char *)this + 52) |= 2u;
          unint64_t v38 = *((void *)a2 + 1);
          if (v38 >= *((void *)a2 + 2))
          {
            BOOL v41 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v39 = v38 + 1;
            int v40 = *(unsigned __int8 *)(*(void *)a2 + v38);
            *((void *)a2 + 1) = v39;
            BOOL v41 = v40 != 0;
          }
          *((unsigned char *)this + 48) = v41;
          goto LABEL_80;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_80;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::Pose::Pose(CMMsl::Pose *this)
{
  *(void *)this = off_1003A8310;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A8310;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::BioMotionAnchor::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 40);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 2u);
  }
  char v8 = *(unsigned char *)(v3 + 52);
  if (v8)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
    char v8 = *(unsigned char *)(v3 + 52);
  }
  if ((v8 & 2) != 0)
  {
    char v9 = *(unsigned char *)(v3 + 48);
    return PB::Writer::write(a2, v9, 4u);
  }
  return this;
}

BOOL CMMsl::BioMotionAnchor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !CMMsl::Pose::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  double v7 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  char v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(void *)(a2 + 16) - (void)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8) {
        return 0;
      }
      ++v7;
      ++v8;
    }
    if (*(unsigned char *)(a1 + 52))
    {
      if ((*(unsigned char *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a2 + 52))
    {
      return 0;
    }
    BOOL result = (*(unsigned char *)(a2 + 52) & 2) == 0;
    if ((*(unsigned char *)(a1 + 52) & 2) == 0) {
      return result;
    }
    if ((*(unsigned char *)(a2 + 52) & 2) != 0 && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48)) {
      return 1;
    }
  }
  return 0;
}

BOOL CMMsl::Pose::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if ((*(unsigned char *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 64))
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 8);
  unint64_t v2 = *(double **)(a1 + 16);
  uint64_t v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  double v7 = *(double **)(a2 + 32);
  if (v5 - v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 8;
  do
  {
    double v9 = *v7++;
    BOOL result = *(double *)(v8 - 8) == v9;
    BOOL v11 = *(double *)(v8 - 8) != v9 || v8 == v5;
    v8 += 8;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::BioMotionAnchor::hash_value(CMMsl::BioMotionAnchor *this)
{
  unint64_t v2 = (CMMsl::Pose *)*((void *)this + 5);
  if (v2) {
    uint64_t v3 = CMMsl::Pose::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = PBHashBytes();
  if (*((unsigned char *)this + 52))
  {
    double v5 = *((double *)this + 4);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if ((*((unsigned char *)this + 52) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v6 = 0;
    return v4 ^ v3 ^ *(void *)&v5 ^ v6;
  }
  double v5 = 0.0;
  if ((*((unsigned char *)this + 52) & 2) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v6 = *((unsigned __int8 *)this + 48);
  return v4 ^ v3 ^ *(void *)&v5 ^ v6;
}

uint64_t CMMsl::BioMotionAnchor::makePose(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

void *CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(void *this)
{
  *this = off_1003A4AA0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A4AA0;
  this[1] = 0;
  return this;
}

void CMMsl::BioMotionAnchorPose::~BioMotionAnchorPose(CMMsl::BioMotionAnchorPose *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A4AA0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BioMotionAnchorPose::~BioMotionAnchorPose(this);

  operator delete();
}

void *CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(void *this, const CMMsl::BioMotionAnchorPose *a2)
{
  *this = off_1003A4AA0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::BioMotionAnchorPose *CMMsl::BioMotionAnchorPose::operator=(const CMMsl::BioMotionAnchorPose *a1, const CMMsl::BioMotionAnchorPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::BioMotionAnchorPose::~BioMotionAnchorPose((CMMsl::BioMotionAnchorPose *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BioMotionAnchorPose *a2, CMMsl::BioMotionAnchorPose *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(void *a1, uint64_t a2)
{
  *a1 = off_1003A4AA0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A4AA0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::BioMotionAnchorPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A4AA0;
    v6[1] = v4;
    CMMsl::BioMotionAnchorPose::~BioMotionAnchorPose((CMMsl::BioMotionAnchorPose *)v6);
  }
  return a1;
}

uint64_t CMMsl::BioMotionAnchorPose::formatText(CMMsl::BioMotionAnchorPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionAnchorPose::readFrom(CMMsl::BioMotionAnchorPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionAnchorPose::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::BioMotionAnchorPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BioMotionAnchor::operator==(v2, v3);
  }
  return result;
}

CMMsl::BioMotionAnchor *CMMsl::BioMotionAnchorPose::hash_value(CMMsl::BioMotionAnchorPose *this)
{
  BOOL result = (CMMsl::BioMotionAnchor *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionAnchor *)CMMsl::BioMotionAnchor::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::BioMotionAnchorPose::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::BioMotionClassification::BioMotionClassification(uint64_t this)
{
  *(void *)this = off_1003A4AD8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A4AD8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::BioMotionClassification::~BioMotionClassification(CMMsl::BioMotionClassification *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::BioMotionClassification::BioMotionClassification(CMMsl::BioMotionClassification *this, const CMMsl::BioMotionClassification *a2)
{
  *(void *)this = off_1003A4AD8;
  *((_DWORD *)this + 12) = 0;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x10) != 0)
  {
    double result = *((double *)a2 + 5);
    char v3 = 16;
    *((unsigned char *)this + 48) = 16;
    *((double *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 48) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 48) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    v3 |= 8u;
    *((unsigned char *)this + 48) = v3;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        return result;
      }
LABEL_12:
      double result = *((double *)a2 + 1);
      *((unsigned char *)this + 48) = v3 | 1;
      *((double *)this + 1) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((unsigned char *)this + 48) = v3;
  *((double *)this + 3) = result;
  if (*((unsigned char *)a2 + 48)) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::BioMotionClassification::operator=(uint64_t a1, const CMMsl::BioMotionClassification *a2)
{
  if ((const CMMsl::BioMotionClassification *)a1 != a2)
  {
    CMMsl::BioMotionClassification::BioMotionClassification((CMMsl::BioMotionClassification *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v11;
    uint64_t v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v6;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionClassification *a2, CMMsl::BioMotionClassification *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::BioMotionClassification::BioMotionClassification(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4AD8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A4AD8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::BioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v10 = off_1003A4AD8;
    int v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    uint64_t v4 = *(void *)(a2 + 40);
    int v14 = *(_DWORD *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 24);
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 8);
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(void *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 8) = v7;
    long long v11 = v6;
    long long v12 = v5;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::BioMotionClassification::formatText(CMMsl::BioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "probabilityGenericMotion", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "probabilityHeadMotion", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "probabilityPedestrianMotion", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "probabilityTorsoMotion", *((double *)this + 4));
  if ((*((unsigned char *)this + 48) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionClassification::readFrom(CMMsl::BioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 48) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_38;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_40;
        case 2u:
          *((unsigned char *)this + 48) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_38;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_40;
        case 3u:
          *((unsigned char *)this + 48) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_38;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_40;
        case 4u:
          *((unsigned char *)this + 48) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_38;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_40;
        case 5u:
          *((unsigned char *)this + 48) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_40:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_38:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 48);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
    if ((*(unsigned char *)(v3 + 48) & 1) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 5u);
}

BOOL CMMsl::BioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 48) & 1) == 0;
  if (*(unsigned char *)(a1 + 48)) {
    return (*(unsigned char *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::BioMotionClassification::hash_value(CMMsl::BioMotionClassification *this)
{
  if ((*((unsigned char *)this + 48) & 0x10) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 48) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_18:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 48) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_19:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 48) & 4) != 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  double v1 = *((double *)this + 5);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 2) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 8) == 0) {
    goto LABEL_19;
  }
LABEL_6:
  double v3 = *((double *)this + 4);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 4) != 0)
  {
LABEL_9:
    double v4 = *((double *)this + 3);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    if (*((unsigned char *)this + 48)) {
      goto LABEL_12;
    }
LABEL_21:
    double v5 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5;
  }
LABEL_20:
  double v4 = 0.0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_21;
  }
LABEL_12:
  double v5 = *((double *)this + 1);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5;
}

double CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(CMMsl::BioMotionLinkLengthFitParameters *this)
{
  *(void *)this = off_1003A4B10;
  *((_DWORD *)this + 36) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A4B10;
  *((_DWORD *)this + 36) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

void CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters(CMMsl::BioMotionLinkLengthFitParameters *this)
{
  *(void *)this = off_1003A4B10;
  double v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  double v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  double v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters(this);

  operator delete();
}

CMMsl::BioMotionLinkLengthFitParameters *CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(CMMsl::BioMotionLinkLengthFitParameters *this, const CMMsl::BioMotionLinkLengthFitParameters *a2)
{
  *(void *)this = off_1003A4B10;
  *(_OWORD *)((char *)this + 8) = 0u;
  double v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  double v5 = (char *)this + 56;
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if ((*((unsigned char *)a2 + 144) & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 15);
    *((unsigned char *)this + 144) = 4;
    *((void *)this + 15) = v6;
  }
  if (this != a2)
  {
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_1000330C4((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  char v7 = *((unsigned char *)a2 + 144);
  if (v7)
  {
    uint64_t v10 = *((void *)a2 + 13);
    *((unsigned char *)this + 144) |= 1u;
    *((void *)this + 13) = v10;
    char v7 = *((unsigned char *)a2 + 144);
    if ((v7 & 2) == 0)
    {
LABEL_7:
      if ((v7 & 8) == 0) {
        goto LABEL_8;
      }
LABEL_13:
      uint64_t v12 = *((void *)a2 + 16);
      *((unsigned char *)this + 144) |= 8u;
      *((void *)this + 16) = v12;
      if ((*((unsigned char *)a2 + 144) & 0x10) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*((unsigned char *)a2 + 144) & 2) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v11 = *((void *)a2 + 14);
  *((unsigned char *)this + 144) |= 2u;
  *((void *)this + 14) = v11;
  char v7 = *((unsigned char *)a2 + 144);
  if ((v7 & 8) != 0) {
    goto LABEL_13;
  }
LABEL_8:
  if ((v7 & 0x10) != 0)
  {
LABEL_9:
    uint64_t v8 = *((void *)a2 + 17);
    *((unsigned char *)this + 144) |= 0x10u;
    *((void *)this + 17) = v8;
  }
  return this;
}

CMMsl *CMMsl::BioMotionLinkLengthFitParameters::operator=(CMMsl *a1, const CMMsl::BioMotionLinkLengthFitParameters *a2)
{
  if (a1 != a2)
  {
    CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters((CMMsl::BioMotionLinkLengthFitParameters *)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionLinkLengthFitParameters *)v5, v3);
    CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters((CMMsl::BioMotionLinkLengthFitParameters *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionLinkLengthFitParameters *a2, CMMsl::BioMotionLinkLengthFitParameters *a3)
{
  int v3 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  uint64_t v4 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v9;
  uint64_t v10 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v10;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v14;
  uint64_t v15 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v15;
  uint64_t v16 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v16;
  uint64_t v17 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v17;
  uint64_t v18 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v18;
  uint64_t v19 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v19;
  double result = *((double *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((double *)a2 + 17) = result;
  return result;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4B10;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 80, (__n128 *)(a2 + 80));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

CMMsl *CMMsl::BioMotionLinkLengthFitParameters::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionLinkLengthFitParameters *)v5, v3);
    CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters((CMMsl::BioMotionLinkLengthFitParameters *)v5);
  }
  return a1;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::formatText(CMMsl::BioMotionLinkLengthFitParameters *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  uint64_t v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "centerOfRotationEstVars", v7);
  }
  uint64_t v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "centerOfRotationEsts", v10);
  }
  uint64_t v11 = (double *)*((void *)this + 7);
  uint64_t v12 = (double *)*((void *)this + 8);
  while (v11 != v12)
  {
    double v13 = *v11++;
    PB::TextFormatter::format(a2, "linkLengthEstVars", v13);
  }
  uint64_t v14 = (double *)*((void *)this + 10);
  uint64_t v15 = (double *)*((void *)this + 11);
  while (v14 != v15)
  {
    double v16 = *v14++;
    PB::TextFormatter::format(a2, "linkLengthEsts", v16);
  }
  char v17 = *((unsigned char *)this + 144);
  if (v17)
  {
    PB::TextFormatter::format(a2, "positionResidualNormMean", *((double *)this + 13));
    char v17 = *((unsigned char *)this + 144);
    if ((v17 & 2) == 0)
    {
LABEL_11:
      if ((v17 & 4) == 0) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else if ((*((unsigned char *)this + 144) & 2) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "positionResidualNormVar", *((double *)this + 14));
  char v17 = *((unsigned char *)this + 144);
  if ((v17 & 4) == 0)
  {
LABEL_12:
    if ((v17 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 15));
  char v17 = *((unsigned char *)this + 144);
  if ((v17 & 8) == 0)
  {
LABEL_13:
    if ((v17 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "timestampBegin", *((double *)this + 16));
  if ((*((unsigned char *)this + 144) & 0x10) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "timestampEnd", *((double *)this + 17));
LABEL_15:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::BioMotionLinkLengthFitParameters::readFrom(CMMsl::BioMotionLinkLengthFitParameters *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 56);
    uint64_t v9 = (void **)((char *)this + 8);
    char v131 = (char *)this + 24;
    unsigned int v132 = (char *)this + 72;
    double v10 = (void **)((char *)this + 80);
    uint64_t v11 = (void **)((char *)this + 32);
    unint64_t v129 = (char *)this + 48;
    unsigned int v130 = (char *)this + 96;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 144) |= 4u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_208;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v25);
          goto LABEL_210;
        case 2u:
          if (v24 != 2)
          {
            char v87 = (char *)*((void *)this + 5);
            unint64_t v86 = *((void *)this + 6);
            if ((unint64_t)v87 >= v86)
            {
              char v95 = (char *)*v11;
              uint64_t v96 = (v87 - (unsigned char *)*v11) >> 3;
              unint64_t v97 = v96 + 1;
              if ((unint64_t)(v96 + 1) >> 61) {
LABEL_219:
              }
                sub_10000EE98();
              uint64_t v98 = v86 - (void)v95;
              if (v98 >> 2 > v97) {
                unint64_t v97 = v98 >> 2;
              }
              if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v99 = v97;
              }
              if (v99)
              {
                unint64_t v100 = (char *)sub_10000EEB0((uint64_t)v129, v99);
                char v95 = (char *)*((void *)this + 4);
                char v87 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v100 = 0;
              }
              uint64_t v119 = &v100[8 * v96];
              *(void *)uint64_t v119 = 0;
              unsigned int v88 = v119 + 8;
              while (v87 != v95)
              {
                uint64_t v120 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v119 - 1) = v120;
                v119 -= 8;
              }
              *((void *)this + 4) = v119;
              *((void *)this + 5) = v88;
              *((void *)this + 6) = &v100[8 * v99];
              if (v95) {
                operator delete(v95);
              }
            }
            else
            {
              *(void *)char v87 = 0;
              unsigned int v88 = v87 + 8;
            }
            *((void *)this + 5) = v88;
            goto LABEL_206;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v26 = *((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
          while (v26 < v27 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v29 = (char *)*((void *)this + 5);
            unint64_t v28 = *((void *)this + 6);
            if ((unint64_t)v29 >= v28)
            {
              uint64_t v31 = (char *)*v11;
              uint64_t v32 = (v29 - (unsigned char *)*v11) >> 3;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61) {
                goto LABEL_219;
              }
              uint64_t v34 = v28 - (void)v31;
              if (v34 >> 2 > v33) {
                unint64_t v33 = v34 >> 2;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                unint64_t v36 = (char *)sub_10000EEB0((uint64_t)v129, v35);
                uint64_t v31 = (char *)*((void *)this + 4);
                uint64_t v29 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v36 = 0;
              }
              unint64_t v37 = &v36[8 * v32];
              *(void *)unint64_t v37 = 0;
              unint64_t v30 = v37 + 8;
              while (v29 != v31)
              {
                uint64_t v38 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v37 - 1) = v38;
                v37 -= 8;
              }
              *((void *)this + 4) = v37;
              *((void *)this + 5) = v30;
              *((void *)this + 6) = &v36[8 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(void *)uint64_t v29 = 0;
              unint64_t v30 = v29 + 8;
            }
            *((void *)this + 5) = v30;
            unint64_t v39 = *((void *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)a2 + 2)) {
              goto LABEL_136;
            }
            *(v30 - 1) = *(void *)(*(void *)a2 + v39);
            unint64_t v27 = *((void *)a2 + 2);
            unint64_t v26 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v26;
          }
          goto LABEL_137;
        case 3u:
          if (v24 != 2)
          {
            unint64_t v90 = (char *)*((void *)this + 11);
            unint64_t v89 = *((void *)this + 12);
            if ((unint64_t)v90 >= v89)
            {
              unint64_t v101 = (char *)*v10;
              uint64_t v102 = (v90 - (unsigned char *)*v10) >> 3;
              unint64_t v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 61) {
LABEL_220:
              }
                sub_10000EE98();
              uint64_t v104 = v89 - (void)v101;
              if (v104 >> 2 > v103) {
                unint64_t v103 = v104 >> 2;
              }
              if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v105 = v103;
              }
              if (v105)
              {
                uint64_t v106 = (char *)sub_10000EEB0((uint64_t)v130, v105);
                unint64_t v101 = (char *)*((void *)this + 10);
                unint64_t v90 = (char *)*((void *)this + 11);
              }
              else
              {
                uint64_t v106 = 0;
              }
              char v121 = &v106[8 * v102];
              *(void *)char v121 = 0;
              unsigned int v88 = v121 + 8;
              while (v90 != v101)
              {
                uint64_t v122 = *((void *)v90 - 1);
                v90 -= 8;
                *((void *)v121 - 1) = v122;
                v121 -= 8;
              }
              *((void *)this + 10) = v121;
              *((void *)this + 11) = v88;
              *((void *)this + 12) = &v106[8 * v105];
              if (v101) {
                operator delete(v101);
              }
            }
            else
            {
              *(void *)unint64_t v90 = 0;
              unsigned int v88 = v90 + 8;
            }
            *((void *)this + 11) = v88;
            goto LABEL_206;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v40 = *((void *)a2 + 1);
          unint64_t v41 = *((void *)a2 + 2);
          while (v40 < v41 && !*((unsigned char *)a2 + 24))
          {
            char v43 = (char *)*((void *)this + 11);
            unint64_t v42 = *((void *)this + 12);
            if ((unint64_t)v43 >= v42)
            {
              unint64_t v45 = (char *)*v10;
              uint64_t v46 = (v43 - (unsigned char *)*v10) >> 3;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61) {
                goto LABEL_220;
              }
              uint64_t v48 = v42 - (void)v45;
              if (v48 >> 2 > v47) {
                unint64_t v47 = v48 >> 2;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                char v50 = (char *)sub_10000EEB0((uint64_t)v130, v49);
                unint64_t v45 = (char *)*((void *)this + 10);
                char v43 = (char *)*((void *)this + 11);
              }
              else
              {
                char v50 = 0;
              }
              char v51 = &v50[8 * v46];
              *(void *)char v51 = 0;
              unsigned int v44 = v51 + 8;
              while (v43 != v45)
              {
                uint64_t v52 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v51 - 1) = v52;
                v51 -= 8;
              }
              *((void *)this + 10) = v51;
              *((void *)this + 11) = v44;
              *((void *)this + 12) = &v50[8 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(void *)char v43 = 0;
              unsigned int v44 = v43 + 8;
            }
            *((void *)this + 11) = v44;
            unint64_t v53 = *((void *)a2 + 1);
            if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)a2 + 2)) {
              goto LABEL_136;
            }
            *(v44 - 1) = *(void *)(*(void *)a2 + v53);
            unint64_t v41 = *((void *)a2 + 2);
            unint64_t v40 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v40;
          }
          goto LABEL_137;
        case 4u:
          if (v24 != 2)
          {
            unint64_t v92 = (char *)*((void *)this + 2);
            unint64_t v91 = *((void *)this + 3);
            if ((unint64_t)v92 >= v91)
            {
              unint64_t v107 = (char *)*v9;
              uint64_t v108 = (v92 - (unsigned char *)*v9) >> 3;
              unint64_t v109 = v108 + 1;
              if ((unint64_t)(v108 + 1) >> 61) {
LABEL_221:
              }
                sub_10000EE98();
              uint64_t v110 = v91 - (void)v107;
              if (v110 >> 2 > v109) {
                unint64_t v109 = v110 >> 2;
              }
              if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v111 = v109;
              }
              if (v111)
              {
                int v112 = (char *)sub_10000EEB0((uint64_t)v131, v111);
                unint64_t v107 = (char *)*((void *)this + 1);
                unint64_t v92 = (char *)*((void *)this + 2);
              }
              else
              {
                int v112 = 0;
              }
              unint64_t v123 = &v112[8 * v108];
              *(void *)unint64_t v123 = 0;
              unsigned int v88 = v123 + 8;
              while (v92 != v107)
              {
                uint64_t v124 = *((void *)v92 - 1);
                v92 -= 8;
                *((void *)v123 - 1) = v124;
                v123 -= 8;
              }
              *((void *)this + 1) = v123;
              *((void *)this + 2) = v88;
              *((void *)this + 3) = &v112[8 * v111];
              if (v107) {
                operator delete(v107);
              }
            }
            else
            {
              *(void *)unint64_t v92 = 0;
              unsigned int v88 = v92 + 8;
            }
            *((void *)this + 2) = v88;
            goto LABEL_206;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v54 = *((void *)a2 + 1);
          unint64_t v55 = *((void *)a2 + 2);
          while (v54 < v55 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v57 = (char *)*((void *)this + 2);
            unint64_t v56 = *((void *)this + 3);
            if ((unint64_t)v57 >= v56)
            {
              char v59 = (char *)*v9;
              uint64_t v60 = (v57 - (unsigned char *)*v9) >> 3;
              unint64_t v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 61) {
                goto LABEL_221;
              }
              uint64_t v62 = v56 - (void)v59;
              if (v62 >> 2 > v61) {
                unint64_t v61 = v62 >> 2;
              }
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v63 = v61;
              }
              if (v63)
              {
                unsigned int v64 = (char *)sub_10000EEB0((uint64_t)v131, v63);
                char v59 = (char *)*((void *)this + 1);
                unint64_t v57 = (char *)*((void *)this + 2);
              }
              else
              {
                unsigned int v64 = 0;
              }
              unint64_t v65 = &v64[8 * v60];
              *(void *)unint64_t v65 = 0;
              char v58 = v65 + 8;
              while (v57 != v59)
              {
                uint64_t v66 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v65 - 1) = v66;
                v65 -= 8;
              }
              *((void *)this + 1) = v65;
              *((void *)this + 2) = v58;
              *((void *)this + 3) = &v64[8 * v63];
              if (v59) {
                operator delete(v59);
              }
            }
            else
            {
              *(void *)unint64_t v57 = 0;
              char v58 = v57 + 8;
            }
            *((void *)this + 2) = v58;
            unint64_t v67 = *((void *)a2 + 1);
            if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((void *)a2 + 2)) {
              goto LABEL_136;
            }
            *(v58 - 1) = *(void *)(*(void *)a2 + v67);
            unint64_t v55 = *((void *)a2 + 2);
            unint64_t v54 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v54;
          }
          goto LABEL_137;
        case 5u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v68 = *((void *)a2 + 1);
            unint64_t v69 = *((void *)a2 + 2);
            while (v68 < v69 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v71 = (char *)*((void *)this + 8);
              unint64_t v70 = *((void *)this + 9);
              if ((unint64_t)v71 >= v70)
              {
                char v73 = (char *)*v8;
                uint64_t v74 = (v71 - (unsigned char *)*v8) >> 3;
                unint64_t v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 61) {
                  goto LABEL_222;
                }
                uint64_t v76 = v70 - (void)v73;
                if (v76 >> 2 > v75) {
                  unint64_t v75 = v76 >> 2;
                }
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v77 = v75;
                }
                if (v77)
                {
                  uint64_t v78 = (char *)sub_10000EEB0((uint64_t)v132, v77);
                  char v73 = (char *)*((void *)this + 7);
                  unint64_t v71 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v78 = 0;
                }
                unint64_t v79 = &v78[8 * v74];
                *(void *)unint64_t v79 = 0;
                unint64_t v72 = v79 + 8;
                while (v71 != v73)
                {
                  uint64_t v80 = *((void *)v71 - 1);
                  v71 -= 8;
                  *((void *)v79 - 1) = v80;
                  v79 -= 8;
                }
                *((void *)this + 7) = v79;
                *((void *)this + 8) = v72;
                *((void *)this + 9) = &v78[8 * v77];
                if (v73) {
                  operator delete(v73);
                }
              }
              else
              {
                *(void *)unint64_t v71 = 0;
                unint64_t v72 = v71 + 8;
              }
              *((void *)this + 8) = v72;
              unint64_t v81 = *((void *)a2 + 1);
              if (v81 > 0xFFFFFFFFFFFFFFF7 || v81 + 8 > *((void *)a2 + 2))
              {
LABEL_136:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v72 - 1) = *(void *)(*(void *)a2 + v81);
              unint64_t v69 = *((void *)a2 + 2);
              unint64_t v68 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v68;
            }
LABEL_137:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v94 = (char *)*((void *)this + 8);
            unint64_t v93 = *((void *)this + 9);
            if ((unint64_t)v94 >= v93)
            {
              unint64_t v113 = (char *)*v8;
              uint64_t v114 = (v94 - (unsigned char *)*v8) >> 3;
              unint64_t v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 61) {
LABEL_222:
              }
                sub_10000EE98();
              uint64_t v116 = v93 - (void)v113;
              if (v116 >> 2 > v115) {
                unint64_t v115 = v116 >> 2;
              }
              if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v117 = v115;
              }
              if (v117)
              {
                unsigned int v118 = (char *)sub_10000EEB0((uint64_t)v132, v117);
                unint64_t v113 = (char *)*((void *)this + 7);
                uint64_t v94 = (char *)*((void *)this + 8);
              }
              else
              {
                unsigned int v118 = 0;
              }
              unint64_t v125 = &v118[8 * v114];
              *(void *)unint64_t v125 = 0;
              unsigned int v88 = v125 + 8;
              while (v94 != v113)
              {
                uint64_t v126 = *((void *)v94 - 1);
                v94 -= 8;
                *((void *)v125 - 1) = v126;
                v125 -= 8;
              }
              *((void *)this + 7) = v125;
              *((void *)this + 8) = v88;
              *((void *)this + 9) = &v118[8 * v117];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *(void *)uint64_t v94 = 0;
              unsigned int v88 = v94 + 8;
            }
            *((void *)this + 8) = v88;
LABEL_206:
            unint64_t v127 = *((void *)a2 + 1);
            if (v127 <= 0xFFFFFFFFFFFFFFF7 && v127 + 8 <= *((void *)a2 + 2))
            {
              *(v88 - 1) = *(void *)(*(void *)a2 + v127);
LABEL_210:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_208:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_211:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 6u:
          *((unsigned char *)this + 144) |= 1u;
          unint64_t v82 = *((void *)a2 + 1);
          if (v82 > 0xFFFFFFFFFFFFFFF7 || v82 + 8 > *((void *)a2 + 2)) {
            goto LABEL_208;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v82);
          goto LABEL_210;
        case 7u:
          *((unsigned char *)this + 144) |= 2u;
          unint64_t v83 = *((void *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFF7 || v83 + 8 > *((void *)a2 + 2)) {
            goto LABEL_208;
          }
          *((void *)this + 14) = *(void *)(*(void *)a2 + v83);
          goto LABEL_210;
        case 8u:
          *((unsigned char *)this + 144) |= 8u;
          unint64_t v84 = *((void *)a2 + 1);
          if (v84 > 0xFFFFFFFFFFFFFFF7 || v84 + 8 > *((void *)a2 + 2)) {
            goto LABEL_208;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v84);
          goto LABEL_210;
        case 9u:
          *((unsigned char *)this + 144) |= 0x10u;
          unint64_t v85 = *((void *)a2 + 1);
          if (v85 > 0xFFFFFFFFFFFFFFF7 || v85 + 8 > *((void *)a2 + 2)) {
            goto LABEL_208;
          }
          *((void *)this + 17) = *(void *)(*(void *)a2 + v85);
          goto LABEL_210;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_211;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 144) & 4) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 120), 1u);
  }
  int v4 = *(double **)(v3 + 32);
  uint64_t v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  double v7 = *(double **)(v3 + 80);
  uint64_t v8 = *(double **)(v3 + 88);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  double v10 = *(double **)(v3 + 8);
  uint64_t v11 = *(double **)(v3 + 16);
  while (v10 != v11)
  {
    double v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  char v13 = *(double **)(v3 + 56);
  unsigned int v14 = *(double **)(v3 + 64);
  while (v13 != v14)
  {
    double v15 = *v13++;
    this = PB::Writer::write(a2, v15, 5u);
  }
  char v16 = *(unsigned char *)(v3 + 144);
  if (v16)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 104), 6u);
    char v16 = *(unsigned char *)(v3 + 144);
    if ((v16 & 2) == 0)
    {
LABEL_17:
      if ((v16 & 8) == 0) {
        goto LABEL_18;
      }
LABEL_22:
      this = PB::Writer::write(a2, *(double *)(v3 + 128), 8u);
      if ((*(unsigned char *)(v3 + 144) & 0x10) == 0) {
        return this;
      }
      goto LABEL_23;
    }
  }
  else if ((*(unsigned char *)(v3 + 144) & 2) == 0)
  {
    goto LABEL_17;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 7u);
  char v16 = *(unsigned char *)(v3 + 144);
  if ((v16 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_18:
  if ((v16 & 0x10) == 0) {
    return this;
  }
LABEL_23:
  double v17 = *(double *)(v3 + 136);

  return PB::Writer::write(a2, v17, 9u);
}

BOOL CMMsl::BioMotionLinkLengthFitParameters::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 144) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 144) & 4) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 144) & 4) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 32);
  unint64_t v2 = *(double **)(a1 + 40);
  int v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  double v6 = *(double **)(a1 + 80);
  uint64_t v5 = *(double **)(a1 + 88);
  double v7 = *(double **)(a2 + 80);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 88) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  double v9 = *(double **)(a1 + 8);
  uint64_t v8 = *(double **)(a1 + 16);
  double v10 = *(double **)(a2 + 8);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 16) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  double v12 = *(double **)(a1 + 56);
  uint64_t v11 = *(double **)(a1 + 64);
  char v13 = *(double **)(a2 + 56);
  if ((char *)v11 - (char *)v12 != *(void *)(a2 + 64) - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*v12 != *v13) {
      return 0;
    }
    ++v12;
    ++v13;
  }
  if (*(unsigned char *)(a1 + 144))
  {
    if ((*(unsigned char *)(a2 + 144) & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 144))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 144) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 144) & 2) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 144) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 144) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 144) & 8) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 144) & 8) != 0)
  {
    return 0;
  }
  BOOL v14 = (*(unsigned char *)(a2 + 144) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 144) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 144) & 0x10) != 0 && *(double *)(a1 + 136) == *(double *)(a2 + 136);
  }
  return v14;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::hash_value(CMMsl::BioMotionLinkLengthFitParameters *this)
{
  if ((*((unsigned char *)this + 144) & 4) != 0)
  {
    if (*((double *)this + 15) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 15);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  if ((*((unsigned char *)this + 144) & 1) == 0)
  {
    double v7 = 0.0;
    if ((*((unsigned char *)this + 144) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_20:
    double v8 = 0.0;
    if ((*((unsigned char *)this + 144) & 8) != 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
  double v7 = *((double *)this + 13);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((unsigned char *)this + 144) & 2) == 0) {
    goto LABEL_20;
  }
LABEL_8:
  double v8 = *((double *)this + 14);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((unsigned char *)this + 144) & 8) != 0)
  {
LABEL_11:
    double v9 = *((double *)this + 16);
    if (v9 == 0.0) {
      double v9 = 0.0;
    }
    if ((*((unsigned char *)this + 144) & 0x10) != 0) {
      goto LABEL_14;
    }
LABEL_22:
    double v10 = 0.0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10;
  }
LABEL_21:
  double v9 = 0.0;
  if ((*((unsigned char *)this + 144) & 0x10) == 0) {
    goto LABEL_22;
  }
LABEL_14:
  double v10 = *((double *)this + 17);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(uint64_t this)
{
  *(void *)this = off_1003A4B48;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A4B48;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BioMotionOnlineLinkLengthUpdate::~BioMotionOnlineLinkLengthUpdate(CMMsl::BioMotionOnlineLinkLengthUpdate *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(uint64_t this, const CMMsl::BioMotionOnlineLinkLengthUpdate *a2)
{
  *(void *)this = off_1003A4B48;
  *(_DWORD *)(this + 20) = 0;
  char v2 = *((unsigned char *)a2 + 20);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 20);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 16);
    v3 |= 2u;
    *(unsigned char *)(this + 20) = v3;
    *(unsigned char *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    char v7 = *((unsigned char *)a2 + 18);
    *(unsigned char *)(this + 20) = v3 | 8;
    *(unsigned char *)(this + 18) = v7;
    return this;
  }
  char v6 = *((unsigned char *)a2 + 17);
  v3 |= 4u;
  *(unsigned char *)(this + 20) = v3;
  *(unsigned char *)(this + 17) = v6;
  if ((*((unsigned char *)a2 + 20) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::operator=(uint64_t a1, const CMMsl::BioMotionOnlineLinkLengthUpdate *a2)
{
  if ((const CMMsl::BioMotionOnlineLinkLengthUpdate *)a1 != a2)
  {
    CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOWORD(v3) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8;
    __int16 v8 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 18);
    *(unsigned char *)(a1 + 18) = v9;
    char v9 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionOnlineLinkLengthUpdate *a2, CMMsl::BioMotionOnlineLinkLengthUpdate *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 17);
  *((unsigned char *)this + 17) = *((unsigned char *)a2 + 17);
  *((unsigned char *)a2 + 17) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 18);
  *((unsigned char *)this + 18) = *((unsigned char *)a2 + 18);
  *((unsigned char *)a2 + 18) = v3;
  return result;
}

double CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4B48;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A4B48;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  return result;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v10[0] = off_1003A4B48;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v5 = *(_WORD *)(a2 + 16);
    char v6 = *(unsigned char *)(a2 + 18);
    int v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v13 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[1] = v8;
    LOWORD(v3) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v5;
    __int16 v11 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 18);
    *(unsigned char *)(a1 + 18) = v6;
    char v12 = v3;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::formatText(CMMsl::BioMotionOnlineLinkLengthUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestampEnd", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "updatedLinkLengthX", *((unsigned char *)this + 16));
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "updatedLinkLengthY", *((unsigned char *)this + 17));
  if ((*((unsigned char *)this + 20) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "updatedLinkLengthZ", *((unsigned char *)this + 18));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::readFrom(CMMsl::BioMotionOnlineLinkLengthUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 20) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_40;
            case 2u:
              *((unsigned char *)this + 20) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 16) = v22;
              goto LABEL_40;
            case 3u:
              *((unsigned char *)this + 20) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *((unsigned char *)this + 17) = v24;
              goto LABEL_40;
            case 4u:
              *((unsigned char *)this + 20) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *((unsigned char *)this + 18) = v26;
              goto LABEL_40;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
LABEL_40:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (BOOL *)this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = v3[20];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, v3[17], 3u);
      if ((v3[20] & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, v3[16], 2u);
  char v4 = v3[20];
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  BOOL v5 = v3[18];

  return PB::Writer::write(a2, v5, 4u);
}

BOOL CMMsl::BioMotionOnlineLinkLengthUpdate::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 2) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 4) == 0 || *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 8) == 0;
  if ((*(unsigned char *)(a1 + 20) & 8) != 0) {
    return (*(unsigned char *)(a2 + 20) & 8) != 0 && *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18);
  }
  return v2;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::hash_value(CMMsl::BioMotionOnlineLinkLengthUpdate *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 16);
      if ((*((unsigned char *)this + 20) & 4) != 0) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 20) & 8) != 0) {
        goto LABEL_5;
      }
LABEL_11:
      uint64_t v4 = 0;
      return v2 ^ *(void *)&v1 ^ v3 ^ v4;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 20) & 4) == 0) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v3 = *((unsigned __int8 *)this + 17);
  if ((*((unsigned char *)this + 20) & 8) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v4 = *((unsigned __int8 *)this + 18);
  return v2 ^ *(void *)&v1 ^ v3 ^ v4;
}

double CMMsl::BioMotionPose::BioMotionPose(CMMsl::BioMotionPose *this)
{
  *(void *)this = off_1003A4B80;
  *((_DWORD *)this + 36) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A4B80;
  *((_DWORD *)this + 36) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  return result;
}

void CMMsl::BioMotionPose::~BioMotionPose(CMMsl::BioMotionPose *this)
{
  *(void *)this = off_1003A4B80;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  char v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BioMotionPose::~BioMotionPose(this);

  operator delete();
}

CMMsl::BioMotionPose *CMMsl::BioMotionPose::BioMotionPose(CMMsl::BioMotionPose *this, const CMMsl::BioMotionPose *a2)
{
  *(void *)this = off_1003A4B80;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0;
  if (this != a2)
  {
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4((char *)this + 56, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_1000330C4((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
    sub_1000330C4((char *)this + 104, *((char **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
  }
  char v5 = *((unsigned char *)a2 + 144);
  if ((v5 & 4) == 0)
  {
    if ((*((unsigned char *)a2 + 144) & 1) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = *((void *)a2 + 16);
    *((unsigned char *)this + 144) |= 1u;
    *((void *)this + 16) = v9;
    if ((*((unsigned char *)a2 + 144) & 2) == 0) {
      return this;
    }
    goto LABEL_6;
  }
  int v8 = *((_DWORD *)a2 + 35);
  *((unsigned char *)this + 144) |= 4u;
  *((_DWORD *)this + 35) = v8;
  char v5 = *((unsigned char *)a2 + 144);
  if (v5) {
    goto LABEL_9;
  }
LABEL_5:
  if ((v5 & 2) != 0)
  {
LABEL_6:
    int v6 = *((_DWORD *)a2 + 34);
    *((unsigned char *)this + 144) |= 2u;
    *((_DWORD *)this + 34) = v6;
  }
  return this;
}

CMMsl *CMMsl::BioMotionPose::operator=(CMMsl *a1, const CMMsl::BioMotionPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::BioMotionPose::BioMotionPose((CMMsl::BioMotionPose *)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionPose *)v5, v3);
    CMMsl::BioMotionPose::~BioMotionPose((CMMsl::BioMotionPose *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionPose *a2, CMMsl::BioMotionPose *a3)
{
  int v3 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v8;
  uint64_t v9 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v11;
  uint64_t v12 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v12;
  uint64_t v13 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v13;
  uint64_t v14 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v14;
  uint64_t v15 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v15;
  uint64_t v16 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v16;
  uint64_t v17 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v17;
  uint64_t v18 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v18;
  LODWORD(v18) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v18;
  double result = *((double *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((double *)a2 + 16) = result;
  LODWORD(v18) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v18;
  return result;
}

uint64_t CMMsl::BioMotionPose::BioMotionPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4B80;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v6 = a1 + 104;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v7 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v7, (__n128 *)(a2 + 56));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  sub_100274A30(v5, (__n128 *)(a2 + 80));
  sub_100274A30(v6, (__n128 *)(a2 + 104));
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

CMMsl *CMMsl::BioMotionPose::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BioMotionPose::BioMotionPose((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionPose *)v5, v3);
    CMMsl::BioMotionPose::~BioMotionPose((CMMsl::BioMotionPose *)v5);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPose::formatText(CMMsl::BioMotionPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  uint64_t v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  if ((*((unsigned char *)this + 144) & 2) != 0) {
    PB::TextFormatter::format(a2, "modelType", *((_DWORD *)this + 34));
  }
  uint64_t v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "rotationRate", v10);
  }
  char v11 = *((unsigned char *)this + 144);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 35));
    char v11 = *((unsigned char *)this + 144);
  }
  if (v11) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 16));
  }
  uint64_t v12 = (double *)*((void *)this + 7);
  uint64_t v13 = (double *)*((void *)this + 8);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(a2, "translation", v14);
  }
  uint64_t v15 = (double *)*((void *)this + 10);
  uint64_t v16 = (double *)*((void *)this + 11);
  while (v15 != v16)
  {
    double v17 = *v15++;
    PB::TextFormatter::format(a2, "userAcceleration", v17);
  }
  uint64_t v18 = (double *)*((void *)this + 13);
  char v19 = (double *)*((void *)this + 14);
  while (v18 != v19)
  {
    double v20 = *v18++;
    PB::TextFormatter::format(a2, "velocity", v20);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::BioMotionPose::readFrom(CMMsl::BioMotionPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 104);
    uint64_t v9 = (void **)((char *)this + 80);
    int v178 = (char *)this + 96;
    v179 = (char *)this + 120;
    double v10 = (void **)((char *)this + 32);
    char v11 = (void **)((char *)this + 56);
    int v176 = (char *)this + 72;
    v177 = (char *)this + 48;
    uint64_t v12 = (void **)((char *)this + 8);
    v175 = (char *)this + 24;
    while (1)
    {
      uint64_t v13 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        BOOL v19 = v15++ > 8;
        if (v19) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          if (v25 != 2)
          {
            uint64_t v114 = (char *)*((void *)this + 2);
            unint64_t v113 = *((void *)this + 3);
            if ((unint64_t)v114 >= v113)
            {
              unsigned int v132 = (char *)*v12;
              uint64_t v133 = (v114 - (unsigned char *)*v12) >> 3;
              unint64_t v134 = v133 + 1;
              if ((unint64_t)(v133 + 1) >> 61) {
LABEL_286:
              }
                sub_10000EE98();
              uint64_t v135 = v113 - (void)v132;
              if (v135 >> 2 > v134) {
                unint64_t v134 = v135 >> 2;
              }
              if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v136 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v136 = v134;
              }
              if (v136)
              {
                unint64_t v137 = (char *)sub_10000EEB0((uint64_t)v175, v136);
                unsigned int v132 = (char *)*((void *)this + 1);
                uint64_t v114 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v137 = 0;
              }
              v162 = &v137[8 * v133];
              *(void *)v162 = 0;
              unint64_t v115 = v162 + 8;
              while (v114 != v132)
              {
                uint64_t v163 = *((void *)v114 - 1);
                v114 -= 8;
                *((void *)v162 - 1) = v163;
                v162 -= 8;
              }
              *((void *)this + 1) = v162;
              *((void *)this + 2) = v115;
              *((void *)this + 3) = &v137[8 * v136];
              if (v132) {
                operator delete(v132);
              }
            }
            else
            {
              *(void *)uint64_t v114 = 0;
              unint64_t v115 = v114 + 8;
            }
            *((void *)this + 2) = v115;
            goto LABEL_271;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v26 = *((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
          while (v26 < v27 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v29 = (char *)*((void *)this + 2);
            unint64_t v28 = *((void *)this + 3);
            if ((unint64_t)v29 >= v28)
            {
              uint64_t v31 = (char *)*v12;
              uint64_t v32 = (v29 - (unsigned char *)*v12) >> 3;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61) {
                goto LABEL_286;
              }
              uint64_t v34 = v28 - (void)v31;
              if (v34 >> 2 > v33) {
                unint64_t v33 = v34 >> 2;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                unint64_t v36 = (char *)sub_10000EEB0((uint64_t)v175, v35);
                uint64_t v31 = (char *)*((void *)this + 1);
                uint64_t v29 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v36 = 0;
              }
              unint64_t v37 = &v36[8 * v32];
              *(void *)unint64_t v37 = 0;
              unint64_t v30 = v37 + 8;
              while (v29 != v31)
              {
                uint64_t v38 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v37 - 1) = v38;
                v37 -= 8;
              }
              *((void *)this + 1) = v37;
              *((void *)this + 2) = v30;
              *((void *)this + 3) = &v36[8 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(void *)uint64_t v29 = 0;
              unint64_t v30 = v29 + 8;
            }
            *((void *)this + 2) = v30;
            unint64_t v39 = *((void *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)a2 + 2)) {
              goto LABEL_162;
            }
            *(v30 - 1) = *(void *)(*(void *)a2 + v39);
            unint64_t v27 = *((void *)a2 + 2);
            unint64_t v26 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v26;
          }
          goto LABEL_163;
        case 2u:
          if (v25 != 2)
          {
            unint64_t v117 = (char *)*((void *)this + 8);
            unint64_t v116 = *((void *)this + 9);
            if ((unint64_t)v117 >= v116)
            {
              char v138 = (char *)*v11;
              uint64_t v139 = (v117 - (unsigned char *)*v11) >> 3;
              unint64_t v140 = v139 + 1;
              if ((unint64_t)(v139 + 1) >> 61) {
LABEL_287:
              }
                sub_10000EE98();
              uint64_t v141 = v116 - (void)v138;
              if (v141 >> 2 > v140) {
                unint64_t v140 = v141 >> 2;
              }
              if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v142 = v140;
              }
              if (v142)
              {
                unint64_t v143 = (char *)sub_10000EEB0((uint64_t)v176, v142);
                char v138 = (char *)*((void *)this + 7);
                unint64_t v117 = (char *)*((void *)this + 8);
              }
              else
              {
                unint64_t v143 = 0;
              }
              uint64_t v164 = &v143[8 * v139];
              *(void *)uint64_t v164 = 0;
              unint64_t v115 = v164 + 8;
              while (v117 != v138)
              {
                uint64_t v165 = *((void *)v117 - 1);
                v117 -= 8;
                *((void *)v164 - 1) = v165;
                v164 -= 8;
              }
              *((void *)this + 7) = v164;
              *((void *)this + 8) = v115;
              *((void *)this + 9) = &v143[8 * v142];
              if (v138) {
                operator delete(v138);
              }
            }
            else
            {
              *(void *)unint64_t v117 = 0;
              unint64_t v115 = v117 + 8;
            }
            *((void *)this + 8) = v115;
            goto LABEL_271;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v40 = *((void *)a2 + 1);
          unint64_t v41 = *((void *)a2 + 2);
          while (v40 < v41 && !*((unsigned char *)a2 + 24))
          {
            char v43 = (char *)*((void *)this + 8);
            unint64_t v42 = *((void *)this + 9);
            if ((unint64_t)v43 >= v42)
            {
              unint64_t v45 = (char *)*v11;
              uint64_t v46 = (v43 - (unsigned char *)*v11) >> 3;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61) {
                goto LABEL_287;
              }
              uint64_t v48 = v42 - (void)v45;
              if (v48 >> 2 > v47) {
                unint64_t v47 = v48 >> 2;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                char v50 = (char *)sub_10000EEB0((uint64_t)v176, v49);
                unint64_t v45 = (char *)*((void *)this + 7);
                char v43 = (char *)*((void *)this + 8);
              }
              else
              {
                char v50 = 0;
              }
              char v51 = &v50[8 * v46];
              *(void *)char v51 = 0;
              unsigned int v44 = v51 + 8;
              while (v43 != v45)
              {
                uint64_t v52 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v51 - 1) = v52;
                v51 -= 8;
              }
              *((void *)this + 7) = v51;
              *((void *)this + 8) = v44;
              *((void *)this + 9) = &v50[8 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(void *)char v43 = 0;
              unsigned int v44 = v43 + 8;
            }
            *((void *)this + 8) = v44;
            unint64_t v53 = *((void *)a2 + 1);
            if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)a2 + 2)) {
              goto LABEL_162;
            }
            *(v44 - 1) = *(void *)(*(void *)a2 + v53);
            unint64_t v41 = *((void *)a2 + 2);
            unint64_t v40 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v40;
          }
          goto LABEL_163;
        case 3u:
          if (v25 != 2)
          {
            uint64_t v119 = (char *)*((void *)this + 5);
            unint64_t v118 = *((void *)this + 6);
            if ((unint64_t)v119 >= v118)
            {
              char v144 = (char *)*v10;
              uint64_t v145 = (v119 - (unsigned char *)*v10) >> 3;
              unint64_t v146 = v145 + 1;
              if ((unint64_t)(v145 + 1) >> 61) {
LABEL_288:
              }
                sub_10000EE98();
              uint64_t v147 = v118 - (void)v144;
              if (v147 >> 2 > v146) {
                unint64_t v146 = v147 >> 2;
              }
              if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v148 = v146;
              }
              if (v148)
              {
                unint64_t v149 = (char *)sub_10000EEB0((uint64_t)v177, v148);
                char v144 = (char *)*((void *)this + 4);
                uint64_t v119 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v149 = 0;
              }
              uint64_t v166 = &v149[8 * v145];
              *(void *)uint64_t v166 = 0;
              unint64_t v115 = v166 + 8;
              while (v119 != v144)
              {
                uint64_t v167 = *((void *)v119 - 1);
                v119 -= 8;
                *((void *)v166 - 1) = v167;
                v166 -= 8;
              }
              *((void *)this + 4) = v166;
              *((void *)this + 5) = v115;
              *((void *)this + 6) = &v149[8 * v148];
              if (v144) {
                operator delete(v144);
              }
            }
            else
            {
              *(void *)uint64_t v119 = 0;
              unint64_t v115 = v119 + 8;
            }
            *((void *)this + 5) = v115;
            goto LABEL_271;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v54 = *((void *)a2 + 1);
          unint64_t v55 = *((void *)a2 + 2);
          while (v54 < v55 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v57 = (char *)*((void *)this + 5);
            unint64_t v56 = *((void *)this + 6);
            if ((unint64_t)v57 >= v56)
            {
              char v59 = (char *)*v10;
              uint64_t v60 = (v57 - (unsigned char *)*v10) >> 3;
              unint64_t v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 61) {
                goto LABEL_288;
              }
              uint64_t v62 = v56 - (void)v59;
              if (v62 >> 2 > v61) {
                unint64_t v61 = v62 >> 2;
              }
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v63 = v61;
              }
              if (v63)
              {
                unsigned int v64 = (char *)sub_10000EEB0((uint64_t)v177, v63);
                char v59 = (char *)*((void *)this + 4);
                unint64_t v57 = (char *)*((void *)this + 5);
              }
              else
              {
                unsigned int v64 = 0;
              }
              unint64_t v65 = &v64[8 * v60];
              *(void *)unint64_t v65 = 0;
              char v58 = v65 + 8;
              while (v57 != v59)
              {
                uint64_t v66 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v65 - 1) = v66;
                v65 -= 8;
              }
              *((void *)this + 4) = v65;
              *((void *)this + 5) = v58;
              *((void *)this + 6) = &v64[8 * v63];
              if (v59) {
                operator delete(v59);
              }
            }
            else
            {
              *(void *)unint64_t v57 = 0;
              char v58 = v57 + 8;
            }
            *((void *)this + 5) = v58;
            unint64_t v67 = *((void *)a2 + 1);
            if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((void *)a2 + 2)) {
              goto LABEL_162;
            }
            *(v58 - 1) = *(void *)(*(void *)a2 + v67);
            unint64_t v55 = *((void *)a2 + 2);
            unint64_t v54 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v54;
          }
          goto LABEL_163;
        case 4u:
          if (v25 != 2)
          {
            char v121 = (char *)*((void *)this + 11);
            unint64_t v120 = *((void *)this + 12);
            if ((unint64_t)v121 >= v120)
            {
              v150 = (char *)*v9;
              uint64_t v151 = (v121 - (unsigned char *)*v9) >> 3;
              unint64_t v152 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 61) {
LABEL_289:
              }
                sub_10000EE98();
              uint64_t v153 = v120 - (void)v150;
              if (v153 >> 2 > v152) {
                unint64_t v152 = v153 >> 2;
              }
              if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v154 = v152;
              }
              if (v154)
              {
                unint64_t v155 = (char *)sub_10000EEB0((uint64_t)v178, v154);
                v150 = (char *)*((void *)this + 10);
                char v121 = (char *)*((void *)this + 11);
              }
              else
              {
                unint64_t v155 = 0;
              }
              v168 = &v155[8 * v151];
              *(void *)v168 = 0;
              unint64_t v115 = v168 + 8;
              while (v121 != v150)
              {
                uint64_t v169 = *((void *)v121 - 1);
                v121 -= 8;
                *((void *)v168 - 1) = v169;
                v168 -= 8;
              }
              *((void *)this + 10) = v168;
              *((void *)this + 11) = v115;
              *((void *)this + 12) = &v155[8 * v154];
              if (v150) {
                operator delete(v150);
              }
            }
            else
            {
              *(void *)char v121 = 0;
              unint64_t v115 = v121 + 8;
            }
            *((void *)this + 11) = v115;
            goto LABEL_271;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v68 = *((void *)a2 + 1);
          unint64_t v69 = *((void *)a2 + 2);
          while (v68 < v69 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v71 = (char *)*((void *)this + 11);
            unint64_t v70 = *((void *)this + 12);
            if ((unint64_t)v71 >= v70)
            {
              char v73 = (char *)*v9;
              uint64_t v74 = (v71 - (unsigned char *)*v9) >> 3;
              unint64_t v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 61) {
                goto LABEL_289;
              }
              uint64_t v76 = v70 - (void)v73;
              if (v76 >> 2 > v75) {
                unint64_t v75 = v76 >> 2;
              }
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v77 = v75;
              }
              if (v77)
              {
                uint64_t v78 = (char *)sub_10000EEB0((uint64_t)v178, v77);
                char v73 = (char *)*((void *)this + 10);
                unint64_t v71 = (char *)*((void *)this + 11);
              }
              else
              {
                uint64_t v78 = 0;
              }
              unint64_t v79 = &v78[8 * v74];
              *(void *)unint64_t v79 = 0;
              unint64_t v72 = v79 + 8;
              while (v71 != v73)
              {
                uint64_t v80 = *((void *)v71 - 1);
                v71 -= 8;
                *((void *)v79 - 1) = v80;
                v79 -= 8;
              }
              *((void *)this + 10) = v79;
              *((void *)this + 11) = v72;
              *((void *)this + 12) = &v78[8 * v77];
              if (v73) {
                operator delete(v73);
              }
            }
            else
            {
              *(void *)unint64_t v71 = 0;
              unint64_t v72 = v71 + 8;
            }
            *((void *)this + 11) = v72;
            unint64_t v81 = *((void *)a2 + 1);
            if (v81 > 0xFFFFFFFFFFFFFFF7 || v81 + 8 > *((void *)a2 + 2)) {
              goto LABEL_162;
            }
            *(v72 - 1) = *(void *)(*(void *)a2 + v81);
            unint64_t v69 = *((void *)a2 + 2);
            unint64_t v68 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v68;
          }
          goto LABEL_163;
        case 5u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v82 = *((void *)a2 + 1);
            unint64_t v83 = *((void *)a2 + 2);
            while (v82 < v83 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v85 = (char *)*((void *)this + 14);
              unint64_t v84 = *((void *)this + 15);
              if ((unint64_t)v85 >= v84)
              {
                char v87 = (char *)*v8;
                uint64_t v88 = (v85 - (unsigned char *)*v8) >> 3;
                unint64_t v89 = v88 + 1;
                if ((unint64_t)(v88 + 1) >> 61) {
                  goto LABEL_290;
                }
                uint64_t v90 = v84 - (void)v87;
                if (v90 >> 2 > v89) {
                  unint64_t v89 = v90 >> 2;
                }
                if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v91 = v89;
                }
                if (v91)
                {
                  unint64_t v92 = (char *)sub_10000EEB0((uint64_t)v179, v91);
                  char v87 = (char *)*((void *)this + 13);
                  unint64_t v85 = (char *)*((void *)this + 14);
                }
                else
                {
                  unint64_t v92 = 0;
                }
                unint64_t v93 = &v92[8 * v88];
                *(void *)unint64_t v93 = 0;
                unint64_t v86 = v93 + 8;
                while (v85 != v87)
                {
                  uint64_t v94 = *((void *)v85 - 1);
                  v85 -= 8;
                  *((void *)v93 - 1) = v94;
                  v93 -= 8;
                }
                *((void *)this + 13) = v93;
                *((void *)this + 14) = v86;
                *((void *)this + 15) = &v92[8 * v91];
                if (v87) {
                  operator delete(v87);
                }
              }
              else
              {
                *(void *)unint64_t v85 = 0;
                unint64_t v86 = v85 + 8;
              }
              *((void *)this + 14) = v86;
              unint64_t v95 = *((void *)a2 + 1);
              if (v95 > 0xFFFFFFFFFFFFFFF7 || v95 + 8 > *((void *)a2 + 2))
              {
LABEL_162:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v86 - 1) = *(void *)(*(void *)a2 + v95);
              unint64_t v83 = *((void *)a2 + 2);
              unint64_t v82 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v82;
            }
LABEL_163:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v123 = (char *)*((void *)this + 14);
            unint64_t v122 = *((void *)this + 15);
            if ((unint64_t)v123 >= v122)
            {
              v156 = (char *)*v8;
              uint64_t v157 = (v123 - (unsigned char *)*v8) >> 3;
              unint64_t v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 61) {
LABEL_290:
              }
                sub_10000EE98();
              uint64_t v159 = v122 - (void)v156;
              if (v159 >> 2 > v158) {
                unint64_t v158 = v159 >> 2;
              }
              if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v160 = v158;
              }
              if (v160)
              {
                unint64_t v161 = (char *)sub_10000EEB0((uint64_t)v179, v160);
                v156 = (char *)*((void *)this + 13);
                unint64_t v123 = (char *)*((void *)this + 14);
              }
              else
              {
                unint64_t v161 = 0;
              }
              uint64_t v170 = &v161[8 * v157];
              *(void *)uint64_t v170 = 0;
              unint64_t v115 = v170 + 8;
              while (v123 != v156)
              {
                uint64_t v171 = *((void *)v123 - 1);
                v123 -= 8;
                *((void *)v170 - 1) = v171;
                v170 -= 8;
              }
              *((void *)this + 13) = v170;
              *((void *)this + 14) = v115;
              *((void *)this + 15) = &v161[8 * v160];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              *(void *)unint64_t v123 = 0;
              unint64_t v115 = v123 + 8;
            }
            *((void *)this + 14) = v115;
LABEL_271:
            unint64_t v172 = *((void *)a2 + 1);
            if (v172 <= 0xFFFFFFFFFFFFFFF7 && v172 + 8 <= *((void *)a2 + 2))
            {
              *(v115 - 1) = *(void *)(*(void *)a2 + v172);
LABEL_275:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_273:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_276:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 6u:
          *((unsigned char *)this + 144) |= 4u;
          unint64_t v96 = *((void *)a2 + 1);
          unint64_t v97 = *((void *)a2 + 2);
          uint64_t v98 = *(void *)a2;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            char v99 = 0;
            unsigned int v100 = 0;
            uint64_t v101 = 0;
            do
            {
              unint64_t v102 = v96 + 1;
              *((void *)a2 + 1) = v96 + 1;
              char v103 = *(unsigned char *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0) {
                goto LABEL_232;
              }
              v99 += 7;
              unint64_t v96 = v102;
              BOOL v19 = v100++ > 8;
            }
            while (!v19);
LABEL_180:
            LODWORD(v101) = 0;
            goto LABEL_232;
          }
          char v124 = 0;
          unsigned int v125 = 0;
          uint64_t v101 = 0;
          if (v97 <= v96) {
            unint64_t v97 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v97 == v96)
            {
              LODWORD(v101) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v126 = v96 + 1;
              char v127 = *(unsigned char *)(v98 + v96);
              *((void *)a2 + 1) = v126;
              v101 |= (unint64_t)(v127 & 0x7F) << v124;
              if (v127 < 0)
              {
                v124 += 7;
                unint64_t v96 = v126;
                BOOL v19 = v125++ > 8;
                if (v19) {
                  goto LABEL_180;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v101) = 0;
              }
            }
            break;
          }
LABEL_232:
          *((_DWORD *)this + 35) = v101;
          goto LABEL_276;
        case 7u:
          *((unsigned char *)this + 144) |= 1u;
          unint64_t v104 = *((void *)a2 + 1);
          if (v104 > 0xFFFFFFFFFFFFFFF7 || v104 + 8 > *((void *)a2 + 2)) {
            goto LABEL_273;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v104);
          goto LABEL_275;
        case 8u:
          *((unsigned char *)this + 144) |= 2u;
          unint64_t v105 = *((void *)a2 + 1);
          unint64_t v106 = *((void *)a2 + 2);
          uint64_t v107 = *(void *)a2;
          if (v105 <= 0xFFFFFFFFFFFFFFF5 && v105 + 10 <= v106)
          {
            char v108 = 0;
            unsigned int v109 = 0;
            uint64_t v110 = 0;
            do
            {
              unint64_t v111 = v105 + 1;
              *((void *)a2 + 1) = v105 + 1;
              char v112 = *(unsigned char *)(v107 + v105);
              v110 |= (unint64_t)(v112 & 0x7F) << v108;
              if ((v112 & 0x80) == 0) {
                goto LABEL_235;
              }
              v108 += 7;
              unint64_t v105 = v111;
              BOOL v19 = v109++ > 8;
            }
            while (!v19);
LABEL_187:
            LODWORD(v110) = 0;
            goto LABEL_235;
          }
          char v128 = 0;
          unsigned int v129 = 0;
          uint64_t v110 = 0;
          if (v106 <= v105) {
            unint64_t v106 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v106 == v105)
            {
              LODWORD(v110) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v130 = v105 + 1;
              char v131 = *(unsigned char *)(v107 + v105);
              *((void *)a2 + 1) = v130;
              v110 |= (unint64_t)(v131 & 0x7F) << v128;
              if (v131 < 0)
              {
                v128 += 7;
                unint64_t v105 = v130;
                BOOL v19 = v129++ > 8;
                if (v19) {
                  goto LABEL_187;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v110) = 0;
              }
            }
            break;
          }
LABEL_235:
          *((_DWORD *)this + 34) = v110;
          goto LABEL_276;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_276;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(double **)(this + 8);
  uint64_t v5 = *(double **)(this + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  double v7 = *(double **)(v3 + 56);
  uint64_t v8 = *(double **)(v3 + 64);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  double v10 = *(double **)(v3 + 32);
  char v11 = *(double **)(v3 + 40);
  while (v10 != v11)
  {
    double v12 = *v10++;
    this = PB::Writer::write(a2, v12, 3u);
  }
  uint64_t v13 = *(double **)(v3 + 80);
  char v14 = *(double **)(v3 + 88);
  while (v13 != v14)
  {
    double v15 = *v13++;
    this = PB::Writer::write(a2, v15, 4u);
  }
  unint64_t v16 = *(double **)(v3 + 104);
  unint64_t v17 = *(double **)(v3 + 112);
  while (v16 != v17)
  {
    double v18 = *v16++;
    this = PB::Writer::write(a2, v18, 5u);
  }
  char v19 = *(unsigned char *)(v3 + 144);
  if ((v19 & 4) == 0)
  {
    if ((*(unsigned char *)(v3 + 144) & 1) == 0) {
      goto LABEL_18;
    }
LABEL_21:
    this = PB::Writer::write(a2, *(double *)(v3 + 128), 7u);
    if ((*(unsigned char *)(v3 + 144) & 2) == 0) {
      return this;
    }
    goto LABEL_22;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 140), 6u);
  char v19 = *(unsigned char *)(v3 + 144);
  if (v19) {
    goto LABEL_21;
  }
LABEL_18:
  if ((v19 & 2) == 0) {
    return this;
  }
LABEL_22:
  unsigned int v20 = *(_DWORD *)(v3 + 136);

  return PB::Writer::writeVarInt(a2, v20, 8u);
}

BOOL CMMsl::BioMotionPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(double **)(a1 + 8);
  unint64_t v2 = *(double **)(a1 + 16);
  int v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  double v6 = *(double **)(a1 + 56);
  uint64_t v5 = *(double **)(a1 + 64);
  double v7 = *(double **)(a2 + 56);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 64) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  double v9 = *(double **)(a1 + 32);
  uint64_t v8 = *(double **)(a1 + 40);
  double v10 = *(double **)(a2 + 32);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 40) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  double v12 = *(double **)(a1 + 80);
  char v11 = *(double **)(a1 + 88);
  uint64_t v13 = *(double **)(a2 + 80);
  if ((char *)v11 - (char *)v12 != *(void *)(a2 + 88) - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*v12 != *v13) {
      return 0;
    }
    ++v12;
    ++v13;
  }
  double v15 = *(double **)(a1 + 104);
  char v14 = *(double **)(a1 + 112);
  unint64_t v16 = *(double **)(a2 + 104);
  if ((char *)v14 - (char *)v15 != *(void *)(a2 + 112) - (void)v16) {
    return 0;
  }
  while (v15 != v14)
  {
    if (*v15 != *v16) {
      return 0;
    }
    ++v15;
    ++v16;
  }
  if ((*(unsigned char *)(a1 + 144) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 144) & 4) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 144) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 144))
  {
    if ((*(unsigned char *)(a2 + 144) & 1) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 144))
  {
    return 0;
  }
  BOOL v17 = (*(unsigned char *)(a2 + 144) & 2) == 0;
  if ((*(unsigned char *)(a1 + 144) & 2) != 0) {
    return (*(unsigned char *)(a2 + 144) & 2) != 0 && *(_DWORD *)(a1 + 136) == *(_DWORD *)(a2 + 136);
  }
  return v17;
}

uint64_t CMMsl::BioMotionPose::hash_value(CMMsl::BioMotionPose *this)
{
  uint64_t v2 = PBHashBytes();
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  if ((*((unsigned char *)this + 144) & 4) != 0)
  {
    uint64_t v7 = *((unsigned int *)this + 35);
    if (*((unsigned char *)this + 144))
    {
LABEL_3:
      double v8 = *((double *)this + 16);
      if (v8 == 0.0) {
        double v8 = 0.0;
      }
      if ((*((unsigned char *)this + 144) & 2) != 0) {
        goto LABEL_6;
      }
LABEL_9:
      uint64_t v9 = 0;
      return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ *(void *)&v8 ^ v9;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (*((unsigned char *)this + 144)) {
      goto LABEL_3;
    }
  }
  double v8 = 0.0;
  if ((*((unsigned char *)this + 144) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v9 = *((unsigned int *)this + 34);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ *(void *)&v8 ^ v9;
}

uint64_t CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(uint64_t this)
{
  *(void *)this = off_1003A4BB8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A4BB8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BioMotionPredictedPose::~BioMotionPredictedPose(CMMsl::BioMotionPredictedPose *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A4BB8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BioMotionPredictedPose::~BioMotionPredictedPose(this);

  operator delete();
}

uint64_t CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(uint64_t this, const CMMsl::BioMotionPredictedPose *a2)
{
  *(void *)this = off_1003A4BB8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v3 = *((void *)a2 + 2);
    *(unsigned char *)(this + 28) |= 1u;
    *(void *)(this + 16) = v3;
    char v2 = *((unsigned char *)a2 + 28);
  }
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) |= 2u;
    *(_DWORD *)(this + 24) = v4;
  }
  return this;
}

const CMMsl::BioMotionPredictedPose *CMMsl::BioMotionPredictedPose::operator=(const CMMsl::BioMotionPredictedPose *a1, const CMMsl::BioMotionPredictedPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::BioMotionPredictedPose::BioMotionPredictedPose((uint64_t)&v8, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v9;
    uint64_t v9 = v3;
    uint64_t v4 = v11;
    uint64_t v5 = *((void *)a1 + 2);
    uint64_t v6 = *((void *)a1 + 3);
    *((void *)a1 + 2) = v10;
    *((void *)a1 + 3) = v4;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    CMMsl::BioMotionPredictedPose::~BioMotionPredictedPose((CMMsl::BioMotionPredictedPose *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionPredictedPose *a2, CMMsl::BioMotionPredictedPose *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return result;
}

uint64_t CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4BB8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

void *CMMsl::BioMotionPredictedPose::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    CMMsl::BioMotionPredictedPose::BioMotionPredictedPose((uint64_t)&v8, a2);
    uint64_t v3 = a1[1];
    a1[1] = v9;
    uint64_t v9 = v3;
    uint64_t v4 = v11;
    uint64_t v5 = a1[2];
    uint64_t v6 = a1[3];
    a1[2] = v10;
    a1[3] = v4;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    CMMsl::BioMotionPredictedPose::~BioMotionPredictedPose((CMMsl::BioMotionPredictedPose *)&v8);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPredictedPose::formatText(CMMsl::BioMotionPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 28) & 2) != 0) {
    PB::TextFormatter::format(a2, "modelType", *((_DWORD *)this + 6));
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "state");
  }
  if (*((unsigned char *)this + 28)) {
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionPredictedPose::readFrom(CMMsl::BioMotionPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_48;
            }
            unint64_t v33 = v21 + 1;
            char v34 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v33;
            v26 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0) {
              break;
            }
            v31 += 7;
            unint64_t v21 = v33;
            BOOL v14 = v32++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v26) = 0;
              goto LABEL_48;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
            if (v14) {
              goto LABEL_43;
            }
          }
        }
LABEL_48:
        *((_DWORD *)this + 6) = v26;
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v29 = *((void *)a2 + 1);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v29);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::PoseState::PoseState(CMMsl::PoseState *this)
{
  *(void *)this = off_1003A8348;
  *((_DWORD *)this + 11) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A8348;
  *((_DWORD *)this + 11) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t CMMsl::BioMotionPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  char v5 = *(unsigned char *)(v3 + 28);
  if (v5)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
    char v5 = *(unsigned char *)(v3 + 28);
  }
  if ((v5 & 2) != 0)
  {
    unsigned int v6 = *(_DWORD *)(v3 + 24);
    return PB::Writer::writeVarInt(a2, v6, 3u);
  }
  return this;
}

BOOL CMMsl::BioMotionPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::PoseState::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

BOOL CMMsl::PoseState::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::Pose::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v7 = *(double **)(a1 + 8);
  unsigned int v6 = *(double **)(a1 + 16);
  uint64_t v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 != *(void *)(a2 + 16) - (void)v8) {
    return 0;
  }
  while (v7 != v6)
  {
    if (*v7 != *v8) {
      return 0;
    }
    ++v7;
    ++v8;
  }
  BOOL result = (*(unsigned char *)(a2 + 44) & 1) == 0;
  if (*(unsigned char *)(a1 + 44)) {
    return (*(unsigned char *)(a2 + 44) & 1) != 0 && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
  }
  return result;
}

unint64_t CMMsl::BioMotionPredictedPose::hash_value(CMMsl::BioMotionPredictedPose *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::PoseState::hash_value((CMMsl::PoseState *)v2);
  }
  if (*((unsigned char *)this + 28))
  {
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v4 = 0;
    return *(void *)&v3 ^ v2 ^ v4;
  }
  double v3 = 0.0;
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 6);
  return *(void *)&v3 ^ v2 ^ v4;
}

uint64_t CMMsl::BioMotionPredictedPose::makeState(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(void *this)
{
  *this = off_1003A4BF0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A4BF0;
  this[1] = 0;
  return this;
}

void CMMsl::BioMotionPropagatedAnchor::~BioMotionPropagatedAnchor(CMMsl::BioMotionPropagatedAnchor *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A4BF0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BioMotionPropagatedAnchor::~BioMotionPropagatedAnchor(this);

  operator delete();
}

void *CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(void *this, const CMMsl::BioMotionPropagatedAnchor *a2)
{
  *this = off_1003A4BF0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::BioMotionPropagatedAnchor *CMMsl::BioMotionPropagatedAnchor::operator=(const CMMsl::BioMotionPropagatedAnchor *a1, const CMMsl::BioMotionPropagatedAnchor *a2)
{
  if (a1 != a2)
  {
    CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::BioMotionPropagatedAnchor::~BioMotionPropagatedAnchor((CMMsl::BioMotionPropagatedAnchor *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BioMotionPropagatedAnchor *a2, CMMsl::BioMotionPropagatedAnchor *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(void *a1, uint64_t a2)
{
  *a1 = off_1003A4BF0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A4BF0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A4BF0;
    v6[1] = v4;
    CMMsl::BioMotionPropagatedAnchor::~BioMotionPropagatedAnchor((CMMsl::BioMotionPropagatedAnchor *)v6);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::formatText(CMMsl::BioMotionPropagatedAnchor *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionPropagatedAnchor::readFrom(CMMsl::BioMotionPropagatedAnchor *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PropagatedAnchor::PropagatedAnchor(uint64_t this)
{
  *(void *)this = off_1003A8770;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A8770;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::BioMotionPropagatedAnchor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::PropagatedAnchor::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::PropagatedAnchor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !CMMsl::Pose::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v7 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  char v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 != *(void *)(a2 + 16) - (void)v8) {
    return 0;
  }
  while (v7 != v6)
  {
    if (*v7 != *v8) {
      return 0;
    }
    ++v7;
    ++v8;
  }
  BOOL result = (*(unsigned char *)(a2 + 48) & 1) == 0;
  if (*(unsigned char *)(a1 + 48)) {
    return (*(unsigned char *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  }
  return result;
}

CMMsl::PropagatedAnchor *CMMsl::BioMotionPropagatedAnchor::hash_value(CMMsl::BioMotionPropagatedAnchor *this)
{
  BOOL result = (CMMsl::PropagatedAnchor *)*((void *)this + 1);
  if (result) {
    return (CMMsl::PropagatedAnchor *)CMMsl::PropagatedAnchor::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(uint64_t this)
{
  *(void *)this = off_1003A4C28;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A4C28;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BleedToZeroCorrection::~BleedToZeroCorrection(CMMsl::BleedToZeroCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A4C28;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BleedToZeroCorrection::~BleedToZeroCorrection(this);

  operator delete();
}

uint64_t CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(uint64_t this, const CMMsl::BleedToZeroCorrection *a2)
{
  *(void *)this = off_1003A4C28;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 20))
  {
    char v2 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) |= 1u;
    *(unsigned char *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::BleedToZeroCorrection::operator=(uint64_t a1, const CMMsl::BleedToZeroCorrection *a2)
{
  if ((const CMMsl::BleedToZeroCorrection *)a1 != a2)
  {
    CMMsl::BleedToZeroCorrection::BleedToZeroCorrection((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    CMMsl::BleedToZeroCorrection::~BleedToZeroCorrection((CMMsl::BleedToZeroCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BleedToZeroCorrection *a2, CMMsl::BleedToZeroCorrection *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4C28;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::BleedToZeroCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::BleedToZeroCorrection::BleedToZeroCorrection((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    CMMsl::BleedToZeroCorrection::~BleedToZeroCorrection((CMMsl::BleedToZeroCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::BleedToZeroCorrection::formatText(CMMsl::BleedToZeroCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "withAnchoredStaticPose", *((unsigned char *)this + 16));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BleedToZeroCorrection::readFrom(CMMsl::BleedToZeroCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 >= *((void *)a2 + 2))
        {
          BOOL v24 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          int v23 = *(unsigned __int8 *)(*(void *)a2 + v21);
          *((void *)a2 + 1) = v22;
          BOOL v24 = v23 != 0;
        }
        *((unsigned char *)this + 16) = v24;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BleedToZeroCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::BleedToZeroCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if ((*(unsigned char *)(a1 + 20) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

unint64_t CMMsl::BleedToZeroCorrection::hash_value(CMMsl::BleedToZeroCorrection *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  }
  if (*((unsigned char *)this + 20)) {
    uint64_t v3 = *((unsigned __int8 *)this + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::BleedToZeroCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::BodyMetrics::BodyMetrics(uint64_t this)
{
  *(void *)this = off_1003A4C60;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = off_1003A4C60;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void CMMsl::BodyMetrics::~BodyMetrics(CMMsl::BodyMetrics *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::BodyMetrics::BodyMetrics(CMMsl::BodyMetrics *this, const CMMsl::BodyMetrics *a2)
{
  *(void *)this = off_1003A4C60;
  *((_DWORD *)this + 16) = 0;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    __int16 v3 = 16;
    *((_WORD *)this + 32) = 16;
    *((_DWORD *)this + 6) = v4;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 7);
    v3 |= 0x20u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 7) = result;
    __int16 v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x1000) != 0)
  {
    float result = *((float *)a2 + 14);
    v3 |= 0x1000u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 14) = result;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 13);
  v3 |= 0x800u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 13) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  float result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  float result = *((float *)a2 + 9);
  v3 |= 0x80u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  float result = *((float *)a2 + 8);
  v3 |= 0x40u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  float result = *((float *)a2 + 10);
  v3 |= 0x100u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 10) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  float result = *((float *)a2 + 11);
  v3 |= 0x200u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 11) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v6 = *((_DWORD *)a2 + 5);
  v3 |= 8u;
  *((_WORD *)this + 32) = v3;
  *((_DWORD *)this + 5) = v6;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  float result = *((float *)a2 + 12);
  v3 |= 0x400u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 12) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  char v7 = *((unsigned char *)a2 + 60);
  v3 |= 0x2000u;
  *((_WORD *)this + 32) = v3;
  *((unsigned char *)this + 60) = v7;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_30:
    float result = *((float *)a2 + 2);
    *((_WORD *)this + 32) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
LABEL_29:
  int v8 = *((_DWORD *)a2 + 4);
  v3 |= 4u;
  *((_WORD *)this + 32) = v3;
  *((_DWORD *)this + 4) = v8;
  if (*((_WORD *)a2 + 32)) {
    goto LABEL_30;
  }
  return result;
}

CMMsl *CMMsl::BodyMetrics::operator=(CMMsl *a1, const CMMsl::BodyMetrics *a2)
{
  if (a1 != a2)
  {
    CMMsl::BodyMetrics::BodyMetrics((CMMsl::BodyMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::BodyMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::BodyMetrics *a2, CMMsl::BodyMetrics *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  int v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  int v6 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  int v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  int v8 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v8;
  int v9 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v9;
  int v10 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v10;
  int v11 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  int v12 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v12;
  int v13 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v13;
  int v14 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v14;
  LOBYTE(v13) = *((unsigned char *)this + 60);
  *((unsigned char *)this + 60) = *((unsigned char *)a2 + 60);
  *((unsigned char *)a2 + 60) = v13;
  int v15 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v15;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float CMMsl::BodyMetrics::BodyMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4C60;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::BodyMetrics::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BodyMetrics::BodyMetrics((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BodyMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::BodyMetrics::formatText(CMMsl::BodyMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "adaptiveExerciseMinuteThreshold", *((float *)this + 2));
    __int16 v5 = *((_WORD *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "age", *((float *)this + 3));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "betaBlockerUse", *((unsigned char *)this + 60));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "biologicalSex", *((_DWORD *)this + 4));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "condition", *((_DWORD *)this + 5));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "gender", *((_DWORD *)this + 6));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "heightM", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "hrmax", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "hrmin", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "hronset", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "pal", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "runVo2max", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "vo2max", *((float *)this + 13));
  if ((*((_WORD *)this + 32) & 0x1000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "weightKG", *((float *)this + 14));
LABEL_16:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BodyMetrics::readFrom(CMMsl::BodyMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 32) |= 0x10u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_106;
                  }
                  unint64_t v43 = v20++;
                  char v44 = *(unsigned char *)(v21 + v43);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  BOOL v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_105;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_105:
                unint64_t v2 = v43 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_106;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_106:
              *((_DWORD *)this + 6) = v24;
              goto LABEL_117;
            case 2u:
              *((_WORD *)this + 32) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_76;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_101;
            case 3u:
              *((_WORD *)this + 32) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_76;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_101;
            case 4u:
              *((_WORD *)this + 32) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_76;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_101;
            case 5u:
              *((_WORD *)this + 32) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_76;
              }
              *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_101;
            case 6u:
              *((_WORD *)this + 32) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_76;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_101;
            case 7u:
              *((_WORD *)this + 32) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_76;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_101;
            case 8u:
              *((_WORD *)this + 32) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_76;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_101;
            case 9u:
              *((_WORD *)this + 32) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_76;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_101;
            case 0xAu:
              *((_WORD *)this + 32) |= 8u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_111;
                  }
                  unint64_t v47 = v27++;
                  char v48 = *(unsigned char *)(v28 + v47);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_110;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_111;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *((_DWORD *)this + 5) = v31;
              goto LABEL_117;
            case 0xBu:
              *((_WORD *)this + 32) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_76;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_101;
            case 0xCu:
              *((_WORD *)this + 32) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 60) = v34;
              goto LABEL_117;
            case 0xDu:
              *((_WORD *)this + 32) |= 4u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_116;
                  }
                  unint64_t v51 = v35++;
                  char v52 = *(unsigned char *)(v36 + v51);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_115:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_115;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_116;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_116:
              *((_DWORD *)this + 4) = v39;
LABEL_117:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *((_WORD *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_101:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_76:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_117;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_117;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BodyMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 2u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 3u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 4u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 5u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 6u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 7u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 8u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 9u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 0xDu);
    if ((*(_WORD *)(v3 + 64) & 1) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 60), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_29:
  float v5 = *(float *)(v3 + 8);

  return PB::Writer::write(a2, v5, 0xEu);
}

BOOL CMMsl::BodyMetrics::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 64);
  __int16 v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x1000) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 1) == 0;
  if (v2) {
    return (v3 & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return v4;
}

uint64_t CMMsl::BodyMetrics::hash_value(CMMsl::BodyMetrics *this)
{
  __int16 v1 = *((_WORD *)this + 32);
  if ((v1 & 0x10) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_37:
    uint64_t v4 = 0;
    if ((*((_WORD *)this + 32) & 0x1000) != 0) {
      goto LABEL_6;
    }
LABEL_38:
    uint64_t v6 = 0;
    if ((*((_WORD *)this + 32) & 0x800) != 0) {
      goto LABEL_9;
    }
LABEL_39:
    uint64_t v8 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_12;
    }
LABEL_40:
    uint64_t v10 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_15;
    }
LABEL_41:
    uint64_t v12 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_18;
    }
LABEL_42:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 32) & 0x100) != 0) {
      goto LABEL_21;
    }
LABEL_43:
    uint64_t v16 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0) {
      goto LABEL_24;
    }
LABEL_44:
    uint64_t v18 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_27;
    }
    goto LABEL_45;
  }
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((v1 & 0x20) == 0) {
    goto LABEL_37;
  }
LABEL_3:
  float v3 = *((float *)this + 7);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x1000) == 0) {
    goto LABEL_38;
  }
LABEL_6:
  float v5 = *((float *)this + 14);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x800) == 0) {
    goto LABEL_39;
  }
LABEL_9:
  float v7 = *((float *)this + 13);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_40;
  }
LABEL_12:
  float v9 = *((float *)this + 3);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_41;
  }
LABEL_15:
  float v11 = *((float *)this + 9);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_42;
  }
LABEL_18:
  float v13 = *((float *)this + 8);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x100) == 0) {
    goto LABEL_43;
  }
LABEL_21:
  float v15 = *((float *)this + 10);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x200) == 0) {
    goto LABEL_44;
  }
LABEL_24:
  float v17 = *((float *)this + 11);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 8) != 0)
  {
LABEL_27:
    uint64_t v19 = *((unsigned int *)this + 5);
    if ((*((_WORD *)this + 32) & 0x400) != 0) {
      goto LABEL_28;
    }
LABEL_46:
    uint64_t v21 = 0;
    if ((*((_WORD *)this + 32) & 0x2000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_47;
  }
LABEL_45:
  uint64_t v19 = 0;
  if ((*((_WORD *)this + 32) & 0x400) == 0) {
    goto LABEL_46;
  }
LABEL_28:
  float v20 = *((float *)this + 12);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x2000) != 0)
  {
LABEL_31:
    uint64_t v22 = *((unsigned __int8 *)this + 60);
    if ((v1 & 4) != 0) {
      goto LABEL_32;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v22 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_32:
    uint64_t v23 = *((unsigned int *)this + 4);
    if (v1) {
      goto LABEL_33;
    }
LABEL_49:
    uint64_t v25 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25;
  }
LABEL_48:
  uint64_t v23 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_49;
  }
LABEL_33:
  float v24 = *((float *)this + 2);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25;
}

void *CMMsl::BraveHeartAccel::BraveHeartAccel(void *this)
{
  *this = off_1003A4C98;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003A4C98;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::BraveHeartAccel::~BraveHeartAccel(CMMsl::BraveHeartAccel *this)
{
  *(void *)this = off_1003A4C98;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A4C98;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A4C98;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

void *CMMsl::BraveHeartAccel::BraveHeartAccel(void *this, const CMMsl::BraveHeartAccel *a2)
{
  this[1] = 0;
  *this = off_1003A4C98;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_10008E9E4();
  }
  return this;
}

void sub_10008E9E4()
{
}

void sub_10008EAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartAccel::operator=(uint64_t a1, const CMMsl::BraveHeartAccel *a2)
{
  if ((const CMMsl::BraveHeartAccel *)a1 != a2)
  {
    CMMsl::BraveHeartAccel::BraveHeartAccel(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = off_1003A4C98;
    float v9 = (void **)&v7;
    sub_100274A84(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::BraveHeartAccel *a2, CMMsl::BraveHeartAccel *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::BraveHeartAccel::BraveHeartAccel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4C98;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = off_1003A4C98;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::BraveHeartAccel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    float v9 = off_1003A4C98;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_100274B44((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    uint64_t v12 = (void **)&v10;
    float v9 = off_1003A4C98;
    sub_100274A84(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartAccel::formatText(CMMsl::BraveHeartAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "accel");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartAccel::readFrom(CMMsl::BraveHeartAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_10008EFEC();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_10008EFEC()
{
}

void sub_10008F104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    long long v5 = *v2++;
  return this;
}

BOOL CMMsl::BraveHeartAccel::operator==(uint64_t a1, uint64_t a2)
{
  return sub_10008F1A0((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL sub_10008F1A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::Accel::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::BraveHeartAccel::hash_value(CMMsl::BraveHeartAccel *this)
{
  __int16 v1 = (CMMsl::Accel **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::Accel **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::Accel::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void *CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(void *this)
{
  *this = off_1003A4CD0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003A4CD0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::BraveHeartDeviceMotion::~BraveHeartDeviceMotion(CMMsl::BraveHeartDeviceMotion *this)
{
  *(void *)this = off_1003A4CD0;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A4CD0;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A4CD0;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

void *CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(void *this, const CMMsl::BraveHeartDeviceMotion *a2)
{
  this[1] = 0;
  *this = off_1003A4CD0;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_10008F450();
  }
  return this;
}

void sub_10008F450()
{
}

void sub_10008F554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartDeviceMotion::operator=(uint64_t a1, const CMMsl::BraveHeartDeviceMotion *a2)
{
  if ((const CMMsl::BraveHeartDeviceMotion *)a1 != a2)
  {
    CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = off_1003A4CD0;
    unsigned int v9 = (void **)&v7;
    sub_100274A84(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::BraveHeartDeviceMotion *a2, CMMsl::BraveHeartDeviceMotion *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4CD0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = off_1003A4CD0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::BraveHeartDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v9 = off_1003A4CD0;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_100274B44((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    char v12 = (void **)&v10;
    unsigned int v9 = off_1003A4CD0;
    sub_100274A84(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartDeviceMotion::formatText(CMMsl::BraveHeartDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "deviceMotion");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartDeviceMotion::readFrom(CMMsl::BraveHeartDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_10008FA58();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_10008FA58()
{
}

void sub_10008FB70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    long long v5 = *v2++;
  return this;
}

BOOL CMMsl::BraveHeartDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  return sub_10008FC0C((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL sub_10008FC0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::DeviceMotion::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::BraveHeartDeviceMotion::hash_value(CMMsl::BraveHeartDeviceMotion *this)
{
  __int16 v1 = (CMMsl::DeviceMotion **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::DeviceMotion **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::DeviceMotion::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(uint64_t this)
{
  *(void *)this = off_1003A4D08;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A4D08;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::BraveHeartNatalieData::~BraveHeartNatalieData(CMMsl::BraveHeartNatalieData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(uint64_t this, const CMMsl::BraveHeartNatalieData *a2)
{
  *(void *)this = off_1003A4D08;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    uint64_t v4 = *((void *)a2 + 4);
    char v3 = 8;
    *(unsigned char *)(this + 44) = 8;
    *(void *)(this + 32) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 10);
      *(unsigned char *)(this + 44) = v3 | 0x10;
      *(_DWORD *)(this + 40) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 44) = v3;
  *(void *)(this + 8) = v7;
  if ((*((unsigned char *)a2 + 44) & 0x10) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::BraveHeartNatalieData::operator=(uint64_t a1, const CMMsl::BraveHeartNatalieData *a2)
{
  if ((const CMMsl::BraveHeartNatalieData *)a1 != a2)
  {
    CMMsl::BraveHeartNatalieData::BraveHeartNatalieData((uint64_t)&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v9;
    uint64_t v9 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BraveHeartNatalieData *a2, CMMsl::BraveHeartNatalieData *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  return result;
}

double CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4D08;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A4D08;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::BraveHeartNatalieData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = off_1003A4D08;
    uint64_t v3 = *(void *)(a2 + 40);
    *(_DWORD *)(a2 + 44) = 0;
    long long v9 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v3;
    uint64_t v10 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartNatalieData::formatText(CMMsl::BraveHeartNatalieData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "basalNatalies", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "mets", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "natalies", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "session", *((_DWORD *)this + 10));
  if ((*((unsigned char *)this + 44) & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 4));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartNatalieData::readFrom(CMMsl::BraveHeartNatalieData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 44) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 2u:
              *((unsigned char *)this + 44) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 3u:
              *((unsigned char *)this + 44) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 4u:
              *((unsigned char *)this + 44) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_51:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_35:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_57;
            case 5u:
              *((unsigned char *)this + 44) |= 0x10u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_56;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_55;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_56;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *((_DWORD *)this + 10) = v25;
LABEL_57:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_57;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BraveHeartNatalieData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
    if ((*(unsigned char *)(v3 + 44) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  int v5 = *(_DWORD *)(v3 + 40);

  return PB::Writer::writeVarInt(a2, v5, 5u);
}

BOOL CMMsl::BraveHeartNatalieData::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 44) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 44) & 0x10) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return v2;
}

uint64_t CMMsl::BraveHeartNatalieData::hash_value(CMMsl::BraveHeartNatalieData *this)
{
  if ((*((unsigned char *)this + 44) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    double v3 = 0.0;
    if (*((unsigned char *)this + 44)) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  double v3 = *((double *)this + 3);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if (*((unsigned char *)this + 44))
  {
LABEL_9:
    double v4 = *((double *)this + 1);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v5 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ v5;
  }
LABEL_18:
  double v4 = 0.0;
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v5 = *((int *)this + 10);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ v5;
}

void *CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(void *this)
{
  *this = off_1003A4D40;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003A4D40;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::BraveHeartVO2MaxInput::~BraveHeartVO2MaxInput(CMMsl::BraveHeartVO2MaxInput *this)
{
  *(void *)this = off_1003A4D40;
  double v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A4D40;
  double v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A4D40;
  double v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

void *CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(void *this, const CMMsl::BraveHeartVO2MaxInput *a2)
{
  this[1] = 0;
  *this = off_1003A4D40;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_100090870();
  }
  return this;
}

void sub_100090870()
{
}

void sub_100090974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartVO2MaxInput::operator=(uint64_t a1, const CMMsl::BraveHeartVO2MaxInput *a2)
{
  if ((const CMMsl::BraveHeartVO2MaxInput *)a1 != a2)
  {
    CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = off_1003A4D40;
    char v9 = (void **)&v7;
    sub_100274A84(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::BraveHeartVO2MaxInput *a2, CMMsl::BraveHeartVO2MaxInput *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4D40;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = off_1003A4D40;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v9 = off_1003A4D40;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_100274B44((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    unint64_t v12 = (void **)&v10;
    char v9 = off_1003A4D40;
    sub_100274A84(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::formatText(CMMsl::BraveHeartVO2MaxInput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "vo2MaxInput");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartVO2MaxInput::readFrom(CMMsl::BraveHeartVO2MaxInput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_100090E78();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_100090E78()
{
}

void sub_100090F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartVO2MaxInput::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    long long v5 = *v2++;
  return this;
}

BOOL CMMsl::BraveHeartVO2MaxInput::operator==(uint64_t a1, uint64_t a2)
{
  return sub_10009102C((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL sub_10009102C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::VO2MaxInput::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::hash_value(CMMsl::BraveHeartVO2MaxInput *this)
{
  double v1 = (CMMsl::VO2MaxInput **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::VO2MaxInput **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::VO2MaxInput::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(uint64_t this)
{
  *(void *)this = off_1003A4D78;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A4D78;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::BraveHeartWorkoutEvent::~BraveHeartWorkoutEvent(CMMsl::BraveHeartWorkoutEvent *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(CMMsl::BraveHeartWorkoutEvent *this, const CMMsl::BraveHeartWorkoutEvent *a2)
{
  *(void *)this = off_1003A4D78;
  *((_DWORD *)this + 6) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if ((v2 & 4) != 0)
  {
    int v4 = *((_DWORD *)a2 + 5);
    char v3 = 4;
    *((unsigned char *)this + 24) = 4;
    *((_DWORD *)this + 5) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 24) = v3;
    *((_DWORD *)this + 4) = v5;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 24) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::operator=(uint64_t a1, const CMMsl::BraveHeartWorkoutEvent *a2)
{
  if ((const CMMsl::BraveHeartWorkoutEvent *)a1 != a2)
  {
    CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent((CMMsl::BraveHeartWorkoutEvent *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v6 = v10;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v6;
    uint64_t v9 = v5;
    uint64_t v10 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BraveHeartWorkoutEvent *a2, CMMsl::BraveHeartWorkoutEvent *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4D78;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A4D78;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A4D78;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v10 = *(_DWORD *)(a1 + 24);
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    v9[1] = v7;
    void v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::formatText(CMMsl::BraveHeartWorkoutEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "eventTime", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "eventType", *((_DWORD *)this + 4));
  if ((*((unsigned char *)this + 24) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 5));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartWorkoutEvent::readFrom(CMMsl::BraveHeartWorkoutEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_66:
          unint64_t v2 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v2 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v2;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 4) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          unint64_t v2 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 5) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(this + 24) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
    if ((*(unsigned char *)(v3 + 24) & 1) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 20), 1u);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 3u);
}

BOOL CMMsl::BraveHeartWorkoutEvent::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if (*(unsigned char *)(a1 + 24)) {
    return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::hash_value(CMMsl::BraveHeartWorkoutEvent *this)
{
  if ((*((unsigned char *)this + 24) & 4) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 5);
    if ((*((unsigned char *)this + 24) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((int *)this + 4);
      if (*((unsigned char *)this + 24)) {
        goto LABEL_4;
      }
LABEL_9:
      double v3 = 0.0;
      return v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return v2 ^ v1 ^ *(void *)&v3;
}

uint64_t CMMsl::BumpToWakeState::BumpToWakeState(uint64_t this)
{
  *(void *)this = off_1003A4DB0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A4DB0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BumpToWakeState::~BumpToWakeState(CMMsl::BumpToWakeState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::BumpToWakeState::BumpToWakeState(uint64_t this, const CMMsl::BumpToWakeState *a2)
{
  *(void *)this = off_1003A4DB0;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::BumpToWakeState *CMMsl::BumpToWakeState::operator=(const CMMsl::BumpToWakeState *a1, const CMMsl::BumpToWakeState *a2)
{
  if (a1 != a2)
  {
    CMMsl::BumpToWakeState::BumpToWakeState((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BumpToWakeState *a2, CMMsl::BumpToWakeState *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::BumpToWakeState::BumpToWakeState(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A4DB0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = off_1003A4DB0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BumpToWakeState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = off_1003A4DB0;
    v8[1] = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::BumpToWakeState::formatText(CMMsl::BumpToWakeState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BumpToWakeState::readFrom(CMMsl::BumpToWakeState *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          unint64_t v3 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
LABEL_59:
          unint64_t v3 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v3 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v3;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((void *)this + 1) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BumpToWakeState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::BumpToWakeState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::BumpToWakeState::hash_value(CMMsl::BumpToWakeState *this)
{
  if (*((unsigned char *)this + 20))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ v1;
}

double CMMsl::CV3DPredictedPose::CV3DPredictedPose(CMMsl::CV3DPredictedPose *this)
{
  *(void *)this = off_1003A4DE8;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A4DE8;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::CV3DPredictedPose::~CV3DPredictedPose(CMMsl::CV3DPredictedPose *this)
{
  *(void *)this = off_1003A4DE8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::CV3DPredictedPose::~CV3DPredictedPose(this);

  operator delete();
}

CMMsl::CV3DPredictedPose *CMMsl::CV3DPredictedPose::CV3DPredictedPose(CMMsl::CV3DPredictedPose *this, const CMMsl::CV3DPredictedPose *a2)
{
  *(void *)this = off_1003A4DE8;
  *(_OWORD *)((char *)this + 8) = 0u;
  char v4 = (char *)this + 8;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((unsigned char *)a2 + 72) & 2) != 0)
  {
    uint64_t v5 = *((void *)a2 + 8);
    *((unsigned char *)this + 72) = 2;
    *((void *)this + 8) = v5;
  }
  if (this != a2)
  {
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  }
  if (*((unsigned char *)a2 + 72))
  {
    uint64_t v6 = *((void *)a2 + 7);
    *((unsigned char *)this + 72) |= 1u;
    *((void *)this + 7) = v6;
  }
  return this;
}

uint64_t CMMsl::CV3DPredictedPose::operator=(uint64_t a1, const CMMsl::CV3DPredictedPose *a2)
{
  if ((const CMMsl::CV3DPredictedPose *)a1 != a2)
  {
    CMMsl::CV3DPredictedPose::CV3DPredictedPose((CMMsl::CV3DPredictedPose *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v7;
    CMMsl::CV3DPredictedPose::~CV3DPredictedPose((CMMsl::CV3DPredictedPose *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CV3DPredictedPose *a2, CMMsl::CV3DPredictedPose *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::CV3DPredictedPose::CV3DPredictedPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4DE8;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::CV3DPredictedPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::CV3DPredictedPose::CV3DPredictedPose((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v7;
    CMMsl::CV3DPredictedPose::~CV3DPredictedPose((CMMsl::CV3DPredictedPose *)&v9);
  }
  return a1;
}

uint64_t CMMsl::CV3DPredictedPose::formatText(CMMsl::CV3DPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "rotationMatrix", v7);
  }
  char v8 = *((unsigned char *)this + 72);
  if (v8)
  {
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 7));
    char v8 = *((unsigned char *)this + 72);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
  }
  uint64_t v9 = (double *)*((void *)this + 4);
  long long v10 = (double *)*((void *)this + 5);
  while (v9 != v10)
  {
    double v11 = *v9++;
    PB::TextFormatter::format(a2, "translation", v11);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::CV3DPredictedPose::readFrom(CMMsl::CV3DPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)((char *)this + 32);
    uint64_t v9 = (char *)this + 48;
    long long v10 = (void **)((char *)this + 8);
    double v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 72) |= 2u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_117;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v25);
          goto LABEL_119;
        case 2u:
          if (v24 != 2)
          {
            unint64_t v56 = (char *)*((void *)this + 2);
            unint64_t v55 = *((void *)this + 3);
            if ((unint64_t)v56 >= v55)
            {
              uint64_t v60 = (char *)*v10;
              uint64_t v61 = (v56 - (unsigned char *)*v10) >> 3;
              unint64_t v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 61) {
LABEL_129:
              }
                sub_10000EE98();
              uint64_t v63 = v55 - (void)v60;
              if (v63 >> 2 > v62) {
                unint64_t v62 = v63 >> 2;
              }
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v62;
              }
              if (v64)
              {
                unint64_t v65 = (char *)sub_10000EEB0((uint64_t)v11, v64);
                uint64_t v60 = (char *)*((void *)this + 1);
                unint64_t v56 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v65 = 0;
              }
              unint64_t v72 = &v65[8 * v61];
              *(void *)unint64_t v72 = 0;
              unint64_t v57 = v72 + 8;
              while (v56 != v60)
              {
                uint64_t v73 = *((void *)v56 - 1);
                v56 -= 8;
                *((void *)v72 - 1) = v73;
                v72 -= 8;
              }
              *((void *)this + 1) = v72;
              *((void *)this + 2) = v57;
              *((void *)this + 3) = &v65[8 * v64];
              if (v60) {
                operator delete(v60);
              }
            }
            else
            {
              *(void *)unint64_t v56 = 0;
              unint64_t v57 = v56 + 8;
            }
            *((void *)this + 2) = v57;
            goto LABEL_115;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v26 = *((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
          while (v26 < v27 && !*((unsigned char *)a2 + 24))
          {
            char v29 = (char *)*((void *)this + 2);
            unint64_t v28 = *((void *)this + 3);
            if ((unint64_t)v29 >= v28)
            {
              uint64_t v31 = (char *)*v10;
              uint64_t v32 = (v29 - (unsigned char *)*v10) >> 3;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61) {
                goto LABEL_129;
              }
              uint64_t v34 = v28 - (void)v31;
              if (v34 >> 2 > v33) {
                unint64_t v33 = v34 >> 2;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                unint64_t v36 = (char *)sub_10000EEB0((uint64_t)v11, v35);
                uint64_t v31 = (char *)*((void *)this + 1);
                char v29 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v36 = 0;
              }
              char v37 = &v36[8 * v32];
              *(void *)char v37 = 0;
              unsigned int v30 = v37 + 8;
              while (v29 != v31)
              {
                uint64_t v38 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v37 - 1) = v38;
                v37 -= 8;
              }
              *((void *)this + 1) = v37;
              *((void *)this + 2) = v30;
              *((void *)this + 3) = &v36[8 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(void *)char v29 = 0;
              unsigned int v30 = v29 + 8;
            }
            *((void *)this + 2) = v30;
            unint64_t v39 = *((void *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)a2 + 2)) {
              goto LABEL_83;
            }
            *(v30 - 1) = *(void *)(*(void *)a2 + v39);
            unint64_t v27 = *((void *)a2 + 2);
            unint64_t v26 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v26;
          }
          goto LABEL_84;
        case 3u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v40 = *((void *)a2 + 1);
            unint64_t v41 = *((void *)a2 + 2);
            while (v40 < v41 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v43 = (char *)*((void *)this + 5);
              unint64_t v42 = *((void *)this + 6);
              if ((unint64_t)v43 >= v42)
              {
                char v45 = (char *)*v8;
                uint64_t v46 = (v43 - (unsigned char *)*v8) >> 3;
                unint64_t v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61) {
                  goto LABEL_128;
                }
                uint64_t v48 = v42 - (void)v45;
                if (v48 >> 2 > v47) {
                  unint64_t v47 = v48 >> 2;
                }
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v49 = v47;
                }
                if (v49)
                {
                  unsigned int v50 = (char *)sub_10000EEB0((uint64_t)v9, v49);
                  char v45 = (char *)*((void *)this + 4);
                  unint64_t v43 = (char *)*((void *)this + 5);
                }
                else
                {
                  unsigned int v50 = 0;
                }
                unint64_t v51 = &v50[8 * v46];
                *(void *)unint64_t v51 = 0;
                char v44 = v51 + 8;
                while (v43 != v45)
                {
                  uint64_t v52 = *((void *)v43 - 1);
                  v43 -= 8;
                  *((void *)v51 - 1) = v52;
                  v51 -= 8;
                }
                *((void *)this + 4) = v51;
                *((void *)this + 5) = v44;
                *((void *)this + 6) = &v50[8 * v49];
                if (v45) {
                  operator delete(v45);
                }
              }
              else
              {
                *(void *)unint64_t v43 = 0;
                char v44 = v43 + 8;
              }
              *((void *)this + 5) = v44;
              unint64_t v53 = *((void *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)a2 + 2))
              {
LABEL_83:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v44 - 1) = *(void *)(*(void *)a2 + v53);
              unint64_t v41 = *((void *)a2 + 2);
              unint64_t v40 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v40;
            }
LABEL_84:
            PB::Reader::recallMark();
          }
          else
          {
            char v59 = (char *)*((void *)this + 5);
            unint64_t v58 = *((void *)this + 6);
            if ((unint64_t)v59 >= v58)
            {
              uint64_t v66 = (char *)*v8;
              uint64_t v67 = (v59 - (unsigned char *)*v8) >> 3;
              unint64_t v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) >> 61) {
LABEL_128:
              }
                sub_10000EE98();
              uint64_t v69 = v58 - (void)v66;
              if (v69 >> 2 > v68) {
                unint64_t v68 = v69 >> 2;
              }
              if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v70 = v68;
              }
              if (v70)
              {
                unint64_t v71 = (char *)sub_10000EEB0((uint64_t)v9, v70);
                uint64_t v66 = (char *)*((void *)this + 4);
                char v59 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v71 = 0;
              }
              uint64_t v74 = &v71[8 * v67];
              *(void *)uint64_t v74 = 0;
              unint64_t v57 = v74 + 8;
              while (v59 != v66)
              {
                uint64_t v75 = *((void *)v59 - 1);
                v59 -= 8;
                *((void *)v74 - 1) = v75;
                v74 -= 8;
              }
              *((void *)this + 4) = v74;
              *((void *)this + 5) = v57;
              *((void *)this + 6) = &v71[8 * v70];
              if (v66) {
                operator delete(v66);
              }
            }
            else
            {
              *(void *)char v59 = 0;
              unint64_t v57 = v59 + 8;
            }
            *((void *)this + 5) = v57;
LABEL_115:
            unint64_t v76 = *((void *)a2 + 1);
            if (v76 <= 0xFFFFFFFFFFFFFFF7 && v76 + 8 <= *((void *)a2 + 2))
            {
              *(v57 - 1) = *(void *)(*(void *)a2 + v76);
LABEL_119:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_117:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_120:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 4u:
          *((unsigned char *)this + 72) |= 1u;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)a2 + 2)) {
            goto LABEL_117;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v54);
          goto LABEL_119;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_120;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CV3DPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 72) & 2) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
  }
  int v4 = *(double **)(v3 + 8);
  long long v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  double v7 = *(double **)(v3 + 32);
  char v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  if (*(unsigned char *)(v3 + 72))
  {
    double v10 = *(double *)(v3 + 56);
    return PB::Writer::write(a2, v10, 4u);
  }
  return this;
}

BOOL CMMsl::CV3DPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 72) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 8);
  unint64_t v2 = *(double **)(a1 + 16);
  int v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  double v6 = *(double **)(a1 + 32);
  long long v5 = *(double **)(a1 + 40);
  double v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  BOOL v8 = (*(unsigned char *)(a2 + 72) & 1) == 0;
  if (*(unsigned char *)(a1 + 72)) {
    return (*(unsigned char *)(a2 + 72) & 1) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  }
  return v8;
}

uint64_t CMMsl::CV3DPredictedPose::hash_value(CMMsl::CV3DPredictedPose *this)
{
  if ((*((unsigned char *)this + 72) & 2) != 0)
  {
    if (*((double *)this + 8) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 8);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  if (*((unsigned char *)this + 72))
  {
    double v5 = *((double *)this + 7);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ *(void *)&v5;
}

void CMMsl::CV3DSLAMState::~CV3DSLAMState(CMMsl::CV3DSLAMState *this)
{
  *(void *)this = off_1003A4E20;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::CV3DSLAMState::~CV3DSLAMState(this);

  operator delete();
}

CMMsl::CV3DSLAMState *CMMsl::CV3DSLAMState::CV3DSLAMState(CMMsl::CV3DSLAMState *this, const CMMsl::CV3DSLAMState *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = off_1003A4E20;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    uint64_t v5 = *((void *)a2 + 10);
    *((unsigned char *)this + 88) = 1;
    *((void *)this + 10) = v5;
  }
  if (this != a2)
  {
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_1000330C4((char *)this + 56, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  return this;
}

uint64_t CMMsl::CV3DSLAMState::operator=(uint64_t a1, const CMMsl::CV3DSLAMState *a2)
{
  if ((const CMMsl::CV3DSLAMState *)a1 != a2)
  {
    CMMsl::CV3DSLAMState::CV3DSLAMState((CMMsl::CV3DSLAMState *)&v11, a2);
    int v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    int v18 = v3;
    uint64_t v4 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v17;
    uint64_t v17 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    long long v14 = v7;
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    long long v15 = v8;
    uint64_t v9 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v16;
    uint64_t v16 = v9;
    CMMsl::CV3DSLAMState::~CV3DSLAMState((CMMsl::CV3DSLAMState *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CV3DSLAMState *a2, CMMsl::CV3DSLAMState *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  double result = *((double *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((double *)a2 + 10) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
  return result;
}

uint64_t CMMsl::CV3DSLAMState::CV3DSLAMState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4E20;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  sub_100274A30(v5, (__n128 *)(a2 + 56));
  return a1;
}

uint64_t CMMsl::CV3DSLAMState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::CV3DSLAMState::CV3DSLAMState((uint64_t)&v11, a2);
    int v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    int v18 = v3;
    uint64_t v4 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v17;
    uint64_t v17 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    long long v14 = v7;
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    long long v15 = v8;
    uint64_t v9 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v16;
    uint64_t v16 = v9;
    CMMsl::CV3DSLAMState::~CV3DSLAMState((CMMsl::CV3DSLAMState *)&v11);
  }
  return a1;
}

uint64_t CMMsl::CV3DSLAMState::formatText(CMMsl::CV3DSLAMState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "rotationMatrix", v7);
  }
  if (*((unsigned char *)this + 88)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  }
  long long v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "translation", v10);
  }
  uint64_t v11 = (double *)*((void *)this + 7);
  long long v12 = (double *)*((void *)this + 8);
  while (v11 != v12)
  {
    double v13 = *v11++;
    PB::TextFormatter::format(a2, "velocity", v13);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::CV3DSLAMState::readFrom(CMMsl::CV3DSLAMState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    long long v8 = (void **)((char *)this + 56);
    unint64_t v102 = (char *)this + 72;
    uint64_t v9 = (void **)((char *)this + 32);
    double v10 = (char *)this + 48;
    uint64_t v11 = (void **)((char *)this + 8);
    long long v12 = (char *)this + 24;
    while (1)
    {
      uint64_t v13 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 88) |= 1u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
            goto LABEL_155;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v26);
          goto LABEL_157;
        case 2u:
          if (v25 != 2)
          {
            unint64_t v70 = (char *)*((void *)this + 2);
            unint64_t v69 = *((void *)this + 3);
            if ((unint64_t)v70 >= v69)
            {
              unint64_t v76 = (char *)*v11;
              uint64_t v77 = (v70 - (unsigned char *)*v11) >> 3;
              unint64_t v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 61) {
LABEL_166:
              }
                sub_10000EE98();
              uint64_t v79 = v69 - (void)v76;
              if (v79 >> 2 > v78) {
                unint64_t v78 = v79 >> 2;
              }
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v78;
              }
              if (v80)
              {
                unint64_t v81 = (char *)sub_10000EEB0((uint64_t)v12, v80);
                unint64_t v76 = (char *)*((void *)this + 1);
                unint64_t v70 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v81 = 0;
              }
              uint64_t v94 = &v81[8 * v77];
              *(void *)uint64_t v94 = 0;
              unint64_t v71 = v94 + 8;
              while (v70 != v76)
              {
                uint64_t v95 = *((void *)v70 - 1);
                v70 -= 8;
                *((void *)v94 - 1) = v95;
                v94 -= 8;
              }
              *((void *)this + 1) = v94;
              *((void *)this + 2) = v71;
              *((void *)this + 3) = &v81[8 * v80];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(void *)unint64_t v70 = 0;
              unint64_t v71 = v70 + 8;
            }
            *((void *)this + 2) = v71;
            goto LABEL_153;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v27 = *((void *)a2 + 1);
          unint64_t v28 = *((void *)a2 + 2);
          while (v27 < v28 && !*((unsigned char *)a2 + 24))
          {
            unsigned int v30 = (char *)*((void *)this + 2);
            unint64_t v29 = *((void *)this + 3);
            if ((unint64_t)v30 >= v29)
            {
              uint64_t v32 = (char *)*v11;
              uint64_t v33 = (v30 - (unsigned char *)*v11) >> 3;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 61) {
                goto LABEL_166;
              }
              uint64_t v35 = v29 - (void)v32;
              if (v35 >> 2 > v34) {
                unint64_t v34 = v35 >> 2;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                char v37 = (char *)sub_10000EEB0((uint64_t)v12, v36);
                uint64_t v32 = (char *)*((void *)this + 1);
                unsigned int v30 = (char *)*((void *)this + 2);
              }
              else
              {
                char v37 = 0;
              }
              uint64_t v38 = &v37[8 * v33];
              *(void *)uint64_t v38 = 0;
              uint64_t v31 = v38 + 8;
              while (v30 != v32)
              {
                uint64_t v39 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v38 - 1) = v39;
                v38 -= 8;
              }
              *((void *)this + 1) = v38;
              *((void *)this + 2) = v31;
              *((void *)this + 3) = &v37[8 * v36];
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(void *)unsigned int v30 = 0;
              uint64_t v31 = v30 + 8;
            }
            *((void *)this + 2) = v31;
            unint64_t v40 = *((void *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((void *)a2 + 2)) {
              goto LABEL_106;
            }
            *(v31 - 1) = *(void *)(*(void *)a2 + v40);
            unint64_t v28 = *((void *)a2 + 2);
            unint64_t v27 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v27;
          }
          goto LABEL_107;
        case 3u:
          if (v25 != 2)
          {
            uint64_t v73 = (char *)*((void *)this + 5);
            unint64_t v72 = *((void *)this + 6);
            if ((unint64_t)v73 >= v72)
            {
              unint64_t v82 = (char *)*v9;
              uint64_t v83 = (v73 - (unsigned char *)*v9) >> 3;
              unint64_t v84 = v83 + 1;
              if ((unint64_t)(v83 + 1) >> 61) {
LABEL_167:
              }
                sub_10000EE98();
              uint64_t v85 = v72 - (void)v82;
              if (v85 >> 2 > v84) {
                unint64_t v84 = v85 >> 2;
              }
              if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v84;
              }
              if (v86)
              {
                char v87 = (char *)sub_10000EEB0((uint64_t)v10, v86);
                unint64_t v82 = (char *)*((void *)this + 4);
                uint64_t v73 = (char *)*((void *)this + 5);
              }
              else
              {
                char v87 = 0;
              }
              unint64_t v96 = &v87[8 * v83];
              *(void *)unint64_t v96 = 0;
              unint64_t v71 = v96 + 8;
              while (v73 != v82)
              {
                uint64_t v97 = *((void *)v73 - 1);
                v73 -= 8;
                *((void *)v96 - 1) = v97;
                v96 -= 8;
              }
              *((void *)this + 4) = v96;
              *((void *)this + 5) = v71;
              *((void *)this + 6) = &v87[8 * v86];
              if (v82) {
                operator delete(v82);
              }
            }
            else
            {
              *(void *)uint64_t v73 = 0;
              unint64_t v71 = v73 + 8;
            }
            *((void *)this + 5) = v71;
            goto LABEL_153;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          while (v41 < v42 && !*((unsigned char *)a2 + 24))
          {
            char v44 = (char *)*((void *)this + 5);
            unint64_t v43 = *((void *)this + 6);
            if ((unint64_t)v44 >= v43)
            {
              uint64_t v46 = (char *)*v9;
              uint64_t v47 = (v44 - (unsigned char *)*v9) >> 3;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61) {
                goto LABEL_167;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 2 > v48) {
                unint64_t v48 = v49 >> 2;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_10000EEB0((uint64_t)v10, v50);
                uint64_t v46 = (char *)*((void *)this + 4);
                char v44 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v51 = 0;
              }
              uint64_t v52 = &v51[8 * v47];
              *(void *)uint64_t v52 = 0;
              char v45 = v52 + 8;
              while (v44 != v46)
              {
                uint64_t v53 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v52 - 1) = v53;
                v52 -= 8;
              }
              *((void *)this + 4) = v52;
              *((void *)this + 5) = v45;
              *((void *)this + 6) = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(void *)char v44 = 0;
              char v45 = v44 + 8;
            }
            *((void *)this + 5) = v45;
            unint64_t v54 = *((void *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)a2 + 2)) {
              goto LABEL_106;
            }
            *(v45 - 1) = *(void *)(*(void *)a2 + v54);
            unint64_t v42 = *((void *)a2 + 2);
            unint64_t v41 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v41;
          }
          goto LABEL_107;
        case 4u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v55 = *((void *)a2 + 1);
            unint64_t v56 = *((void *)a2 + 2);
            while (v55 < v56 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v58 = (char *)*((void *)this + 8);
              unint64_t v57 = *((void *)this + 9);
              if ((unint64_t)v58 >= v57)
              {
                uint64_t v60 = (char *)*v8;
                uint64_t v61 = (v58 - (unsigned char *)*v8) >> 3;
                unint64_t v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 61) {
                  goto LABEL_168;
                }
                uint64_t v63 = v57 - (void)v60;
                if (v63 >> 2 > v62) {
                  unint64_t v62 = v63 >> 2;
                }
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v64 = v62;
                }
                if (v64)
                {
                  unint64_t v65 = (char *)sub_10000EEB0((uint64_t)v102, v64);
                  uint64_t v60 = (char *)*((void *)this + 7);
                  unint64_t v58 = (char *)*((void *)this + 8);
                }
                else
                {
                  unint64_t v65 = 0;
                }
                uint64_t v66 = &v65[8 * v61];
                *(void *)uint64_t v66 = 0;
                char v59 = v66 + 8;
                while (v58 != v60)
                {
                  uint64_t v67 = *((void *)v58 - 1);
                  v58 -= 8;
                  *((void *)v66 - 1) = v67;
                  v66 -= 8;
                }
                *((void *)this + 7) = v66;
                *((void *)this + 8) = v59;
                *((void *)this + 9) = &v65[8 * v64];
                if (v60) {
                  operator delete(v60);
                }
              }
              else
              {
                *(void *)unint64_t v58 = 0;
                char v59 = v58 + 8;
              }
              *((void *)this + 8) = v59;
              unint64_t v68 = *((void *)a2 + 1);
              if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((void *)a2 + 2))
              {
LABEL_106:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v59 - 1) = *(void *)(*(void *)a2 + v68);
              unint64_t v56 = *((void *)a2 + 2);
              unint64_t v55 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v55;
            }
LABEL_107:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v75 = (char *)*((void *)this + 8);
            unint64_t v74 = *((void *)this + 9);
            if ((unint64_t)v75 >= v74)
            {
              uint64_t v88 = (char *)*v8;
              uint64_t v89 = (v75 - (unsigned char *)*v8) >> 3;
              unint64_t v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 61) {
LABEL_168:
              }
                sub_10000EE98();
              uint64_t v91 = v74 - (void)v88;
              if (v91 >> 2 > v90) {
                unint64_t v90 = v91 >> 2;
              }
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v92 = v90;
              }
              if (v92)
              {
                unint64_t v93 = (char *)sub_10000EEB0((uint64_t)v102, v92);
                uint64_t v88 = (char *)*((void *)this + 7);
                uint64_t v75 = (char *)*((void *)this + 8);
              }
              else
              {
                unint64_t v93 = 0;
              }
              uint64_t v98 = &v93[8 * v89];
              *(void *)uint64_t v98 = 0;
              unint64_t v71 = v98 + 8;
              while (v75 != v88)
              {
                uint64_t v99 = *((void *)v75 - 1);
                v75 -= 8;
                *((void *)v98 - 1) = v99;
                v98 -= 8;
              }
              *((void *)this + 7) = v98;
              *((void *)this + 8) = v71;
              *((void *)this + 9) = &v93[8 * v92];
              if (v88) {
                operator delete(v88);
              }
            }
            else
            {
              *(void *)uint64_t v75 = 0;
              unint64_t v71 = v75 + 8;
            }
            *((void *)this + 8) = v71;
LABEL_153:
            unint64_t v100 = *((void *)a2 + 1);
            if (v100 <= 0xFFFFFFFFFFFFFFF7 && v100 + 8 <= *((void *)a2 + 2))
            {
              *(v71 - 1) = *(void *)(*(void *)a2 + v100);
LABEL_157:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_155:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_158:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_158;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CV3DSLAMState::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 88)) {
    this = PB::Writer::write(a2, *(double *)(this + 80), 1u);
  }
  int v4 = (double *)v3[1];
  long long v5 = (double *)v3[2];
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  double v7 = (double *)v3[4];
  long long v8 = (double *)v3[5];
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  uint64_t v11 = (double *)v3[7];
  double v10 = (double *)v3[8];
  while (v11 != v10)
  {
    double v12 = *v11++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  return this;
}

uint64_t CMMsl::CV3DSLAMState::hash_value(CMMsl::CV3DSLAMState *this)
{
  if (*((unsigned char *)this + 88))
  {
    if (*((double *)this + 10) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 10);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  uint64_t v3 = PBHashBytes();
  return v2 ^ v3 ^ PBHashBytes();
}

uint64_t CMMsl::CVWatchCalories::CVWatchCalories(uint64_t this)
{
  *(void *)this = off_1003A4E58;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A4E58;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::CVWatchCalories::~CVWatchCalories(CMMsl::CVWatchCalories *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::CVWatchCalories::CVWatchCalories(CMMsl::CVWatchCalories *this, const CMMsl::CVWatchCalories *a2)
{
  *(void *)this = off_1003A4E58;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 6);
    char v3 = 4;
    *((unsigned char *)this + 28) = 4;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 28) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::CVWatchCalories::operator=(uint64_t a1, const CMMsl::CVWatchCalories *a2)
{
  if ((const CMMsl::CVWatchCalories *)a1 != a2)
  {
    CMMsl::CVWatchCalories::CVWatchCalories((CMMsl::CVWatchCalories *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v10;
    int v10 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CVWatchCalories *a2, CMMsl::CVWatchCalories *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::CVWatchCalories::CVWatchCalories(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4E58;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A4E58;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::CVWatchCalories::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v9 = off_1003A4E58;
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    int v12 = *(_DWORD *)(a1 + 28);
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::CVWatchCalories::formatText(CMMsl::CVWatchCalories *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "calories_kCal", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CVWatchCalories::readFrom(CMMsl::CVWatchCalories *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_32;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_36:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_37;
      }
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        goto LABEL_38;
      }
      *((unsigned char *)this + 28) |= 4u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
      {
LABEL_32:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
      unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_37:
      *((void *)a2 + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 28) |= 1u;
    unint64_t v2 = *((void *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
      goto LABEL_32;
    }
    *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::CVWatchCalories::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
    if ((*(unsigned char *)(v3 + 28) & 1) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(float *)(this + 24), 1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 3u);
}

BOOL CMMsl::CVWatchCalories::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 1) == 0;
  if (*(unsigned char *)(a1 + 28)) {
    return (*(unsigned char *)(a2 + 28) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::CVWatchCalories::hash_value(CMMsl::CVWatchCalories *this)
{
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
    float v4 = *((float *)this + 6);
    uint64_t v1 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v1 = 0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 2);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if (*((unsigned char *)this + 28)) {
        goto LABEL_6;
      }
LABEL_13:
      double v3 = 0.0;
      return *(void *)&v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3;
}

void *CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(void *this)
{
  *this = off_1003A4E90;
  *(void *)((char *)this + 164) = 0;
  return this;
}

{
  *this = off_1003A4E90;
  *(void *)((char *)this + 164) = 0;
  return this;
}

void CMMsl::CalorieControllerMETsConsumed::~CalorieControllerMETsConsumed(CMMsl::CalorieControllerMETsConsumed *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(CMMsl::CalorieControllerMETsConsumed *this, const CMMsl::CalorieControllerMETsConsumed *a2)
{
  *(void *)this = off_1003A4E90;
  *(void *)((char *)this + 164) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x2000000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 30);
    uint64_t v3 = 0x2000000;
    *(void *)((char *)this + 164) = 0x2000000;
    *((_DWORD *)this + 30) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 164);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 12);
    v3 |= 0x80uLL;
    *(void *)((char *)this + 164) = v3;
    *((_DWORD *)this + 12) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 21);
    v3 |= 0x10000uLL;
    *(void *)((char *)this + 164) = v3;
    *((_DWORD *)this + 21) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 164);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_45;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v5 = *((_DWORD *)a2 + 8);
  v3 |= 8uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 8) = v5;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 35);
  v3 |= 0x40000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 35) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 39);
  v3 |= 0x400000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 39) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 27) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x20uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 10) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 11) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v4 = *((void *)a2 + 2);
  v3 |= 2uLL;
  *(void *)((char *)this + 164) = v3;
  *((void *)this + 2) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }
LABEL_51:
  char v6 = *((unsigned char *)a2 + 162);
  v3 |= 0x2000000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((unsigned char *)this + 162) = v6;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x800uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 16) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 33);
  v3 |= 0x10000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 33) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v7 = *((_DWORD *)a2 + 32);
  v3 |= 0x8000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 32) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x4000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 31) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }
LABEL_56:
  LODWORD(v4) = *((_DWORD *)a2 + 34);
  v3 |= 0x20000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 34) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 14) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }
LABEL_58:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 29) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v8 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 18) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *((_DWORD *)a2 + 38);
  v3 |= 0x200000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 38) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 19) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 20) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_27:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v9 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 17) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }
LABEL_64:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x200000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 26) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }
LABEL_65:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x100000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 25) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v10 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *(void *)((char *)this + 164) = v3;
  *((void *)this + 3) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_31:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v11 = *((void *)a2 + 1);
  v3 |= 1uLL;
  *(void *)((char *)this + 164) = v3;
  *((void *)this + 1) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(v4) = *((_DWORD *)a2 + 36);
  v3 |= 0x80000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 36) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x80000) == 0)
  {
LABEL_33:
    if ((v2 & 0x10) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }
LABEL_69:
  int v12 = *((_DWORD *)a2 + 24);
  v3 |= 0x80000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 24) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_71;
  }
LABEL_70:
  int v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x10uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 9) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_72;
  }
LABEL_71:
  char v14 = *((unsigned char *)a2 + 161);
  v3 |= 0x1000000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((unsigned char *)this + 161) = v14;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_73;
  }
LABEL_72:
  char v15 = *((unsigned char *)a2 + 160);
  v3 |= 0x800000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((unsigned char *)this + 160) = v15;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_37:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_74;
  }
LABEL_73:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x800000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 28) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_38:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_75;
  }
LABEL_74:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x20000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 22) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x400) == 0) {
      goto LABEL_40;
    }
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x40000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 23) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_40:
    if ((v2 & 0x100) == 0) {
      goto LABEL_41;
    }
    goto LABEL_77;
  }
LABEL_76:
  int v16 = *((_DWORD *)a2 + 15);
  v3 |= 0x400uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 15) = v16;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_41:
    if ((v2 & 0x100000000) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_78;
  }
LABEL_77:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 13) = v4;
  if ((*(void *)((unsigned char *)a2 + 164) & 0x100000000) == 0) {
    return *(float *)&v4;
  }
LABEL_78:
  LODWORD(v4) = *((_DWORD *)a2 + 37);
  *(void *)((char *)this + 164) = v3 | (unint64_t)&_mh_execute_header;
  *((_DWORD *)this + 37) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::CalorieControllerMETsConsumed::operator=(CMMsl *a1, const CMMsl::CalorieControllerMETsConsumed *a2)
{
  if (a1 != a2)
  {
    CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed((CMMsl::CalorieControllerMETsConsumed *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CalorieControllerMETsConsumed *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CalorieControllerMETsConsumed *a2, CMMsl::CalorieControllerMETsConsumed *a3)
{
  uint64_t v3 = *(void *)((char *)this + 164);
  *(void *)((char *)this + 164) = *(void *)((char *)a2 + 164);
  *(void *)((char *)a2 + 164) = v3;
  int v4 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  int v6 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LODWORD(v3) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v7 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v7;
  int v8 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v8;
  int v9 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v9;
  int v10 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v10;
  int v11 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v11;
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  LOBYTE(v3) = *((unsigned char *)this + 162);
  *((unsigned char *)this + 162) = *((unsigned char *)a2 + 162);
  *((unsigned char *)a2 + 162) = v3;
  LODWORD(v12) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  LODWORD(v12) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v12;
  LODWORD(v3) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  LODWORD(v12) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v12;
  LODWORD(v12) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v12;
  LODWORD(v12) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  LODWORD(v12) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v12;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LODWORD(v12) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v12;
  LODWORD(v12) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v12;
  LODWORD(v12) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v12;
  LODWORD(v3) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LODWORD(v12) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v12;
  LODWORD(v12) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v14;
  LODWORD(v12) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v12;
  LODWORD(v14) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v14;
  LODWORD(v14) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 161);
  *((unsigned char *)this + 161) = *((unsigned char *)a2 + 161);
  *((unsigned char *)a2 + 161) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 160);
  *((unsigned char *)this + 160) = *((unsigned char *)a2 + 160);
  *((unsigned char *)a2 + 160) = v14;
  LODWORD(v12) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v12;
  LODWORD(v12) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  LODWORD(v12) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v12;
  LODWORD(v14) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v14;
  LODWORD(v12) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  float result = *((float *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((float *)a2 + 37) = result;
  return result;
}

float CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4E90;
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(void *)(a2 + 164) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  float result = *(float *)(a2 + 148);
  *(float *)(a1 + 148) = result;
  return result;
}

CMMsl *CMMsl::CalorieControllerMETsConsumed::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CalorieControllerMETsConsumed *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::CalorieControllerMETsConsumed::formatText(CMMsl::CalorieControllerMETsConsumed *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "activity", *((_DWORD *)this + 8));
    uint64_t v5 = *(void *)((char *)this + 164);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "activityTypeWithoutOverride", *((_DWORD *)this + 9));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "avgTruthMets", *((float *)this + 10));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "basalCalories", *((void *)this + 1));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "basalMets", *((float *)this + 11));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "computeTime", *((float *)this + 12));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "currentPace", *((float *)this + 13));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "distance", *((float *)this + 14));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "distanceSource", *((_DWORD *)this + 15));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "duration", *((float *)this + 16));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "elevationAscended", *((_DWORD *)this + 17));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "gradeType", *((_DWORD *)this + 18));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "heartRate", *((float *)this + 19));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "heartRateConfidence", *((float *)this + 20));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "isMotionOverrideSet", *((unsigned char *)this + 160));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "isStanding", *((unsigned char *)this + 161));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "isStored", *((unsigned char *)this + 162));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "now", *((float *)this + 21));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "pedDistance", *((float *)this + 22));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "pedRawDistance", *((float *)this + 23));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "pushCount", *((_DWORD *)this + 24));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "rawFMMets", *((float *)this + 25));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "rawHRMets", *((float *)this + 26));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "rawTruthMets", *((float *)this + 27));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "rawWRMets", *((float *)this + 28));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "recordInterval", *((double *)this + 2));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "speed", *((float *)this + 29));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "startTime", *((float *)this + 30));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "stepBegin", *((float *)this + 31));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "stepCount", *((_DWORD *)this + 32));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "stepDuration", *((float *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 4) == 0) {
      goto LABEL_34;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "stepEnd", *((float *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 4) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "totalCalories", *((void *)this + 3));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "userMets", *((float *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "vectorMag", *((float *)this + 36));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "vectorMagCmSimOnly", *((float *)this + 37));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "verticalSpeed", *((float *)this + 38));
  if ((*(void *)((unsigned char *)this + 164) & 0x400000000) != 0) {
LABEL_39:
  }
    PB::TextFormatter::format(a2, "wrMets", *((float *)this + 39));
LABEL_40:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CalorieControllerMETsConsumed::readFrom(CMMsl::CalorieControllerMETsConsumed *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)((char *)this + 164) |= 0x2000000uLL;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v20);
          goto LABEL_241;
        case 2u:
          *(void *)((char *)this + 164) |= 0x80uLL;
          unint64_t v22 = *((void *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v22);
          goto LABEL_241;
        case 3u:
          *(void *)((char *)this + 164) |= 0x10000uLL;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v23);
          goto LABEL_241;
        case 4u:
          *(void *)((char *)this + 164) |= 8uLL;
          unint64_t v24 = *((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
          uint64_t v26 = *(void *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            do
            {
              unint64_t v30 = v24 + 1;
              *((void *)a2 + 1) = v24 + 1;
              char v31 = *(unsigned char *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0) {
                goto LABEL_251;
              }
              v27 += 7;
              unint64_t v24 = v30;
              BOOL v14 = v28++ > 8;
            }
            while (!v14);
LABEL_177:
            LODWORD(v29) = 0;
            goto LABEL_251;
          }
          char v132 = 0;
          unsigned int v133 = 0;
          uint64_t v29 = 0;
          if (v25 <= v24) {
            unint64_t v25 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v134 = v24 + 1;
              char v135 = *(unsigned char *)(v26 + v24);
              *((void *)a2 + 1) = v134;
              v29 |= (unint64_t)(v135 & 0x7F) << v132;
              if (v135 < 0)
              {
                v132 += 7;
                unint64_t v24 = v134;
                BOOL v14 = v133++ > 8;
                if (v14) {
                  goto LABEL_177;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v29) = 0;
              }
            }
            break;
          }
LABEL_251:
          *((_DWORD *)this + 8) = v29;
          goto LABEL_243;
        case 5u:
          *(void *)((char *)this + 164) |= 0x40000000uLL;
          unint64_t v32 = *((void *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v32);
          goto LABEL_241;
        case 6u:
          *(void *)((char *)this + 164) |= 0x400000000uLL;
          unint64_t v33 = *((void *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v33);
          goto LABEL_241;
        case 7u:
          *(void *)((char *)this + 164) |= 0x400000uLL;
          unint64_t v34 = *((void *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v34);
          goto LABEL_241;
        case 8u:
          *(void *)((char *)this + 164) |= 0x20uLL;
          unint64_t v35 = *((void *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v35);
          goto LABEL_241;
        case 9u:
          *(void *)((char *)this + 164) |= 0x40uLL;
          unint64_t v36 = *((void *)a2 + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v36);
          goto LABEL_241;
        case 0xAu:
          *(void *)((char *)this + 164) |= 2uLL;
          unint64_t v37 = *((void *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v37);
          uint64_t v38 = *((void *)a2 + 1) + 8;
          goto LABEL_242;
        case 0xBu:
          *(void *)((char *)this + 164) |= 0x2000000000uLL;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 >= *((void *)a2 + 2))
          {
            BOOL v42 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v40 = v39 + 1;
            int v41 = *(unsigned __int8 *)(*(void *)a2 + v39);
            *((void *)a2 + 1) = v40;
            BOOL v42 = v41 != 0;
          }
          *((unsigned char *)this + 162) = v42;
          goto LABEL_243;
        case 0xCu:
          *(void *)((char *)this + 164) |= 0x800uLL;
          unint64_t v43 = *((void *)a2 + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v43);
          goto LABEL_241;
        case 0xDu:
          *(void *)((char *)this + 164) |= 0x10000000uLL;
          unint64_t v44 = *((void *)a2 + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v44);
          goto LABEL_241;
        case 0xEu:
          *(void *)((char *)this + 164) |= 0x8000000uLL;
          unint64_t v45 = *((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
          uint64_t v47 = *(void *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)a2 + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_255;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v14 = v49++ > 8;
            }
            while (!v14);
LABEL_186:
            LODWORD(v50) = 0;
            goto LABEL_255;
          }
          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v138 = v45 + 1;
              char v139 = *(unsigned char *)(v47 + v45);
              *((void *)a2 + 1) = v138;
              v50 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                unint64_t v45 = v138;
                BOOL v14 = v137++ > 8;
                if (v14) {
                  goto LABEL_186;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v50) = 0;
              }
            }
            break;
          }
LABEL_255:
          *((_DWORD *)this + 32) = v50;
          goto LABEL_243;
        case 0xFu:
          *(void *)((char *)this + 164) |= 0x4000000uLL;
          unint64_t v53 = *((void *)a2 + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v53);
          goto LABEL_241;
        case 0x10u:
          *(void *)((char *)this + 164) |= 0x20000000uLL;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v54);
          goto LABEL_241;
        case 0x11u:
          *(void *)((char *)this + 164) |= 0x200uLL;
          unint64_t v55 = *((void *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v55);
          goto LABEL_241;
        case 0x12u:
          *(void *)((char *)this + 164) |= 0x1000000uLL;
          unint64_t v56 = *((void *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v56);
          goto LABEL_241;
        case 0x13u:
          *(void *)((char *)this + 164) |= 0x2000uLL;
          unint64_t v57 = *((void *)a2 + 1);
          unint64_t v58 = *((void *)a2 + 2);
          uint64_t v59 = *(void *)a2;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            char v60 = 0;
            unsigned int v61 = 0;
            uint64_t v62 = 0;
            do
            {
              unint64_t v63 = v57 + 1;
              *((void *)a2 + 1) = v57 + 1;
              char v64 = *(unsigned char *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0) {
                goto LABEL_259;
              }
              v60 += 7;
              unint64_t v57 = v63;
              BOOL v14 = v61++ > 8;
            }
            while (!v14);
LABEL_193:
            LODWORD(v62) = 0;
            goto LABEL_259;
          }
          char v140 = 0;
          unsigned int v141 = 0;
          uint64_t v62 = 0;
          if (v58 <= v57) {
            unint64_t v58 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v142 = v57 + 1;
              char v143 = *(unsigned char *)(v59 + v57);
              *((void *)a2 + 1) = v142;
              v62 |= (unint64_t)(v143 & 0x7F) << v140;
              if (v143 < 0)
              {
                v140 += 7;
                unint64_t v57 = v142;
                BOOL v14 = v141++ > 8;
                if (v14) {
                  goto LABEL_193;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v62) = 0;
              }
            }
            break;
          }
LABEL_259:
          *((_DWORD *)this + 18) = v62;
          goto LABEL_243;
        case 0x14u:
          *(void *)((char *)this + 164) |= 0x200000000uLL;
          unint64_t v65 = *((void *)a2 + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v65);
          goto LABEL_241;
        case 0x15u:
          *(void *)((char *)this + 164) |= 0x4000uLL;
          unint64_t v66 = *((void *)a2 + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v66);
          goto LABEL_241;
        case 0x16u:
          *(void *)((char *)this + 164) |= 0x8000uLL;
          unint64_t v67 = *((void *)a2 + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v67);
          goto LABEL_241;
        case 0x17u:
          *(void *)((char *)this + 164) |= 0x1000uLL;
          unint64_t v68 = *((void *)a2 + 1);
          unint64_t v69 = *((void *)a2 + 2);
          uint64_t v70 = *(void *)a2;
          if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
          {
            char v71 = 0;
            unsigned int v72 = 0;
            uint64_t v73 = 0;
            do
            {
              unint64_t v74 = v68 + 1;
              *((void *)a2 + 1) = v68 + 1;
              char v75 = *(unsigned char *)(v70 + v68);
              v73 |= (unint64_t)(v75 & 0x7F) << v71;
              if ((v75 & 0x80) == 0) {
                goto LABEL_263;
              }
              v71 += 7;
              unint64_t v68 = v74;
              BOOL v14 = v72++ > 8;
            }
            while (!v14);
LABEL_200:
            LODWORD(v73) = 0;
            goto LABEL_263;
          }
          char v144 = 0;
          unsigned int v145 = 0;
          uint64_t v73 = 0;
          if (v69 <= v68) {
            unint64_t v69 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v69 == v68)
            {
              LODWORD(v73) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v146 = v68 + 1;
              char v147 = *(unsigned char *)(v70 + v68);
              *((void *)a2 + 1) = v146;
              v73 |= (unint64_t)(v147 & 0x7F) << v144;
              if (v147 < 0)
              {
                v144 += 7;
                unint64_t v68 = v146;
                BOOL v14 = v145++ > 8;
                if (v14) {
                  goto LABEL_200;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v73) = 0;
              }
            }
            break;
          }
LABEL_263:
          *((_DWORD *)this + 17) = v73;
          goto LABEL_243;
        case 0x18u:
          *(void *)((char *)this + 164) |= 0x200000uLL;
          unint64_t v76 = *((void *)a2 + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v76);
          goto LABEL_241;
        case 0x19u:
          *(void *)((char *)this + 164) |= 0x100000uLL;
          unint64_t v77 = *((void *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v77);
          goto LABEL_241;
        case 0x1Au:
          *(void *)((char *)this + 164) |= 4uLL;
          unint64_t v78 = *((void *)a2 + 1);
          unint64_t v79 = *((void *)a2 + 2);
          uint64_t v80 = *(void *)a2;
          if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
          {
            char v81 = 0;
            unsigned int v82 = 0;
            uint64_t v83 = 0;
            do
            {
              unint64_t v84 = v78 + 1;
              *((void *)a2 + 1) = v78 + 1;
              char v85 = *(unsigned char *)(v80 + v78);
              v83 |= (unint64_t)(v85 & 0x7F) << v81;
              if ((v85 & 0x80) == 0) {
                goto LABEL_267;
              }
              v81 += 7;
              unint64_t v78 = v84;
              BOOL v14 = v82++ > 8;
            }
            while (!v14);
LABEL_207:
            uint64_t v83 = 0;
            goto LABEL_267;
          }
          char v148 = 0;
          unsigned int v149 = 0;
          uint64_t v83 = 0;
          if (v79 <= v78) {
            unint64_t v79 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v79 == v78)
            {
              uint64_t v83 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v150 = v78 + 1;
              char v151 = *(unsigned char *)(v80 + v78);
              *((void *)a2 + 1) = v150;
              v83 |= (unint64_t)(v151 & 0x7F) << v148;
              if (v151 < 0)
              {
                v148 += 7;
                unint64_t v78 = v150;
                BOOL v14 = v149++ > 8;
                if (v14) {
                  goto LABEL_207;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v83 = 0;
              }
            }
            break;
          }
LABEL_267:
          *((void *)this + 3) = v83;
          goto LABEL_243;
        case 0x1Bu:
          *(void *)((char *)this + 164) |= 1uLL;
          unint64_t v86 = *((void *)a2 + 1);
          unint64_t v87 = *((void *)a2 + 2);
          uint64_t v88 = *(void *)a2;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            char v89 = 0;
            unsigned int v90 = 0;
            uint64_t v91 = 0;
            do
            {
              unint64_t v92 = v86 + 1;
              *((void *)a2 + 1) = v86 + 1;
              char v93 = *(unsigned char *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0) {
                goto LABEL_271;
              }
              v89 += 7;
              unint64_t v86 = v92;
              BOOL v14 = v90++ > 8;
            }
            while (!v14);
LABEL_214:
            uint64_t v91 = 0;
            goto LABEL_271;
          }
          char v152 = 0;
          unsigned int v153 = 0;
          uint64_t v91 = 0;
          if (v87 <= v86) {
            unint64_t v87 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v87 == v86)
            {
              uint64_t v91 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v154 = v86 + 1;
              char v155 = *(unsigned char *)(v88 + v86);
              *((void *)a2 + 1) = v154;
              v91 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                unint64_t v86 = v154;
                BOOL v14 = v153++ > 8;
                if (v14) {
                  goto LABEL_214;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v91 = 0;
              }
            }
            break;
          }
LABEL_271:
          *((void *)this + 1) = v91;
          goto LABEL_243;
        case 0x1Cu:
          *(void *)((char *)this + 164) |= 0x80000000uLL;
          unint64_t v94 = *((void *)a2 + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v94);
          goto LABEL_241;
        case 0x1Du:
          *(void *)((char *)this + 164) |= 0x80000uLL;
          unint64_t v95 = *((void *)a2 + 1);
          unint64_t v96 = *((void *)a2 + 2);
          uint64_t v97 = *(void *)a2;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            char v98 = 0;
            unsigned int v99 = 0;
            uint64_t v100 = 0;
            do
            {
              unint64_t v101 = v95 + 1;
              *((void *)a2 + 1) = v95 + 1;
              char v102 = *(unsigned char *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0) {
                goto LABEL_275;
              }
              v98 += 7;
              unint64_t v95 = v101;
              BOOL v14 = v99++ > 8;
            }
            while (!v14);
LABEL_221:
            LODWORD(v100) = 0;
            goto LABEL_275;
          }
          char v156 = 0;
          unsigned int v157 = 0;
          uint64_t v100 = 0;
          if (v96 <= v95) {
            unint64_t v96 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v158 = v95 + 1;
              char v159 = *(unsigned char *)(v97 + v95);
              *((void *)a2 + 1) = v158;
              v100 |= (unint64_t)(v159 & 0x7F) << v156;
              if (v159 < 0)
              {
                v156 += 7;
                unint64_t v95 = v158;
                BOOL v14 = v157++ > 8;
                if (v14) {
                  goto LABEL_221;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v100) = 0;
              }
            }
            break;
          }
LABEL_275:
          *((_DWORD *)this + 24) = v100;
          goto LABEL_243;
        case 0x1Eu:
          *(void *)((char *)this + 164) |= 0x10uLL;
          unint64_t v103 = *((void *)a2 + 1);
          unint64_t v104 = *((void *)a2 + 2);
          uint64_t v105 = *(void *)a2;
          if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
          {
            char v106 = 0;
            unsigned int v107 = 0;
            uint64_t v108 = 0;
            do
            {
              unint64_t v109 = v103 + 1;
              *((void *)a2 + 1) = v103 + 1;
              char v110 = *(unsigned char *)(v105 + v103);
              v108 |= (unint64_t)(v110 & 0x7F) << v106;
              if ((v110 & 0x80) == 0) {
                goto LABEL_279;
              }
              v106 += 7;
              unint64_t v103 = v109;
              BOOL v14 = v107++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v108) = 0;
            goto LABEL_279;
          }
          char v160 = 0;
          unsigned int v161 = 0;
          uint64_t v108 = 0;
          if (v104 <= v103) {
            unint64_t v104 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v104 == v103)
            {
              LODWORD(v108) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v162 = v103 + 1;
              char v163 = *(unsigned char *)(v105 + v103);
              *((void *)a2 + 1) = v162;
              v108 |= (unint64_t)(v163 & 0x7F) << v160;
              if (v163 < 0)
              {
                v160 += 7;
                unint64_t v103 = v162;
                BOOL v14 = v161++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v108) = 0;
              }
            }
            break;
          }
LABEL_279:
          *((_DWORD *)this + 9) = v108;
          goto LABEL_243;
        case 0x1Fu:
          *(void *)((char *)this + 164) |= 0x1000000000uLL;
          unint64_t v111 = *((void *)a2 + 1);
          if (v111 >= *((void *)a2 + 2))
          {
            BOOL v114 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v112 = v111 + 1;
            int v113 = *(unsigned __int8 *)(*(void *)a2 + v111);
            *((void *)a2 + 1) = v112;
            BOOL v114 = v113 != 0;
          }
          *((unsigned char *)this + 161) = v114;
          goto LABEL_243;
        case 0x20u:
          *(void *)((char *)this + 164) |= 0x800000000uLL;
          unint64_t v115 = *((void *)a2 + 1);
          if (v115 >= *((void *)a2 + 2))
          {
            BOOL v118 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v116 = v115 + 1;
            int v117 = *(unsigned __int8 *)(*(void *)a2 + v115);
            *((void *)a2 + 1) = v116;
            BOOL v118 = v117 != 0;
          }
          *((unsigned char *)this + 160) = v118;
          goto LABEL_243;
        case 0x21u:
          *(void *)((char *)this + 164) |= 0x800000uLL;
          unint64_t v119 = *((void *)a2 + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v119);
          goto LABEL_241;
        case 0x22u:
          *(void *)((char *)this + 164) |= 0x20000uLL;
          unint64_t v120 = *((void *)a2 + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v120);
          goto LABEL_241;
        case 0x23u:
          *(void *)((char *)this + 164) |= 0x40000uLL;
          unint64_t v121 = *((void *)a2 + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v121);
          goto LABEL_241;
        case 0x24u:
          *(void *)((char *)this + 164) |= 0x400uLL;
          unint64_t v122 = *((void *)a2 + 1);
          unint64_t v123 = *((void *)a2 + 2);
          uint64_t v124 = *(void *)a2;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            char v125 = 0;
            unsigned int v126 = 0;
            uint64_t v127 = 0;
            do
            {
              unint64_t v128 = v122 + 1;
              *((void *)a2 + 1) = v122 + 1;
              char v129 = *(unsigned char *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0) {
                goto LABEL_283;
              }
              v125 += 7;
              unint64_t v122 = v128;
              BOOL v14 = v126++ > 8;
            }
            while (!v14);
LABEL_239:
            LODWORD(v127) = 0;
            goto LABEL_283;
          }
          char v164 = 0;
          unsigned int v165 = 0;
          uint64_t v127 = 0;
          if (v123 <= v122) {
            unint64_t v123 = *((void *)a2 + 1);
          }
          break;
        case 0x25u:
          *(void *)((char *)this + 164) |= 0x100uLL;
          unint64_t v130 = *((void *)a2 + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)a2 + 2)) {
            goto LABEL_170;
          }
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v130);
          goto LABEL_241;
        case 0x26u:
          *(void *)((char *)this + 164) |= (unint64_t)&_mh_execute_header;
          unint64_t v131 = *((void *)a2 + 1);
          if (v131 <= 0xFFFFFFFFFFFFFFFBLL && v131 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v131);
LABEL_241:
            uint64_t v38 = *((void *)a2 + 1) + 4;
LABEL_242:
            *((void *)a2 + 1) = v38;
          }
          else
          {
LABEL_170:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_243;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_243;
      }
      while (1)
      {
        if (v123 == v122)
        {
          LODWORD(v127) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_283;
        }
        unint64_t v166 = v122 + 1;
        char v167 = *(unsigned char *)(v124 + v122);
        *((void *)a2 + 1) = v166;
        v127 |= (unint64_t)(v167 & 0x7F) << v164;
        if ((v167 & 0x80) == 0) {
          break;
        }
        v164 += 7;
        unint64_t v122 = v166;
        BOOL v14 = v165++ > 8;
        if (v14) {
          goto LABEL_239;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v127) = 0;
      }
LABEL_283:
      *((_DWORD *)this + 15) = v127;
LABEL_243:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CalorieControllerMETsConsumed::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 164);
  if ((v4 & 0x2000000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 120), 1u);
    uint64_t v4 = *(void *)(v3 + 164);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_42;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 2u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 3u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 5u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 6u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 7u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 8u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 9u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xAu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 162), 0xBu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xCu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0xDu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 128), 0xEu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0xFu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x10u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x11u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x12u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0x13u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x14u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x15u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x16u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0x17u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x18u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x19u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_27:
    if ((v4 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_30:
    if ((v4 & 0x10) == 0) {
      goto LABEL_31;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 161), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 160), 0x20u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_34:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x21u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x22u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x400) == 0) {
      goto LABEL_37;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x23u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_37:
    if ((v4 & 0x100) == 0) {
      goto LABEL_38;
    }
LABEL_76:
    this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x25u);
    if ((*(void *)(v3 + 164) & 0x100000000) == 0) {
      return this;
    }
    goto LABEL_77;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0x24u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100) != 0) {
    goto LABEL_76;
  }
LABEL_38:
  if ((v4 & 0x100000000) == 0) {
    return this;
  }
LABEL_77:
  float v5 = *(float *)(v3 + 148);

  return PB::Writer::write(a2, v5, 0x26u);
}

BOOL CMMsl::CalorieControllerMETsConsumed::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 164);
  uint64_t v3 = *(void *)(a2 + 164);
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 162) != *(unsigned __int8 *)(a2 + 162)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & (unint64_t)&_mh_execute_header) == 0;
  if ((v2 & 0x100000000) != 0) {
    return (v3 & 0x100000000) != 0 && *(float *)(a1 + 148) == *(float *)(a2 + 148);
  }
  return v4;
}

uint64_t CMMsl::CalorieControllerMETsConsumed::hash_value(CMMsl::CalorieControllerMETsConsumed *this)
{
  uint64_t v1 = *(void *)((char *)this + 164);
  if ((v1 & 0x2000000) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_104:
    uint64_t v74 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_6;
    }
LABEL_105:
    uint64_t v73 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
    goto LABEL_106;
  }
  float v62 = *((float *)this + 30);
  if (v62 == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = LODWORD(v62);
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_104;
  }
LABEL_3:
  float v3 = *((float *)this + 12);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v74 = v4;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_105;
  }
LABEL_6:
  float v5 = *((float *)this + 21);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v73 = v6;
  if ((v1 & 8) != 0)
  {
LABEL_9:
    uint64_t v72 = *((int *)this + 8);
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_10;
    }
LABEL_107:
    uint64_t v71 = 0;
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_13;
    }
LABEL_108:
    uint64_t v70 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_16;
    }
LABEL_109:
    uint64_t v69 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_19;
    }
LABEL_110:
    uint64_t v68 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_22;
    }
LABEL_111:
    uint64_t v67 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_25;
    }
LABEL_112:
    double v66 = 0.0;
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_113;
  }
LABEL_106:
  uint64_t v72 = 0;
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_107;
  }
LABEL_10:
  float v7 = *((float *)this + 35);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v71 = v8;
  if ((v1 & 0x400000000) == 0) {
    goto LABEL_108;
  }
LABEL_13:
  float v9 = *((float *)this + 39);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v70 = v10;
  if ((v1 & 0x400000) == 0) {
    goto LABEL_109;
  }
LABEL_16:
  float v11 = *((float *)this + 27);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v69 = v12;
  if ((v1 & 0x20) == 0) {
    goto LABEL_110;
  }
LABEL_19:
  float v13 = *((float *)this + 10);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v68 = v14;
  if ((v1 & 0x40) == 0) {
    goto LABEL_111;
  }
LABEL_22:
  float v15 = *((float *)this + 11);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v67 = v16;
  if ((v1 & 2) == 0) {
    goto LABEL_112;
  }
LABEL_25:
  double v17 = *((double *)this + 2);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  double v66 = v17;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_28:
    uint64_t v65 = *((unsigned __int8 *)this + 162);
    if ((v1 & 0x800) != 0) {
      goto LABEL_29;
    }
LABEL_114:
    uint64_t v64 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_32;
    }
LABEL_115:
    uint64_t v21 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_36;
    }
    goto LABEL_116;
  }
LABEL_113:
  uint64_t v65 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_114;
  }
LABEL_29:
  float v18 = *((float *)this + 16);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  uint64_t v64 = v19;
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_115;
  }
LABEL_32:
  float v20 = *((float *)this + 33);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = LODWORD(v20);
  }
  if ((v1 & 0x8000000) != 0)
  {
LABEL_36:
    uint64_t v22 = *((int *)this + 32);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_37;
    }
LABEL_117:
    uint64_t v24 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_41;
    }
LABEL_118:
    uint64_t v26 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_45;
    }
LABEL_119:
    uint64_t v28 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_49;
    }
LABEL_120:
    uint64_t v30 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_53;
    }
    goto LABEL_121;
  }
LABEL_116:
  uint64_t v22 = 0;
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_117;
  }
LABEL_37:
  float v23 = *((float *)this + 31);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = LODWORD(v23);
  }
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_118;
  }
LABEL_41:
  float v25 = *((float *)this + 34);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = LODWORD(v25);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_119;
  }
LABEL_45:
  float v27 = *((float *)this + 14);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = LODWORD(v27);
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_120;
  }
LABEL_49:
  float v29 = *((float *)this + 29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = LODWORD(v29);
  }
  if ((v1 & 0x2000) != 0)
  {
LABEL_53:
    uint64_t v31 = *((int *)this + 18);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_54;
    }
LABEL_122:
    uint64_t v33 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_58;
    }
LABEL_123:
    uint64_t v35 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_62;
    }
LABEL_124:
    uint64_t v37 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_66;
    }
    goto LABEL_125;
  }
LABEL_121:
  uint64_t v31 = 0;
  if ((v1 & 0x200000000) == 0) {
    goto LABEL_122;
  }
LABEL_54:
  float v32 = *((float *)this + 38);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = LODWORD(v32);
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_123;
  }
LABEL_58:
  float v34 = *((float *)this + 19);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = LODWORD(v34);
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_124;
  }
LABEL_62:
  float v36 = *((float *)this + 20);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = LODWORD(v36);
  }
  if ((v1 & 0x1000) != 0)
  {
LABEL_66:
    uint64_t v38 = *((int *)this + 17);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_67;
    }
LABEL_126:
    uint64_t v40 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_71;
    }
LABEL_127:
    uint64_t v42 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_75;
    }
    goto LABEL_128;
  }
LABEL_125:
  uint64_t v38 = 0;
  if ((v1 & 0x200000) == 0) {
    goto LABEL_126;
  }
LABEL_67:
  float v39 = *((float *)this + 26);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = LODWORD(v39);
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_127;
  }
LABEL_71:
  float v41 = *((float *)this + 25);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = LODWORD(v41);
  }
  if ((v1 & 4) != 0)
  {
LABEL_75:
    uint64_t v43 = *((void *)this + 3);
    if (v1) {
      goto LABEL_76;
    }
    goto LABEL_129;
  }
LABEL_128:
  uint64_t v43 = 0;
  if (v1)
  {
LABEL_76:
    uint64_t v44 = *((void *)this + 1);
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_77;
    }
LABEL_130:
    uint64_t v46 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_80;
    }
    goto LABEL_131;
  }
LABEL_129:
  uint64_t v44 = 0;
  if ((v1 & 0x80000000) == 0) {
    goto LABEL_130;
  }
LABEL_77:
  float v45 = *((float *)this + 36);
  uint64_t v46 = LODWORD(v45);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  if ((v1 & 0x80000) != 0)
  {
LABEL_80:
    uint64_t v47 = *((int *)this + 24);
    if ((v1 & 0x10) != 0) {
      goto LABEL_81;
    }
    goto LABEL_132;
  }
LABEL_131:
  uint64_t v47 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_81:
    uint64_t v48 = *((int *)this + 9);
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_82;
    }
    goto LABEL_133;
  }
LABEL_132:
  uint64_t v48 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_82:
    uint64_t v49 = *((unsigned __int8 *)this + 161);
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_83;
    }
    goto LABEL_134;
  }
LABEL_133:
  uint64_t v49 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_83:
    uint64_t v50 = *((unsigned __int8 *)this + 160);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_84;
    }
LABEL_135:
    uint64_t v52 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_87;
    }
LABEL_136:
    uint64_t v54 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_90;
    }
LABEL_137:
    uint64_t v56 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_93;
    }
    goto LABEL_138;
  }
LABEL_134:
  uint64_t v50 = 0;
  if ((v1 & 0x800000) == 0) {
    goto LABEL_135;
  }
LABEL_84:
  float v51 = *((float *)this + 28);
  uint64_t v52 = LODWORD(v51);
  if (v51 == 0.0) {
    uint64_t v52 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_136;
  }
LABEL_87:
  float v53 = *((float *)this + 22);
  uint64_t v54 = LODWORD(v53);
  if (v53 == 0.0) {
    uint64_t v54 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_137;
  }
LABEL_90:
  float v55 = *((float *)this + 23);
  uint64_t v56 = LODWORD(v55);
  if (v55 == 0.0) {
    uint64_t v56 = 0;
  }
  if ((v1 & 0x400) != 0)
  {
LABEL_93:
    uint64_t v57 = *((unsigned int *)this + 15);
    if ((v1 & 0x100) != 0) {
      goto LABEL_94;
    }
    goto LABEL_139;
  }
LABEL_138:
  uint64_t v57 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_94:
    float v58 = *((float *)this + 13);
    uint64_t v59 = LODWORD(v58);
    if (v58 == 0.0) {
      uint64_t v59 = 0;
    }
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_97;
    }
LABEL_140:
    uint64_t v61 = 0;
    return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ *(void *)&v66 ^ v65 ^ v64 ^ v21 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v35 ^ v37 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v54 ^ v56 ^ v57 ^ v59 ^ v61;
  }
LABEL_139:
  uint64_t v59 = 0;
  if ((v1 & 0x100000000) == 0) {
    goto LABEL_140;
  }
LABEL_97:
  float v60 = *((float *)this + 37);
  uint64_t v61 = LODWORD(v60);
  if (v60 == 0.0) {
    uint64_t v61 = 0;
  }
  return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ *(void *)&v66 ^ v65 ^ v64 ^ v21 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v35 ^ v37 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v54 ^ v56 ^ v57 ^ v59 ^ v61;
}

uint64_t CMMsl::CalorimetryPauseEvent::CalorimetryPauseEvent(uint64_t this)
{
  *(void *)this = off_1003A4EC8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = off_1003A4EC8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::CalorimetryPauseEvent::~CalorimetryPauseEvent(CMMsl::CalorimetryPauseEvent *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::CalorimetryPauseEvent::CalorimetryPauseEvent(uint64_t this, const CMMsl::CalorimetryPauseEvent *a2)
{
  *(void *)this = off_1003A4EC8;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(void *)this = off_1003A4EC8;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::CalorimetryPauseEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    float v7 = off_1003A4EC8;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::CalorimetryPauseEvent *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    float v7 = off_1003A4EC8;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::CalorimetryPauseEvent *a2, CMMsl::CalorimetryPauseEvent *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::CalorimetryPauseEvent::CalorimetryPauseEvent(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A4EC8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = off_1003A4EC8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t CMMsl::CalorimetryPauseEvent::formatText(CMMsl::CalorimetryPauseEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "pause", *((unsigned char *)this + 8));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CalorimetryPauseEvent::readFrom(CMMsl::CalorimetryPauseEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 8) = v21;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CalorimetryPauseEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(unsigned char *)(this + 8), 1u);
  }
  return this;
}

BOOL CMMsl::CalorimetryPauseEvent::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::CalorimetryPauseEvent::hash_value(CMMsl::CalorimetryPauseEvent *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

uint64_t CMMsl::CatherineHealthKitData::CatherineHealthKitData(uint64_t this)
{
  *(void *)this = off_1003A4F00;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = off_1003A4F00;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::CatherineHealthKitData::~CatherineHealthKitData(CMMsl::CatherineHealthKitData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::CatherineHealthKitData::CatherineHealthKitData(uint64_t this, const CMMsl::CatherineHealthKitData *a2)
{
  *(void *)this = off_1003A4F00;
  *(_DWORD *)(this + 36) = 0;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    char v3 = 4;
    *(unsigned char *)(this + 36) = 4;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 36))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 36) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(this + 36) = v3 | 8;
    *(_DWORD *)(this + 32) = v7;
    return this;
  }
  uint64_t v6 = *((void *)a2 + 2);
  v3 |= 2u;
  *(unsigned char *)(this + 36) = v3;
  *(void *)(this + 16) = v6;
  if ((*((unsigned char *)a2 + 36) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::CatherineHealthKitData::operator=(uint64_t a1, const CMMsl::CatherineHealthKitData *a2)
{
  if ((const CMMsl::CatherineHealthKitData *)a1 != a2)
  {
    CMMsl::CatherineHealthKitData::CatherineHealthKitData((uint64_t)v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    *(void *)&long long v3 = v10;
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v3;
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CatherineHealthKitData *a2, CMMsl::CatherineHealthKitData *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  return result;
}

double CMMsl::CatherineHealthKitData::CatherineHealthKitData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4F00;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A4F00;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::CatherineHealthKitData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A4F00;
    uint64_t v3 = *(void *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::CatherineHealthKitData::formatText(CMMsl::CatherineHealthKitData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 36);
  if (v5)
  {
    PB::TextFormatter::format(a2, "endDate", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hkType", *((_DWORD *)this + 8));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "hr", *((double *)this + 2));
  if ((*((unsigned char *)this + 36) & 4) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 3));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CatherineHealthKitData::readFrom(CMMsl::CatherineHealthKitData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 36) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_32;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_48;
            case 2u:
              *((unsigned char *)this + 36) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_32;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_48;
            case 3u:
              *((unsigned char *)this + 36) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_48:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_32:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_54;
            case 4u:
              *((unsigned char *)this + 36) |= 8u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_53;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_52:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_53;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_52;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_53;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_53:
              *((_DWORD *)this + 8) = v25;
LABEL_54:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_54;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::CatherineHealthKitData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 36);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
      if ((*(unsigned char *)(v3 + 36) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 36) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  unsigned int v5 = *(_DWORD *)(v3 + 32);

  return PB::Writer::writeVarInt(a2, v5, 4u);
}

BOOL CMMsl::CatherineHealthKitData::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 8) == 0;
  if ((*(unsigned char *)(a1 + 36) & 8) != 0) {
    return (*(unsigned char *)(a2 + 36) & 8) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return v2;
}

uint64_t CMMsl::CatherineHealthKitData::hash_value(CMMsl::CatherineHealthKitData *this)
{
  if ((*((unsigned char *)this + 36) & 4) == 0)
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 36)) {
      goto LABEL_3;
    }
LABEL_13:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 36) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 36) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 36) & 2) != 0)
  {
LABEL_6:
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 36) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v4 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4;
  }
LABEL_14:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 36) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v4 = *((unsigned int *)this + 8);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4;
}

uint64_t CMMsl::ClefCalibration::ClefCalibration(uint64_t this)
{
  *(void *)this = off_1003A4F38;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = off_1003A4F38;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void CMMsl::ClefCalibration::~ClefCalibration(CMMsl::ClefCalibration *this)
{
  *(void *)this = off_1003A4F38;
  double v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A4F38;
  double v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A4F38;
  double v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::ClefCalibration::ClefCalibration(uint64_t this, const CMMsl::ClefCalibration *a2)
{
  *(void *)this = off_1003A4F38;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 9);
    char v3 = 2;
    *(unsigned char *)(this + 64) = 2;
    *(_DWORD *)(this + 36) = v4;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 64) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 11);
    v3 |= 8u;
    *(unsigned char *)(this + 64) = v3;
    *(_DWORD *)(this + 44) = v5;
    char v2 = *((unsigned char *)a2 + 64);
  }
LABEL_6:
  if (v2)
  {
    int v7 = *((_DWORD *)a2 + 8);
    v3 |= 1u;
    *(unsigned char *)(this + 64) = v3;
    *(_DWORD *)(this + 32) = v7;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v8 = *((_DWORD *)a2 + 10);
  v3 |= 4u;
  *(unsigned char *)(this + 64) = v3;
  *(_DWORD *)(this + 40) = v8;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v9 = *((unsigned char *)a2 + 60);
  v3 |= 0x80u;
  *(unsigned char *)(this + 64) = v3;
  *(unsigned char *)(this + 60) = v9;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v10 = *((_DWORD *)a2 + 12);
  v3 |= 0x10u;
  *(unsigned char *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v10;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_20:
  int v11 = *((_DWORD *)a2 + 13);
  v3 |= 0x20u;
  *(unsigned char *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v11;
  if ((*((unsigned char *)a2 + 64) & 0x40) != 0)
  {
LABEL_12:
    int v6 = *((_DWORD *)a2 + 14);
    *(unsigned char *)(this + 64) = v3 | 0x40;
    *(_DWORD *)(this + 56) = v6;
  }
LABEL_13:
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_100097FA0();
  }
  return this;
}

void sub_100097FA0()
{
}

void sub_1000980A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::ClefCalibration::operator=(uint64_t a1, const CMMsl::ClefCalibration *a2)
{
  if ((const CMMsl::ClefCalibration *)a1 != a2)
  {
    CMMsl::ClefCalibration::ClefCalibration((uint64_t)&v5, a2);
    CMMsl::swap(a1, (CMMsl::ClefCalibration *)&v5, v3);
    int v5 = off_1003A4F38;
    int v7 = (void **)&v6;
    sub_100274A84(&v7);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ClefCalibration *a2, CMMsl::ClefCalibration *a3)
{
  int v3 = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  int v4 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  int v5 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  int v6 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  int v7 = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  LOBYTE(v7) = *(unsigned char *)(this + 60);
  *(unsigned char *)(this + 60) = *((unsigned char *)a2 + 60);
  *((unsigned char *)a2 + 60) = v7;
  int v8 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  int v9 = *(_DWORD *)(this + 52);
  *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  int v10 = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  uint64_t v11 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  uint64_t v12 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  uint64_t v13 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  return this;
}

uint64_t CMMsl::ClefCalibration::ClefCalibration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4F38;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  int v4 = (_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  sub_100274B44((void **)(a1 + 8));
  *int v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::ClefCalibration::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::ClefCalibration::ClefCalibration((uint64_t)&v5, a2);
    CMMsl::swap(a1, (CMMsl::ClefCalibration *)&v5, v3);
    int v5 = off_1003A4F38;
    int v7 = (void **)&v6;
    sub_100274A84(&v7);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::ClefCalibration::formatText(CMMsl::ClefCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 64);
  if (v5)
  {
    PB::TextFormatter::format(a2, "gain", *((_DWORD *)this + 8));
    char v5 = *((unsigned char *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 9));
  if ((*((unsigned char *)this + 64) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "offset", *((_DWORD *)this + 10));
LABEL_5:
  uint64_t v6 = (uint64_t *)*((void *)this + 1);
  int v7 = (uint64_t *)*((void *)this + 2);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "point");
  }
  char v9 = *((unsigned char *)this + 64);
  if ((v9 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sensor", *((_DWORD *)this + 11));
    char v9 = *((unsigned char *)this + 64);
    if ((v9 & 0x10) == 0)
    {
LABEL_9:
      if ((v9 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_21;
    }
  }
  else if ((*((unsigned char *)this + 64) & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "tempCalA", *((_DWORD *)this + 12));
  char v9 = *((unsigned char *)this + 64);
  if ((v9 & 0x20) == 0)
  {
LABEL_10:
    if ((v9 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "tempCalB", *((_DWORD *)this + 13));
  char v9 = *((unsigned char *)this + 64);
  if ((v9 & 0x80) == 0)
  {
LABEL_11:
    if ((v9 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "tempCalEnabled", *((unsigned char *)this + 60));
  if ((*((unsigned char *)this + 64) & 0x40) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "tempCalT0", *((_DWORD *)this + 14));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ClefCalibration::readFrom(CMMsl::ClefCalibration *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 64) |= 2u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_136;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_82:
            LODWORD(v25) = 0;
            goto LABEL_136;
          }
          char v81 = 0;
          unsigned int v82 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v83 = v20 + 1;
              char v84 = *(unsigned char *)(v22 + v20);
              *((void *)a2 + 1) = v83;
              v25 |= (unint64_t)(v84 & 0x7F) << v81;
              if (v84 < 0)
              {
                v81 += 7;
                unint64_t v20 = v83;
                BOOL v14 = v82++ > 8;
                if (v14) {
                  goto LABEL_82;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v25) = 0;
              }
            }
            break;
          }
LABEL_136:
          *((_DWORD *)this + 9) = v25;
          goto LABEL_155;
        case 2u:
          *((unsigned char *)this + 64) |= 8u;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_139;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_89:
            LODWORD(v34) = 0;
            goto LABEL_139;
          }
          char v85 = 0;
          unsigned int v86 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v87 = v29 + 1;
              char v88 = *(unsigned char *)(v31 + v29);
              *((void *)a2 + 1) = v87;
              v34 |= (unint64_t)(v88 & 0x7F) << v85;
              if (v88 < 0)
              {
                v85 += 7;
                unint64_t v29 = v87;
                BOOL v14 = v86++ > 8;
                if (v14) {
                  goto LABEL_89;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_139:
          *((_DWORD *)this + 11) = v34;
          goto LABEL_155;
        case 3u:
          *((unsigned char *)this + 64) |= 1u;
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          uint64_t v39 = *(void *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)a2 + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_142;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_96:
            LODWORD(v42) = 0;
            goto LABEL_142;
          }
          char v89 = 0;
          unsigned int v90 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v91 = v37 + 1;
              char v92 = *(unsigned char *)(v39 + v37);
              *((void *)a2 + 1) = v91;
              v42 |= (unint64_t)(v92 & 0x7F) << v89;
              if (v92 < 0)
              {
                v89 += 7;
                unint64_t v37 = v91;
                BOOL v14 = v90++ > 8;
                if (v14) {
                  goto LABEL_96;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v42) = 0;
              }
            }
            break;
          }
LABEL_142:
          *((_DWORD *)this + 8) = v42;
          goto LABEL_155;
        case 4u:
          *((unsigned char *)this + 64) |= 4u;
          unint64_t v45 = *((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
          uint64_t v47 = *(void *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)a2 + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_145;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v14 = v49++ > 8;
            }
            while (!v14);
LABEL_103:
            LODWORD(v50) = 0;
            goto LABEL_145;
          }
          char v93 = 0;
          unsigned int v94 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v95 = v45 + 1;
              char v96 = *(unsigned char *)(v47 + v45);
              *((void *)a2 + 1) = v95;
              v50 |= (unint64_t)(v96 & 0x7F) << v93;
              if (v96 < 0)
              {
                v93 += 7;
                unint64_t v45 = v95;
                BOOL v14 = v94++ > 8;
                if (v14) {
                  goto LABEL_103;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v50) = 0;
              }
            }
            break;
          }
LABEL_145:
          *((_DWORD *)this + 10) = v50;
          goto LABEL_155;
        case 5u:
          *((unsigned char *)this + 64) |= 0x80u;
          unint64_t v53 = *((void *)a2 + 1);
          if (v53 >= *((void *)a2 + 2))
          {
            BOOL v56 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v54 = v53 + 1;
            int v55 = *(unsigned __int8 *)(*(void *)a2 + v53);
            *((void *)a2 + 1) = v54;
            BOOL v56 = v55 != 0;
          }
          *((unsigned char *)this + 60) = v56;
          goto LABEL_155;
        case 6u:
          *((unsigned char *)this + 64) |= 0x10u;
          unint64_t v57 = *((void *)a2 + 1);
          unint64_t v58 = *((void *)a2 + 2);
          uint64_t v59 = *(void *)a2;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            char v60 = 0;
            unsigned int v61 = 0;
            uint64_t v62 = 0;
            do
            {
              unint64_t v63 = v57 + 1;
              *((void *)a2 + 1) = v57 + 1;
              char v64 = *(unsigned char *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0) {
                goto LABEL_148;
              }
              v60 += 7;
              unint64_t v57 = v63;
              BOOL v14 = v61++ > 8;
            }
            while (!v14);
LABEL_112:
            LODWORD(v62) = 0;
            goto LABEL_148;
          }
          char v97 = 0;
          unsigned int v98 = 0;
          uint64_t v62 = 0;
          if (v58 <= v57) {
            unint64_t v58 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v99 = v57 + 1;
              char v100 = *(unsigned char *)(v59 + v57);
              *((void *)a2 + 1) = v99;
              v62 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                unint64_t v57 = v99;
                BOOL v14 = v98++ > 8;
                if (v14) {
                  goto LABEL_112;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v62) = 0;
              }
            }
            break;
          }
LABEL_148:
          *((_DWORD *)this + 12) = v62;
          goto LABEL_155;
        case 7u:
          *((unsigned char *)this + 64) |= 0x20u;
          unint64_t v65 = *((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
          uint64_t v67 = *(void *)a2;
          if (v65 <= 0xFFFFFFFFFFFFFFF5 && v65 + 10 <= v66)
          {
            char v68 = 0;
            unsigned int v69 = 0;
            uint64_t v70 = 0;
            do
            {
              unint64_t v71 = v65 + 1;
              *((void *)a2 + 1) = v65 + 1;
              char v72 = *(unsigned char *)(v67 + v65);
              v70 |= (unint64_t)(v72 & 0x7F) << v68;
              if ((v72 & 0x80) == 0) {
                goto LABEL_151;
              }
              v68 += 7;
              unint64_t v65 = v71;
              BOOL v14 = v69++ > 8;
            }
            while (!v14);
LABEL_119:
            LODWORD(v70) = 0;
            goto LABEL_151;
          }
          char v101 = 0;
          unsigned int v102 = 0;
          uint64_t v70 = 0;
          if (v66 <= v65) {
            unint64_t v66 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v66 == v65)
            {
              LODWORD(v70) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v103 = v65 + 1;
              char v104 = *(unsigned char *)(v67 + v65);
              *((void *)a2 + 1) = v103;
              v70 |= (unint64_t)(v104 & 0x7F) << v101;
              if (v104 < 0)
              {
                v101 += 7;
                unint64_t v65 = v103;
                BOOL v14 = v102++ > 8;
                if (v14) {
                  goto LABEL_119;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v70) = 0;
              }
            }
            break;
          }
LABEL_151:
          *((_DWORD *)this + 13) = v70;
          goto LABEL_155;
        case 8u:
          *((unsigned char *)this + 64) |= 0x40u;
          unint64_t v73 = *((void *)a2 + 1);
          unint64_t v74 = *((void *)a2 + 2);
          uint64_t v75 = *(void *)a2;
          if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
          {
            char v76 = 0;
            unsigned int v77 = 0;
            uint64_t v78 = 0;
            do
            {
              unint64_t v79 = v73 + 1;
              *((void *)a2 + 1) = v73 + 1;
              char v80 = *(unsigned char *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0) {
                goto LABEL_154;
              }
              v76 += 7;
              unint64_t v73 = v79;
              BOOL v14 = v77++ > 8;
            }
            while (!v14);
LABEL_126:
            LODWORD(v78) = 0;
            goto LABEL_154;
          }
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v78 = 0;
          if (v74 <= v73) {
            unint64_t v74 = *((void *)a2 + 1);
          }
          break;
        case 9u:
          sub_100098DA8();
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_155;
      }
      while (1)
      {
        if (v74 == v73)
        {
          LODWORD(v78) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_154;
        }
        unint64_t v107 = v73 + 1;
        char v108 = *(unsigned char *)(v75 + v73);
        *((void *)a2 + 1) = v107;
        v78 |= (unint64_t)(v108 & 0x7F) << v105;
        if ((v108 & 0x80) == 0) {
          break;
        }
        v105 += 7;
        unint64_t v73 = v107;
        BOOL v14 = v106++ > 8;
        if (v14) {
          goto LABEL_126;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v78) = 0;
      }
LABEL_154:
      *((_DWORD *)this + 14) = v78;
LABEL_155:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_100098DA8()
{
}

void sub_100098EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::ClefCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 64);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 36), 1u);
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(unsigned char *)(this + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 2u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 3u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 4u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 60), 5u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
LABEL_20:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 7u);
    if ((*(unsigned char *)(v3 + 64) & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 6u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_20;
  }
LABEL_8:
  if ((v4 & 0x40) != 0) {
LABEL_9:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 8u);
LABEL_10:
  uint64_t v6 = *(const PB::Base ***)(v3 + 8);
  char v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    int v7 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v7, 9u);
  }
  return this;
}

BOOL CMMsl::ClefCalibration::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  int v3 = *(unsigned __int8 *)(a2 + 64);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) == 0)
  {
    if (((v2 | v3) & 0x80) != 0) {
      return 0;
    }
LABEL_25:
    if ((v2 & 0x10) != 0)
    {
      if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
        return 0;
      }
    }
    else if ((v3 & 0x10) != 0)
    {
      return 0;
    }
    if ((v2 & 0x20) != 0)
    {
      if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
        return 0;
      }
    }
    else if ((v3 & 0x20) != 0)
    {
      return 0;
    }
    if ((v2 & 0x40) != 0)
    {
      if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
        return 0;
      }
    }
    else if ((v3 & 0x40) != 0)
    {
      return 0;
    }
    return sub_100099150((uint64_t *)(a1 + 8), a2 + 8);
  }
  if (*(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60)) {
    goto LABEL_25;
  }
  return 0;
}

BOOL sub_100099150(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::ClefCalibrationPoint::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::ClefCalibration::hash_value(CMMsl::ClefCalibration *this)
{
  if ((*((unsigned char *)this + 64) & 2) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 64) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 11);
      if (*((unsigned char *)this + 64)) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 64) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if (*((unsigned char *)this + 64))
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 8);
    if ((*((unsigned char *)this + 64) & 4) != 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 64) & 4) != 0)
  {
LABEL_5:
    uint64_t v4 = *((int *)this + 10);
    if ((*((unsigned char *)this + 64) & 0x80) != 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 64) & 0x80) != 0)
  {
LABEL_6:
    uint64_t v5 = *((unsigned __int8 *)this + 60);
    if ((*((unsigned char *)this + 64) & 0x10) != 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 64) & 0x10) != 0)
  {
LABEL_7:
    uint64_t v6 = *((int *)this + 12);
    if ((*((unsigned char *)this + 64) & 0x20) != 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 64) & 0x40) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v8 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ sub_100099298((uint64_t)&v10, (uint64_t **)this + 1);
  }
LABEL_15:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 64) & 0x20) == 0) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t v7 = *((int *)this + 13);
  if ((*((unsigned char *)this + 64) & 0x40) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  uint64_t v8 = *((int *)this + 14);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ sub_100099298((uint64_t)&v10, (uint64_t **)this + 1);
}

uint64_t sub_100099298(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v6 = *v2++;
    uint64_t v5 = v6;
    char v7 = *(unsigned char *)(v6 + 20);
    uint64_t v8 = *(int *)(v6 + 8);
    uint64_t v9 = *(int *)(v6 + 12);
    if ((v7 & 1) == 0) {
      uint64_t v8 = 0;
    }
    uint64_t v10 = *(int *)(v5 + 16);
    if ((v7 & 4) == 0) {
      uint64_t v10 = 0;
    }
    if ((v7 & 2) != 0) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = 0;
    }
    result ^= v8 ^ v10 ^ v11;
  }
  while (v2 != v3);
  return result;
}

uint64_t CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(uint64_t this)
{
  *(void *)this = off_1003A4F70;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A4F70;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::ClefCalibrationPoint::~ClefCalibrationPoint(CMMsl::ClefCalibrationPoint *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(uint64_t this, const CMMsl::ClefCalibrationPoint *a2)
{
  *(void *)this = off_1003A4F70;
  *(_DWORD *)(this + 20) = 0;
  char v2 = *((unsigned char *)a2 + 20);
  if (v2)
  {
    int v4 = *((_DWORD *)a2 + 2);
    char v3 = 1;
    *(unsigned char *)(this + 20) = 1;
    *(_DWORD *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 20);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 20) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(unsigned char *)(this + 20) = v3;
    *(_DWORD *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 20) = v3 | 2;
    *(_DWORD *)(this + 12) = v6;
  }
  return this;
}

uint64_t CMMsl::ClefCalibrationPoint::operator=(uint64_t a1, const CMMsl::ClefCalibrationPoint *a2)
{
  if ((const CMMsl::ClefCalibrationPoint *)a1 != a2)
  {
    CMMsl::ClefCalibrationPoint::ClefCalibrationPoint((uint64_t)v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::ClefCalibrationPoint *a2, CMMsl::ClefCalibrationPoint *a3)
{
  int v3 = this[5];
  this[5] = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  int v4 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  int v6 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  return this;
}

uint64_t CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(uint64_t result, _DWORD *a2)
{
  *(void *)uint64_t result = off_1003A4F70;
  *(_DWORD *)(result + 20) = a2[5];
  a2[5] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

{
  *(void *)uint64_t result = off_1003A4F70;
  *(_DWORD *)(result + 20) = a2[5];
  a2[5] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

uint64_t CMMsl::ClefCalibrationPoint::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v6 = off_1003A4F70;
    long long v3 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 20) = 0;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::ClefCalibrationPoint::formatText(CMMsl::ClefCalibrationPoint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "base", *((_DWORD *)this + 2));
    char v5 = *((unsigned char *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "distance", *((_DWORD *)this + 3));
  if ((*((unsigned char *)this + 20) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "peak", *((_DWORD *)this + 4));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ClefCalibrationPoint::readFrom(CMMsl::ClefCalibrationPoint *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_80;
            }
            unint64_t v46 = v27++;
            char v47 = *(unsigned char *)(v28 + v46);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            BOOL v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_79;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_79:
          unint64_t v3 = v46 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_80:
        *((_DWORD *)this + 3) = v31;
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 20) |= 4u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_85;
            }
            unint64_t v50 = v33++;
            char v51 = *(unsigned char *)(v34 + v50);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            BOOL v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_84;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
LABEL_84:
          unint64_t v3 = v50 + 1;
        }
        else
        {
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          while (1)
          {
            unint64_t v3 = v33 + 1;
            *((void *)a2 + 1) = v33 + 1;
            char v38 = *(unsigned char *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            unint64_t v33 = v3;
            BOOL v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_85:
        *((_DWORD *)this + 4) = v37;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_75;
            }
            unint64_t v42 = v21++;
            char v43 = *(unsigned char *)(v22 + v42);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0) {
              break;
            }
            v40 += 7;
            BOOL v14 = v41++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_74;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_74:
          unint64_t v3 = v42 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v3 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v3;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_75:
        *((_DWORD *)this + 2) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ClefCalibrationPoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 20) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
    if ((*(unsigned char *)(v3 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 20);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  int v5 = *(_DWORD *)(v3 + 12);

  return PB::Writer::writeVarInt(a2, v5, 3u);
}

BOOL CMMsl::ClefCalibrationPoint::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  }
  return v2;
}

uint64_t CMMsl::ClefCalibrationPoint::hash_value(CMMsl::ClefCalibrationPoint *this)
{
  if ((*((unsigned char *)this + 20) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 20) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  uint64_t v1 = *((int *)this + 2);
  if ((*((unsigned char *)this + 20) & 4) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 4);
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v3 = *((int *)this + 3);
  return v2 ^ v1 ^ v3;
}

uint64_t CMMsl::ClefMeasurement::ClefMeasurement(uint64_t this)
{
  *(void *)this = off_1003A4FA8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = off_1003A4FA8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::ClefMeasurement::~ClefMeasurement(CMMsl::ClefMeasurement *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::ClefMeasurement::ClefMeasurement(CMMsl::ClefMeasurement *this, const CMMsl::ClefMeasurement *a2)
{
  *(void *)this = off_1003A4FA8;
  *((_DWORD *)this + 4) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 16) = 1;
    *((float *)this + 2) = result;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    *((unsigned char *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

uint64_t CMMsl::ClefMeasurement::operator=(uint64_t a1, const CMMsl::ClefMeasurement *a2)
{
  if ((const CMMsl::ClefMeasurement *)a1 != a2)
  {
    CMMsl::ClefMeasurement::ClefMeasurement((CMMsl::ClefMeasurement *)v6, a2);
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ClefMeasurement *a2, CMMsl::ClefMeasurement *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::ClefMeasurement::ClefMeasurement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4FA8;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A4FA8;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

uint64_t CMMsl::ClefMeasurement::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = off_1003A4FA8;
    int v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::ClefMeasurement::formatText(CMMsl::ClefMeasurement *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "concha", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "tragus", *((float *)this + 3));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ClefMeasurement::readFrom(CMMsl::ClefMeasurement *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_28;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
        {
LABEL_28:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 4;
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::ClefMeasurement::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 12);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::ClefMeasurement::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 2) == 0;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    return (*(unsigned char *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  }
  return v2;
}

uint64_t CMMsl::ClefMeasurement::hash_value(CMMsl::ClefMeasurement *this)
{
  if (*((unsigned char *)this + 16))
  {
    float v4 = *((float *)this + 2);
    uint64_t v1 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v1 = 0;
    }
    if ((*((unsigned char *)this + 16) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v3 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v1;
}

uint64_t CMMsl::ClefTemperature::ClefTemperature(uint64_t this)
{
  *(void *)this = off_1003A4FE0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = off_1003A4FE0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::ClefTemperature::~ClefTemperature(CMMsl::ClefTemperature *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::ClefTemperature::ClefTemperature(uint64_t this, const CMMsl::ClefTemperature *a2)
{
  *(void *)this = off_1003A4FE0;
  *(_DWORD *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    int v3 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

uint64_t CMMsl::ClefTemperature::operator=(uint64_t a1, const CMMsl::ClefTemperature *a2)
{
  if ((const CMMsl::ClefTemperature *)a1 != a2)
  {
    CMMsl::ClefTemperature::ClefTemperature((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::ClefTemperature *a2, CMMsl::ClefTemperature *a3)
{
  int v3 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::ClefTemperature::ClefTemperature(uint64_t result, _DWORD *a2)
{
  *(void *)uint64_t result = off_1003A4FE0;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

{
  *(void *)uint64_t result = off_1003A4FE0;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

uint64_t CMMsl::ClefTemperature::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = off_1003A4FE0;
    int v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::ClefTemperature::formatText(CMMsl::ClefTemperature *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "conchaTemp", *((_DWORD *)this + 2));
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "tragusTemp", *((_DWORD *)this + 3));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ClefTemperature::readFrom(CMMsl::ClefTemperature *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          unint64_t v3 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 3) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_59:
          unint64_t v3 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v3 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v3;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 2) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ClefTemperature::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    int v5 = *(_DWORD *)(v3 + 12);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::ClefTemperature::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 2) == 0;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    return (*(unsigned char *)(a2 + 16) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  }
  return v2;
}

uint64_t CMMsl::ClefTemperature::hash_value(CMMsl::ClefTemperature *this)
{
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = *((int *)this + 2);
    if ((*((unsigned char *)this + 16) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 3);
  return v2 ^ v1;
}

uint64_t CMMsl::CoarseElevationChange::CoarseElevationChange(uint64_t this)
{
  *(void *)this = off_1003A5018;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A5018;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::CoarseElevationChange::~CoarseElevationChange(CMMsl::CoarseElevationChange *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::CoarseElevationChange::CoarseElevationChange(uint64_t this, const CMMsl::CoarseElevationChange *a2)
{
  *(void *)this = off_1003A5018;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::CoarseElevationChange *CMMsl::CoarseElevationChange::operator=(const CMMsl::CoarseElevationChange *a1, const CMMsl::CoarseElevationChange *a2)
{
  if (a1 != a2)
  {
    CMMsl::CoarseElevationChange::CoarseElevationChange((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CoarseElevationChange *a2, CMMsl::CoarseElevationChange *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::CoarseElevationChange::CoarseElevationChange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5018;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A5018;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::CoarseElevationChange::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A5018;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::CoarseElevationChange::formatText(CMMsl::CoarseElevationChange *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "elevationAscended", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CoarseElevationChange::readFrom(CMMsl::CoarseElevationChange *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CoarseElevationChange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::CoarseElevationChange::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::CoarseElevationChange::hash_value(CMMsl::CoarseElevationChange *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::Compass::Compass(uint64_t this)
{
  *(void *)this = off_1003A5050;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(void *)this = off_1003A5050;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

void CMMsl::Compass::~Compass(CMMsl::Compass *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::Compass::Compass(CMMsl::Compass *this, const CMMsl::Compass *a2)
{
  *(void *)this = off_1003A5050;
  *((_DWORD *)this + 17) = 0;
  __int16 v2 = *((_WORD *)a2 + 34);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 34) = 1;
    *((void *)this + 1) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 34) & 0x800) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 14);
    v3 |= 0x800u;
    *((_WORD *)this + 34) = v3;
    *((_DWORD *)this + 14) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x2000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 16);
    v3 |= 0x2000u;
    *((_WORD *)this + 34) = v3;
    *((_DWORD *)this + 16) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 4) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 11) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 12) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 13) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 5) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 6) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 7) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v5 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 8) = v5;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 15) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 10) = v4;
  if ((*((_WORD *)a2 + 34) & 0x40) == 0) {
    return *(float *)&v4;
  }
LABEL_30:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_WORD *)this + 34) = v3 | 0x40;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::Compass::operator=(CMMsl *a1, const CMMsl::Compass *a2)
{
  if (a1 != a2)
  {
    CMMsl::Compass::Compass((CMMsl::Compass *)v5, a2);
    CMMsl::swap(a1, (CMMsl::Compass *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Compass *a2, CMMsl::Compass *a3)
{
  int v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::Compass::Compass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5050;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

CMMsl *CMMsl::Compass::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::Compass::Compass((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::Compass *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::Compass::formatText(CMMsl::Compass *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 34);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasX", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "calibrationLevel", *((_DWORD *)this + 8));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "horizontal", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "inclination", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "magneticHeading", *((float *)this + 14));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "magnitude", *((float *)this + 15));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((_WORD *)this + 34) & 0x2000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "trueHeading", *((float *)this + 16));
LABEL_16:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Compass::readFrom(CMMsl::Compass *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 34) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_79;
            case 2u:
              *((_WORD *)this + 34) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_78;
            case 3u:
              *((_WORD *)this + 34) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_78;
            case 4u:
              *((_WORD *)this + 34) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_78;
            case 5u:
              *((_WORD *)this + 34) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_78;
            case 6u:
              *((_WORD *)this + 34) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_78;
            case 7u:
              *((_WORD *)this + 34) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_78;
            case 8u:
              *((_WORD *)this + 34) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_78;
            case 9u:
              *((_WORD *)this + 34) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_78;
            case 0xAu:
              *((_WORD *)this + 34) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_78;
            case 0xBu:
              *((_WORD *)this + 34) |= 0x20u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_84;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_83:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_83;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_84;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_84:
              *((_DWORD *)this + 8) = v25;
LABEL_85:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xCu:
              *((_WORD *)this + 34) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_78;
            case 0xDu:
              *((_WORD *)this + 34) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_78;
            case 0xEu:
              *((_WORD *)this + 34) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_78:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_79:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_69:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_85;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_85;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::Compass::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 68);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(this + 68) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 3u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 5u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 6u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 7u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 8u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 9u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xDu);
    if ((*(_WORD *)(v3 + 68) & 0x40) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_29:
  float v5 = *(float *)(v3 + 36);

  return PB::Writer::write(a2, v5, 0xEu);
}

BOOL CMMsl::Compass::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 68);
  __int16 v3 = *(_WORD *)(a2 + 68);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0) {
    return (v3 & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  }
  return v4;
}

uint64_t CMMsl::Compass::hash_value(CMMsl::Compass *this)
{
  __int16 v1 = *((_WORD *)this + 34);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 34) & 0x800) != 0) {
      goto LABEL_3;
    }
LABEL_43:
    uint64_t v4 = 0;
    if ((*((_WORD *)this + 34) & 0x2000) != 0) {
      goto LABEL_6;
    }
LABEL_44:
    uint64_t v6 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_9;
    }
LABEL_45:
    uint64_t v8 = 0;
    if ((*((_WORD *)this + 34) & 0x100) != 0) {
      goto LABEL_12;
    }
LABEL_46:
    uint64_t v10 = 0;
    if ((*((_WORD *)this + 34) & 0x200) != 0) {
      goto LABEL_15;
    }
LABEL_47:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 34) & 0x400) != 0) {
      goto LABEL_18;
    }
LABEL_48:
    uint64_t v14 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_21;
    }
LABEL_49:
    uint64_t v16 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_24;
    }
LABEL_50:
    uint64_t v18 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_27;
    }
LABEL_51:
    uint64_t v20 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_30;
    }
    goto LABEL_52;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((_WORD *)this + 34) & 0x800) == 0) {
    goto LABEL_43;
  }
LABEL_3:
  float v3 = *((float *)this + 14);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x2000) == 0) {
    goto LABEL_44;
  }
LABEL_6:
  float v5 = *((float *)this + 16);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_45;
  }
LABEL_9:
  float v7 = *((float *)this + 4);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x100) == 0) {
    goto LABEL_46;
  }
LABEL_12:
  float v9 = *((float *)this + 11);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x200) == 0) {
    goto LABEL_47;
  }
LABEL_15:
  float v11 = *((float *)this + 12);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x400) == 0) {
    goto LABEL_48;
  }
LABEL_18:
  float v13 = *((float *)this + 13);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_49;
  }
LABEL_21:
  float v15 = *((float *)this + 5);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_50;
  }
LABEL_24:
  float v17 = *((float *)this + 6);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_51;
  }
LABEL_27:
  float v19 = *((float *)this + 7);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_30:
    uint64_t v21 = *((int *)this + 8);
    if ((*((_WORD *)this + 34) & 0x1000) != 0) {
      goto LABEL_31;
    }
LABEL_53:
    uint64_t v23 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
LABEL_52:
  uint64_t v21 = 0;
  if ((*((_WORD *)this + 34) & 0x1000) == 0) {
    goto LABEL_53;
  }
LABEL_31:
  float v22 = *((float *)this + 15);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_34:
    float v24 = *((float *)this + 10);
    uint64_t v25 = LODWORD(v24);
    if (v24 == 0.0) {
      uint64_t v25 = 0;
    }
    if ((v1 & 0x40) != 0) {
      goto LABEL_37;
    }
LABEL_55:
    uint64_t v27 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27;
  }
LABEL_54:
  uint64_t v25 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_55;
  }
LABEL_37:
  float v26 = *((float *)this + 9);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27;
}

uint64_t CMMsl::CompassAlignment::CompassAlignment(uint64_t this)
{
  *(void *)this = off_1003A5088;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A5088;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::CompassAlignment::~CompassAlignment(CMMsl::CompassAlignment *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::CompassAlignment::CompassAlignment(uint64_t this, const CMMsl::CompassAlignment *a2)
{
  *(void *)this = off_1003A5088;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::CompassAlignment *CMMsl::CompassAlignment::operator=(const CMMsl::CompassAlignment *a1, const CMMsl::CompassAlignment *a2)
{
  if (a1 != a2)
  {
    CMMsl::CompassAlignment::CompassAlignment((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CompassAlignment *a2, CMMsl::CompassAlignment *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::CompassAlignment::CompassAlignment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5088;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A5088;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::CompassAlignment::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A5088;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::CompassAlignment::formatText(CMMsl::CompassAlignment *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "compassJustAlignedToStableField", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CompassAlignment::readFrom(CMMsl::CompassAlignment *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassAlignment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::CompassAlignment::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::CompassAlignment::hash_value(CMMsl::CompassAlignment *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 4);
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::CompassCalibration::CompassCalibration(uint64_t this)
{
  *(void *)this = off_1003A50C0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(void *)this = off_1003A50C0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

void CMMsl::CompassCalibration::~CompassCalibration(CMMsl::CompassCalibration *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::CompassCalibration::CompassCalibration(CMMsl::CompassCalibration *this, const CMMsl::CompassCalibration *a2)
{
  *(void *)this = off_1003A50C0;
  *((_DWORD *)this + 20) = 0;
  int v2 = *((_DWORD *)a2 + 20);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 20) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 4) = v4;
    int v2 = *((_DWORD *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 5) = v4;
    int v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x2000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 6) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x2000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 16) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x8000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 15) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 8) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 9) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 10) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 12) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 13) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 14) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v5 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 7) = v5;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  char v6 = *((unsigned char *)a2 + 77);
  v3 |= 0x20000u;
  *((_DWORD *)this + 20) = v3;
  *((unsigned char *)this + 77) = v6;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_38;
  }
LABEL_37:
  char v7 = *((unsigned char *)a2 + 76);
  v3 |= 0x10000u;
  *((_DWORD *)this + 20) = v3;
  *((unsigned char *)this + 76) = v7;
  if ((*((_DWORD *)a2 + 20) & 0x100) == 0) {
    return *(float *)&v4;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  *((_DWORD *)this + 20) = v3 | 0x100;
  *((_DWORD *)this + 11) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::CompassCalibration::operator=(CMMsl *a1, const CMMsl::CompassCalibration *a2)
{
  if (a1 != a2)
  {
    CMMsl::CompassCalibration::CompassCalibration((CMMsl::CompassCalibration *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassCalibration *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CompassCalibration *a2, CMMsl::CompassCalibration *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  int v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 77);
  *((unsigned char *)this + 77) = *((unsigned char *)a2 + 77);
  *((unsigned char *)a2 + 77) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 76);
  *((unsigned char *)this + 76) = *((unsigned char *)a2 + 76);
  *((unsigned char *)a2 + 76) = v5;
  float result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  return result;
}

float CMMsl::CompassCalibration::CompassCalibration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A50C0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  float result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  return result;
}

CMMsl *CMMsl::CompassCalibration::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CompassCalibration::CompassCalibration((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassCalibration *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::CompassCalibration::formatText(CMMsl::CompassCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "apAwake", *((unsigned char *)this + 76));
    int v5 = *((_DWORD *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasX", *((float *)this + 4));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "calibrationLevel", *((_DWORD *)this + 7));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "cost", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "coverage", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "earthDiffRatio", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "hasConsistency", *((unsigned char *)this + 77));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "planarity", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "poseX", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "poseY", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "poseZ", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "quality", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "scaleX", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "scaleY", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "scaleZ", *((float *)this + 18));
  if (*((_DWORD *)this + 20)) {
LABEL_19:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_20:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CompassCalibration::readFrom(CMMsl::CompassCalibration *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 20) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_93;
            case 2u:
              *((_DWORD *)this + 20) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 3u:
              *((_DWORD *)this + 20) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 4u:
              *((_DWORD *)this + 20) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 5u:
              *((_DWORD *)this + 20) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 6u:
              *((_DWORD *)this + 20) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 7u:
              *((_DWORD *)this + 20) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 8u:
              *((_DWORD *)this + 20) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 9u:
              *((_DWORD *)this + 20) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 0xAu:
              *((_DWORD *)this + 20) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 0xBu:
              *((_DWORD *)this + 20) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 0xCu:
              *((_DWORD *)this + 20) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 0xDu:
              *((_DWORD *)this + 20) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 0xEu:
              *((_DWORD *)this + 20) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_79;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 0xFu:
              *((_DWORD *)this + 20) |= 0x10u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v33 = v21++;
                  char v34 = *(unsigned char *)(v22 + v33);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  BOOL v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_97:
                    unint64_t v2 = v33 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_97;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_98:
              *((_DWORD *)this + 7) = v25;
LABEL_99:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x10u:
              *((_DWORD *)this + 20) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 77) = v28;
              goto LABEL_99;
            case 0x11u:
              *((_DWORD *)this + 20) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 76) = v30;
              goto LABEL_99;
            case 0x12u:
              *((_DWORD *)this + 20) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_92:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_93:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_79:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_99;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_99;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 80);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 5u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 6u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 7u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 8u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 9u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xAu);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xBu);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xCu);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xDu);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xEu);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 0xFu);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 76), 0x11u);
    if ((*(_DWORD *)(v3 + 80) & 0x100) == 0) {
      return this;
    }
    goto LABEL_37;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 77), 0x10u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((v4 & 0x100) == 0) {
    return this;
  }
LABEL_37:
  float v5 = *(float *)(v3 + 44);

  return PB::Writer::write(a2, v5, 0x12u);
}

BOOL CMMsl::CompassCalibration::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 80);
  int v3 = *(_DWORD *)(a2 + 80);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 80) & 0x100) == 0;
  if ((v2 & 0x100) != 0) {
    return (v3 & 0x100) != 0 && *(float *)(a1 + 44) == *(float *)(a2 + 44);
  }
  return v4;
}

uint64_t CMMsl::CompassCalibration::hash_value(CMMsl::CompassCalibration *this)
{
  int v1 = *((_DWORD *)this + 20);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_51:
    uint64_t v4 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_52:
    uint64_t v6 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_53:
    uint64_t v8 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_12;
    }
LABEL_54:
    uint64_t v10 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_15;
    }
LABEL_55:
    uint64_t v12 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_18;
    }
LABEL_56:
    uint64_t v14 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_21;
    }
LABEL_57:
    uint64_t v16 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_24;
    }
LABEL_58:
    uint64_t v18 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_27;
    }
LABEL_59:
    uint64_t v20 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_30;
    }
LABEL_60:
    uint64_t v22 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_33;
    }
LABEL_61:
    uint64_t v24 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_36;
    }
LABEL_62:
    uint64_t v26 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_39;
    }
LABEL_63:
    uint64_t v28 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_42;
    }
    goto LABEL_64;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_51;
  }
LABEL_3:
  float v3 = *((float *)this + 4);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_52;
  }
LABEL_6:
  float v5 = *((float *)this + 5);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_53;
  }
LABEL_9:
  float v7 = *((float *)this + 6);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_54;
  }
LABEL_12:
  float v9 = *((float *)this + 16);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_55;
  }
LABEL_15:
  float v11 = *((float *)this + 17);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_56;
  }
LABEL_18:
  float v13 = *((float *)this + 18);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_57;
  }
LABEL_21:
  float v15 = *((float *)this + 15);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_58;
  }
LABEL_24:
  float v17 = *((float *)this + 8);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_59;
  }
LABEL_27:
  float v19 = *((float *)this + 9);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_60;
  }
LABEL_30:
  float v21 = *((float *)this + 10);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_61;
  }
LABEL_33:
  float v23 = *((float *)this + 12);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_62;
  }
LABEL_36:
  float v25 = *((float *)this + 13);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_63;
  }
LABEL_39:
  float v27 = *((float *)this + 14);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_42:
    uint64_t v29 = *((int *)this + 7);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v29 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_43:
    uint64_t v30 = *((unsigned __int8 *)this + 77);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v30 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_44:
    uint64_t v31 = *((unsigned __int8 *)this + 76);
    if ((v1 & 0x100) != 0) {
      goto LABEL_45;
    }
LABEL_67:
    uint64_t v33 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33;
  }
LABEL_66:
  uint64_t v31 = 0;
  if ((v1 & 0x100) == 0) {
    goto LABEL_67;
  }
LABEL_45:
  float v32 = *((float *)this + 11);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33;
}

uint64_t CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(uint64_t this)
{
  *(void *)this = off_1003A50F8;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(void *)this = off_1003A50F8;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

void CMMsl::CompassCalibrationAttempt::~CompassCalibrationAttempt(CMMsl::CompassCalibrationAttempt *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(CMMsl::CompassCalibrationAttempt *this, const CMMsl::CompassCalibrationAttempt *a2)
{
  *(void *)this = off_1003A50F8;
  *((_DWORD *)this + 20) = 0;
  int v2 = *((_DWORD *)a2 + 20);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 20) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 4) = v4;
    int v2 = *((_DWORD *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 5) = v4;
    int v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_24;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 6) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 14) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 15) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 16) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 13) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 7) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
LABEL_30:
  char v5 = *((unsigned char *)a2 + 76);
  v3 |= 0x10000u;
  *((_DWORD *)this + 20) = v3;
  *((unsigned char *)this + 76) = v5;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 8) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 9) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 10) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v6 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 11) = v6;
  if ((*((_DWORD *)a2 + 20) & 0x200) == 0) {
    return *(float *)&v4;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 20) = v3 | 0x200;
  *((_DWORD *)this + 12) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::CompassCalibrationAttempt::operator=(CMMsl *a1, const CMMsl::CompassCalibrationAttempt *a2)
{
  if (a1 != a2)
  {
    CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt((CMMsl::CompassCalibrationAttempt *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassCalibrationAttempt *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CompassCalibrationAttempt *a2, CMMsl::CompassCalibrationAttempt *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 76);
  *((unsigned char *)this + 76) = *((unsigned char *)a2 + 76);
  *((unsigned char *)a2 + 76) = v3;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  int v5 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  float result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

float CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A50F8;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  float result = *(float *)(a2 + 48);
  *(float *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::CompassCalibrationAttempt::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassCalibrationAttempt *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::CompassCalibrationAttempt::formatText(CMMsl::CompassCalibrationAttempt *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "biasX", *((float *)this + 4));
    int v5 = *((_DWORD *)this + 20);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "cost", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "coverage2d", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "coverage3d", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "earthDiffRatio", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isPlanar", *((unsigned char *)this + 76));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "numberOfSamples", *((_DWORD *)this + 11));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "planarity", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "quality", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "scaleX", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "scaleY", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "scaleZ", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "timeSpan", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 1) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((_DWORD *)this + 20) & 0x8000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(a2, "unitDistance", *((float *)this + 18));
LABEL_19:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CompassCalibrationAttempt::readFrom(CMMsl::CompassCalibrationAttempt *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 20) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_89;
            case 2u:
              *((_DWORD *)this + 20) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 3u:
              *((_DWORD *)this + 20) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 4u:
              *((_DWORD *)this + 20) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 5u:
              *((_DWORD *)this + 20) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 6u:
              *((_DWORD *)this + 20) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 7u:
              *((_DWORD *)this + 20) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 8u:
              *((_DWORD *)this + 20) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 9u:
              *((_DWORD *)this + 20) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 0xAu:
              *((_DWORD *)this + 20) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 0xBu:
              *((_DWORD *)this + 20) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 76) = v22;
              goto LABEL_95;
            case 0xCu:
              *((_DWORD *)this + 20) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 0xDu:
              *((_DWORD *)this + 20) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 0xEu:
              *((_DWORD *)this + 20) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 0xFu:
              *((_DWORD *)this + 20) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 0x10u:
              *((_DWORD *)this + 20) |= 0x100u;
              unint64_t v23 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v24 = *(void *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_94;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_93:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_93;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)a2 + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_94;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_94:
              *((_DWORD *)this + 11) = v27;
LABEL_95:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x11u:
              *((_DWORD *)this + 20) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_88:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_89:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_77:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_95;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_95;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassCalibrationAttempt::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 80);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 5u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 6u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 7u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 8u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 9u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xAu);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 76), 0xBu);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xCu);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xDu);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xEu);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
LABEL_34:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 0x10u);
    if ((*(_DWORD *)(v3 + 80) & 0x200) == 0) {
      return this;
    }
    goto LABEL_35;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xFu);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x100) != 0) {
    goto LABEL_34;
  }
LABEL_17:
  if ((v4 & 0x200) == 0) {
    return this;
  }
LABEL_35:
  float v5 = *(float *)(v3 + 48);

  return PB::Writer::write(a2, v5, 0x11u);
}

BOOL CMMsl::CompassCalibrationAttempt::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 80);
  int v3 = *(_DWORD *)(a2 + 80);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 80) & 0x200) == 0;
  if ((v2 & 0x200) != 0) {
    return (v3 & 0x200) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  }
  return v4;
}

uint64_t CMMsl::CompassCalibrationAttempt::hash_value(CMMsl::CompassCalibrationAttempt *this)
{
  int v1 = *((_DWORD *)this + 20);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_50:
    uint64_t v4 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_51:
    uint64_t v6 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_52:
    uint64_t v8 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_12;
    }
LABEL_53:
    uint64_t v10 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_15;
    }
LABEL_54:
    uint64_t v12 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_18;
    }
LABEL_55:
    uint64_t v14 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_21;
    }
LABEL_56:
    uint64_t v16 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_24;
    }
LABEL_57:
    uint64_t v18 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_27;
    }
LABEL_58:
    uint64_t v20 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_59;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_50;
  }
LABEL_3:
  float v3 = *((float *)this + 4);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_51;
  }
LABEL_6:
  float v5 = *((float *)this + 5);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_52;
  }
LABEL_9:
  float v7 = *((float *)this + 6);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_53;
  }
LABEL_12:
  float v9 = *((float *)this + 14);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_54;
  }
LABEL_15:
  float v11 = *((float *)this + 15);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_55;
  }
LABEL_18:
  float v13 = *((float *)this + 16);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_56;
  }
LABEL_21:
  float v15 = *((float *)this + 13);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_57;
  }
LABEL_24:
  float v17 = *((float *)this + 7);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_58;
  }
LABEL_27:
  float v19 = *((float *)this + 18);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_30:
    uint64_t v21 = *((unsigned __int8 *)this + 76);
    if ((v1 & 0x20) != 0) {
      goto LABEL_31;
    }
LABEL_60:
    uint64_t v23 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_34;
    }
LABEL_61:
    uint64_t v25 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_37;
    }
LABEL_62:
    uint64_t v27 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_40;
    }
LABEL_63:
    uint64_t v29 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_43;
    }
    goto LABEL_64;
  }
LABEL_59:
  uint64_t v21 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_60;
  }
LABEL_31:
  float v22 = *((float *)this + 8);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_61;
  }
LABEL_34:
  float v24 = *((float *)this + 9);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_62;
  }
LABEL_37:
  float v26 = *((float *)this + 10);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_63;
  }
LABEL_40:
  float v28 = *((float *)this + 17);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_43:
    uint64_t v30 = *((unsigned int *)this + 11);
    if ((v1 & 0x200) != 0) {
      goto LABEL_44;
    }
LABEL_65:
    uint64_t v32 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32;
  }
LABEL_64:
  uint64_t v30 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_65;
  }
LABEL_44:
  float v31 = *((float *)this + 12);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32;
}

double CMMsl::CompassConstraints::CompassConstraints(CMMsl::CompassConstraints *this)
{
  *(void *)this = off_1003A5130;
  *((_DWORD *)this + 31) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A5130;
  *((_DWORD *)this + 31) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::CompassConstraints::~CompassConstraints(CMMsl::CompassConstraints *this)
{
  *(void *)this = off_1003A5130;
  double v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::CompassConstraints::~CompassConstraints(this);

  operator delete();
}

CMMsl::CompassConstraints *CMMsl::CompassConstraints::CompassConstraints(CMMsl::CompassConstraints *this, const CMMsl::CompassConstraints *a2)
{
  *(void *)this = off_1003A5130;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *((_DWORD *)this + 31) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  int v5 = *((_DWORD *)a2 + 31);
  if (v5)
  {
    uint64_t v7 = *((void *)a2 + 7);
    int v6 = 1;
    *((_DWORD *)this + 31) = 1;
    *((void *)this + 7) = v7;
    int v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v6 = 0;
  if ((v5 & 0x80) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 22);
    v6 |= 0x80u;
    *((_DWORD *)this + 31) = v6;
    *((_DWORD *)this + 22) = v8;
    int v5 = *((_DWORD *)a2 + 31);
  }
LABEL_6:
  if ((v5 & 0x4000) != 0)
  {
    int v13 = *((_DWORD *)a2 + 29);
    v6 |= 0x4000u;
    *((_DWORD *)this + 31) = v6;
    *((_DWORD *)this + 29) = v13;
    int v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 4) == 0)
    {
LABEL_8:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v14 = *((_DWORD *)a2 + 17);
  v6 |= 4u;
  *((_DWORD *)this + 31) = v6;
  *((_DWORD *)this + 17) = v14;
  if ((*((_DWORD *)a2 + 31) & 0x20) != 0)
  {
LABEL_9:
    int v9 = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 31) = v6 | 0x20;
    *((_DWORD *)this + 20) = v9;
  }
LABEL_10:
  if (this != a2)
  {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x800) != 0)
  {
    int v15 = *((_DWORD *)a2 + 26);
    *((_DWORD *)this + 31) |= 0x800u;
    *((_DWORD *)this + 26) = v15;
    int v10 = *((_DWORD *)a2 + 31);
    if ((v10 & 0x100) == 0)
    {
LABEL_14:
      if ((v10 & 2) == 0) {
        goto LABEL_15;
      }
      goto LABEL_31;
    }
  }
  else if ((v10 & 0x100) == 0)
  {
    goto LABEL_14;
  }
  int v16 = *((_DWORD *)a2 + 23);
  *((_DWORD *)this + 31) |= 0x100u;
  *((_DWORD *)this + 23) = v16;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 2) == 0)
  {
LABEL_15:
    if ((v10 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v17 = *((_DWORD *)a2 + 16);
  *((_DWORD *)this + 31) |= 2u;
  *((_DWORD *)this + 16) = v17;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x10) == 0)
  {
LABEL_16:
    if ((v10 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v18 = *((_DWORD *)a2 + 19);
  *((_DWORD *)this + 31) |= 0x10u;
  *((_DWORD *)this + 19) = v18;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 8) == 0)
  {
LABEL_17:
    if ((v10 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v19 = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 31) |= 8u;
  *((_DWORD *)this + 18) = v19;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x400) == 0)
  {
LABEL_18:
    if ((v10 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v20 = *((_DWORD *)a2 + 25);
  *((_DWORD *)this + 31) |= 0x400u;
  *((_DWORD *)this + 25) = v20;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x10000) == 0)
  {
LABEL_19:
    if ((v10 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_35:
  char v21 = *((unsigned char *)a2 + 121);
  *((_DWORD *)this + 31) |= 0x10000u;
  *((unsigned char *)this + 121) = v21;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x8000) == 0)
  {
LABEL_20:
    if ((v10 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  char v22 = *((unsigned char *)a2 + 120);
  *((_DWORD *)this + 31) |= 0x8000u;
  *((unsigned char *)this + 120) = v22;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x200) == 0)
  {
LABEL_21:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v23 = *((_DWORD *)a2 + 24);
  *((_DWORD *)this + 31) |= 0x200u;
  *((_DWORD *)this + 24) = v23;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x1000) == 0)
  {
LABEL_22:
    if ((v10 & 0x40) == 0) {
      goto LABEL_23;
    }
LABEL_39:
    int v25 = *((_DWORD *)a2 + 21);
    *((_DWORD *)this + 31) |= 0x40u;
    *((_DWORD *)this + 21) = v25;
    if ((*((_DWORD *)a2 + 31) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_24;
  }
LABEL_38:
  int v24 = *((_DWORD *)a2 + 27);
  *((_DWORD *)this + 31) |= 0x1000u;
  *((_DWORD *)this + 27) = v24;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x40) != 0) {
    goto LABEL_39;
  }
LABEL_23:
  if ((v10 & 0x2000) != 0)
  {
LABEL_24:
    int v11 = *((_DWORD *)a2 + 28);
    *((_DWORD *)this + 31) |= 0x2000u;
    *((_DWORD *)this + 28) = v11;
  }
  return this;
}

CMMsl *CMMsl::CompassConstraints::operator=(CMMsl *a1, const CMMsl::CompassConstraints *a2)
{
  if (a1 != a2)
  {
    CMMsl::CompassConstraints::CompassConstraints((CMMsl::CompassConstraints *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassConstraints *)v5, v3);
    CMMsl::CompassConstraints::~CompassConstraints((CMMsl::CompassConstraints *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CompassConstraints *a2, CMMsl::CompassConstraints *a3)
{
  int v3 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v10) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v10;
  LODWORD(v10) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v10;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LOBYTE(v10) = *((unsigned char *)this + 121);
  *((unsigned char *)this + 121) = *((unsigned char *)a2 + 121);
  *((unsigned char *)a2 + 121) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 120);
  *((unsigned char *)this + 120) = *((unsigned char *)a2 + 120);
  *((unsigned char *)a2 + 120) = v10;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  float result = *((float *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((float *)a2 + 28) = result;
  return result;
}

uint64_t CMMsl::CompassConstraints::CompassConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5130;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

CMMsl *CMMsl::CompassConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CompassConstraints::CompassConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassConstraints *)v5, v3);
    CMMsl::CompassConstraints::~CompassConstraints((CMMsl::CompassConstraints *)v5);
  }
  return a1;
}

uint64_t CMMsl::CompassConstraints::formatText(CMMsl::CompassConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 124) & 2) != 0) {
    PB::TextFormatter::format(a2, "attitudeDelta", *((float *)this + 16));
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "calibratedField", v7);
  }
  int v8 = *((_DWORD *)this + 31);
  if ((v8 & 0x8000) != 0)
  {
    PB::TextFormatter::format(a2, "doCorrection", *((unsigned char *)this + 120));
    int v8 = *((_DWORD *)this + 31);
    if ((v8 & 4) == 0)
    {
LABEL_7:
      if ((v8 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_30;
    }
  }
  else if ((v8 & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "horizontal", *((float *)this + 17));
  int v8 = *((_DWORD *)this + 31);
  if ((v8 & 8) == 0)
  {
LABEL_8:
    if ((v8 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "isOnSphere", *((_DWORD *)this + 18));
  int v8 = *((_DWORD *)this + 31);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "isRotating", *((_DWORD *)this + 19));
  if ((*((_DWORD *)this + 31) & 0x10000) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "isTraversingSphere", *((unsigned char *)this + 121));
LABEL_11:
  uint64_t v9 = (float *)*((void *)this + 4);
  uint64_t v10 = (float *)*((void *)this + 5);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(a2, "predictedField", v11);
  }
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "scale", *((float *)this + 20));
    int v12 = *((_DWORD *)this + 31);
    if ((v12 & 0x40) == 0)
    {
LABEL_15:
      if ((v12 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_35;
    }
  }
  else if ((v12 & 0x40) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "timerUnitDistanceThreshold", *((float *)this + 21));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 1) == 0)
  {
LABEL_16:
    if ((v12 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x80) == 0)
  {
LABEL_17:
    if ((v12 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "unitDistance", *((float *)this + 22));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x100) == 0)
  {
LABEL_18:
    if ((v12 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "unitDistanceLargeBufferDelta", *((float *)this + 23));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x200) == 0)
  {
LABEL_19:
    if ((v12 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "unitDistanceLargeBufferMax", *((float *)this + 24));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x400) == 0)
  {
LABEL_20:
    if ((v12 & 0x800) == 0) {
      goto LABEL_21;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "unitDistanceReference", *((float *)this + 25));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x800) == 0)
  {
LABEL_21:
    if ((v12 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "unitDistanceSmallBufferDelta", *((float *)this + 26));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x1000) == 0)
  {
LABEL_22:
    if ((v12 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "unitDistanceThreshold", *((float *)this + 27));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x2000) == 0)
  {
LABEL_23:
    if ((v12 & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "unitDistanceThresholdApplied", *((float *)this + 28));
  if ((*((_DWORD *)this + 31) & 0x4000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(a2, "vertical", *((float *)this + 29));
LABEL_25:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::CompassConstraints::readFrom(CMMsl::CompassConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    int v8 = (void **)((char *)this + 32);
    uint64_t v9 = (char *)this + 48;
    uint64_t v10 = (void **)((char *)this + 8);
    float v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 31) |= 1u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v25);
          uint64_t v26 = *((void *)a2 + 1) + 8;
          goto LABEL_197;
        case 2u:
          *((_DWORD *)this + 31) |= 0x80u;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v27);
          goto LABEL_196;
        case 3u:
          *((_DWORD *)this + 31) |= 0x4000u;
          unint64_t v28 = *((void *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v28);
          goto LABEL_196;
        case 4u:
          *((_DWORD *)this + 31) |= 4u;
          unint64_t v29 = *((void *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v29);
          goto LABEL_196;
        case 5u:
          *((_DWORD *)this + 31) |= 0x20u;
          unint64_t v30 = *((void *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v30);
          goto LABEL_196;
        case 6u:
          if (v24 != 2)
          {
            char v92 = (char *)*((void *)this + 2);
            unint64_t v91 = *((void *)this + 3);
            if ((unint64_t)v92 >= v91)
            {
              char v104 = (char *)*v10;
              uint64_t v105 = (v92 - (unsigned char *)*v10) >> 2;
              unint64_t v106 = v105 + 1;
              if ((unint64_t)(v105 + 1) >> 62) {
LABEL_208:
              }
                sub_10000EE98();
              uint64_t v107 = v91 - (void)v104;
              if (v107 >> 1 > v106) {
                unint64_t v106 = v107 >> 1;
              }
              if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v108 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v108 = v106;
              }
              if (v108)
              {
                unint64_t v109 = (char *)sub_100024458((uint64_t)v11, v108);
                char v104 = (char *)*((void *)this + 1);
                char v92 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v109 = 0;
              }
              unint64_t v116 = &v109[4 * v105];
              *(_DWORD *)unint64_t v116 = 0;
              char v93 = v116 + 4;
              while (v92 != v104)
              {
                int v117 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *((_DWORD *)v116 - 1) = v117;
                v116 -= 4;
              }
              *((void *)this + 1) = v116;
              *((void *)this + 2) = v93;
              *((void *)this + 3) = &v109[4 * v108];
              if (v104) {
                operator delete(v104);
              }
            }
            else
            {
              *(_DWORD *)char v92 = 0;
              char v93 = v92 + 4;
            }
            *((void *)this + 2) = v93;
            goto LABEL_192;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v31 = *((void *)a2 + 1);
          unint64_t v32 = *((void *)a2 + 2);
          while (v31 < v32 && !*((unsigned char *)a2 + 24))
          {
            char v34 = (char *)*((void *)this + 2);
            unint64_t v33 = *((void *)this + 3);
            if ((unint64_t)v34 >= v33)
            {
              unint64_t v36 = (char *)*v10;
              uint64_t v37 = (v34 - (unsigned char *)*v10) >> 2;
              unint64_t v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62) {
                goto LABEL_208;
              }
              uint64_t v39 = v33 - (void)v36;
              if (v39 >> 1 > v38) {
                unint64_t v38 = v39 >> 1;
              }
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v38;
              }
              if (v40)
              {
                char v41 = (char *)sub_100024458((uint64_t)v11, v40);
                unint64_t v36 = (char *)*((void *)this + 1);
                char v34 = (char *)*((void *)this + 2);
              }
              else
              {
                char v41 = 0;
              }
              unint64_t v42 = &v41[4 * v37];
              *(_DWORD *)unint64_t v42 = 0;
              unsigned int v35 = v42 + 4;
              while (v34 != v36)
              {
                int v43 = *((_DWORD *)v34 - 1);
                v34 -= 4;
                *((_DWORD *)v42 - 1) = v43;
                v42 -= 4;
              }
              *((void *)this + 1) = v42;
              *((void *)this + 2) = v35;
              *((void *)this + 3) = &v41[4 * v40];
              if (v36) {
                operator delete(v36);
              }
            }
            else
            {
              *(_DWORD *)char v34 = 0;
              unsigned int v35 = v34 + 4;
            }
            *((void *)this + 2) = v35;
            unint64_t v44 = *((void *)a2 + 1);
            if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)a2 + 2)) {
              goto LABEL_152;
            }
            *(v35 - 1) = *(_DWORD *)(*(void *)a2 + v44);
            unint64_t v32 = *((void *)a2 + 2);
            unint64_t v31 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v31;
          }
          goto LABEL_153;
        case 7u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v45 = *((void *)a2 + 1);
            unint64_t v46 = *((void *)a2 + 2);
            while (v45 < v46 && !*((unsigned char *)a2 + 24))
            {
              char v48 = (char *)*((void *)this + 5);
              unint64_t v47 = *((void *)this + 6);
              if ((unint64_t)v48 >= v47)
              {
                unint64_t v50 = (char *)*v8;
                uint64_t v51 = (v48 - (unsigned char *)*v8) >> 2;
                unint64_t v52 = v51 + 1;
                if ((unint64_t)(v51 + 1) >> 62) {
                  goto LABEL_209;
                }
                uint64_t v53 = v47 - (void)v50;
                if (v53 >> 1 > v52) {
                  unint64_t v52 = v53 >> 1;
                }
                if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v54 = v52;
                }
                if (v54)
                {
                  int v55 = (char *)sub_100024458((uint64_t)v9, v54);
                  unint64_t v50 = (char *)*((void *)this + 4);
                  char v48 = (char *)*((void *)this + 5);
                }
                else
                {
                  int v55 = 0;
                }
                BOOL v56 = &v55[4 * v51];
                *(_DWORD *)BOOL v56 = 0;
                unsigned int v49 = v56 + 4;
                while (v48 != v50)
                {
                  int v57 = *((_DWORD *)v48 - 1);
                  v48 -= 4;
                  *((_DWORD *)v56 - 1) = v57;
                  v56 -= 4;
                }
                *((void *)this + 4) = v56;
                *((void *)this + 5) = v49;
                *((void *)this + 6) = &v55[4 * v54];
                if (v50) {
                  operator delete(v50);
                }
              }
              else
              {
                *(_DWORD *)char v48 = 0;
                unsigned int v49 = v48 + 4;
              }
              *((void *)this + 5) = v49;
              unint64_t v58 = *((void *)a2 + 1);
              if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((void *)a2 + 2))
              {
LABEL_152:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v49 - 1) = *(_DWORD *)(*(void *)a2 + v58);
              unint64_t v46 = *((void *)a2 + 2);
              unint64_t v45 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v45;
            }
LABEL_153:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v95 = (char *)*((void *)this + 5);
            unint64_t v94 = *((void *)this + 6);
            if ((unint64_t)v95 >= v94)
            {
              char v110 = (char *)*v8;
              uint64_t v111 = (v95 - (unsigned char *)*v8) >> 2;
              unint64_t v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62) {
LABEL_209:
              }
                sub_10000EE98();
              uint64_t v113 = v94 - (void)v110;
              if (v113 >> 1 > v112) {
                unint64_t v112 = v113 >> 1;
              }
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v112;
              }
              if (v114)
              {
                unint64_t v115 = (char *)sub_100024458((uint64_t)v9, v114);
                char v110 = (char *)*((void *)this + 4);
                unint64_t v95 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v115 = 0;
              }
              BOOL v118 = &v115[4 * v111];
              *(_DWORD *)BOOL v118 = 0;
              char v93 = v118 + 4;
              while (v95 != v110)
              {
                int v119 = *((_DWORD *)v95 - 1);
                v95 -= 4;
                *((_DWORD *)v118 - 1) = v119;
                v118 -= 4;
              }
              *((void *)this + 4) = v118;
              *((void *)this + 5) = v93;
              *((void *)this + 6) = &v115[4 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v95 = 0;
              char v93 = v95 + 4;
            }
            *((void *)this + 5) = v93;
LABEL_192:
            unint64_t v120 = *((void *)a2 + 1);
            if (v120 <= 0xFFFFFFFFFFFFFFFBLL && v120 + 4 <= *((void *)a2 + 2))
            {
              *(v93 - 1) = *(_DWORD *)(*(void *)a2 + v120);
LABEL_196:
              uint64_t v26 = *((void *)a2 + 1) + 4;
LABEL_197:
              *((void *)a2 + 1) = v26;
            }
            else
            {
LABEL_194:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_198:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 8u:
          *((_DWORD *)this + 31) |= 0x800u;
          unint64_t v59 = *((void *)a2 + 1);
          if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v59);
          goto LABEL_196;
        case 9u:
          *((_DWORD *)this + 31) |= 0x100u;
          unint64_t v60 = *((void *)a2 + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v60);
          goto LABEL_196;
        case 0xAu:
          *((_DWORD *)this + 31) |= 2u;
          unint64_t v61 = *((void *)a2 + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v61);
          goto LABEL_196;
        case 0xBu:
          *((_DWORD *)this + 31) |= 0x10u;
          unint64_t v62 = *((void *)a2 + 1);
          unint64_t v63 = *((void *)a2 + 2);
          uint64_t v64 = *(void *)a2;
          if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
          {
            char v65 = 0;
            unsigned int v66 = 0;
            uint64_t v67 = 0;
            do
            {
              unint64_t v68 = v62 + 1;
              *((void *)a2 + 1) = v62 + 1;
              char v69 = *(unsigned char *)(v64 + v62);
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0) {
                goto LABEL_174;
              }
              v65 += 7;
              unint64_t v62 = v68;
              BOOL v18 = v66++ > 8;
            }
            while (!v18);
LABEL_140:
            LODWORD(v67) = 0;
            goto LABEL_174;
          }
          char v96 = 0;
          unsigned int v97 = 0;
          uint64_t v67 = 0;
          if (v63 <= v62) {
            unint64_t v63 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v63 == v62)
            {
              LODWORD(v67) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v98 = v62 + 1;
              char v99 = *(unsigned char *)(v64 + v62);
              *((void *)a2 + 1) = v98;
              v67 |= (unint64_t)(v99 & 0x7F) << v96;
              if (v99 < 0)
              {
                v96 += 7;
                unint64_t v62 = v98;
                BOOL v18 = v97++ > 8;
                if (v18) {
                  goto LABEL_140;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v67) = 0;
              }
            }
            break;
          }
LABEL_174:
          *((_DWORD *)this + 19) = v67;
          goto LABEL_198;
        case 0xCu:
          *((_DWORD *)this + 31) |= 8u;
          unint64_t v70 = *((void *)a2 + 1);
          unint64_t v71 = *((void *)a2 + 2);
          uint64_t v72 = *(void *)a2;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            char v73 = 0;
            unsigned int v74 = 0;
            uint64_t v75 = 0;
            do
            {
              unint64_t v76 = v70 + 1;
              *((void *)a2 + 1) = v70 + 1;
              char v77 = *(unsigned char *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0) {
                goto LABEL_177;
              }
              v73 += 7;
              unint64_t v70 = v76;
              BOOL v18 = v74++ > 8;
            }
            while (!v18);
LABEL_147:
            LODWORD(v75) = 0;
            goto LABEL_177;
          }
          char v100 = 0;
          unsigned int v101 = 0;
          uint64_t v75 = 0;
          if (v71 <= v70) {
            unint64_t v71 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v71 == v70)
            {
              LODWORD(v75) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v102 = v70 + 1;
              char v103 = *(unsigned char *)(v72 + v70);
              *((void *)a2 + 1) = v102;
              v75 |= (unint64_t)(v103 & 0x7F) << v100;
              if (v103 < 0)
              {
                v100 += 7;
                unint64_t v70 = v102;
                BOOL v18 = v101++ > 8;
                if (v18) {
                  goto LABEL_147;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v75) = 0;
              }
            }
            break;
          }
LABEL_177:
          *((_DWORD *)this + 18) = v75;
          goto LABEL_198;
        case 0xDu:
          *((_DWORD *)this + 31) |= 0x400u;
          unint64_t v78 = *((void *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v78);
          goto LABEL_196;
        case 0xEu:
          *((_DWORD *)this + 31) |= 0x10000u;
          unint64_t v79 = *((void *)a2 + 1);
          if (v79 >= *((void *)a2 + 2))
          {
            BOOL v82 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v80 = v79 + 1;
            int v81 = *(unsigned __int8 *)(*(void *)a2 + v79);
            *((void *)a2 + 1) = v80;
            BOOL v82 = v81 != 0;
          }
          *((unsigned char *)this + 121) = v82;
          goto LABEL_198;
        case 0xFu:
          *((_DWORD *)this + 31) |= 0x8000u;
          unint64_t v83 = *((void *)a2 + 1);
          if (v83 >= *((void *)a2 + 2))
          {
            BOOL v86 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v84 = v83 + 1;
            int v85 = *(unsigned __int8 *)(*(void *)a2 + v83);
            *((void *)a2 + 1) = v84;
            BOOL v86 = v85 != 0;
          }
          *((unsigned char *)this + 120) = v86;
          goto LABEL_198;
        case 0x10u:
          *((_DWORD *)this + 31) |= 0x200u;
          unint64_t v87 = *((void *)a2 + 1);
          if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v87);
          goto LABEL_196;
        case 0x11u:
          *((_DWORD *)this + 31) |= 0x1000u;
          unint64_t v88 = *((void *)a2 + 1);
          if (v88 > 0xFFFFFFFFFFFFFFFBLL || v88 + 4 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v88);
          goto LABEL_196;
        case 0x12u:
          *((_DWORD *)this + 31) |= 0x40u;
          unint64_t v89 = *((void *)a2 + 1);
          if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v89);
          goto LABEL_196;
        case 0x13u:
          *((_DWORD *)this + 31) |= 0x2000u;
          unint64_t v90 = *((void *)a2 + 1);
          if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((void *)a2 + 2)) {
            goto LABEL_194;
          }
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v90);
          goto LABEL_196;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_198;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 124);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    int v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 2u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_29:
    this = PB::Writer::write(a2, *(float *)(v3 + 68), 4u);
    if ((*(_DWORD *)(v3 + 124) & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 3u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) != 0) {
    goto LABEL_29;
  }
LABEL_5:
  if ((v4 & 0x20) != 0) {
LABEL_6:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 80), 5u);
LABEL_7:
  uint64_t v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 6u);
  }
  int v8 = *(float **)(v3 + 32);
  uint64_t v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10, 7u);
  }
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 104), 8u);
    int v11 = *(_DWORD *)(v3 + 124);
    if ((v11 & 0x100) == 0)
    {
LABEL_15:
      if ((v11 & 2) == 0) {
        goto LABEL_16;
      }
      goto LABEL_33;
    }
  }
  else if ((v11 & 0x100) == 0)
  {
    goto LABEL_15;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 9u);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 2) == 0)
  {
LABEL_16:
    if ((v11 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xAu);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10) == 0)
  {
LABEL_17:
    if ((v11 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0xBu);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 8) == 0)
  {
LABEL_18:
    if ((v11 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0xCu);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x400) == 0)
  {
LABEL_19:
    if ((v11 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xDu);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10000) == 0)
  {
LABEL_20:
    if ((v11 & 0x8000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 121), 0xEu);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x8000) == 0)
  {
LABEL_21:
    if ((v11 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 120), 0xFu);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x200) == 0)
  {
LABEL_22:
    if ((v11 & 0x1000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x10u);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x1000) == 0)
  {
LABEL_23:
    if ((v11 & 0x40) == 0) {
      goto LABEL_24;
    }
LABEL_41:
    this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x12u);
    if ((*(_DWORD *)(v3 + 124) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_42;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x11u);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x40) != 0) {
    goto LABEL_41;
  }
LABEL_24:
  if ((v11 & 0x2000) == 0) {
    return this;
  }
LABEL_42:
  float v12 = *(float *)(v3 + 112);

  return PB::Writer::write(a2, v12, 0x13u);
}

BOOL CMMsl::CompassConstraints::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 124);
  int v3 = *(_DWORD *)(a2 + 124);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  uint64_t v5 = *(float **)(a1 + 8);
  int v4 = *(float **)(a1 + 16);
  uint64_t v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 16) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  int v8 = *(float **)(a1 + 32);
  float v7 = *(float **)(a1 + 40);
  uint64_t v9 = *(float **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 40) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 121) != *(unsigned __int8 *)(a2 + 121)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  BOOL v10 = (*(_DWORD *)(a2 + 124) & 0x2000) == 0;
  if ((v2 & 0x2000) != 0) {
    return (v3 & 0x2000) != 0 && *(float *)(a1 + 112) == *(float *)(a2 + 112);
  }
  return v10;
}

uint64_t CMMsl::CompassConstraints::hash_value(CMMsl::CompassConstraints *this)
{
  int v2 = *((_DWORD *)this + 31);
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_22:
    uint64_t v5 = 0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_7;
    }
LABEL_23:
    uint64_t v7 = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
  if (*((double *)this + 7) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 7);
  }
  if ((v2 & 0x80) == 0) {
    goto LABEL_22;
  }
LABEL_3:
  float v4 = *((float *)this + 22);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = LODWORD(v4);
  }
  if ((v2 & 0x4000) == 0) {
    goto LABEL_23;
  }
LABEL_7:
  float v6 = *((float *)this + 29);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = LODWORD(v6);
  }
  if ((v2 & 4) != 0)
  {
LABEL_11:
    float v8 = *((float *)this + 17);
    if (v8 == 0.0) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = LODWORD(v8);
    }
    if ((v2 & 0x20) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v11 = 0;
    goto LABEL_26;
  }
LABEL_24:
  uint64_t v9 = 0;
  if ((v2 & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  float v10 = *((float *)this + 20);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = LODWORD(v10);
  }
LABEL_26:
  uint64_t v12 = PBHashBytes();
  uint64_t v13 = PBHashBytes();
  int v14 = *((_DWORD *)this + 31);
  if ((v14 & 0x800) == 0)
  {
    uint64_t v15 = 0;
    if ((v14 & 0x100) != 0) {
      goto LABEL_28;
    }
LABEL_56:
    uint64_t v17 = 0;
    if ((v14 & 2) != 0) {
      goto LABEL_31;
    }
LABEL_57:
    uint64_t v19 = 0;
    if ((v14 & 0x10) != 0) {
      goto LABEL_34;
    }
    goto LABEL_58;
  }
  float v34 = *((float *)this + 26);
  uint64_t v15 = LODWORD(v34);
  if (v34 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((v14 & 0x100) == 0) {
    goto LABEL_56;
  }
LABEL_28:
  float v16 = *((float *)this + 23);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  if ((v14 & 2) == 0) {
    goto LABEL_57;
  }
LABEL_31:
  float v18 = *((float *)this + 16);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  if ((v14 & 0x10) != 0)
  {
LABEL_34:
    uint64_t v20 = *((unsigned int *)this + 19);
    if ((v14 & 8) != 0) {
      goto LABEL_35;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v20 = 0;
  if ((v14 & 8) != 0)
  {
LABEL_35:
    uint64_t v21 = *((unsigned int *)this + 18);
    if ((v14 & 0x400) != 0) {
      goto LABEL_36;
    }
LABEL_60:
    uint64_t v23 = 0;
    if ((v14 & 0x10000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_61;
  }
LABEL_59:
  uint64_t v21 = 0;
  if ((v14 & 0x400) == 0) {
    goto LABEL_60;
  }
LABEL_36:
  float v22 = *((float *)this + 25);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v14 & 0x10000) != 0)
  {
LABEL_39:
    uint64_t v24 = *((unsigned __int8 *)this + 121);
    if ((v14 & 0x8000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v24 = 0;
  if ((v14 & 0x8000) != 0)
  {
LABEL_40:
    uint64_t v25 = *((unsigned __int8 *)this + 120);
    if ((v14 & 0x200) != 0) {
      goto LABEL_41;
    }
LABEL_63:
    uint64_t v27 = 0;
    if ((v14 & 0x1000) != 0) {
      goto LABEL_44;
    }
LABEL_64:
    uint64_t v29 = 0;
    if ((v14 & 0x40) != 0) {
      goto LABEL_47;
    }
    goto LABEL_65;
  }
LABEL_62:
  uint64_t v25 = 0;
  if ((v14 & 0x200) == 0) {
    goto LABEL_63;
  }
LABEL_41:
  float v26 = *((float *)this + 24);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v14 & 0x1000) == 0) {
    goto LABEL_64;
  }
LABEL_44:
  float v28 = *((float *)this + 27);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v14 & 0x40) != 0)
  {
LABEL_47:
    float v30 = *((float *)this + 21);
    uint64_t v31 = LODWORD(v30);
    if (v30 == 0.0) {
      uint64_t v31 = 0;
    }
    if ((v14 & 0x2000) != 0) {
      goto LABEL_50;
    }
LABEL_66:
    uint64_t v33 = 0;
    return v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v21 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33;
  }
LABEL_65:
  uint64_t v31 = 0;
  if ((v14 & 0x2000) == 0) {
    goto LABEL_66;
  }
LABEL_50:
  float v32 = *((float *)this + 28);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  return v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v21 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33;
}

void *CMMsl::CompassCorrection::CompassCorrection(void *this)
{
  *this = off_1003A5168;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A5168;
  this[1] = 0;
  return this;
}

void CMMsl::CompassCorrection::~CompassCorrection(CMMsl::CompassCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A5168;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::CompassCorrection::~CompassCorrection(this);

  operator delete();
}

void *CMMsl::CompassCorrection::CompassCorrection(void *this, const CMMsl::CompassCorrection *a2)
{
  *this = off_1003A5168;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::CompassCorrection *CMMsl::CompassCorrection::operator=(const CMMsl::CompassCorrection *a1, const CMMsl::CompassCorrection *a2)
{
  if (a1 != a2)
  {
    CMMsl::CompassCorrection::CompassCorrection(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::CompassCorrection::~CompassCorrection((CMMsl::CompassCorrection *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::CompassCorrection *a2, CMMsl::CompassCorrection *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::CompassCorrection::CompassCorrection(void *a1, uint64_t a2)
{
  *a1 = off_1003A5168;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A5168;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::CompassCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A5168;
    v6[1] = v4;
    CMMsl::CompassCorrection::~CompassCorrection((CMMsl::CompassCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::CompassCorrection::formatText(CMMsl::CompassCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CompassCorrection::readFrom(CMMsl::CompassCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::CompassCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  }
  return result;
}

CMMsl::DeviceMotionCorrection *CMMsl::CompassCorrection::hash_value(CMMsl::CompassCorrection *this)
{
  BOOL result = (CMMsl::DeviceMotionCorrection *)*((void *)this + 1);
  if (result) {
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::CompassCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::ComplexHandMotion::ComplexHandMotion(uint64_t this)
{
  *(void *)this = off_1003A51A0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A51A0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::ComplexHandMotion::~ComplexHandMotion(CMMsl::ComplexHandMotion *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::ComplexHandMotion::ComplexHandMotion(uint64_t this, const CMMsl::ComplexHandMotion *a2)
{
  *(void *)this = off_1003A51A0;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 28) = v3;
    *(void *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 4) == 0) {
      return this;
    }
LABEL_10:
    char v7 = *((unsigned char *)a2 + 24);
    *(unsigned char *)(this + 28) = v3 | 4;
    *(unsigned char *)(this + 24) = v7;
    return this;
  }
  char v6 = *((unsigned char *)a2 + 25);
  v3 |= 8u;
  *(unsigned char *)(this + 28) = v3;
  *(unsigned char *)(this + 25) = v6;
  if ((*((unsigned char *)a2 + 28) & 4) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::ComplexHandMotion::operator=(uint64_t a1, const CMMsl::ComplexHandMotion *a2)
{
  if ((const CMMsl::ComplexHandMotion *)a1 != a2)
  {
    CMMsl::ComplexHandMotion::ComplexHandMotion((uint64_t)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v9;
    int v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    LOWORD(v3) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v8;
    __int16 v8 = v3;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::ComplexHandMotion *a2, CMMsl::ComplexHandMotion *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v3) = *((unsigned char *)this + 25);
  *((unsigned char *)this + 25) = *((unsigned char *)a2 + 25);
  *((unsigned char *)a2 + 25) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 24);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)a2 + 24) = v3;
  return result;
}

double CMMsl::ComplexHandMotion::ComplexHandMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A51A0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A51A0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

uint64_t CMMsl::ComplexHandMotion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    __int16 v8 = off_1003A51A0;
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    __int16 v4 = *(_WORD *)(a2 + 24);
    int v11 = *(_DWORD *)(a1 + 28);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    LOWORD(v3) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v4;
    __int16 v10 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::ComplexHandMotion::formatText(CMMsl::ComplexHandMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "finalDecision", *((unsigned char *)this + 24));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "instantDecision", *((unsigned char *)this + 25));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timeStart", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timeStop", *((double *)this + 2));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ComplexHandMotion::readFrom(CMMsl::ComplexHandMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 28) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_29;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_39;
            case 2u:
              *((unsigned char *)this + 28) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_39:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_29:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_40;
            case 3u:
              *((unsigned char *)this + 28) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 25) = v22;
              goto LABEL_40;
            case 4u:
              *((unsigned char *)this + 28) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *((unsigned char *)this + 24) = v24;
              goto LABEL_40;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
LABEL_40:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ComplexHandMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(unsigned char *)(v3 + 25), 3u);
      if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_9:
  char v5 = *(unsigned char *)(v3 + 24);

  return PB::Writer::write(a2, v5, 4u);
}

BOOL CMMsl::ComplexHandMotion::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::ComplexHandMotion::hash_value(CMMsl::ComplexHandMotion *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_11:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v4 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ v3 ^ v4;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v3 = *((unsigned __int8 *)this + 25);
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v4 = *((unsigned __int8 *)this + 24);
  return *(void *)&v2 ^ *(void *)&v1 ^ v3 ^ v4;
}

void *CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(void *this)
{
  *this = off_1003A51D8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A51D8;
  this[1] = 0;
  return this;
}

void CMMsl::ConstrainedIntegratorModelPredictedPose::~ConstrainedIntegratorModelPredictedPose(CMMsl::ConstrainedIntegratorModelPredictedPose *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A51D8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ConstrainedIntegratorModelPredictedPose::~ConstrainedIntegratorModelPredictedPose(this);

  operator delete();
}

void *CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(void *this, const CMMsl::ConstrainedIntegratorModelPredictedPose *a2)
{
  *this = off_1003A51D8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::ConstrainedIntegratorModelPredictedPose *CMMsl::ConstrainedIntegratorModelPredictedPose::operator=(const CMMsl::ConstrainedIntegratorModelPredictedPose *a1, const CMMsl::ConstrainedIntegratorModelPredictedPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::ConstrainedIntegratorModelPredictedPose::~ConstrainedIntegratorModelPredictedPose((CMMsl::ConstrainedIntegratorModelPredictedPose *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ConstrainedIntegratorModelPredictedPose *a2, CMMsl::ConstrainedIntegratorModelPredictedPose *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(void *a1, uint64_t a2)
{
  *a1 = off_1003A51D8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A51D8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A51D8;
    v6[1] = v4;
    CMMsl::ConstrainedIntegratorModelPredictedPose::~ConstrainedIntegratorModelPredictedPose((CMMsl::ConstrainedIntegratorModelPredictedPose *)v6);
  }
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::formatText(CMMsl::ConstrainedIntegratorModelPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::readFrom(CMMsl::ConstrainedIntegratorModelPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::ConstrainedIntegratorModelPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BioMotionPredictedPose::operator==(v2, v3);
  }
  return result;
}

CMMsl::BioMotionPredictedPose *CMMsl::ConstrainedIntegratorModelPredictedPose::hash_value(CMMsl::ConstrainedIntegratorModelPredictedPose *this)
{
  BOOL result = (CMMsl::BioMotionPredictedPose *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionPredictedPose *)CMMsl::BioMotionPredictedPose::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(void *this)
{
  *this = off_1003A5210;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A5210;
  this[1] = 0;
  return this;
}

void CMMsl::ConstrainedIntegratorPose::~ConstrainedIntegratorPose(CMMsl::ConstrainedIntegratorPose *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A5210;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ConstrainedIntegratorPose::~ConstrainedIntegratorPose(this);

  operator delete();
}

void *CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(void *this, const CMMsl::ConstrainedIntegratorPose *a2)
{
  *this = off_1003A5210;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::ConstrainedIntegratorPose *CMMsl::ConstrainedIntegratorPose::operator=(const CMMsl::ConstrainedIntegratorPose *a1, const CMMsl::ConstrainedIntegratorPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::ConstrainedIntegratorPose::~ConstrainedIntegratorPose((CMMsl::ConstrainedIntegratorPose *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ConstrainedIntegratorPose *a2, CMMsl::ConstrainedIntegratorPose *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(void *a1, uint64_t a2)
{
  *a1 = off_1003A5210;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A5210;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A5210;
    v6[1] = v4;
    CMMsl::ConstrainedIntegratorPose::~ConstrainedIntegratorPose((CMMsl::ConstrainedIntegratorPose *)v6);
  }
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorPose::formatText(CMMsl::ConstrainedIntegratorPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ConstrainedIntegratorPose::readFrom(CMMsl::ConstrainedIntegratorPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ConstrainedIntegratorPose::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::ConstrainedIntegratorPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BioMotionPose::operator==(v2, v3);
  }
  return result;
}

CMMsl::BioMotionPose *CMMsl::ConstrainedIntegratorPose::hash_value(CMMsl::ConstrainedIntegratorPose *this)
{
  BOOL result = (CMMsl::BioMotionPose *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionPose *)CMMsl::BioMotionPose::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::ConstrainedIntegratorPose::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(uint64_t this)
{
  *(void *)this = off_1003A5248;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(void *)this = off_1003A5248;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

void CMMsl::CoprocessorReplyGaitMetrics::~CoprocessorReplyGaitMetrics(CMMsl::CoprocessorReplyGaitMetrics *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(CMMsl::CoprocessorReplyGaitMetrics *this, const CMMsl::CoprocessorReplyGaitMetrics *a2)
{
  *(void *)this = off_1003A5248;
  *((_DWORD *)this + 23) = 0;
  int v2 = *((_DWORD *)a2 + 23);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 23) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x80000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 22);
    v3 |= 0x80000u;
    *((_DWORD *)this + 23) = v3;
    *((float *)this + 22) = result;
    int v2 = *((_DWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    float result = *((float *)a2 + 7);
    v3 |= 0x10u;
    *((_DWORD *)this + 23) = v3;
    *((float *)this + 7) = result;
    int v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_27;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 18) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v6 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 8) = v6;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v7 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 6) = v7;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v8 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 14) = v8;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 11) = v9;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v10 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 10) = v10;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 12) = v11;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  float result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  float result = *((float *)a2 + 4);
  v3 |= 2u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v12 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 13) = v12;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 9) = v13;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x1000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_38;
  }
LABEL_37:
  float result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_39;
  }
LABEL_38:
  float result = *((float *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x4000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_40;
  }
LABEL_39:
  float result = *((float *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 17) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x10000) == 0)
  {
LABEL_22:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_41;
  }
LABEL_40:
  float result = *((float *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40000) == 0) {
      return result;
    }
LABEL_42:
    float result = *((float *)a2 + 21);
    *((_DWORD *)this + 23) = v3 | 0x40000;
    *((float *)this + 21) = result;
    return result;
  }
LABEL_41:
  float result = *((float *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 20) = result;
  if ((*((_DWORD *)a2 + 23) & 0x40000) != 0) {
    goto LABEL_42;
  }
  return result;
}

CMMsl *CMMsl::CoprocessorReplyGaitMetrics::operator=(CMMsl *a1, const CMMsl::CoprocessorReplyGaitMetrics *a2)
{
  if (a1 != a2)
  {
    CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics((CMMsl::CoprocessorReplyGaitMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CoprocessorReplyGaitMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CoprocessorReplyGaitMetrics *a2, CMMsl::CoprocessorReplyGaitMetrics *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v5;
  int v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v7;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  int v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  int v9 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v9;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  int v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  int v11 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v11;
  int v12 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v12;
  int v13 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  int v14 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  float result = *((float *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((float *)a2 + 21) = result;
  return result;
}

float CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5248;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  float result = *(float *)(a2 + 84);
  *(float *)(a1 + 84) = result;
  return result;
}

CMMsl *CMMsl::CoprocessorReplyGaitMetrics::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CoprocessorReplyGaitMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::formatText(CMMsl::CoprocessorReplyGaitMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryProbabilityEstimate", *((float *)this + 4));
    int v5 = *((_DWORD *)this + 23);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cycleTime", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "deviceSide", *((_DWORD *)this + 6));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "doubleSupportEstimate", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "gaitPhase", *((_DWORD *)this + 8));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsCadenceConcordant", *((_DWORD *)this + 9));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsFeasibleWalkingSpeed", *((_DWORD *)this + 10));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsNotRunning", *((_DWORD *)this + 11));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsPendular", *((_DWORD *)this + 12));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSufficientVerticalTwist", *((_DWORD *)this + 13));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSwingStanceCycle", *((_DWORD *)this + 14));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityAP", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityML", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityVT", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "stepLengthEstimate", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityAP", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityML", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityVT", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 1) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  if ((*((_DWORD *)this + 23) & 0x80000) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(a2, "walkSpeedEstimate", *((float *)this + 22));
LABEL_22:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::readFrom(CMMsl::CoprocessorReplyGaitMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 23) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_189;
                  }
                  unint64_t v77 = v20++;
                  char v78 = *(unsigned char *)(v21 + v77);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_188;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_188:
                unint64_t v2 = v77 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_189;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_189:
              *((void *)this + 1) = v24;
              goto LABEL_230;
            case 2u:
              *((_DWORD *)this + 23) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_119;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_184;
            case 3u:
              *((_DWORD *)this + 23) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_119;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_184;
            case 4u:
              *((_DWORD *)this + 23) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_119;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_184;
            case 5u:
              *((_DWORD *)this + 23) |= 0x20u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_194;
                  }
                  unint64_t v81 = v27++;
                  char v82 = *(unsigned char *)(v28 + v81);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_193:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_194;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_193;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_194;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_194:
              *((_DWORD *)this + 8) = v31;
              goto LABEL_230;
            case 6u:
              *((_DWORD *)this + 23) |= 8u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_199;
                  }
                  unint64_t v85 = v33++;
                  char v86 = *(unsigned char *)(v34 + v85);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_198:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_199;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_198;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_199;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_199:
              *((_DWORD *)this + 6) = v37;
              goto LABEL_230;
            case 7u:
              *((_DWORD *)this + 23) |= 0x800u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v87 = 0;
                unsigned int v88 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_204;
                  }
                  unint64_t v89 = v39++;
                  char v90 = *(unsigned char *)(v40 + v89);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  BOOL v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_203:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_204;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_203;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_204;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_204:
              *((_DWORD *)this + 14) = v43;
              goto LABEL_230;
            case 8u:
              *((_DWORD *)this + 23) |= 0x100u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v91 = 0;
                unsigned int v92 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_209;
                  }
                  unint64_t v93 = v45++;
                  char v94 = *(unsigned char *)(v46 + v93);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  BOOL v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_208:
                    unint64_t v2 = v93 + 1;
                    goto LABEL_209;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_208;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_209;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_209:
              *((_DWORD *)this + 11) = v49;
              goto LABEL_230;
            case 9u:
              *((_DWORD *)this + 23) |= 0x80u;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v95 = 0;
                unsigned int v96 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_214;
                  }
                  unint64_t v97 = v51++;
                  char v98 = *(unsigned char *)(v52 + v97);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  BOOL v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_213:
                    unint64_t v2 = v97 + 1;
                    goto LABEL_214;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_213;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_214;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_214:
              *((_DWORD *)this + 10) = v55;
              goto LABEL_230;
            case 0xAu:
              *((_DWORD *)this + 23) |= 0x200u;
              unint64_t v57 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v58 = *(void *)a2;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                char v99 = 0;
                unsigned int v100 = 0;
                uint64_t v61 = 0;
                if (v2 <= v57) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_219;
                  }
                  unint64_t v101 = v57++;
                  char v102 = *(unsigned char *)(v58 + v101);
                  *((void *)a2 + 1) = v57;
                  v61 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0) {
                    break;
                  }
                  v99 += 7;
                  BOOL v14 = v100++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_218:
                    unint64_t v2 = v101 + 1;
                    goto LABEL_219;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v61) = 0;
                }
                goto LABEL_218;
              }
              char v59 = 0;
              unsigned int v60 = 0;
              uint64_t v61 = 0;
              do
              {
                unint64_t v2 = v57 + 1;
                *((void *)a2 + 1) = v57 + 1;
                char v62 = *(unsigned char *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_219;
                }
                v59 += 7;
                unint64_t v57 = v2;
                BOOL v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_219:
              *((_DWORD *)this + 12) = v61;
              goto LABEL_230;
            case 0xBu:
              *((_DWORD *)this + 23) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_119;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_184;
            case 0xCu:
              *((_DWORD *)this + 23) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_119;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_184;
            case 0xDu:
              *((_DWORD *)this + 23) |= 0x400u;
              unint64_t v63 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v64 = *(void *)a2;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                char v103 = 0;
                unsigned int v104 = 0;
                uint64_t v67 = 0;
                if (v2 <= v63) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_224;
                  }
                  unint64_t v105 = v63++;
                  char v106 = *(unsigned char *)(v64 + v105);
                  *((void *)a2 + 1) = v63;
                  v67 |= (unint64_t)(v106 & 0x7F) << v103;
                  if ((v106 & 0x80) == 0) {
                    break;
                  }
                  v103 += 7;
                  BOOL v14 = v104++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_223:
                    unint64_t v2 = v105 + 1;
                    goto LABEL_224;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v67) = 0;
                }
                goto LABEL_223;
              }
              char v65 = 0;
              unsigned int v66 = 0;
              uint64_t v67 = 0;
              do
              {
                unint64_t v2 = v63 + 1;
                *((void *)a2 + 1) = v63 + 1;
                char v68 = *(unsigned char *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0) {
                  goto LABEL_224;
                }
                v65 += 7;
                unint64_t v63 = v2;
                BOOL v14 = v66++ > 8;
              }
              while (!v14);
              LODWORD(v67) = 0;
LABEL_224:
              *((_DWORD *)this + 13) = v67;
              goto LABEL_230;
            case 0xEu:
              *((_DWORD *)this + 23) |= 0x40u;
              unint64_t v69 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v70 = *(void *)a2;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                char v107 = 0;
                unsigned int v108 = 0;
                uint64_t v73 = 0;
                if (v2 <= v69) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_229;
                  }
                  unint64_t v109 = v69++;
                  char v110 = *(unsigned char *)(v70 + v109);
                  *((void *)a2 + 1) = v69;
                  v73 |= (unint64_t)(v110 & 0x7F) << v107;
                  if ((v110 & 0x80) == 0) {
                    break;
                  }
                  v107 += 7;
                  BOOL v14 = v108++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_228:
                    unint64_t v2 = v109 + 1;
                    goto LABEL_229;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v73) = 0;
                }
                goto LABEL_228;
              }
              char v71 = 0;
              unsigned int v72 = 0;
              uint64_t v73 = 0;
              do
              {
                unint64_t v2 = v69 + 1;
                *((void *)a2 + 1) = v69 + 1;
                char v74 = *(unsigned char *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0) {
                  goto LABEL_229;
                }
                v71 += 7;
                unint64_t v69 = v2;
                BOOL v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_229:
              *((_DWORD *)this + 9) = v73;
LABEL_230:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xFu:
              *((_DWORD *)this + 23) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_119;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_184;
            case 0x10u:
              *((_DWORD *)this + 23) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_119;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_184;
            case 0x11u:
              *((_DWORD *)this + 23) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_119;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_184;
            case 0x12u:
              *((_DWORD *)this + 23) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_119;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_184;
            case 0x13u:
              *((_DWORD *)this + 23) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_119;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_184;
            case 0x14u:
              *((_DWORD *)this + 23) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_184:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_119:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_230;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_230;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 92);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 2u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 4u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 5u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 6u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 7u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 8u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 9u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0xAu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0xBu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0xCu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 0xDu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 0xEu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xFu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x10u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x11u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_20;
    }
LABEL_40:
    this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x13u);
    if ((*(_DWORD *)(v3 + 92) & 0x40000) == 0) {
      return this;
    }
    goto LABEL_41;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x12u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) != 0) {
    goto LABEL_40;
  }
LABEL_20:
  if ((v4 & 0x40000) == 0) {
    return this;
  }
LABEL_41:
  float v5 = *(float *)(v3 + 84);

  return PB::Writer::write(a2, v5, 0x14u);
}

BOOL CMMsl::CoprocessorReplyGaitMetrics::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 92);
  int v3 = *(_DWORD *)(a2 + 92);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40000) == 0;
  if ((v2 & 0x40000) != 0) {
    return (v3 & 0x40000) != 0 && *(float *)(a1 + 84) == *(float *)(a2 + 84);
  }
  return v4;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::hash_value(CMMsl::CoprocessorReplyGaitMetrics *this)
{
  int v1 = *((_DWORD *)this + 23);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_3;
    }
LABEL_45:
    uint64_t v4 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_46:
    uint64_t v6 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_9;
    }
LABEL_47:
    uint64_t v8 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }
  uint64_t v2 = *((void *)this + 1);
  if ((v1 & 0x80000) == 0) {
    goto LABEL_45;
  }
LABEL_3:
  float v3 = *((float *)this + 22);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_46;
  }
LABEL_6:
  float v5 = *((float *)this + 7);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_47;
  }
LABEL_9:
  float v7 = *((float *)this + 18);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_12:
    uint64_t v9 = *((unsigned int *)this + 8);
    if ((v1 & 8) != 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v9 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_13:
    uint64_t v10 = *((unsigned int *)this + 6);
    if ((v1 & 0x800) != 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v10 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_14:
    uint64_t v11 = *((unsigned int *)this + 14);
    if ((v1 & 0x100) != 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v11 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_15:
    uint64_t v12 = *((unsigned int *)this + 11);
    if ((v1 & 0x80) != 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v12 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_16:
    uint64_t v13 = *((unsigned int *)this + 10);
    if ((v1 & 0x200) != 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v13 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_17:
    uint64_t v14 = *((unsigned int *)this + 12);
    if ((v1 & 4) != 0) {
      goto LABEL_18;
    }
LABEL_54:
    uint64_t v16 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_21;
    }
LABEL_55:
    uint64_t v18 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_53:
  uint64_t v14 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_54;
  }
LABEL_18:
  float v15 = *((float *)this + 5);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_55;
  }
LABEL_21:
  float v17 = *((float *)this + 4);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x400) != 0)
  {
LABEL_24:
    uint64_t v19 = *((unsigned int *)this + 13);
    if ((v1 & 0x40) != 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v19 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_25:
    uint64_t v20 = *((unsigned int *)this + 9);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_26;
    }
LABEL_58:
    uint64_t v22 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_29;
    }
LABEL_59:
    uint64_t v24 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_32;
    }
LABEL_60:
    uint64_t v26 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_35;
    }
LABEL_61:
    uint64_t v28 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_62;
  }
LABEL_57:
  uint64_t v20 = 0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_58;
  }
LABEL_26:
  float v21 = *((float *)this + 15);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_59;
  }
LABEL_29:
  float v23 = *((float *)this + 16);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_60;
  }
LABEL_32:
  float v25 = *((float *)this + 17);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_61;
  }
LABEL_35:
  float v27 = *((float *)this + 19);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x20000) != 0)
  {
LABEL_38:
    float v29 = *((float *)this + 20);
    uint64_t v30 = LODWORD(v29);
    if (v29 == 0.0) {
      uint64_t v30 = 0;
    }
    if ((v1 & 0x40000) != 0) {
      goto LABEL_41;
    }
LABEL_63:
    uint64_t v32 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32;
  }
LABEL_62:
  uint64_t v30 = 0;
  if ((v1 & 0x40000) == 0) {
    goto LABEL_63;
  }
LABEL_41:
  float v31 = *((float *)this + 21);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32;
}

uint64_t CMMsl::CourseConstraints::CourseConstraints(uint64_t this)
{
  *(void *)this = off_1003A5280;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A5280;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::CourseConstraints::~CourseConstraints(CMMsl::CourseConstraints *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::CourseConstraints::CourseConstraints(CMMsl::CourseConstraints *this, const CMMsl::CourseConstraints *a2)
{
  *(void *)this = off_1003A5280;
  *((_DWORD *)this + 5) = 0;
  if ((*((unsigned char *)a2 + 20) & 1) == 0)
  {
    char v2 = 2;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return *(float *)&v3;
    }
    goto LABEL_5;
  }
  uint64_t v3 = *((void *)a2 + 1);
  *((unsigned char *)this + 20) = 1;
  *((void *)this + 1) = v3;
  char v2 = 3;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((unsigned char *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

uint64_t CMMsl::CourseConstraints::operator=(uint64_t a1, const CMMsl::CourseConstraints *a2)
{
  if ((const CMMsl::CourseConstraints *)a1 != a2)
  {
    CMMsl::CourseConstraints::CourseConstraints((CMMsl::CourseConstraints *)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CourseConstraints *a2, CMMsl::CourseConstraints *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::CourseConstraints::CourseConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5280;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A5280;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::CourseConstraints::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A5280;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    int v10 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::CourseConstraints::formatText(CMMsl::CourseConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "yaw", *((float *)this + 4));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CourseConstraints::readFrom(CMMsl::CourseConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_28;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 4;
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_28:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
      }
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::CourseConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::CourseConstraints::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::CourseConstraints::hash_value(CMMsl::CourseConstraints *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v3 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ *(void *)&v1;
}

void *CMMsl::CourseCorrection::CourseCorrection(void *this)
{
  *this = off_1003A52B8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A52B8;
  this[1] = 0;
  return this;
}

void CMMsl::CourseCorrection::~CourseCorrection(CMMsl::CourseCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A52B8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::CourseCorrection::~CourseCorrection(this);

  operator delete();
}

void *CMMsl::CourseCorrection::CourseCorrection(void *this, const CMMsl::CourseCorrection *a2)
{
  *this = off_1003A52B8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::CourseCorrection *CMMsl::CourseCorrection::operator=(const CMMsl::CourseCorrection *a1, const CMMsl::CourseCorrection *a2)
{
  if (a1 != a2)
  {
    CMMsl::CourseCorrection::CourseCorrection(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::CourseCorrection::~CourseCorrection((CMMsl::CourseCorrection *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::CourseCorrection *a2, CMMsl::CourseCorrection *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::CourseCorrection::CourseCorrection(void *a1, uint64_t a2)
{
  *a1 = off_1003A52B8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A52B8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::CourseCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A52B8;
    v6[1] = v4;
    CMMsl::CourseCorrection::~CourseCorrection((CMMsl::CourseCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::CourseCorrection::formatText(CMMsl::CourseCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CourseCorrection::readFrom(CMMsl::CourseCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CourseCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::CourseCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  }
  return result;
}

CMMsl::DeviceMotionCorrection *CMMsl::CourseCorrection::hash_value(CMMsl::CourseCorrection *this)
{
  BOOL result = (CMMsl::DeviceMotionCorrection *)*((void *)this + 1);
  if (result) {
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::CourseCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::DeviceMotion::~DeviceMotion(CMMsl::DeviceMotion *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::DeviceMotion::DeviceMotion(CMMsl::DeviceMotion *this, const CMMsl::DeviceMotion *a2)
{
  *(void *)this = off_1003A52F0;
  *((_DWORD *)this + 31) = 0;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    int v3 = 16;
    *((_DWORD *)this + 31) = 16;
    *((void *)this + 5) = v4;
    int v2 = *((_DWORD *)a2 + 31);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 31) = v3;
    *((void *)this + 2) = v4;
    int v2 = *((_DWORD *)a2 + 31);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 31) = v3;
    *((void *)this + 3) = v4;
    int v2 = *((_DWORD *)a2 + 31);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v4 = *((void *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 31) = v3;
  *((void *)this + 4) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v4 = *((void *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 31) = v3;
  *((void *)this + 1) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x40000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x40000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 25) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x80000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x80000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 26) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x100000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x100000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 27) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 20) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x4000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 21) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x8000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 22) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 15) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 16) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v5 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 14) = v5;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x20000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 24) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 12) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x1000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v6 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 19) = v6;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v7 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 13) = v7;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x10000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v8 = *((_DWORD *)a2 + 23);
  v3 |= 0x10000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 23) = v8;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v9 = *((_DWORD *)a2 + 28);
  v3 |= 0x200000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 28) = v9;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_50;
  }
LABEL_49:
  char v10 = *((unsigned char *)a2 + 120);
  v3 |= 0x800000u;
  *((_DWORD *)this + 31) = v3;
  *((unsigned char *)this + 120) = v10;
  if ((*((_DWORD *)a2 + 31) & 0x400000) == 0) {
    return *(float *)&v4;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  *((_DWORD *)this + 31) = v3 | 0x400000;
  *((_DWORD *)this + 29) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::DeviceMotion::operator=(CMMsl *a1, const CMMsl::DeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::DeviceMotion::DeviceMotion((CMMsl::DeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DeviceMotion *a2, CMMsl::DeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v8;
  LODWORD(v8) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v8;
  LODWORD(v8) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v8;
  LODWORD(v8) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v8;
  LODWORD(v8) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  LODWORD(v8) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  LODWORD(v8) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v8;
  LODWORD(v8) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  int v9 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  LODWORD(v8) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v8;
  LODWORD(v8) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v8;
  LODWORD(v8) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  int v10 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v10;
  int v11 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v11;
  int v12 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v12;
  int v13 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 120);
  *((unsigned char *)this + 120) = *((unsigned char *)a2 + 120);
  *((unsigned char *)a2 + 120) = v13;
  float result = *((float *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((float *)a2 + 29) = result;
  return result;
}

float CMMsl::DeviceMotion::DeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A52F0;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  float result = *(float *)(a2 + 116);
  *(float *)(a1 + 116) = result;
  return result;
}

CMMsl *CMMsl::DeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DeviceMotion::DeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotion::formatText(CMMsl::DeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((float *)this + 12));
    int v5 = *((_DWORD *)this + 31);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "clientID", *((_DWORD *)this + 13));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "isGyroOn", *((unsigned char *)this + 120));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "magneticFieldCalibrationLevel", *((_DWORD *)this + 14));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "magneticHeading", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "mode", *((_DWORD *)this + 19));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 4) == 0)
  {
LABEL_13:
    if ((v5 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 8) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "rotationRateX", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "rotationRateY", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "rotationRateZ", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 23));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x10) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "trueHeading", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "userAccelerationX", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "userAccelerationY", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "userAccelerationZ", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "variant", *((_DWORD *)this + 28));
  if ((*((_DWORD *)this + 31) & 0x400000) != 0) {
LABEL_25:
  }
    PB::TextFormatter::format(a2, "visionCompassBias", *((float *)this + 29));
LABEL_26:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DeviceMotion::readFrom(CMMsl::DeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 31) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_39;
            case 2u:
              *((_DWORD *)this + 31) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_39;
            case 3u:
              *((_DWORD *)this + 31) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_39;
            case 4u:
              *((_DWORD *)this + 31) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_39;
            case 5u:
              *((_DWORD *)this + 31) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_39:
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_155;
            case 6u:
              *((_DWORD *)this + 31) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_154;
            case 7u:
              *((_DWORD *)this + 31) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_154;
            case 8u:
              *((_DWORD *)this + 31) |= 0x100000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_154;
            case 9u:
              *((_DWORD *)this + 31) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_154;
            case 0xAu:
              *((_DWORD *)this + 31) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_154;
            case 0xBu:
              *((_DWORD *)this + 31) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_154;
            case 0xCu:
              *((_DWORD *)this + 31) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_154;
            case 0xDu:
              *((_DWORD *)this + 31) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_154;
            case 0xEu:
              *((_DWORD *)this + 31) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_154;
            case 0xFu:
              *((_DWORD *)this + 31) |= 0x80u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_165;
                  }
                  unint64_t v55 = v21++;
                  char v56 = *(unsigned char *)(v22 + v55);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_164:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_165;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_164;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_165;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_165:
              *((_DWORD *)this + 14) = v25;
              goto LABEL_156;
            case 0x10u:
              *((_DWORD *)this + 31) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_154;
            case 0x11u:
              *((_DWORD *)this + 31) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_154;
            case 0x12u:
              *((_DWORD *)this + 31) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_115;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_154;
            case 0x13u:
              *((_DWORD *)this + 31) |= 0x1000u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_170;
                  }
                  unint64_t v59 = v27++;
                  char v60 = *(unsigned char *)(v28 + v59);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_169:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_170;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_169;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_170;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_170:
              *((_DWORD *)this + 19) = v31;
              goto LABEL_156;
            case 0x14u:
              *((_DWORD *)this + 31) |= 0x40u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_175;
                  }
                  unint64_t v63 = v33++;
                  char v64 = *(unsigned char *)(v34 + v63);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_174:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_175;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_174;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_175;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_175:
              *((_DWORD *)this + 13) = v37;
              goto LABEL_156;
            case 0x15u:
              *((_DWORD *)this + 31) |= 0x10000u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_180;
                  }
                  unint64_t v67 = v39++;
                  char v68 = *(unsigned char *)(v40 + v67);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_179:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_180;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_179;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_180;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_180:
              *((_DWORD *)this + 23) = v43;
              goto LABEL_156;
            case 0x16u:
              *((_DWORD *)this + 31) |= 0x200000u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_185;
                  }
                  unint64_t v71 = v45++;
                  char v72 = *(unsigned char *)(v46 + v71);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_184:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_185;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_184;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_185;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_185:
              *((_DWORD *)this + 28) = v49;
LABEL_156:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x17u:
              *((_DWORD *)this + 31) |= 0x800000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v52 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v51 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v52 = v51 != 0;
              }
              *((unsigned char *)this + 120) = v52;
              goto LABEL_156;
            case 0x18u:
              *((_DWORD *)this + 31) |= 0x400000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_154:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_155:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_115:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_156;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_156;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 124);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    int v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 6u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 7u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 8u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 9u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xAu);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0xBu);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xCu);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xDu);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xEu);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0xFu);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x10u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x11u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x12u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0x13u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 0x14u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x10000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0x15u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
LABEL_48:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 120), 0x17u);
    if ((*(_DWORD *)(v3 + 124) & 0x400000) == 0) {
      return this;
    }
    goto LABEL_49;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x16u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800000) != 0) {
    goto LABEL_48;
  }
LABEL_24:
  if ((v4 & 0x400000) == 0) {
    return this;
  }
LABEL_49:
  float v5 = *(float *)(v3 + 116);

  return PB::Writer::write(a2, v5, 0x18u);
}

uint64_t CMMsl::DeviceMotion::hash_value(CMMsl::DeviceMotion *this)
{
  int v1 = *((_DWORD *)this + 31);
  if ((v1 & 0x10) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_63:
    double v3 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_64:
    double v4 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_65:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_66:
    double v6 = 0.0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_15;
    }
LABEL_67:
    uint64_t v8 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_18;
    }
LABEL_68:
    uint64_t v10 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_21;
    }
LABEL_69:
    uint64_t v12 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_24;
    }
LABEL_70:
    uint64_t v14 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_27;
    }
LABEL_71:
    uint64_t v16 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_30;
    }
LABEL_72:
    uint64_t v18 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_33;
    }
LABEL_73:
    uint64_t v20 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_36;
    }
LABEL_74:
    uint64_t v22 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_39;
    }
LABEL_75:
    uint64_t v24 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_42;
    }
    goto LABEL_76;
  }
  double v2 = *((double *)this + 5);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_63;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_64;
  }
LABEL_6:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_65;
  }
LABEL_9:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_66;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_67;
  }
LABEL_15:
  float v7 = *((float *)this + 25);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_68;
  }
LABEL_18:
  float v9 = *((float *)this + 26);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_69;
  }
LABEL_21:
  float v11 = *((float *)this + 27);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_70;
  }
LABEL_24:
  float v13 = *((float *)this + 20);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_71;
  }
LABEL_27:
  float v15 = *((float *)this + 21);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_72;
  }
LABEL_30:
  float v17 = *((float *)this + 22);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_73;
  }
LABEL_33:
  float v19 = *((float *)this + 15);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_74;
  }
LABEL_36:
  float v21 = *((float *)this + 16);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_75;
  }
LABEL_39:
  float v23 = *((float *)this + 17);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_42:
    uint64_t v25 = *((int *)this + 14);
    if ((v1 & 0x800) != 0) {
      goto LABEL_43;
    }
LABEL_77:
    uint64_t v27 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_46;
    }
LABEL_78:
    uint64_t v29 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_49;
    }
LABEL_79:
    uint64_t v31 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_52;
    }
    goto LABEL_80;
  }
LABEL_76:
  uint64_t v25 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_77;
  }
LABEL_43:
  float v26 = *((float *)this + 18);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_78;
  }
LABEL_46:
  float v28 = *((float *)this + 24);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_79;
  }
LABEL_49:
  float v30 = *((float *)this + 12);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  if ((v1 & 0x1000) != 0)
  {
LABEL_52:
    uint64_t v32 = *((unsigned int *)this + 19);
    if ((v1 & 0x40) != 0) {
      goto LABEL_53;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v32 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_53:
    uint64_t v33 = *((unsigned int *)this + 13);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_54;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v33 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_54:
    uint64_t v34 = *((unsigned int *)this + 23);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_55;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v34 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_55:
    uint64_t v35 = *((unsigned int *)this + 28);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_56;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v35 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_56:
    uint64_t v36 = *((unsigned __int8 *)this + 120);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_57;
    }
LABEL_85:
    uint64_t v38 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
  }
LABEL_84:
  uint64_t v36 = 0;
  if ((v1 & 0x400000) == 0) {
    goto LABEL_85;
  }
LABEL_57:
  float v37 = *((float *)this + 29);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(uint64_t this)
{
  *(void *)this = off_1003A5328;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A5328;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::DeviceMotionAlwaysOn::~DeviceMotionAlwaysOn(CMMsl::DeviceMotionAlwaysOn *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A5328;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::DeviceMotionAlwaysOn::~DeviceMotionAlwaysOn(this);

  operator delete();
}

uint64_t CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(uint64_t this, const CMMsl::DeviceMotionAlwaysOn *a2)
{
  *(void *)this = off_1003A5328;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 20);
  if (v2)
  {
    char v3 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) |= 1u;
    *(unsigned char *)(this + 16) = v3;
    char v2 = *((unsigned char *)a2 + 20);
  }
  if ((v2 & 2) != 0)
  {
    char v4 = *((unsigned char *)a2 + 17);
    *(unsigned char *)(this + 20) |= 2u;
    *(unsigned char *)(this + 17) = v4;
  }
  return this;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::operator=(uint64_t a1, const CMMsl::DeviceMotionAlwaysOn *a2)
{
  if ((const CMMsl::DeviceMotionAlwaysOn *)a1 != a2)
  {
    CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOWORD(v4) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8;
    __int16 v8 = v4;
    CMMsl::DeviceMotionAlwaysOn::~DeviceMotionAlwaysOn((CMMsl::DeviceMotionAlwaysOn *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::DeviceMotionAlwaysOn *a2, CMMsl::DeviceMotionAlwaysOn *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 17);
  *(unsigned char *)(this + 17) = *((unsigned char *)a2 + 17);
  *((unsigned char *)a2 + 17) = v4;
  return this;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5328;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOWORD(v4) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8;
    __int16 v8 = v4;
    CMMsl::DeviceMotionAlwaysOn::~DeviceMotionAlwaysOn((CMMsl::DeviceMotionAlwaysOn *)v6);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::formatText(CMMsl::DeviceMotionAlwaysOn *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "deviceMotion");
  }
  char v6 = *((unsigned char *)this + 20);
  if (v6)
  {
    PB::TextFormatter::format(a2, "inQuiescentMode", *((unsigned char *)this + 16));
    char v6 = *((unsigned char *)this + 20);
  }
  if ((v6 & 2) != 0) {
    PB::TextFormatter::format(a2, "shouldGyroBeOn", *((unsigned char *)this + 17));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DeviceMotionAlwaysOn::readFrom(CMMsl::DeviceMotionAlwaysOn *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 >= *((void *)a2 + 2))
        {
          BOOL v24 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          int v23 = *(unsigned __int8 *)(*(void *)a2 + v21);
          *((void *)a2 + 1) = v22;
          BOOL v24 = v23 != 0;
        }
        *((unsigned char *)this + 17) = v24;
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v25 = *((void *)a2 + 1);
        if (v25 >= *((void *)a2 + 2))
        {
          BOOL v28 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v26 = v25 + 1;
          int v27 = *(unsigned __int8 *)(*(void *)a2 + v25);
          *((void *)a2 + 1) = v26;
          BOOL v28 = v27 != 0;
        }
        *((unsigned char *)this + 16) = v28;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (BOOL *)this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  BOOL v5 = v3[20];
  if (v5)
  {
    this = PB::Writer::write(a2, v3[16], 2u);
    BOOL v5 = v3[20];
  }
  if ((v5 & 2) != 0)
  {
    BOOL v6 = v3[17];
    return PB::Writer::write(a2, v6, 3u);
  }
  return this;
}

BOOL CMMsl::DeviceMotionAlwaysOn::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotion::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17);
}

unint64_t CMMsl::DeviceMotionAlwaysOn::hash_value(CMMsl::DeviceMotionAlwaysOn *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotion::hash_value((CMMsl::DeviceMotion *)v2);
  }
  if (*((unsigned char *)this + 20))
  {
    uint64_t v3 = *((unsigned __int8 *)this + 16);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v4 = 0;
    return v3 ^ v2 ^ v4;
  }
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v4 = *((unsigned __int8 *)this + 17);
  return v3 ^ v2 ^ v4;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::makeDeviceMotion(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection(CMMsl::DeviceMotionCorrection *this)
{
  *(void *)this = off_1003A5360;
  unint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  BOOL v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection(this);

  operator delete();
}

CMMsl::DeviceMotionCorrection *CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(CMMsl::DeviceMotionCorrection *this, const CMMsl::DeviceMotionCorrection *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v5 = (char *)this + 56;
  *(void *)this = off_1003A5360;
  *(_OWORD *)((char *)this + 104) = 0u;
  BOOL v6 = (char *)this + 104;
  *((_DWORD *)this + 40) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  if (*((unsigned char *)a2 + 160))
  {
    uint64_t v7 = *((void *)a2 + 19);
    *((unsigned char *)this + 160) = 1;
    *((void *)this + 19) = v7;
  }
  if (this != a2)
  {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    sub_100024308(v6, *((char **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_100024308((char *)this + 128, *((char **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::DeviceMotionCorrection::operator=(CMMsl *a1, const CMMsl::DeviceMotionCorrection *a2)
{
  if (a1 != a2)
  {
    CMMsl::DeviceMotionCorrection::DeviceMotionCorrection((CMMsl::DeviceMotionCorrection *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotionCorrection *)v5, v3);
    CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection((CMMsl::DeviceMotionCorrection *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DeviceMotionCorrection *a2, CMMsl::DeviceMotionCorrection *a3)
{
  int v3 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v3;
  double result = *((double *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((double *)a2 + 19) = result;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  uint64_t v11 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v11;
  uint64_t v12 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v12;
  uint64_t v13 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v13;
  uint64_t v14 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v14;
  uint64_t v15 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v15;
  uint64_t v16 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v16;
  uint64_t v17 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v17;
  uint64_t v18 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v18;
  uint64_t v19 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v19;
  uint64_t v20 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v20;
  uint64_t v21 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v21;
  uint64_t v22 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v22;
  return result;
}

uint64_t CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5360;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a2 + 160) = 0;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  sub_100274A30(a1 + 104, (__n128 *)(a2 + 104));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(a1 + 80, (__n128 *)(a2 + 80));
  sub_100274A30(a1 + 128, (__n128 *)(a2 + 128));
  return a1;
}

CMMsl *CMMsl::DeviceMotionCorrection::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DeviceMotionCorrection::DeviceMotionCorrection((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotionCorrection *)v5, v3);
    CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection((CMMsl::DeviceMotionCorrection *)v5);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotionCorrection::formatText(CMMsl::DeviceMotionCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "dx", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "estimate", v10);
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "measurement", v13);
  }
  uint64_t v14 = (float *)*((void *)this + 10);
  uint64_t v15 = (float *)*((void *)this + 11);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(a2, "noisevariance", v16);
  }
  uint64_t v17 = (float *)*((void *)this + 13);
  uint64_t v18 = (float *)*((void *)this + 14);
  while (v17 != v18)
  {
    float v19 = *v17++;
    PB::TextFormatter::format(a2, "residual", v19);
  }
  uint64_t v20 = (float *)*((void *)this + 16);
  uint64_t v21 = (float *)*((void *)this + 17);
  while (v20 != v21)
  {
    float v22 = *v20++;
    PB::TextFormatter::format(a2, "statevariance", v22);
  }
  if (*((unsigned char *)this + 160)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 19));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::DeviceMotionCorrection::readFrom(CMMsl::DeviceMotionCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    int v180 = (char *)this + 144;
    v181 = (void **)((char *)this + 128);
    uint64_t v8 = (void **)((char *)this + 80);
    uint64_t v9 = (void **)((char *)this + 8);
    int v178 = (char *)this + 24;
    v179 = (char *)this + 96;
    float v10 = (void **)((char *)this + 104);
    uint64_t v11 = (void **)((char *)this + 56);
    int v176 = (char *)this + 72;
    v177 = (char *)this + 120;
    uint64_t v12 = (void **)((char *)this + 32);
    v175 = (char *)this + 48;
    while (1)
    {
      uint64_t v13 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 160) |= 1u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
            goto LABEL_278;
          }
          *((void *)this + 19) = *(void *)(*(void *)a2 + v26);
          uint64_t v27 = *((void *)a2 + 1) + 8;
          goto LABEL_280;
        case 2u:
          if (v25 != 2)
          {
            uint64_t v113 = (char *)*((void *)this + 5);
            unint64_t v112 = *((void *)this + 6);
            if ((unint64_t)v113 >= v112)
            {
              char v125 = (char *)*v12;
              uint64_t v126 = (v113 - (unsigned char *)*v12) >> 2;
              unint64_t v127 = v126 + 1;
              if ((unint64_t)(v126 + 1) >> 62) {
LABEL_289:
              }
                sub_10000EE98();
              uint64_t v128 = v112 - (void)v125;
              if (v128 >> 1 > v127) {
                unint64_t v127 = v128 >> 1;
              }
              if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v129 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v129 = v127;
              }
              if (v129)
              {
                unint64_t v130 = (char *)sub_100024458((uint64_t)v175, v129);
                char v125 = (char *)*((void *)this + 4);
                uint64_t v113 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v130 = 0;
              }
              unsigned int v161 = &v130[4 * v126];
              *(_DWORD *)unsigned int v161 = 0;
              unint64_t v114 = v161 + 4;
              while (v113 != v125)
              {
                int v162 = *((_DWORD *)v113 - 1);
                v113 -= 4;
                *((_DWORD *)v161 - 1) = v162;
                v161 -= 4;
              }
              *((void *)this + 4) = v161;
              *((void *)this + 5) = v114;
              *((void *)this + 6) = &v130[4 * v129];
              if (v125) {
                operator delete(v125);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v113 = 0;
              unint64_t v114 = v113 + 4;
            }
            *((void *)this + 5) = v114;
            goto LABEL_276;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          while (v28 < v29 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v31 = (char *)*((void *)this + 5);
            unint64_t v30 = *((void *)this + 6);
            if ((unint64_t)v31 >= v30)
            {
              uint64_t v33 = (char *)*v12;
              uint64_t v34 = (v31 - (unsigned char *)*v12) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_289;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                uint64_t v38 = (char *)sub_100024458((uint64_t)v175, v37);
                uint64_t v33 = (char *)*((void *)this + 4);
                uint64_t v31 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v38 = 0;
              }
              unint64_t v39 = &v38[4 * v34];
              *(_DWORD *)unint64_t v39 = 0;
              uint64_t v32 = v39 + 4;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *((void *)this + 4) = v39;
              *((void *)this + 5) = v32;
              *((void *)this + 6) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v31 = 0;
              uint64_t v32 = v31 + 4;
            }
            *((void *)this + 5) = v32;
            unint64_t v41 = *((void *)a2 + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2)) {
              goto LABEL_172;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
            unint64_t v29 = *((void *)a2 + 2);
            unint64_t v28 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v28;
          }
          goto LABEL_173;
        case 3u:
          if (v25 != 2)
          {
            unint64_t v116 = (char *)*((void *)this + 8);
            unint64_t v115 = *((void *)this + 9);
            if ((unint64_t)v116 >= v115)
            {
              unint64_t v131 = (char *)*v11;
              uint64_t v132 = (v116 - (unsigned char *)*v11) >> 2;
              unint64_t v133 = v132 + 1;
              if ((unint64_t)(v132 + 1) >> 62) {
LABEL_290:
              }
                sub_10000EE98();
              uint64_t v134 = v115 - (void)v131;
              if (v134 >> 1 > v133) {
                unint64_t v133 = v134 >> 1;
              }
              if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v135 = v133;
              }
              if (v135)
              {
                char v136 = (char *)sub_100024458((uint64_t)v176, v135);
                unint64_t v131 = (char *)*((void *)this + 7);
                unint64_t v116 = (char *)*((void *)this + 8);
              }
              else
              {
                char v136 = 0;
              }
              char v163 = &v136[4 * v132];
              *(_DWORD *)char v163 = 0;
              unint64_t v114 = v163 + 4;
              while (v116 != v131)
              {
                int v164 = *((_DWORD *)v116 - 1);
                v116 -= 4;
                *((_DWORD *)v163 - 1) = v164;
                v163 -= 4;
              }
              *((void *)this + 7) = v163;
              *((void *)this + 8) = v114;
              *((void *)this + 9) = &v136[4 * v135];
              if (v131) {
                operator delete(v131);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v116 = 0;
              unint64_t v114 = v116 + 4;
            }
            *((void *)this + 8) = v114;
            goto LABEL_276;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          while (v42 < v43 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v45 = (char *)*((void *)this + 8);
            unint64_t v44 = *((void *)this + 9);
            if ((unint64_t)v45 >= v44)
            {
              char v47 = (char *)*v11;
              uint64_t v48 = (v45 - (unsigned char *)*v11) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_290;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                BOOL v52 = (char *)sub_100024458((uint64_t)v176, v51);
                char v47 = (char *)*((void *)this + 7);
                unint64_t v45 = (char *)*((void *)this + 8);
              }
              else
              {
                BOOL v52 = 0;
              }
              char v53 = &v52[4 * v48];
              *(_DWORD *)char v53 = 0;
              uint64_t v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *((void *)this + 7) = v53;
              *((void *)this + 8) = v46;
              *((void *)this + 9) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              uint64_t v46 = v45 + 4;
            }
            *((void *)this + 8) = v46;
            unint64_t v55 = *((void *)a2 + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
              goto LABEL_172;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)a2 + v55);
            unint64_t v43 = *((void *)a2 + 2);
            unint64_t v42 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v42;
          }
          goto LABEL_173;
        case 4u:
          if (v25 != 2)
          {
            BOOL v118 = (char *)*((void *)this + 14);
            unint64_t v117 = *((void *)this + 15);
            if ((unint64_t)v118 >= v117)
            {
              unsigned int v137 = (char *)*v10;
              uint64_t v138 = (v118 - (unsigned char *)*v10) >> 2;
              unint64_t v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 62) {
LABEL_291:
              }
                sub_10000EE98();
              uint64_t v140 = v117 - (void)v137;
              if (v140 >> 1 > v139) {
                unint64_t v139 = v140 >> 1;
              }
              if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v141 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v141 = v139;
              }
              if (v141)
              {
                unint64_t v142 = (char *)sub_100024458((uint64_t)v177, v141);
                unsigned int v137 = (char *)*((void *)this + 13);
                BOOL v118 = (char *)*((void *)this + 14);
              }
              else
              {
                unint64_t v142 = 0;
              }
              unsigned int v165 = &v142[4 * v138];
              *(_DWORD *)unsigned int v165 = 0;
              unint64_t v114 = v165 + 4;
              while (v118 != v137)
              {
                int v166 = *((_DWORD *)v118 - 1);
                v118 -= 4;
                *((_DWORD *)v165 - 1) = v166;
                v165 -= 4;
              }
              *((void *)this + 13) = v165;
              *((void *)this + 14) = v114;
              *((void *)this + 15) = &v142[4 * v141];
              if (v137) {
                operator delete(v137);
              }
            }
            else
            {
              *(_DWORD *)BOOL v118 = 0;
              unint64_t v114 = v118 + 4;
            }
            *((void *)this + 14) = v114;
            goto LABEL_276;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v56 = *((void *)a2 + 1);
          unint64_t v57 = *((void *)a2 + 2);
          while (v56 < v57 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v59 = (char *)*((void *)this + 14);
            unint64_t v58 = *((void *)this + 15);
            if ((unint64_t)v59 >= v58)
            {
              char v61 = (char *)*v10;
              uint64_t v62 = (v59 - (unsigned char *)*v10) >> 2;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62) {
                goto LABEL_291;
              }
              uint64_t v64 = v58 - (void)v61;
              if (v64 >> 1 > v63) {
                unint64_t v63 = v64 >> 1;
              }
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v63;
              }
              if (v65)
              {
                unsigned int v66 = (char *)sub_100024458((uint64_t)v177, v65);
                char v61 = (char *)*((void *)this + 13);
                unint64_t v59 = (char *)*((void *)this + 14);
              }
              else
              {
                unsigned int v66 = 0;
              }
              unint64_t v67 = &v66[4 * v62];
              *(_DWORD *)unint64_t v67 = 0;
              char v60 = v67 + 4;
              while (v59 != v61)
              {
                int v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *((void *)this + 13) = v67;
              *((void *)this + 14) = v60;
              *((void *)this + 15) = &v66[4 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v59 = 0;
              char v60 = v59 + 4;
            }
            *((void *)this + 14) = v60;
            unint64_t v69 = *((void *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2)) {
              goto LABEL_172;
            }
            *(v60 - 1) = *(_DWORD *)(*(void *)a2 + v69);
            unint64_t v57 = *((void *)a2 + 2);
            unint64_t v56 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v56;
          }
          goto LABEL_173;
        case 5u:
          if (v25 != 2)
          {
            unint64_t v120 = (char *)*((void *)this + 2);
            unint64_t v119 = *((void *)this + 3);
            if ((unint64_t)v120 >= v119)
            {
              char v143 = (char *)*v9;
              uint64_t v144 = (v120 - (unsigned char *)*v9) >> 2;
              unint64_t v145 = v144 + 1;
              if ((unint64_t)(v144 + 1) >> 62) {
LABEL_292:
              }
                sub_10000EE98();
              uint64_t v146 = v119 - (void)v143;
              if (v146 >> 1 > v145) {
                unint64_t v145 = v146 >> 1;
              }
              if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v147 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v147 = v145;
              }
              if (v147)
              {
                char v148 = (char *)sub_100024458((uint64_t)v178, v147);
                char v143 = (char *)*((void *)this + 1);
                unint64_t v120 = (char *)*((void *)this + 2);
              }
              else
              {
                char v148 = 0;
              }
              char v167 = &v148[4 * v144];
              *(_DWORD *)char v167 = 0;
              unint64_t v114 = v167 + 4;
              while (v120 != v143)
              {
                int v168 = *((_DWORD *)v120 - 1);
                v120 -= 4;
                *((_DWORD *)v167 - 1) = v168;
                v167 -= 4;
              }
              *((void *)this + 1) = v167;
              *((void *)this + 2) = v114;
              *((void *)this + 3) = &v148[4 * v147];
              if (v143) {
                operator delete(v143);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v120 = 0;
              unint64_t v114 = v120 + 4;
            }
            *((void *)this + 2) = v114;
            goto LABEL_276;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v70 = *((void *)a2 + 1);
          unint64_t v71 = *((void *)a2 + 2);
          while (v70 < v71 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v73 = (char *)*((void *)this + 2);
            unint64_t v72 = *((void *)this + 3);
            if ((unint64_t)v73 >= v72)
            {
              char v75 = (char *)*v9;
              uint64_t v76 = (v73 - (unsigned char *)*v9) >> 2;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62) {
                goto LABEL_292;
              }
              uint64_t v78 = v72 - (void)v75;
              if (v78 >> 1 > v77) {
                unint64_t v77 = v78 >> 1;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v77;
              }
              if (v79)
              {
                unsigned int v80 = (char *)sub_100024458((uint64_t)v178, v79);
                char v75 = (char *)*((void *)this + 1);
                uint64_t v73 = (char *)*((void *)this + 2);
              }
              else
              {
                unsigned int v80 = 0;
              }
              unint64_t v81 = &v80[4 * v76];
              *(_DWORD *)unint64_t v81 = 0;
              char v74 = v81 + 4;
              while (v73 != v75)
              {
                int v82 = *((_DWORD *)v73 - 1);
                v73 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *((void *)this + 1) = v81;
              *((void *)this + 2) = v74;
              *((void *)this + 3) = &v80[4 * v79];
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v73 = 0;
              char v74 = v73 + 4;
            }
            *((void *)this + 2) = v74;
            unint64_t v83 = *((void *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
              goto LABEL_172;
            }
            *(v74 - 1) = *(_DWORD *)(*(void *)a2 + v83);
            unint64_t v71 = *((void *)a2 + 2);
            unint64_t v70 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v70;
          }
          goto LABEL_173;
        case 6u:
          if (v25 != 2)
          {
            unint64_t v122 = (char *)*((void *)this + 11);
            unint64_t v121 = *((void *)this + 12);
            if ((unint64_t)v122 >= v121)
            {
              unsigned int v149 = (char *)*v8;
              uint64_t v150 = (v122 - (unsigned char *)*v8) >> 2;
              unint64_t v151 = v150 + 1;
              if ((unint64_t)(v150 + 1) >> 62) {
LABEL_293:
              }
                sub_10000EE98();
              uint64_t v152 = v121 - (void)v149;
              if (v152 >> 1 > v151) {
                unint64_t v151 = v152 >> 1;
              }
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v151;
              }
              if (v153)
              {
                unint64_t v154 = (char *)sub_100024458((uint64_t)v179, v153);
                unsigned int v149 = (char *)*((void *)this + 10);
                unint64_t v122 = (char *)*((void *)this + 11);
              }
              else
              {
                unint64_t v154 = 0;
              }
              uint64_t v169 = &v154[4 * v150];
              *(_DWORD *)uint64_t v169 = 0;
              unint64_t v114 = v169 + 4;
              while (v122 != v149)
              {
                int v170 = *((_DWORD *)v122 - 1);
                v122 -= 4;
                *((_DWORD *)v169 - 1) = v170;
                v169 -= 4;
              }
              *((void *)this + 10) = v169;
              *((void *)this + 11) = v114;
              *((void *)this + 12) = &v154[4 * v153];
              if (v149) {
                operator delete(v149);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v122 = 0;
              unint64_t v114 = v122 + 4;
            }
            *((void *)this + 11) = v114;
            goto LABEL_276;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v84 = *((void *)a2 + 1);
          unint64_t v85 = *((void *)a2 + 2);
          while (v84 < v85 && !*((unsigned char *)a2 + 24))
          {
            char v87 = (char *)*((void *)this + 11);
            unint64_t v86 = *((void *)this + 12);
            if ((unint64_t)v87 >= v86)
            {
              unint64_t v89 = (char *)*v8;
              uint64_t v90 = (v87 - (unsigned char *)*v8) >> 2;
              unint64_t v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 62) {
                goto LABEL_293;
              }
              uint64_t v92 = v86 - (void)v89;
              if (v92 >> 1 > v91) {
                unint64_t v91 = v92 >> 1;
              }
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v93 = v91;
              }
              if (v93)
              {
                char v94 = (char *)sub_100024458((uint64_t)v179, v93);
                unint64_t v89 = (char *)*((void *)this + 10);
                char v87 = (char *)*((void *)this + 11);
              }
              else
              {
                char v94 = 0;
              }
              char v95 = &v94[4 * v90];
              *(_DWORD *)char v95 = 0;
              unsigned int v88 = v95 + 4;
              while (v87 != v89)
              {
                int v96 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *((_DWORD *)v95 - 1) = v96;
                v95 -= 4;
              }
              *((void *)this + 10) = v95;
              *((void *)this + 11) = v88;
              *((void *)this + 12) = &v94[4 * v93];
              if (v89) {
                operator delete(v89);
              }
            }
            else
            {
              *(_DWORD *)char v87 = 0;
              unsigned int v88 = v87 + 4;
            }
            *((void *)this + 11) = v88;
            unint64_t v97 = *((void *)a2 + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((void *)a2 + 2)) {
              goto LABEL_172;
            }
            *(v88 - 1) = *(_DWORD *)(*(void *)a2 + v97);
            unint64_t v85 = *((void *)a2 + 2);
            unint64_t v84 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v84;
          }
          goto LABEL_173;
        case 7u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v98 = *((void *)a2 + 1);
            unint64_t v99 = *((void *)a2 + 2);
            while (v98 < v99 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v101 = (char *)*((void *)this + 17);
              unint64_t v100 = *((void *)this + 18);
              if ((unint64_t)v101 >= v100)
              {
                char v103 = (char *)*v181;
                uint64_t v104 = (v101 - (unsigned char *)*v181) >> 2;
                unint64_t v105 = v104 + 1;
                if ((unint64_t)(v104 + 1) >> 62) {
                  goto LABEL_294;
                }
                uint64_t v106 = v100 - (void)v103;
                if (v106 >> 1 > v105) {
                  unint64_t v105 = v106 >> 1;
                }
                if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v107 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v107 = v105;
                }
                if (v107)
                {
                  unsigned int v108 = (char *)sub_100024458((uint64_t)v180, v107);
                  char v103 = (char *)*((void *)this + 16);
                  unint64_t v101 = (char *)*((void *)this + 17);
                }
                else
                {
                  unsigned int v108 = 0;
                }
                unint64_t v109 = &v108[4 * v104];
                *(_DWORD *)unint64_t v109 = 0;
                char v102 = v109 + 4;
                while (v101 != v103)
                {
                  int v110 = *((_DWORD *)v101 - 1);
                  v101 -= 4;
                  *((_DWORD *)v109 - 1) = v110;
                  v109 -= 4;
                }
                *((void *)this + 16) = v109;
                *((void *)this + 17) = v102;
                *((void *)this + 18) = &v108[4 * v107];
                if (v103) {
                  operator delete(v103);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v101 = 0;
                char v102 = v101 + 4;
              }
              *((void *)this + 17) = v102;
              unint64_t v111 = *((void *)a2 + 1);
              if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)a2 + 2))
              {
LABEL_172:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v102 - 1) = *(_DWORD *)(*(void *)a2 + v111);
              unint64_t v99 = *((void *)a2 + 2);
              unint64_t v98 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v98;
            }
LABEL_173:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v124 = (char *)*((void *)this + 17);
            unint64_t v123 = *((void *)this + 18);
            if ((unint64_t)v124 >= v123)
            {
              char v155 = (char *)*v181;
              uint64_t v156 = (v124 - (unsigned char *)*v181) >> 2;
              unint64_t v157 = v156 + 1;
              if ((unint64_t)(v156 + 1) >> 62) {
LABEL_294:
              }
                sub_10000EE98();
              uint64_t v158 = v123 - (void)v155;
              if (v158 >> 1 > v157) {
                unint64_t v157 = v158 >> 1;
              }
              if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v159 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v159 = v157;
              }
              if (v159)
              {
                char v160 = (char *)sub_100024458((uint64_t)v180, v159);
                char v155 = (char *)*((void *)this + 16);
                uint64_t v124 = (char *)*((void *)this + 17);
              }
              else
              {
                char v160 = 0;
              }
              uint64_t v171 = &v160[4 * v156];
              *(_DWORD *)uint64_t v171 = 0;
              unint64_t v114 = v171 + 4;
              while (v124 != v155)
              {
                int v172 = *((_DWORD *)v124 - 1);
                v124 -= 4;
                *((_DWORD *)v171 - 1) = v172;
                v171 -= 4;
              }
              *((void *)this + 16) = v171;
              *((void *)this + 17) = v114;
              *((void *)this + 18) = &v160[4 * v159];
              if (v155) {
                operator delete(v155);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v124 = 0;
              unint64_t v114 = v124 + 4;
            }
            *((void *)this + 17) = v114;
LABEL_276:
            unint64_t v173 = *((void *)a2 + 1);
            if (v173 <= 0xFFFFFFFFFFFFFFFBLL && v173 + 4 <= *((void *)a2 + 2))
            {
              *(v114 - 1) = *(_DWORD *)(*(void *)a2 + v173);
              uint64_t v27 = *((void *)a2 + 1) + 4;
LABEL_280:
              *((void *)a2 + 1) = v27;
            }
            else
            {
LABEL_278:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_281:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_281;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotionCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 160)) {
    this = PB::Writer::write(a2, *(double *)(this + 152), 1u);
  }
  int v4 = (float *)v3[4];
  uint64_t v5 = (float *)v3[5];
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  float v7 = (float *)v3[7];
  uint64_t v8 = (float *)v3[8];
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  float v10 = (float *)v3[13];
  uint64_t v11 = (float *)v3[14];
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  uint64_t v13 = (float *)v3[1];
  char v14 = (float *)v3[2];
  while (v13 != v14)
  {
    float v15 = *v13++;
    this = PB::Writer::write(a2, v15, 5u);
  }
  unint64_t v16 = (float *)v3[10];
  unint64_t v17 = (float *)v3[11];
  while (v16 != v17)
  {
    float v18 = *v16++;
    this = PB::Writer::write(a2, v18, 6u);
  }
  char v20 = (float *)v3[16];
  float v19 = (float *)v3[17];
  while (v20 != v19)
  {
    float v21 = *v20++;
    this = PB::Writer::write(a2, v21, 7u);
  }
  return this;
}

uint64_t CMMsl::DeviceMotionCorrection::hash_value(CMMsl::DeviceMotionCorrection *this)
{
  if (*((unsigned char *)this + 160))
  {
    if (*((double *)this + 19) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 19);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = v2 ^ v3 ^ PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = v5 ^ PBHashBytes();
  return v4 ^ v6 ^ PBHashBytes();
}

double CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(CMMsl::DeviceMotionCovariance *this)
{
  *(void *)this = off_1003A5398;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A5398;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance(CMMsl::DeviceMotionCovariance *this)
{
  *(void *)this = off_1003A5398;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance(this);

  operator delete();
}

CMMsl::DeviceMotionCovariance *CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(CMMsl::DeviceMotionCovariance *this, const CMMsl::DeviceMotionCovariance *a2)
{
  *(void *)this = off_1003A5398;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((unsigned char *)a2 + 64))
  {
    uint64_t v5 = *((void *)a2 + 7);
    *((unsigned char *)this + 64) = 1;
    *((void *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::DeviceMotionCovariance::operator=(uint64_t a1, const CMMsl::DeviceMotionCovariance *a2)
{
  if ((const CMMsl::DeviceMotionCovariance *)a1 != a2)
  {
    CMMsl::DeviceMotionCovariance::DeviceMotionCovariance((CMMsl::DeviceMotionCovariance *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v7;
    long long v12 = v5;
    CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance((CMMsl::DeviceMotionCovariance *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DeviceMotionCovariance *a2, CMMsl::DeviceMotionCovariance *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  return result;
}

uint64_t CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5398;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::DeviceMotionCovariance::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::DeviceMotionCovariance::DeviceMotionCovariance((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v7;
    long long v12 = v5;
    CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance((CMMsl::DeviceMotionCovariance *)v9);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotionCovariance::formatText(CMMsl::DeviceMotionCovariance *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "biasvariance", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "statevariance", v10);
  }
  if (*((unsigned char *)this + 64)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::DeviceMotionCovariance::readFrom(CMMsl::DeviceMotionCovariance *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    float v10 = (void **)((char *)this + 32);
    long long v11 = (char *)this + 48;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          while (v42 < v43 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v45 = (char *)*((void *)this + 5);
            unint64_t v44 = *((void *)this + 6);
            if ((unint64_t)v45 >= v44)
            {
              char v47 = (char *)*v10;
              uint64_t v48 = (v45 - (unsigned char *)*v10) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_128;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                BOOL v52 = (char *)sub_100024458((uint64_t)v11, v51);
                char v47 = (char *)*((void *)this + 4);
                unint64_t v45 = (char *)*((void *)this + 5);
              }
              else
              {
                BOOL v52 = 0;
              }
              char v53 = &v52[4 * v48];
              *(_DWORD *)char v53 = 0;
              uint64_t v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *((void *)this + 4) = v53;
              *((void *)this + 5) = v46;
              *((void *)this + 6) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              uint64_t v46 = v45 + 4;
            }
            *((void *)this + 5) = v46;
            unint64_t v55 = *((void *)a2 + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
              goto LABEL_82;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)a2 + v55);
            unint64_t v43 = *((void *)a2 + 2);
            unint64_t v42 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v42;
          }
          goto LABEL_83;
        }
        char v60 = (char *)*((void *)this + 5);
        unint64_t v59 = *((void *)this + 6);
        if ((unint64_t)v60 >= v59)
        {
          unint64_t v67 = (char *)*v10;
          uint64_t v68 = (v60 - (unsigned char *)*v10) >> 2;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62) {
LABEL_128:
          }
            sub_10000EE98();
          uint64_t v70 = v59 - (void)v67;
          if (v70 >> 1 > v69) {
            unint64_t v69 = v70 >> 1;
          }
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71)
          {
            unint64_t v72 = (char *)sub_100024458((uint64_t)v11, v71);
            unint64_t v67 = (char *)*((void *)this + 4);
            char v60 = (char *)*((void *)this + 5);
          }
          else
          {
            unint64_t v72 = 0;
          }
          char v75 = &v72[4 * v68];
          *(_DWORD *)char v75 = 0;
          unint64_t v58 = v75 + 4;
          while (v60 != v67)
          {
            int v76 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          *((void *)this + 4) = v75;
          *((void *)this + 5) = v58;
          *((void *)this + 6) = &v72[4 * v71];
          if (v67) {
            operator delete(v67);
          }
        }
        else
        {
          *(_DWORD *)char v60 = 0;
          unint64_t v58 = v60 + 4;
        }
        *((void *)this + 5) = v58;
LABEL_114:
        unint64_t v77 = *((void *)a2 + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2))
        {
LABEL_116:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_119;
        }
        *(v58 - 1) = *(_DWORD *)(*(void *)a2 + v77);
        uint64_t v27 = *((void *)a2 + 1) + 4;
        goto LABEL_118;
      }
      if (v25 == 1)
      {
        *((unsigned char *)this + 64) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
          goto LABEL_116;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v26);
        uint64_t v27 = *((void *)a2 + 1) + 8;
LABEL_118:
        *((void *)a2 + 1) = v27;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0) {
        return 0;
      }
LABEL_119:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    if (v24 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v28 = *((void *)a2 + 1);
      unint64_t v29 = *((void *)a2 + 2);
      while (v28 < v29 && !*((unsigned char *)a2 + 24))
      {
        uint64_t v31 = (char *)*((void *)this + 2);
        unint64_t v30 = *((void *)this + 3);
        if ((unint64_t)v31 >= v30)
        {
          uint64_t v33 = (char *)*v8;
          uint64_t v34 = (v31 - (unsigned char *)*v8) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            goto LABEL_127;
          }
          uint64_t v36 = v30 - (void)v33;
          if (v36 >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            uint64_t v38 = (char *)sub_100024458((uint64_t)v9, v37);
            uint64_t v33 = (char *)*((void *)this + 1);
            uint64_t v31 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v38 = 0;
          }
          unint64_t v39 = &v38[4 * v34];
          *(_DWORD *)unint64_t v39 = 0;
          uint64_t v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *((void *)this + 1) = v39;
          *((void *)this + 2) = v32;
          *((void *)this + 3) = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v31 = 0;
          uint64_t v32 = v31 + 4;
        }
        *((void *)this + 2) = v32;
        unint64_t v41 = *((void *)a2 + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2))
        {
LABEL_82:
          *((unsigned char *)a2 + 24) = 1;
          break;
        }
        *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
        unint64_t v29 = *((void *)a2 + 2);
        unint64_t v28 = *((void *)a2 + 1) + 4;
        *((void *)a2 + 1) = v28;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    unint64_t v57 = (char *)*((void *)this + 2);
    unint64_t v56 = *((void *)this + 3);
    if ((unint64_t)v57 >= v56)
    {
      char v61 = (char *)*v8;
      uint64_t v62 = (v57 - (unsigned char *)*v8) >> 2;
      unint64_t v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62) {
LABEL_127:
      }
        sub_10000EE98();
      uint64_t v64 = v56 - (void)v61;
      if (v64 >> 1 > v63) {
        unint64_t v63 = v64 >> 1;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v63;
      }
      if (v65)
      {
        unsigned int v66 = (char *)sub_100024458((uint64_t)v9, v65);
        char v61 = (char *)*((void *)this + 1);
        unint64_t v57 = (char *)*((void *)this + 2);
      }
      else
      {
        unsigned int v66 = 0;
      }
      uint64_t v73 = &v66[4 * v62];
      *(_DWORD *)uint64_t v73 = 0;
      unint64_t v58 = v73 + 4;
      while (v57 != v61)
      {
        int v74 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
      *((void *)this + 1) = v73;
      *((void *)this + 2) = v58;
      *((void *)this + 3) = &v66[4 * v65];
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v57 = 0;
      unint64_t v58 = v57 + 4;
    }
    *((void *)this + 2) = v58;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotionCovariance::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 64)) {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
  }
  int v4 = (float *)v3[4];
  long long v5 = (float *)v3[5];
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  uint64_t v8 = (float *)v3[1];
  float v7 = (float *)v3[2];
  while (v8 != v7)
  {
    float v9 = *v8++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  return this;
}

BOOL CMMsl::DeviceMotionCovariance::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if ((*(unsigned char *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 64))
  {
    return 0;
  }
  unint64_t v3 = *(float **)(a1 + 32);
  unint64_t v2 = *(float **)(a1 + 40);
  int v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  float v7 = *(float **)(a2 + 8);
  if (v5 - v6 != *(void *)(a2 + 16) - (void)v7) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 4;
  do
  {
    float v9 = *v7++;
    BOOL result = *(float *)(v8 - 4) == v9;
    BOOL v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::DeviceMotionCovariance::hash_value(CMMsl::DeviceMotionCovariance *this)
{
  if (*((unsigned char *)this + 64))
  {
    if (*((double *)this + 7) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 7);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

uint64_t CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(uint64_t this)
{
  *(void *)this = off_1003A53D0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A53D0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::DirectionOfTravelMetrics::~DirectionOfTravelMetrics(CMMsl::DirectionOfTravelMetrics *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(CMMsl::DirectionOfTravelMetrics *this, const CMMsl::DirectionOfTravelMetrics *a2)
{
  *(void *)this = off_1003A53D0;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *((unsigned char *)this + 28) = 2;
    *((void *)this + 2) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 28))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 28) = v3;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    *((unsigned char *)this + 28) = v3 | 4;
    *((_DWORD *)this + 6) = v4;
  }
  return *(float *)&v4;
}

uint64_t CMMsl::DirectionOfTravelMetrics::operator=(uint64_t a1, const CMMsl::DirectionOfTravelMetrics *a2)
{
  if ((const CMMsl::DirectionOfTravelMetrics *)a1 != a2)
  {
    CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics((CMMsl::DirectionOfTravelMetrics *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DirectionOfTravelMetrics *a2, CMMsl::DirectionOfTravelMetrics *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A53D0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A53D0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::DirectionOfTravelMetrics::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A53D0;
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    int v11 = *(_DWORD *)(a1 + 28);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::DirectionOfTravelMetrics::formatText(CMMsl::DirectionOfTravelMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "cadence", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "theta", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DirectionOfTravelMetrics::readFrom(CMMsl::DirectionOfTravelMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_32;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 4;
      }
      else
      {
        if (v20 == 2)
        {
          *((unsigned char *)this + 28) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_32;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        }
        else
        {
          if (v20 != 1)
          {
            uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
            if (!result) {
              return result;
            }
            unint64_t v2 = *((void *)a2 + 1);
            goto LABEL_38;
          }
          *((unsigned char *)this + 28) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
          {
LABEL_32:
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_38;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        }
        unint64_t v2 = *((void *)a2 + 1) + 8;
      }
      *((void *)a2 + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::DirectionOfTravelMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 2) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(a2, v5, 3u);
}

BOOL CMMsl::DirectionOfTravelMetrics::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::DirectionOfTravelMetrics::hash_value(CMMsl::DirectionOfTravelMetrics *this)
{
  if ((*((unsigned char *)this + 28) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 28))
    {
LABEL_3:
      double v2 = *((double *)this + 1);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 28) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t v4 = 0;
      return *(void *)&v2 ^ *(void *)&v1 ^ v4;
    }
  }
  else
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 28)) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  float v3 = *((float *)this + 6);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ v4;
}

uint64_t CMMsl::DisplacingState::DisplacingState(uint64_t this)
{
  *(void *)this = off_1003A5408;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A5408;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::DisplacingState::~DisplacingState(CMMsl::DisplacingState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::DisplacingState::DisplacingState(uint64_t this, const CMMsl::DisplacingState *a2)
{
  *(void *)this = off_1003A5408;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::DisplacingState *CMMsl::DisplacingState::operator=(const CMMsl::DisplacingState *a1, const CMMsl::DisplacingState *a2)
{
  if (a1 != a2)
  {
    CMMsl::DisplacingState::DisplacingState((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DisplacingState *a2, CMMsl::DisplacingState *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::DisplacingState::DisplacingState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5408;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A5408;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::DisplacingState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A5408;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::DisplacingState::formatText(CMMsl::DisplacingState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "displacingState", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DisplacingState::readFrom(CMMsl::DisplacingState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DisplacingState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::DisplacingState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::DisplacingState::hash_value(CMMsl::DisplacingState *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::DisplayStatus::DisplayStatus(uint64_t this)
{
  *(void *)this = off_1003A5440;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = off_1003A5440;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::DisplayStatus::~DisplayStatus(CMMsl::DisplayStatus *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::DisplayStatus::DisplayStatus(uint64_t this, const CMMsl::DisplayStatus *a2)
{
  *(void *)this = off_1003A5440;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(void *)this = off_1003A5440;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::DisplayStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v7 = off_1003A5440;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::DisplayStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    uint64_t v7 = off_1003A5440;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::DisplayStatus *a2, CMMsl::DisplayStatus *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::DisplayStatus::DisplayStatus(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A5440;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = off_1003A5440;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t CMMsl::DisplayStatus::formatText(CMMsl::DisplayStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "displayOn", *((unsigned char *)this + 8));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DisplayStatus::readFrom(CMMsl::DisplayStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 8) = v21;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DisplayStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(unsigned char *)(this + 8), 1u);
  }
  return this;
}

BOOL CMMsl::DisplayStatus::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::DisplayStatus::hash_value(CMMsl::DisplayStatus *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

double CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(CMMsl::DoTEstimatorHandSwing *this)
{
  *(void *)this = off_1003A5478;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 42) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A5478;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 42) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing(CMMsl::DoTEstimatorHandSwing *this)
{
  *(void *)this = off_1003A5478;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing(this);

  operator delete();
}

CMMsl::DoTEstimatorHandSwing *CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(CMMsl::DoTEstimatorHandSwing *this, const CMMsl::DoTEstimatorHandSwing *a2)
{
  *(void *)this = off_1003A5478;
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  char v5 = (char *)this + 56;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if ((*((_WORD *)a2 + 84) & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 16);
    *((_WORD *)this + 84) = 2;
    *((void *)this + 16) = v6;
  }
  if (this != a2)
  {
    sub_100024308((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_100024308(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  __int16 v7 = *((_WORD *)a2 + 84);
  if ((v7 & 0x20) != 0)
  {
    int v12 = *((_DWORD *)a2 + 37);
    *((_WORD *)this + 84) |= 0x20u;
    *((_DWORD *)this + 37) = v12;
    __int16 v7 = *((_WORD *)a2 + 84);
    if ((v7 & 1) == 0)
    {
LABEL_7:
      if ((v7 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v13 = *((void *)a2 + 15);
  *((_WORD *)this + 84) |= 1u;
  *((void *)this + 15) = v13;
  if ((*((_WORD *)a2 + 84) & 0x100) != 0)
  {
LABEL_8:
    int v8 = *((_DWORD *)a2 + 40);
    *((_WORD *)this + 84) |= 0x100u;
    *((_DWORD *)this + 40) = v8;
  }
LABEL_9:
  if (*((void *)a2 + 13)) {
    operator new();
  }
  if (*((void *)a2 + 14)) {
    operator new();
  }
  __int16 v9 = *((_WORD *)a2 + 84);
  if ((v9 & 0x10) != 0)
  {
    int v14 = *((_DWORD *)a2 + 36);
    *((_WORD *)this + 84) |= 0x10u;
    *((_DWORD *)this + 36) = v14;
    __int16 v9 = *((_WORD *)a2 + 84);
    if ((v9 & 0x200) == 0)
    {
LABEL_15:
      if ((v9 & 4) == 0) {
        goto LABEL_16;
      }
      goto LABEL_28;
    }
  }
  else if ((*((_WORD *)a2 + 84) & 0x200) == 0)
  {
    goto LABEL_15;
  }
  char v15 = *((unsigned char *)a2 + 164);
  *((_WORD *)this + 84) |= 0x200u;
  *((unsigned char *)this + 164) = v15;
  __int16 v9 = *((_WORD *)a2 + 84);
  if ((v9 & 4) == 0)
  {
LABEL_16:
    if ((v9 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v16 = *((_DWORD *)a2 + 34);
  *((_WORD *)this + 84) |= 4u;
  *((_DWORD *)this + 34) = v16;
  __int16 v9 = *((_WORD *)a2 + 84);
  if ((v9 & 8) == 0)
  {
LABEL_17:
    if ((v9 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v17 = *((_DWORD *)a2 + 35);
  *((_WORD *)this + 84) |= 8u;
  *((_DWORD *)this + 35) = v17;
  __int16 v9 = *((_WORD *)a2 + 84);
  if ((v9 & 0x40) == 0)
  {
LABEL_18:
    if ((v9 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_30:
  int v18 = *((_DWORD *)a2 + 38);
  *((_WORD *)this + 84) |= 0x40u;
  *((_DWORD *)this + 38) = v18;
  if ((*((_WORD *)a2 + 84) & 0x80) != 0)
  {
LABEL_19:
    int v10 = *((_DWORD *)a2 + 39);
    *((_WORD *)this + 84) |= 0x80u;
    *((_DWORD *)this + 39) = v10;
  }
LABEL_20:
  if (this != a2)
  {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::DoTEstimatorHandSwing::operator=(CMMsl *a1, const CMMsl::DoTEstimatorHandSwing *a2)
{
  if (a1 != a2)
  {
    CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing((CMMsl::DoTEstimatorHandSwing *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorHandSwing *)v5, v3);
    CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing((CMMsl::DoTEstimatorHandSwing *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DoTEstimatorHandSwing *a2, CMMsl::DoTEstimatorHandSwing *a3)
{
  int v3 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v3;
  uint64_t v4 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v4;
  uint64_t v5 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v5;
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v6;
  uint64_t v7 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v7;
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  uint64_t v11 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v11;
  uint64_t v12 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v12;
  uint64_t v13 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v13;
  LODWORD(v13) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 164);
  *((unsigned char *)this + 164) = *((unsigned char *)a2 + 164);
  *((unsigned char *)a2 + 164) = v13;
  LODWORD(v11) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v11;
  LODWORD(v11) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v11;
  LODWORD(v13) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v13;
  double result = *(double *)((char *)a2 + 156);
  uint64_t v15 = *(void *)((char *)this + 156);
  *(double *)((char *)this + 156) = result;
  *(void *)((char *)a2 + 156) = v15;
  uint64_t v16 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v16;
  uint64_t v17 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v17;
  uint64_t v18 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v18;
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  return result;
}

uint64_t CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(void *)a1 = off_1003A5478;
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a2 + 168) = 0;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  sub_100274A30(a1 + 80, (__n128 *)(a2 + 80));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v6 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v8 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  sub_100274A30(v4, (__n128 *)(a2 + 8));
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  return a1;
}

CMMsl *CMMsl::DoTEstimatorHandSwing::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorHandSwing *)v5, v3);
    CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing((CMMsl::DoTEstimatorHandSwing *)v5);
  }
  return a1;
}

uint64_t CMMsl::DoTEstimatorHandSwing::formatText(CMMsl::DoTEstimatorHandSwing *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 84);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "AzABufferMean", *((float *)this + 34));
    __int16 v5 = *((_WORD *)this + 84);
  }
  if ((v5 & 8) != 0) {
    PB::TextFormatter::format(a2, "AzBBufferMean", *((float *)this + 35));
  }
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "cachedAttitude", v8);
  }
  uint64_t v9 = *((void *)this + 13);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "candidateA");
  }
  uint64_t v10 = *((void *)this + 14);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "candidateB");
  }
  uint64_t v11 = (float *)*((void *)this + 4);
  uint64_t v12 = (float *)*((void *)this + 5);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "currAttitude", v13);
  }
  __int16 v14 = *((_WORD *)this + 84);
  if ((v14 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "disambiguationFlag", *((_DWORD *)this + 36));
    __int16 v14 = *((_WORD *)this + 84);
    if ((v14 & 1) == 0)
    {
LABEL_15:
      if ((v14 & 0x20) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if ((v14 & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "lastDoTUpdateTime", *((double *)this + 15));
  if ((*((_WORD *)this + 84) & 0x20) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(a2, "lastEstimatedDoTAngleRad", *((float *)this + 37));
LABEL_17:
  uint64_t v15 = (float *)*((void *)this + 7);
  uint64_t v16 = (float *)*((void *)this + 8);
  while (v15 != v16)
  {
    float v17 = *v15++;
    PB::TextFormatter::format(a2, "lpfInertialRotationRate", v17);
  }
  uint64_t v18 = (float *)*((void *)this + 10);
  uint64_t v19 = (float *)*((void *)this + 11);
  while (v18 != v19)
  {
    float v20 = *v18++;
    PB::TextFormatter::format(a2, "lpfInertialUserAccel", v20);
  }
  __int16 v21 = *((_WORD *)this + 84);
  if ((v21 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "newDisambiguation", *((unsigned char *)this + 164));
    __int16 v21 = *((_WORD *)this + 84);
    if ((v21 & 0x40) == 0)
    {
LABEL_23:
      if ((v21 & 0x80) == 0) {
        goto LABEL_24;
      }
      goto LABEL_35;
    }
  }
  else if ((v21 & 0x40) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(a2, "numAbortedPeaks", *((_DWORD *)this + 38));
  __int16 v21 = *((_WORD *)this + 84);
  if ((v21 & 0x80) == 0)
  {
LABEL_24:
    if ((v21 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "numLargeYawDetections", *((_DWORD *)this + 39));
  __int16 v21 = *((_WORD *)this + 84);
  if ((v21 & 0x100) == 0)
  {
LABEL_25:
    if ((v21 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "stateFSM", *((_DWORD *)this + 40));
  if ((*((_WORD *)this + 84) & 2) != 0) {
LABEL_26:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 16));
LABEL_27:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::DoTEstimatorHandSwing::readFrom(CMMsl::DoTEstimatorHandSwing *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 32);
    uint64_t v9 = (void **)((char *)this + 8);
    unint64_t v185 = (char *)this + 24;
    v186 = (char *)this + 48;
    uint64_t v10 = (void **)((char *)this + 56);
    uint64_t v11 = (char *)this + 72;
    uint64_t v12 = (void **)((char *)this + 80);
    float v13 = (char *)this + 96;
    while (1)
    {
      uint64_t v14 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        unint64_t v18 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v19 = *(unsigned char *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v2 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v26 = v17 & 7;
      if (v26 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *((_WORD *)this + 84) |= 2u;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)a2 + 2)) {
            goto LABEL_287;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v27);
          goto LABEL_53;
        case 2u:
          if (v26 != 2)
          {
            unint64_t v135 = (char *)*((void *)this + 11);
            unint64_t v134 = *((void *)this + 12);
            if ((unint64_t)v135 >= v134)
            {
              int v162 = (char *)*v12;
              uint64_t v163 = (v135 - (unsigned char *)*v12) >> 2;
              unint64_t v164 = v163 + 1;
              if ((unint64_t)(v163 + 1) >> 62) {
LABEL_303:
              }
                sub_10000EE98();
              uint64_t v165 = v134 - (void)v162;
              if (v165 >> 1 > v164) {
                unint64_t v164 = v165 >> 1;
              }
              if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v166 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v166 = v164;
              }
              if (v166)
              {
                char v167 = (char *)sub_100024458((uint64_t)v13, v166);
                int v162 = (char *)*((void *)this + 10);
                unint64_t v135 = (char *)*((void *)this + 11);
              }
              else
              {
                char v167 = 0;
              }
              int v178 = &v167[4 * v163];
              *(_DWORD *)int v178 = 0;
              unint64_t v127 = v178 + 4;
              while (v135 != v162)
              {
                int v179 = *((_DWORD *)v135 - 1);
                v135 -= 4;
                *((_DWORD *)v178 - 1) = v179;
                v178 -= 4;
              }
              *((void *)this + 10) = v178;
              *((void *)this + 11) = v127;
              *((void *)this + 12) = &v167[4 * v166];
              if (v162) {
                operator delete(v162);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v135 = 0;
              unint64_t v127 = v135 + 4;
            }
            *((void *)this + 11) = v127;
            goto LABEL_285;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v71 = *((void *)a2 + 1);
          unint64_t v72 = *((void *)a2 + 2);
          while (v71 < v72 && !*((unsigned char *)a2 + 24))
          {
            int v74 = (char *)*((void *)this + 11);
            unint64_t v73 = *((void *)this + 12);
            if ((unint64_t)v74 >= v73)
            {
              int v76 = (char *)*v12;
              uint64_t v77 = (v74 - (unsigned char *)*v12) >> 2;
              unint64_t v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 62) {
                goto LABEL_303;
              }
              uint64_t v79 = v73 - (void)v76;
              if (v79 >> 1 > v78) {
                unint64_t v78 = v79 >> 1;
              }
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v78;
              }
              if (v80)
              {
                unint64_t v81 = (char *)sub_100024458((uint64_t)v13, v80);
                int v76 = (char *)*((void *)this + 10);
                int v74 = (char *)*((void *)this + 11);
              }
              else
              {
                unint64_t v81 = 0;
              }
              int v82 = &v81[4 * v77];
              *(_DWORD *)int v82 = 0;
              char v75 = v82 + 4;
              while (v74 != v76)
              {
                int v83 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v82 - 1) = v83;
                v82 -= 4;
              }
              *((void *)this + 10) = v82;
              *((void *)this + 11) = v75;
              *((void *)this + 12) = &v81[4 * v80];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(_DWORD *)int v74 = 0;
              char v75 = v74 + 4;
            }
            *((void *)this + 11) = v75;
            unint64_t v84 = *((void *)a2 + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)a2 + 2)) {
              goto LABEL_169;
            }
            *(v75 - 1) = *(_DWORD *)(*(void *)a2 + v84);
            unint64_t v72 = *((void *)a2 + 2);
            unint64_t v71 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v71;
          }
          goto LABEL_170;
        case 3u:
          if (v26 != 2)
          {
            uint64_t v126 = (char *)*((void *)this + 8);
            unint64_t v125 = *((void *)this + 9);
            if ((unint64_t)v126 >= v125)
            {
              uint64_t v150 = (char *)*v10;
              uint64_t v151 = (v126 - (unsigned char *)*v10) >> 2;
              unint64_t v152 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 62) {
LABEL_301:
              }
                sub_10000EE98();
              uint64_t v153 = v125 - (void)v150;
              if (v153 >> 1 > v152) {
                unint64_t v152 = v153 >> 1;
              }
              if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v154 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v154 = v152;
              }
              if (v154)
              {
                char v155 = (char *)sub_100024458((uint64_t)v11, v154);
                uint64_t v150 = (char *)*((void *)this + 7);
                uint64_t v126 = (char *)*((void *)this + 8);
              }
              else
              {
                char v155 = 0;
              }
              v174 = &v155[4 * v151];
              *(_DWORD *)v174 = 0;
              unint64_t v127 = v174 + 4;
              while (v126 != v150)
              {
                int v175 = *((_DWORD *)v126 - 1);
                v126 -= 4;
                *((_DWORD *)v174 - 1) = v175;
                v174 -= 4;
              }
              *((void *)this + 7) = v174;
              *((void *)this + 8) = v127;
              *((void *)this + 9) = &v155[4 * v154];
              if (v150) {
                operator delete(v150);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v126 = 0;
              unint64_t v127 = v126 + 4;
            }
            *((void *)this + 8) = v127;
            goto LABEL_285;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          while (v28 < v29 && !*((unsigned char *)a2 + 24))
          {
            char v31 = (char *)*((void *)this + 8);
            unint64_t v30 = *((void *)this + 9);
            if ((unint64_t)v31 >= v30)
            {
              uint64_t v33 = (char *)*v10;
              uint64_t v34 = (v31 - (unsigned char *)*v10) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_301;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                uint64_t v38 = (char *)sub_100024458((uint64_t)v11, v37);
                uint64_t v33 = (char *)*((void *)this + 7);
                char v31 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v38 = 0;
              }
              unint64_t v39 = &v38[4 * v34];
              *(_DWORD *)unint64_t v39 = 0;
              uint64_t v32 = v39 + 4;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *((void *)this + 7) = v39;
              *((void *)this + 8) = v32;
              *((void *)this + 9) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)char v31 = 0;
              uint64_t v32 = v31 + 4;
            }
            *((void *)this + 8) = v32;
            unint64_t v41 = *((void *)a2 + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2)) {
              goto LABEL_169;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
            unint64_t v29 = *((void *)a2 + 2);
            unint64_t v28 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v28;
          }
          goto LABEL_170;
        case 4u:
          *((_WORD *)this + 84) |= 0x20u;
          unint64_t v85 = *((void *)a2 + 1);
          if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)a2 + 2)) {
            goto LABEL_287;
          }
          *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v85);
          goto LABEL_289;
        case 5u:
          *((_WORD *)this + 84) |= 1u;
          unint64_t v42 = *((void *)a2 + 1);
          if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((void *)a2 + 2)) {
            goto LABEL_287;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v42);
LABEL_53:
          uint64_t v43 = *((void *)a2 + 1) + 8;
          goto LABEL_290;
        case 6u:
          *((_WORD *)this + 84) |= 0x100u;
          unint64_t v86 = *((void *)a2 + 1);
          unint64_t v87 = *((void *)a2 + 2);
          uint64_t v88 = *(void *)a2;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            char v89 = 0;
            unsigned int v90 = 0;
            uint64_t v91 = 0;
            do
            {
              unint64_t v92 = v86 + 1;
              *((void *)a2 + 1) = v86 + 1;
              char v93 = *(unsigned char *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0) {
                goto LABEL_250;
              }
              v89 += 7;
              unint64_t v86 = v92;
              BOOL v20 = v90++ > 8;
            }
            while (!v20);
LABEL_192:
            LODWORD(v91) = 0;
            goto LABEL_250;
          }
          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v91 = 0;
          if (v87 <= v86) {
            unint64_t v87 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v87 == v86)
            {
              LODWORD(v91) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v138 = v86 + 1;
              char v139 = *(unsigned char *)(v88 + v86);
              *((void *)a2 + 1) = v138;
              v91 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                unint64_t v86 = v138;
                BOOL v20 = v137++ > 8;
                if (v20) {
                  goto LABEL_192;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v91) = 0;
              }
            }
            break;
          }
LABEL_250:
          *((_DWORD *)this + 40) = v91;
          goto LABEL_291;
        case 7u:
          operator new();
        case 8u:
          operator new();
        case 9u:
          *((_WORD *)this + 84) |= 0x10u;
          unint64_t v94 = *((void *)a2 + 1);
          unint64_t v95 = *((void *)a2 + 2);
          uint64_t v96 = *(void *)a2;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            char v97 = 0;
            unsigned int v98 = 0;
            uint64_t v99 = 0;
            do
            {
              unint64_t v100 = v94 + 1;
              *((void *)a2 + 1) = v94 + 1;
              char v101 = *(unsigned char *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0) {
                goto LABEL_253;
              }
              v97 += 7;
              unint64_t v94 = v100;
              BOOL v20 = v98++ > 8;
            }
            while (!v20);
LABEL_199:
            LODWORD(v99) = 0;
            goto LABEL_253;
          }
          char v140 = 0;
          unsigned int v141 = 0;
          uint64_t v99 = 0;
          if (v95 <= v94) {
            unint64_t v95 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v95 == v94)
            {
              LODWORD(v99) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v142 = v94 + 1;
              char v143 = *(unsigned char *)(v96 + v94);
              *((void *)a2 + 1) = v142;
              v99 |= (unint64_t)(v143 & 0x7F) << v140;
              if (v143 < 0)
              {
                v140 += 7;
                unint64_t v94 = v142;
                BOOL v20 = v141++ > 8;
                if (v20) {
                  goto LABEL_199;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v99) = 0;
              }
            }
            break;
          }
LABEL_253:
          *((_DWORD *)this + 36) = v99;
          goto LABEL_291;
        case 0xAu:
          *((_WORD *)this + 84) |= 0x200u;
          unint64_t v44 = *((void *)a2 + 1);
          if (v44 >= *((void *)a2 + 2))
          {
            BOOL v47 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v45 = v44 + 1;
            int v46 = *(unsigned __int8 *)(*(void *)a2 + v44);
            *((void *)a2 + 1) = v45;
            BOOL v47 = v46 != 0;
          }
          *((unsigned char *)this + 164) = v47;
          goto LABEL_291;
        case 0xBu:
          *((_WORD *)this + 84) |= 4u;
          unint64_t v102 = *((void *)a2 + 1);
          if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((void *)a2 + 2)) {
            goto LABEL_287;
          }
          *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v102);
          goto LABEL_289;
        case 0xCu:
          *((_WORD *)this + 84) |= 8u;
          unint64_t v48 = *((void *)a2 + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2)) {
            goto LABEL_287;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v48);
          goto LABEL_289;
        case 0xDu:
          *((_WORD *)this + 84) |= 0x40u;
          unint64_t v49 = *((void *)a2 + 1);
          unint64_t v50 = *((void *)a2 + 2);
          uint64_t v51 = *(void *)a2;
          if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
          {
            char v52 = 0;
            unsigned int v53 = 0;
            uint64_t v54 = 0;
            do
            {
              unint64_t v55 = v49 + 1;
              *((void *)a2 + 1) = v49 + 1;
              char v56 = *(unsigned char *)(v51 + v49);
              v54 |= (unint64_t)(v56 & 0x7F) << v52;
              if ((v56 & 0x80) == 0) {
                goto LABEL_247;
              }
              v52 += 7;
              unint64_t v49 = v55;
              BOOL v20 = v53++ > 8;
            }
            while (!v20);
LABEL_181:
            LODWORD(v54) = 0;
            goto LABEL_247;
          }
          char v128 = 0;
          unsigned int v129 = 0;
          uint64_t v54 = 0;
          if (v50 <= v49) {
            unint64_t v50 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v50 == v49)
            {
              LODWORD(v54) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v130 = v49 + 1;
              char v131 = *(unsigned char *)(v51 + v49);
              *((void *)a2 + 1) = v130;
              v54 |= (unint64_t)(v131 & 0x7F) << v128;
              if (v131 < 0)
              {
                v128 += 7;
                unint64_t v49 = v130;
                BOOL v20 = v129++ > 8;
                if (v20) {
                  goto LABEL_181;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v54) = 0;
              }
            }
            break;
          }
LABEL_247:
          *((_DWORD *)this + 38) = v54;
          goto LABEL_291;
        case 0xEu:
          *((_WORD *)this + 84) |= 0x80u;
          unint64_t v103 = *((void *)a2 + 1);
          unint64_t v104 = *((void *)a2 + 2);
          uint64_t v105 = *(void *)a2;
          if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
          {
            char v106 = 0;
            unsigned int v107 = 0;
            uint64_t v108 = 0;
            do
            {
              unint64_t v109 = v103 + 1;
              *((void *)a2 + 1) = v103 + 1;
              char v110 = *(unsigned char *)(v105 + v103);
              v108 |= (unint64_t)(v110 & 0x7F) << v106;
              if ((v110 & 0x80) == 0) {
                goto LABEL_256;
              }
              v106 += 7;
              unint64_t v103 = v109;
              BOOL v20 = v107++ > 8;
            }
            while (!v20);
LABEL_206:
            LODWORD(v108) = 0;
            goto LABEL_256;
          }
          char v144 = 0;
          unsigned int v145 = 0;
          uint64_t v108 = 0;
          if (v104 <= v103) {
            unint64_t v104 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v104 == v103)
            {
              LODWORD(v108) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v146 = v103 + 1;
              char v147 = *(unsigned char *)(v105 + v103);
              *((void *)a2 + 1) = v146;
              v108 |= (unint64_t)(v147 & 0x7F) << v144;
              if (v147 < 0)
              {
                v144 += 7;
                unint64_t v103 = v146;
                BOOL v20 = v145++ > 8;
                if (v20) {
                  goto LABEL_206;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v108) = 0;
              }
            }
            break;
          }
LABEL_256:
          *((_DWORD *)this + 39) = v108;
          goto LABEL_291;
        case 0xFu:
          if (v26 != 2)
          {
            unint64_t v133 = (char *)*((void *)this + 2);
            unint64_t v132 = *((void *)this + 3);
            if ((unint64_t)v133 >= v132)
            {
              uint64_t v156 = (char *)*v9;
              uint64_t v157 = (v133 - (unsigned char *)*v9) >> 2;
              unint64_t v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62) {
LABEL_302:
              }
                sub_10000EE98();
              uint64_t v159 = v132 - (void)v156;
              if (v159 >> 1 > v158) {
                unint64_t v158 = v159 >> 1;
              }
              if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v160 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v160 = v158;
              }
              if (v160)
              {
                unsigned int v161 = (char *)sub_100024458((uint64_t)v185, v160);
                uint64_t v156 = (char *)*((void *)this + 1);
                unint64_t v133 = (char *)*((void *)this + 2);
              }
              else
              {
                unsigned int v161 = 0;
              }
              int v176 = &v161[4 * v157];
              *(_DWORD *)int v176 = 0;
              unint64_t v127 = v176 + 4;
              while (v133 != v156)
              {
                int v177 = *((_DWORD *)v133 - 1);
                v133 -= 4;
                *((_DWORD *)v176 - 1) = v177;
                v176 -= 4;
              }
              *((void *)this + 1) = v176;
              *((void *)this + 2) = v127;
              *((void *)this + 3) = &v161[4 * v160];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v133 = 0;
              unint64_t v127 = v133 + 4;
            }
            *((void *)this + 2) = v127;
            goto LABEL_285;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v57 = *((void *)a2 + 1);
          unint64_t v58 = *((void *)a2 + 2);
          while (v57 < v58 && !*((unsigned char *)a2 + 24))
          {
            char v60 = (char *)*((void *)this + 2);
            unint64_t v59 = *((void *)this + 3);
            if ((unint64_t)v60 >= v59)
            {
              uint64_t v62 = (char *)*v9;
              uint64_t v63 = (v60 - (unsigned char *)*v9) >> 2;
              unint64_t v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 62) {
                goto LABEL_302;
              }
              uint64_t v65 = v59 - (void)v62;
              if (v65 >> 1 > v64) {
                unint64_t v64 = v65 >> 1;
              }
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v66 = v64;
              }
              if (v66)
              {
                unint64_t v67 = (char *)sub_100024458((uint64_t)v185, v66);
                uint64_t v62 = (char *)*((void *)this + 1);
                char v60 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v67 = 0;
              }
              uint64_t v68 = &v67[4 * v63];
              *(_DWORD *)uint64_t v68 = 0;
              char v61 = v68 + 4;
              while (v60 != v62)
              {
                int v69 = *((_DWORD *)v60 - 1);
                v60 -= 4;
                *((_DWORD *)v68 - 1) = v69;
                v68 -= 4;
              }
              *((void *)this + 1) = v68;
              *((void *)this + 2) = v61;
              *((void *)this + 3) = &v67[4 * v66];
              if (v62) {
                operator delete(v62);
              }
            }
            else
            {
              *(_DWORD *)char v60 = 0;
              char v61 = v60 + 4;
            }
            *((void *)this + 2) = v61;
            unint64_t v70 = *((void *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)a2 + 2)) {
              goto LABEL_169;
            }
            *(v61 - 1) = *(_DWORD *)(*(void *)a2 + v70);
            unint64_t v58 = *((void *)a2 + 2);
            unint64_t v57 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v57;
          }
          goto LABEL_170;
        case 0x10u:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v111 = *((void *)a2 + 1);
            unint64_t v112 = *((void *)a2 + 2);
            while (v111 < v112 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v114 = (char *)*((void *)this + 5);
              unint64_t v113 = *((void *)this + 6);
              if ((unint64_t)v114 >= v113)
              {
                unint64_t v116 = (char *)*v8;
                uint64_t v117 = (v114 - (unsigned char *)*v8) >> 2;
                unint64_t v118 = v117 + 1;
                if ((unint64_t)(v117 + 1) >> 62) {
                  goto LABEL_304;
                }
                uint64_t v119 = v113 - (void)v116;
                if (v119 >> 1 > v118) {
                  unint64_t v118 = v119 >> 1;
                }
                if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v120 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v120 = v118;
                }
                if (v120)
                {
                  unint64_t v121 = (char *)sub_100024458((uint64_t)v186, v120);
                  unint64_t v116 = (char *)*((void *)this + 4);
                  unint64_t v114 = (char *)*((void *)this + 5);
                }
                else
                {
                  unint64_t v121 = 0;
                }
                unint64_t v122 = &v121[4 * v117];
                *(_DWORD *)unint64_t v122 = 0;
                unint64_t v115 = v122 + 4;
                while (v114 != v116)
                {
                  int v123 = *((_DWORD *)v114 - 1);
                  v114 -= 4;
                  *((_DWORD *)v122 - 1) = v123;
                  v122 -= 4;
                }
                *((void *)this + 4) = v122;
                *((void *)this + 5) = v115;
                *((void *)this + 6) = &v121[4 * v120];
                if (v116) {
                  operator delete(v116);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v114 = 0;
                unint64_t v115 = v114 + 4;
              }
              *((void *)this + 5) = v115;
              unint64_t v124 = *((void *)a2 + 1);
              if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((void *)a2 + 2))
              {
LABEL_169:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v115 - 1) = *(_DWORD *)(*(void *)a2 + v124);
              unint64_t v112 = *((void *)a2 + 2);
              unint64_t v111 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v111;
            }
LABEL_170:
            PB::Reader::recallMark();
          }
          else
          {
            unsigned int v149 = (char *)*((void *)this + 5);
            unint64_t v148 = *((void *)this + 6);
            if ((unint64_t)v149 >= v148)
            {
              int v168 = (char *)*v8;
              uint64_t v169 = (v149 - (unsigned char *)*v8) >> 2;
              unint64_t v170 = v169 + 1;
              if ((unint64_t)(v169 + 1) >> 62) {
LABEL_304:
              }
                sub_10000EE98();
              uint64_t v171 = v148 - (void)v168;
              if (v171 >> 1 > v170) {
                unint64_t v170 = v171 >> 1;
              }
              if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v172 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v172 = v170;
              }
              if (v172)
              {
                unint64_t v173 = (char *)sub_100024458((uint64_t)v186, v172);
                int v168 = (char *)*((void *)this + 4);
                unsigned int v149 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v173 = 0;
              }
              int v180 = &v173[4 * v169];
              *(_DWORD *)int v180 = 0;
              unint64_t v127 = v180 + 4;
              while (v149 != v168)
              {
                int v181 = *((_DWORD *)v149 - 1);
                v149 -= 4;
                *((_DWORD *)v180 - 1) = v181;
                v180 -= 4;
              }
              *((void *)this + 4) = v180;
              *((void *)this + 5) = v127;
              *((void *)this + 6) = &v173[4 * v172];
              if (v168) {
                operator delete(v168);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v149 = 0;
              unint64_t v127 = v149 + 4;
            }
            *((void *)this + 5) = v127;
LABEL_285:
            unint64_t v182 = *((void *)a2 + 1);
            if (v182 <= 0xFFFFFFFFFFFFFFFBLL && v182 + 4 <= *((void *)a2 + 2))
            {
              *(v127 - 1) = *(_DWORD *)(*(void *)a2 + v182);
LABEL_289:
              uint64_t v43 = *((void *)a2 + 1) + 4;
LABEL_290:
              *((void *)a2 + 1) = v43;
            }
            else
            {
LABEL_287:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_291:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v17 >> 3, v26, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_291;
      }
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v17 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v23 = v2 + 1;
      char v24 = *(unsigned char *)(v14 + v2);
      *((void *)a2 + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SwingDoTCandidate::SwingDoTCandidate(uint64_t this)
{
  *(void *)this = off_1003A96F8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A96F8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::DoTEstimatorHandSwing::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(_WORD *)(this + 168) & 2) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 128), 1u);
  }
  int v4 = *(float **)(v3 + 80);
  __int16 v5 = *(float **)(v3 + 88);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  uint64_t v7 = *(float **)(v3 + 56);
  float v8 = *(float **)(v3 + 64);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  __int16 v10 = *(_WORD *)(v3 + 168);
  if ((v10 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 148), 4u);
    __int16 v10 = *(_WORD *)(v3 + 168);
    if ((v10 & 1) == 0)
    {
LABEL_11:
      if ((v10 & 0x100) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else if ((v10 & 1) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 5u);
  if ((*(_WORD *)(v3 + 168) & 0x100) != 0) {
LABEL_12:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 160), 6u);
LABEL_13:
  uint64_t v11 = *(const PB::Base **)(v3 + 104);
  if (v11) {
    this = PB::Writer::writeSubmessage(a2, v11, 7u);
  }
  uint64_t v12 = *(const PB::Base **)(v3 + 112);
  if (v12) {
    this = PB::Writer::writeSubmessage(a2, v12, 8u);
  }
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 144), 9u);
    __int16 v13 = *(_WORD *)(v3 + 168);
    if ((v13 & 0x200) == 0)
    {
LABEL_19:
      if ((v13 & 4) == 0) {
        goto LABEL_20;
      }
      goto LABEL_36;
    }
  }
  else if ((*(_WORD *)(v3 + 168) & 0x200) == 0)
  {
    goto LABEL_19;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 164), 0xAu);
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 4) == 0)
  {
LABEL_20:
    if ((v13 & 8) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0xBu);
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 8) == 0)
  {
LABEL_21:
    if ((v13 & 0x40) == 0) {
      goto LABEL_22;
    }
LABEL_38:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0xDu);
    if ((*(_WORD *)(v3 + 168) & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0xCu);
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x40) != 0) {
    goto LABEL_38;
  }
LABEL_22:
  if ((v13 & 0x80) != 0) {
LABEL_23:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 156), 0xEu);
LABEL_24:
  uint64_t v14 = *(float **)(v3 + 8);
  char v15 = *(float **)(v3 + 16);
  while (v14 != v15)
  {
    float v16 = *v14++;
    this = PB::Writer::write(a2, v16, 0xFu);
  }
  unint64_t v18 = *(float **)(v3 + 32);
  unint64_t v17 = *(float **)(v3 + 40);
  while (v18 != v17)
  {
    float v19 = *v18++;
    this = PB::Writer::write(a2, v19, 0x10u);
  }
  return this;
}

BOOL CMMsl::DoTEstimatorHandSwing::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a1 + 168);
  __int16 v5 = *(_WORD *)(a2 + 168);
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  uint64_t v7 = *(float **)(a1 + 80);
  float v6 = *(float **)(a1 + 88);
  float v8 = *(float **)(a2 + 80);
  if ((char *)v6 - (char *)v7 != *(void *)(a2 + 88) - (void)v8) {
    return 0;
  }
  while (v7 != v6)
  {
    if (*v7 != *v8) {
      return 0;
    }
    ++v7;
    ++v8;
  }
  __int16 v10 = *(float **)(a1 + 56);
  float v9 = *(float **)(a1 + 64);
  uint64_t v11 = *(float **)(a2 + 56);
  if ((char *)v9 - (char *)v10 != *(void *)(a2 + 64) - (void)v11) {
    return 0;
  }
  while (v10 != v9)
  {
    if (*v10 != *v11) {
      return 0;
    }
    ++v10;
    ++v11;
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if (v4)
  {
    if ((v5 & 1) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 168) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 168) & 0x100) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 168) & 0x100) != 0)
  {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a2 + 104);
  if (v12)
  {
    if (!v13 || !CMMsl::SwingDoTCandidate::operator==(v12, v13)) {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v15 = *(void *)(a2 + 112);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_39;
    }
    return 0;
  }
  if (!v15 || !CMMsl::SwingDoTCandidate::operator==(v14, v15)) {
    return 0;
  }
LABEL_39:
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v4 & 0x200) != 0)
  {
    if ((v5 & 0x200) == 0 || *(unsigned __int8 *)(a1 + 164) != *(unsigned __int8 *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v5 & 0x200) != 0)
  {
    return 0;
  }
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v4 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  unint64_t v17 = *(float **)(a1 + 8);
  float v16 = *(float **)(a1 + 16);
  unint64_t v18 = *(float **)(a2 + 8);
  if ((char *)v16 - (char *)v17 != *(void *)(a2 + 16) - (void)v18) {
    return 0;
  }
  while (v17 != v16)
  {
    if (*v17 != *v18) {
      return 0;
    }
    ++v17;
    ++v18;
  }
  uint64_t v20 = *(void *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 40);
  char v21 = *(float **)(a2 + 32);
  if (v19 - v20 != *(void *)(a2 + 40) - (void)v21) {
    return 0;
  }
  if (v20 == v19) {
    return 1;
  }
  uint64_t v22 = v20 + 4;
  do
  {
    float v23 = *v21++;
    BOOL result = *(float *)(v22 - 4) == v23;
    BOOL v25 = *(float *)(v22 - 4) != v23 || v22 == v19;
    v22 += 4;
  }
  while (!v25);
  return result;
}

BOOL CMMsl::SwingDoTCandidate::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

unint64_t CMMsl::DoTEstimatorHandSwing::hash_value(CMMsl::DoTEstimatorHandSwing *this)
{
  if ((*((_WORD *)this + 84) & 2) != 0)
  {
    if (*((double *)this + 16) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 16);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  __int16 v5 = *((_WORD *)this + 84);
  if ((v5 & 0x20) != 0)
  {
    float v9 = *((float *)this + 37);
    if (v9 == 0.0) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = LODWORD(v9);
    }
    if (v5)
    {
LABEL_8:
      if (*((double *)this + 15) == 0.0) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = *((void *)this + 15);
      }
      if ((*((_WORD *)this + 84) & 0x100) != 0) {
        goto LABEL_12;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (v5) {
      goto LABEL_8;
    }
  }
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 84) & 0x100) != 0)
  {
LABEL_12:
    uint64_t v8 = *((int *)this + 40);
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v8 = 0;
LABEL_19:
  __int16 v10 = (CMMsl::SwingDoTCandidate *)*((void *)this + 13);
  if (v10) {
    uint64_t v11 = CMMsl::SwingDoTCandidate::hash_value(v10);
  }
  else {
    uint64_t v11 = 0;
  }
  unint64_t v12 = *((void *)this + 14);
  if (v12) {
    unint64_t v12 = CMMsl::SwingDoTCandidate::hash_value((CMMsl::SwingDoTCandidate *)v12);
  }
  if ((v5 & 0x10) != 0)
  {
    uint64_t v13 = *((int *)this + 36);
    if ((v5 & 0x200) != 0)
    {
LABEL_26:
      uint64_t v14 = *((unsigned __int8 *)this + 164);
      if ((v5 & 4) != 0) {
        goto LABEL_27;
      }
LABEL_37:
      uint64_t v16 = 0;
      if ((v5 & 8) != 0) {
        goto LABEL_30;
      }
LABEL_38:
      uint64_t v18 = 0;
      if ((v5 & 0x40) != 0) {
        goto LABEL_33;
      }
LABEL_39:
      uint64_t v19 = 0;
      if ((v5 & 0x80) != 0) {
        goto LABEL_34;
      }
LABEL_40:
      uint64_t v20 = 0;
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v13 = 0;
    if ((v5 & 0x200) != 0) {
      goto LABEL_26;
    }
  }
  uint64_t v14 = 0;
  if ((v5 & 4) == 0) {
    goto LABEL_37;
  }
LABEL_27:
  float v15 = *((float *)this + 34);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v5 & 8) == 0) {
    goto LABEL_38;
  }
LABEL_30:
  float v17 = *((float *)this + 35);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v5 & 0x40) == 0) {
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v19 = *((int *)this + 38);
  if ((v5 & 0x80) == 0) {
    goto LABEL_40;
  }
LABEL_34:
  uint64_t v20 = *((int *)this + 39);
LABEL_41:
  unint64_t v21 = v3 ^ v2 ^ v4 ^ v6 ^ v7 ^ v8 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v19;
  uint64_t v22 = v20 ^ PBHashBytes();
  return v21 ^ v22 ^ PBHashBytes();
}

uint64_t CMMsl::DoTEstimatorHandSwing::makeCandidateA(uint64_t this)
{
  if (!*(void *)(this + 104)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::DoTEstimatorHandSwing::makeCandidateB(uint64_t this)
{
  if (!*(void *)(this + 112)) {
    operator new();
  }
  return this;
}

double CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(CMMsl::DoTEstimatorWithTNB *this)
{
  *(void *)this = off_1003A54B0;
  *((_DWORD *)this + 51) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A54B0;
  *((_DWORD *)this + 51) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  return result;
}

void CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB(CMMsl::DoTEstimatorWithTNB *this)
{
  *(void *)this = off_1003A54B0;
  uint64_t v2 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  __int16 v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 14) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 10);
  if (v6)
  {
    *((void *)this + 11) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 8) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 4);
  if (v8)
  {
    *((void *)this + 5) = v8;
    operator delete(v8);
  }
  float v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    *((void *)this + 2) = v9;
    operator delete(v9);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB(this);

  operator delete();
}

CMMsl::DoTEstimatorWithTNB *CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(CMMsl::DoTEstimatorWithTNB *this, const CMMsl::DoTEstimatorWithTNB *a2)
{
  *(void *)this = off_1003A54B0;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  __int16 v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v6 = (char *)this + 104;
  *(_OWORD *)((char *)this + 152) = 0u;
  uint64_t v7 = (char *)this + 152;
  *((_DWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  if (*((unsigned char *)a2 + 204))
  {
    uint64_t v8 = *((void *)a2 + 23);
    *((unsigned char *)this + 204) = 1;
    *((void *)this + 23) = v8;
  }
  if (this != a2)
  {
    sub_100024308(v7, *((char **)a2 + 19), *((void *)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
    sub_100024308((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  char v9 = *((unsigned char *)a2 + 204);
  if ((v9 & 2) != 0)
  {
    int v13 = *((_DWORD *)a2 + 48);
    *((unsigned char *)this + 204) |= 2u;
    *((_DWORD *)this + 48) = v13;
    char v9 = *((unsigned char *)a2 + 204);
    if ((v9 & 8) == 0)
    {
LABEL_7:
      if ((v9 & 0x10) == 0) {
        goto LABEL_8;
      }
      goto LABEL_21;
    }
  }
  else if ((*((unsigned char *)a2 + 204) & 8) == 0)
  {
    goto LABEL_7;
  }
  char v14 = *((unsigned char *)a2 + 200);
  *((unsigned char *)this + 204) |= 8u;
  *((unsigned char *)this + 200) = v14;
  char v9 = *((unsigned char *)a2 + 204);
  if ((v9 & 0x10) == 0)
  {
LABEL_8:
    if ((v9 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_21:
  char v15 = *((unsigned char *)a2 + 201);
  *((unsigned char *)this + 204) |= 0x10u;
  *((unsigned char *)this + 201) = v15;
  if ((*((unsigned char *)a2 + 204) & 0x20) != 0)
  {
LABEL_9:
    char v10 = *((unsigned char *)a2 + 202);
    *((unsigned char *)this + 204) |= 0x20u;
    *((unsigned char *)this + 202) = v10;
  }
LABEL_10:
  if (*((void *)a2 + 22)) {
    operator new();
  }
  if (this != a2) {
    sub_100024308(v6, *((char **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
  }
  if ((*((unsigned char *)a2 + 204) & 4) != 0)
  {
    int v11 = *((_DWORD *)a2 + 49);
    *((unsigned char *)this + 204) |= 4u;
    *((_DWORD *)this + 49) = v11;
  }
  if (this != a2)
  {
    sub_100024308((char *)this + 128, *((char **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
    sub_100024308(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::DoTEstimatorWithTNB::operator=(CMMsl *a1, const CMMsl::DoTEstimatorWithTNB *a2)
{
  if (a1 != a2)
  {
    CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB((CMMsl::DoTEstimatorWithTNB *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorWithTNB *)v5, v3);
    CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB((CMMsl::DoTEstimatorWithTNB *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DoTEstimatorWithTNB *a2, CMMsl::DoTEstimatorWithTNB *a3)
{
  int v3 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v3;
  uint64_t v4 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v4;
  uint64_t v5 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v5;
  uint64_t v6 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v6;
  uint64_t v7 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v7;
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v9;
  uint64_t v10 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v10;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  uint64_t v16 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v16;
  LODWORD(v4) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v4;
  LOBYTE(v16) = *((unsigned char *)this + 200);
  *((unsigned char *)this + 200) = *((unsigned char *)a2 + 200);
  *((unsigned char *)a2 + 200) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 201);
  *((unsigned char *)this + 201) = *((unsigned char *)a2 + 201);
  *((unsigned char *)a2 + 201) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 202);
  *((unsigned char *)this + 202) = *((unsigned char *)a2 + 202);
  *((unsigned char *)a2 + 202) = v16;
  uint64_t v17 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v17;
  uint64_t v18 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v18;
  uint64_t v19 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v19;
  uint64_t v20 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v20;
  float result = *((float *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((float *)a2 + 49) = result;
  uint64_t v22 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v22;
  uint64_t v23 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v23;
  uint64_t v24 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v24;
  uint64_t v25 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v25;
  uint64_t v26 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v26;
  uint64_t v27 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v27;
  return result;
}

uint64_t CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A54B0;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v6 = a1 + 8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a2 + 204) = 0;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  sub_100274A30(a1 + 152, (__n128 *)(a2 + 152));
  sub_100274A30(v5, (__n128 *)(a2 + 80));
  sub_100274A30(v6, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
  *(unsigned char *)(a1 + 202) = *(unsigned char *)(a2 + 202);
  uint64_t v7 = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  uint64_t v8 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_100274A30(a1 + 104, (__n128 *)(a2 + 104));
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  sub_100274A30(a1 + 128, (__n128 *)(a2 + 128));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::DoTEstimatorWithTNB::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorWithTNB *)v5, v3);
    CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB((CMMsl::DoTEstimatorWithTNB *)v5);
  }
  return a1;
}

uint64_t CMMsl::DoTEstimatorWithTNB::formatText(CMMsl::DoTEstimatorWithTNB *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 22);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "TNBFrame");
  }
  if ((*((unsigned char *)this + 204) & 2) != 0) {
    PB::TextFormatter::format(a2, "dotQuality", *((float *)this + 48));
  }
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "dotVector", v8);
  }
  if ((*((unsigned char *)this + 204) & 8) != 0) {
    PB::TextFormatter::format(a2, "fusingGaze", *((unsigned char *)this + 200));
  }
  uint64_t v9 = (float *)*((void *)this + 4);
  uint64_t v10 = (float *)*((void *)this + 5);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(a2, "gazeVector", v11);
  }
  char v12 = *((unsigned char *)this + 204);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "hasStep", *((unsigned char *)this + 201));
    char v12 = *((unsigned char *)this + 204);
  }
  if ((v12 & 0x20) != 0) {
    PB::TextFormatter::format(a2, "hasValidTNBFrame", *((unsigned char *)this + 202));
  }
  uint64_t v13 = (float *)*((void *)this + 7);
  uint64_t v14 = (float *)*((void *)this + 8);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(a2, "lpfInertialRotationRate", v15);
  }
  uint64_t v16 = (float *)*((void *)this + 10);
  uint64_t v17 = (float *)*((void *)this + 11);
  while (v16 != v17)
  {
    float v18 = *v16++;
    PB::TextFormatter::format(a2, "lpfInertialUserAccel", v18);
  }
  uint64_t v19 = (float *)*((void *)this + 13);
  uint64_t v20 = (float *)*((void *)this + 14);
  while (v19 != v20)
  {
    float v21 = *v19++;
    PB::TextFormatter::format(a2, "rawDoTVector", v21);
  }
  uint64_t v22 = (float *)*((void *)this + 16);
  uint64_t v23 = (float *)*((void *)this + 17);
  while (v22 != v23)
  {
    float v24 = *v22++;
    PB::TextFormatter::format(a2, "rawInertialRotationRate", v24);
  }
  uint64_t v25 = (float *)*((void *)this + 19);
  uint64_t v26 = (float *)*((void *)this + 20);
  while (v25 != v26)
  {
    float v27 = *v25++;
    PB::TextFormatter::format(a2, "rawInertialUserAccel", v27);
  }
  char v28 = *((unsigned char *)this + 204);
  if ((v28 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "speed", *((float *)this + 49));
    char v28 = *((unsigned char *)this + 204);
  }
  if (v28) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 23));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::DoTEstimatorWithTNB::readFrom(CMMsl::DoTEstimatorWithTNB *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v219 = (char *)this + 72;
    v220 = (void **)((char *)this + 128);
    v221 = (void **)((char *)this + 56);
    float v8 = (void **)((char *)this + 104);
    v217 = (char *)this + 120;
    v218 = (char *)this + 144;
    uint64_t v9 = (void **)((char *)this + 32);
    uint64_t v10 = (void **)((char *)this + 8);
    v215 = (char *)this + 24;
    v216 = (char *)this + 48;
    float v11 = (void **)((char *)this + 80);
    char v12 = (void **)((char *)this + 152);
    v213 = (char *)this + 168;
    v214 = (char *)this + 96;
    while (1)
    {
      uint64_t v13 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 204) |= 1u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
            goto LABEL_338;
          }
          *((void *)this + 23) = *(void *)(*(void *)a2 + v26);
          uint64_t v27 = *((void *)a2 + 1) + 8;
          goto LABEL_341;
        case 2u:
          if (v25 != 2)
          {
            unsigned int v141 = (char *)*((void *)this + 20);
            unint64_t v140 = *((void *)this + 21);
            if ((unint64_t)v141 >= v140)
            {
              char v155 = (char *)*v12;
              uint64_t v156 = (v141 - (unsigned char *)*v12) >> 2;
              unint64_t v157 = v156 + 1;
              if ((unint64_t)(v156 + 1) >> 62) {
LABEL_350:
              }
                sub_10000EE98();
              uint64_t v158 = v140 - (void)v155;
              if (v158 >> 1 > v157) {
                unint64_t v157 = v158 >> 1;
              }
              if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v159 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v159 = v157;
              }
              if (v159)
              {
                unint64_t v160 = (char *)sub_100024458((uint64_t)v213, v159);
                char v155 = (char *)*((void *)this + 19);
                unsigned int v141 = (char *)*((void *)this + 20);
              }
              else
              {
                unint64_t v160 = 0;
              }
              v197 = &v160[4 * v156];
              *(_DWORD *)v197 = 0;
              unint64_t v142 = v197 + 4;
              while (v141 != v155)
              {
                int v198 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v197 - 1) = v198;
                v197 -= 4;
              }
              *((void *)this + 19) = v197;
              *((void *)this + 20) = v142;
              *((void *)this + 21) = &v160[4 * v159];
              if (v155) {
                operator delete(v155);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v141 = 0;
              unint64_t v142 = v141 + 4;
            }
            *((void *)this + 20) = v142;
            goto LABEL_336;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          while (v28 < v29 && !*((unsigned char *)a2 + 24))
          {
            char v31 = (char *)*((void *)this + 20);
            unint64_t v30 = *((void *)this + 21);
            if ((unint64_t)v31 >= v30)
            {
              uint64_t v33 = (char *)*v12;
              uint64_t v34 = (v31 - (unsigned char *)*v12) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_350;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                uint64_t v38 = (char *)sub_100024458((uint64_t)v213, v37);
                uint64_t v33 = (char *)*((void *)this + 19);
                char v31 = (char *)*((void *)this + 20);
              }
              else
              {
                uint64_t v38 = 0;
              }
              unint64_t v39 = &v38[4 * v34];
              *(_DWORD *)unint64_t v39 = 0;
              uint64_t v32 = v39 + 4;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *((void *)this + 19) = v39;
              *((void *)this + 20) = v32;
              *((void *)this + 21) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)char v31 = 0;
              uint64_t v32 = v31 + 4;
            }
            *((void *)this + 20) = v32;
            unint64_t v41 = *((void *)a2 + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2)) {
              goto LABEL_209;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
            unint64_t v29 = *((void *)a2 + 2);
            unint64_t v28 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v28;
          }
          goto LABEL_210;
        case 3u:
          if (v25 != 2)
          {
            char v144 = (char *)*((void *)this + 11);
            unint64_t v143 = *((void *)this + 12);
            if ((unint64_t)v144 >= v143)
            {
              unsigned int v161 = (char *)*v11;
              uint64_t v162 = (v144 - (unsigned char *)*v11) >> 2;
              unint64_t v163 = v162 + 1;
              if ((unint64_t)(v162 + 1) >> 62) {
LABEL_351:
              }
                sub_10000EE98();
              uint64_t v164 = v143 - (void)v161;
              if (v164 >> 1 > v163) {
                unint64_t v163 = v164 >> 1;
              }
              if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v165 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v165 = v163;
              }
              if (v165)
              {
                unint64_t v166 = (char *)sub_100024458((uint64_t)v214, v165);
                unsigned int v161 = (char *)*((void *)this + 10);
                char v144 = (char *)*((void *)this + 11);
              }
              else
              {
                unint64_t v166 = 0;
              }
              v199 = &v166[4 * v162];
              *(_DWORD *)v199 = 0;
              unint64_t v142 = v199 + 4;
              while (v144 != v161)
              {
                int v200 = *((_DWORD *)v144 - 1);
                v144 -= 4;
                *((_DWORD *)v199 - 1) = v200;
                v199 -= 4;
              }
              *((void *)this + 10) = v199;
              *((void *)this + 11) = v142;
              *((void *)this + 12) = &v166[4 * v165];
              if (v161) {
                operator delete(v161);
              }
            }
            else
            {
              *(_DWORD *)char v144 = 0;
              unint64_t v142 = v144 + 4;
            }
            *((void *)this + 11) = v142;
            goto LABEL_336;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          while (v42 < v43 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v45 = (char *)*((void *)this + 11);
            unint64_t v44 = *((void *)this + 12);
            if ((unint64_t)v45 >= v44)
            {
              BOOL v47 = (char *)*v11;
              uint64_t v48 = (v45 - (unsigned char *)*v11) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_351;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                char v52 = (char *)sub_100024458((uint64_t)v214, v51);
                BOOL v47 = (char *)*((void *)this + 10);
                unint64_t v45 = (char *)*((void *)this + 11);
              }
              else
              {
                char v52 = 0;
              }
              unsigned int v53 = &v52[4 * v48];
              *(_DWORD *)unsigned int v53 = 0;
              int v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *((void *)this + 10) = v53;
              *((void *)this + 11) = v46;
              *((void *)this + 12) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              int v46 = v45 + 4;
            }
            *((void *)this + 11) = v46;
            unint64_t v55 = *((void *)a2 + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
              goto LABEL_209;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)a2 + v55);
            unint64_t v43 = *((void *)a2 + 2);
            unint64_t v42 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v42;
          }
          goto LABEL_210;
        case 4u:
          if (v25 != 2)
          {
            unint64_t v146 = (char *)*((void *)this + 2);
            unint64_t v145 = *((void *)this + 3);
            if ((unint64_t)v146 >= v145)
            {
              char v167 = (char *)*v10;
              uint64_t v168 = (v146 - (unsigned char *)*v10) >> 2;
              unint64_t v169 = v168 + 1;
              if ((unint64_t)(v168 + 1) >> 62) {
LABEL_352:
              }
                sub_10000EE98();
              uint64_t v170 = v145 - (void)v167;
              if (v170 >> 1 > v169) {
                unint64_t v169 = v170 >> 1;
              }
              if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v171 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v171 = v169;
              }
              if (v171)
              {
                unint64_t v172 = (char *)sub_100024458((uint64_t)v215, v171);
                char v167 = (char *)*((void *)this + 1);
                unint64_t v146 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v172 = 0;
              }
              v201 = &v172[4 * v168];
              *(_DWORD *)v201 = 0;
              unint64_t v142 = v201 + 4;
              while (v146 != v167)
              {
                int v202 = *((_DWORD *)v146 - 1);
                v146 -= 4;
                *((_DWORD *)v201 - 1) = v202;
                v201 -= 4;
              }
              *((void *)this + 1) = v201;
              *((void *)this + 2) = v142;
              *((void *)this + 3) = &v172[4 * v171];
              if (v167) {
                operator delete(v167);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v146 = 0;
              unint64_t v142 = v146 + 4;
            }
            *((void *)this + 2) = v142;
            goto LABEL_336;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v56 = *((void *)a2 + 1);
          unint64_t v57 = *((void *)a2 + 2);
          while (v56 < v57 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v59 = (char *)*((void *)this + 2);
            unint64_t v58 = *((void *)this + 3);
            if ((unint64_t)v59 >= v58)
            {
              char v61 = (char *)*v10;
              uint64_t v62 = (v59 - (unsigned char *)*v10) >> 2;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62) {
                goto LABEL_352;
              }
              uint64_t v64 = v58 - (void)v61;
              if (v64 >> 1 > v63) {
                unint64_t v63 = v64 >> 1;
              }
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v63;
              }
              if (v65)
              {
                unint64_t v66 = (char *)sub_100024458((uint64_t)v215, v65);
                char v61 = (char *)*((void *)this + 1);
                unint64_t v59 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v66 = 0;
              }
              unint64_t v67 = &v66[4 * v62];
              *(_DWORD *)unint64_t v67 = 0;
              char v60 = v67 + 4;
              while (v59 != v61)
              {
                int v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *((void *)this + 1) = v67;
              *((void *)this + 2) = v60;
              *((void *)this + 3) = &v66[4 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v59 = 0;
              char v60 = v59 + 4;
            }
            *((void *)this + 2) = v60;
            unint64_t v69 = *((void *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2)) {
              goto LABEL_209;
            }
            *(v60 - 1) = *(_DWORD *)(*(void *)a2 + v69);
            unint64_t v57 = *((void *)a2 + 2);
            unint64_t v56 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v56;
          }
          goto LABEL_210;
        case 5u:
          if (v25 != 2)
          {
            unint64_t v148 = (char *)*((void *)this + 5);
            unint64_t v147 = *((void *)this + 6);
            if ((unint64_t)v148 >= v147)
            {
              unint64_t v173 = (char *)*v9;
              uint64_t v174 = (v148 - (unsigned char *)*v9) >> 2;
              unint64_t v175 = v174 + 1;
              if ((unint64_t)(v174 + 1) >> 62) {
LABEL_353:
              }
                sub_10000EE98();
              uint64_t v176 = v147 - (void)v173;
              if (v176 >> 1 > v175) {
                unint64_t v175 = v176 >> 1;
              }
              if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v177 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v177 = v175;
              }
              if (v177)
              {
                int v178 = (char *)sub_100024458((uint64_t)v216, v177);
                unint64_t v173 = (char *)*((void *)this + 4);
                unint64_t v148 = (char *)*((void *)this + 5);
              }
              else
              {
                int v178 = 0;
              }
              v203 = &v178[4 * v174];
              *(_DWORD *)v203 = 0;
              unint64_t v142 = v203 + 4;
              while (v148 != v173)
              {
                int v204 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *((_DWORD *)v203 - 1) = v204;
                v203 -= 4;
              }
              *((void *)this + 4) = v203;
              *((void *)this + 5) = v142;
              *((void *)this + 6) = &v178[4 * v177];
              if (v173) {
                operator delete(v173);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v148 = 0;
              unint64_t v142 = v148 + 4;
            }
            *((void *)this + 5) = v142;
            goto LABEL_336;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v70 = *((void *)a2 + 1);
          unint64_t v71 = *((void *)a2 + 2);
          while (v70 < v71 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v73 = (char *)*((void *)this + 5);
            unint64_t v72 = *((void *)this + 6);
            if ((unint64_t)v73 >= v72)
            {
              char v75 = (char *)*v9;
              uint64_t v76 = (v73 - (unsigned char *)*v9) >> 2;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62) {
                goto LABEL_353;
              }
              uint64_t v78 = v72 - (void)v75;
              if (v78 >> 1 > v77) {
                unint64_t v77 = v78 >> 1;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v77;
              }
              if (v79)
              {
                unint64_t v80 = (char *)sub_100024458((uint64_t)v216, v79);
                char v75 = (char *)*((void *)this + 4);
                unint64_t v73 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v80 = 0;
              }
              unint64_t v81 = &v80[4 * v76];
              *(_DWORD *)unint64_t v81 = 0;
              int v74 = v81 + 4;
              while (v73 != v75)
              {
                int v82 = *((_DWORD *)v73 - 1);
                v73 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *((void *)this + 4) = v81;
              *((void *)this + 5) = v74;
              *((void *)this + 6) = &v80[4 * v79];
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v73 = 0;
              int v74 = v73 + 4;
            }
            *((void *)this + 5) = v74;
            unint64_t v83 = *((void *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
              goto LABEL_209;
            }
            *(v74 - 1) = *(_DWORD *)(*(void *)a2 + v83);
            unint64_t v71 = *((void *)a2 + 2);
            unint64_t v70 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v70;
          }
          goto LABEL_210;
        case 6u:
          *((unsigned char *)this + 204) |= 2u;
          unint64_t v84 = *((void *)a2 + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)a2 + 2)) {
            goto LABEL_338;
          }
          *((_DWORD *)this + 48) = *(_DWORD *)(*(void *)a2 + v84);
          goto LABEL_340;
        case 7u:
          *((unsigned char *)this + 204) |= 8u;
          unint64_t v85 = *((void *)a2 + 1);
          if (v85 >= *((void *)a2 + 2))
          {
            BOOL v88 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v86 = v85 + 1;
            int v87 = *(unsigned __int8 *)(*(void *)a2 + v85);
            *((void *)a2 + 1) = v86;
            BOOL v88 = v87 != 0;
          }
          *((unsigned char *)this + 200) = v88;
          goto LABEL_342;
        case 8u:
          *((unsigned char *)this + 204) |= 0x10u;
          unint64_t v89 = *((void *)a2 + 1);
          if (v89 >= *((void *)a2 + 2))
          {
            BOOL v92 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v90 = v89 + 1;
            int v91 = *(unsigned __int8 *)(*(void *)a2 + v89);
            *((void *)a2 + 1) = v90;
            BOOL v92 = v91 != 0;
          }
          *((unsigned char *)this + 201) = v92;
          goto LABEL_342;
        case 9u:
          *((unsigned char *)this + 204) |= 0x20u;
          unint64_t v93 = *((void *)a2 + 1);
          if (v93 >= *((void *)a2 + 2))
          {
            BOOL v96 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v94 = v93 + 1;
            int v95 = *(unsigned __int8 *)(*(void *)a2 + v93);
            *((void *)a2 + 1) = v94;
            BOOL v96 = v95 != 0;
          }
          *((unsigned char *)this + 202) = v96;
          goto LABEL_342;
        case 0xAu:
          operator new();
        case 0xBu:
          if (v25 != 2)
          {
            uint64_t v150 = (char *)*((void *)this + 14);
            unint64_t v149 = *((void *)this + 15);
            if ((unint64_t)v150 >= v149)
            {
              int v179 = (char *)*v8;
              uint64_t v180 = (v150 - (unsigned char *)*v8) >> 2;
              unint64_t v181 = v180 + 1;
              if ((unint64_t)(v180 + 1) >> 62) {
LABEL_354:
              }
                sub_10000EE98();
              uint64_t v182 = v149 - (void)v179;
              if (v182 >> 1 > v181) {
                unint64_t v181 = v182 >> 1;
              }
              if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v183 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v183 = v181;
              }
              if (v183)
              {
                int v184 = (char *)sub_100024458((uint64_t)v217, v183);
                int v179 = (char *)*((void *)this + 13);
                uint64_t v150 = (char *)*((void *)this + 14);
              }
              else
              {
                int v184 = 0;
              }
              v205 = &v184[4 * v180];
              *(_DWORD *)v205 = 0;
              unint64_t v142 = v205 + 4;
              while (v150 != v179)
              {
                int v206 = *((_DWORD *)v150 - 1);
                v150 -= 4;
                *((_DWORD *)v205 - 1) = v206;
                v205 -= 4;
              }
              *((void *)this + 13) = v205;
              *((void *)this + 14) = v142;
              *((void *)this + 15) = &v184[4 * v183];
              if (v179) {
                operator delete(v179);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v150 = 0;
              unint64_t v142 = v150 + 4;
            }
            *((void *)this + 14) = v142;
            goto LABEL_336;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v97 = *((void *)a2 + 1);
          unint64_t v98 = *((void *)a2 + 2);
          while (v97 < v98 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v100 = (char *)*((void *)this + 14);
            unint64_t v99 = *((void *)this + 15);
            if ((unint64_t)v100 >= v99)
            {
              unint64_t v102 = (char *)*v8;
              uint64_t v103 = (v100 - (unsigned char *)*v8) >> 2;
              unint64_t v104 = v103 + 1;
              if ((unint64_t)(v103 + 1) >> 62) {
                goto LABEL_354;
              }
              uint64_t v105 = v99 - (void)v102;
              if (v105 >> 1 > v104) {
                unint64_t v104 = v105 >> 1;
              }
              if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v106 = v104;
              }
              if (v106)
              {
                unsigned int v107 = (char *)sub_100024458((uint64_t)v217, v106);
                unint64_t v102 = (char *)*((void *)this + 13);
                unint64_t v100 = (char *)*((void *)this + 14);
              }
              else
              {
                unsigned int v107 = 0;
              }
              uint64_t v108 = &v107[4 * v103];
              *(_DWORD *)uint64_t v108 = 0;
              char v101 = v108 + 4;
              while (v100 != v102)
              {
                int v109 = *((_DWORD *)v100 - 1);
                v100 -= 4;
                *((_DWORD *)v108 - 1) = v109;
                v108 -= 4;
              }
              *((void *)this + 13) = v108;
              *((void *)this + 14) = v101;
              *((void *)this + 15) = &v107[4 * v106];
              if (v102) {
                operator delete(v102);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v100 = 0;
              char v101 = v100 + 4;
            }
            *((void *)this + 14) = v101;
            unint64_t v110 = *((void *)a2 + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((void *)a2 + 2)) {
              goto LABEL_209;
            }
            *(v101 - 1) = *(_DWORD *)(*(void *)a2 + v110);
            unint64_t v98 = *((void *)a2 + 2);
            unint64_t v97 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v97;
          }
          goto LABEL_210;
        case 0xCu:
          *((unsigned char *)this + 204) |= 4u;
          unint64_t v111 = *((void *)a2 + 1);
          if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)a2 + 2)) {
            goto LABEL_338;
          }
          *((_DWORD *)this + 49) = *(_DWORD *)(*(void *)a2 + v111);
          goto LABEL_340;
        case 0xDu:
          if (v25 != 2)
          {
            unint64_t v152 = (char *)*((void *)this + 17);
            unint64_t v151 = *((void *)this + 18);
            if ((unint64_t)v152 >= v151)
            {
              unint64_t v185 = (char *)*v220;
              uint64_t v186 = (v152 - (unsigned char *)*v220) >> 2;
              unint64_t v187 = v186 + 1;
              if ((unint64_t)(v186 + 1) >> 62) {
LABEL_355:
              }
                sub_10000EE98();
              uint64_t v188 = v151 - (void)v185;
              if (v188 >> 1 > v187) {
                unint64_t v187 = v188 >> 1;
              }
              if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v189 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v189 = v187;
              }
              if (v189)
              {
                v190 = (char *)sub_100024458((uint64_t)v218, v189);
                unint64_t v185 = (char *)*((void *)this + 16);
                unint64_t v152 = (char *)*((void *)this + 17);
              }
              else
              {
                v190 = 0;
              }
              v207 = &v190[4 * v186];
              *(_DWORD *)v207 = 0;
              unint64_t v142 = v207 + 4;
              while (v152 != v185)
              {
                int v208 = *((_DWORD *)v152 - 1);
                v152 -= 4;
                *((_DWORD *)v207 - 1) = v208;
                v207 -= 4;
              }
              *((void *)this + 16) = v207;
              *((void *)this + 17) = v142;
              *((void *)this + 18) = &v190[4 * v189];
              if (v185) {
                operator delete(v185);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v152 = 0;
              unint64_t v142 = v152 + 4;
            }
            *((void *)this + 17) = v142;
            goto LABEL_336;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v112 = *((void *)a2 + 1);
          unint64_t v113 = *((void *)a2 + 2);
          while (v112 < v113 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v115 = (char *)*((void *)this + 17);
            unint64_t v114 = *((void *)this + 18);
            if ((unint64_t)v115 >= v114)
            {
              uint64_t v117 = (char *)*v220;
              uint64_t v118 = (v115 - (unsigned char *)*v220) >> 2;
              unint64_t v119 = v118 + 1;
              if ((unint64_t)(v118 + 1) >> 62) {
                goto LABEL_355;
              }
              uint64_t v120 = v114 - (void)v117;
              if (v120 >> 1 > v119) {
                unint64_t v119 = v120 >> 1;
              }
              if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v121 = v119;
              }
              if (v121)
              {
                unint64_t v122 = (char *)sub_100024458((uint64_t)v218, v121);
                uint64_t v117 = (char *)*((void *)this + 16);
                unint64_t v115 = (char *)*((void *)this + 17);
              }
              else
              {
                unint64_t v122 = 0;
              }
              int v123 = &v122[4 * v118];
              *(_DWORD *)int v123 = 0;
              unint64_t v116 = v123 + 4;
              while (v115 != v117)
              {
                int v124 = *((_DWORD *)v115 - 1);
                v115 -= 4;
                *((_DWORD *)v123 - 1) = v124;
                v123 -= 4;
              }
              *((void *)this + 16) = v123;
              *((void *)this + 17) = v116;
              *((void *)this + 18) = &v122[4 * v121];
              if (v117) {
                operator delete(v117);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v115 = 0;
              unint64_t v116 = v115 + 4;
            }
            *((void *)this + 17) = v116;
            unint64_t v125 = *((void *)a2 + 1);
            if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((void *)a2 + 2)) {
              goto LABEL_209;
            }
            *(v116 - 1) = *(_DWORD *)(*(void *)a2 + v125);
            unint64_t v113 = *((void *)a2 + 2);
            unint64_t v112 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v112;
          }
          goto LABEL_210;
        case 0xEu:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v126 = *((void *)a2 + 1);
            unint64_t v127 = *((void *)a2 + 2);
            while (v126 < v127 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v129 = (char *)*((void *)this + 8);
              unint64_t v128 = *((void *)this + 9);
              if ((unint64_t)v129 >= v128)
              {
                char v131 = (char *)*v221;
                uint64_t v132 = (v129 - (unsigned char *)*v221) >> 2;
                unint64_t v133 = v132 + 1;
                if ((unint64_t)(v132 + 1) >> 62) {
                  goto LABEL_356;
                }
                uint64_t v134 = v128 - (void)v131;
                if (v134 >> 1 > v133) {
                  unint64_t v133 = v134 >> 1;
                }
                if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v135 = v133;
                }
                if (v135)
                {
                  char v136 = (char *)sub_100024458((uint64_t)v219, v135);
                  char v131 = (char *)*((void *)this + 7);
                  unsigned int v129 = (char *)*((void *)this + 8);
                }
                else
                {
                  char v136 = 0;
                }
                unsigned int v137 = &v136[4 * v132];
                *(_DWORD *)unsigned int v137 = 0;
                unint64_t v130 = v137 + 4;
                while (v129 != v131)
                {
                  int v138 = *((_DWORD *)v129 - 1);
                  v129 -= 4;
                  *((_DWORD *)v137 - 1) = v138;
                  v137 -= 4;
                }
                *((void *)this + 7) = v137;
                *((void *)this + 8) = v130;
                *((void *)this + 9) = &v136[4 * v135];
                if (v131) {
                  operator delete(v131);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v129 = 0;
                unint64_t v130 = v129 + 4;
              }
              *((void *)this + 8) = v130;
              unint64_t v139 = *((void *)a2 + 1);
              if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((void *)a2 + 2))
              {
LABEL_209:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v130 - 1) = *(_DWORD *)(*(void *)a2 + v139);
              unint64_t v127 = *((void *)a2 + 2);
              unint64_t v126 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v126;
            }
LABEL_210:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v154 = (char *)*((void *)this + 8);
            unint64_t v153 = *((void *)this + 9);
            if ((unint64_t)v154 >= v153)
            {
              v191 = (char *)*v221;
              uint64_t v192 = (v154 - (unsigned char *)*v221) >> 2;
              unint64_t v193 = v192 + 1;
              if ((unint64_t)(v192 + 1) >> 62) {
LABEL_356:
              }
                sub_10000EE98();
              uint64_t v194 = v153 - (void)v191;
              if (v194 >> 1 > v193) {
                unint64_t v193 = v194 >> 1;
              }
              if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v195 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v195 = v193;
              }
              if (v195)
              {
                v196 = (char *)sub_100024458((uint64_t)v219, v195);
                v191 = (char *)*((void *)this + 7);
                unint64_t v154 = (char *)*((void *)this + 8);
              }
              else
              {
                v196 = 0;
              }
              v209 = &v196[4 * v192];
              *(_DWORD *)v209 = 0;
              unint64_t v142 = v209 + 4;
              while (v154 != v191)
              {
                int v210 = *((_DWORD *)v154 - 1);
                v154 -= 4;
                *((_DWORD *)v209 - 1) = v210;
                v209 -= 4;
              }
              *((void *)this + 7) = v209;
              *((void *)this + 8) = v142;
              *((void *)this + 9) = &v196[4 * v195];
              if (v191) {
                operator delete(v191);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v154 = 0;
              unint64_t v142 = v154 + 4;
            }
            *((void *)this + 8) = v142;
LABEL_336:
            unint64_t v211 = *((void *)a2 + 1);
            if (v211 <= 0xFFFFFFFFFFFFFFFBLL && v211 + 4 <= *((void *)a2 + 2))
            {
              *(v142 - 1) = *(_DWORD *)(*(void *)a2 + v211);
LABEL_340:
              uint64_t v27 = *((void *)a2 + 1) + 4;
LABEL_341:
              *((void *)a2 + 1) = v27;
            }
            else
            {
LABEL_338:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_342:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_342;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DoTEstimatorWithTNB::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 204)) {
    this = PB::Writer::write(a2, *(double *)(this + 184), 1u);
  }
  int v4 = *(float **)(v3 + 152);
  uint64_t v5 = *(float **)(v3 + 160);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  uint64_t v7 = *(float **)(v3 + 80);
  float v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  uint64_t v10 = *(float **)(v3 + 8);
  float v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  uint64_t v13 = *(float **)(v3 + 32);
  char v14 = *(float **)(v3 + 40);
  while (v13 != v14)
  {
    float v15 = *v13++;
    this = PB::Writer::write(a2, v15, 5u);
  }
  char v16 = *(unsigned char *)(v3 + 204);
  if ((v16 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 192), 6u);
    char v16 = *(unsigned char *)(v3 + 204);
    if ((v16 & 8) == 0)
    {
LABEL_17:
      if ((v16 & 0x10) == 0) {
        goto LABEL_18;
      }
      goto LABEL_36;
    }
  }
  else if ((*(unsigned char *)(v3 + 204) & 8) == 0)
  {
    goto LABEL_17;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 200), 7u);
  char v16 = *(unsigned char *)(v3 + 204);
  if ((v16 & 0x10) == 0)
  {
LABEL_18:
    if ((v16 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 201), 8u);
  if ((*(unsigned char *)(v3 + 204) & 0x20) != 0) {
LABEL_19:
  }
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 202), 9u);
LABEL_20:
  unint64_t v17 = *(const PB::Base **)(v3 + 176);
  if (v17) {
    this = PB::Writer::writeSubmessage(a2, v17, 0xAu);
  }
  char v18 = *(float **)(v3 + 104);
  uint64_t v19 = *(float **)(v3 + 112);
  while (v18 != v19)
  {
    float v20 = *v18++;
    this = PB::Writer::write(a2, v20, 0xBu);
  }
  if ((*(unsigned char *)(v3 + 204) & 4) != 0) {
    this = PB::Writer::write(a2, *(float *)(v3 + 196), 0xCu);
  }
  unsigned int v21 = *(float **)(v3 + 128);
  unint64_t v22 = *(float **)(v3 + 136);
  while (v21 != v22)
  {
    float v23 = *v21++;
    this = PB::Writer::write(a2, v23, 0xDu);
  }
  int v25 = *(float **)(v3 + 56);
  float v24 = *(float **)(v3 + 64);
  while (v25 != v24)
  {
    float v26 = *v25++;
    this = PB::Writer::write(a2, v26, 0xEu);
  }
  return this;
}

BOOL CMMsl::DoTEstimatorWithTNB::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 204))
  {
    if ((*(unsigned char *)(a2 + 204) & 1) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 204))
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 152);
  unint64_t v2 = *(float **)(a1 + 160);
  int v4 = *(float **)(a2 + 152);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 160) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  float v6 = *(float **)(a1 + 80);
  uint64_t v5 = *(float **)(a1 + 88);
  uint64_t v7 = *(float **)(a2 + 80);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 88) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  float v9 = *(float **)(a1 + 8);
  float v8 = *(float **)(a1 + 16);
  uint64_t v10 = *(float **)(a2 + 8);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 16) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  float v12 = *(float **)(a1 + 32);
  float v11 = *(float **)(a1 + 40);
  uint64_t v13 = *(float **)(a2 + 32);
  if ((char *)v11 - (char *)v12 != *(void *)(a2 + 40) - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*v12 != *v13) {
      return 0;
    }
    ++v12;
    ++v13;
  }
  if ((*(unsigned char *)(a1 + 204) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 204) & 2) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 204) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 204) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 204) & 8) == 0 || *(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 204) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 204) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 204) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 201) != *(unsigned __int8 *)(a2 + 201)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 204) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 204) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 204) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 202) != *(unsigned __int8 *)(a2 + 202)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 204) & 0x20) != 0)
  {
    return 0;
  }
  char v29 = *(unsigned char *)(a2 + 204);
  char v30 = *(unsigned char *)(a1 + 204);
  uint64_t v14 = *(void *)(a1 + 176);
  uint64_t v15 = *(void *)(a2 + 176);
  if (v14)
  {
    if (!v15 || !CMMsl::AccelTNBFrame::operator==(v14, v15)) {
      return 0;
    }
  }
  else if (v15)
  {
    return 0;
  }
  unint64_t v17 = *(float **)(a1 + 104);
  char v16 = *(float **)(a1 + 112);
  char v18 = *(float **)(a2 + 104);
  if ((char *)v16 - (char *)v17 != *(void *)(a2 + 112) - (void)v18) {
    return 0;
  }
  while (v17 != v16)
  {
    if (*v17 != *v18) {
      return 0;
    }
    ++v17;
    ++v18;
  }
  if ((v30 & 4) != 0)
  {
    if ((v29 & 4) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((v29 & 4) != 0)
  {
    return 0;
  }
  float v20 = *(float **)(a1 + 128);
  uint64_t v19 = *(float **)(a1 + 136);
  unsigned int v21 = *(float **)(a2 + 128);
  if ((char *)v19 - (char *)v20 != *(void *)(a2 + 136) - (void)v21) {
    return 0;
  }
  while (v20 != v19)
  {
    if (*v20 != *v21) {
      return 0;
    }
    ++v20;
    ++v21;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 64);
  float v24 = *(float **)(a2 + 56);
  if (v22 - v23 != *(void *)(a2 + 64) - (void)v24) {
    return 0;
  }
  if (v23 == v22) {
    return 1;
  }
  uint64_t v25 = v23 + 4;
  do
  {
    float v26 = *v24++;
    BOOL result = *(float *)(v25 - 4) == v26;
    BOOL v28 = *(float *)(v25 - 4) != v26 || v25 == v22;
    v25 += 4;
  }
  while (!v28);
  return result;
}

uint64_t CMMsl::DoTEstimatorWithTNB::hash_value(CMMsl::DoTEstimatorWithTNB *this)
{
  if (*((unsigned char *)this + 204))
  {
    double v2 = *((double *)this + 23);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    double v19 = v2;
  }
  else
  {
    double v19 = 0.0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  if ((*((unsigned char *)this + 204) & 2) != 0)
  {
    float v11 = *((float *)this + 48);
    if (v11 == 0.0) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = LODWORD(v11);
    }
    if ((*((unsigned char *)this + 204) & 8) != 0)
    {
LABEL_8:
      uint64_t v8 = *((unsigned __int8 *)this + 200);
      if ((*((unsigned char *)this + 204) & 0x10) != 0) {
        goto LABEL_9;
      }
LABEL_16:
      uint64_t v9 = 0;
      if ((*((unsigned char *)this + 204) & 0x20) != 0) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 204) & 8) != 0) {
      goto LABEL_8;
    }
  }
  uint64_t v8 = 0;
  if ((*((unsigned char *)this + 204) & 0x10) == 0) {
    goto LABEL_16;
  }
LABEL_9:
  uint64_t v9 = *((unsigned __int8 *)this + 201);
  if ((*((unsigned char *)this + 204) & 0x20) != 0)
  {
LABEL_10:
    uint64_t v10 = *((unsigned __int8 *)this + 202);
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v10 = 0;
LABEL_18:
  float v12 = (CMMsl::AccelTNBFrame *)*((void *)this + 22);
  if (v12) {
    uint64_t v13 = CMMsl::AccelTNBFrame::hash_value(v12);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = PBHashBytes();
  if ((*((unsigned char *)this + 204) & 4) != 0)
  {
    float v16 = *((float *)this + 49);
    uint64_t v15 = LODWORD(v16);
    if (v16 == 0.0) {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v17 = v3 ^ *(void *)&v19 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v13 ^ v14 ^ v15 ^ PBHashBytes();
  return v17 ^ PBHashBytes();
}

uint64_t CMMsl::DoTEstimatorWithTNB::makeTNBFrame(uint64_t this)
{
  if (!*(void *)(this + 176)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::DopplerDebugRecord::DopplerDebugRecord(uint64_t this)
{
  *(void *)this = off_1003A54E8;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

{
  *(void *)this = off_1003A54E8;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

void CMMsl::DopplerDebugRecord::~DopplerDebugRecord(CMMsl::DopplerDebugRecord *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::DopplerDebugRecord::DopplerDebugRecord(CMMsl::DopplerDebugRecord *this, const CMMsl::DopplerDebugRecord *a2)
{
  *(void *)this = off_1003A54E8;
  *((_DWORD *)this + 30) = 0;
  int v2 = *((_DWORD *)a2 + 30);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 30) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 30);
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 27);
    v3 |= 0x1000000u;
    *((_DWORD *)this + 30) = v3;
    *((_DWORD *)this + 27) = v4;
    int v2 = *((_DWORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 24);
    v3 |= 0x200000u;
    *((_DWORD *)this + 30) = v3;
    *((_DWORD *)this + 24) = v4;
    int v2 = *((_DWORD *)a2 + 30);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x400000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 25) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x800000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x800000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 26) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x100000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 23) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 28) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 6) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 8) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 7) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 20) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v5 = *((_DWORD *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 19) = v5;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x2000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 16) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 14) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x1000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v6 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 15) = v6;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 12) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x100) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 13) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 11) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x80) == 0) {
      goto LABEL_26;
    }
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 9) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v7 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 10) = v7;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_27:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 4) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 29) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x80000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 22) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 0x40000) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v8 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 5) = v8;
  if ((*((_DWORD *)a2 + 30) & 0x40000) == 0) {
    return *(float *)&v4;
  }
LABEL_56:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 30) = v3 | 0x40000;
  *((_DWORD *)this + 21) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::DopplerDebugRecord::operator=(CMMsl *a1, const CMMsl::DopplerDebugRecord *a2)
{
  if (a1 != a2)
  {
    CMMsl::DopplerDebugRecord::DopplerDebugRecord((CMMsl::DopplerDebugRecord *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerDebugRecord *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DopplerDebugRecord *a2, CMMsl::DopplerDebugRecord *a3)
{
  int v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  int v5 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v5;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  int v6 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  int v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  int v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  float result = *((float *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((float *)a2 + 21) = result;
  return result;
}

float CMMsl::DopplerDebugRecord::DopplerDebugRecord(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A54E8;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 84);
  *(float *)(a1 + 84) = result;
  return result;
}

CMMsl *CMMsl::DopplerDebugRecord::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DopplerDebugRecord::DopplerDebugRecord((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerDebugRecord *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::DopplerDebugRecord::formatText(CMMsl::DopplerDebugRecord *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "biasFraction", *((float *)this + 4));
    int v5 = *((_DWORD *)this + 30);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cookie", *((_DWORD *)this + 5));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "currentRange", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "distanceReleaseThreshold", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "distanceTriggerThreshold", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "habcBiasCorrectedDenominator", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "habcBiasCorrectedNumFramesCaptured", *((_DWORD *)this + 10));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "habcBiasCorrectedNumerator", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "habcBiasCorrectedRateBaseline", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "habcBiasCorrectedRateBaselineSigma", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "habcDenominator", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "habcNumFramesCaptured", *((_DWORD *)this + 15));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "habcNumerator", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "habcRateBaseline", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "habcRateBaselineSigma", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "numBaselineCaptureFrames", *((_DWORD *)this + 19));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "numEffSpads", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "rateScalingFactor", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "reflectanceEstimate", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "signalDeltaNCounts", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "signalRateBaselineKcpss", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "signalRateBaselineSigmaKcpss", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "signalRateNoiseMarginKcpss", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "signalRateSigmaKcpss", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "signalRateTriggerThresholdNCounts", *((float *)this + 28));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "smudgeTimeoutCountdownMs", *((float *)this + 29));
  if (*((_DWORD *)this + 30)) {
LABEL_28:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_29:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DopplerDebugRecord::readFrom(CMMsl::DopplerDebugRecord *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 30) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_151;
            case 2u:
              *((_DWORD *)this + 30) |= 0x1000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 3u:
              *((_DWORD *)this + 30) |= 0x200000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 4u:
              *((_DWORD *)this + 30) |= 0x400000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 5u:
              *((_DWORD *)this + 30) |= 0x800000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 6u:
              *((_DWORD *)this + 30) |= 0x100000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 7u:
              *((_DWORD *)this + 30) |= 0x2000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 8u:
              *((_DWORD *)this + 30) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 9u:
              *((_DWORD *)this + 30) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0xAu:
              *((_DWORD *)this + 30) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0xBu:
              *((_DWORD *)this + 30) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0xCu:
              *((_DWORD *)this + 30) |= 0x10000u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_161;
                  }
                  unint64_t v47 = v21++;
                  char v48 = *(unsigned char *)(v22 + v47);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_160:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_160;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_161:
              *((_DWORD *)this + 19) = v25;
              goto LABEL_152;
            case 0xDu:
              *((_DWORD *)this + 30) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0xEu:
              *((_DWORD *)this + 30) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0xFu:
              *((_DWORD *)this + 30) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0x10u:
              *((_DWORD *)this + 30) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0x11u:
              *((_DWORD *)this + 30) |= 0x1000u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_166;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_165:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_165;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_166;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_166:
              *((_DWORD *)this + 15) = v31;
              goto LABEL_152;
            case 0x12u:
              *((_DWORD *)this + 30) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0x13u:
              *((_DWORD *)this + 30) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0x14u:
              *((_DWORD *)this + 30) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0x15u:
              *((_DWORD *)this + 30) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0x16u:
              *((_DWORD *)this + 30) |= 0x80u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_171;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_170:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_171;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_170;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_171;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_171:
              *((_DWORD *)this + 10) = v37;
              goto LABEL_152;
            case 0x17u:
              *((_DWORD *)this + 30) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0x18u:
              *((_DWORD *)this + 30) |= 0x4000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0x19u:
              *((_DWORD *)this + 30) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_120;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_150;
            case 0x1Au:
              *((_DWORD *)this + 30) |= 4u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_176;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_175:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_175;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_176;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_176:
              *((_DWORD *)this + 5) = v43;
LABEL_152:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x1Bu:
              *((_DWORD *)this + 30) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_150:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_151:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_120:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_152;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_152;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::DopplerDebugRecord::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 120);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 120);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 2u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 3u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 4u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 5u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 6u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 7u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 8u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 9u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xAu);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xBu);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0xCu);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xDu);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xEu);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xFu);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x10u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0x11u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x12u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x13u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x14u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x15u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x16u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0x17u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x18u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0) {
      goto LABEL_27;
    }
LABEL_54:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 0x1Au);
    if ((*(_DWORD *)(v3 + 120) & 0x40000) == 0) {
      return this;
    }
    goto LABEL_55;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x19u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 4) != 0) {
    goto LABEL_54;
  }
LABEL_27:
  if ((v4 & 0x40000) == 0) {
    return this;
  }
LABEL_55:
  float v5 = *(float *)(v3 + 84);

  return PB::Writer::write(a2, v5, 0x1Bu);
}

BOOL CMMsl::DopplerDebugRecord::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 120);
  int v3 = *(_DWORD *)(a2 + 120);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40000) == 0;
  if ((v2 & 0x40000) != 0) {
    return (v3 & 0x40000) != 0 && *(float *)(a1 + 84) == *(float *)(a2 + 84);
  }
  return v4;
}

uint64_t CMMsl::DopplerDebugRecord::hash_value(CMMsl::DopplerDebugRecord *this)
{
  int v1 = *((_DWORD *)this + 30);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_3;
    }
LABEL_76:
    uint64_t v4 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_6;
    }
LABEL_77:
    uint64_t v6 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_9;
    }
LABEL_78:
    uint64_t v8 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_12;
    }
LABEL_79:
    uint64_t v10 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_15;
    }
LABEL_80:
    uint64_t v12 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_18;
    }
LABEL_81:
    uint64_t v14 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_21;
    }
LABEL_82:
    uint64_t v16 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_24;
    }
LABEL_83:
    uint64_t v18 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_27;
    }
LABEL_84:
    uint64_t v20 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_30;
    }
LABEL_85:
    uint64_t v22 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_86;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_76;
  }
LABEL_3:
  float v3 = *((float *)this + 27);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_77;
  }
LABEL_6:
  float v5 = *((float *)this + 24);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_78;
  }
LABEL_9:
  float v7 = *((float *)this + 25);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_79;
  }
LABEL_12:
  float v9 = *((float *)this + 26);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_80;
  }
LABEL_15:
  float v11 = *((float *)this + 23);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_81;
  }
LABEL_18:
  float v13 = *((float *)this + 28);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_82;
  }
LABEL_21:
  float v15 = *((float *)this + 6);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_83;
  }
LABEL_24:
  float v17 = *((float *)this + 8);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_84;
  }
LABEL_27:
  float v19 = *((float *)this + 7);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_85;
  }
LABEL_30:
  float v21 = *((float *)this + 20);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_33:
    uint64_t v23 = *((int *)this + 19);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_34;
    }
LABEL_87:
    uint64_t v25 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_37;
    }
LABEL_88:
    uint64_t v27 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_40;
    }
LABEL_89:
    uint64_t v29 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_43;
    }
LABEL_90:
    uint64_t v31 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_46;
    }
    goto LABEL_91;
  }
LABEL_86:
  uint64_t v23 = 0;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_87;
  }
LABEL_34:
  float v24 = *((float *)this + 17);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_88;
  }
LABEL_37:
  float v26 = *((float *)this + 18);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_89;
  }
LABEL_40:
  float v28 = *((float *)this + 16);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_90;
  }
LABEL_43:
  float v30 = *((float *)this + 14);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  if ((v1 & 0x1000) != 0)
  {
LABEL_46:
    uint64_t v32 = *((int *)this + 15);
    if ((v1 & 0x200) != 0) {
      goto LABEL_47;
    }
LABEL_92:
    uint64_t v34 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_50;
    }
LABEL_93:
    uint64_t v36 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_53;
    }
LABEL_94:
    uint64_t v38 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_56;
    }
LABEL_95:
    uint64_t v40 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_59;
    }
    goto LABEL_96;
  }
LABEL_91:
  uint64_t v32 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_92;
  }
LABEL_47:
  float v33 = *((float *)this + 12);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_93;
  }
LABEL_50:
  float v35 = *((float *)this + 13);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_94;
  }
LABEL_53:
  float v37 = *((float *)this + 11);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_95;
  }
LABEL_56:
  float v39 = *((float *)this + 9);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_59:
    uint64_t v41 = *((int *)this + 10);
    if ((v1 & 2) != 0) {
      goto LABEL_60;
    }
LABEL_97:
    uint64_t v43 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_63;
    }
LABEL_98:
    uint64_t v45 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_66;
    }
LABEL_99:
    uint64_t v47 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_69;
    }
    goto LABEL_100;
  }
LABEL_96:
  uint64_t v41 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_97;
  }
LABEL_60:
  float v42 = *((float *)this + 4);
  uint64_t v43 = LODWORD(v42);
  if (v42 == 0.0) {
    uint64_t v43 = 0;
  }
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_98;
  }
LABEL_63:
  float v44 = *((float *)this + 29);
  uint64_t v45 = LODWORD(v44);
  if (v44 == 0.0) {
    uint64_t v45 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_99;
  }
LABEL_66:
  float v46 = *((float *)this + 22);
  uint64_t v47 = LODWORD(v46);
  if (v46 == 0.0) {
    uint64_t v47 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_69:
    uint64_t v48 = *((unsigned int *)this + 5);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_70;
    }
LABEL_101:
    uint64_t v50 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v41 ^ v43 ^ v45 ^ v47 ^ v48 ^ v50;
  }
LABEL_100:
  uint64_t v48 = 0;
  if ((v1 & 0x40000) == 0) {
    goto LABEL_101;
  }
LABEL_70:
  float v49 = *((float *)this + 21);
  uint64_t v50 = LODWORD(v49);
  if (v49 == 0.0) {
    uint64_t v50 = 0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v41 ^ v43 ^ v45 ^ v47 ^ v48 ^ v50;
}

uint64_t CMMsl::DopplerProximityEvent::DopplerProximityEvent(uint64_t this)
{
  *(void *)this = off_1003A5520;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A5520;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::DopplerProximityEvent::~DopplerProximityEvent(CMMsl::DopplerProximityEvent *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::DopplerProximityEvent::DopplerProximityEvent(uint64_t this, const CMMsl::DopplerProximityEvent *a2)
{
  *(void *)this = off_1003A5520;
  *(_DWORD *)(this + 24) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 24) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 24) = v3 | 2;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t CMMsl::DopplerProximityEvent::operator=(uint64_t a1, const CMMsl::DopplerProximityEvent *a2)
{
  if ((const CMMsl::DopplerProximityEvent *)a1 != a2)
  {
    CMMsl::DopplerProximityEvent::DopplerProximityEvent((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v4 = v10;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v4;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DopplerProximityEvent *a2, CMMsl::DopplerProximityEvent *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

double CMMsl::DopplerProximityEvent::DopplerProximityEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5520;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A5520;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::DopplerProximityEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v7[0] = off_1003A5520;
    int v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    void v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::DopplerProximityEvent::formatText(CMMsl::DopplerProximityEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "proximityRawValue", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "proximityState", *((_DWORD *)this + 5));
  if (*((unsigned char *)this + 24)) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DopplerProximityEvent::readFrom(CMMsl::DopplerProximityEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          unint64_t v2 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 4) = v25;
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_66:
          unint64_t v2 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v2 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v2;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 5) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DopplerProximityEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 24) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 2u);
    if ((*(unsigned char *)(v3 + 24) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  unsigned int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 3u);
}

BOOL CMMsl::DopplerProximityEvent::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 2) == 0;
  if ((*(unsigned char *)(a1 + 24) & 2) != 0) {
    return (*(unsigned char *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::DopplerProximityEvent::hash_value(CMMsl::DopplerProximityEvent *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v2 ^ *(void *)&v1 ^ v3;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1 ^ v3;
}

void *CMMsl::DopplerRawDataInput::DopplerRawDataInput(void *this)
{
  *this = off_1003A5558;
  *(void *)((char *)this + 164) = 0;
  return this;
}

{
  *this = off_1003A5558;
  *(void *)((char *)this + 164) = 0;
  return this;
}

void CMMsl::DopplerRawDataInput::~DopplerRawDataInput(CMMsl::DopplerRawDataInput *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::DopplerRawDataInput::DopplerRawDataInput(uint64_t this, const CMMsl::DopplerRawDataInput *a2)
{
  *(void *)this = off_1003A5558;
  *(void *)(this + 164) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    uint64_t v3 = 16;
    *(void *)(this + 164) = 16;
    *(void *)(this + 40) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 164);
    if ((v2 & 0x80000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 26);
    v3 |= 0x80000uLL;
    *(void *)(this + 164) = v3;
    *(_DWORD *)(this + 104) = v5;
    uint64_t v2 = *(void *)((char *)a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x20000000) != 0)
  {
    int v6 = *((_DWORD *)a2 + 36);
    v3 |= 0x20000000uLL;
    *(void *)(this + 164) = v3;
    *(_DWORD *)(this + 144) = v6;
    uint64_t v2 = *(void *)((char *)a2 + 164);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_41;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 12);
  v3 |= 0x20uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 48) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v8 = *((_DWORD *)a2 + 37);
  v3 |= 0x40000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 148) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v9 = *((_DWORD *)a2 + 13);
  v3 |= 0x40uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 52) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v10 = *((_DWORD *)a2 + 39);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 156) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v11 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 80) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v12 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 76) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v13 = *((_DWORD *)a2 + 14);
  v3 |= 0x80uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 56) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v14 = *((_DWORD *)a2 + 40);
  v3 |= 0x200000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 160) = v14;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v15 = *((_DWORD *)a2 + 35);
  v3 |= 0x10000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 140) = v15;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v16 = *((_DWORD *)a2 + 17);
  v3 |= 0x400uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 68) = v16;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v17 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 84) = v17;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v18 = *((_DWORD *)a2 + 30);
  v3 |= 0x800000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 120) = v18;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v19 = *((_DWORD *)a2 + 32);
  v3 |= 0x2000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 128) = v19;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v20 = *((_DWORD *)a2 + 34);
  v3 |= 0x8000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 136) = v20;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v21 = *((_DWORD *)a2 + 33);
  v3 |= 0x4000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 132) = v21;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v22 = *((_DWORD *)a2 + 29);
  v3 |= 0x400000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 116) = v22;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v23 = *((_DWORD *)a2 + 31);
  v3 |= 0x1000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 124) = v23;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v24 = *((_DWORD *)a2 + 38);
  v3 |= 0x80000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 152) = v24;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v25 = *((_DWORD *)a2 + 22);
  v3 |= 0x8000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 88) = v25;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v26 = *((_DWORD *)a2 + 27);
  v3 |= 0x100000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 108) = v26;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v27 = *((_DWORD *)a2 + 15);
  v3 |= 0x100uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 60) = v27;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x200) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v28 = *((_DWORD *)a2 + 28);
  v3 |= 0x200000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 112) = v28;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_30:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v29 = *((_DWORD *)a2 + 16);
  v3 |= 0x200uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 64) = v29;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_31:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v30 = *((_DWORD *)a2 + 24);
  v3 |= 0x20000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 96) = v30;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_32:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v31 = *((_DWORD *)a2 + 25);
  v3 |= 0x40000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 100) = v31;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10000) == 0)
  {
LABEL_33:
    if ((v2 & 8) == 0) {
      goto LABEL_34;
    }
    goto LABEL_66;
  }
LABEL_65:
  int v32 = *((_DWORD *)a2 + 23);
  v3 |= 0x10000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 92) = v32;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 8) == 0)
  {
LABEL_34:
    if ((v2 & 4) == 0) {
      goto LABEL_35;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v33 = *((void *)a2 + 4);
  v3 |= 8uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 32) = v33;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_35:
    if ((v2 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v34 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 24) = v34;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_36:
    if ((v2 & 2) == 0) {
      goto LABEL_37;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v35 = *((void *)a2 + 1);
  v3 |= 1uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 8) = v35;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_37:
    if ((v2 & 0x800) == 0) {
      return this;
    }
LABEL_70:
    int v37 = *((_DWORD *)a2 + 18);
    *(void *)(this + 164) = v3 | 0x800;
    *(_DWORD *)(this + 72) = v37;
    return this;
  }
LABEL_69:
  uint64_t v36 = *((void *)a2 + 2);
  v3 |= 2uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 16) = v36;
  if ((*(void *)((unsigned char *)a2 + 164) & 0x800) != 0) {
    goto LABEL_70;
  }
  return this;
}

CMMsl *CMMsl::DopplerRawDataInput::operator=(CMMsl *a1, const CMMsl::DopplerRawDataInput *a2)
{
  if (a1 != a2)
  {
    CMMsl::DopplerRawDataInput::DopplerRawDataInput((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerRawDataInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DopplerRawDataInput *a2, CMMsl::DopplerRawDataInput *a3)
{
  uint64_t v3 = *(void *)((char *)this + 164);
  *(void *)((char *)this + 164) = *(void *)((char *)a2 + 164);
  *(void *)((char *)a2 + 164) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v4;
  LODWORD(v3) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  LODWORD(v3) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  LODWORD(v3) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  LODWORD(v3) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v3;
  LODWORD(v3) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v3;
  LODWORD(v3) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  LODWORD(v3) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  LODWORD(v3) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  LODWORD(v3) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  LODWORD(v3) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  LODWORD(v3) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  LODWORD(v3) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  float result = *((float *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((float *)a2 + 16) = result;
  LODWORD(v3) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  LODWORD(v9) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  return result;
}

float CMMsl::DopplerRawDataInput::DopplerRawDataInput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5558;
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(void *)(a2 + 164) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  float result = *(float *)(a2 + 64);
  *(float *)(a1 + 64) = result;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return result;
}

CMMsl *CMMsl::DopplerRawDataInput::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DopplerRawDataInput::DopplerRawDataInput((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerRawDataInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::DopplerRawDataInput::formatText(CMMsl::DopplerRawDataInput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "ambientRatePerSPAD", *((float *)this + 12));
    uint64_t v5 = *(void *)((char *)this + 164);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_41;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "ambientRateTotal", *((float *)this + 13));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "blockSelectByte", *((_DWORD *)this + 14));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "correctedSignalRatePerSPAD", *((float *)this + 15));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "estimatedAmbientBias", *((float *)this + 16));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "integrationTime", *((_DWORD *)this + 17));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "numAOPClients", *((_DWORD *)this + 18));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "numAperturedSPADs", *((_DWORD *)this + 19));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "numFullSPADs", *((_DWORD *)this + 20));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "oscFrequencySetting", *((_DWORD *)this + 21));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "oscTrim", *((_DWORD *)this + 22));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "pearlScanWindowOnTs", *((void *)this + 1));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "pearlScanWindowOpen", *((_DWORD *)this + 23));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "pearlScanWindownOffTs", *((void *)this + 2));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 4) == 0)
  {
LABEL_16:
    if ((v5 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "pearlSessionOffTs", *((void *)this + 3));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 8) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "pearlSessionOnTs", *((void *)this + 4));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "pearlSessionRunning", *((_DWORD *)this + 24));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "pearlSessionType", *((_DWORD *)this + 25));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "rawRange", *((float *)this + 26));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "refPhaseOffset", *((_DWORD *)this + 27));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "refSignalRateTotal", *((float *)this + 28));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "regValAmbientWindowEvents", *((_DWORD *)this + 29));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "regValRange", *((_DWORD *)this + 30));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "regValRefAmbientWindowEvents", *((_DWORD *)this + 31));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "regValRefRange", *((_DWORD *)this + 32));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "regValRefSignalTotalEvents", *((_DWORD *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "regValSignalTotalEvents", *((_DWORD *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "signalEventLimit", *((_DWORD *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "signalRatePerSPAD", *((float *)this + 36));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "signalRateTotal", *((float *)this + 37));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "signalToAmbientWindowRatio", *((_DWORD *)this + 38));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "totalRateTotal", *((float *)this + 39));
  if ((*(void *)((unsigned char *)this + 164) & 0x200000000) != 0) {
LABEL_35:
  }
    PB::TextFormatter::format(a2, "vhvSetting", *((_DWORD *)this + 40));
LABEL_36:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DopplerRawDataInput::readFrom(CMMsl::DopplerRawDataInput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)((char *)this + 164) |= 0x10uLL;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_165;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v20);
          uint64_t v21 = *((void *)a2 + 1) + 8;
          goto LABEL_392;
        case 2u:
          *(void *)((char *)this + 164) |= 0x80000uLL;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)a2 + 2)) {
            goto LABEL_165;
          }
          *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v23);
          goto LABEL_391;
        case 3u:
          *(void *)((char *)this + 164) |= 0x20000000uLL;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)a2 + 2)) {
            goto LABEL_165;
          }
          *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v24);
          goto LABEL_391;
        case 4u:
          *(void *)((char *)this + 164) |= 0x20uLL;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)a2 + 2)) {
            goto LABEL_165;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v25);
          goto LABEL_391;
        case 5u:
          *(void *)((char *)this + 164) |= 0x40000000uLL;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)a2 + 2)) {
            goto LABEL_165;
          }
          *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v26);
          goto LABEL_391;
        case 6u:
          *(void *)((char *)this + 164) |= 0x40uLL;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)a2 + 2)) {
            goto LABEL_165;
          }
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v27);
          goto LABEL_391;
        case 7u:
          *(void *)((char *)this + 164) |= (unint64_t)&_mh_execute_header;
          unint64_t v28 = *((void *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)a2 + 2)) {
            goto LABEL_165;
          }
          *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v28);
          goto LABEL_391;
        case 8u:
          *(void *)((char *)this + 164) |= 0x2000uLL;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_396;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v34) = 0;
            goto LABEL_396;
          }
          char v224 = 0;
          unsigned int v225 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v226 = v29 + 1;
              char v227 = *(unsigned char *)(v31 + v29);
              *((void *)a2 + 1) = v226;
              v34 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                unint64_t v29 = v226;
                BOOL v14 = v225++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_396:
          *((_DWORD *)this + 20) = v34;
          goto LABEL_489;
        case 9u:
          *(void *)((char *)this + 164) |= 0x1000uLL;
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          uint64_t v39 = *(void *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)a2 + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_400;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_235:
            LODWORD(v42) = 0;
            goto LABEL_400;
          }
          char v228 = 0;
          unsigned int v229 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v230 = v37 + 1;
              char v231 = *(unsigned char *)(v39 + v37);
              *((void *)a2 + 1) = v230;
              v42 |= (unint64_t)(v231 & 0x7F) << v228;
              if (v231 < 0)
              {
                v228 += 7;
                unint64_t v37 = v230;
                BOOL v14 = v229++ > 8;
                if (v14) {
                  goto LABEL_235;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v42) = 0;
              }
            }
            break;
          }
LABEL_400:
          *((_DWORD *)this + 19) = v42;
          goto LABEL_489;
        case 0xAu:
          *(void *)((char *)this + 164) |= 0x80uLL;
          unint64_t v45 = *((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
          uint64_t v47 = *(void *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)a2 + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_404;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v14 = v49++ > 8;
            }
            while (!v14);
LABEL_242:
            LODWORD(v50) = 0;
            goto LABEL_404;
          }
          char v232 = 0;
          unsigned int v233 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v234 = v45 + 1;
              char v235 = *(unsigned char *)(v47 + v45);
              *((void *)a2 + 1) = v234;
              v50 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                unint64_t v45 = v234;
                BOOL v14 = v233++ > 8;
                if (v14) {
                  goto LABEL_242;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v50) = 0;
              }
            }
            break;
          }
LABEL_404:
          *((_DWORD *)this + 14) = v50;
          goto LABEL_489;
        case 0xBu:
          *(void *)((char *)this + 164) |= 0x200000000uLL;
          unint64_t v53 = *((void *)a2 + 1);
          unint64_t v54 = *((void *)a2 + 2);
          uint64_t v55 = *(void *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)a2 + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_408;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v14 = v57++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v58) = 0;
            goto LABEL_408;
          }
          char v236 = 0;
          unsigned int v237 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v238 = v53 + 1;
              char v239 = *(unsigned char *)(v55 + v53);
              *((void *)a2 + 1) = v238;
              v58 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                unint64_t v53 = v238;
                BOOL v14 = v237++ > 8;
                if (v14) {
                  goto LABEL_249;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v58) = 0;
              }
            }
            break;
          }
LABEL_408:
          *((_DWORD *)this + 40) = v58;
          goto LABEL_489;
        case 0xCu:
          *(void *)((char *)this + 164) |= 0x10000000uLL;
          unint64_t v61 = *((void *)a2 + 1);
          unint64_t v62 = *((void *)a2 + 2);
          uint64_t v63 = *(void *)a2;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)a2 + 1) = v61 + 1;
              char v68 = *(unsigned char *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_412;
              }
              v64 += 7;
              unint64_t v61 = v67;
              BOOL v14 = v65++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v66) = 0;
            goto LABEL_412;
          }
          char v240 = 0;
          unsigned int v241 = 0;
          uint64_t v66 = 0;
          if (v62 <= v61) {
            unint64_t v62 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v242 = v61 + 1;
              char v243 = *(unsigned char *)(v63 + v61);
              *((void *)a2 + 1) = v242;
              v66 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                unint64_t v61 = v242;
                BOOL v14 = v241++ > 8;
                if (v14) {
                  goto LABEL_256;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v66) = 0;
              }
            }
            break;
          }
LABEL_412:
          *((_DWORD *)this + 35) = v66;
          goto LABEL_489;
        case 0xDu:
          *(void *)((char *)this + 164) |= 0x400uLL;
          unint64_t v69 = *((void *)a2 + 1);
          unint64_t v70 = *((void *)a2 + 2);
          uint64_t v71 = *(void *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)a2 + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_416;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v74) = 0;
            goto LABEL_416;
          }
          char v244 = 0;
          unsigned int v245 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v246 = v69 + 1;
              char v247 = *(unsigned char *)(v71 + v69);
              *((void *)a2 + 1) = v246;
              v74 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                unint64_t v69 = v246;
                BOOL v14 = v245++ > 8;
                if (v14) {
                  goto LABEL_263;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_416:
          *((_DWORD *)this + 17) = v74;
          goto LABEL_489;
        case 0xEu:
          *(void *)((char *)this + 164) |= 0x4000uLL;
          unint64_t v77 = *((void *)a2 + 1);
          unint64_t v78 = *((void *)a2 + 2);
          uint64_t v79 = *(void *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)a2 + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_420;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }
            while (!v14);
LABEL_270:
            LODWORD(v82) = 0;
            goto LABEL_420;
          }
          char v248 = 0;
          unsigned int v249 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v250 = v77 + 1;
              char v251 = *(unsigned char *)(v79 + v77);
              *((void *)a2 + 1) = v250;
              v82 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                unint64_t v77 = v250;
                BOOL v14 = v249++ > 8;
                if (v14) {
                  goto LABEL_270;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v82) = 0;
              }
            }
            break;
          }
LABEL_420:
          *((_DWORD *)this + 21) = v82;
          goto LABEL_489;
        case 0xFu:
          *(void *)((char *)this + 164) |= 0x800000uLL;
          unint64_t v85 = *((void *)a2 + 1);
          unint64_t v86 = *((void *)a2 + 2);
          uint64_t v87 = *(void *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)a2 + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_424;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }
            while (!v14);
LABEL_277:
            LODWORD(v90) = 0;
            goto LABEL_424;
          }
          char v252 = 0;
          unsigned int v253 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v254 = v85 + 1;
              char v255 = *(unsigned char *)(v87 + v85);
              *((void *)a2 + 1) = v254;
              v90 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                unint64_t v85 = v254;
                BOOL v14 = v253++ > 8;
                if (v14) {
                  goto LABEL_277;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v90) = 0;
              }
            }
            break;
          }
LABEL_424:
          *((_DWORD *)this + 30) = v90;
          goto LABEL_489;
        case 0x10u:
          *(void *)((char *)this + 164) |= 0x2000000uLL;
          unint64_t v93 = *((void *)a2 + 1);
          unint64_t v94 = *((void *)a2 + 2);
          uint64_t v95 = *(void *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)a2 + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_428;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }
            while (!v14);
LABEL_284:
            LODWORD(v98) = 0;
            goto LABEL_428;
          }
          char v256 = 0;
          unsigned int v257 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v258 = v93 + 1;
              char v259 = *(unsigned char *)(v95 + v93);
              *((void *)a2 + 1) = v258;
              v98 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                unint64_t v93 = v258;
                BOOL v14 = v257++ > 8;
                if (v14) {
                  goto LABEL_284;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v98) = 0;
              }
            }
            break;
          }
LABEL_428:
          *((_DWORD *)this + 32) = v98;
          goto LABEL_489;
        case 0x11u:
          *(void *)((char *)this + 164) |= 0x8000000uLL;
          unint64_t v101 = *((void *)a2 + 1);
          unint64_t v102 = *((void *)a2 + 2);
          uint64_t v103 = *(void *)a2;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)a2 + 1) = v101 + 1;
              char v108 = *(unsigned char *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_432;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v14 = v105++ > 8;
            }
            while (!v14);
LABEL_291:
            LODWORD(v106) = 0;
            goto LABEL_432;
          }
          char v260 = 0;
          unsigned int v261 = 0;
          uint64_t v106 = 0;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v262 = v101 + 1;
              char v263 = *(unsigned char *)(v103 + v101);
              *((void *)a2 + 1) = v262;
              v106 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                unint64_t v101 = v262;
                BOOL v14 = v261++ > 8;
                if (v14) {
                  goto LABEL_291;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v106) = 0;
              }
            }
            break;
          }
LABEL_432:
          *((_DWORD *)this + 34) = v106;
          goto LABEL_489;
        case 0x12u:
          *(void *)((char *)this + 164) |= 0x4000000uLL;
          unint64_t v109 = *((void *)a2 + 1);
          unint64_t v110 = *((void *)a2 + 2);
          uint64_t v111 = *(void *)a2;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)a2 + 1) = v109 + 1;
              char v116 = *(unsigned char *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_436;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }
            while (!v14);
LABEL_298:
            LODWORD(v114) = 0;
            goto LABEL_436;
          }
          char v264 = 0;
          unsigned int v265 = 0;
          uint64_t v114 = 0;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v266 = v109 + 1;
              char v267 = *(unsigned char *)(v111 + v109);
              *((void *)a2 + 1) = v266;
              v114 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                unint64_t v109 = v266;
                BOOL v14 = v265++ > 8;
                if (v14) {
                  goto LABEL_298;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v114) = 0;
              }
            }
            break;
          }
LABEL_436:
          *((_DWORD *)this + 33) = v114;
          goto LABEL_489;
        case 0x13u:
          *(void *)((char *)this + 164) |= 0x400000uLL;
          unint64_t v117 = *((void *)a2 + 1);
          unint64_t v118 = *((void *)a2 + 2);
          uint64_t v119 = *(void *)a2;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            char v120 = 0;
            unsigned int v121 = 0;
            uint64_t v122 = 0;
            do
            {
              unint64_t v123 = v117 + 1;
              *((void *)a2 + 1) = v117 + 1;
              char v124 = *(unsigned char *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0) {
                goto LABEL_440;
              }
              v120 += 7;
              unint64_t v117 = v123;
              BOOL v14 = v121++ > 8;
            }
            while (!v14);
LABEL_305:
            LODWORD(v122) = 0;
            goto LABEL_440;
          }
          char v268 = 0;
          unsigned int v269 = 0;
          uint64_t v122 = 0;
          if (v118 <= v117) {
            unint64_t v118 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v270 = v117 + 1;
              char v271 = *(unsigned char *)(v119 + v117);
              *((void *)a2 + 1) = v270;
              v122 |= (unint64_t)(v271 & 0x7F) << v268;
              if (v271 < 0)
              {
                v268 += 7;
                unint64_t v117 = v270;
                BOOL v14 = v269++ > 8;
                if (v14) {
                  goto LABEL_305;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v122) = 0;
              }
            }
            break;
          }
LABEL_440:
          *((_DWORD *)this + 29) = v122;
          goto LABEL_489;
        case 0x14u:
          *(void *)((char *)this + 164) |= 0x1000000uLL;
          unint64_t v125 = *((void *)a2 + 1);
          unint64_t v126 = *((void *)a2 + 2);
          uint64_t v127 = *(void *)a2;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)a2 + 1) = v125 + 1;
              char v132 = *(unsigned char *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_444;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }
            while (!v14);
LABEL_312:
            LODWORD(v130) = 0;
            goto LABEL_444;
          }
          char v272 = 0;
          unsigned int v273 = 0;
          uint64_t v130 = 0;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v274 = v125 + 1;
              char v275 = *(unsigned char *)(v127 + v125);
              *((void *)a2 + 1) = v274;
              v130 |= (unint64_t)(v275 & 0x7F) << v272;
              if (v275 < 0)
              {
                v272 += 7;
                unint64_t v125 = v274;
                BOOL v14 = v273++ > 8;
                if (v14) {
                  goto LABEL_312;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v130) = 0;
              }
            }
            break;
          }
LABEL_444:
          *((_DWORD *)this + 31) = v130;
          goto LABEL_489;
        case 0x15u:
          *(void *)((char *)this + 164) |= 0x80000000uLL;
          unint64_t v133 = *((void *)a2 + 1);
          unint64_t v134 = *((void *)a2 + 2);
          uint64_t v135 = *(void *)a2;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)a2 + 1) = v133 + 1;
              char v140 = *(unsigned char *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_448;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }
            while (!v14);
LABEL_319:
            LODWORD(v138) = 0;
            goto LABEL_448;
          }
          char v276 = 0;
          unsigned int v277 = 0;
          uint64_t v138 = 0;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v278 = v133 + 1;
              char v279 = *(unsigned char *)(v135 + v133);
              *((void *)a2 + 1) = v278;
              v138 |= (unint64_t)(v279 & 0x7F) << v276;
              if (v279 < 0)
              {
                v276 += 7;
                unint64_t v133 = v278;
                BOOL v14 = v277++ > 8;
                if (v14) {
                  goto LABEL_319;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v138) = 0;
              }
            }
            break;
          }
LABEL_448:
          *((_DWORD *)this + 38) = v138;
          goto LABEL_489;
        case 0x16u:
          *(void *)((char *)this + 164) |= 0x8000uLL;
          unint64_t v141 = *((void *)a2 + 1);
          unint64_t v142 = *((void *)a2 + 2);
          uint64_t v143 = *(void *)a2;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            char v144 = 0;
            unsigned int v145 = 0;
            uint64_t v146 = 0;
            do
            {
              unint64_t v147 = v141 + 1;
              *((void *)a2 + 1) = v141 + 1;
              char v148 = *(unsigned char *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0) {
                goto LABEL_452;
              }
              v144 += 7;
              unint64_t v141 = v147;
              BOOL v14 = v145++ > 8;
            }
            while (!v14);
LABEL_326:
            LODWORD(v146) = 0;
            goto LABEL_452;
          }
          char v280 = 0;
          unsigned int v281 = 0;
          uint64_t v146 = 0;
          if (v142 <= v141) {
            unint64_t v142 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v282 = v141 + 1;
              char v283 = *(unsigned char *)(v143 + v141);
              *((void *)a2 + 1) = v282;
              v146 |= (unint64_t)(v283 & 0x7F) << v280;
              if (v283 < 0)
              {
                v280 += 7;
                unint64_t v141 = v282;
                BOOL v14 = v281++ > 8;
                if (v14) {
                  goto LABEL_326;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v146) = 0;
              }
            }
            break;
          }
LABEL_452:
          *((_DWORD *)this + 22) = v146;
          goto LABEL_489;
        case 0x17u:
          *(void *)((char *)this + 164) |= 0x100000uLL;
          unint64_t v149 = *((void *)a2 + 1);
          unint64_t v150 = *((void *)a2 + 2);
          uint64_t v151 = *(void *)a2;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)a2 + 1) = v149 + 1;
              char v156 = *(unsigned char *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_456;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v14 = v153++ > 8;
            }
            while (!v14);
LABEL_333:
            LODWORD(v154) = 0;
            goto LABEL_456;
          }
          char v284 = 0;
          unsigned int v285 = 0;
          uint64_t v154 = 0;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v286 = v149 + 1;
              char v287 = *(unsigned char *)(v151 + v149);
              *((void *)a2 + 1) = v286;
              v154 |= (unint64_t)(v287 & 0x7F) << v284;
              if (v287 < 0)
              {
                v284 += 7;
                unint64_t v149 = v286;
                BOOL v14 = v285++ > 8;
                if (v14) {
                  goto LABEL_333;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v154) = 0;
              }
            }
            break;
          }
LABEL_456:
          *((_DWORD *)this + 27) = v154;
          goto LABEL_489;
        case 0x18u:
          *(void *)((char *)this + 164) |= 0x100uLL;
          unint64_t v157 = *((void *)a2 + 1);
          if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((void *)a2 + 2)) {
            goto LABEL_165;
          }
          *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v157);
          goto LABEL_391;
        case 0x19u:
          *(void *)((char *)this + 164) |= 0x200000uLL;
          unint64_t v158 = *((void *)a2 + 1);
          if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((void *)a2 + 2)) {
            goto LABEL_165;
          }
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v158);
          goto LABEL_391;
        case 0x1Au:
          *(void *)((char *)this + 164) |= 0x200uLL;
          unint64_t v159 = *((void *)a2 + 1);
          if (v159 <= 0xFFFFFFFFFFFFFFFBLL && v159 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v159);
LABEL_391:
            uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_392:
            *((void *)a2 + 1) = v21;
          }
          else
          {
LABEL_165:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_489;
        case 0x1Bu:
          *(void *)((char *)this + 164) |= 0x20000uLL;
          unint64_t v160 = *((void *)a2 + 1);
          unint64_t v161 = *((void *)a2 + 2);
          uint64_t v162 = *(void *)a2;
          if (v160 <= 0xFFFFFFFFFFFFFFF5 && v160 + 10 <= v161)
          {
            char v163 = 0;
            unsigned int v164 = 0;
            uint64_t v165 = 0;
            do
            {
              unint64_t v166 = v160 + 1;
              *((void *)a2 + 1) = v160 + 1;
              char v167 = *(unsigned char *)(v162 + v160);
              v165 |= (unint64_t)(v167 & 0x7F) << v163;
              if ((v167 & 0x80) == 0) {
                goto LABEL_460;
              }
              v163 += 7;
              unint64_t v160 = v166;
              BOOL v14 = v164++ > 8;
            }
            while (!v14);
LABEL_340:
            LODWORD(v165) = 0;
            goto LABEL_460;
          }
          char v288 = 0;
          unsigned int v289 = 0;
          uint64_t v165 = 0;
          if (v161 <= v160) {
            unint64_t v161 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v161 == v160)
            {
              LODWORD(v165) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v290 = v160 + 1;
              char v291 = *(unsigned char *)(v162 + v160);
              *((void *)a2 + 1) = v290;
              v165 |= (unint64_t)(v291 & 0x7F) << v288;
              if (v291 < 0)
              {
                v288 += 7;
                unint64_t v160 = v290;
                BOOL v14 = v289++ > 8;
                if (v14) {
                  goto LABEL_340;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v165) = 0;
              }
            }
            break;
          }
LABEL_460:
          *((_DWORD *)this + 24) = v165;
          goto LABEL_489;
        case 0x1Cu:
          *(void *)((char *)this + 164) |= 0x40000uLL;
          unint64_t v168 = *((void *)a2 + 1);
          unint64_t v169 = *((void *)a2 + 2);
          uint64_t v170 = *(void *)a2;
          if (v168 <= 0xFFFFFFFFFFFFFFF5 && v168 + 10 <= v169)
          {
            char v171 = 0;
            unsigned int v172 = 0;
            uint64_t v173 = 0;
            do
            {
              unint64_t v174 = v168 + 1;
              *((void *)a2 + 1) = v168 + 1;
              char v175 = *(unsigned char *)(v170 + v168);
              v173 |= (unint64_t)(v175 & 0x7F) << v171;
              if ((v175 & 0x80) == 0) {
                goto LABEL_464;
              }
              v171 += 7;
              unint64_t v168 = v174;
              BOOL v14 = v172++ > 8;
            }
            while (!v14);
LABEL_347:
            LODWORD(v173) = 0;
            goto LABEL_464;
          }
          char v292 = 0;
          unsigned int v293 = 0;
          uint64_t v173 = 0;
          if (v169 <= v168) {
            unint64_t v169 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v169 == v168)
            {
              LODWORD(v173) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v294 = v168 + 1;
              char v295 = *(unsigned char *)(v170 + v168);
              *((void *)a2 + 1) = v294;
              v173 |= (unint64_t)(v295 & 0x7F) << v292;
              if (v295 < 0)
              {
                v292 += 7;
                unint64_t v168 = v294;
                BOOL v14 = v293++ > 8;
                if (v14) {
                  goto LABEL_347;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v173) = 0;
              }
            }
            break;
          }
LABEL_464:
          *((_DWORD *)this + 25) = v173;
          goto LABEL_489;
        case 0x1Du:
          *(void *)((char *)this + 164) |= 0x10000uLL;
          unint64_t v176 = *((void *)a2 + 1);
          unint64_t v177 = *((void *)a2 + 2);
          uint64_t v178 = *(void *)a2;
          if (v176 <= 0xFFFFFFFFFFFFFFF5 && v176 + 10 <= v177)
          {
            char v179 = 0;
            unsigned int v180 = 0;
            uint64_t v181 = 0;
            do
            {
              unint64_t v182 = v176 + 1;
              *((void *)a2 + 1) = v176 + 1;
              char v183 = *(unsigned char *)(v178 + v176);
              v181 |= (unint64_t)(v183 & 0x7F) << v179;
              if ((v183 & 0x80) == 0) {
                goto LABEL_468;
              }
              v179 += 7;
              unint64_t v176 = v182;
              BOOL v14 = v180++ > 8;
            }
            while (!v14);
LABEL_354:
            LODWORD(v181) = 0;
            goto LABEL_468;
          }
          char v296 = 0;
          unsigned int v297 = 0;
          uint64_t v181 = 0;
          if (v177 <= v176) {
            unint64_t v177 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v177 == v176)
            {
              LODWORD(v181) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v298 = v176 + 1;
              char v299 = *(unsigned char *)(v178 + v176);
              *((void *)a2 + 1) = v298;
              v181 |= (unint64_t)(v299 & 0x7F) << v296;
              if (v299 < 0)
              {
                v296 += 7;
                unint64_t v176 = v298;
                BOOL v14 = v297++ > 8;
                if (v14) {
                  goto LABEL_354;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v181) = 0;
              }
            }
            break;
          }
LABEL_468:
          *((_DWORD *)this + 23) = v181;
          goto LABEL_489;
        case 0x1Eu:
          *(void *)((char *)this + 164) |= 8uLL;
          unint64_t v184 = *((void *)a2 + 1);
          unint64_t v185 = *((void *)a2 + 2);
          uint64_t v186 = *(void *)a2;
          if (v184 <= 0xFFFFFFFFFFFFFFF5 && v184 + 10 <= v185)
          {
            char v187 = 0;
            unsigned int v188 = 0;
            uint64_t v189 = 0;
            do
            {
              unint64_t v190 = v184 + 1;
              *((void *)a2 + 1) = v184 + 1;
              char v191 = *(unsigned char *)(v186 + v184);
              v189 |= (unint64_t)(v191 & 0x7F) << v187;
              if ((v191 & 0x80) == 0) {
                goto LABEL_472;
              }
              v187 += 7;
              unint64_t v184 = v190;
              BOOL v14 = v188++ > 8;
            }
            while (!v14);
LABEL_361:
            uint64_t v189 = 0;
            goto LABEL_472;
          }
          char v300 = 0;
          unsigned int v301 = 0;
          uint64_t v189 = 0;
          if (v185 <= v184) {
            unint64_t v185 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v185 == v184)
            {
              uint64_t v189 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v302 = v184 + 1;
              char v303 = *(unsigned char *)(v186 + v184);
              *((void *)a2 + 1) = v302;
              v189 |= (unint64_t)(v303 & 0x7F) << v300;
              if (v303 < 0)
              {
                v300 += 7;
                unint64_t v184 = v302;
                BOOL v14 = v301++ > 8;
                if (v14) {
                  goto LABEL_361;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v189 = 0;
              }
            }
            break;
          }
LABEL_472:
          *((void *)this + 4) = v189;
          goto LABEL_489;
        case 0x1Fu:
          *(void *)((char *)this + 164) |= 4uLL;
          unint64_t v192 = *((void *)a2 + 1);
          unint64_t v193 = *((void *)a2 + 2);
          uint64_t v194 = *(void *)a2;
          if (v192 <= 0xFFFFFFFFFFFFFFF5 && v192 + 10 <= v193)
          {
            char v195 = 0;
            unsigned int v196 = 0;
            uint64_t v197 = 0;
            do
            {
              unint64_t v198 = v192 + 1;
              *((void *)a2 + 1) = v192 + 1;
              char v199 = *(unsigned char *)(v194 + v192);
              v197 |= (unint64_t)(v199 & 0x7F) << v195;
              if ((v199 & 0x80) == 0) {
                goto LABEL_476;
              }
              v195 += 7;
              unint64_t v192 = v198;
              BOOL v14 = v196++ > 8;
            }
            while (!v14);
LABEL_368:
            uint64_t v197 = 0;
            goto LABEL_476;
          }
          char v304 = 0;
          unsigned int v305 = 0;
          uint64_t v197 = 0;
          if (v193 <= v192) {
            unint64_t v193 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v193 == v192)
            {
              uint64_t v197 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v306 = v192 + 1;
              char v307 = *(unsigned char *)(v194 + v192);
              *((void *)a2 + 1) = v306;
              v197 |= (unint64_t)(v307 & 0x7F) << v304;
              if (v307 < 0)
              {
                v304 += 7;
                unint64_t v192 = v306;
                BOOL v14 = v305++ > 8;
                if (v14) {
                  goto LABEL_368;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v197 = 0;
              }
            }
            break;
          }
LABEL_476:
          *((void *)this + 3) = v197;
          goto LABEL_489;
        case 0x20u:
          *(void *)((char *)this + 164) |= 1uLL;
          unint64_t v200 = *((void *)a2 + 1);
          unint64_t v201 = *((void *)a2 + 2);
          uint64_t v202 = *(void *)a2;
          if (v200 <= 0xFFFFFFFFFFFFFFF5 && v200 + 10 <= v201)
          {
            char v203 = 0;
            unsigned int v204 = 0;
            uint64_t v205 = 0;
            do
            {
              unint64_t v206 = v200 + 1;
              *((void *)a2 + 1) = v200 + 1;
              char v207 = *(unsigned char *)(v202 + v200);
              v205 |= (unint64_t)(v207 & 0x7F) << v203;
              if ((v207 & 0x80) == 0) {
                goto LABEL_480;
              }
              v203 += 7;
              unint64_t v200 = v206;
              BOOL v14 = v204++ > 8;
            }
            while (!v14);
LABEL_375:
            uint64_t v205 = 0;
            goto LABEL_480;
          }
          char v308 = 0;
          unsigned int v309 = 0;
          uint64_t v205 = 0;
          if (v201 <= v200) {
            unint64_t v201 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v201 == v200)
            {
              uint64_t v205 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v310 = v200 + 1;
              char v311 = *(unsigned char *)(v202 + v200);
              *((void *)a2 + 1) = v310;
              v205 |= (unint64_t)(v311 & 0x7F) << v308;
              if (v311 < 0)
              {
                v308 += 7;
                unint64_t v200 = v310;
                BOOL v14 = v309++ > 8;
                if (v14) {
                  goto LABEL_375;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v205 = 0;
              }
            }
            break;
          }
LABEL_480:
          *((void *)this + 1) = v205;
          goto LABEL_489;
        case 0x21u:
          *(void *)((char *)this + 164) |= 2uLL;
          unint64_t v208 = *((void *)a2 + 1);
          unint64_t v209 = *((void *)a2 + 2);
          uint64_t v210 = *(void *)a2;
          if (v208 <= 0xFFFFFFFFFFFFFFF5 && v208 + 10 <= v209)
          {
            char v211 = 0;
            unsigned int v212 = 0;
            uint64_t v213 = 0;
            do
            {
              unint64_t v214 = v208 + 1;
              *((void *)a2 + 1) = v208 + 1;
              char v215 = *(unsigned char *)(v210 + v208);
              v213 |= (unint64_t)(v215 & 0x7F) << v211;
              if ((v215 & 0x80) == 0) {
                goto LABEL_484;
              }
              v211 += 7;
              unint64_t v208 = v214;
              BOOL v14 = v212++ > 8;
            }
            while (!v14);
LABEL_382:
            uint64_t v213 = 0;
            goto LABEL_484;
          }
          char v312 = 0;
          unsigned int v313 = 0;
          uint64_t v213 = 0;
          if (v209 <= v208) {
            unint64_t v209 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v209 == v208)
            {
              uint64_t v213 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v314 = v208 + 1;
              char v315 = *(unsigned char *)(v210 + v208);
              *((void *)a2 + 1) = v314;
              v213 |= (unint64_t)(v315 & 0x7F) << v312;
              if (v315 < 0)
              {
                v312 += 7;
                unint64_t v208 = v314;
                BOOL v14 = v313++ > 8;
                if (v14) {
                  goto LABEL_382;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v213 = 0;
              }
            }
            break;
          }
LABEL_484:
          *((void *)this + 2) = v213;
          goto LABEL_489;
        case 0x22u:
          *(void *)((char *)this + 164) |= 0x800uLL;
          unint64_t v216 = *((void *)a2 + 1);
          unint64_t v217 = *((void *)a2 + 2);
          uint64_t v218 = *(void *)a2;
          if (v216 <= 0xFFFFFFFFFFFFFFF5 && v216 + 10 <= v217)
          {
            char v219 = 0;
            unsigned int v220 = 0;
            uint64_t v221 = 0;
            do
            {
              unint64_t v222 = v216 + 1;
              *((void *)a2 + 1) = v216 + 1;
              char v223 = *(unsigned char *)(v218 + v216);
              v221 |= (unint64_t)(v223 & 0x7F) << v219;
              if ((v223 & 0x80) == 0) {
                goto LABEL_488;
              }
              v219 += 7;
              unint64_t v216 = v222;
              BOOL v14 = v220++ > 8;
            }
            while (!v14);
LABEL_389:
            LODWORD(v221) = 0;
            goto LABEL_488;
          }
          char v316 = 0;
          unsigned int v317 = 0;
          uint64_t v221 = 0;
          if (v217 <= v216) {
            unint64_t v217 = *((void *)a2 + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_489;
      }
      while (1)
      {
        if (v217 == v216)
        {
          LODWORD(v221) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_488;
        }
        unint64_t v318 = v216 + 1;
        char v319 = *(unsigned char *)(v218 + v216);
        *((void *)a2 + 1) = v318;
        v221 |= (unint64_t)(v319 & 0x7F) << v316;
        if ((v319 & 0x80) == 0) {
          break;
        }
        v316 += 7;
        unint64_t v216 = v318;
        BOOL v14 = v317++ > 8;
        if (v14) {
          goto LABEL_389;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v221) = 0;
      }
LABEL_488:
      *((_DWORD *)this + 18) = v221;
LABEL_489:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DopplerRawDataInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 164);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    uint64_t v4 = *(void *)(v3 + 164);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_38;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 2u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 3u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 4u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 5u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 6u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 7u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 8u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 9u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0xAu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 160), 0xBu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 140), 0xCu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0xDu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0xEu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0xFu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 128), 0x10u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 0x11u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 132), 0x12u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x13u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 124), 0x14u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0x15u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0x16u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0x17u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x18u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x19u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_29:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_30:
    if ((v4 & 8) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_31:
    if ((v4 & 4) == 0) {
      goto LABEL_32;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_33:
    if ((v4 & 2) == 0) {
      goto LABEL_34;
    }
LABEL_68:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0x21u);
    if ((*(void *)(v3 + 164) & 0x800) == 0) {
      return this;
    }
    goto LABEL_69;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0x20u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 2) != 0) {
    goto LABEL_68;
  }
LABEL_34:
  if ((v4 & 0x800) == 0) {
    return this;
  }
LABEL_69:
  unsigned int v5 = *(_DWORD *)(v3 + 72);

  return PB::Writer::writeVarInt(a2, v5, 0x22u);
}

BOOL CMMsl::DopplerRawDataInput::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 164);
  uint64_t v3 = *(void *)(a2 + 164);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(void *)(a2 + 164) & 0x800) == 0;
  if ((v2 & 0x800) != 0) {
    return (v3 & 0x800) != 0 && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72);
  }
  return v4;
}

uint64_t CMMsl::DopplerRawDataInput::hash_value(CMMsl::DopplerRawDataInput *this)
{
  uint64_t v1 = *(void *)((char *)this + 164);
  if ((v1 & 0x10) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_3;
    }
LABEL_61:
    uint64_t v51 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_6;
    }
LABEL_62:
    uint64_t v50 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_63:
    uint64_t v49 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_12;
    }
LABEL_64:
    uint64_t v48 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_65:
    uint64_t v47 = 0;
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_18;
    }
LABEL_66:
    uint64_t v46 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_67;
  }
  if (*((double *)this + 5) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 5);
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_61;
  }
LABEL_3:
  float v3 = *((float *)this + 26);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v51 = v4;
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_62;
  }
LABEL_6:
  float v5 = *((float *)this + 36);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v50 = v6;
  if ((v1 & 0x20) == 0) {
    goto LABEL_63;
  }
LABEL_9:
  float v7 = *((float *)this + 12);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v49 = v8;
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_64;
  }
LABEL_12:
  float v9 = *((float *)this + 37);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v48 = v10;
  if ((v1 & 0x40) == 0) {
    goto LABEL_65;
  }
LABEL_15:
  float v11 = *((float *)this + 13);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v47 = v12;
  if ((v1 & 0x100000000) == 0) {
    goto LABEL_66;
  }
LABEL_18:
  float v13 = *((float *)this + 39);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v46 = v14;
  if ((v1 & 0x2000) != 0)
  {
LABEL_21:
    uint64_t v45 = *((unsigned int *)this + 20);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_22;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v45 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_22:
    uint64_t v15 = *((unsigned int *)this + 19);
    if ((v1 & 0x80) != 0) {
      goto LABEL_23;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v15 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_23:
    uint64_t v16 = *((unsigned int *)this + 14);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_24;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v16 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_24:
    uint64_t v17 = *((unsigned int *)this + 40);
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t v17 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_25:
    uint64_t v18 = *((unsigned int *)this + 35);
    if ((v1 & 0x400) != 0) {
      goto LABEL_26;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v18 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_26:
    uint64_t v19 = *((unsigned int *)this + 17);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_27;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v19 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_27:
    uint64_t v20 = *((unsigned int *)this + 21);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v20 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_28:
    uint64_t v21 = *((unsigned int *)this + 30);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_29;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t v21 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_29:
    uint64_t v22 = *((unsigned int *)this + 32);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t v22 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_30:
    uint64_t v23 = *((int *)this + 34);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v23 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_31:
    uint64_t v24 = *((int *)this + 33);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t v24 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_32:
    uint64_t v25 = *((unsigned int *)this + 29);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t v25 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_33:
    uint64_t v26 = *((unsigned int *)this + 31);
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_34;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t v26 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_34:
    uint64_t v27 = *((unsigned int *)this + 38);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v27 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_35:
    uint64_t v28 = *((unsigned int *)this + 22);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_36;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v28 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_36:
    uint64_t v29 = *((unsigned int *)this + 27);
    if ((v1 & 0x100) != 0) {
      goto LABEL_37;
    }
LABEL_83:
    uint64_t v31 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_41;
    }
LABEL_84:
    uint64_t v33 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_45;
    }
LABEL_85:
    uint64_t v35 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_49;
    }
    goto LABEL_86;
  }
LABEL_82:
  uint64_t v29 = 0;
  if ((v1 & 0x100) == 0) {
    goto LABEL_83;
  }
LABEL_37:
  float v30 = *((float *)this + 15);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = LODWORD(v30);
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_84;
  }
LABEL_41:
  float v32 = *((float *)this + 28);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = LODWORD(v32);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_85;
  }
LABEL_45:
  float v34 = *((float *)this + 16);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = LODWORD(v34);
  }
  if ((v1 & 0x20000) != 0)
  {
LABEL_49:
    uint64_t v36 = *((unsigned int *)this + 24);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_50;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v36 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_50:
    uint64_t v37 = *((unsigned int *)this + 25);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_51;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t v37 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_51:
    uint64_t v38 = *((unsigned int *)this + 23);
    if ((v1 & 8) != 0) {
      goto LABEL_52;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t v38 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_52:
    uint64_t v39 = *((void *)this + 4);
    if ((v1 & 4) != 0) {
      goto LABEL_53;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v39 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_53:
    uint64_t v40 = *((void *)this + 3);
    if (v1) {
      goto LABEL_54;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v40 = 0;
  if (v1)
  {
LABEL_54:
    uint64_t v41 = *((void *)this + 1);
    if ((v1 & 2) != 0) {
      goto LABEL_55;
    }
LABEL_92:
    uint64_t v42 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_56;
    }
LABEL_93:
    uint64_t v43 = 0;
    return v51 ^ v2 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43;
  }
LABEL_91:
  uint64_t v41 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_92;
  }
LABEL_55:
  uint64_t v42 = *((void *)this + 2);
  if ((v1 & 0x800) == 0) {
    goto LABEL_93;
  }
LABEL_56:
  uint64_t v43 = *((unsigned int *)this + 18);
  return v51 ^ v2 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43;
}

uint64_t CMMsl::DopplerSample::DopplerSample(uint64_t this)
{
  *(void *)this = off_1003A5590;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A5590;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::DopplerSample::~DopplerSample(CMMsl::DopplerSample *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::DopplerSample::DopplerSample(uint64_t this, const CMMsl::DopplerSample *a2)
{
  *(void *)this = off_1003A5590;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::DopplerSample *CMMsl::DopplerSample::operator=(const CMMsl::DopplerSample *a1, const CMMsl::DopplerSample *a2)
{
  if (a1 != a2)
  {
    CMMsl::DopplerSample::DopplerSample((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DopplerSample *a2, CMMsl::DopplerSample *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::DopplerSample::DopplerSample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5590;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A5590;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::DopplerSample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A5590;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::DopplerSample::formatText(CMMsl::DopplerSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "proximityState", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DopplerSample::readFrom(CMMsl::DopplerSample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DopplerSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::DopplerSample::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::DopplerSample::hash_value(CMMsl::DopplerSample *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::DoubleTap::DoubleTap(uint64_t this)
{
  *(void *)this = off_1003A55C8;
  *(_DWORD *)(this + 28) = -1;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A55C8;
  *(_DWORD *)(this + 28) = -1;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::DoubleTap::~DoubleTap(CMMsl::DoubleTap *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::DoubleTap::DoubleTap(uint64_t this, const CMMsl::DoubleTap *a2)
{
  *(void *)this = off_1003A55C8;
  *(_DWORD *)(this + 28) = -1;
  *(_DWORD *)(this + 48) = 0;
  __int16 v2 = *((_WORD *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 48) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 10);
    v3 |= 0x80u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 40) = v5;
    __int16 v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 28) = v6;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 16) = v7;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v8 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 20) = v8;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  int v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 32) = v9;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v10 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v10;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_20:
    int v12 = *((_DWORD *)a2 + 6);
    *(_WORD *)(this + 48) = v3 | 8;
    *(_DWORD *)(this + 24) = v12;
    return this;
  }
LABEL_19:
  int v11 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 44) = v11;
  if ((*((_WORD *)a2 + 24) & 8) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::DoubleTap::operator=(uint64_t a1, const CMMsl::DoubleTap *a2)
{
  if ((const CMMsl::DoubleTap *)a1 != a2)
  {
    CMMsl::DoubleTap::DoubleTap((uint64_t)v13, a2);
    uint64_t v3 = v15;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v3;
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    int v6 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v19;
    int v19 = v6;
    uint64_t v7 = v17;
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v16;
    *(void *)(a1 + 32) = v7;
    int v10 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v20;
    int v20 = v10;
    int v11 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v18;
    int v18 = v11;
    uint64_t v16 = v9;
    uint64_t v17 = v8;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DoubleTap *a2, CMMsl::DoubleTap *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  double result = *((double *)a2 + 3);
  uint64_t v7 = *((void *)this + 3);
  *((double *)this + 3) = result;
  *((void *)a2 + 3) = v7;
  return result;
}

double CMMsl::DoubleTap::DoubleTap(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A55C8;
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::DoubleTap::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::DoubleTap::DoubleTap((uint64_t)v13, a2);
    uint64_t v3 = v15;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v3;
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    int v6 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v19;
    int v19 = v6;
    uint64_t v7 = v17;
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v16;
    *(void *)(a1 + 32) = v7;
    int v10 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v20;
    int v20 = v10;
    int v11 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v18;
    int v18 = v11;
    uint64_t v16 = v9;
    uint64_t v17 = v8;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::DoubleTap::formatText(CMMsl::DoubleTap *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "currentMeanAngleY", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaMeanAngleY", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "doubleTapCounter", *((_DWORD *)this + 6));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "doubleTapStatus", *((_DWORD *)this + 7));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "entropyConcha", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "entropyTragus", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 10));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "tapInterval", *((float *)this + 11));
  if (*((_WORD *)this + 24)) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_11:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DoubleTap::readFrom(CMMsl::DoubleTap *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 24) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_86;
            case 2u:
              *((_WORD *)this + 24) |= 0x80u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_91;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_90:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_90;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_91:
              *((_DWORD *)this + 10) = v25;
              goto LABEL_102;
            case 3u:
              *((_WORD *)this + 24) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_96;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_95:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_95;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_96;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_96:
              *((_DWORD *)this + 7) = v31;
              goto LABEL_102;
            case 4u:
              *((_WORD *)this + 24) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_85;
            case 5u:
              *((_WORD *)this + 24) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_85;
            case 6u:
              *((_WORD *)this + 24) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_85;
            case 7u:
              *((_WORD *)this + 24) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_85;
            case 8u:
              *((_WORD *)this + 24) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_85:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_86:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_55:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_102;
            case 9u:
              *((_WORD *)this + 24) |= 8u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_101;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_100:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_100;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_101;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_101:
              *((_DWORD *)this + 6) = v37;
LABEL_102:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_102;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::DoubleTap::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 48);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 2u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 3u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 5u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 6u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(float *)(v3 + 44), 8u);
    if ((*(_WORD *)(v3 + 48) & 8) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 7u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_19:
  unsigned int v5 = *(_DWORD *)(v3 + 24);

  return PB::Writer::writeVarInt(a2, v5, 9u);
}

BOOL CMMsl::DoubleTap::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 48);
  __int16 v3 = *(_WORD *)(a2 + 48);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0) {
    return (v3 & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
  return v4;
}

uint64_t CMMsl::DoubleTap::hash_value(CMMsl::DoubleTap *this)
{
  __int16 v1 = *((_WORD *)this + 24);
  if (v1)
  {
    double v2 = *((double *)this + 1);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 10);
      if ((v1 & 0x10) != 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_4:
    uint64_t v4 = *((int *)this + 7);
    if ((v1 & 2) != 0) {
      goto LABEL_5;
    }
LABEL_26:
    uint64_t v6 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_8;
    }
LABEL_27:
    uint64_t v8 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_11;
    }
LABEL_28:
    uint64_t v10 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_14;
    }
LABEL_29:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 24) & 0x100) != 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_25:
  uint64_t v4 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_26;
  }
LABEL_5:
  float v5 = *((float *)this + 4);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_27;
  }
LABEL_8:
  float v7 = *((float *)this + 5);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_28;
  }
LABEL_11:
  float v9 = *((float *)this + 8);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_29;
  }
LABEL_14:
  float v11 = *((float *)this + 9);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_17:
    float v13 = *((float *)this + 11);
    uint64_t v14 = LODWORD(v13);
    if (v13 == 0.0) {
      uint64_t v14 = 0;
    }
    if ((v1 & 8) != 0) {
      goto LABEL_20;
    }
LABEL_31:
    uint64_t v15 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15;
  }
LABEL_30:
  uint64_t v14 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_31;
  }
LABEL_20:
  uint64_t v15 = *((unsigned int *)this + 6);
  return v3 ^ *(void *)&v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15;
}

uint64_t CMMsl::ElevationChange::ElevationChange(uint64_t this)
{
  *(void *)this = off_1003A5600;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = off_1003A5600;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void CMMsl::ElevationChange::~ElevationChange(CMMsl::ElevationChange *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::ElevationChange::ElevationChange(uint64_t this, const CMMsl::ElevationChange *a2)
{
  *(void *)this = off_1003A5600;
  *(_DWORD *)(this + 60) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    __int16 v3 = 2;
    *(_WORD *)(this + 60) = 2;
    *(void *)(this + 16) = v4;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if (v2)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 60) = v3;
    *(void *)(this + 8) = v5;
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x10u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 32) = v6;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 36) = v7;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v8 = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 52) = v8;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v9 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 28) = v9;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v10 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 40) = v10;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 48) = v11;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v12 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 44) = v12;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0) {
      return this;
    }
LABEL_24:
    char v14 = *((unsigned char *)a2 + 56);
    *(_WORD *)(this + 60) = v3 | 0x400;
    *(unsigned char *)(this + 56) = v14;
    return this;
  }
LABEL_23:
  int v13 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 24) = v13;
  if ((*((_WORD *)a2 + 30) & 0x400) != 0) {
    goto LABEL_24;
  }
  return this;
}

CMMsl *CMMsl::ElevationChange::operator=(CMMsl *a1, const CMMsl::ElevationChange *a2)
{
  if (a1 != a2)
  {
    CMMsl::ElevationChange::ElevationChange((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ElevationChange *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ElevationChange *a2, CMMsl::ElevationChange *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  int v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  int v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  int v8 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v8;
  int v9 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  int v10 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  int v11 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v11;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LOBYTE(v11) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v11;
  return result;
}

float CMMsl::ElevationChange::ElevationChange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5600;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return result;
}

CMMsl *CMMsl::ElevationChange::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ElevationChange::ElevationChange((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ElevationChange *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ElevationChange::formatText(CMMsl::ElevationChange *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "averageFilteredPressure", *((float *)this + 6));
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaStepCount", *((_DWORD *)this + 7));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "elevationAscended", *((_DWORD *)this + 8));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "elevationDescended", *((_DWORD *)this + 9));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "isWorkoutElevationFusion", *((unsigned char *)this + 56));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "pressureAmplitude", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "pressureFailureState", *((_DWORD *)this + 11));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "pressureQuality", *((_DWORD *)this + 12));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "source", *((_DWORD *)this + 13));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  if ((*((_WORD *)this + 30) & 2) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ElevationChange::readFrom(CMMsl::ElevationChange *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 30) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_78;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_30;
            case 2u:
              *((_WORD *)this + 30) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_78;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_30:
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_127;
            case 3u:
              *((_WORD *)this + 30) |= 0x10u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_132;
                  }
                  unint64_t v61 = v21++;
                  char v62 = *(unsigned char *)(v22 + v61);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_131:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_131;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_132:
              *((_DWORD *)this + 8) = v25;
              goto LABEL_158;
            case 4u:
              *((_WORD *)this + 30) |= 0x20u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_137;
                  }
                  unint64_t v65 = v27++;
                  char v66 = *(unsigned char *)(v28 + v65);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_136:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_136;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_137;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_137:
              *((_DWORD *)this + 9) = v31;
              goto LABEL_158;
            case 5u:
              *((_WORD *)this + 30) |= 0x200u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_142;
                  }
                  unint64_t v69 = v33++;
                  char v70 = *(unsigned char *)(v34 + v69);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_141:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_141;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_142;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_142:
              *((_DWORD *)this + 13) = v37;
              goto LABEL_158;
            case 6u:
              *((_WORD *)this + 30) |= 8u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_147;
                  }
                  unint64_t v73 = v39++;
                  char v74 = *(unsigned char *)(v40 + v73);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_146:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_146;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_147:
              *((_DWORD *)this + 7) = v43;
              goto LABEL_158;
            case 7u:
              *((_WORD *)this + 30) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_78;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_126;
            case 8u:
              *((_WORD *)this + 30) |= 0x100u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_152;
                  }
                  unint64_t v77 = v45++;
                  char v78 = *(unsigned char *)(v46 + v77);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_151:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_151;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_152:
              *((_DWORD *)this + 12) = v49;
              goto LABEL_158;
            case 9u:
              *((_WORD *)this + 30) |= 0x80u;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_157;
                  }
                  unint64_t v81 = v51++;
                  char v82 = *(unsigned char *)(v52 + v81);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_156:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_156;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_157;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_157:
              *((_DWORD *)this + 11) = v55;
LABEL_158:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xAu:
              *((_WORD *)this + 30) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_126:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_127:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_78:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_158;
            case 0xBu:
              *((_WORD *)this + 30) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v58 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v57 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v58 = v57 != 0;
              }
              *((unsigned char *)this + 56) = v58;
              goto LABEL_158;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_158;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ElevationChange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 3u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 4u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 5u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 6u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 7u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 8u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xAu);
    if ((*(_WORD *)(v3 + 60) & 0x400) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 9u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x400) == 0) {
    return this;
  }
LABEL_23:
  char v5 = *(unsigned char *)(v3 + 56);

  return PB::Writer::write(a2, v5, 0xBu);
}

BOOL CMMsl::ElevationChange::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 60);
  __int16 v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x400) == 0;
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0) {
    return (*(_WORD *)(a2 + 60) & 0x400) != 0 && *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56);
  }
  return v4;
}

uint64_t CMMsl::ElevationChange::hash_value(CMMsl::ElevationChange *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 2) == 0)
  {
    double v2 = 0.0;
    if (v1) {
      goto LABEL_3;
    }
LABEL_22:
    double v3 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_3:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_6:
    uint64_t v4 = *((unsigned int *)this + 8);
    if ((v1 & 0x20) != 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v4 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_7:
    uint64_t v5 = *((unsigned int *)this + 9);
    if ((*((_WORD *)this + 30) & 0x200) != 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v5 = 0;
  if ((*((_WORD *)this + 30) & 0x200) != 0)
  {
LABEL_8:
    uint64_t v6 = *((unsigned int *)this + 13);
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_9:
    uint64_t v7 = *((int *)this + 7);
    if ((v1 & 0x40) != 0) {
      goto LABEL_10;
    }
LABEL_27:
    uint64_t v9 = 0;
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_26:
  uint64_t v7 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_27;
  }
LABEL_10:
  float v8 = *((float *)this + 10);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x100) != 0)
  {
LABEL_13:
    uint64_t v10 = *((int *)this + 12);
    if ((v1 & 0x80) != 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v10 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    uint64_t v11 = *((int *)this + 11);
    if ((v1 & 4) != 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v11 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_15:
    float v12 = *((float *)this + 6);
    uint64_t v13 = LODWORD(v12);
    if (v12 == 0.0) {
      uint64_t v13 = 0;
    }
    if ((*((_WORD *)this + 30) & 0x400) != 0) {
      goto LABEL_18;
    }
LABEL_31:
    uint64_t v14 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10 ^ v11 ^ v13 ^ v14;
  }
LABEL_30:
  uint64_t v13 = 0;
  if ((*((_WORD *)this + 30) & 0x400) == 0) {
    goto LABEL_31;
  }
LABEL_18:
  uint64_t v14 = *((unsigned __int8 *)this + 56);
  return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10 ^ v11 ^ v13 ^ v14;
}

uint64_t CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(uint64_t this)
{
  *(void *)this = off_1003A5638;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(void *)this = off_1003A5638;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

void CMMsl::ElevationGradeEstimator::~ElevationGradeEstimator(CMMsl::ElevationGradeEstimator *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(uint64_t this, const CMMsl::ElevationGradeEstimator *a2)
{
  *(void *)this = off_1003A5638;
  *(_DWORD *)(this + 92) = 0;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 8) != 0)
  {
    uint64_t v4 = *((void *)a2 + 4);
    int v3 = 8;
    *(_DWORD *)(this + 92) = 8;
    *(void *)(this + 32) = v4;
    int v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_DWORD *)(this + 92) = v3;
    *(void *)(this + 16) = v5;
    int v2 = *((_DWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *(_DWORD *)(this + 92) = v3;
    *(void *)(this + 24) = v6;
    int v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 76) = v7;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v8 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 48) = v8;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v9 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v9;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v10 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 60) = v10;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v11 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 56) = v11;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  char v12 = *((unsigned char *)a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 92) = v3;
  *(unsigned char *)(this + 88) = v12;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v13 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 64) = v13;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v14 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 92) = v3;
  *(void *)(this + 40) = v14;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v15 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 52) = v15;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v16 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 80) = v16;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 1) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v17 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 92) = v3;
  *(void *)(this + 8) = v17;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v18 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 68) = v18;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      return this;
    }
LABEL_36:
    char v20 = *((unsigned char *)a2 + 89);
    *(_DWORD *)(this + 92) = v3 | 0x10000;
    *(unsigned char *)(this + 89) = v20;
    return this;
  }
LABEL_35:
  int v19 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 72) = v19;
  if ((*((_DWORD *)a2 + 23) & 0x10000) != 0) {
    goto LABEL_36;
  }
  return this;
}

CMMsl *CMMsl::ElevationGradeEstimator::operator=(CMMsl *a1, const CMMsl::ElevationGradeEstimator *a2)
{
  if (a1 != a2)
  {
    CMMsl::ElevationGradeEstimator::ElevationGradeEstimator((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ElevationGradeEstimator *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ElevationGradeEstimator *a2, CMMsl::ElevationGradeEstimator *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v6) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LOBYTE(v6) = *((unsigned char *)this + 88);
  *((unsigned char *)this + 88) = *((unsigned char *)a2 + 88);
  *((unsigned char *)a2 + 88) = v6;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  LODWORD(v7) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  float result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  LOBYTE(v6) = *((unsigned char *)this + 89);
  *((unsigned char *)this + 89) = *((unsigned char *)a2 + 89);
  *((unsigned char *)a2 + 89) = v6;
  return result;
}

float CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5638;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  float result = *(float *)(a2 + 72);
  *(float *)(a1 + 72) = result;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return result;
}

CMMsl *CMMsl::ElevationGradeEstimator::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ElevationGradeEstimator::ElevationGradeEstimator((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ElevationGradeEstimator *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ElevationGradeEstimator::formatText(CMMsl::ElevationGradeEstimator *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "altitudeDelta", *((float *)this + 12));
    int v5 = *((_DWORD *)this + 23);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "altitudeDeltaStreaming", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "deltaTime", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "didEstimate", *((unsigned char *)this + 88));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "downhillStartTime", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "elevationAscended", *((void *)this + 2));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "elevationDescended", *((void *)this + 3));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "gradeType", *((_DWORD *)this + 15));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "heightRef", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "isWorkoutElevationFusion", *((unsigned char *)this + 89));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "predictionError", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "predictionIntercept", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "source", *((_DWORD *)this + 19));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 8) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "timeDeltaStreaming", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "timeRef", *((double *)this + 5));
  if ((*((_DWORD *)this + 23) & 0x4000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(a2, "verticalSpeed", *((float *)this + 21));
LABEL_19:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ElevationGradeEstimator::readFrom(CMMsl::ElevationGradeEstimator *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 23) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_87;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_81;
            case 2u:
              *((_DWORD *)this + 23) |= 2u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_129;
                  }
                  unint64_t v51 = v21++;
                  char v52 = *(unsigned char *)(v22 + v51);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_128:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_128;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_129;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_129:
              *((void *)this + 2) = v25;
              goto LABEL_145;
            case 3u:
              *((_DWORD *)this + 23) |= 4u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_134;
                  }
                  unint64_t v55 = v27++;
                  char v56 = *(unsigned char *)(v28 + v55);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_133:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_134;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_133;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_134;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_134:
              *((void *)this + 3) = v31;
              goto LABEL_145;
            case 4u:
              *((_DWORD *)this + 23) |= 0x1000u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_139;
                  }
                  unint64_t v59 = v33++;
                  char v60 = *(unsigned char *)(v34 + v59);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_138:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_139;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_138;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_139;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_139:
              *((_DWORD *)this + 19) = v37;
              goto LABEL_145;
            case 5u:
              *((_DWORD *)this + 23) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_87;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_123;
            case 6u:
              *((_DWORD *)this + 23) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_87;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_123;
            case 7u:
              *((_DWORD *)this + 23) |= 0x100u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_144;
                  }
                  unint64_t v63 = v39++;
                  char v64 = *(unsigned char *)(v40 + v63);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_143:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_144;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_143;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_144;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_144:
              *((_DWORD *)this + 15) = v43;
LABEL_145:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 8u:
              *((_DWORD *)this + 23) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_87;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_123;
            case 9u:
              *((_DWORD *)this + 23) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *((unsigned char *)this + 88) = v46;
              goto LABEL_145;
            case 0xAu:
              *((_DWORD *)this + 23) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_87;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_123;
            case 0xBu:
              *((_DWORD *)this + 23) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_87;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_81;
            case 0xCu:
              *((_DWORD *)this + 23) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_87;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_123;
            case 0xDu:
              *((_DWORD *)this + 23) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_87;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_123;
            case 0xEu:
              *((_DWORD *)this + 23) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_87;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_81:
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_124;
            case 0xFu:
              *((_DWORD *)this + 23) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_87;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_123;
            case 0x10u:
              *((_DWORD *)this + 23) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_123:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_124:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_87:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_145;
            case 0x11u:
              *((_DWORD *)this + 23) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *((unsigned char *)this + 89) = v48;
              goto LABEL_145;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_145;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ElevationGradeEstimator::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 92);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    int v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 3u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 4u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 5u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 6u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 7u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 8u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 88), 9u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xAu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xBu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xCu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xDu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xEu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
LABEL_34:
    this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x10u);
    if ((*(_DWORD *)(v3 + 92) & 0x10000) == 0) {
      return this;
    }
    goto LABEL_35;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xFu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) != 0) {
    goto LABEL_34;
  }
LABEL_17:
  if ((v4 & 0x10000) == 0) {
    return this;
  }
LABEL_35:
  char v5 = *(unsigned char *)(v3 + 89);

  return PB::Writer::write(a2, v5, 0x11u);
}

BOOL CMMsl::ElevationGradeEstimator::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 92);
  int v3 = *(_DWORD *)(a2 + 92);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 88) != *(unsigned __int8 *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x10000) == 0;
  if ((v2 & 0x10000) != 0) {
    return (v3 & 0x10000) != 0 && *(unsigned __int8 *)(a1 + 89) == *(unsigned __int8 *)(a2 + 89);
  }
  return v4;
}

uint64_t CMMsl::ElevationGradeEstimator::hash_value(CMMsl::ElevationGradeEstimator *this)
{
  int v1 = *((_DWORD *)this + 23);
  if ((v1 & 8) != 0)
  {
    double v2 = *((double *)this + 4);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 2) != 0)
    {
LABEL_3:
      uint64_t v3 = *((void *)this + 2);
      if ((v1 & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_4:
    uint64_t v4 = *((void *)this + 3);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v4 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_5:
    uint64_t v5 = *((int *)this + 19);
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_45:
    uint64_t v7 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_9;
    }
LABEL_46:
    uint64_t v9 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_44:
  uint64_t v5 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_45;
  }
LABEL_6:
  float v6 = *((float *)this + 12);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_46;
  }
LABEL_9:
  float v8 = *((float *)this + 21);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_12:
    uint64_t v10 = *((int *)this + 15);
    if ((v1 & 0x80) != 0) {
      goto LABEL_13;
    }
LABEL_48:
    uint64_t v12 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_47:
  uint64_t v10 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_48;
  }
LABEL_13:
  float v11 = *((float *)this + 14);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_16:
    uint64_t v13 = *((unsigned __int8 *)this + 88);
    if ((v1 & 0x200) != 0) {
      goto LABEL_17;
    }
LABEL_50:
    uint64_t v15 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_20;
    }
LABEL_51:
    double v16 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_23;
    }
LABEL_52:
    uint64_t v18 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_26;
    }
LABEL_53:
    uint64_t v20 = 0;
    if (v1) {
      goto LABEL_29;
    }
LABEL_54:
    double v21 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_32;
    }
LABEL_55:
    uint64_t v23 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_35;
    }
    goto LABEL_56;
  }
LABEL_49:
  uint64_t v13 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_50;
  }
LABEL_17:
  float v14 = *((float *)this + 16);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_51;
  }
LABEL_20:
  double v16 = *((double *)this + 5);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_52;
  }
LABEL_23:
  float v17 = *((float *)this + 13);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_53;
  }
LABEL_26:
  float v19 = *((float *)this + 20);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_54;
  }
LABEL_29:
  double v21 = *((double *)this + 1);
  if (v21 == 0.0) {
    double v21 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_55;
  }
LABEL_32:
  float v22 = *((float *)this + 17);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x800) != 0)
  {
LABEL_35:
    float v24 = *((float *)this + 18);
    uint64_t v25 = LODWORD(v24);
    if (v24 == 0.0) {
      uint64_t v25 = 0;
    }
    if ((v1 & 0x10000) != 0) {
      goto LABEL_38;
    }
LABEL_57:
    uint64_t v26 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v10 ^ v12 ^ v13 ^ v15 ^ *(void *)&v16 ^ v18 ^ v20 ^ *(void *)&v21 ^ v23 ^ v25 ^ v26;
  }
LABEL_56:
  uint64_t v25 = 0;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_57;
  }
LABEL_38:
  uint64_t v26 = *((unsigned __int8 *)this + 89);
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v10 ^ v12 ^ v13 ^ v15 ^ *(void *)&v16 ^ v18 ^ v20 ^ *(void *)&v21 ^ v23 ^ v25 ^ v26;
}

uint64_t CMMsl::ElevationThreshold::ElevationThreshold(uint64_t this)
{
  *(void *)this = off_1003A5670;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A5670;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::ElevationThreshold::~ElevationThreshold(CMMsl::ElevationThreshold *this)
{
  *(void *)this = off_1003A5670;
  uint64_t v4 = *((void *)this + 1);
  double v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *double v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ElevationThreshold::~ElevationThreshold(this);

  operator delete();
}

uint64_t CMMsl::ElevationThreshold::ElevationThreshold(uint64_t this, const CMMsl::ElevationThreshold *a2)
{
  *(void *)this = off_1003A5670;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*((unsigned char *)a2 + 32))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 16) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v3 = *((unsigned char *)a2 + 32);
  if ((v3 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 32) |= 2u;
    *(_DWORD *)(this + 24) = v4;
    char v3 = *((unsigned char *)a2 + 32);
  }
  if ((v3 & 4) != 0)
  {
    char v5 = *((unsigned char *)a2 + 28);
    *(unsigned char *)(this + 32) |= 4u;
    *(unsigned char *)(this + 28) = v5;
  }
  return this;
}

uint64_t CMMsl::ElevationThreshold::operator=(uint64_t a1, const CMMsl::ElevationThreshold *a2)
{
  if ((const CMMsl::ElevationThreshold *)a1 != a2)
  {
    CMMsl::ElevationThreshold::ElevationThreshold((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v4;
    LOBYTE(v5) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v11;
    char v11 = v5;
    CMMsl::ElevationThreshold::~ElevationThreshold((CMMsl::ElevationThreshold *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ElevationThreshold *a2, CMMsl::ElevationThreshold *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LOBYTE(v5) = *((unsigned char *)this + 28);
  *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
  *((unsigned char *)a2 + 28) = v5;
  return result;
}

uint64_t CMMsl::ElevationThreshold::ElevationThreshold(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5670;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v6 = *v4;
  *uint64_t v4 = v5;
  if (v6) {
    sub_100012E84((uint64_t)v4, v6);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return a1;
}

uint64_t CMMsl::ElevationThreshold::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::ElevationThreshold::ElevationThreshold((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v4;
    LOBYTE(v5) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v11;
    char v11 = v5;
    CMMsl::ElevationThreshold::~ElevationThreshold((CMMsl::ElevationThreshold *)v7);
  }
  return a1;
}

uint64_t CMMsl::ElevationThreshold::formatText(CMMsl::ElevationThreshold *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 32) & 4) != 0) {
    PB::TextFormatter::format(a2, "active", *((unsigned char *)this + 28));
  }
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "threshold", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ElevationThreshold::readFrom(CMMsl::ElevationThreshold *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
                goto LABEL_30;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v20);
              uint64_t v21 = *((void *)a2 + 1) + 8;
              goto LABEL_36;
            case 2u:
              operator new();
            case 3u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v23 = *((void *)a2 + 1);
              if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v23);
                uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_36:
                *((void *)a2 + 1) = v21;
              }
              else
              {
LABEL_30:
                *((unsigned char *)a2 + 24) = 1;
              }
LABEL_37:
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v24 = *((void *)a2 + 1);
              if (v24 >= *((void *)a2 + 2))
              {
                BOOL v27 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v25 = v24 + 1;
                int v26 = *(unsigned __int8 *)(*(void *)a2 + v24);
                *((void *)a2 + 1) = v25;
                BOOL v27 = v26 != 0;
              }
              *((unsigned char *)this + 28) = v27;
              goto LABEL_37;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              goto LABEL_37;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ElevationThreshold::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 32)) {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
  }
  if (*(void *)(v3 + 8)) {
    this = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
    char v4 = *(unsigned char *)(v3 + 32);
  }
  if ((v4 & 4) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 28);
    return PB::Writer::write(a2, v5, 4u);
  }
  return this;
}

BOOL CMMsl::ElevationThreshold::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 32);
  char v5 = *(unsigned char *)(a2 + 32);
  if (v4)
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  uint64_t v6 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 8);
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    uint64_t v8 = v6[23];
    if ((v8 & 0x80u) == 0) {
      char v9 = (unsigned __int8 *)v6[23];
    }
    else {
      char v9 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    unsigned int v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      unsigned int v10 = v7[1];
    }
    if (v9 != v10) {
      return 0;
    }
    if (v11 >= 0) {
      unint64_t v12 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      unint64_t v12 = *v7;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((void *)v6 + 1))) {
        return 0;
      }
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8) {
          goto LABEL_23;
        }
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  BOOL result = (v5 & 4) == 0;
  if ((v4 & 4) == 0) {
    return result;
  }
  return (v5 & 4) != 0 && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28);
}

unint64_t CMMsl::ElevationThreshold::hash_value(CMMsl::ElevationThreshold *this)
{
  char v2 = *((unsigned char *)this + 32);
  if (v2)
  {
    if (*((double *)this + 2) == 0.0) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = *((void *)this + 2);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    unint64_t v5 = sub_100012EE0((uint64_t)&v10, v4);
    char v2 = *((unsigned char *)this + 32);
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
LABEL_11:
    float v8 = *((float *)this + 6);
    uint64_t v6 = LODWORD(v8);
    if (v8 == 0.0) {
      uint64_t v6 = 0;
    }
    if ((v2 & 4) != 0) {
      goto LABEL_9;
    }
LABEL_14:
    uint64_t v7 = 0;
    return v5 ^ v3 ^ v6 ^ v7;
  }
  unint64_t v5 = 0;
  if ((v2 & 2) != 0) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v6 = 0;
  if ((v2 & 4) == 0) {
    goto LABEL_14;
  }
LABEL_9:
  uint64_t v7 = *((unsigned __int8 *)this + 28);
  return v5 ^ v3 ^ v6 ^ v7;
}

uint64_t CMMsl::EmergencyState::EmergencyState(uint64_t this)
{
  *(void *)this = off_1003A56A8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = off_1003A56A8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::EmergencyState::~EmergencyState(CMMsl::EmergencyState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::EmergencyState::EmergencyState(uint64_t this, const CMMsl::EmergencyState *a2)
{
  *(void *)this = off_1003A56A8;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(void *)this = off_1003A56A8;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::EmergencyState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = off_1003A56A8;
    int v3 = *(unsigned char *)(a2 + 12) & 1;
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = off_1003A56A8;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::EmergencyState *a2, CMMsl::EmergencyState *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::EmergencyState::EmergencyState(uint64_t result, uint64_t a2)
{
  *(void *)BOOL result = off_1003A56A8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)BOOL result = off_1003A56A8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::EmergencyState::formatText(CMMsl::EmergencyState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::EmergencyState::readFrom(CMMsl::EmergencyState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::EmergencyState::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  }
  return this;
}

BOOL CMMsl::EmergencyState::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::EmergencyState::hash_value(CMMsl::EmergencyState *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned int *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(uint64_t this)
{
  *(void *)this = off_1003A56E0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(void *)this = off_1003A56E0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

void CMMsl::EnhancedDeviceMotion::~EnhancedDeviceMotion(CMMsl::EnhancedDeviceMotion *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(uint64_t this, const CMMsl::EnhancedDeviceMotion *a2)
{
  *(void *)this = off_1003A56E0;
  *(_DWORD *)(this + 96) = 0;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    int v3 = 16;
    *(_DWORD *)(this + 96) = 16;
    *(void *)(this + 40) = v4;
    int v2 = *((_DWORD *)a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_DWORD *)(this + 96) = v3;
    *(void *)(this + 16) = v5;
    int v2 = *((_DWORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *(_DWORD *)(this + 96) = v3;
    *(void *)(this + 24) = v6;
    int v2 = *((_DWORD *)a2 + 24);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 96) = v3;
  *(void *)(this + 32) = v7;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v8 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 96) = v3;
  *(void *)(this + 8) = v8;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 76) = v9;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v10 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 80) = v10;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v11 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 84) = v11;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v12 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 64) = v12;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v13 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 68) = v13;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v14 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 72) = v14;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v15 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 52) = v15;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v16 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 56) = v16;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v17 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 60) = v17;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v18 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 48) = v18;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x10000) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  char v19 = *((unsigned char *)a2 + 92);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 96) = v3;
  *(unsigned char *)(this + 92) = v19;
  int v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      return this;
    }
LABEL_38:
    int v21 = *((_DWORD *)a2 + 22);
    *(_DWORD *)(this + 96) = v3 | 0x8000;
    *(_DWORD *)(this + 88) = v21;
    return this;
  }
LABEL_37:
  char v20 = *((unsigned char *)a2 + 93);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 96) = v3;
  *(unsigned char *)(this + 93) = v20;
  if ((*((_DWORD *)a2 + 24) & 0x8000) != 0) {
    goto LABEL_38;
  }
  return this;
}

CMMsl *CMMsl::EnhancedDeviceMotion::operator=(CMMsl *a1, const CMMsl::EnhancedDeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::EnhancedDeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::EnhancedDeviceMotion *a2, CMMsl::EnhancedDeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v8;
  LODWORD(v8) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v8;
  LODWORD(v8) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  LODWORD(v8) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  LODWORD(v8) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v8;
  LODWORD(v8) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v8;
  LODWORD(v8) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  float result = *((float *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((float *)a2 + 15) = result;
  int v10 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 92);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
  *((unsigned char *)a2 + 92) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 93);
  *((unsigned char *)this + 93) = *((unsigned char *)a2 + 93);
  *((unsigned char *)a2 + 93) = v10;
  int v11 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v11;
  return result;
}

float CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A56E0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  float result = *(float *)(a2 + 60);
  *(float *)(a1 + 60) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return result;
}

CMMsl *CMMsl::EnhancedDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::EnhancedDeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::EnhancedDeviceMotion::formatText(CMMsl::EnhancedDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "doingBiasEstimation", *((unsigned char *)this + 92));
    int v5 = *((_DWORD *)this + 24);
    if ((v5 & 0x20000) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "doingYawCorrection", *((unsigned char *)this + 93));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "magneticFieldCalibrationLevel", *((_DWORD *)this + 12));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "rotationRateX", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "rotationRateY", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "rotationRateZ", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "userAccelerationX", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "userAccelerationY", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "userAccelerationZ", *((float *)this + 21));
  if ((*((_DWORD *)this + 24) & 0x8000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(a2, "variant", *((_DWORD *)this + 22));
LABEL_20:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::EnhancedDeviceMotion::readFrom(CMMsl::EnhancedDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 24) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_39;
            case 2u:
              *((_DWORD *)this + 24) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_39;
            case 3u:
              *((_DWORD *)this + 24) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_39;
            case 4u:
              *((_DWORD *)this + 24) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_39;
            case 5u:
              *((_DWORD *)this + 24) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_39:
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_105;
            case 6u:
              *((_DWORD *)this + 24) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 7u:
              *((_DWORD *)this + 24) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 8u:
              *((_DWORD *)this + 24) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 9u:
              *((_DWORD *)this + 24) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 0xAu:
              *((_DWORD *)this + 24) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 0xBu:
              *((_DWORD *)this + 24) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 0xCu:
              *((_DWORD *)this + 24) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 0xDu:
              *((_DWORD *)this + 24) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 0xEu:
              *((_DWORD *)this + 24) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_104:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_105:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_66:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_116;
            case 0xFu:
              *((_DWORD *)this + 24) |= 0x20u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_110;
                  }
                  unint64_t v39 = v21++;
                  char v40 = *(unsigned char *)(v22 + v39);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_109:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_109;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_110;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_110:
              *((_DWORD *)this + 12) = v25;
              goto LABEL_116;
            case 0x10u:
              *((_DWORD *)this + 24) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 92) = v28;
              goto LABEL_116;
            case 0x11u:
              *((_DWORD *)this + 24) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 93) = v30;
              goto LABEL_116;
            case 0x12u:
              *((_DWORD *)this + 24) |= 0x8000u;
              unint64_t v31 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v32 = *(void *)a2;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v35 = 0;
                if (v2 <= v31) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_115;
                  }
                  unint64_t v43 = v31++;
                  char v44 = *(unsigned char *)(v32 + v43);
                  *((void *)a2 + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  BOOL v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_114:
                    unint64_t v2 = v43 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_114;
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              do
              {
                unint64_t v2 = v31 + 1;
                *((void *)a2 + 1) = v31 + 1;
                char v36 = *(unsigned char *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_115;
                }
                v33 += 7;
                unint64_t v31 = v2;
                BOOL v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_115:
              *((_DWORD *)this + 22) = v35;
LABEL_116:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_116;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::EnhancedDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 96);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    int v4 = *(_DWORD *)(v3 + 96);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 6u);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 7u);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 8u);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 9u);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xAu);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xBu);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xCu);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xDu);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xEu);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0xFu);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 93), 0x11u);
    if ((*(_DWORD *)(v3 + 96) & 0x8000) == 0) {
      return this;
    }
    goto LABEL_37;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 92), 0x10u);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20000) != 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((v4 & 0x8000) == 0) {
    return this;
  }
LABEL_37:
  unsigned int v5 = *(_DWORD *)(v3 + 88);

  return PB::Writer::writeVarInt(a2, v5, 0x12u);
}

BOOL CMMsl::EnhancedDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 96);
  int v3 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 96) & 0x8000) == 0;
  if ((v2 & 0x8000) != 0) {
    return (v3 & 0x8000) != 0 && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88);
  }
  return v4;
}

uint64_t CMMsl::EnhancedDeviceMotion::hash_value(CMMsl::EnhancedDeviceMotion *this)
{
  int v1 = *((_DWORD *)this + 24);
  if ((v1 & 0x10) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_49:
    double v3 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_50:
    double v4 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_51:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_52:
    double v6 = 0.0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_15;
    }
LABEL_53:
    uint64_t v8 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_18;
    }
LABEL_54:
    uint64_t v10 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_21;
    }
LABEL_55:
    uint64_t v12 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_24;
    }
LABEL_56:
    uint64_t v14 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_27;
    }
LABEL_57:
    uint64_t v16 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_30;
    }
LABEL_58:
    uint64_t v18 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_33;
    }
LABEL_59:
    uint64_t v20 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_36;
    }
LABEL_60:
    uint64_t v22 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_39;
    }
LABEL_61:
    uint64_t v24 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_42;
    }
    goto LABEL_62;
  }
  double v2 = *((double *)this + 5);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_49;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_50;
  }
LABEL_6:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_51;
  }
LABEL_9:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_53;
  }
LABEL_15:
  float v7 = *((float *)this + 19);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_54;
  }
LABEL_18:
  float v9 = *((float *)this + 20);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_55;
  }
LABEL_21:
  float v11 = *((float *)this + 21);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_56;
  }
LABEL_24:
  float v13 = *((float *)this + 16);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_57;
  }
LABEL_27:
  float v15 = *((float *)this + 17);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_58;
  }
LABEL_30:
  float v17 = *((float *)this + 18);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_59;
  }
LABEL_33:
  float v19 = *((float *)this + 13);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_60;
  }
LABEL_36:
  float v21 = *((float *)this + 14);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_61;
  }
LABEL_39:
  float v23 = *((float *)this + 15);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_42:
    uint64_t v25 = *((int *)this + 12);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v25 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_43:
    uint64_t v26 = *((unsigned __int8 *)this + 92);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_44;
    }
LABEL_64:
    uint64_t v27 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_45;
    }
LABEL_65:
    uint64_t v28 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28;
  }
LABEL_63:
  uint64_t v26 = 0;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_64;
  }
LABEL_44:
  uint64_t v27 = *((unsigned __int8 *)this + 93);
  if ((v1 & 0x8000) == 0) {
    goto LABEL_65;
  }
LABEL_45:
  uint64_t v28 = *((unsigned int *)this + 22);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients(uint64_t this)
{
  *(void *)this = off_1003A5718;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = off_1003A5718;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::FaceBlendShapeCoefficients::~FaceBlendShapeCoefficients(CMMsl::FaceBlendShapeCoefficients *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients(CMMsl::FaceBlendShapeCoefficients *this, const CMMsl::FaceBlendShapeCoefficients *a2)
{
  *(void *)this = off_1003A5718;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    int v3 = *((_DWORD *)a2 + 2);
    *((unsigned char *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    *((unsigned char *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

const CMMsl::FaceBlendShapeCoefficients *CMMsl::FaceBlendShapeCoefficients::operator=(const CMMsl::FaceBlendShapeCoefficients *a1, const CMMsl::FaceBlendShapeCoefficients *a2)
{
  if (a1 != a2)
  {
    CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients((CMMsl::FaceBlendShapeCoefficients *)v7, a2);
    int v3 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v10;
    int v10 = v3;
    int v4 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v8;
    int v8 = v4;
    int v5 = *((_DWORD *)a1 + 3);
    *((_DWORD *)a1 + 3) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FaceBlendShapeCoefficients *a2, CMMsl::FaceBlendShapeCoefficients *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5718;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A5718;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

_DWORD *CMMsl::FaceBlendShapeCoefficients::operator=(_DWORD *a1, _DWORD *a2)
{
  if (a1 != a2)
  {
    int v10 = off_1003A5718;
    int v3 = a2[4];
    a2[4] = 0;
    int v4 = a2[2];
    int v5 = a2[3];
    int v6 = a1[4];
    a1[4] = v3;
    int v13 = v6;
    int v7 = a1[2];
    a1[2] = v4;
    int v11 = v7;
    int v8 = a1[3];
    a1[3] = v5;
    int v12 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::formatText(CMMsl::FaceBlendShapeCoefficients *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "name", *((_DWORD *)this + 2));
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "value", *((float *)this + 3));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FaceBlendShapeCoefficients::readFrom(CMMsl::FaceBlendShapeCoefficients *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 12);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::FaceBlendShapeCoefficients::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 2) == 0;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    return (*(unsigned char *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  }
  return v2;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::hash_value(CMMsl::FaceBlendShapeCoefficients *this)
{
  if ((*((unsigned char *)this + 16) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 16) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v3 ^ v1;
  }
  uint64_t v1 = *((int *)this + 2);
  if ((*((unsigned char *)this + 16) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v1;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(uint64_t this)
{
  *(void *)this = off_1003A5750;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A5750;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::FaceBlendShapeCoefficientsSample::~FaceBlendShapeCoefficientsSample(CMMsl::FaceBlendShapeCoefficientsSample *this)
{
  *(void *)this = off_1003A5750;
  float v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A5750;
  float v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A5750;
  float v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(uint64_t this, const CMMsl::FaceBlendShapeCoefficientsSample *a2)
{
  *(void *)this = off_1003A5750;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_1000BB364();
  }
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 5);
    *(unsigned char *)(this + 48) |= 2u;
    *(void *)(this + 40) = v3;
    char v2 = *((unsigned char *)a2 + 48);
  }
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 4);
    *(unsigned char *)(this + 48) |= 1u;
    *(void *)(this + 32) = v4;
  }
  return this;
}

void sub_1000BB364()
{
}

void sub_1000BB468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::operator=(uint64_t a1, const CMMsl::FaceBlendShapeCoefficientsSample *a2)
{
  if ((const CMMsl::FaceBlendShapeCoefficientsSample *)a1 != a2)
  {
    CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    long long v11 = v6;
    uint64_t v8 = off_1003A5750;
    char v13 = (void **)&v9;
    sub_100274A84(&v13);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FaceBlendShapeCoefficientsSample *a2, CMMsl::FaceBlendShapeCoefficientsSample *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5750;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    long long v11 = v6;
    uint64_t v8 = off_1003A5750;
    char v13 = (void **)&v9;
    sub_100274A84(&v13);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::formatText(CMMsl::FaceBlendShapeCoefficientsSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "blendShapeCoefficients");
  }
  char v8 = *((unsigned char *)this + 48);
  if (v8)
  {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 4));
    char v8 = *((unsigned char *)this + 48);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::readFrom(CMMsl::FaceBlendShapeCoefficientsSample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v22);
LABEL_34:
        *((void *)a2 + 1) += 8;
        goto LABEL_35;
      }
      if (v20 == 1) {
        sub_1000BBA48();
      }
      uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
      if (!result) {
        return result;
      }
LABEL_35:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 48) |= 1u;
    unint64_t v21 = *((void *)a2 + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
    {
LABEL_30:
      *((unsigned char *)a2 + 24) = 1;
      goto LABEL_35;
    }
    *((void *)this + 4) = *(void *)(*(void *)a2 + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

void sub_1000BBA48()
{
}

void sub_1000BBB64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base ***)(this + 8);
  uint64_t v5 = *(const PB::Base ***)(this + 16);
  while (v4 != v5)
  {
    long long v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6, 1u);
  }
  char v7 = *(unsigned char *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
    char v7 = *(unsigned char *)(v3 + 48);
  }
  if (v7)
  {
    double v8 = *(double *)(v3 + 32);
    return PB::Writer::write(a2, v8, 3u);
  }
  return this;
}

BOOL CMMsl::FaceBlendShapeCoefficientsSample::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_1000BBCC8((uint64_t *)(a1 + 8), a2 + 8);
  if (result)
  {
    if ((*(unsigned char *)(a1 + 48) & 2) != 0)
    {
      if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
    {
      return 0;
    }
    BOOL result = (*(unsigned char *)(a2 + 48) & 1) == 0;
    if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
      return result;
    }
    return (*(unsigned char *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  }
  return result;
}

BOOL sub_1000BBCC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::FaceBlendShapeCoefficients::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::hash_value(uint64_t **this)
{
  uint64_t v2 = sub_1000BBDB4((uint64_t)&v6, this + 1);
  if (((_BYTE)this[6] & 2) != 0)
  {
    double v3 = *((double *)this + 5);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((_BYTE)this[6]) {
      goto LABEL_3;
    }
LABEL_9:
    double v4 = 0.0;
    return *(void *)&v3 ^ v2 ^ *(void *)&v4;
  }
  double v3 = 0.0;
  if (((_BYTE)this[6] & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  double v4 = *((double *)this + 4);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return *(void *)&v3 ^ v2 ^ *(void *)&v4;
}

uint64_t sub_1000BBDB4(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  double v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v6 = *v2++;
    uint64_t v5 = v6;
    char v7 = *(unsigned char *)(v6 + 16);
    uint64_t v8 = *(int *)(v6 + 8);
    if ((v7 & 1) == 0) {
      uint64_t v8 = 0;
    }
    int v9 = v7 & 2;
    float v10 = *(float *)(v5 + 12);
    BOOL v11 = v10 == 0.0 || v9 == 0;
    uint64_t v12 = LODWORD(v10);
    if (v11) {
      uint64_t v12 = 0;
    }
    result ^= v8 ^ v12;
  }
  while (v2 != v3);
  return result;
}

uint64_t CMMsl::FaceCovered::FaceCovered(uint64_t this)
{
  *(void *)this = off_1003A5788;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A5788;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::FaceCovered::~FaceCovered(CMMsl::FaceCovered *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::FaceCovered::FaceCovered(uint64_t this, const CMMsl::FaceCovered *a2)
{
  *(void *)this = off_1003A5788;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::FaceCovered::operator=(uint64_t a1, const CMMsl::FaceCovered *a2)
{
  if ((const CMMsl::FaceCovered *)a1 != a2)
  {
    CMMsl::FaceCovered::FaceCovered((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FaceCovered *a2, CMMsl::FaceCovered *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::FaceCovered::FaceCovered(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5788;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A5788;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::FaceCovered::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A5788;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::FaceCovered::formatText(CMMsl::FaceCovered *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "isCovered", *((unsigned char *)this + 16));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FaceCovered::readFrom(CMMsl::FaceCovered *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v22 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v22 = v21 != 0;
        }
        *((unsigned char *)this + 16) = v22;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FaceCovered::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::FaceCovered::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::FaceCovered::hash_value(CMMsl::FaceCovered *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

double CMMsl::FaceDownDetection::FaceDownDetection(CMMsl::FaceDownDetection *this)
{
  *(void *)this = off_1003A57C0;
  *((_DWORD *)this + 24) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A57C0;
  *((_DWORD *)this + 24) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::FaceDownDetection::~FaceDownDetection(CMMsl::FaceDownDetection *this)
{
  *(void *)this = off_1003A57C0;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FaceDownDetection::~FaceDownDetection(this);

  operator delete();
}

CMMsl::FaceDownDetection *CMMsl::FaceDownDetection::FaceDownDetection(CMMsl::FaceDownDetection *this, const CMMsl::FaceDownDetection *a2)
{
  *(void *)this = off_1003A57C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  char v4 = (char *)this + 8;
  *((_DWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_WORD *)a2 + 48) & 2) != 0)
  {
    uint64_t v5 = *((void *)a2 + 8);
    *((_WORD *)this + 48) = 2;
    *((void *)this + 8) = v5;
  }
  if (this != a2)
  {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v6 = *((_WORD *)a2 + 48);
  if ((v6 & 8) != 0)
  {
    int v9 = *((_DWORD *)a2 + 19);
    *((_WORD *)this + 48) |= 8u;
    *((_DWORD *)this + 19) = v9;
    __int16 v6 = *((_WORD *)a2 + 48);
    if ((v6 & 0x10) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0) {
        goto LABEL_8;
      }
      goto LABEL_17;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_7;
  }
  int v10 = *((_DWORD *)a2 + 20);
  *((_WORD *)this + 48) |= 0x10u;
  *((_DWORD *)this + 20) = v10;
  __int16 v6 = *((_WORD *)a2 + 48);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  char v11 = *((unsigned char *)a2 + 92);
  *((_WORD *)this + 48) |= 0x80u;
  *((unsigned char *)this + 92) = v11;
  __int16 v6 = *((_WORD *)a2 + 48);
  if ((v6 & 0x100) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v12 = *((unsigned char *)a2 + 93);
  *((_WORD *)this + 48) |= 0x100u;
  *((unsigned char *)this + 93) = v12;
  __int16 v6 = *((_WORD *)a2 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_10:
    if ((v6 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v13 = *((_DWORD *)a2 + 18);
  *((_WORD *)this + 48) |= 4u;
  *((_DWORD *)this + 18) = v13;
  __int16 v6 = *((_WORD *)a2 + 48);
  if ((v6 & 0x20) == 0)
  {
LABEL_11:
    if ((v6 & 0x40) == 0) {
      goto LABEL_12;
    }
LABEL_21:
    int v15 = *((_DWORD *)a2 + 22);
    *((_WORD *)this + 48) |= 0x40u;
    *((_DWORD *)this + 22) = v15;
    if ((*((_WORD *)a2 + 48) & 1) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_20:
  int v14 = *((_DWORD *)a2 + 21);
  *((_WORD *)this + 48) |= 0x20u;
  *((_DWORD *)this + 21) = v14;
  __int16 v6 = *((_WORD *)a2 + 48);
  if ((v6 & 0x40) != 0) {
    goto LABEL_21;
  }
LABEL_12:
  if (v6)
  {
LABEL_13:
    uint64_t v7 = *((void *)a2 + 7);
    *((_WORD *)this + 48) |= 1u;
    *((void *)this + 7) = v7;
  }
  return this;
}

CMMsl *CMMsl::FaceDownDetection::operator=(CMMsl *a1, const CMMsl::FaceDownDetection *a2)
{
  if (a1 != a2)
  {
    CMMsl::FaceDownDetection::FaceDownDetection((CMMsl::FaceDownDetection *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FaceDownDetection *)v5, v3);
    CMMsl::FaceDownDetection::~FaceDownDetection((CMMsl::FaceDownDetection *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FaceDownDetection *a2, CMMsl::FaceDownDetection *a3)
{
  int v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LOBYTE(v10) = *((unsigned char *)this + 92);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
  *((unsigned char *)a2 + 92) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 93);
  *((unsigned char *)this + 93) = *((unsigned char *)a2 + 93);
  *((unsigned char *)a2 + 93) = v10;
  LODWORD(v10) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v10;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::FaceDownDetection::FaceDownDetection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A57C0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

CMMsl *CMMsl::FaceDownDetection::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FaceDownDetection::FaceDownDetection((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FaceDownDetection *)v5, v3);
    CMMsl::FaceDownDetection::~FaceDownDetection((CMMsl::FaceDownDetection *)v5);
  }
  return a1;
}

uint64_t CMMsl::FaceDownDetection::formatText(CMMsl::FaceDownDetection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 4);
  uint64_t v6 = (float *)*((void *)this + 5);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "accel", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 1);
  uint64_t v9 = (float *)*((void *)this + 2);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "accelFiltered", v10);
  }
  __int16 v11 = *((_WORD *)this + 48);
  if (v11)
  {
    PB::TextFormatter::format(a2, "faceDownLookbackTimestamp", *((double *)this + 7));
    __int16 v11 = *((_WORD *)this + 48);
    if ((v11 & 4) == 0)
    {
LABEL_7:
      if ((v11 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
  }
  else if ((v11 & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "faceDownState", *((_DWORD *)this + 18));
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 8) == 0)
  {
LABEL_8:
    if ((v11 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "gravityAngle", *((float *)this + 19));
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 0x10) == 0)
  {
LABEL_9:
    if ((v11 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "gravityAngleVar", *((float *)this + 20));
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 0x80) == 0)
  {
LABEL_10:
    if ((v11 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isFaceDown", *((unsigned char *)this + 92));
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 0x20) == 0)
  {
LABEL_11:
    if ((v11 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "pocketProbability", *((float *)this + 21));
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 0x40) == 0)
  {
LABEL_12:
    if ((v11 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "pocketProbabilityVar", *((float *)this + 22));
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 0x100) == 0)
  {
LABEL_13:
    if ((v11 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "shouldSuppress", *((unsigned char *)this + 93));
  if ((*((_WORD *)this + 48) & 2) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
LABEL_15:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::FaceDownDetection::readFrom(CMMsl::FaceDownDetection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    float v10 = (void **)((char *)this + 32);
    __int16 v11 = (char *)this + 48;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_WORD *)this + 48) |= 2u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v25);
          goto LABEL_102;
        case 2u:
          if (v24 != 2)
          {
            unint64_t v77 = (char *)*((void *)this + 5);
            unint64_t v76 = *((void *)this + 6);
            if ((unint64_t)v77 >= v76)
            {
              unint64_t v85 = (char *)*v10;
              uint64_t v86 = (v77 - (unsigned char *)*v10) >> 2;
              unint64_t v87 = v86 + 1;
              if ((unint64_t)(v86 + 1) >> 62) {
LABEL_170:
              }
                sub_10000EE98();
              uint64_t v88 = v76 - (void)v85;
              if (v88 >> 1 > v87) {
                unint64_t v87 = v88 >> 1;
              }
              if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v89 = v87;
              }
              if (v89)
              {
                uint64_t v90 = (char *)sub_100024458((uint64_t)v11, v89);
                unint64_t v85 = (char *)*((void *)this + 4);
                unint64_t v77 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v90 = 0;
              }
              unsigned int v97 = &v90[4 * v86];
              *(_DWORD *)unsigned int v97 = 0;
              char v78 = v97 + 4;
              while (v77 != v85)
              {
                int v98 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *((_DWORD *)v97 - 1) = v98;
                v97 -= 4;
              }
              *((void *)this + 4) = v97;
              *((void *)this + 5) = v78;
              *((void *)this + 6) = &v90[4 * v89];
              if (v85) {
                operator delete(v85);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v77 = 0;
              char v78 = v77 + 4;
            }
            *((void *)this + 5) = v78;
            goto LABEL_154;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v26 = *((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
          while (v26 < v27 && !*((unsigned char *)a2 + 24))
          {
            unsigned int v29 = (char *)*((void *)this + 5);
            unint64_t v28 = *((void *)this + 6);
            if ((unint64_t)v29 >= v28)
            {
              char v31 = (char *)*v10;
              uint64_t v32 = (v29 - (unsigned char *)*v10) >> 2;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62) {
                goto LABEL_170;
              }
              uint64_t v34 = v28 - (void)v31;
              if (v34 >> 1 > v33) {
                unint64_t v33 = v34 >> 1;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                char v36 = (char *)sub_100024458((uint64_t)v11, v35);
                char v31 = (char *)*((void *)this + 4);
                unsigned int v29 = (char *)*((void *)this + 5);
              }
              else
              {
                char v36 = 0;
              }
              char v37 = &v36[4 * v32];
              *(_DWORD *)char v37 = 0;
              unint64_t v30 = v37 + 4;
              while (v29 != v31)
              {
                int v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }
              *((void *)this + 4) = v37;
              *((void *)this + 5) = v30;
              *((void *)this + 6) = &v36[4 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v29 = 0;
              unint64_t v30 = v29 + 4;
            }
            *((void *)this + 5) = v30;
            unint64_t v39 = *((void *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
              goto LABEL_118;
            }
            *(v30 - 1) = *(_DWORD *)(*(void *)a2 + v39);
            unint64_t v27 = *((void *)a2 + 2);
            unint64_t v26 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v26;
          }
          goto LABEL_119;
        case 3u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v40 = *((void *)a2 + 1);
            unint64_t v41 = *((void *)a2 + 2);
            while (v40 < v41 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v43 = (char *)*((void *)this + 2);
              unint64_t v42 = *((void *)this + 3);
              if ((unint64_t)v43 >= v42)
              {
                int v45 = (char *)*v8;
                uint64_t v46 = (v43 - (unsigned char *)*v8) >> 2;
                unint64_t v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 62) {
                  goto LABEL_171;
                }
                uint64_t v48 = v42 - (void)v45;
                if (v48 >> 1 > v47) {
                  unint64_t v47 = v48 >> 1;
                }
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v49 = v47;
                }
                if (v49)
                {
                  unsigned int v50 = (char *)sub_100024458((uint64_t)v9, v49);
                  int v45 = (char *)*((void *)this + 1);
                  unint64_t v43 = (char *)*((void *)this + 2);
                }
                else
                {
                  unsigned int v50 = 0;
                }
                unint64_t v51 = &v50[4 * v46];
                *(_DWORD *)unint64_t v51 = 0;
                char v44 = v51 + 4;
                while (v43 != v45)
                {
                  int v52 = *((_DWORD *)v43 - 1);
                  v43 -= 4;
                  *((_DWORD *)v51 - 1) = v52;
                  v51 -= 4;
                }
                *((void *)this + 1) = v51;
                *((void *)this + 2) = v44;
                *((void *)this + 3) = &v50[4 * v49];
                if (v45) {
                  operator delete(v45);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v43 = 0;
                char v44 = v43 + 4;
              }
              *((void *)this + 2) = v44;
              unint64_t v53 = *((void *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)a2 + 2))
              {
LABEL_118:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v44 - 1) = *(_DWORD *)(*(void *)a2 + v53);
              unint64_t v41 = *((void *)a2 + 2);
              unint64_t v40 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v40;
            }
LABEL_119:
            PB::Reader::recallMark();
          }
          else
          {
            unsigned int v80 = (char *)*((void *)this + 2);
            unint64_t v79 = *((void *)this + 3);
            if ((unint64_t)v80 >= v79)
            {
              unint64_t v91 = (char *)*v8;
              uint64_t v92 = (v80 - (unsigned char *)*v8) >> 2;
              unint64_t v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 62) {
LABEL_171:
              }
                sub_10000EE98();
              uint64_t v94 = v79 - (void)v91;
              if (v94 >> 1 > v93) {
                unint64_t v93 = v94 >> 1;
              }
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v93;
              }
              if (v95)
              {
                char v96 = (char *)sub_100024458((uint64_t)v9, v95);
                unint64_t v91 = (char *)*((void *)this + 1);
                unsigned int v80 = (char *)*((void *)this + 2);
              }
              else
              {
                char v96 = 0;
              }
              unint64_t v99 = &v96[4 * v92];
              *(_DWORD *)unint64_t v99 = 0;
              char v78 = v99 + 4;
              while (v80 != v91)
              {
                int v100 = *((_DWORD *)v80 - 1);
                v80 -= 4;
                *((_DWORD *)v99 - 1) = v100;
                v99 -= 4;
              }
              *((void *)this + 1) = v99;
              *((void *)this + 2) = v78;
              *((void *)this + 3) = &v96[4 * v95];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v80 = 0;
              char v78 = v80 + 4;
            }
            *((void *)this + 2) = v78;
LABEL_154:
            unint64_t v101 = *((void *)a2 + 1);
            if (v101 <= 0xFFFFFFFFFFFFFFFBLL && v101 + 4 <= *((void *)a2 + 2))
            {
              *(v78 - 1) = *(_DWORD *)(*(void *)a2 + v101);
LABEL_158:
              uint64_t v75 = *((void *)a2 + 1) + 4;
LABEL_159:
              *((void *)a2 + 1) = v75;
            }
            else
            {
LABEL_156:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_160:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 4u:
          *((_WORD *)this + 48) |= 8u;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v54);
          goto LABEL_158;
        case 5u:
          *((_WORD *)this + 48) |= 0x10u;
          unint64_t v55 = *((void *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v55);
          goto LABEL_158;
        case 6u:
          *((_WORD *)this + 48) |= 0x80u;
          unint64_t v56 = *((void *)a2 + 1);
          if (v56 >= *((void *)a2 + 2))
          {
            BOOL v59 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v57 = v56 + 1;
            int v58 = *(unsigned __int8 *)(*(void *)a2 + v56);
            *((void *)a2 + 1) = v57;
            BOOL v59 = v58 != 0;
          }
          *((unsigned char *)this + 92) = v59;
          goto LABEL_160;
        case 7u:
          *((_WORD *)this + 48) |= 0x100u;
          unint64_t v60 = *((void *)a2 + 1);
          if (v60 >= *((void *)a2 + 2))
          {
            BOOL v63 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v61 = v60 + 1;
            int v62 = *(unsigned __int8 *)(*(void *)a2 + v60);
            *((void *)a2 + 1) = v61;
            BOOL v63 = v62 != 0;
          }
          *((unsigned char *)this + 93) = v63;
          goto LABEL_160;
        case 8u:
          *((_WORD *)this + 48) |= 4u;
          unint64_t v64 = *((void *)a2 + 1);
          unint64_t v65 = *((void *)a2 + 2);
          uint64_t v66 = *(void *)a2;
          if (v64 <= 0xFFFFFFFFFFFFFFF5 && v64 + 10 <= v65)
          {
            char v67 = 0;
            unsigned int v68 = 0;
            uint64_t v69 = 0;
            do
            {
              unint64_t v70 = v64 + 1;
              *((void *)a2 + 1) = v64 + 1;
              char v71 = *(unsigned char *)(v66 + v64);
              v69 |= (unint64_t)(v71 & 0x7F) << v67;
              if ((v71 & 0x80) == 0) {
                goto LABEL_139;
              }
              v67 += 7;
              unint64_t v64 = v70;
              BOOL v18 = v68++ > 8;
            }
            while (!v18);
LABEL_117:
            LODWORD(v69) = 0;
            goto LABEL_139;
          }
          char v81 = 0;
          unsigned int v82 = 0;
          uint64_t v69 = 0;
          if (v65 <= v64) {
            unint64_t v65 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v65 == v64)
            {
              LODWORD(v69) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v83 = v64 + 1;
              char v84 = *(unsigned char *)(v66 + v64);
              *((void *)a2 + 1) = v83;
              v69 |= (unint64_t)(v84 & 0x7F) << v81;
              if (v84 < 0)
              {
                v81 += 7;
                unint64_t v64 = v83;
                BOOL v18 = v82++ > 8;
                if (v18) {
                  goto LABEL_117;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v69) = 0;
              }
            }
            break;
          }
LABEL_139:
          *((_DWORD *)this + 18) = v69;
          goto LABEL_160;
        case 9u:
          *((_WORD *)this + 48) |= 0x20u;
          unint64_t v72 = *((void *)a2 + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v72);
          goto LABEL_158;
        case 0xAu:
          *((_WORD *)this + 48) |= 0x40u;
          unint64_t v73 = *((void *)a2 + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v73);
          goto LABEL_158;
        case 0xBu:
          *((_WORD *)this + 48) |= 1u;
          unint64_t v74 = *((void *)a2 + 1);
          if (v74 > 0xFFFFFFFFFFFFFFF7 || v74 + 8 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v74);
LABEL_102:
          uint64_t v75 = *((void *)a2 + 1) + 8;
          goto LABEL_159;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_160;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FaceDownDetection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(_WORD *)(this + 96) & 2) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
  }
  int v4 = *(float **)(v3 + 32);
  uint64_t v5 = *(float **)(v3 + 40);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  float v7 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 76), 4u);
    __int16 v10 = *(_WORD *)(v3 + 96);
    if ((v10 & 0x10) == 0)
    {
LABEL_11:
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else if ((v10 & 0x10) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 5u);
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x80) == 0)
  {
LABEL_12:
    if ((v10 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 92), 6u);
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x100) == 0)
  {
LABEL_13:
    if ((v10 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 93), 7u);
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 4) == 0)
  {
LABEL_14:
    if ((v10 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 8u);
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x20) == 0)
  {
LABEL_15:
    if ((v10 & 0x40) == 0) {
      goto LABEL_16;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(float *)(v3 + 88), 0xAu);
    if ((*(_WORD *)(v3 + 96) & 1) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 9u);
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x40) != 0) {
    goto LABEL_24;
  }
LABEL_16:
  if ((v10 & 1) == 0) {
    return this;
  }
LABEL_25:
  double v11 = *(double *)(v3 + 56);

  return PB::Writer::write(a2, v11, 0xBu);
}

BOOL CMMsl::FaceDownDetection::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 96);
  __int16 v3 = *(_WORD *)(a2 + 96);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  uint64_t v5 = *(float **)(a1 + 32);
  int v4 = *(float **)(a1 + 40);
  float v6 = *(float **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 40) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  uint64_t v8 = *(float **)(a1 + 8);
  float v7 = *(float **)(a1 + 16);
  float v9 = *(float **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 16) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 96) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  BOOL v10 = (v3 & 1) == 0;
  if (v2) {
    return (v3 & 1) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  }
  return v10;
}

uint64_t CMMsl::FaceDownDetection::hash_value(CMMsl::FaceDownDetection *this)
{
  if ((*((_WORD *)this + 48) & 2) != 0)
  {
    if (*((double *)this + 8) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 8);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 8) == 0)
  {
    uint64_t v6 = 0;
    if ((v5 & 0x10) != 0) {
      goto LABEL_8;
    }
LABEL_26:
    uint64_t v8 = 0;
    if ((v5 & 0x80) != 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
  float v17 = *((float *)this + 19);
  uint64_t v6 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v5 & 0x10) == 0) {
    goto LABEL_26;
  }
LABEL_8:
  float v7 = *((float *)this + 20);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v5 & 0x80) != 0)
  {
LABEL_11:
    uint64_t v9 = *((unsigned __int8 *)this + 92);
    if ((*((_WORD *)this + 48) & 0x100) != 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v9 = 0;
  if ((*((_WORD *)this + 48) & 0x100) != 0)
  {
LABEL_12:
    uint64_t v10 = *((unsigned __int8 *)this + 93);
    if ((v5 & 4) != 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v10 = 0;
  if ((v5 & 4) != 0)
  {
LABEL_13:
    uint64_t v11 = *((unsigned int *)this + 18);
    if ((v5 & 0x20) != 0) {
      goto LABEL_14;
    }
LABEL_30:
    uint64_t v13 = 0;
    if ((v5 & 0x40) != 0) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }
LABEL_29:
  uint64_t v11 = 0;
  if ((v5 & 0x20) == 0) {
    goto LABEL_30;
  }
LABEL_14:
  float v12 = *((float *)this + 21);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v5 & 0x40) != 0)
  {
LABEL_17:
    float v14 = *((float *)this + 22);
    uint64_t v15 = LODWORD(v14);
    if (v14 == 0.0) {
      uint64_t v15 = 0;
    }
    if (v5) {
      goto LABEL_20;
    }
LABEL_32:
    double v16 = 0.0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ *(void *)&v16;
  }
LABEL_31:
  uint64_t v15 = 0;
  if ((v5 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_20:
  double v16 = *((double *)this + 7);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ *(void *)&v16;
}

uint64_t CMMsl::FacePose::FacePose(uint64_t this)
{
  *(void *)this = off_1003A57F8;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

{
  *(void *)this = off_1003A57F8;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

void CMMsl::FacePose::~FacePose(CMMsl::FacePose *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::FacePose::FacePose(CMMsl::FacePose *this, const CMMsl::FacePose *a2)
{
  *(void *)this = off_1003A57F8;
  *((_DWORD *)this + 34) = 0;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    int v3 = 2;
    *((_DWORD *)this + 34) = 2;
    *((void *)this + 2) = v4;
    int v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 29);
    v3 |= 0x2000000u;
    *((_DWORD *)this + 34) = v3;
    *((_DWORD *)this + 29) = v5;
    int v2 = *((_DWORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    int v6 = *((_DWORD *)a2 + 20);
    v3 |= 0x10000u;
    *((_DWORD *)this + 34) = v3;
    *((_DWORD *)this + 20) = v6;
    int v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_38;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x80000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 23) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x100000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 24) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x200000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x200000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 25) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x40000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 22) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(v4) = *((_DWORD *)a2 + 30);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 30) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 31) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 32);
  v3 |= 0x10000000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 32) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x8000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 19) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 9) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x400u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 14) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 6) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 8) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v7 = *((_DWORD *)a2 + 21);
  v3 |= 0x20000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 21) = v7;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 10) = v8;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v4 = *((void *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 34) = v3;
  *((void *)this + 1) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  char v9 = *((unsigned char *)a2 + 133);
  v3 |= 0x40000000u;
  *((_DWORD *)this + 34) = v3;
  *((unsigned char *)this + 133) = v9;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  char v10 = *((unsigned char *)a2 + 132);
  v3 |= 0x20000000u;
  *((_DWORD *)this + 34) = v3;
  *((unsigned char *)this + 132) = v10;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 7) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0) {
      goto LABEL_27;
    }
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x4000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0) {
      goto LABEL_28;
    }
    goto LABEL_57;
  }
LABEL_56:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 11) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200) == 0) {
      goto LABEL_29;
    }
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 12) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_59;
  }
LABEL_58:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 13) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_60;
  }
LABEL_59:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x800u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 15) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_31:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x1000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 16) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x2000) == 0)
  {
LABEL_32:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x2000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x400000) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x400000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 26) = v4;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x800000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x800000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 27) = v4;
  if ((*((_DWORD *)a2 + 34) & 0x1000000) == 0) {
    return *(float *)&v4;
  }
LABEL_64:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  *((_DWORD *)this + 34) = v3 | 0x1000000;
  *((_DWORD *)this + 28) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::FacePose::operator=(CMMsl *a1, const CMMsl::FacePose *a2)
{
  if (a1 != a2)
  {
    CMMsl::FacePose::FacePose((CMMsl::FacePose *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FacePose *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FacePose *a2, CMMsl::FacePose *a3)
{
  int v3 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v5;
  int v6 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v6;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  int v7 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v7;
  int v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  LOBYTE(v8) = *((unsigned char *)this + 133);
  *((unsigned char *)this + 133) = *((unsigned char *)a2 + 133);
  *((unsigned char *)a2 + 133) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 132);
  *((unsigned char *)this + 132) = *((unsigned char *)a2 + 132);
  *((unsigned char *)a2 + 132) = v8;
  LODWORD(v9) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  LODWORD(v9) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  LODWORD(v9) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v9;
  LODWORD(v9) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  LODWORD(v9) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  LODWORD(v9) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v9;
  LODWORD(v9) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v9;
  LODWORD(v9) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v9;
  LODWORD(v9) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v9;
  LODWORD(v9) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v9;
  float result = *((float *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((float *)a2 + 28) = result;
  return result;
}

float CMMsl::FacePose::FacePose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A57F8;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 133) = *(unsigned char *)(a2 + 133);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  float result = *(float *)(a2 + 112);
  *(float *)(a1 + 112) = result;
  return result;
}

CMMsl *CMMsl::FacePose::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FacePose::FacePose((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FacePose *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FacePose::formatText(CMMsl::FacePose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "aperture", *((float *)this + 6));
    int v5 = *((_DWORD *)this + 34);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_38;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "ev", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "exposureDuration", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "failureCode", *((_DWORD *)this + 10));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "gaze_x", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "gaze_y", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "gaze_z", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "iso", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "left_eye_x", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "left_eye_y", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "left_eye_z", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "lidAngle", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "lux", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "orientation", *((_DWORD *)this + 20));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "poseLibrary", *((_DWORD *)this + 21));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40000) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "qw", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x80000) == 0)
  {
LABEL_19:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "qx", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x100000) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "qy", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x200000) == 0)
  {
LABEL_21:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "qz", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x400000) == 0)
  {
LABEL_22:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "right_eye_x", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x800000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "right_eye_y", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "right_eye_z", *((float *)this + 28));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 1) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "rollValue", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "sensorCovered", *((unsigned char *)this + 132));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "tooDark", *((unsigned char *)this + 133));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 29));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "x", *((float *)this + 30));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "y", *((float *)this + 31));
  if ((*((_DWORD *)this + 34) & 0x10000000) != 0) {
LABEL_32:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 32));
LABEL_33:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FacePose::readFrom(CMMsl::FacePose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 34) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 2u:
              *((_DWORD *)this + 34) |= 0x2000000u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_176;
                  }
                  unint64_t v51 = v21++;
                  char v52 = *(unsigned char *)(v22 + v51);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_175:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_175;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_176;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_176:
              *((_DWORD *)this + 29) = v25;
              goto LABEL_167;
            case 3u:
              *((_DWORD *)this + 34) |= 0x10000u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_181;
                  }
                  unint64_t v55 = v27++;
                  char v56 = *(unsigned char *)(v28 + v55);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_180:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_181;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_180;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_181;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_181:
              *((_DWORD *)this + 20) = v31;
              goto LABEL_167;
            case 4u:
              *((_DWORD *)this + 34) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 5u:
              *((_DWORD *)this + 34) |= 0x100000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 6u:
              *((_DWORD *)this + 34) |= 0x200000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 7u:
              *((_DWORD *)this + 34) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 8u:
              *((_DWORD *)this + 34) |= 0x4000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 9u:
              *((_DWORD *)this + 34) |= 0x8000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0xAu:
              *((_DWORD *)this + 34) |= 0x10000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0xBu:
              *((_DWORD *)this + 34) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0xCu:
              *((_DWORD *)this + 34) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0xDu:
              *((_DWORD *)this + 34) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0xEu:
              *((_DWORD *)this + 34) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0xFu:
              *((_DWORD *)this + 34) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0x10u:
              *((_DWORD *)this + 34) |= 0x20000u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_186;
                  }
                  unint64_t v59 = v33++;
                  char v60 = *(unsigned char *)(v34 + v59);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_185:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_186;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_185;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_186;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_186:
              *((_DWORD *)this + 21) = v37;
              goto LABEL_167;
            case 0x11u:
              *((_DWORD *)this + 34) |= 0x40u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_191;
                  }
                  unint64_t v63 = v39++;
                  char v64 = *(unsigned char *)(v40 + v63);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_190:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_191;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_190;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_191;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_191:
              *((_DWORD *)this + 10) = v43;
LABEL_167:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x12u:
              *((_DWORD *)this + 34) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_94:
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_166;
            case 0x13u:
              *((_DWORD *)this + 34) |= 0x40000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *((unsigned char *)this + 133) = v46;
              goto LABEL_167;
            case 0x14u:
              *((_DWORD *)this + 34) |= 0x20000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *((unsigned char *)this + 132) = v48;
              goto LABEL_167;
            case 0x15u:
              *((_DWORD *)this + 34) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0x16u:
              *((_DWORD *)this + 34) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0x17u:
              *((_DWORD *)this + 34) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0x18u:
              *((_DWORD *)this + 34) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0x19u:
              *((_DWORD *)this + 34) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0x1Au:
              *((_DWORD *)this + 34) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0x1Bu:
              *((_DWORD *)this + 34) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0x1Cu:
              *((_DWORD *)this + 34) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0x1Du:
              *((_DWORD *)this + 34) |= 0x400000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0x1Eu:
              *((_DWORD *)this + 34) |= 0x800000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_131;
              }
              *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_165;
            case 0x1Fu:
              *((_DWORD *)this + 34) |= 0x1000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_165:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_166:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_131:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_167;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_167;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FacePose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 136);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    int v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 2u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 3u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 4u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 5u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 6u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 7u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 8u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 9u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0xAu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xBu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xCu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xDu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xEu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xFu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0x10u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x11u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0x12u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 133), 0x13u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 132), 0x14u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0x15u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x16u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x17u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x18u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x19u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x1Au);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_28:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x1Bu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x1Cu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_31;
    }
LABEL_62:
    this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x1Eu);
    if ((*(_DWORD *)(v3 + 136) & 0x1000000) == 0) {
      return this;
    }
    goto LABEL_63;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x1Du);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800000) != 0) {
    goto LABEL_62;
  }
LABEL_31:
  if ((v4 & 0x1000000) == 0) {
    return this;
  }
LABEL_63:
  float v5 = *(float *)(v3 + 112);

  return PB::Writer::write(a2, v5, 0x1Fu);
}

BOOL CMMsl::FacePose::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a2 + 136);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 133) != *(unsigned __int8 *)(a2 + 133)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 132) != *(unsigned __int8 *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x1000000) == 0;
  if ((v2 & 0x1000000) != 0) {
    return (v3 & 0x1000000) != 0 && *(float *)(a1 + 112) == *(float *)(a2 + 112);
  }
  return v4;
}

uint64_t CMMsl::FacePose::hash_value(CMMsl::FacePose *this)
{
  int v1 = *((_DWORD *)this + 34);
  if ((v1 & 2) != 0)
  {
    double v53 = *((double *)this + 2);
    if (v53 == 0.0) {
      double v53 = 0.0;
    }
    double v59 = v53;
    if ((v1 & 0x2000000) != 0)
    {
LABEL_3:
      uint64_t v58 = *((unsigned int *)this + 29);
      if ((v1 & 0x10000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_103;
    }
  }
  else
  {
    double v59 = 0.0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v58 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_4:
    uint64_t v57 = *((unsigned int *)this + 20);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_5;
    }
LABEL_104:
    uint64_t v56 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_8;
    }
LABEL_105:
    uint64_t v55 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_11;
    }
LABEL_106:
    uint64_t v7 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_15;
    }
LABEL_107:
    uint64_t v9 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_19;
    }
LABEL_108:
    uint64_t v11 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_23;
    }
LABEL_109:
    uint64_t v13 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_27;
    }
LABEL_110:
    uint64_t v15 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_31;
    }
LABEL_111:
    uint64_t v17 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_35;
    }
LABEL_112:
    uint64_t v19 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_39;
    }
LABEL_113:
    uint64_t v21 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_43;
    }
LABEL_114:
    uint64_t v23 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_47;
    }
LABEL_115:
    uint64_t v25 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_51;
    }
    goto LABEL_116;
  }
LABEL_103:
  uint64_t v57 = 0;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_104;
  }
LABEL_5:
  float v2 = *((float *)this + 23);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  uint64_t v56 = v3;
  if ((v1 & 0x100000) == 0) {
    goto LABEL_105;
  }
LABEL_8:
  float v4 = *((float *)this + 24);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  uint64_t v55 = v5;
  if ((v1 & 0x200000) == 0) {
    goto LABEL_106;
  }
LABEL_11:
  float v6 = *((float *)this + 25);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = LODWORD(v6);
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_107;
  }
LABEL_15:
  float v8 = *((float *)this + 22);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = LODWORD(v8);
  }
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_108;
  }
LABEL_19:
  float v10 = *((float *)this + 30);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = LODWORD(v10);
  }
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_109;
  }
LABEL_23:
  float v12 = *((float *)this + 31);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = LODWORD(v12);
  }
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_110;
  }
LABEL_27:
  float v14 = *((float *)this + 32);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = LODWORD(v14);
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_111;
  }
LABEL_31:
  float v16 = *((float *)this + 19);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = LODWORD(v16);
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_112;
  }
LABEL_35:
  float v18 = *((float *)this + 9);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = LODWORD(v18);
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_113;
  }
LABEL_39:
  float v20 = *((float *)this + 14);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = LODWORD(v20);
  }
  if ((v1 & 4) == 0) {
    goto LABEL_114;
  }
LABEL_43:
  float v22 = *((float *)this + 6);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = LODWORD(v22);
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_115;
  }
LABEL_47:
  float v24 = *((float *)this + 8);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = LODWORD(v24);
  }
  if ((v1 & 0x20000) != 0)
  {
LABEL_51:
    uint64_t v26 = *((unsigned int *)this + 21);
    if ((v1 & 0x40) != 0) {
      goto LABEL_52;
    }
    goto LABEL_117;
  }
LABEL_116:
  uint64_t v26 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_52:
    uint64_t v27 = *((int *)this + 10);
    if (v1) {
      goto LABEL_53;
    }
LABEL_118:
    uint64_t v28 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_57;
    }
    goto LABEL_119;
  }
LABEL_117:
  uint64_t v27 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_118;
  }
LABEL_53:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *((void *)this + 1);
  }
  if ((v1 & 0x40000000) != 0)
  {
LABEL_57:
    uint64_t v29 = *((unsigned __int8 *)this + 133);
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_58;
    }
    goto LABEL_120;
  }
LABEL_119:
  uint64_t v29 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_58:
    uint64_t v30 = *((unsigned __int8 *)this + 132);
    if ((v1 & 8) != 0) {
      goto LABEL_59;
    }
LABEL_121:
    uint64_t v32 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_63;
    }
LABEL_122:
    uint64_t v34 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_67;
    }
LABEL_123:
    uint64_t v36 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_71;
    }
LABEL_124:
    uint64_t v38 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_75;
    }
LABEL_125:
    uint64_t v40 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_79;
    }
LABEL_126:
    uint64_t v42 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_83;
    }
LABEL_127:
    uint64_t v44 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_87;
    }
LABEL_128:
    uint64_t v46 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_90;
    }
LABEL_129:
    uint64_t v48 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_93;
    }
    goto LABEL_130;
  }
LABEL_120:
  uint64_t v30 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_121;
  }
LABEL_59:
  float v31 = *((float *)this + 7);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = LODWORD(v31);
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_122;
  }
LABEL_63:
  float v33 = *((float *)this + 18);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = LODWORD(v33);
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_123;
  }
LABEL_67:
  float v35 = *((float *)this + 11);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = LODWORD(v35);
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_124;
  }
LABEL_71:
  float v37 = *((float *)this + 12);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = LODWORD(v37);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_125;
  }
LABEL_75:
  float v39 = *((float *)this + 13);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = LODWORD(v39);
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_126;
  }
LABEL_79:
  float v41 = *((float *)this + 15);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = LODWORD(v41);
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_127;
  }
LABEL_83:
  float v43 = *((float *)this + 16);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = LODWORD(v43);
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_128;
  }
LABEL_87:
  float v45 = *((float *)this + 17);
  uint64_t v46 = LODWORD(v45);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_129;
  }
LABEL_90:
  float v47 = *((float *)this + 26);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  if ((v1 & 0x800000) != 0)
  {
LABEL_93:
    float v49 = *((float *)this + 27);
    uint64_t v50 = LODWORD(v49);
    if (v49 == 0.0) {
      uint64_t v50 = 0;
    }
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_96;
    }
LABEL_131:
    uint64_t v52 = 0;
    return v58 ^ *(void *)&v59 ^ v57 ^ v56 ^ v55 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
  }
LABEL_130:
  uint64_t v50 = 0;
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_131;
  }
LABEL_96:
  float v51 = *((float *)this + 28);
  uint64_t v52 = LODWORD(v51);
  if (v51 == 0.0) {
    uint64_t v52 = 0;
  }
  return v58 ^ *(void *)&v59 ^ v57 ^ v56 ^ v55 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
}

uint64_t CMMsl::FacePoseSynchronized::FacePoseSynchronized(uint64_t this)
{
  *(void *)this = off_1003A5830;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A5830;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::FacePoseSynchronized::~FacePoseSynchronized(CMMsl::FacePoseSynchronized *this)
{
  *(void *)this = off_1003A5830;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FacePoseSynchronized::~FacePoseSynchronized(this);

  operator delete();
}

uint64_t CMMsl::FacePoseSynchronized::FacePoseSynchronized(uint64_t this, const CMMsl::FacePoseSynchronized *a2)
{
  *(void *)this = off_1003A5830;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  if ((*((unsigned char *)a2 + 32) & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 2);
    *(unsigned char *)(this + 32) = 2;
    *(void *)(this + 16) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 32) & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 32))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 32) = v2;
    *(void *)(this + 8) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 3)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FacePoseSynchronized::operator=(uint64_t a1, const CMMsl::FacePoseSynchronized *a2)
{
  if ((const CMMsl::FacePoseSynchronized *)a1 != a2)
  {
    CMMsl::FacePoseSynchronized::FacePoseSynchronized((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    CMMsl::FacePoseSynchronized::~FacePoseSynchronized((CMMsl::FacePoseSynchronized *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FacePoseSynchronized *a2, CMMsl::FacePoseSynchronized *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  return result;
}

uint64_t CMMsl::FacePoseSynchronized::FacePoseSynchronized(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5830;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::FacePoseSynchronized::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::FacePoseSynchronized::FacePoseSynchronized((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    CMMsl::FacePoseSynchronized::~FacePoseSynchronized((CMMsl::FacePoseSynchronized *)v7);
  }
  return a1;
}

uint64_t CMMsl::FacePoseSynchronized::formatText(CMMsl::FacePoseSynchronized *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 32);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FacePoseSynchronized::readFrom(CMMsl::FacePoseSynchronized *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v22);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_35;
        }
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
        {
LABEL_30:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_35;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v21);
      }
      *((void *)a2 + 1) += 8;
LABEL_35:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::FacePoseSynchronized::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
  }
  if (v4) {
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  }
  char v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5, 3u);
  }
  return this;
}

BOOL CMMsl::FacePoseSynchronized::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a2 + 24);
  BOOL result = v3 == 0;
  if (!v2) {
    return result;
  }
  return v3 && CMMsl::FacePose::operator==(v2, v3);
}

unint64_t CMMsl::FacePoseSynchronized::hash_value(CMMsl::FacePoseSynchronized *this)
{
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
    if (*((double *)this + 2) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 2);
    }
    if (*((unsigned char *)this + 32)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v2 = 0;
    goto LABEL_11;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_10;
  }
LABEL_3:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 1);
  }
LABEL_11:
  unint64_t v3 = *((void *)this + 3);
  if (v3) {
    unint64_t v3 = CMMsl::FacePose::hash_value((CMMsl::FacePose *)v3);
  }
  return v2 ^ v1 ^ v3;
}

uint64_t CMMsl::FacePoseSynchronized::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(uint64_t this)
{
  *(void *)this = off_1003A5868;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A5868;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::FallDetectionActivityClassifierReplay::~FallDetectionActivityClassifierReplay(CMMsl::FallDetectionActivityClassifierReplay *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(CMMsl::FallDetectionActivityClassifierReplay *this, const CMMsl::FallDetectionActivityClassifierReplay *a2)
{
  *(void *)this = off_1003A5868;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 7) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 4) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        return result;
      }
LABEL_12:
      float result = *((float *)a2 + 6);
      *((unsigned char *)this + 32) = v3 | 8;
      *((float *)this + 6) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 5) = v7;
  if ((*((unsigned char *)a2 + 32) & 8) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::operator=(uint64_t a1, const CMMsl::FallDetectionActivityClassifierReplay *a2)
{
  if ((const CMMsl::FallDetectionActivityClassifierReplay *)a1 != a2)
  {
    CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay((CMMsl::FallDetectionActivityClassifierReplay *)v8, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v3;
    uint64_t v4 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v12;
    uint64_t v12 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v10;
    uint64_t v10 = v5;
    int v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallDetectionActivityClassifierReplay *a2, CMMsl::FallDetectionActivityClassifierReplay *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5868;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A5868;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 28);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v10[0] = off_1003A5868;
    v10[1] = v7;
    uint64_t v12 = *(void *)(a1 + 28);
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 28) = v6;
    *(void *)(a1 + 16) = v5;
    void v10[2] = v8;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v11 = v5;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::formatText(CMMsl::FallDetectionActivityClassifierReplay *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "cyclingState", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cyclingStateSummary", *((_DWORD *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "distanceTraveledOverTimeWindow", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "motionType", *((_DWORD *)this + 7));
  if (*((unsigned char *)this + 32)) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::readFrom(CMMsl::FallDetectionActivityClassifierReplay *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  unint64_t v47 = v20++;
                  char v48 = *(unsigned char *)(v21 + v47);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_87:
                unint64_t v2 = v47 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_88:
              *((void *)this + 1) = v24;
              goto LABEL_104;
            case 2u:
              *((unsigned char *)this + 32) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *((_DWORD *)this + 7) = v31;
              goto LABEL_104;
            case 3u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *((_DWORD *)this + 4) = v37;
              goto LABEL_104;
            case 4u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *((_DWORD *)this + 5) = v43;
LABEL_104:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_104;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 4u);
    if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(a2, v5, 5u);
}

BOOL CMMsl::FallDetectionActivityClassifierReplay::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 8) == 0;
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
    return (*(unsigned char *)(a2 + 32) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::hash_value(CMMsl::FallDetectionActivityClassifierReplay *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v2 = *((int *)this + 7);
      if ((*((unsigned char *)this + 32) & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 4);
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_5:
    uint64_t v4 = *((int *)this + 5);
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_13:
    uint64_t v6 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v6;
  }
LABEL_12:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  float v5 = *((float *)this + 6);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  return v2 ^ v1 ^ v3 ^ v4 ^ v6;
}

void *CMMsl::FallDetectionDetector::FallDetectionDetector(void *this)
{
  *this = off_1003A58A0;
  *(void *)((char *)this + 156) = 0;
  return this;
}

{
  *this = off_1003A58A0;
  *(void *)((char *)this + 156) = 0;
  return this;
}

void CMMsl::FallDetectionDetector::~FallDetectionDetector(CMMsl::FallDetectionDetector *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::FallDetectionDetector::FallDetectionDetector(CMMsl::FallDetectionDetector *this, const CMMsl::FallDetectionDetector *a2)
{
  *(void *)this = off_1003A58A0;
  *(void *)((char *)this + 156) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    uint64_t v3 = 1;
    *(void *)((char *)this + 156) = 1;
    *((void *)this + 1) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 156);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4uLL;
    *(void *)((char *)this + 156) = v3;
    *((void *)this + 3) = v5;
    uint64_t v2 = *(void *)((char *)a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2uLL;
    *(void *)((char *)this + 156) = v3;
    *((void *)this + 2) = v6;
    uint64_t v2 = *(void *)((char *)a2 + 156);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_44;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 11) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x20uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 10) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x20000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 22) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x2000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 18) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x10000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 21) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x80000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 24) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x10uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 9) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 20) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 19) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x4000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 31) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 33);
  v3 |= 0x10000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 33) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 35);
  v3 |= 0x40000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 35) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 34);
  v3 |= 0x20000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 34) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v7 = *((_DWORD *)a2 + 12);
  v3 |= 0x80uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 12) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *((_DWORD *)a2 + 32);
  v3 |= 0x8000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 32) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  char v8 = *((unsigned char *)a2 + 152);
  v3 |= 0x200000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 152) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v9 = *((_DWORD *)a2 + 37);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 37) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *((_DWORD *)a2 + 36);
  v3 |= 0x80000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 36) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x400) == 0)
  {
LABEL_26:
    if ((v2 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x400uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 15) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x800uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 16) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 17) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  char v10 = *((unsigned char *)a2 + 153);
  v3 |= 0x400000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 153) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x800000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 28) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 27) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_68;
  }
LABEL_67:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 29) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x200000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 26) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_70;
  }
LABEL_69:
  char v11 = *((unsigned char *)a2 + 155);
  v3 |= 0x1000000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 155) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_35:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_71;
  }
LABEL_70:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x100000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 25) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0) {
      goto LABEL_37;
    }
    goto LABEL_72;
  }
LABEL_71:
  int v12 = *((_DWORD *)a2 + 30);
  v3 |= 0x2000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 30) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x100) == 0) {
      goto LABEL_38;
    }
    goto LABEL_73;
  }
LABEL_72:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 14) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_38:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_74;
  }
LABEL_73:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 13) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_75;
  }
LABEL_74:
  char v13 = *((unsigned char *)a2 + 154);
  v3 |= 0x800000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 154) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_40:
    if ((v2 & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x40000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 23) = v4;
  if ((*(void *)((unsigned char *)a2 + 156) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_76:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *(void *)((char *)this + 156) = v3 | 8;
  *((_DWORD *)this + 8) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::FallDetectionDetector::operator=(CMMsl *a1, const CMMsl::FallDetectionDetector *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallDetectionDetector::FallDetectionDetector((CMMsl::FallDetectionDetector *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionDetector *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallDetectionDetector *a2, CMMsl::FallDetectionDetector *a3)
{
  uint64_t v3 = *(void *)((char *)this + 156);
  *(void *)((char *)this + 156) = *(void *)((char *)a2 + 156);
  *(void *)((char *)a2 + 156) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LOBYTE(v6) = *((unsigned char *)this + 152);
  *((unsigned char *)this + 152) = *((unsigned char *)a2 + 152);
  *((unsigned char *)a2 + 152) = v6;
  LODWORD(v6) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v6;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LOBYTE(v6) = *((unsigned char *)this + 153);
  *((unsigned char *)this + 153) = *((unsigned char *)a2 + 153);
  *((unsigned char *)a2 + 153) = v6;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LOBYTE(v6) = *((unsigned char *)this + 155);
  *((unsigned char *)this + 155) = *((unsigned char *)a2 + 155);
  *((unsigned char *)a2 + 155) = v6;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v6) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v6;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LOBYTE(v6) = *((unsigned char *)this + 154);
  *((unsigned char *)this + 154) = *((unsigned char *)a2 + 154);
  *((unsigned char *)a2 + 154) = v6;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  return result;
}

float CMMsl::FallDetectionDetector::FallDetectionDetector(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A58A0;
  *(void *)(a1 + 156) = *(void *)(a2 + 156);
  *(void *)(a2 + 156) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

CMMsl *CMMsl::FallDetectionDetector::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionDetector::FallDetectionDetector((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionDetector *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionDetector::formatText(CMMsl::FallDetectionDetector *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "abruptGravityChangeAngle", *((float *)this + 8));
    uint64_t v5 = *(void *)((char *)this + 156);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_44;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelPathLength", *((float *)this + 9));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "angleChangePostImpact", *((float *)this + 10));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "angleChangePreImpact", *((float *)this + 11));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "crown", *((_DWORD *)this + 12));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "crownVariance", *((float *)this + 13));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "gravityVariance", *((float *)this + 14));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 1));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "isFall", *((unsigned char *)this + 152));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "isNearFall", *((unsigned char *)this + 153));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "maxAbsX", *((float *)this + 15));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "maxAbsY", *((float *)this + 16));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "maxAbsZ", *((float *)this + 17));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 18));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "maxAngleChangePostImpact", *((float *)this + 19));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "maxAngleChangePreImpact", *((float *)this + 20));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "maxJerkVM", *((float *)this + 21));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "maxMinusMin", *((float *)this + 22));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "medianAbsGravityY", *((float *)this + 23));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "minInertialZ", *((float *)this + 24));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "minInertialZHighFreq", *((float *)this + 25));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "multiPeakAccelPathLengthWithPeak", *((float *)this + 26));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "multiPeakPathLengthDecorrelation", *((float *)this + 27));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "multiPeakPathLengthDelaySpread", *((float *)this + 28));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "multiPeakPathLengthHarmonicMean", *((float *)this + 29));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 2) == 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "operatingMode", *((_DWORD *)this + 30));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 2) == 0)
  {
LABEL_28:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "peakTimestamp", *((void *)this + 2));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "poseAtImpact", *((float *)this + 31));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v5 & 4) == 0) {
      goto LABEL_31;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "posteriorRatio", *((float *)this + 32));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 4) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 3));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "sumDeltaAngles", *((float *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "swingAngle", *((float *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "tiltAngle", *((float *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "timeto3rdZC", *((float *)this + 36));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 37));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "withinCyclingImpactThresholds", *((unsigned char *)this + 154));
  if ((*(void *)((unsigned char *)this + 156) & 0x1000000000) != 0) {
LABEL_38:
  }
    PB::TextFormatter::format(a2, "withinHardThresholds", *((unsigned char *)this + 155));
LABEL_39:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionDetector::readFrom(CMMsl::FallDetectionDetector *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(void *)((char *)this + 156) |= 1uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_196;
            case 2u:
              *(void *)((char *)this + 156) |= 4uLL;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_206;
                  }
                  unint64_t v61 = v21++;
                  char v62 = *(unsigned char *)(v22 + v61);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_205:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_205;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_206;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_206:
              *((void *)this + 3) = v25;
              goto LABEL_197;
            case 3u:
              *(void *)((char *)this + 156) |= 2uLL;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_211;
                  }
                  unint64_t v65 = v27++;
                  char v66 = *(unsigned char *)(v28 + v65);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_210:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_210;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_211;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_211:
              *((void *)this + 2) = v31;
              goto LABEL_197;
            case 4u:
              *(void *)((char *)this + 156) |= 0x40uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 5u:
              *(void *)((char *)this + 156) |= 0x20uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 6u:
              *(void *)((char *)this + 156) |= 0x20000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 7u:
              *(void *)((char *)this + 156) |= 0x2000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 8u:
              *(void *)((char *)this + 156) |= 0x10000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 9u:
              *(void *)((char *)this + 156) |= 0x80000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0xAu:
              *(void *)((char *)this + 156) |= 0x10uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0xBu:
              *(void *)((char *)this + 156) |= 0x8000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0xCu:
              *(void *)((char *)this + 156) |= 0x4000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0xDu:
              *(void *)((char *)this + 156) |= 0x4000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0xEu:
              *(void *)((char *)this + 156) |= 0x10000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0xFu:
              *(void *)((char *)this + 156) |= 0x40000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x10u:
              *(void *)((char *)this + 156) |= 0x20000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x11u:
              *(void *)((char *)this + 156) |= 0x80uLL;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_216;
                  }
                  unint64_t v69 = v33++;
                  char v70 = *(unsigned char *)(v34 + v69);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_215:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_216;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_215;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_216;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_216:
              *((_DWORD *)this + 12) = v37;
              goto LABEL_197;
            case 0x12u:
              *(void *)((char *)this + 156) |= 0x8000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x13u:
              *(void *)((char *)this + 156) |= 0x200000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *((unsigned char *)this + 152) = v40;
              goto LABEL_197;
            case 0x14u:
              *(void *)((char *)this + 156) |= (unint64_t)&_mh_execute_header;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_221;
                  }
                  unint64_t v73 = v41++;
                  char v74 = *(unsigned char *)(v42 + v73);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_220:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_221;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_220;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_221;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_221:
              *((_DWORD *)this + 37) = v45;
              goto LABEL_197;
            case 0x15u:
              *(void *)((char *)this + 156) |= 0x80000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x16u:
              *(void *)((char *)this + 156) |= 0x400uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x17u:
              *(void *)((char *)this + 156) |= 0x800uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x18u:
              *(void *)((char *)this + 156) |= 0x1000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x19u:
              *(void *)((char *)this + 156) |= 0x400000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *((unsigned char *)this + 153) = v48;
              goto LABEL_197;
            case 0x1Au:
              *(void *)((char *)this + 156) |= 0x800000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x1Bu:
              *(void *)((char *)this + 156) |= 0x400000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x1Cu:
              *(void *)((char *)this + 156) |= 0x1000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x1Du:
              *(void *)((char *)this + 156) |= 0x200000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x1Eu:
              *(void *)((char *)this + 156) |= 0x1000000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v50 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v49 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v50 = v49 != 0;
              }
              *((unsigned char *)this + 155) = v50;
              goto LABEL_197;
            case 0x1Fu:
              *(void *)((char *)this + 156) |= 0x100000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x20u:
              *(void *)((char *)this + 156) |= 0x2000000uLL;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_226;
                  }
                  unint64_t v77 = v51++;
                  char v78 = *(unsigned char *)(v52 + v77);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_225:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_226;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_225;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_226;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_226:
              *((_DWORD *)this + 30) = v55;
LABEL_197:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x21u:
              *(void *)((char *)this + 156) |= 0x200uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x22u:
              *(void *)((char *)this + 156) |= 0x100uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x23u:
              *(void *)((char *)this + 156) |= 0x800000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v58 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v57 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v58 = v57 != 0;
              }
              *((unsigned char *)this + 154) = v58;
              goto LABEL_197;
            case 0x24u:
              *(void *)((char *)this + 156) |= 0x40000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_195;
            case 0x25u:
              *(void *)((char *)this + 156) |= 8uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_195:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_196:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_150:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_197;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_197;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionDetector::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 156);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    uint64_t v4 = *(void *)(v3 + 156);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_41;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 2u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 3u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 4u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 5u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 6u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 7u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 8u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 9u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xAu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xBu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xCu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0xDu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0xEu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0xFu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x10u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0x11u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x12u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 152), 0x13u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 0x14u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x15u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_23:
    if ((v4 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x16u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x17u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x18u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 153), 0x19u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 155), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0) {
      goto LABEL_34;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0x20u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x100) == 0) {
      goto LABEL_35;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x21u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x22u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_37;
    }
LABEL_74:
    this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x24u);
    if ((*(void *)(v3 + 156) & 8) == 0) {
      return this;
    }
    goto LABEL_75;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 154), 0x23u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000) != 0) {
    goto LABEL_74;
  }
LABEL_37:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_75:
  float v5 = *(float *)(v3 + 32);

  return PB::Writer::write(a2, v5, 0x25u);
}

BOOL CMMsl::FallDetectionDetector::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 156);
  uint64_t v3 = *(void *)(a2 + 156);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 152) != *(unsigned __int8 *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 155) != *(unsigned __int8 *)(a2 + 155)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 154) != *(unsigned __int8 *)(a2 + 154)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(void *)(a2 + 156) & 8) == 0;
  if ((v2 & 8) != 0) {
    return (v3 & 8) != 0 && *(float *)(a1 + 32) == *(float *)(a2 + 32);
  }
  return v4;
}

uint64_t CMMsl::FallDetectionDetector::hash_value(CMMsl::FallDetectionDetector *this)
{
  uint64_t v1 = *(void *)((char *)this + 156);
  if (v1)
  {
    if (*((double *)this + 1) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 1);
    }
    if ((v1 & 4) != 0)
    {
LABEL_3:
      uint64_t v74 = *((void *)this + 3);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_110;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v74 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    uint64_t v73 = *((void *)this + 2);
    if ((v1 & 0x40) != 0) {
      goto LABEL_5;
    }
LABEL_111:
    uint64_t v72 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_8;
    }
LABEL_112:
    uint64_t v71 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_11;
    }
LABEL_113:
    uint64_t v70 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_14;
    }
LABEL_114:
    uint64_t v69 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_17;
    }
LABEL_115:
    uint64_t v68 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_20;
    }
LABEL_116:
    uint64_t v67 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_23;
    }
LABEL_117:
    uint64_t v66 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_26;
    }
LABEL_118:
    uint64_t v65 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_29;
    }
LABEL_119:
    uint64_t v20 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_33;
    }
LABEL_120:
    uint64_t v22 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_37;
    }
LABEL_121:
    uint64_t v24 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_41;
    }
LABEL_122:
    uint64_t v26 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_45;
    }
LABEL_123:
    uint64_t v28 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_49;
    }
    goto LABEL_124;
  }
LABEL_110:
  uint64_t v73 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_111;
  }
LABEL_5:
  float v3 = *((float *)this + 11);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v72 = v4;
  if ((v1 & 0x20) == 0) {
    goto LABEL_112;
  }
LABEL_8:
  float v5 = *((float *)this + 10);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v71 = v6;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_113;
  }
LABEL_11:
  float v7 = *((float *)this + 22);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v70 = v8;
  if ((v1 & 0x2000) == 0) {
    goto LABEL_114;
  }
LABEL_14:
  float v9 = *((float *)this + 18);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v69 = v10;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_115;
  }
LABEL_17:
  float v11 = *((float *)this + 21);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v68 = v12;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_116;
  }
LABEL_20:
  float v13 = *((float *)this + 24);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v67 = v14;
  if ((v1 & 0x10) == 0) {
    goto LABEL_117;
  }
LABEL_23:
  float v15 = *((float *)this + 9);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v66 = v16;
  if ((v1 & 0x8000) == 0) {
    goto LABEL_118;
  }
LABEL_26:
  float v17 = *((float *)this + 20);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  uint64_t v65 = v18;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_119;
  }
LABEL_29:
  float v19 = *((float *)this + 19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = LODWORD(v19);
  }
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_120;
  }
LABEL_33:
  float v21 = *((float *)this + 31);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = LODWORD(v21);
  }
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_121;
  }
LABEL_37:
  float v23 = *((float *)this + 33);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = LODWORD(v23);
  }
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_122;
  }
LABEL_41:
  float v25 = *((float *)this + 35);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = LODWORD(v25);
  }
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_123;
  }
LABEL_45:
  float v27 = *((float *)this + 34);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = LODWORD(v27);
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_49:
    uint64_t v29 = *((int *)this + 12);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_50;
    }
LABEL_125:
    uint64_t v31 = 0;
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_54;
    }
    goto LABEL_126;
  }
LABEL_124:
  uint64_t v29 = 0;
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_125;
  }
LABEL_50:
  float v30 = *((float *)this + 32);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = LODWORD(v30);
  }
  if ((v1 & 0x200000000) != 0)
  {
LABEL_54:
    uint64_t v32 = *((unsigned __int8 *)this + 152);
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_55;
    }
    goto LABEL_127;
  }
LABEL_126:
  uint64_t v32 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_55:
    uint64_t v33 = *((int *)this + 37);
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_56;
    }
LABEL_128:
    uint64_t v35 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_60;
    }
LABEL_129:
    uint64_t v37 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_64;
    }
LABEL_130:
    uint64_t v39 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_68;
    }
LABEL_131:
    uint64_t v41 = 0;
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_72;
    }
    goto LABEL_132;
  }
LABEL_127:
  uint64_t v33 = 0;
  if ((v1 & 0x80000000) == 0) {
    goto LABEL_128;
  }
LABEL_56:
  float v34 = *((float *)this + 36);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = LODWORD(v34);
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_129;
  }
LABEL_60:
  float v36 = *((float *)this + 15);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = LODWORD(v36);
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_130;
  }
LABEL_64:
  float v38 = *((float *)this + 16);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = LODWORD(v38);
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_131;
  }
LABEL_68:
  float v40 = *((float *)this + 17);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = LODWORD(v40);
  }
  if ((v1 & 0x400000000) != 0)
  {
LABEL_72:
    uint64_t v42 = *((unsigned __int8 *)this + 153);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_73;
    }
LABEL_133:
    uint64_t v44 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_77;
    }
LABEL_134:
    uint64_t v46 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_81;
    }
LABEL_135:
    uint64_t v48 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_84;
    }
LABEL_136:
    uint64_t v50 = 0;
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_87;
    }
    goto LABEL_137;
  }
LABEL_132:
  uint64_t v42 = 0;
  if ((v1 & 0x800000) == 0) {
    goto LABEL_133;
  }
LABEL_73:
  float v43 = *((float *)this + 28);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = LODWORD(v43);
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_134;
  }
LABEL_77:
  float v45 = *((float *)this + 27);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  else {
    uint64_t v46 = LODWORD(v45);
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_135;
  }
LABEL_81:
  float v47 = *((float *)this + 29);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_136;
  }
LABEL_84:
  float v49 = *((float *)this + 26);
  uint64_t v50 = LODWORD(v49);
  if (v49 == 0.0) {
    uint64_t v50 = 0;
  }
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_87:
    uint64_t v51 = *((unsigned __int8 *)this + 155);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_88;
    }
LABEL_138:
    uint64_t v53 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_91;
    }
    goto LABEL_139;
  }
LABEL_137:
  uint64_t v51 = 0;
  if ((v1 & 0x100000) == 0) {
    goto LABEL_138;
  }
LABEL_88:
  float v52 = *((float *)this + 25);
  uint64_t v53 = LODWORD(v52);
  if (v52 == 0.0) {
    uint64_t v53 = 0;
  }
  if ((v1 & 0x2000000) != 0)
  {
LABEL_91:
    uint64_t v54 = *((unsigned int *)this + 30);
    if ((v1 & 0x200) != 0) {
      goto LABEL_92;
    }
LABEL_140:
    uint64_t v56 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_95;
    }
LABEL_141:
    uint64_t v58 = 0;
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_98;
    }
    goto LABEL_142;
  }
LABEL_139:
  uint64_t v54 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_140;
  }
LABEL_92:
  float v55 = *((float *)this + 14);
  uint64_t v56 = LODWORD(v55);
  if (v55 == 0.0) {
    uint64_t v56 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_141;
  }
LABEL_95:
  float v57 = *((float *)this + 13);
  uint64_t v58 = LODWORD(v57);
  if (v57 == 0.0) {
    uint64_t v58 = 0;
  }
  if ((v1 & 0x800000000) != 0)
  {
LABEL_98:
    uint64_t v59 = *((unsigned __int8 *)this + 154);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_99;
    }
    goto LABEL_143;
  }
LABEL_142:
  uint64_t v59 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_99:
    float v60 = *((float *)this + 23);
    uint64_t v61 = LODWORD(v60);
    if (v60 == 0.0) {
      uint64_t v61 = 0;
    }
    if ((v1 & 8) != 0) {
      goto LABEL_102;
    }
LABEL_144:
    uint64_t v63 = 0;
    return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v31 ^ v32 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v51 ^ v53 ^ v54 ^ v56 ^ v58 ^ v59 ^ v61 ^ v63;
  }
LABEL_143:
  uint64_t v61 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_144;
  }
LABEL_102:
  float v62 = *((float *)this + 8);
  uint64_t v63 = LODWORD(v62);
  if (v62 == 0.0) {
    uint64_t v63 = 0;
  }
  return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v31 ^ v32 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v51 ^ v53 ^ v54 ^ v56 ^ v58 ^ v59 ^ v61 ^ v63;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay(uint64_t this)
{
  *(void *)this = off_1003A58D8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A58D8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::FallDetectionGyroControllerReplay::~FallDetectionGyroControllerReplay(CMMsl::FallDetectionGyroControllerReplay *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay(uint64_t this, const CMMsl::FallDetectionGyroControllerReplay *a2)
{
  *(void *)this = off_1003A58D8;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::operator=(uint64_t a1, const CMMsl::FallDetectionGyroControllerReplay *a2)
{
  if ((const CMMsl::FallDetectionGyroControllerReplay *)a1 != a2)
  {
    CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FallDetectionGyroControllerReplay *a2, CMMsl::FallDetectionGyroControllerReplay *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A58D8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = off_1003A58D8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[0] = off_1003A58D8;
    v9[1] = v7;
    LOBYTE(v7) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::formatText(CMMsl::FallDetectionGyroControllerReplay *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "gyroOn", *((unsigned char *)this + 16));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::readFrom(CMMsl::FallDetectionGyroControllerReplay *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v28 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v28 = v27 != 0;
        }
        *((unsigned char *)this + 16) = v28;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v3)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v25 = 0;
          if (v3 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_48;
            }
            unint64_t v32 = v21++;
            char v33 = *(unsigned char *)(v22 + v32);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_47;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
LABEL_47:
          unint64_t v2 = v32 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_48:
        *((void *)this + 1) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::FallDetectionGyroControllerReplay::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::hash_value(CMMsl::FallDetectionGyroControllerReplay *this)
{
  if (*((unsigned char *)this + 20))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ v1;
}

uint64_t CMMsl::FallDetectionReferee::FallDetectionReferee(uint64_t this)
{
  *(void *)this = off_1003A5910;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = off_1003A5910;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::FallDetectionReferee::~FallDetectionReferee(CMMsl::FallDetectionReferee *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::FallDetectionReferee::FallDetectionReferee(uint64_t this, const CMMsl::FallDetectionReferee *a2)
{
  *(void *)this = off_1003A5910;
  *(_DWORD *)(this + 52) = 0;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    __int16 v3 = 2;
    *(_WORD *)(this + 52) = 2;
    *(void *)(this + 16) = v4;
    __int16 v2 = *((_WORD *)a2 + 26);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 52) = v3;
    *(void *)(this + 24) = v5;
    __int16 v2 = *((_WORD *)a2 + 26);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *((void *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 52) = v3;
    *(void *)(this + 8) = v6;
    __int16 v2 = *((_WORD *)a2 + 26);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_WORD *)(this + 52) = v3;
  *(_DWORD *)(this + 32) = v7;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *(_WORD *)(this + 52) = v3;
  *(_DWORD *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_WORD *)(this + 52) = v3;
  *(_DWORD *)(this + 36) = v9;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  char v10 = *((unsigned char *)a2 + 50);
  v3 |= 0x1000u;
  *(_WORD *)(this + 52) = v3;
  *(unsigned char *)(this + 50) = v10;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  char v11 = *((unsigned char *)a2 + 44);
  v3 |= 0x40u;
  *(_WORD *)(this + 52) = v3;
  *(unsigned char *)(this + 44) = v11;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  char v12 = *((unsigned char *)a2 + 45);
  v3 |= 0x80u;
  *(_WORD *)(this + 52) = v3;
  *(unsigned char *)(this + 45) = v12;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  char v13 = *((unsigned char *)a2 + 46);
  v3 |= 0x100u;
  *(_WORD *)(this + 52) = v3;
  *(unsigned char *)(this + 46) = v13;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v14 = *((unsigned char *)a2 + 47);
  v3 |= 0x200u;
  *(_WORD *)(this + 52) = v3;
  *(unsigned char *)(this + 47) = v14;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0) {
      return this;
    }
LABEL_28:
    char v16 = *((unsigned char *)a2 + 49);
    *(_WORD *)(this + 52) = v3 | 0x800;
    *(unsigned char *)(this + 49) = v16;
    return this;
  }
LABEL_27:
  char v15 = *((unsigned char *)a2 + 48);
  v3 |= 0x400u;
  *(_WORD *)(this + 52) = v3;
  *(unsigned char *)(this + 48) = v15;
  if ((*((_WORD *)a2 + 26) & 0x800) != 0) {
    goto LABEL_28;
  }
  return this;
}

CMMsl *CMMsl::FallDetectionReferee::operator=(CMMsl *a1, const CMMsl::FallDetectionReferee *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallDetectionReferee::FallDetectionReferee((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReferee *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionReferee *a2, CMMsl::FallDetectionReferee *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 50);
  *((unsigned char *)this + 50) = *((unsigned char *)a2 + 50);
  *((unsigned char *)a2 + 50) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 45);
  *((unsigned char *)this + 45) = *((unsigned char *)a2 + 45);
  *((unsigned char *)a2 + 45) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 46);
  *((unsigned char *)this + 46) = *((unsigned char *)a2 + 46);
  *((unsigned char *)a2 + 46) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 47);
  *((unsigned char *)this + 47) = *((unsigned char *)a2 + 47);
  *((unsigned char *)a2 + 47) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 48);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *((unsigned char *)a2 + 48) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 49);
  *((unsigned char *)this + 49) = *((unsigned char *)a2 + 49);
  *((unsigned char *)a2 + 49) = v6;
  return result;
}

double CMMsl::FallDetectionReferee::FallDetectionReferee(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5910;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 46);
  *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 47);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  return result;
}

CMMsl *CMMsl::FallDetectionReferee::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionReferee::FallDetectionReferee((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReferee *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionReferee::formatText(CMMsl::FallDetectionReferee *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "consideredAlert", *((unsigned char *)this + 44));
    __int16 v5 = *((_WORD *)this + 26);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "consideredRecovery", *((unsigned char *)this + 45));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "consideredSOS", *((unsigned char *)this + 46));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "droppedAlert", *((unsigned char *)this + 47));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "droppedRecovery", *((unsigned char *)this + 48));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "droppedSOS", *((unsigned char *)this + 49));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "fallTime", *((void *)this + 1));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "impactOperatingMode", *((_DWORD *)this + 8));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x1000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isOtherStateMachineProcessingNearbyImpact", *((unsigned char *)this + 50));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x10) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "refereeCyclingStateDecision", *((_DWORD *)this + 9));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "refereeOperatingMode", *((_DWORD *)this + 10));
  if ((*((_WORD *)this + 26) & 4) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 3));
LABEL_15:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionReferee::readFrom(CMMsl::FallDetectionReferee *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 26) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_151;
            case 2u:
              *((_WORD *)this + 26) |= 4u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_130;
                  }
                  unint64_t v67 = v20++;
                  char v68 = *(unsigned char *)(v21 + v67);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
LABEL_129:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
                goto LABEL_129;
              }
              char v22 = 0;
              unsigned int v23 = 0;
              uint64_t v24 = 0;
              do
              {
                unint64_t v2 = v20 + 1;
                *((void *)a2 + 1) = v20 + 1;
                char v25 = *(unsigned char *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0) {
                  goto LABEL_130;
                }
                v22 += 7;
                unint64_t v20 = v2;
                BOOL v14 = v23++ > 8;
              }
              while (!v14);
              uint64_t v24 = 0;
LABEL_130:
              *((void *)this + 3) = v24;
              goto LABEL_151;
            case 3u:
              *((_WORD *)this + 26) |= 1u;
              unint64_t v26 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v27 = *(void *)a2;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v30 = 0;
                if (v2 <= v26) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v26)
                  {
                    uint64_t v30 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_135;
                  }
                  unint64_t v71 = v26++;
                  char v72 = *(unsigned char *)(v27 + v71);
                  *((void *)a2 + 1) = v26;
                  v30 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    uint64_t v30 = 0;
LABEL_134:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v30 = 0;
                }
                goto LABEL_134;
              }
              char v28 = 0;
              unsigned int v29 = 0;
              uint64_t v30 = 0;
              do
              {
                unint64_t v2 = v26 + 1;
                *((void *)a2 + 1) = v26 + 1;
                char v31 = *(unsigned char *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0) {
                  goto LABEL_135;
                }
                v28 += 7;
                unint64_t v26 = v2;
                BOOL v14 = v29++ > 8;
              }
              while (!v14);
              uint64_t v30 = 0;
LABEL_135:
              *((void *)this + 1) = v30;
              goto LABEL_151;
            case 4u:
              *((_WORD *)this + 26) |= 8u;
              unint64_t v32 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v33 = *(void *)a2;
              if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v36 = 0;
                if (v2 <= v32) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_140;
                  }
                  unint64_t v75 = v32++;
                  char v76 = *(unsigned char *)(v33 + v75);
                  *((void *)a2 + 1) = v32;
                  v36 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_139:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v36) = 0;
                }
                goto LABEL_139;
              }
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v36 = 0;
              do
              {
                unint64_t v2 = v32 + 1;
                *((void *)a2 + 1) = v32 + 1;
                char v37 = *(unsigned char *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0) {
                  goto LABEL_140;
                }
                v34 += 7;
                unint64_t v32 = v2;
                BOOL v14 = v35++ > 8;
              }
              while (!v14);
              LODWORD(v36) = 0;
LABEL_140:
              *((_DWORD *)this + 8) = v36;
              goto LABEL_151;
            case 5u:
              *((_WORD *)this + 26) |= 0x20u;
              unint64_t v38 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v39 = *(void *)a2;
              if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v42 = 0;
                if (v2 <= v38) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v38)
                  {
                    LODWORD(v42) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_145;
                  }
                  unint64_t v79 = v38++;
                  char v80 = *(unsigned char *)(v39 + v79);
                  *((void *)a2 + 1) = v38;
                  v42 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v42) = 0;
LABEL_144:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v42) = 0;
                }
                goto LABEL_144;
              }
              char v40 = 0;
              unsigned int v41 = 0;
              uint64_t v42 = 0;
              do
              {
                unint64_t v2 = v38 + 1;
                *((void *)a2 + 1) = v38 + 1;
                char v43 = *(unsigned char *)(v39 + v38);
                v42 |= (unint64_t)(v43 & 0x7F) << v40;
                if ((v43 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v40 += 7;
                unint64_t v38 = v2;
                BOOL v14 = v41++ > 8;
              }
              while (!v14);
              LODWORD(v42) = 0;
LABEL_145:
              *((_DWORD *)this + 10) = v42;
              goto LABEL_151;
            case 6u:
              *((_WORD *)this + 26) |= 0x10u;
              unint64_t v44 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v45 = *(void *)a2;
              if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v48 = 0;
                if (v2 <= v44) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v44)
                  {
                    LODWORD(v48) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_150;
                  }
                  unint64_t v83 = v44++;
                  char v84 = *(unsigned char *)(v45 + v83);
                  *((void *)a2 + 1) = v44;
                  v48 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  BOOL v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v48) = 0;
LABEL_149:
                    unint64_t v2 = v83 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v48) = 0;
                }
                goto LABEL_149;
              }
              char v46 = 0;
              unsigned int v47 = 0;
              uint64_t v48 = 0;
              do
              {
                unint64_t v2 = v44 + 1;
                *((void *)a2 + 1) = v44 + 1;
                char v49 = *(unsigned char *)(v45 + v44);
                v48 |= (unint64_t)(v49 & 0x7F) << v46;
                if ((v49 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v46 += 7;
                unint64_t v44 = v2;
                BOOL v14 = v47++ > 8;
              }
              while (!v14);
              LODWORD(v48) = 0;
LABEL_150:
              *((_DWORD *)this + 9) = v48;
LABEL_151:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 7u:
              *((_WORD *)this + 26) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v51 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v50 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v51 = v50 != 0;
              }
              *((unsigned char *)this + 50) = v51;
              goto LABEL_151;
            case 0xBu:
              *((_WORD *)this + 26) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v54 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v53 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v54 = v53 != 0;
              }
              *((unsigned char *)this + 44) = v54;
              goto LABEL_151;
            case 0xCu:
              *((_WORD *)this + 26) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v56 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v55 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v56 = v55 != 0;
              }
              *((unsigned char *)this + 45) = v56;
              goto LABEL_151;
            case 0xDu:
              *((_WORD *)this + 26) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v58 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v57 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v58 = v57 != 0;
              }
              *((unsigned char *)this + 46) = v58;
              goto LABEL_151;
            case 0x15u:
              *((_WORD *)this + 26) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v60 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v59 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v60 = v59 != 0;
              }
              *((unsigned char *)this + 47) = v60;
              goto LABEL_151;
            case 0x16u:
              *((_WORD *)this + 26) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v62 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v61 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v62 = v61 != 0;
              }
              *((unsigned char *)this + 48) = v62;
              goto LABEL_151;
            case 0x17u:
              *((_WORD *)this + 26) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v64 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v63 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v64 = v63 != 0;
              }
              *((unsigned char *)this + 49) = v64;
              goto LABEL_151;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_151;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionReferee::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 52);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 2u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 3u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 6u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 50), 7u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 44), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 45), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 46), 0xDu);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 48), 0x16u);
    if ((*(_WORD *)(v3 + 52) & 0x800) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 47), 0x15u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x800) == 0) {
    return this;
  }
LABEL_27:
  char v5 = *(unsigned char *)(v3 + 49);

  return PB::Writer::write(a2, v5, 0x17u);
}

BOOL CMMsl::FallDetectionReferee::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 52);
  __int16 v3 = *(_WORD *)(a2 + 52);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 50) != *(unsigned __int8 *)(a2 + 50)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 46) != *(unsigned __int8 *)(a2 + 46)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 47) != *(unsigned __int8 *)(a2 + 47)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x400) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 52) & 0x800) != 0) {
    return (*(_WORD *)(a2 + 52) & 0x800) != 0 && *(unsigned __int8 *)(a1 + 49) == *(unsigned __int8 *)(a2 + 49);
  }
  return v4;
}

uint64_t CMMsl::FallDetectionReferee::hash_value(CMMsl::FallDetectionReferee *this)
{
  __int16 v1 = *((_WORD *)this + 26);
  if ((v1 & 2) != 0)
  {
    double v2 = *((double *)this + 2);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 4) != 0)
    {
LABEL_3:
      uint64_t v3 = *((void *)this + 3);
      if (v1) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if (v1)
  {
LABEL_4:
    uint64_t v4 = *((void *)this + 1);
    if ((v1 & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v4 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *((int *)this + 8);
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v5 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_6:
    uint64_t v6 = *((int *)this + 10);
    if ((v1 & 0x10) != 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v6 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_7:
    uint64_t v7 = *((int *)this + 9);
    if ((*((_WORD *)this + 26) & 0x1000) != 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 26) & 0x1000) != 0)
  {
LABEL_8:
    uint64_t v8 = *((unsigned __int8 *)this + 50);
    if ((v1 & 0x40) != 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v8 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_9:
    uint64_t v9 = *((unsigned __int8 *)this + 44);
    if ((v1 & 0x80) != 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v9 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_10:
    uint64_t v10 = *((unsigned __int8 *)this + 45);
    if ((*((_WORD *)this + 26) & 0x100) != 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = 0;
  if ((*((_WORD *)this + 26) & 0x100) != 0)
  {
LABEL_11:
    uint64_t v11 = *((unsigned __int8 *)this + 46);
    if ((*((_WORD *)this + 26) & 0x200) != 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v11 = 0;
  if ((*((_WORD *)this + 26) & 0x200) != 0)
  {
LABEL_12:
    uint64_t v12 = *((unsigned __int8 *)this + 47);
    if ((*((_WORD *)this + 26) & 0x400) != 0) {
      goto LABEL_13;
    }
LABEL_28:
    uint64_t v13 = 0;
    if ((*((_WORD *)this + 26) & 0x800) != 0) {
      goto LABEL_14;
    }
LABEL_29:
    uint64_t v14 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14;
  }
LABEL_27:
  uint64_t v12 = 0;
  if ((*((_WORD *)this + 26) & 0x400) == 0) {
    goto LABEL_28;
  }
LABEL_13:
  uint64_t v13 = *((unsigned __int8 *)this + 48);
  if ((*((_WORD *)this + 26) & 0x800) == 0) {
    goto LABEL_29;
  }
LABEL_14:
  uint64_t v14 = *((unsigned __int8 *)this + 49);
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14;
}

void *CMMsl::FallDetectionReplay::FallDetectionReplay(void *this)
{
  *this = off_1003A5948;
  *(void *)((char *)this + 364) = 0;
  return this;
}

{
  *this = off_1003A5948;
  *(void *)((char *)this + 364) = 0;
  return this;
}

void CMMsl::FallDetectionReplay::~FallDetectionReplay(CMMsl::FallDetectionReplay *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::FallDetectionReplay::FallDetectionReplay(CMMsl::FallDetectionReplay *this, const CMMsl::FallDetectionReplay *a2)
{
  *(void *)this = off_1003A5948;
  double v2 = (uint64_t *)((char *)this + 364);
  *(void *)((char *)this + 364) = 0;
  uint64_t v3 = (uint64_t *)((char *)a2 + 364);
  uint64_t v4 = *(void *)((char *)a2 + 364);
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v6 = *((void *)a2 + 31);
    uint64_t v5 = 0x40000000;
    *double v2 = 0x40000000;
    *((void *)this + 31) = v6;
    uint64_t v4 = *v3;
    if ((*v3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  if ((v4 & 0x80000000) != 0)
  {
LABEL_5:
    uint64_t v7 = *((void *)a2 + 32);
    v5 |= 0x80000000uLL;
    *double v2 = v5;
    *((void *)this + 32) = v7;
    uint64_t v4 = *v3;
  }
LABEL_6:
  if ((v4 & 0x80000) != 0)
  {
    uint64_t v8 = *((void *)a2 + 20);
    v5 |= 0x80000uLL;
    *double v2 = v5;
    *((void *)this + 20) = v8;
    uint64_t v4 = *v3;
    if ((*v3 & 0x100000) == 0)
    {
LABEL_8:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_52;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v9 = *((void *)a2 + 21);
  v5 |= 0x100000uLL;
  *double v2 = v5;
  *((void *)this + 21) = v9;
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v10 = *((void *)a2 + 22);
  v5 |= 0x200000uLL;
  *double v2 = v5;
  *((void *)this + 22) = v10;
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v11 = *((void *)a2 + 40);
  v5 |= 0x8000000000uLL;
  *double v2 = v5;
  *((void *)this + 40) = v11;
  uint64_t v4 = *v3;
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v12 = *((void *)a2 + 43);
  v5 |= 0x40000000000uLL;
  *double v2 = v5;
  *((void *)this + 43) = v12;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v13 = *((void *)a2 + 41);
  v5 |= 0x10000000000uLL;
  *double v2 = v5;
  *((void *)this + 41) = v13;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v14 = *((void *)a2 + 42);
  v5 |= 0x20000000000uLL;
  *double v2 = v5;
  *((void *)this + 42) = v14;
  uint64_t v4 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v15 = *((void *)a2 + 44);
  v5 |= 0x80000000000uLL;
  *double v2 = v5;
  *((void *)this + 44) = v15;
  uint64_t v4 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v16 = *((_DWORD *)a2 + 90);
  v5 |= 0x100000000000uLL;
  *double v2 = v5;
  *((_DWORD *)this + 90) = v16;
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v17 = *((void *)a2 + 25);
  v5 |= 0x1000000uLL;
  *double v2 = v5;
  *((void *)this + 25) = v17;
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t v18 = *((void *)a2 + 28);
  v5 |= 0x8000000uLL;
  *double v2 = v5;
  *((void *)this + 28) = v18;
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v19 = *((void *)a2 + 26);
  v5 |= 0x2000000uLL;
  *double v2 = v5;
  *((void *)this + 26) = v19;
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v20 = *((void *)a2 + 27);
  v5 |= 0x4000000uLL;
  *double v2 = v5;
  *((void *)this + 27) = v20;
  uint64_t v4 = *v3;
  if ((*v3 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t v21 = *((void *)a2 + 23);
  v5 |= 0x400000uLL;
  *double v2 = v5;
  *((void *)this + 23) = v21;
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v22 = *((void *)a2 + 24);
  v5 |= 0x800000uLL;
  *double v2 = v5;
  *((void *)this + 24) = v22;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v23 = *((void *)a2 + 6);
  v5 |= 0x20uLL;
  *double v2 = v5;
  *((void *)this + 6) = v23;
  uint64_t v4 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v24 = *((void *)a2 + 4);
  v5 |= 8uLL;
  *double v2 = v5;
  *((void *)this + 4) = v24;
  uint64_t v4 = *v3;
  if ((*v3 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v25 = *((void *)a2 + 1);
  v5 |= 1uLL;
  *double v2 = v5;
  *((void *)this + 1) = v25;
  uint64_t v4 = *v3;
  if ((*v3 & 0x40) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v26 = *((void *)a2 + 7);
  v5 |= 0x40uLL;
  *double v2 = v5;
  *((void *)this + 7) = v26;
  uint64_t v4 = *v3;
  if ((*v3 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v27 = *((void *)a2 + 9);
  v5 |= 0x100uLL;
  *double v2 = v5;
  *((void *)this + 9) = v27;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x200) == 0) {
      goto LABEL_28;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t v28 = *((void *)a2 + 5);
  v5 |= 0x10uLL;
  *double v2 = v5;
  *((void *)this + 5) = v28;
  uint64_t v4 = *v3;
  if ((*v3 & 0x200) == 0)
  {
LABEL_28:
    if ((v4 & 0x400) == 0) {
      goto LABEL_29;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v29 = *((void *)a2 + 10);
  v5 |= 0x200uLL;
  *double v2 = v5;
  *((void *)this + 10) = v29;
  uint64_t v4 = *v3;
  if ((*v3 & 0x400) == 0)
  {
LABEL_29:
    if ((v4 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v30 = *((void *)a2 + 11);
  v5 |= 0x400uLL;
  *double v2 = v5;
  *((void *)this + 11) = v30;
  uint64_t v4 = *v3;
  if ((*v3 & 0x800) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v31 = *((void *)a2 + 12);
  v5 |= 0x800uLL;
  *double v2 = v5;
  *((void *)this + 12) = v31;
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 2) == 0) {
      goto LABEL_32;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t v32 = *((void *)a2 + 15);
  v5 |= 0x4000uLL;
  *double v2 = v5;
  *((void *)this + 15) = v32;
  uint64_t v4 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t v33 = *((void *)a2 + 2);
  v5 |= 2uLL;
  *double v2 = v5;
  *((void *)this + 2) = v33;
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v34 = *((void *)a2 + 16);
  v5 |= 0x8000uLL;
  *double v2 = v5;
  *((void *)this + 16) = v34;
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t v35 = *((void *)a2 + 36);
  v5 |= 0x800000000uLL;
  *double v2 = v5;
  *((void *)this + 36) = v35;
  uint64_t v4 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t v36 = *((void *)a2 + 35);
  v5 |= 0x400000000uLL;
  *double v2 = v5;
  *((void *)this + 35) = v36;
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t v37 = *((void *)a2 + 34);
  v5 |= 0x200000000uLL;
  *double v2 = v5;
  *((void *)this + 34) = v37;
  uint64_t v4 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v38 = *((void *)a2 + 33);
  v5 |= (unint64_t)&_mh_execute_header;
  *double v2 = v5;
  *((void *)this + 33) = v38;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v39 = *((void *)a2 + 30);
  v5 |= 0x20000000uLL;
  *double v2 = v5;
  *((void *)this + 30) = v39;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v40 = *((void *)a2 + 29);
  v5 |= 0x10000000uLL;
  *double v2 = v5;
  *((void *)this + 29) = v40;
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v41 = *((void *)a2 + 14);
  v5 |= 0x2000uLL;
  *double v2 = v5;
  *((void *)this + 14) = v41;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000) == 0)
  {
LABEL_41:
    if ((v4 & 4) == 0) {
      goto LABEL_42;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t v42 = *((void *)a2 + 17);
  v5 |= 0x10000uLL;
  *double v2 = v5;
  *((void *)this + 17) = v42;
  uint64_t v4 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_42:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t v43 = *((void *)a2 + 3);
  v5 |= 4uLL;
  *double v2 = v5;
  *((void *)this + 3) = v43;
  uint64_t v4 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v44 = *((void *)a2 + 19);
  v5 |= 0x40000uLL;
  *double v2 = v5;
  *((void *)this + 19) = v44;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80) == 0) {
      goto LABEL_45;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t v45 = *((void *)a2 + 18);
  v5 |= 0x20000uLL;
  *double v2 = v5;
  *((void *)this + 18) = v45;
  uint64_t v4 = *v3;
  if ((*v3 & 0x80) == 0)
  {
LABEL_45:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t v46 = *((void *)a2 + 8);
  v5 |= 0x80uLL;
  *double v2 = v5;
  *((void *)this + 8) = v46;
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000) == 0)
  {
LABEL_46:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v47 = *((void *)a2 + 13);
  v5 |= 0x1000uLL;
  *double v2 = v5;
  *((void *)this + 13) = v47;
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v48 = *((void *)a2 + 39);
  v5 |= 0x4000000000uLL;
  *double v2 = v5;
  *((void *)this + 39) = v48;
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x2000000000) == 0) {
      return result;
    }
LABEL_92:
    double result = *((double *)a2 + 38);
    *double v2 = v5 | 0x2000000000;
    *((double *)this + 38) = result;
    return result;
  }
LABEL_91:
  uint64_t v49 = *((void *)a2 + 37);
  v5 |= 0x1000000000uLL;
  *double v2 = v5;
  *((void *)this + 37) = v49;
  if ((*v3 & 0x2000000000) != 0) {
    goto LABEL_92;
  }
  return result;
}

CMMsl *CMMsl::FallDetectionReplay::operator=(CMMsl *a1, const CMMsl::FallDetectionReplay *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallDetectionReplay::FallDetectionReplay((CMMsl::FallDetectionReplay *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReplay *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionReplay *a2, CMMsl::FallDetectionReplay *a3)
{
  uint64_t v3 = *(void *)((char *)this + 364);
  *(void *)((char *)this + 364) = *(void *)((char *)a2 + 364);
  *(void *)((char *)a2 + 364) = v3;
  uint64_t v4 = *((void *)this + 31);
  *((void *)this + 31) = *((void *)a2 + 31);
  *((void *)a2 + 31) = v4;
  uint64_t v5 = *((void *)this + 32);
  *((void *)this + 32) = *((void *)a2 + 32);
  *((void *)a2 + 32) = v5;
  uint64_t v6 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v6;
  uint64_t v7 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v7;
  uint64_t v8 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v8;
  uint64_t v9 = *((void *)this + 40);
  *((void *)this + 40) = *((void *)a2 + 40);
  *((void *)a2 + 40) = v9;
  uint64_t v10 = *((void *)this + 43);
  *((void *)this + 43) = *((void *)a2 + 43);
  *((void *)a2 + 43) = v10;
  uint64_t v11 = *((void *)this + 41);
  *((void *)this + 41) = *((void *)a2 + 41);
  *((void *)a2 + 41) = v11;
  uint64_t v12 = *((void *)this + 42);
  *((void *)this + 42) = *((void *)a2 + 42);
  *((void *)a2 + 42) = v12;
  uint64_t v13 = *((void *)this + 44);
  *((void *)this + 44) = *((void *)a2 + 44);
  *((void *)a2 + 44) = v13;
  LODWORD(v13) = *((_DWORD *)this + 90);
  *((_DWORD *)this + 90) = *((_DWORD *)a2 + 90);
  *((_DWORD *)a2 + 90) = v13;
  uint64_t v14 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v14;
  uint64_t v15 = *((void *)this + 28);
  *((void *)this + 28) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v15;
  uint64_t v16 = *((void *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((void *)a2 + 26) = v16;
  uint64_t v17 = *((void *)this + 27);
  *((void *)this + 27) = *((void *)a2 + 27);
  *((void *)a2 + 27) = v17;
  uint64_t v18 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v18;
  uint64_t v19 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v19;
  uint64_t v20 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v20;
  uint64_t v21 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v21;
  uint64_t v22 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v22;
  uint64_t v23 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v23;
  uint64_t v24 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v24;
  uint64_t v25 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v25;
  uint64_t v26 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v26;
  uint64_t v27 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v27;
  uint64_t v28 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v28;
  uint64_t v29 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v29;
  uint64_t v30 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v30;
  uint64_t v31 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v31;
  uint64_t v32 = *((void *)this + 36);
  *((void *)this + 36) = *((void *)a2 + 36);
  *((void *)a2 + 36) = v32;
  uint64_t v33 = *((void *)this + 35);
  *((void *)this + 35) = *((void *)a2 + 35);
  *((void *)a2 + 35) = v33;
  uint64_t v34 = *((void *)this + 34);
  *((void *)this + 34) = *((void *)a2 + 34);
  *((void *)a2 + 34) = v34;
  uint64_t v35 = *((void *)this + 33);
  *((void *)this + 33) = *((void *)a2 + 33);
  *((void *)a2 + 33) = v35;
  uint64_t v36 = *((void *)this + 30);
  *((void *)this + 30) = *((void *)a2 + 30);
  *((void *)a2 + 30) = v36;
  uint64_t v37 = *((void *)this + 29);
  *((void *)this + 29) = *((void *)a2 + 29);
  *((void *)a2 + 29) = v37;
  uint64_t v38 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v38;
  uint64_t v39 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v39;
  uint64_t v40 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v40;
  uint64_t v41 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v41;
  uint64_t v42 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v42;
  uint64_t v43 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v43;
  uint64_t v44 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v44;
  uint64_t v45 = *((void *)this + 39);
  *((void *)this + 39) = *((void *)a2 + 39);
  *((void *)a2 + 39) = v45;
  uint64_t v46 = *((void *)this + 37);
  *((void *)this + 37) = *((void *)a2 + 37);
  *((void *)a2 + 37) = v46;
  double result = *((double *)this + 38);
  *((void *)this + 38) = *((void *)a2 + 38);
  *((double *)a2 + 38) = result;
  return result;
}

double CMMsl::FallDetectionReplay::FallDetectionReplay(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5948;
  *(void *)(a1 + 364) = *(void *)(a2 + 364);
  *(void *)(a2 + 364) = 0;
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  double result = *(double *)(a2 + 304);
  *(double *)(a1 + 304) = result;
  return result;
}

CMMsl *CMMsl::FallDetectionReplay::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionReplay::FallDetectionReplay((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReplay *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionReplay::formatText(CMMsl::FallDetectionReplay *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)((char *)this + 364);
  uint64_t v6 = *(void *)((char *)this + 364);
  if (v6)
  {
    PB::TextFormatter::format(a2, "alertCanceledBecauseOfAbsenceOfQuiessence", *((void *)this + 1));
    uint64_t v6 = *v5;
    if ((*v5 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_52;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfActive", *((void *)this + 2));
  uint64_t v6 = *v5;
  if ((*v5 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfChargerState", *((void *)this + 3));
  uint64_t v6 = *v5;
  if ((*v5 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfCyclingPostImpact", *((void *)this + 4));
  uint64_t v6 = *v5;
  if ((*v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfDecimatedLowFrequencyFFT", *((void *)this + 5));
  uint64_t v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfDistanceTraveledPostImpact", *((void *)this + 6));
  uint64_t v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfHighFrequencyFFT", *((void *)this + 7));
  uint64_t v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfLockedNoMotionPre", *((void *)this + 8));
  uint64_t v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfLowFrequencyFFT", *((void *)this + 9));
  uint64_t v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfNumberOfPeaksFFT", *((void *)this + 10));
  uint64_t v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfOffBody", *((void *)this + 11));
  uint64_t v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfRepetitiveMotion", *((void *)this + 12));
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfRetraction", *((void *)this + 13));
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfSimilarPeaks", *((void *)this + 14));
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfStand", *((void *)this + 15));
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfSteps", *((void *)this + 16));
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfWristState", *((void *)this + 17));
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfWristStatePost", *((void *)this + 18));
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfWristStatePre", *((void *)this + 19));
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "fallStatsDispatchResetOnAccelSensorTime", *((void *)this + 20));
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "fallStatsDispatchRestoredOnAccelSensorTime", *((void *)this + 21));
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "hkWorkoutId", *((void *)this + 22));
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "impactCanceledBecauseOfExistingAlert", *((void *)this + 23));
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfCyclingImpactThresholds", *((void *)this + 24));
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfMaxAccelNormThreshold", *((void *)this + 25));
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfMultiPeaks", *((void *)this + 26));
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfNaiveBayesClassifier", *((void *)this + 27));
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfOtherHardThresholds", *((void *)this + 28));
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "leavingImpactBecauseOfNewImpactNewImpact", *((void *)this + 29));
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x100000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "leavingImpactBecauseOfNewImpactOldImpact", *((void *)this + 30));
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "operatingMode", *((_DWORD *)this + 90));
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "skippedFallStatsSensorTime", *((void *)this + 31));
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "skippedGyroSensorTime", *((void *)this + 32));
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfAbsenceOfLongLie", *((void *)this + 33));
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x400000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfActive", *((void *)this + 34));
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x800000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfStand", *((void *)this + 35));
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfSteps", *((void *)this + 36));
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "sosConsideredFallTimestamp", *((void *)this + 37));
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x4000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "sosConsideredIOSTime", *((double *)this + 38));
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x8000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "sosConsideredSensorTime", *((void *)this + 39));
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x10000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "workoutId", *((void *)this + 40));
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x20000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "workoutTransitionPause", *((void *)this + 41));
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x40000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "workoutTransitionResume", *((void *)this + 42));
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x80000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "workoutTransitionStart", *((void *)this + 43));
  if ((*v5 & 0x80000000000) != 0) {
LABEL_46:
  }
    PB::TextFormatter::format(a2, "workoutTransitionStop", *((void *)this + 44));
LABEL_47:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionReplay::readFrom(CMMsl::FallDetectionReplay *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void *)((char *)this + 364);
    while (1)
    {
      uint64_t v9 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v14 = *(unsigned char *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v12 >> 3))
      {
        case 1u:
          *v8 |= 0x40000000uLL;
          unint64_t v21 = *((void *)a2 + 1);
          unint64_t v22 = *((void *)a2 + 2);
          uint64_t v23 = *(void *)a2;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
          {
            char v375 = 0;
            unsigned int v376 = 0;
            uint64_t v26 = 0;
            if (v22 <= v21) {
              unint64_t v22 = *((void *)a2 + 1);
            }
            do
            {
              if (v22 == v21)
              {
                uint64_t v26 = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_648;
              }
              unint64_t v377 = v21 + 1;
              char v378 = *(unsigned char *)(v23 + v21);
              *((void *)a2 + 1) = v377;
              v26 |= (unint64_t)(v378 & 0x7F) << v375;
              if ((v378 & 0x80) == 0)
              {
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v26 = 0;
                }
                goto LABEL_648;
              }
              v375 += 7;
              unint64_t v21 = v377;
              BOOL v15 = v376++ > 8;
            }
            while (!v15);
LABEL_342:
            uint64_t v26 = 0;
          }
          else
          {
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            while (1)
            {
              unint64_t v27 = v21 + 1;
              *((void *)a2 + 1) = v21 + 1;
              char v28 = *(unsigned char *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0) {
                break;
              }
              v24 += 7;
              unint64_t v21 = v27;
              BOOL v15 = v25++ > 8;
              if (v15) {
                goto LABEL_342;
              }
            }
          }
LABEL_648:
          *((void *)this + 31) = v26;
          goto LABEL_821;
        case 2u:
          *v8 |= 0x80000000uLL;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_652;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v15 = v33++ > 8;
            }
            while (!v15);
LABEL_349:
            uint64_t v34 = 0;
            goto LABEL_652;
          }
          char v379 = 0;
          unsigned int v380 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              uint64_t v34 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v381 = v29 + 1;
              char v382 = *(unsigned char *)(v31 + v29);
              *((void *)a2 + 1) = v381;
              v34 |= (unint64_t)(v382 & 0x7F) << v379;
              if (v382 < 0)
              {
                v379 += 7;
                unint64_t v29 = v381;
                BOOL v15 = v380++ > 8;
                if (v15) {
                  goto LABEL_349;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v34 = 0;
              }
            }
            break;
          }
LABEL_652:
          *((void *)this + 32) = v34;
          goto LABEL_821;
        case 0x15u:
          *v8 |= 0x80000uLL;
          unint64_t v38 = *((void *)a2 + 1);
          unint64_t v39 = *((void *)a2 + 2);
          uint64_t v40 = *(void *)a2;
          if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
          {
            char v41 = 0;
            unsigned int v42 = 0;
            uint64_t v43 = 0;
            do
            {
              unint64_t v44 = v38 + 1;
              *((void *)a2 + 1) = v38 + 1;
              char v45 = *(unsigned char *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0) {
                goto LABEL_656;
              }
              v41 += 7;
              unint64_t v38 = v44;
              BOOL v15 = v42++ > 8;
            }
            while (!v15);
LABEL_356:
            uint64_t v43 = 0;
            goto LABEL_656;
          }
          char v383 = 0;
          unsigned int v384 = 0;
          uint64_t v43 = 0;
          if (v39 <= v38) {
            unint64_t v39 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v39 == v38)
            {
              uint64_t v43 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v385 = v38 + 1;
              char v386 = *(unsigned char *)(v40 + v38);
              *((void *)a2 + 1) = v385;
              v43 |= (unint64_t)(v386 & 0x7F) << v383;
              if (v386 < 0)
              {
                v383 += 7;
                unint64_t v38 = v385;
                BOOL v15 = v384++ > 8;
                if (v15) {
                  goto LABEL_356;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v43 = 0;
              }
            }
            break;
          }
LABEL_656:
          *((void *)this + 20) = v43;
          goto LABEL_821;
        case 0x16u:
          *v8 |= 0x100000uLL;
          unint64_t v46 = *((void *)a2 + 1);
          unint64_t v47 = *((void *)a2 + 2);
          uint64_t v48 = *(void *)a2;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            char v49 = 0;
            unsigned int v50 = 0;
            uint64_t v51 = 0;
            do
            {
              unint64_t v52 = v46 + 1;
              *((void *)a2 + 1) = v46 + 1;
              char v53 = *(unsigned char *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0) {
                goto LABEL_660;
              }
              v49 += 7;
              unint64_t v46 = v52;
              BOOL v15 = v50++ > 8;
            }
            while (!v15);
LABEL_363:
            uint64_t v51 = 0;
            goto LABEL_660;
          }
          char v387 = 0;
          unsigned int v388 = 0;
          uint64_t v51 = 0;
          if (v47 <= v46) {
            unint64_t v47 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v47 == v46)
            {
              uint64_t v51 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v389 = v46 + 1;
              char v390 = *(unsigned char *)(v48 + v46);
              *((void *)a2 + 1) = v389;
              v51 |= (unint64_t)(v390 & 0x7F) << v387;
              if (v390 < 0)
              {
                v387 += 7;
                unint64_t v46 = v389;
                BOOL v15 = v388++ > 8;
                if (v15) {
                  goto LABEL_363;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v51 = 0;
              }
            }
            break;
          }
LABEL_660:
          *((void *)this + 21) = v51;
          goto LABEL_821;
        case 0x2Cu:
          *v8 |= 0x200000uLL;
          unint64_t v54 = *((void *)a2 + 1);
          unint64_t v55 = *((void *)a2 + 2);
          uint64_t v56 = *(void *)a2;
          if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
          {
            char v57 = 0;
            unsigned int v58 = 0;
            uint64_t v59 = 0;
            do
            {
              unint64_t v60 = v54 + 1;
              *((void *)a2 + 1) = v54 + 1;
              char v61 = *(unsigned char *)(v56 + v54);
              v59 |= (unint64_t)(v61 & 0x7F) << v57;
              if ((v61 & 0x80) == 0) {
                goto LABEL_664;
              }
              v57 += 7;
              unint64_t v54 = v60;
              BOOL v15 = v58++ > 8;
            }
            while (!v15);
LABEL_370:
            uint64_t v59 = 0;
            goto LABEL_664;
          }
          char v391 = 0;
          unsigned int v392 = 0;
          uint64_t v59 = 0;
          if (v55 <= v54) {
            unint64_t v55 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v55 == v54)
            {
              uint64_t v59 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v393 = v54 + 1;
              char v394 = *(unsigned char *)(v56 + v54);
              *((void *)a2 + 1) = v393;
              v59 |= (unint64_t)(v394 & 0x7F) << v391;
              if (v394 < 0)
              {
                v391 += 7;
                unint64_t v54 = v393;
                BOOL v15 = v392++ > 8;
                if (v15) {
                  goto LABEL_370;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v59 = 0;
              }
            }
            break;
          }
LABEL_664:
          *((void *)this + 22) = v59;
          goto LABEL_821;
        case 0x2Du:
          *v8 |= 0x8000000000uLL;
          unint64_t v62 = *((void *)a2 + 1);
          unint64_t v63 = *((void *)a2 + 2);
          uint64_t v64 = *(void *)a2;
          if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
          {
            char v65 = 0;
            unsigned int v66 = 0;
            uint64_t v67 = 0;
            do
            {
              unint64_t v68 = v62 + 1;
              *((void *)a2 + 1) = v62 + 1;
              char v69 = *(unsigned char *)(v64 + v62);
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0) {
                goto LABEL_668;
              }
              v65 += 7;
              unint64_t v62 = v68;
              BOOL v15 = v66++ > 8;
            }
            while (!v15);
LABEL_377:
            uint64_t v67 = 0;
            goto LABEL_668;
          }
          char v395 = 0;
          unsigned int v396 = 0;
          uint64_t v67 = 0;
          if (v63 <= v62) {
            unint64_t v63 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v63 == v62)
            {
              uint64_t v67 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v397 = v62 + 1;
              char v398 = *(unsigned char *)(v64 + v62);
              *((void *)a2 + 1) = v397;
              v67 |= (unint64_t)(v398 & 0x7F) << v395;
              if (v398 < 0)
              {
                v395 += 7;
                unint64_t v62 = v397;
                BOOL v15 = v396++ > 8;
                if (v15) {
                  goto LABEL_377;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v67 = 0;
              }
            }
            break;
          }
LABEL_668:
          *((void *)this + 40) = v67;
          goto LABEL_821;
        case 0x2Eu:
          *v8 |= 0x40000000000uLL;
          unint64_t v70 = *((void *)a2 + 1);
          unint64_t v71 = *((void *)a2 + 2);
          uint64_t v72 = *(void *)a2;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            char v73 = 0;
            unsigned int v74 = 0;
            uint64_t v75 = 0;
            do
            {
              unint64_t v76 = v70 + 1;
              *((void *)a2 + 1) = v70 + 1;
              char v77 = *(unsigned char *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0) {
                goto LABEL_672;
              }
              v73 += 7;
              unint64_t v70 = v76;
              BOOL v15 = v74++ > 8;
            }
            while (!v15);
LABEL_384:
            uint64_t v75 = 0;
            goto LABEL_672;
          }
          char v399 = 0;
          unsigned int v400 = 0;
          uint64_t v75 = 0;
          if (v71 <= v70) {
            unint64_t v71 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v71 == v70)
            {
              uint64_t v75 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v401 = v70 + 1;
              char v402 = *(unsigned char *)(v72 + v70);
              *((void *)a2 + 1) = v401;
              v75 |= (unint64_t)(v402 & 0x7F) << v399;
              if (v402 < 0)
              {
                v399 += 7;
                unint64_t v70 = v401;
                BOOL v15 = v400++ > 8;
                if (v15) {
                  goto LABEL_384;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v75 = 0;
              }
            }
            break;
          }
LABEL_672:
          *((void *)this + 43) = v75;
          goto LABEL_821;
        case 0x2Fu:
          *v8 |= 0x10000000000uLL;
          unint64_t v78 = *((void *)a2 + 1);
          unint64_t v79 = *((void *)a2 + 2);
          uint64_t v80 = *(void *)a2;
          if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
          {
            char v81 = 0;
            unsigned int v82 = 0;
            uint64_t v83 = 0;
            do
            {
              unint64_t v84 = v78 + 1;
              *((void *)a2 + 1) = v78 + 1;
              char v85 = *(unsigned char *)(v80 + v78);
              v83 |= (unint64_t)(v85 & 0x7F) << v81;
              if ((v85 & 0x80) == 0) {
                goto LABEL_676;
              }
              v81 += 7;
              unint64_t v78 = v84;
              BOOL v15 = v82++ > 8;
            }
            while (!v15);
LABEL_391:
            uint64_t v83 = 0;
            goto LABEL_676;
          }
          char v403 = 0;
          unsigned int v404 = 0;
          uint64_t v83 = 0;
          if (v79 <= v78) {
            unint64_t v79 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v79 == v78)
            {
              uint64_t v83 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v405 = v78 + 1;
              char v406 = *(unsigned char *)(v80 + v78);
              *((void *)a2 + 1) = v405;
              v83 |= (unint64_t)(v406 & 0x7F) << v403;
              if (v406 < 0)
              {
                v403 += 7;
                unint64_t v78 = v405;
                BOOL v15 = v404++ > 8;
                if (v15) {
                  goto LABEL_391;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v83 = 0;
              }
            }
            break;
          }
LABEL_676:
          *((void *)this + 41) = v83;
          goto LABEL_821;
        case 0x30u:
          *v8 |= 0x20000000000uLL;
          unint64_t v86 = *((void *)a2 + 1);
          unint64_t v87 = *((void *)a2 + 2);
          uint64_t v88 = *(void *)a2;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            char v89 = 0;
            unsigned int v90 = 0;
            uint64_t v91 = 0;
            do
            {
              unint64_t v92 = v86 + 1;
              *((void *)a2 + 1) = v86 + 1;
              char v93 = *(unsigned char *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0) {
                goto LABEL_680;
              }
              v89 += 7;
              unint64_t v86 = v92;
              BOOL v15 = v90++ > 8;
            }
            while (!v15);
LABEL_398:
            uint64_t v91 = 0;
            goto LABEL_680;
          }
          char v407 = 0;
          unsigned int v408 = 0;
          uint64_t v91 = 0;
          if (v87 <= v86) {
            unint64_t v87 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v87 == v86)
            {
              uint64_t v91 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v409 = v86 + 1;
              char v410 = *(unsigned char *)(v88 + v86);
              *((void *)a2 + 1) = v409;
              v91 |= (unint64_t)(v410 & 0x7F) << v407;
              if (v410 < 0)
              {
                v407 += 7;
                unint64_t v86 = v409;
                BOOL v15 = v408++ > 8;
                if (v15) {
                  goto LABEL_398;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v91 = 0;
              }
            }
            break;
          }
LABEL_680:
          *((void *)this + 42) = v91;
          goto LABEL_821;
        case 0x31u:
          *v8 |= 0x80000000000uLL;
          unint64_t v94 = *((void *)a2 + 1);
          unint64_t v95 = *((void *)a2 + 2);
          uint64_t v96 = *(void *)a2;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            char v97 = 0;
            unsigned int v98 = 0;
            uint64_t v99 = 0;
            do
            {
              unint64_t v100 = v94 + 1;
              *((void *)a2 + 1) = v94 + 1;
              char v101 = *(unsigned char *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0) {
                goto LABEL_684;
              }
              v97 += 7;
              unint64_t v94 = v100;
              BOOL v15 = v98++ > 8;
            }
            while (!v15);
LABEL_405:
            uint64_t v99 = 0;
            goto LABEL_684;
          }
          char v411 = 0;
          unsigned int v412 = 0;
          uint64_t v99 = 0;
          if (v95 <= v94) {
            unint64_t v95 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v95 == v94)
            {
              uint64_t v99 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v413 = v94 + 1;
              char v414 = *(unsigned char *)(v96 + v94);
              *((void *)a2 + 1) = v413;
              v99 |= (unint64_t)(v414 & 0x7F) << v411;
              if (v414 < 0)
              {
                v411 += 7;
                unint64_t v94 = v413;
                BOOL v15 = v412++ > 8;
                if (v15) {
                  goto LABEL_405;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v99 = 0;
              }
            }
            break;
          }
LABEL_684:
          *((void *)this + 44) = v99;
          goto LABEL_821;
        case 0x32u:
          *v8 |= 0x100000000000uLL;
          unint64_t v102 = *((void *)a2 + 1);
          unint64_t v103 = *((void *)a2 + 2);
          uint64_t v104 = *(void *)a2;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            char v105 = 0;
            unsigned int v106 = 0;
            uint64_t v107 = 0;
            do
            {
              unint64_t v108 = v102 + 1;
              *((void *)a2 + 1) = v102 + 1;
              char v109 = *(unsigned char *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0) {
                goto LABEL_688;
              }
              v105 += 7;
              unint64_t v102 = v108;
              BOOL v15 = v106++ > 8;
            }
            while (!v15);
LABEL_412:
            LODWORD(v107) = 0;
            goto LABEL_688;
          }
          char v415 = 0;
          unsigned int v416 = 0;
          uint64_t v107 = 0;
          if (v103 <= v102) {
            unint64_t v103 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v103 == v102)
            {
              LODWORD(v107) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v417 = v102 + 1;
              char v418 = *(unsigned char *)(v104 + v102);
              *((void *)a2 + 1) = v417;
              v107 |= (unint64_t)(v418 & 0x7F) << v415;
              if (v418 < 0)
              {
                v415 += 7;
                unint64_t v102 = v417;
                BOOL v15 = v416++ > 8;
                if (v15) {
                  goto LABEL_412;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v107) = 0;
              }
            }
            break;
          }
LABEL_688:
          *((_DWORD *)this + 90) = v107;
          goto LABEL_821;
        case 0x33u:
          *v8 |= 0x1000000uLL;
          unint64_t v110 = *((void *)a2 + 1);
          unint64_t v111 = *((void *)a2 + 2);
          uint64_t v112 = *(void *)a2;
          if (v110 <= 0xFFFFFFFFFFFFFFF5 && v110 + 10 <= v111)
          {
            char v113 = 0;
            unsigned int v114 = 0;
            uint64_t v115 = 0;
            do
            {
              unint64_t v116 = v110 + 1;
              *((void *)a2 + 1) = v110 + 1;
              char v117 = *(unsigned char *)(v112 + v110);
              v115 |= (unint64_t)(v117 & 0x7F) << v113;
              if ((v117 & 0x80) == 0) {
                goto LABEL_692;
              }
              v113 += 7;
              unint64_t v110 = v116;
              BOOL v15 = v114++ > 8;
            }
            while (!v15);
LABEL_419:
            uint64_t v115 = 0;
            goto LABEL_692;
          }
          char v419 = 0;
          unsigned int v420 = 0;
          uint64_t v115 = 0;
          if (v111 <= v110) {
            unint64_t v111 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v111 == v110)
            {
              uint64_t v115 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v421 = v110 + 1;
              char v422 = *(unsigned char *)(v112 + v110);
              *((void *)a2 + 1) = v421;
              v115 |= (unint64_t)(v422 & 0x7F) << v419;
              if (v422 < 0)
              {
                v419 += 7;
                unint64_t v110 = v421;
                BOOL v15 = v420++ > 8;
                if (v15) {
                  goto LABEL_419;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v115 = 0;
              }
            }
            break;
          }
LABEL_692:
          *((void *)this + 25) = v115;
          goto LABEL_821;
        case 0x34u:
          *v8 |= 0x8000000uLL;
          unint64_t v118 = *((void *)a2 + 1);
          unint64_t v119 = *((void *)a2 + 2);
          uint64_t v120 = *(void *)a2;
          if (v118 <= 0xFFFFFFFFFFFFFFF5 && v118 + 10 <= v119)
          {
            char v121 = 0;
            unsigned int v122 = 0;
            uint64_t v123 = 0;
            do
            {
              unint64_t v124 = v118 + 1;
              *((void *)a2 + 1) = v118 + 1;
              char v125 = *(unsigned char *)(v120 + v118);
              v123 |= (unint64_t)(v125 & 0x7F) << v121;
              if ((v125 & 0x80) == 0) {
                goto LABEL_696;
              }
              v121 += 7;
              unint64_t v118 = v124;
              BOOL v15 = v122++ > 8;
            }
            while (!v15);
LABEL_426:
            uint64_t v123 = 0;
            goto LABEL_696;
          }
          char v423 = 0;
          unsigned int v424 = 0;
          uint64_t v123 = 0;
          if (v119 <= v118) {
            unint64_t v119 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v119 == v118)
            {
              uint64_t v123 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v425 = v118 + 1;
              char v426 = *(unsigned char *)(v120 + v118);
              *((void *)a2 + 1) = v425;
              v123 |= (unint64_t)(v426 & 0x7F) << v423;
              if (v426 < 0)
              {
                v423 += 7;
                unint64_t v118 = v425;
                BOOL v15 = v424++ > 8;
                if (v15) {
                  goto LABEL_426;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v123 = 0;
              }
            }
            break;
          }
LABEL_696:
          *((void *)this + 28) = v123;
          goto LABEL_821;
        case 0x35u:
          *v8 |= 0x2000000uLL;
          unint64_t v126 = *((void *)a2 + 1);
          unint64_t v127 = *((void *)a2 + 2);
          uint64_t v128 = *(void *)a2;
          if (v126 <= 0xFFFFFFFFFFFFFFF5 && v126 + 10 <= v127)
          {
            char v129 = 0;
            unsigned int v130 = 0;
            uint64_t v131 = 0;
            do
            {
              unint64_t v132 = v126 + 1;
              *((void *)a2 + 1) = v126 + 1;
              char v133 = *(unsigned char *)(v128 + v126);
              v131 |= (unint64_t)(v133 & 0x7F) << v129;
              if ((v133 & 0x80) == 0) {
                goto LABEL_700;
              }
              v129 += 7;
              unint64_t v126 = v132;
              BOOL v15 = v130++ > 8;
            }
            while (!v15);
LABEL_433:
            uint64_t v131 = 0;
            goto LABEL_700;
          }
          char v427 = 0;
          unsigned int v428 = 0;
          uint64_t v131 = 0;
          if (v127 <= v126) {
            unint64_t v127 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v127 == v126)
            {
              uint64_t v131 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v429 = v126 + 1;
              char v430 = *(unsigned char *)(v128 + v126);
              *((void *)a2 + 1) = v429;
              v131 |= (unint64_t)(v430 & 0x7F) << v427;
              if (v430 < 0)
              {
                v427 += 7;
                unint64_t v126 = v429;
                BOOL v15 = v428++ > 8;
                if (v15) {
                  goto LABEL_433;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v131 = 0;
              }
            }
            break;
          }
LABEL_700:
          *((void *)this + 26) = v131;
          goto LABEL_821;
        case 0x36u:
          *v8 |= 0x4000000uLL;
          unint64_t v134 = *((void *)a2 + 1);
          unint64_t v135 = *((void *)a2 + 2);
          uint64_t v136 = *(void *)a2;
          if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
          {
            char v137 = 0;
            unsigned int v138 = 0;
            uint64_t v139 = 0;
            do
            {
              unint64_t v140 = v134 + 1;
              *((void *)a2 + 1) = v134 + 1;
              char v141 = *(unsigned char *)(v136 + v134);
              v139 |= (unint64_t)(v141 & 0x7F) << v137;
              if ((v141 & 0x80) == 0) {
                goto LABEL_704;
              }
              v137 += 7;
              unint64_t v134 = v140;
              BOOL v15 = v138++ > 8;
            }
            while (!v15);
LABEL_440:
            uint64_t v139 = 0;
            goto LABEL_704;
          }
          char v431 = 0;
          unsigned int v432 = 0;
          uint64_t v139 = 0;
          if (v135 <= v134) {
            unint64_t v135 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v135 == v134)
            {
              uint64_t v139 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v433 = v134 + 1;
              char v434 = *(unsigned char *)(v136 + v134);
              *((void *)a2 + 1) = v433;
              v139 |= (unint64_t)(v434 & 0x7F) << v431;
              if (v434 < 0)
              {
                v431 += 7;
                unint64_t v134 = v433;
                BOOL v15 = v432++ > 8;
                if (v15) {
                  goto LABEL_440;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v139 = 0;
              }
            }
            break;
          }
LABEL_704:
          *((void *)this + 27) = v139;
          goto LABEL_821;
        case 0x37u:
          *v8 |= 0x400000uLL;
          unint64_t v142 = *((void *)a2 + 1);
          unint64_t v143 = *((void *)a2 + 2);
          uint64_t v144 = *(void *)a2;
          if (v142 <= 0xFFFFFFFFFFFFFFF5 && v142 + 10 <= v143)
          {
            char v145 = 0;
            unsigned int v146 = 0;
            uint64_t v147 = 0;
            do
            {
              unint64_t v148 = v142 + 1;
              *((void *)a2 + 1) = v142 + 1;
              char v149 = *(unsigned char *)(v144 + v142);
              v147 |= (unint64_t)(v149 & 0x7F) << v145;
              if ((v149 & 0x80) == 0) {
                goto LABEL_708;
              }
              v145 += 7;
              unint64_t v142 = v148;
              BOOL v15 = v146++ > 8;
            }
            while (!v15);
LABEL_447:
            uint64_t v147 = 0;
            goto LABEL_708;
          }
          char v435 = 0;
          unsigned int v436 = 0;
          uint64_t v147 = 0;
          if (v143 <= v142) {
            unint64_t v143 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v143 == v142)
            {
              uint64_t v147 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v437 = v142 + 1;
              char v438 = *(unsigned char *)(v144 + v142);
              *((void *)a2 + 1) = v437;
              v147 |= (unint64_t)(v438 & 0x7F) << v435;
              if (v438 < 0)
              {
                v435 += 7;
                unint64_t v142 = v437;
                BOOL v15 = v436++ > 8;
                if (v15) {
                  goto LABEL_447;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v147 = 0;
              }
            }
            break;
          }
LABEL_708:
          *((void *)this + 23) = v147;
          goto LABEL_821;
        case 0x38u:
          *v8 |= 0x800000uLL;
          unint64_t v150 = *((void *)a2 + 1);
          unint64_t v151 = *((void *)a2 + 2);
          uint64_t v152 = *(void *)a2;
          if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
          {
            char v153 = 0;
            unsigned int v154 = 0;
            uint64_t v155 = 0;
            do
            {
              unint64_t v156 = v150 + 1;
              *((void *)a2 + 1) = v150 + 1;
              char v157 = *(unsigned char *)(v152 + v150);
              v155 |= (unint64_t)(v157 & 0x7F) << v153;
              if ((v157 & 0x80) == 0) {
                goto LABEL_712;
              }
              v153 += 7;
              unint64_t v150 = v156;
              BOOL v15 = v154++ > 8;
            }
            while (!v15);
LABEL_454:
            uint64_t v155 = 0;
            goto LABEL_712;
          }
          char v439 = 0;
          unsigned int v440 = 0;
          uint64_t v155 = 0;
          if (v151 <= v150) {
            unint64_t v151 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v151 == v150)
            {
              uint64_t v155 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v441 = v150 + 1;
              char v442 = *(unsigned char *)(v152 + v150);
              *((void *)a2 + 1) = v441;
              v155 |= (unint64_t)(v442 & 0x7F) << v439;
              if (v442 < 0)
              {
                v439 += 7;
                unint64_t v150 = v441;
                BOOL v15 = v440++ > 8;
                if (v15) {
                  goto LABEL_454;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v155 = 0;
              }
            }
            break;
          }
LABEL_712:
          *((void *)this + 24) = v155;
          goto LABEL_821;
        case 0x3Bu:
          *v8 |= 0x20uLL;
          unint64_t v158 = *((void *)a2 + 1);
          unint64_t v159 = *((void *)a2 + 2);
          uint64_t v160 = *(void *)a2;
          if (v158 <= 0xFFFFFFFFFFFFFFF5 && v158 + 10 <= v159)
          {
            char v161 = 0;
            unsigned int v162 = 0;
            uint64_t v163 = 0;
            do
            {
              unint64_t v164 = v158 + 1;
              *((void *)a2 + 1) = v158 + 1;
              char v165 = *(unsigned char *)(v160 + v158);
              v163 |= (unint64_t)(v165 & 0x7F) << v161;
              if ((v165 & 0x80) == 0) {
                goto LABEL_716;
              }
              v161 += 7;
              unint64_t v158 = v164;
              BOOL v15 = v162++ > 8;
            }
            while (!v15);
LABEL_461:
            uint64_t v163 = 0;
            goto LABEL_716;
          }
          char v443 = 0;
          unsigned int v444 = 0;
          uint64_t v163 = 0;
          if (v159 <= v158) {
            unint64_t v159 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v159 == v158)
            {
              uint64_t v163 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v445 = v158 + 1;
              char v446 = *(unsigned char *)(v160 + v158);
              *((void *)a2 + 1) = v445;
              v163 |= (unint64_t)(v446 & 0x7F) << v443;
              if (v446 < 0)
              {
                v443 += 7;
                unint64_t v158 = v445;
                BOOL v15 = v444++ > 8;
                if (v15) {
                  goto LABEL_461;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v163 = 0;
              }
            }
            break;
          }
LABEL_716:
          *((void *)this + 6) = v163;
          goto LABEL_821;
        case 0x3Cu:
          *v8 |= 8uLL;
          unint64_t v166 = *((void *)a2 + 1);
          unint64_t v167 = *((void *)a2 + 2);
          uint64_t v168 = *(void *)a2;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            char v169 = 0;
            unsigned int v170 = 0;
            uint64_t v171 = 0;
            do
            {
              unint64_t v172 = v166 + 1;
              *((void *)a2 + 1) = v166 + 1;
              char v173 = *(unsigned char *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0) {
                goto LABEL_720;
              }
              v169 += 7;
              unint64_t v166 = v172;
              BOOL v15 = v170++ > 8;
            }
            while (!v15);
LABEL_468:
            uint64_t v171 = 0;
            goto LABEL_720;
          }
          char v447 = 0;
          unsigned int v448 = 0;
          uint64_t v171 = 0;
          if (v167 <= v166) {
            unint64_t v167 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v167 == v166)
            {
              uint64_t v171 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v449 = v166 + 1;
              char v450 = *(unsigned char *)(v168 + v166);
              *((void *)a2 + 1) = v449;
              v171 |= (unint64_t)(v450 & 0x7F) << v447;
              if (v450 < 0)
              {
                v447 += 7;
                unint64_t v166 = v449;
                BOOL v15 = v448++ > 8;
                if (v15) {
                  goto LABEL_468;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v171 = 0;
              }
            }
            break;
          }
LABEL_720:
          *((void *)this + 4) = v171;
          goto LABEL_821;
        case 0x3Du:
          *v8 |= 1uLL;
          unint64_t v174 = *((void *)a2 + 1);
          unint64_t v175 = *((void *)a2 + 2);
          uint64_t v176 = *(void *)a2;
          if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
          {
            char v177 = 0;
            unsigned int v178 = 0;
            uint64_t v179 = 0;
            do
            {
              unint64_t v180 = v174 + 1;
              *((void *)a2 + 1) = v174 + 1;
              char v181 = *(unsigned char *)(v176 + v174);
              v179 |= (unint64_t)(v181 & 0x7F) << v177;
              if ((v181 & 0x80) == 0) {
                goto LABEL_724;
              }
              v177 += 7;
              unint64_t v174 = v180;
              BOOL v15 = v178++ > 8;
            }
            while (!v15);
LABEL_475:
            uint64_t v179 = 0;
            goto LABEL_724;
          }
          char v451 = 0;
          unsigned int v452 = 0;
          uint64_t v179 = 0;
          if (v175 <= v174) {
            unint64_t v175 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v175 == v174)
            {
              uint64_t v179 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v453 = v174 + 1;
              char v454 = *(unsigned char *)(v176 + v174);
              *((void *)a2 + 1) = v453;
              v179 |= (unint64_t)(v454 & 0x7F) << v451;
              if (v454 < 0)
              {
                v451 += 7;
                unint64_t v174 = v453;
                BOOL v15 = v452++ > 8;
                if (v15) {
                  goto LABEL_475;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v179 = 0;
              }
            }
            break;
          }
LABEL_724:
          *((void *)this + 1) = v179;
          goto LABEL_821;
        case 0x3Eu:
          *v8 |= 0x40uLL;
          unint64_t v182 = *((void *)a2 + 1);
          unint64_t v183 = *((void *)a2 + 2);
          uint64_t v184 = *(void *)a2;
          if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
          {
            char v185 = 0;
            unsigned int v186 = 0;
            uint64_t v187 = 0;
            do
            {
              unint64_t v188 = v182 + 1;
              *((void *)a2 + 1) = v182 + 1;
              char v189 = *(unsigned char *)(v184 + v182);
              v187 |= (unint64_t)(v189 & 0x7F) << v185;
              if ((v189 & 0x80) == 0) {
                goto LABEL_728;
              }
              v185 += 7;
              unint64_t v182 = v188;
              BOOL v15 = v186++ > 8;
            }
            while (!v15);
LABEL_482:
            uint64_t v187 = 0;
            goto LABEL_728;
          }
          char v455 = 0;
          unsigned int v456 = 0;
          uint64_t v187 = 0;
          if (v183 <= v182) {
            unint64_t v183 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v183 == v182)
            {
              uint64_t v187 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v457 = v182 + 1;
              char v458 = *(unsigned char *)(v184 + v182);
              *((void *)a2 + 1) = v457;
              v187 |= (unint64_t)(v458 & 0x7F) << v455;
              if (v458 < 0)
              {
                v455 += 7;
                unint64_t v182 = v457;
                BOOL v15 = v456++ > 8;
                if (v15) {
                  goto LABEL_482;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v187 = 0;
              }
            }
            break;
          }
LABEL_728:
          *((void *)this + 7) = v187;
          goto LABEL_821;
        case 0x3Fu:
          *v8 |= 0x100uLL;
          unint64_t v190 = *((void *)a2 + 1);
          unint64_t v191 = *((void *)a2 + 2);
          uint64_t v192 = *(void *)a2;
          if (v190 <= 0xFFFFFFFFFFFFFFF5 && v190 + 10 <= v191)
          {
            char v193 = 0;
            unsigned int v194 = 0;
            uint64_t v195 = 0;
            do
            {
              unint64_t v196 = v190 + 1;
              *((void *)a2 + 1) = v190 + 1;
              char v197 = *(unsigned char *)(v192 + v190);
              v195 |= (unint64_t)(v197 & 0x7F) << v193;
              if ((v197 & 0x80) == 0) {
                goto LABEL_732;
              }
              v193 += 7;
              unint64_t v190 = v196;
              BOOL v15 = v194++ > 8;
            }
            while (!v15);
LABEL_489:
            uint64_t v195 = 0;
            goto LABEL_732;
          }
          char v459 = 0;
          unsigned int v460 = 0;
          uint64_t v195 = 0;
          if (v191 <= v190) {
            unint64_t v191 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v191 == v190)
            {
              uint64_t v195 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v461 = v190 + 1;
              char v462 = *(unsigned char *)(v192 + v190);
              *((void *)a2 + 1) = v461;
              v195 |= (unint64_t)(v462 & 0x7F) << v459;
              if (v462 < 0)
              {
                v459 += 7;
                unint64_t v190 = v461;
                BOOL v15 = v460++ > 8;
                if (v15) {
                  goto LABEL_489;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v195 = 0;
              }
            }
            break;
          }
LABEL_732:
          *((void *)this + 9) = v195;
          goto LABEL_821;
        case 0x40u:
          *v8 |= 0x10uLL;
          unint64_t v198 = *((void *)a2 + 1);
          unint64_t v199 = *((void *)a2 + 2);
          uint64_t v200 = *(void *)a2;
          if (v198 <= 0xFFFFFFFFFFFFFFF5 && v198 + 10 <= v199)
          {
            char v201 = 0;
            unsigned int v202 = 0;
            uint64_t v203 = 0;
            do
            {
              unint64_t v204 = v198 + 1;
              *((void *)a2 + 1) = v198 + 1;
              char v205 = *(unsigned char *)(v200 + v198);
              v203 |= (unint64_t)(v205 & 0x7F) << v201;
              if ((v205 & 0x80) == 0) {
                goto LABEL_736;
              }
              v201 += 7;
              unint64_t v198 = v204;
              BOOL v15 = v202++ > 8;
            }
            while (!v15);
LABEL_496:
            uint64_t v203 = 0;
            goto LABEL_736;
          }
          char v463 = 0;
          unsigned int v464 = 0;
          uint64_t v203 = 0;
          if (v199 <= v198) {
            unint64_t v199 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v199 == v198)
            {
              uint64_t v203 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v465 = v198 + 1;
              char v466 = *(unsigned char *)(v200 + v198);
              *((void *)a2 + 1) = v465;
              v203 |= (unint64_t)(v466 & 0x7F) << v463;
              if (v466 < 0)
              {
                v463 += 7;
                unint64_t v198 = v465;
                BOOL v15 = v464++ > 8;
                if (v15) {
                  goto LABEL_496;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v203 = 0;
              }
            }
            break;
          }
LABEL_736:
          *((void *)this + 5) = v203;
          goto LABEL_821;
        case 0x41u:
          *v8 |= 0x200uLL;
          unint64_t v206 = *((void *)a2 + 1);
          unint64_t v207 = *((void *)a2 + 2);
          uint64_t v208 = *(void *)a2;
          if (v206 <= 0xFFFFFFFFFFFFFFF5 && v206 + 10 <= v207)
          {
            char v209 = 0;
            unsigned int v210 = 0;
            uint64_t v211 = 0;
            do
            {
              unint64_t v212 = v206 + 1;
              *((void *)a2 + 1) = v206 + 1;
              char v213 = *(unsigned char *)(v208 + v206);
              v211 |= (unint64_t)(v213 & 0x7F) << v209;
              if ((v213 & 0x80) == 0) {
                goto LABEL_740;
              }
              v209 += 7;
              unint64_t v206 = v212;
              BOOL v15 = v210++ > 8;
            }
            while (!v15);
LABEL_503:
            uint64_t v211 = 0;
            goto LABEL_740;
          }
          char v467 = 0;
          unsigned int v468 = 0;
          uint64_t v211 = 0;
          if (v207 <= v206) {
            unint64_t v207 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v207 == v206)
            {
              uint64_t v211 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v469 = v206 + 1;
              char v470 = *(unsigned char *)(v208 + v206);
              *((void *)a2 + 1) = v469;
              v211 |= (unint64_t)(v470 & 0x7F) << v467;
              if (v470 < 0)
              {
                v467 += 7;
                unint64_t v206 = v469;
                BOOL v15 = v468++ > 8;
                if (v15) {
                  goto LABEL_503;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v211 = 0;
              }
            }
            break;
          }
LABEL_740:
          *((void *)this + 10) = v211;
          goto LABEL_821;
        case 0x42u:
          *v8 |= 0x400uLL;
          unint64_t v214 = *((void *)a2 + 1);
          unint64_t v215 = *((void *)a2 + 2);
          uint64_t v216 = *(void *)a2;
          if (v214 <= 0xFFFFFFFFFFFFFFF5 && v214 + 10 <= v215)
          {
            char v217 = 0;
            unsigned int v218 = 0;
            uint64_t v219 = 0;
            do
            {
              unint64_t v220 = v214 + 1;
              *((void *)a2 + 1) = v214 + 1;
              char v221 = *(unsigned char *)(v216 + v214);
              v219 |= (unint64_t)(v221 & 0x7F) << v217;
              if ((v221 & 0x80) == 0) {
                goto LABEL_744;
              }
              v217 += 7;
              unint64_t v214 = v220;
              BOOL v15 = v218++ > 8;
            }
            while (!v15);
LABEL_510:
            uint64_t v219 = 0;
            goto LABEL_744;
          }
          char v471 = 0;
          unsigned int v472 = 0;
          uint64_t v219 = 0;
          if (v215 <= v214) {
            unint64_t v215 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v215 == v214)
            {
              uint64_t v219 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v473 = v214 + 1;
              char v474 = *(unsigned char *)(v216 + v214);
              *((void *)a2 + 1) = v473;
              v219 |= (unint64_t)(v474 & 0x7F) << v471;
              if (v474 < 0)
              {
                v471 += 7;
                unint64_t v214 = v473;
                BOOL v15 = v472++ > 8;
                if (v15) {
                  goto LABEL_510;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v219 = 0;
              }
            }
            break;
          }
LABEL_744:
          *((void *)this + 11) = v219;
          goto LABEL_821;
        case 0x43u:
          *v8 |= 0x800uLL;
          unint64_t v222 = *((void *)a2 + 1);
          unint64_t v223 = *((void *)a2 + 2);
          uint64_t v224 = *(void *)a2;
          if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
          {
            char v225 = 0;
            unsigned int v226 = 0;
            uint64_t v227 = 0;
            do
            {
              unint64_t v228 = v222 + 1;
              *((void *)a2 + 1) = v222 + 1;
              char v229 = *(unsigned char *)(v224 + v222);
              v227 |= (unint64_t)(v229 & 0x7F) << v225;
              if ((v229 & 0x80) == 0) {
                goto LABEL_748;
              }
              v225 += 7;
              unint64_t v222 = v228;
              BOOL v15 = v226++ > 8;
            }
            while (!v15);
LABEL_517:
            uint64_t v227 = 0;
            goto LABEL_748;
          }
          char v475 = 0;
          unsigned int v476 = 0;
          uint64_t v227 = 0;
          if (v223 <= v222) {
            unint64_t v223 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v223 == v222)
            {
              uint64_t v227 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v477 = v222 + 1;
              char v478 = *(unsigned char *)(v224 + v222);
              *((void *)a2 + 1) = v477;
              v227 |= (unint64_t)(v478 & 0x7F) << v475;
              if (v478 < 0)
              {
                v475 += 7;
                unint64_t v222 = v477;
                BOOL v15 = v476++ > 8;
                if (v15) {
                  goto LABEL_517;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v227 = 0;
              }
            }
            break;
          }
LABEL_748:
          *((void *)this + 12) = v227;
          goto LABEL_821;
        case 0x44u:
          *v8 |= 0x4000uLL;
          unint64_t v230 = *((void *)a2 + 1);
          unint64_t v231 = *((void *)a2 + 2);
          uint64_t v232 = *(void *)a2;
          if (v230 <= 0xFFFFFFFFFFFFFFF5 && v230 + 10 <= v231)
          {
            char v233 = 0;
            unsigned int v234 = 0;
            uint64_t v235 = 0;
            do
            {
              unint64_t v236 = v230 + 1;
              *((void *)a2 + 1) = v230 + 1;
              char v237 = *(unsigned char *)(v232 + v230);
              v235 |= (unint64_t)(v237 & 0x7F) << v233;
              if ((v237 & 0x80) == 0) {
                goto LABEL_752;
              }
              v233 += 7;
              unint64_t v230 = v236;
              BOOL v15 = v234++ > 8;
            }
            while (!v15);
LABEL_524:
            uint64_t v235 = 0;
            goto LABEL_752;
          }
          char v479 = 0;
          unsigned int v480 = 0;
          uint64_t v235 = 0;
          if (v231 <= v230) {
            unint64_t v231 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v231 == v230)
            {
              uint64_t v235 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v481 = v230 + 1;
              char v482 = *(unsigned char *)(v232 + v230);
              *((void *)a2 + 1) = v481;
              v235 |= (unint64_t)(v482 & 0x7F) << v479;
              if (v482 < 0)
              {
                v479 += 7;
                unint64_t v230 = v481;
                BOOL v15 = v480++ > 8;
                if (v15) {
                  goto LABEL_524;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v235 = 0;
              }
            }
            break;
          }
LABEL_752:
          *((void *)this + 15) = v235;
          goto LABEL_821;
        case 0x45u:
          *v8 |= 2uLL;
          unint64_t v238 = *((void *)a2 + 1);
          unint64_t v239 = *((void *)a2 + 2);
          uint64_t v240 = *(void *)a2;
          if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
          {
            char v241 = 0;
            unsigned int v242 = 0;
            uint64_t v243 = 0;
            do
            {
              unint64_t v244 = v238 + 1;
              *((void *)a2 + 1) = v238 + 1;
              char v245 = *(unsigned char *)(v240 + v238);
              v243 |= (unint64_t)(v245 & 0x7F) << v241;
              if ((v245 & 0x80) == 0) {
                goto LABEL_756;
              }
              v241 += 7;
              unint64_t v238 = v244;
              BOOL v15 = v242++ > 8;
            }
            while (!v15);
LABEL_531:
            uint64_t v243 = 0;
            goto LABEL_756;
          }
          char v483 = 0;
          unsigned int v484 = 0;
          uint64_t v243 = 0;
          if (v239 <= v238) {
            unint64_t v239 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v239 == v238)
            {
              uint64_t v243 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v485 = v238 + 1;
              char v486 = *(unsigned char *)(v240 + v238);
              *((void *)a2 + 1) = v485;
              v243 |= (unint64_t)(v486 & 0x7F) << v483;
              if (v486 < 0)
              {
                v483 += 7;
                unint64_t v238 = v485;
                BOOL v15 = v484++ > 8;
                if (v15) {
                  goto LABEL_531;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v243 = 0;
              }
            }
            break;
          }
LABEL_756:
          *((void *)this + 2) = v243;
          goto LABEL_821;
        case 0x46u:
          *v8 |= 0x8000uLL;
          unint64_t v246 = *((void *)a2 + 1);
          unint64_t v247 = *((void *)a2 + 2);
          uint64_t v248 = *(void *)a2;
          if (v246 <= 0xFFFFFFFFFFFFFFF5 && v246 + 10 <= v247)
          {
            char v249 = 0;
            unsigned int v250 = 0;
            uint64_t v251 = 0;
            do
            {
              unint64_t v252 = v246 + 1;
              *((void *)a2 + 1) = v246 + 1;
              char v253 = *(unsigned char *)(v248 + v246);
              v251 |= (unint64_t)(v253 & 0x7F) << v249;
              if ((v253 & 0x80) == 0) {
                goto LABEL_760;
              }
              v249 += 7;
              unint64_t v246 = v252;
              BOOL v15 = v250++ > 8;
            }
            while (!v15);
LABEL_538:
            uint64_t v251 = 0;
            goto LABEL_760;
          }
          char v487 = 0;
          unsigned int v488 = 0;
          uint64_t v251 = 0;
          if (v247 <= v246) {
            unint64_t v247 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v247 == v246)
            {
              uint64_t v251 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v489 = v246 + 1;
              char v490 = *(unsigned char *)(v248 + v246);
              *((void *)a2 + 1) = v489;
              v251 |= (unint64_t)(v490 & 0x7F) << v487;
              if (v490 < 0)
              {
                v487 += 7;
                unint64_t v246 = v489;
                BOOL v15 = v488++ > 8;
                if (v15) {
                  goto LABEL_538;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v251 = 0;
              }
            }
            break;
          }
LABEL_760:
          *((void *)this + 16) = v251;
          goto LABEL_821;
        case 0x47u:
          *v8 |= 0x800000000uLL;
          unint64_t v254 = *((void *)a2 + 1);
          unint64_t v255 = *((void *)a2 + 2);
          uint64_t v256 = *(void *)a2;
          if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
          {
            char v257 = 0;
            unsigned int v258 = 0;
            uint64_t v259 = 0;
            do
            {
              unint64_t v260 = v254 + 1;
              *((void *)a2 + 1) = v254 + 1;
              char v261 = *(unsigned char *)(v256 + v254);
              v259 |= (unint64_t)(v261 & 0x7F) << v257;
              if ((v261 & 0x80) == 0) {
                goto LABEL_764;
              }
              v257 += 7;
              unint64_t v254 = v260;
              BOOL v15 = v258++ > 8;
            }
            while (!v15);
LABEL_545:
            uint64_t v259 = 0;
            goto LABEL_764;
          }
          char v491 = 0;
          unsigned int v492 = 0;
          uint64_t v259 = 0;
          if (v255 <= v254) {
            unint64_t v255 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v255 == v254)
            {
              uint64_t v259 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v493 = v254 + 1;
              char v494 = *(unsigned char *)(v256 + v254);
              *((void *)a2 + 1) = v493;
              v259 |= (unint64_t)(v494 & 0x7F) << v491;
              if (v494 < 0)
              {
                v491 += 7;
                unint64_t v254 = v493;
                BOOL v15 = v492++ > 8;
                if (v15) {
                  goto LABEL_545;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v259 = 0;
              }
            }
            break;
          }
LABEL_764:
          *((void *)this + 36) = v259;
          goto LABEL_821;
        case 0x48u:
          *v8 |= 0x400000000uLL;
          unint64_t v262 = *((void *)a2 + 1);
          unint64_t v263 = *((void *)a2 + 2);
          uint64_t v264 = *(void *)a2;
          if (v262 <= 0xFFFFFFFFFFFFFFF5 && v262 + 10 <= v263)
          {
            char v265 = 0;
            unsigned int v266 = 0;
            uint64_t v267 = 0;
            do
            {
              unint64_t v268 = v262 + 1;
              *((void *)a2 + 1) = v262 + 1;
              char v269 = *(unsigned char *)(v264 + v262);
              v267 |= (unint64_t)(v269 & 0x7F) << v265;
              if ((v269 & 0x80) == 0) {
                goto LABEL_768;
              }
              v265 += 7;
              unint64_t v262 = v268;
              BOOL v15 = v266++ > 8;
            }
            while (!v15);
LABEL_552:
            uint64_t v267 = 0;
            goto LABEL_768;
          }
          char v495 = 0;
          unsigned int v496 = 0;
          uint64_t v267 = 0;
          if (v263 <= v262) {
            unint64_t v263 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v263 == v262)
            {
              uint64_t v267 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v497 = v262 + 1;
              char v498 = *(unsigned char *)(v264 + v262);
              *((void *)a2 + 1) = v497;
              v267 |= (unint64_t)(v498 & 0x7F) << v495;
              if (v498 < 0)
              {
                v495 += 7;
                unint64_t v262 = v497;
                BOOL v15 = v496++ > 8;
                if (v15) {
                  goto LABEL_552;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v267 = 0;
              }
            }
            break;
          }
LABEL_768:
          *((void *)this + 35) = v267;
          goto LABEL_821;
        case 0x49u:
          *v8 |= 0x200000000uLL;
          unint64_t v270 = *((void *)a2 + 1);
          unint64_t v271 = *((void *)a2 + 2);
          uint64_t v272 = *(void *)a2;
          if (v270 <= 0xFFFFFFFFFFFFFFF5 && v270 + 10 <= v271)
          {
            char v273 = 0;
            unsigned int v274 = 0;
            uint64_t v275 = 0;
            do
            {
              unint64_t v276 = v270 + 1;
              *((void *)a2 + 1) = v270 + 1;
              char v277 = *(unsigned char *)(v272 + v270);
              v275 |= (unint64_t)(v277 & 0x7F) << v273;
              if ((v277 & 0x80) == 0) {
                goto LABEL_772;
              }
              v273 += 7;
              unint64_t v270 = v276;
              BOOL v15 = v274++ > 8;
            }
            while (!v15);
LABEL_559:
            uint64_t v275 = 0;
            goto LABEL_772;
          }
          char v499 = 0;
          unsigned int v500 = 0;
          uint64_t v275 = 0;
          if (v271 <= v270) {
            unint64_t v271 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v271 == v270)
            {
              uint64_t v275 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v501 = v270 + 1;
              char v502 = *(unsigned char *)(v272 + v270);
              *((void *)a2 + 1) = v501;
              v275 |= (unint64_t)(v502 & 0x7F) << v499;
              if (v502 < 0)
              {
                v499 += 7;
                unint64_t v270 = v501;
                BOOL v15 = v500++ > 8;
                if (v15) {
                  goto LABEL_559;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v275 = 0;
              }
            }
            break;
          }
LABEL_772:
          *((void *)this + 34) = v275;
          goto LABEL_821;
        case 0x4Au:
          *v8 |= (unint64_t)&_mh_execute_header;
          unint64_t v278 = *((void *)a2 + 1);
          unint64_t v279 = *((void *)a2 + 2);
          uint64_t v280 = *(void *)a2;
          if (v278 <= 0xFFFFFFFFFFFFFFF5 && v278 + 10 <= v279)
          {
            char v281 = 0;
            unsigned int v282 = 0;
            uint64_t v283 = 0;
            do
            {
              unint64_t v284 = v278 + 1;
              *((void *)a2 + 1) = v278 + 1;
              char v285 = *(unsigned char *)(v280 + v278);
              v283 |= (unint64_t)(v285 & 0x7F) << v281;
              if ((v285 & 0x80) == 0) {
                goto LABEL_776;
              }
              v281 += 7;
              unint64_t v278 = v284;
              BOOL v15 = v282++ > 8;
            }
            while (!v15);
LABEL_566:
            uint64_t v283 = 0;
            goto LABEL_776;
          }
          char v503 = 0;
          unsigned int v504 = 0;
          uint64_t v283 = 0;
          if (v279 <= v278) {
            unint64_t v279 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v279 == v278)
            {
              uint64_t v283 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v505 = v278 + 1;
              char v506 = *(unsigned char *)(v280 + v278);
              *((void *)a2 + 1) = v505;
              v283 |= (unint64_t)(v506 & 0x7F) << v503;
              if (v506 < 0)
              {
                v503 += 7;
                unint64_t v278 = v505;
                BOOL v15 = v504++ > 8;
                if (v15) {
                  goto LABEL_566;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v283 = 0;
              }
            }
            break;
          }
LABEL_776:
          *((void *)this + 33) = v283;
          goto LABEL_821;
        case 0x51u:
          *v8 |= 0x20000000uLL;
          unint64_t v286 = *((void *)a2 + 1);
          unint64_t v287 = *((void *)a2 + 2);
          uint64_t v288 = *(void *)a2;
          if (v286 <= 0xFFFFFFFFFFFFFFF5 && v286 + 10 <= v287)
          {
            char v289 = 0;
            unsigned int v290 = 0;
            uint64_t v291 = 0;
            do
            {
              unint64_t v292 = v286 + 1;
              *((void *)a2 + 1) = v286 + 1;
              char v293 = *(unsigned char *)(v288 + v286);
              v291 |= (unint64_t)(v293 & 0x7F) << v289;
              if ((v293 & 0x80) == 0) {
                goto LABEL_780;
              }
              v289 += 7;
              unint64_t v286 = v292;
              BOOL v15 = v290++ > 8;
            }
            while (!v15);
LABEL_573:
            uint64_t v291 = 0;
            goto LABEL_780;
          }
          char v507 = 0;
          unsigned int v508 = 0;
          uint64_t v291 = 0;
          if (v287 <= v286) {
            unint64_t v287 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v287 == v286)
            {
              uint64_t v291 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v509 = v286 + 1;
              char v510 = *(unsigned char *)(v288 + v286);
              *((void *)a2 + 1) = v509;
              v291 |= (unint64_t)(v510 & 0x7F) << v507;
              if (v510 < 0)
              {
                v507 += 7;
                unint64_t v286 = v509;
                BOOL v15 = v508++ > 8;
                if (v15) {
                  goto LABEL_573;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v291 = 0;
              }
            }
            break;
          }
LABEL_780:
          *((void *)this + 30) = v291;
          goto LABEL_821;
        case 0x52u:
          *v8 |= 0x10000000uLL;
          unint64_t v294 = *((void *)a2 + 1);
          unint64_t v295 = *((void *)a2 + 2);
          uint64_t v296 = *(void *)a2;
          if (v294 <= 0xFFFFFFFFFFFFFFF5 && v294 + 10 <= v295)
          {
            char v297 = 0;
            unsigned int v298 = 0;
            uint64_t v299 = 0;
            do
            {
              unint64_t v300 = v294 + 1;
              *((void *)a2 + 1) = v294 + 1;
              char v301 = *(unsigned char *)(v296 + v294);
              v299 |= (unint64_t)(v301 & 0x7F) << v297;
              if ((v301 & 0x80) == 0) {
                goto LABEL_784;
              }
              v297 += 7;
              unint64_t v294 = v300;
              BOOL v15 = v298++ > 8;
            }
            while (!v15);
LABEL_580:
            uint64_t v299 = 0;
            goto LABEL_784;
          }
          char v511 = 0;
          unsigned int v512 = 0;
          uint64_t v299 = 0;
          if (v295 <= v294) {
            unint64_t v295 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v295 == v294)
            {
              uint64_t v299 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v513 = v294 + 1;
              char v514 = *(unsigned char *)(v296 + v294);
              *((void *)a2 + 1) = v513;
              v299 |= (unint64_t)(v514 & 0x7F) << v511;
              if (v514 < 0)
              {
                v511 += 7;
                unint64_t v294 = v513;
                BOOL v15 = v512++ > 8;
                if (v15) {
                  goto LABEL_580;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v299 = 0;
              }
            }
            break;
          }
LABEL_784:
          *((void *)this + 29) = v299;
          goto LABEL_821;
        case 0x53u:
          *v8 |= 0x2000uLL;
          unint64_t v302 = *((void *)a2 + 1);
          unint64_t v303 = *((void *)a2 + 2);
          uint64_t v304 = *(void *)a2;
          if (v302 <= 0xFFFFFFFFFFFFFFF5 && v302 + 10 <= v303)
          {
            char v305 = 0;
            unsigned int v306 = 0;
            uint64_t v307 = 0;
            do
            {
              unint64_t v308 = v302 + 1;
              *((void *)a2 + 1) = v302 + 1;
              char v309 = *(unsigned char *)(v304 + v302);
              v307 |= (unint64_t)(v309 & 0x7F) << v305;
              if ((v309 & 0x80) == 0) {
                goto LABEL_788;
              }
              v305 += 7;
              unint64_t v302 = v308;
              BOOL v15 = v306++ > 8;
            }
            while (!v15);
LABEL_587:
            uint64_t v307 = 0;
            goto LABEL_788;
          }
          char v515 = 0;
          unsigned int v516 = 0;
          uint64_t v307 = 0;
          if (v303 <= v302) {
            unint64_t v303 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v303 == v302)
            {
              uint64_t v307 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v517 = v302 + 1;
              char v518 = *(unsigned char *)(v304 + v302);
              *((void *)a2 + 1) = v517;
              v307 |= (unint64_t)(v518 & 0x7F) << v515;
              if (v518 < 0)
              {
                v515 += 7;
                unint64_t v302 = v517;
                BOOL v15 = v516++ > 8;
                if (v15) {
                  goto LABEL_587;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v307 = 0;
              }
            }
            break;
          }
LABEL_788:
          *((void *)this + 14) = v307;
          goto LABEL_821;
        case 0x54u:
          *v8 |= 0x10000uLL;
          unint64_t v310 = *((void *)a2 + 1);
          unint64_t v311 = *((void *)a2 + 2);
          uint64_t v312 = *(void *)a2;
          if (v310 <= 0xFFFFFFFFFFFFFFF5 && v310 + 10 <= v311)
          {
            char v313 = 0;
            unsigned int v314 = 0;
            uint64_t v315 = 0;
            do
            {
              unint64_t v316 = v310 + 1;
              *((void *)a2 + 1) = v310 + 1;
              char v317 = *(unsigned char *)(v312 + v310);
              v315 |= (unint64_t)(v317 & 0x7F) << v313;
              if ((v317 & 0x80) == 0) {
                goto LABEL_792;
              }
              v313 += 7;
              unint64_t v310 = v316;
              BOOL v15 = v314++ > 8;
            }
            while (!v15);
LABEL_594:
            uint64_t v315 = 0;
            goto LABEL_792;
          }
          char v519 = 0;
          unsigned int v520 = 0;
          uint64_t v315 = 0;
          if (v311 <= v310) {
            unint64_t v311 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v311 == v310)
            {
              uint64_t v315 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v521 = v310 + 1;
              char v522 = *(unsigned char *)(v312 + v310);
              *((void *)a2 + 1) = v521;
              v315 |= (unint64_t)(v522 & 0x7F) << v519;
              if (v522 < 0)
              {
                v519 += 7;
                unint64_t v310 = v521;
                BOOL v15 = v520++ > 8;
                if (v15) {
                  goto LABEL_594;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v315 = 0;
              }
            }
            break;
          }
LABEL_792:
          *((void *)this + 17) = v315;
          goto LABEL_821;
        case 0x55u:
          *v8 |= 4uLL;
          unint64_t v318 = *((void *)a2 + 1);
          unint64_t v319 = *((void *)a2 + 2);
          uint64_t v320 = *(void *)a2;
          if (v318 <= 0xFFFFFFFFFFFFFFF5 && v318 + 10 <= v319)
          {
            char v321 = 0;
            unsigned int v322 = 0;
            uint64_t v323 = 0;
            do
            {
              unint64_t v324 = v318 + 1;
              *((void *)a2 + 1) = v318 + 1;
              char v325 = *(unsigned char *)(v320 + v318);
              v323 |= (unint64_t)(v325 & 0x7F) << v321;
              if ((v325 & 0x80) == 0) {
                goto LABEL_796;
              }
              v321 += 7;
              unint64_t v318 = v324;
              BOOL v15 = v322++ > 8;
            }
            while (!v15);
LABEL_601:
            uint64_t v323 = 0;
            goto LABEL_796;
          }
          char v523 = 0;
          unsigned int v524 = 0;
          uint64_t v323 = 0;
          if (v319 <= v318) {
            unint64_t v319 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v319 == v318)
            {
              uint64_t v323 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v525 = v318 + 1;
              char v526 = *(unsigned char *)(v320 + v318);
              *((void *)a2 + 1) = v525;
              v323 |= (unint64_t)(v526 & 0x7F) << v523;
              if (v526 < 0)
              {
                v523 += 7;
                unint64_t v318 = v525;
                BOOL v15 = v524++ > 8;
                if (v15) {
                  goto LABEL_601;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v323 = 0;
              }
            }
            break;
          }
LABEL_796:
          *((void *)this + 3) = v323;
          goto LABEL_821;
        case 0x56u:
          *v8 |= 0x40000uLL;
          unint64_t v326 = *((void *)a2 + 1);
          unint64_t v327 = *((void *)a2 + 2);
          uint64_t v328 = *(void *)a2;
          if (v326 <= 0xFFFFFFFFFFFFFFF5 && v326 + 10 <= v327)
          {
            char v329 = 0;
            unsigned int v330 = 0;
            uint64_t v331 = 0;
            do
            {
              unint64_t v332 = v326 + 1;
              *((void *)a2 + 1) = v326 + 1;
              char v333 = *(unsigned char *)(v328 + v326);
              v331 |= (unint64_t)(v333 & 0x7F) << v329;
              if ((v333 & 0x80) == 0) {
                goto LABEL_800;
              }
              v329 += 7;
              unint64_t v326 = v332;
              BOOL v15 = v330++ > 8;
            }
            while (!v15);
LABEL_608:
            uint64_t v331 = 0;
            goto LABEL_800;
          }
          char v527 = 0;
          unsigned int v528 = 0;
          uint64_t v331 = 0;
          if (v327 <= v326) {
            unint64_t v327 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v327 == v326)
            {
              uint64_t v331 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v529 = v326 + 1;
              char v530 = *(unsigned char *)(v328 + v326);
              *((void *)a2 + 1) = v529;
              v331 |= (unint64_t)(v530 & 0x7F) << v527;
              if (v530 < 0)
              {
                v527 += 7;
                unint64_t v326 = v529;
                BOOL v15 = v528++ > 8;
                if (v15) {
                  goto LABEL_608;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v331 = 0;
              }
            }
            break;
          }
LABEL_800:
          *((void *)this + 19) = v331;
          goto LABEL_821;
        case 0x57u:
          *v8 |= 0x20000uLL;
          unint64_t v334 = *((void *)a2 + 1);
          unint64_t v335 = *((void *)a2 + 2);
          uint64_t v336 = *(void *)a2;
          if (v334 <= 0xFFFFFFFFFFFFFFF5 && v334 + 10 <= v335)
          {
            char v337 = 0;
            unsigned int v338 = 0;
            uint64_t v339 = 0;
            do
            {
              unint64_t v340 = v334 + 1;
              *((void *)a2 + 1) = v334 + 1;
              char v341 = *(unsigned char *)(v336 + v334);
              v339 |= (unint64_t)(v341 & 0x7F) << v337;
              if ((v341 & 0x80) == 0) {
                goto LABEL_804;
              }
              v337 += 7;
              unint64_t v334 = v340;
              BOOL v15 = v338++ > 8;
            }
            while (!v15);
LABEL_615:
            uint64_t v339 = 0;
            goto LABEL_804;
          }
          char v531 = 0;
          unsigned int v532 = 0;
          uint64_t v339 = 0;
          if (v335 <= v334) {
            unint64_t v335 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v335 == v334)
            {
              uint64_t v339 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v533 = v334 + 1;
              char v534 = *(unsigned char *)(v336 + v334);
              *((void *)a2 + 1) = v533;
              v339 |= (unint64_t)(v534 & 0x7F) << v531;
              if (v534 < 0)
              {
                v531 += 7;
                unint64_t v334 = v533;
                BOOL v15 = v532++ > 8;
                if (v15) {
                  goto LABEL_615;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v339 = 0;
              }
            }
            break;
          }
LABEL_804:
          *((void *)this + 18) = v339;
          goto LABEL_821;
        case 0x58u:
          *v8 |= 0x80uLL;
          unint64_t v342 = *((void *)a2 + 1);
          unint64_t v343 = *((void *)a2 + 2);
          uint64_t v344 = *(void *)a2;
          if (v342 <= 0xFFFFFFFFFFFFFFF5 && v342 + 10 <= v343)
          {
            char v345 = 0;
            unsigned int v346 = 0;
            uint64_t v347 = 0;
            do
            {
              unint64_t v348 = v342 + 1;
              *((void *)a2 + 1) = v342 + 1;
              char v349 = *(unsigned char *)(v344 + v342);
              v347 |= (unint64_t)(v349 & 0x7F) << v345;
              if ((v349 & 0x80) == 0) {
                goto LABEL_808;
              }
              v345 += 7;
              unint64_t v342 = v348;
              BOOL v15 = v346++ > 8;
            }
            while (!v15);
LABEL_622:
            uint64_t v347 = 0;
            goto LABEL_808;
          }
          char v535 = 0;
          unsigned int v536 = 0;
          uint64_t v347 = 0;
          if (v343 <= v342) {
            unint64_t v343 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v343 == v342)
            {
              uint64_t v347 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v537 = v342 + 1;
              char v538 = *(unsigned char *)(v344 + v342);
              *((void *)a2 + 1) = v537;
              v347 |= (unint64_t)(v538 & 0x7F) << v535;
              if (v538 < 0)
              {
                v535 += 7;
                unint64_t v342 = v537;
                BOOL v15 = v536++ > 8;
                if (v15) {
                  goto LABEL_622;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v347 = 0;
              }
            }
            break;
          }
LABEL_808:
          *((void *)this + 8) = v347;
          goto LABEL_821;
        case 0x59u:
          *v8 |= 0x1000uLL;
          unint64_t v350 = *((void *)a2 + 1);
          unint64_t v351 = *((void *)a2 + 2);
          uint64_t v352 = *(void *)a2;
          if (v350 <= 0xFFFFFFFFFFFFFFF5 && v350 + 10 <= v351)
          {
            char v353 = 0;
            unsigned int v354 = 0;
            uint64_t v355 = 0;
            do
            {
              unint64_t v356 = v350 + 1;
              *((void *)a2 + 1) = v350 + 1;
              char v357 = *(unsigned char *)(v352 + v350);
              v355 |= (unint64_t)(v357 & 0x7F) << v353;
              if ((v357 & 0x80) == 0) {
                goto LABEL_812;
              }
              v353 += 7;
              unint64_t v350 = v356;
              BOOL v15 = v354++ > 8;
            }
            while (!v15);
LABEL_629:
            uint64_t v355 = 0;
            goto LABEL_812;
          }
          char v539 = 0;
          unsigned int v540 = 0;
          uint64_t v355 = 0;
          if (v351 <= v350) {
            unint64_t v351 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v351 == v350)
            {
              uint64_t v355 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v541 = v350 + 1;
              char v542 = *(unsigned char *)(v352 + v350);
              *((void *)a2 + 1) = v541;
              v355 |= (unint64_t)(v542 & 0x7F) << v539;
              if (v542 < 0)
              {
                v539 += 7;
                unint64_t v350 = v541;
                BOOL v15 = v540++ > 8;
                if (v15) {
                  goto LABEL_629;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v355 = 0;
              }
            }
            break;
          }
LABEL_812:
          *((void *)this + 13) = v355;
          goto LABEL_821;
        case 0x64u:
          *v8 |= 0x4000000000uLL;
          unint64_t v358 = *((void *)a2 + 1);
          unint64_t v359 = *((void *)a2 + 2);
          uint64_t v360 = *(void *)a2;
          if (v358 <= 0xFFFFFFFFFFFFFFF5 && v358 + 10 <= v359)
          {
            char v361 = 0;
            unsigned int v362 = 0;
            uint64_t v363 = 0;
            do
            {
              unint64_t v364 = v358 + 1;
              *((void *)a2 + 1) = v358 + 1;
              char v365 = *(unsigned char *)(v360 + v358);
              v363 |= (unint64_t)(v365 & 0x7F) << v361;
              if ((v365 & 0x80) == 0) {
                goto LABEL_816;
              }
              v361 += 7;
              unint64_t v358 = v364;
              BOOL v15 = v362++ > 8;
            }
            while (!v15);
LABEL_636:
            uint64_t v363 = 0;
            goto LABEL_816;
          }
          char v543 = 0;
          unsigned int v544 = 0;
          uint64_t v363 = 0;
          if (v359 <= v358) {
            unint64_t v359 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v359 == v358)
            {
              uint64_t v363 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v545 = v358 + 1;
              char v546 = *(unsigned char *)(v360 + v358);
              *((void *)a2 + 1) = v545;
              v363 |= (unint64_t)(v546 & 0x7F) << v543;
              if (v546 < 0)
              {
                v543 += 7;
                unint64_t v358 = v545;
                BOOL v15 = v544++ > 8;
                if (v15) {
                  goto LABEL_636;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v363 = 0;
              }
            }
            break;
          }
LABEL_816:
          *((void *)this + 39) = v363;
          goto LABEL_821;
        case 0x65u:
          *v8 |= 0x1000000000uLL;
          unint64_t v366 = *((void *)a2 + 1);
          unint64_t v367 = *((void *)a2 + 2);
          uint64_t v368 = *(void *)a2;
          if (v366 <= 0xFFFFFFFFFFFFFFF5 && v366 + 10 <= v367)
          {
            char v369 = 0;
            unsigned int v370 = 0;
            uint64_t v371 = 0;
            do
            {
              unint64_t v372 = v366 + 1;
              *((void *)a2 + 1) = v366 + 1;
              char v373 = *(unsigned char *)(v368 + v366);
              v371 |= (unint64_t)(v373 & 0x7F) << v369;
              if ((v373 & 0x80) == 0) {
                goto LABEL_820;
              }
              v369 += 7;
              unint64_t v366 = v372;
              BOOL v15 = v370++ > 8;
            }
            while (!v15);
LABEL_643:
            uint64_t v371 = 0;
            goto LABEL_820;
          }
          char v547 = 0;
          unsigned int v548 = 0;
          uint64_t v371 = 0;
          if (v367 <= v366) {
            unint64_t v367 = *((void *)a2 + 1);
          }
          break;
        case 0x66u:
          *v8 |= 0x2000000000uLL;
          unint64_t v374 = *((void *)a2 + 1);
          if (v374 <= 0xFFFFFFFFFFFFFFF7 && v374 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 38) = *(void *)(*(void *)a2 + v374);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_821;
        default:
          uint64_t result = PB::Reader::skip(a2, v12 >> 3, v12 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_821;
      }
      while (1)
      {
        if (v367 == v366)
        {
          uint64_t v371 = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_820;
        }
        unint64_t v549 = v366 + 1;
        char v550 = *(unsigned char *)(v368 + v366);
        *((void *)a2 + 1) = v549;
        v371 |= (unint64_t)(v550 & 0x7F) << v547;
        if ((v550 & 0x80) == 0) {
          break;
        }
        v547 += 7;
        unint64_t v366 = v549;
        BOOL v15 = v548++ > 8;
        if (v15) {
          goto LABEL_643;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        uint64_t v371 = 0;
      }
LABEL_820:
      *((void *)this + 37) = v371;
LABEL_821:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v12 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(unsigned char *)(v9 + v2);
      *((void *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v12 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = (uint64_t *)(this + 364);
  uint64_t v5 = *(void *)(this + 364);
  if ((v5 & 0x40000000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 248), 1u);
    uint64_t v5 = *v4;
    if ((*v4 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }
  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 256), 2u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 160), 0x15u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 168), 0x16u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 176), 0x2Cu);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 320), 0x2Du);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 344), 0x2Eu);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 328), 0x2Fu);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 336), 0x30u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 352), 0x31u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 360), 0x32u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 200), 0x33u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 224), 0x34u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 208), 0x35u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 216), 0x36u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 184), 0x37u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 192), 0x38u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 48), 0x3Bu);
  uint64_t v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0x3Cu);
  uint64_t v5 = *v4;
  if ((*v4 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0x3Du);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v5 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 56), 0x3Eu);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_23:
    if ((v5 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 72), 0x3Fu);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v5 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 0x40u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v5 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 80), 0x41u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_26:
    if ((v5 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 88), 0x42u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 96), 0x43u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v5 & 2) == 0) {
      goto LABEL_29;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 120), 0x44u);
  uint64_t v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0x45u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 128), 0x46u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 288), 0x47u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 280), 0x48u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 272), 0x49u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 264), 0x4Au);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 240), 0x51u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 232), 0x52u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_37:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 112), 0x53u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_38:
    if ((v5 & 4) == 0) {
      goto LABEL_39;
    }
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 136), 0x54u);
  uint64_t v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_39:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0x55u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_40:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 152), 0x56u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_41:
    if ((v5 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 144), 0x57u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 64), 0x58u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_43:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 104), 0x59u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_45;
    }
LABEL_90:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 296), 0x65u);
    if ((*v4 & 0x2000000000) == 0) {
      return this;
    }
    goto LABEL_91;
  }
LABEL_89:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 312), 0x64u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000000) != 0) {
    goto LABEL_90;
  }
LABEL_45:
  if ((v5 & 0x2000000000) == 0) {
    return this;
  }
LABEL_91:
  double v6 = *(double *)(v3 + 304);

  return PB::Writer::write(a2, v6, 0x66u);
}

BOOL CMMsl::FallDetectionReplay::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 364);
  uint64_t v3 = *(void *)(a2 + 364);
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(void *)(a1 + 248) != *(void *)(a2 + 248)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(void *)(a1 + 256) != *(void *)(a2 + 256)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(void *)(a1 + 160) != *(void *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(void *)(a1 + 168) != *(void *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(void *)(a1 + 176) != *(void *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(void *)(a1 + 320) != *(void *)(a2 + 320)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(void *)(a1 + 344) != *(void *)(a2 + 344)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(void *)(a1 + 328) != *(void *)(a2 + 328)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(void *)(a1 + 336) != *(void *)(a2 + 336)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(void *)(a1 + 352) != *(void *)(a2 + 352)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(_DWORD *)(a1 + 360) != *(_DWORD *)(a2 + 360)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(void *)(a1 + 200) != *(void *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(void *)(a1 + 224) != *(void *)(a2 + 224)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(void *)(a1 + 208) != *(void *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(void *)(a1 + 216) != *(void *)(a2 + 216)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(void *)(a1 + 184) != *(void *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(void *)(a1 + 192) != *(void *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(void *)(a1 + 72) != *(void *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(void *)(a1 + 80) != *(void *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(void *)(a1 + 88) != *(void *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(void *)(a1 + 96) != *(void *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(void *)(a1 + 120) != *(void *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(void *)(a1 + 128) != *(void *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(void *)(a1 + 288) != *(void *)(a2 + 288)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(void *)(a1 + 280) != *(void *)(a2 + 280)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(void *)(a1 + 272) != *(void *)(a2 + 272)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(void *)(a1 + 264) != *(void *)(a2 + 264)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(void *)(a1 + 240) != *(void *)(a2 + 240)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(void *)(a1 + 232) != *(void *)(a2 + 232)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(void *)(a1 + 112) != *(void *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(void *)(a1 + 136) != *(void *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(void *)(a1 + 152) != *(void *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(void *)(a1 + 144) != *(void *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(void *)(a1 + 104) != *(void *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(void *)(a1 + 312) != *(void *)(a2 + 312)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(void *)(a1 + 296) != *(void *)(a2 + 296)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x2000000000) == 0;
  if ((v2 & 0x2000000000) != 0) {
    return (v3 & 0x2000000000) != 0 && *(double *)(a1 + 304) == *(double *)(a2 + 304);
  }
  return v4;
}

uint64_t CMMsl::FallDetectionReplay::hash_value(CMMsl::FallDetectionReplay *this)
{
  uint64_t v1 = *(void *)((char *)this + 364);
  if ((v1 & 0x40000000) != 0)
  {
    uint64_t v2 = *((void *)this + 31);
    if ((v1 & 0x80000000) != 0)
    {
LABEL_3:
      uint64_t v47 = *((void *)this + 32);
      if ((v1 & 0x80000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_51;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v47 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_4:
    uint64_t v46 = *((void *)this + 20);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v46 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_5:
    uint64_t v45 = *((void *)this + 21);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v45 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_6:
    uint64_t v44 = *((void *)this + 22);
    if ((v1 & 0x8000000000) != 0) {
      goto LABEL_7;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v44 = 0;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_7:
    uint64_t v43 = *((void *)this + 40);
    if ((v1 & 0x40000000000) != 0) {
      goto LABEL_8;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v43 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_8:
    uint64_t v42 = *((void *)this + 43);
    if ((v1 & 0x10000000000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v42 = 0;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_9:
    uint64_t v41 = *((void *)this + 41);
    if ((v1 & 0x20000000000) != 0) {
      goto LABEL_10;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v41 = 0;
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_10:
    uint64_t v40 = *((void *)this + 42);
    if ((v1 & 0x80000000000) != 0) {
      goto LABEL_11;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v40 = 0;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_11:
    uint64_t v39 = *((void *)this + 44);
    if ((v1 & 0x100000000000) != 0) {
      goto LABEL_12;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v39 = 0;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_12:
    uint64_t v38 = *((unsigned int *)this + 90);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_13;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v38 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_13:
    uint64_t v37 = *((void *)this + 25);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t v37 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_14:
    uint64_t v36 = *((void *)this + 28);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_15;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v36 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_15:
    uint64_t v35 = *((void *)this + 26);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v35 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_16:
    uint64_t v34 = *((void *)this + 27);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t v34 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_17:
    uint64_t v33 = *((void *)this + 23);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v33 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_18:
    uint64_t v32 = *((void *)this + 24);
    if ((v1 & 0x20) != 0) {
      goto LABEL_19;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v32 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_19:
    uint64_t v31 = *((void *)this + 6);
    if ((v1 & 8) != 0) {
      goto LABEL_20;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v31 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_20:
    uint64_t v30 = *((void *)this + 4);
    if (v1) {
      goto LABEL_21;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v30 = 0;
  if (v1)
  {
LABEL_21:
    uint64_t v3 = *((void *)this + 1);
    if ((v1 & 0x40) != 0) {
      goto LABEL_22;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v3 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_22:
    uint64_t v4 = *((void *)this + 7);
    if ((v1 & 0x100) != 0) {
      goto LABEL_23;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v4 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_23:
    uint64_t v5 = *((void *)this + 9);
    if ((v1 & 0x10) != 0) {
      goto LABEL_24;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t v5 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_24:
    uint64_t v6 = *((void *)this + 5);
    if ((v1 & 0x200) != 0) {
      goto LABEL_25;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v6 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_25:
    uint64_t v7 = *((void *)this + 10);
    if ((v1 & 0x400) != 0) {
      goto LABEL_26;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v7 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_26:
    uint64_t v8 = *((void *)this + 11);
    if ((v1 & 0x800) != 0) {
      goto LABEL_27;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v8 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_27:
    uint64_t v9 = *((void *)this + 12);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t v9 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_28:
    uint64_t v10 = *((void *)this + 15);
    if ((v1 & 2) != 0) {
      goto LABEL_29;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t v10 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_29:
    uint64_t v11 = *((void *)this + 2);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v11 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_30:
    uint64_t v12 = *((void *)this + 16);
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t v12 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_31:
    uint64_t v13 = *((void *)this + 36);
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t v13 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_32:
    uint64_t v14 = *((void *)this + 35);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t v14 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_33:
    uint64_t v15 = *((void *)this + 34);
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_34;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v15 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_34:
    uint64_t v16 = *((void *)this + 33);
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v16 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_35:
    uint64_t v17 = *((void *)this + 30);
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_36;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v17 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_36:
    uint64_t v18 = *((void *)this + 29);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_37;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v18 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_37:
    uint64_t v19 = *((void *)this + 14);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t v19 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_38:
    uint64_t v20 = *((void *)this + 17);
    if ((v1 & 4) != 0) {
      goto LABEL_39;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t v20 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_39:
    uint64_t v21 = *((void *)this + 3);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v21 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_40:
    uint64_t v22 = *((void *)this + 19);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t v22 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_41:
    uint64_t v23 = *((void *)this + 18);
    if ((v1 & 0x80) != 0) {
      goto LABEL_42;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t v23 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_42:
    uint64_t v24 = *((void *)this + 8);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v24 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_43:
    uint64_t v25 = *((void *)this + 13);
    if ((v1 & 0x4000000000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v25 = 0;
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_44:
    uint64_t v26 = *((void *)this + 39);
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_45;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t v26 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_45:
    uint64_t v27 = *((void *)this + 37);
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_46;
    }
LABEL_93:
    double v28 = 0.0;
    return v47 ^ v2 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v32 ^ v31 ^ v30 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(void *)&v28;
  }
LABEL_92:
  uint64_t v27 = 0;
  if ((v1 & 0x2000000000) == 0) {
    goto LABEL_93;
  }
LABEL_46:
  double v28 = *((double *)this + 38);
  if (v28 == 0.0) {
    double v28 = 0.0;
  }
  return v47 ^ v2 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v32 ^ v31 ^ v30 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(void *)&v28;
}

void *CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(void *this)
{
  *this = off_1003A5980;
  *(void *)((char *)this + 156) = 0;
  return this;
}

{
  *this = off_1003A5980;
  *(void *)((char *)this + 156) = 0;
  return this;
}

void CMMsl::FallDetectionStateMachine::~FallDetectionStateMachine(CMMsl::FallDetectionStateMachine *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(CMMsl::FallDetectionStateMachine *this, const CMMsl::FallDetectionStateMachine *a2)
{
  *(void *)this = off_1003A5980;
  *(void *)((char *)this + 156) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    uint64_t v3 = 4;
    *(void *)((char *)this + 156) = 4;
    *((double *)this + 3) = result;
    uint64_t v2 = *(void *)((char *)a2 + 156);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 4);
    v3 |= 8uLL;
    *(void *)((char *)this + 156) = v3;
    *((void *)this + 4) = v5;
    uint64_t v2 = *(void *)((char *)a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2uLL;
    *(void *)((char *)this + 156) = v3;
    *((void *)this + 2) = v6;
    uint64_t v2 = *(void *)((char *)a2 + 156);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_43;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 16);
  v3 |= 0x400uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 16) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *((_DWORD *)a2 + 15);
  v3 |= 0x200uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 15) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x100uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v7 = *((_DWORD *)a2 + 17);
  v3 |= 0x800uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 17) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v8 = *((_DWORD *)a2 + 37);
  v3 |= 0x80000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 37) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v9 = *((_DWORD *)a2 + 18);
  v3 |= 0x1000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 18) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(result) = *((_DWORD *)a2 + 34);
  v3 |= 0x10000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 34) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(result) = *((_DWORD *)a2 + 35);
  v3 |= 0x20000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 35) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(result) = *((_DWORD *)a2 + 33);
  v3 |= 0x8000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 33) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v10 = *((_DWORD *)a2 + 24);
  v3 |= 0x40000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 24) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(result) = *((_DWORD *)a2 + 20);
  v3 |= 0x4000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 20) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v11 = *((_DWORD *)a2 + 11);
  v3 |= 0x20uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 11) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }
LABEL_54:
  char v12 = *((unsigned char *)a2 + 154);
  v3 |= 0x400000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 154) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }
LABEL_55:
  char v13 = *((unsigned char *)a2 + 153);
  v3 |= 0x200000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 153) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v14 = *((_DWORD *)a2 + 13);
  v3 |= 0x80uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 13) = v14;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v15 = *((_DWORD *)a2 + 36);
  v3 |= 0x40000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 36) = v15;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v16 = *((_DWORD *)a2 + 31);
  v3 |= 0x2000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 31) = v16;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
LABEL_59:
  char v17 = *((unsigned char *)a2 + 155);
  v3 |= 0x800000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 155) = v17;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v18 = *((unsigned char *)a2 + 152);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)((char *)this + 156) = v3;
  *((unsigned char *)this + 152) = v18;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v19 = *((_DWORD *)a2 + 23);
  v3 |= 0x20000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 23) = v19;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v20 = *((_DWORD *)a2 + 27);
  v3 |= 0x200000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 27) = v20;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_29:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v21 = *((_DWORD *)a2 + 28);
  v3 |= 0x400000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 28) = v21;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v22 = *((_DWORD *)a2 + 25);
  v3 |= 0x80000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 25) = v22;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_66;
  }
LABEL_65:
  int v23 = *((_DWORD *)a2 + 21);
  v3 |= 0x8000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 21) = v23;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_32:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(result) = *((_DWORD *)a2 + 29);
  v3 |= 0x800000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 29) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v24 = *((_DWORD *)a2 + 26);
  v3 |= 0x100000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 26) = v24;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(result) = *((_DWORD *)a2 + 32);
  v3 |= 0x4000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 32) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x10) == 0) {
      goto LABEL_36;
    }
    goto LABEL_70;
  }
LABEL_69:
  int v25 = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 30) = v25;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_36:
    if ((v2 & 0x40) == 0) {
      goto LABEL_37;
    }
    goto LABEL_71;
  }
LABEL_70:
  int v26 = *((_DWORD *)a2 + 10);
  v3 |= 0x10uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 10) = v26;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x40) == 0)
  {
LABEL_37:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_72;
  }
LABEL_71:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v3 |= 0x40uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 12) = LODWORD(result);
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_38:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_73;
  }
LABEL_72:
  int v27 = *((_DWORD *)a2 + 22);
  v3 |= 0x10000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 22) = v27;
  uint64_t v2 = *(void *)((char *)a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_39:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_74:
    double result = *((double *)a2 + 1);
    *(void *)((char *)this + 156) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_73:
  int v28 = *((_DWORD *)a2 + 19);
  v3 |= 0x2000uLL;
  *(void *)((char *)this + 156) = v3;
  *((_DWORD *)this + 19) = v28;
  if (*(void *)((unsigned char *)a2 + 156)) {
    goto LABEL_74;
  }
  return result;
}

CMMsl *CMMsl::FallDetectionStateMachine::operator=(CMMsl *a1, const CMMsl::FallDetectionStateMachine *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallDetectionStateMachine::FallDetectionStateMachine((CMMsl::FallDetectionStateMachine *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionStateMachine *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionStateMachine *a2, CMMsl::FallDetectionStateMachine *a3)
{
  uint64_t v3 = *(void *)((char *)this + 156);
  *(void *)((char *)this + 156) = *(void *)((char *)a2 + 156);
  *(void *)((char *)a2 + 156) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v6) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  LODWORD(v6) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  LODWORD(v4) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v4;
  LODWORD(v6) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v6;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 154);
  *((unsigned char *)this + 154) = *((unsigned char *)a2 + 154);
  *((unsigned char *)a2 + 154) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 153);
  *((unsigned char *)this + 153) = *((unsigned char *)a2 + 153);
  *((unsigned char *)a2 + 153) = v6;
  LODWORD(v6) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  LODWORD(v6) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v6;
  LODWORD(v6) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 155);
  *((unsigned char *)this + 155) = *((unsigned char *)a2 + 155);
  *((unsigned char *)a2 + 155) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 152);
  *((unsigned char *)this + 152) = *((unsigned char *)a2 + 152);
  *((unsigned char *)a2 + 152) = v6;
  LODWORD(v6) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v6;
  LODWORD(v6) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  LODWORD(v6) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v6;
  LODWORD(v6) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v6;
  LODWORD(v6) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v6) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v6;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v6) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v6) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5980;
  *(void *)(a1 + 156) = *(void *)(a2 + 156);
  *(void *)(a2 + 156) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::FallDetectionStateMachine::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionStateMachine::FallDetectionStateMachine((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionStateMachine *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionStateMachine::formatText(CMMsl::FallDetectionStateMachine *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "conisderedSOS", *((_DWORD *)this + 10));
    uint64_t v5 = *(void *)((char *)this + 156);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x100000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaSteps", *((_DWORD *)this + 11));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "didCancelSOS", *((unsigned char *)this + 152));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "distanceTraveled", *((float *)this + 12));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "fallAlertUndelayedTimestamp", *((double *)this + 1));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "fallTime", *((void *)this + 2));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "fromState", *((_DWORD *)this + 13));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "gyroMaxMean", *((float *)this + 14));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 3));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "isActive", *((unsigned char *)this + 153));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "isStand", *((unsigned char *)this + 154));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "magnitudeDiffUnity", *((float *)this + 15));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "maxAccelStdAxis", *((float *)this + 16));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "maxNumQuiescentBins", *((_DWORD *)this + 17));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "maxNumStaticBins", *((_DWORD *)this + 18));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "nominalQuiescentThreshold", *((_DWORD *)this + 19));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "normalizedIQR", *((float *)this + 20));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "numActiveBins", *((_DWORD *)this + 21));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "numCyclingEpochs", *((_DWORD *)this + 22));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "numNonzeroStepEpochs", *((_DWORD *)this + 23));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "numPeaks", *((_DWORD *)this + 24));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "numQuiescentBins", *((_DWORD *)this + 25));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "numSharpPeaks", *((_DWORD *)this + 26));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "numStandBins", *((_DWORD *)this + 27));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "numStaticBins", *((_DWORD *)this + 28));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "onBodyFeature", *((float *)this + 29));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "operatingMode", *((_DWORD *)this + 30));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 8) == 0) {
      goto LABEL_30;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "quiescentThreshold", *((_DWORD *)this + 31));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 8) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 4));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "sentFallAlert", *((unsigned char *)this + 155));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "sharpPeaksDelaySpread", *((float *)this + 32));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "sumHighQPeaksInDecLowFreqFFT", *((float *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "sumHighQPeaksInHighFreqFFT", *((float *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "sumHighQPeaksInLowFreqFFT", *((float *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "toState", *((_DWORD *)this + 36));
  if ((*(void *)((unsigned char *)this + 156) & 0x80000000) != 0) {
LABEL_37:
  }
    PB::TextFormatter::format(a2, "totalNumStaticBins", *((_DWORD *)this + 37));
LABEL_38:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionStateMachine::readFrom(CMMsl::FallDetectionStateMachine *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)((char *)this + 156) |= 4uLL;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_209;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v20);
          goto LABEL_364;
        case 2u:
          *(void *)((char *)this + 156) |= 8uLL;
          unint64_t v22 = *((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
          uint64_t v24 = *(void *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v28 = v22 + 1;
              *((void *)a2 + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_368;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v14 = v26++ > 8;
            }
            while (!v14);
LABEL_221:
            uint64_t v27 = 0;
            goto LABEL_368;
          }
          char v211 = 0;
          unsigned int v212 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v23 == v22)
            {
              uint64_t v27 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v213 = v22 + 1;
              char v214 = *(unsigned char *)(v24 + v22);
              *((void *)a2 + 1) = v213;
              v27 |= (unint64_t)(v214 & 0x7F) << v211;
              if (v214 < 0)
              {
                v211 += 7;
                unint64_t v22 = v213;
                BOOL v14 = v212++ > 8;
                if (v14) {
                  goto LABEL_221;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v27 = 0;
              }
            }
            break;
          }
LABEL_368:
          *((void *)this + 4) = v27;
          goto LABEL_210;
        case 3u:
          *(void *)((char *)this + 156) |= 2uLL;
          unint64_t v30 = *((void *)a2 + 1);
          unint64_t v31 = *((void *)a2 + 2);
          uint64_t v32 = *(void *)a2;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v35 = 0;
            do
            {
              unint64_t v36 = v30 + 1;
              *((void *)a2 + 1) = v30 + 1;
              char v37 = *(unsigned char *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0) {
                goto LABEL_372;
              }
              v33 += 7;
              unint64_t v30 = v36;
              BOOL v14 = v34++ > 8;
            }
            while (!v14);
LABEL_228:
            uint64_t v35 = 0;
            goto LABEL_372;
          }
          char v215 = 0;
          unsigned int v216 = 0;
          uint64_t v35 = 0;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v31 == v30)
            {
              uint64_t v35 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v217 = v30 + 1;
              char v218 = *(unsigned char *)(v32 + v30);
              *((void *)a2 + 1) = v217;
              v35 |= (unint64_t)(v218 & 0x7F) << v215;
              if (v218 < 0)
              {
                v215 += 7;
                unint64_t v30 = v217;
                BOOL v14 = v216++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v35 = 0;
              }
            }
            break;
          }
LABEL_372:
          *((void *)this + 2) = v35;
          goto LABEL_210;
        case 4u:
          *(void *)((char *)this + 156) |= 0x400uLL;
          unint64_t v38 = *((void *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
            goto LABEL_209;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v38);
          goto LABEL_191;
        case 5u:
          *(void *)((char *)this + 156) |= 0x200uLL;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
            goto LABEL_209;
          }
          *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v39);
          goto LABEL_191;
        case 6u:
          *(void *)((char *)this + 156) |= 0x100uLL;
          unint64_t v40 = *((void *)a2 + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2)) {
            goto LABEL_209;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v40);
          goto LABEL_191;
        case 7u:
          *(void *)((char *)this + 156) |= 0x800uLL;
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          uint64_t v43 = *(void *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)a2 + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_376;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v14 = v45++ > 8;
            }
            while (!v14);
LABEL_235:
            LODWORD(v46) = 0;
            goto LABEL_376;
          }
          char v219 = 0;
          unsigned int v220 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v221 = v41 + 1;
              char v222 = *(unsigned char *)(v43 + v41);
              *((void *)a2 + 1) = v221;
              v46 |= (unint64_t)(v222 & 0x7F) << v219;
              if (v222 < 0)
              {
                v219 += 7;
                unint64_t v41 = v221;
                BOOL v14 = v220++ > 8;
                if (v14) {
                  goto LABEL_235;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v46) = 0;
              }
            }
            break;
          }
LABEL_376:
          *((_DWORD *)this + 17) = v46;
          goto LABEL_210;
        case 8u:
          *(void *)((char *)this + 156) |= 0x80000000uLL;
          unint64_t v49 = *((void *)a2 + 1);
          unint64_t v50 = *((void *)a2 + 2);
          uint64_t v51 = *(void *)a2;
          if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
          {
            char v52 = 0;
            unsigned int v53 = 0;
            uint64_t v54 = 0;
            do
            {
              unint64_t v55 = v49 + 1;
              *((void *)a2 + 1) = v49 + 1;
              char v56 = *(unsigned char *)(v51 + v49);
              v54 |= (unint64_t)(v56 & 0x7F) << v52;
              if ((v56 & 0x80) == 0) {
                goto LABEL_380;
              }
              v52 += 7;
              unint64_t v49 = v55;
              BOOL v14 = v53++ > 8;
            }
            while (!v14);
LABEL_242:
            LODWORD(v54) = 0;
            goto LABEL_380;
          }
          char v223 = 0;
          unsigned int v224 = 0;
          uint64_t v54 = 0;
          if (v50 <= v49) {
            unint64_t v50 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v50 == v49)
            {
              LODWORD(v54) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v225 = v49 + 1;
              char v226 = *(unsigned char *)(v51 + v49);
              *((void *)a2 + 1) = v225;
              v54 |= (unint64_t)(v226 & 0x7F) << v223;
              if (v226 < 0)
              {
                v223 += 7;
                unint64_t v49 = v225;
                BOOL v14 = v224++ > 8;
                if (v14) {
                  goto LABEL_242;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v54) = 0;
              }
            }
            break;
          }
LABEL_380:
          *((_DWORD *)this + 37) = v54;
          goto LABEL_210;
        case 9u:
          *(void *)((char *)this + 156) |= 0x1000uLL;
          unint64_t v57 = *((void *)a2 + 1);
          unint64_t v58 = *((void *)a2 + 2);
          uint64_t v59 = *(void *)a2;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            char v60 = 0;
            unsigned int v61 = 0;
            uint64_t v62 = 0;
            do
            {
              unint64_t v63 = v57 + 1;
              *((void *)a2 + 1) = v57 + 1;
              char v64 = *(unsigned char *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0) {
                goto LABEL_384;
              }
              v60 += 7;
              unint64_t v57 = v63;
              BOOL v14 = v61++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v62) = 0;
            goto LABEL_384;
          }
          char v227 = 0;
          unsigned int v228 = 0;
          uint64_t v62 = 0;
          if (v58 <= v57) {
            unint64_t v58 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v229 = v57 + 1;
              char v230 = *(unsigned char *)(v59 + v57);
              *((void *)a2 + 1) = v229;
              v62 |= (unint64_t)(v230 & 0x7F) << v227;
              if (v230 < 0)
              {
                v227 += 7;
                unint64_t v57 = v229;
                BOOL v14 = v228++ > 8;
                if (v14) {
                  goto LABEL_249;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v62) = 0;
              }
            }
            break;
          }
LABEL_384:
          *((_DWORD *)this + 18) = v62;
          goto LABEL_210;
        case 0xAu:
          *(void *)((char *)this + 156) |= 0x10000000uLL;
          unint64_t v65 = *((void *)a2 + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)a2 + 2)) {
            goto LABEL_209;
          }
          *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v65);
          goto LABEL_191;
        case 0xBu:
          *(void *)((char *)this + 156) |= 0x20000000uLL;
          unint64_t v66 = *((void *)a2 + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)a2 + 2)) {
            goto LABEL_209;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v66);
          goto LABEL_191;
        case 0xCu:
          *(void *)((char *)this + 156) |= 0x8000000uLL;
          unint64_t v67 = *((void *)a2 + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)a2 + 2)) {
            goto LABEL_209;
          }
          *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v67);
          goto LABEL_191;
        case 0xDu:
          *(void *)((char *)this + 156) |= 0x40000uLL;
          unint64_t v68 = *((void *)a2 + 1);
          unint64_t v69 = *((void *)a2 + 2);
          uint64_t v70 = *(void *)a2;
          if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
          {
            char v71 = 0;
            unsigned int v72 = 0;
            uint64_t v73 = 0;
            do
            {
              unint64_t v74 = v68 + 1;
              *((void *)a2 + 1) = v68 + 1;
              char v75 = *(unsigned char *)(v70 + v68);
              v73 |= (unint64_t)(v75 & 0x7F) << v71;
              if ((v75 & 0x80) == 0) {
                goto LABEL_388;
              }
              v71 += 7;
              unint64_t v68 = v74;
              BOOL v14 = v72++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v73) = 0;
            goto LABEL_388;
          }
          char v231 = 0;
          unsigned int v232 = 0;
          uint64_t v73 = 0;
          if (v69 <= v68) {
            unint64_t v69 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v69 == v68)
            {
              LODWORD(v73) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v233 = v68 + 1;
              char v234 = *(unsigned char *)(v70 + v68);
              *((void *)a2 + 1) = v233;
              v73 |= (unint64_t)(v234 & 0x7F) << v231;
              if (v234 < 0)
              {
                v231 += 7;
                unint64_t v68 = v233;
                BOOL v14 = v232++ > 8;
                if (v14) {
                  goto LABEL_256;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v73) = 0;
              }
            }
            break;
          }
LABEL_388:
          *((_DWORD *)this + 24) = v73;
          goto LABEL_210;
        case 0xEu:
          *(void *)((char *)this + 156) |= 0x4000uLL;
          unint64_t v76 = *((void *)a2 + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)a2 + 2)) {
            goto LABEL_209;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v76);
          goto LABEL_191;
        case 0xFu:
          *(void *)((char *)this + 156) |= 0x20uLL;
          unint64_t v77 = *((void *)a2 + 1);
          unint64_t v78 = *((void *)a2 + 2);
          uint64_t v79 = *(void *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)a2 + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_392;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v82) = 0;
            goto LABEL_392;
          }
          char v235 = 0;
          unsigned int v236 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v237 = v77 + 1;
              char v238 = *(unsigned char *)(v79 + v77);
              *((void *)a2 + 1) = v237;
              v82 |= (unint64_t)(v238 & 0x7F) << v235;
              if (v238 < 0)
              {
                v235 += 7;
                unint64_t v77 = v237;
                BOOL v14 = v236++ > 8;
                if (v14) {
                  goto LABEL_263;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v82) = 0;
              }
            }
            break;
          }
LABEL_392:
          *((_DWORD *)this + 11) = v82;
          goto LABEL_210;
        case 0x10u:
          *(void *)((char *)this + 156) |= 0x400000000uLL;
          unint64_t v85 = *((void *)a2 + 1);
          if (v85 >= *((void *)a2 + 2))
          {
            BOOL v88 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v86 = v85 + 1;
            int v87 = *(unsigned __int8 *)(*(void *)a2 + v85);
            *((void *)a2 + 1) = v86;
            BOOL v88 = v87 != 0;
          }
          *((unsigned char *)this + 154) = v88;
          goto LABEL_210;
        case 0x11u:
          *(void *)((char *)this + 156) |= 0x200000000uLL;
          unint64_t v89 = *((void *)a2 + 1);
          if (v89 >= *((void *)a2 + 2))
          {
            BOOL v92 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v90 = v89 + 1;
            int v91 = *(unsigned __int8 *)(*(void *)a2 + v89);
            *((void *)a2 + 1) = v90;
            BOOL v92 = v91 != 0;
          }
          *((unsigned char *)this + 153) = v92;
          goto LABEL_210;
        case 0x12u:
          *(void *)((char *)this + 156) |= 0x80uLL;
          unint64_t v93 = *((void *)a2 + 1);
          unint64_t v94 = *((void *)a2 + 2);
          uint64_t v95 = *(void *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)a2 + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_396;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }
            while (!v14);
LABEL_274:
            LODWORD(v98) = 0;
            goto LABEL_396;
          }
          char v239 = 0;
          unsigned int v240 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v241 = v93 + 1;
              char v242 = *(unsigned char *)(v95 + v93);
              *((void *)a2 + 1) = v241;
              v98 |= (unint64_t)(v242 & 0x7F) << v239;
              if (v242 < 0)
              {
                v239 += 7;
                unint64_t v93 = v241;
                BOOL v14 = v240++ > 8;
                if (v14) {
                  goto LABEL_274;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v98) = 0;
              }
            }
            break;
          }
LABEL_396:
          *((_DWORD *)this + 13) = v98;
          goto LABEL_210;
        case 0x13u:
          *(void *)((char *)this + 156) |= 0x40000000uLL;
          unint64_t v101 = *((void *)a2 + 1);
          unint64_t v102 = *((void *)a2 + 2);
          uint64_t v103 = *(void *)a2;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)a2 + 1) = v101 + 1;
              char v108 = *(unsigned char *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_400;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v14 = v105++ > 8;
            }
            while (!v14);
LABEL_281:
            LODWORD(v106) = 0;
            goto LABEL_400;
          }
          char v243 = 0;
          unsigned int v244 = 0;
          uint64_t v106 = 0;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v245 = v101 + 1;
              char v246 = *(unsigned char *)(v103 + v101);
              *((void *)a2 + 1) = v245;
              v106 |= (unint64_t)(v246 & 0x7F) << v243;
              if (v246 < 0)
              {
                v243 += 7;
                unint64_t v101 = v245;
                BOOL v14 = v244++ > 8;
                if (v14) {
                  goto LABEL_281;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v106) = 0;
              }
            }
            break;
          }
LABEL_400:
          *((_DWORD *)this + 36) = v106;
          goto LABEL_210;
        case 0x14u:
          *(void *)((char *)this + 156) |= 0x2000000uLL;
          unint64_t v109 = *((void *)a2 + 1);
          unint64_t v110 = *((void *)a2 + 2);
          uint64_t v111 = *(void *)a2;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)a2 + 1) = v109 + 1;
              char v116 = *(unsigned char *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_404;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }
            while (!v14);
LABEL_288:
            LODWORD(v114) = 0;
            goto LABEL_404;
          }
          char v247 = 0;
          unsigned int v248 = 0;
          uint64_t v114 = 0;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v249 = v109 + 1;
              char v250 = *(unsigned char *)(v111 + v109);
              *((void *)a2 + 1) = v249;
              v114 |= (unint64_t)(v250 & 0x7F) << v247;
              if (v250 < 0)
              {
                v247 += 7;
                unint64_t v109 = v249;
                BOOL v14 = v248++ > 8;
                if (v14) {
                  goto LABEL_288;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v114) = 0;
              }
            }
            break;
          }
LABEL_404:
          *((_DWORD *)this + 31) = v114;
          goto LABEL_210;
        case 0x15u:
          *(void *)((char *)this + 156) |= 0x800000000uLL;
          unint64_t v117 = *((void *)a2 + 1);
          if (v117 >= *((void *)a2 + 2))
          {
            BOOL v120 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v118 = v117 + 1;
            int v119 = *(unsigned __int8 *)(*(void *)a2 + v117);
            *((void *)a2 + 1) = v118;
            BOOL v120 = v119 != 0;
          }
          *((unsigned char *)this + 155) = v120;
          goto LABEL_210;
        case 0x16u:
          *(void *)((char *)this + 156) |= (unint64_t)&_mh_execute_header;
          unint64_t v121 = *((void *)a2 + 1);
          if (v121 >= *((void *)a2 + 2))
          {
            BOOL v124 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v122 = v121 + 1;
            int v123 = *(unsigned __int8 *)(*(void *)a2 + v121);
            *((void *)a2 + 1) = v122;
            BOOL v124 = v123 != 0;
          }
          *((unsigned char *)this + 152) = v124;
          goto LABEL_210;
        case 0x17u:
          *(void *)((char *)this + 156) |= 0x20000uLL;
          unint64_t v125 = *((void *)a2 + 1);
          unint64_t v126 = *((void *)a2 + 2);
          uint64_t v127 = *(void *)a2;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)a2 + 1) = v125 + 1;
              char v132 = *(unsigned char *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_408;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }
            while (!v14);
LABEL_299:
            LODWORD(v130) = 0;
            goto LABEL_408;
          }
          char v251 = 0;
          unsigned int v252 = 0;
          uint64_t v130 = 0;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v253 = v125 + 1;
              char v254 = *(unsigned char *)(v127 + v125);
              *((void *)a2 + 1) = v253;
              v130 |= (unint64_t)(v254 & 0x7F) << v251;
              if (v254 < 0)
              {
                v251 += 7;
                unint64_t v125 = v253;
                BOOL v14 = v252++ > 8;
                if (v14) {
                  goto LABEL_299;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v130) = 0;
              }
            }
            break;
          }
LABEL_408:
          *((_DWORD *)this + 23) = v130;
          goto LABEL_210;
        case 0x18u:
          *(void *)((char *)this + 156) |= 0x200000uLL;
          unint64_t v133 = *((void *)a2 + 1);
          unint64_t v134 = *((void *)a2 + 2);
          uint64_t v135 = *(void *)a2;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)a2 + 1) = v133 + 1;
              char v140 = *(unsigned char *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_412;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }
            while (!v14);
LABEL_306:
            LODWORD(v138) = 0;
            goto LABEL_412;
          }
          char v255 = 0;
          unsigned int v256 = 0;
          uint64_t v138 = 0;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v257 = v133 + 1;
              char v258 = *(unsigned char *)(v135 + v133);
              *((void *)a2 + 1) = v257;
              v138 |= (unint64_t)(v258 & 0x7F) << v255;
              if (v258 < 0)
              {
                v255 += 7;
                unint64_t v133 = v257;
                BOOL v14 = v256++ > 8;
                if (v14) {
                  goto LABEL_306;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v138) = 0;
              }
            }
            break;
          }
LABEL_412:
          *((_DWORD *)this + 27) = v138;
          goto LABEL_210;
        case 0x19u:
          *(void *)((char *)this + 156) |= 0x400000uLL;
          unint64_t v141 = *((void *)a2 + 1);
          unint64_t v142 = *((void *)a2 + 2);
          uint64_t v143 = *(void *)a2;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            char v144 = 0;
            unsigned int v145 = 0;
            uint64_t v146 = 0;
            do
            {
              unint64_t v147 = v141 + 1;
              *((void *)a2 + 1) = v141 + 1;
              char v148 = *(unsigned char *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0) {
                goto LABEL_416;
              }
              v144 += 7;
              unint64_t v141 = v147;
              BOOL v14 = v145++ > 8;
            }
            while (!v14);
LABEL_313:
            LODWORD(v146) = 0;
            goto LABEL_416;
          }
          char v259 = 0;
          unsigned int v260 = 0;
          uint64_t v146 = 0;
          if (v142 <= v141) {
            unint64_t v142 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v261 = v141 + 1;
              char v262 = *(unsigned char *)(v143 + v141);
              *((void *)a2 + 1) = v261;
              v146 |= (unint64_t)(v262 & 0x7F) << v259;
              if (v262 < 0)
              {
                v259 += 7;
                unint64_t v141 = v261;
                BOOL v14 = v260++ > 8;
                if (v14) {
                  goto LABEL_313;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v146) = 0;
              }
            }
            break;
          }
LABEL_416:
          *((_DWORD *)this + 28) = v146;
          goto LABEL_210;
        case 0x1Au:
          *(void *)((char *)this + 156) |= 0x80000uLL;
          unint64_t v149 = *((void *)a2 + 1);
          unint64_t v150 = *((void *)a2 + 2);
          uint64_t v151 = *(void *)a2;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)a2 + 1) = v149 + 1;
              char v156 = *(unsigned char *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_420;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v14 = v153++ > 8;
            }
            while (!v14);
LABEL_320:
            LODWORD(v154) = 0;
            goto LABEL_420;
          }
          char v263 = 0;
          unsigned int v264 = 0;
          uint64_t v154 = 0;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v265 = v149 + 1;
              char v266 = *(unsigned char *)(v151 + v149);
              *((void *)a2 + 1) = v265;
              v154 |= (unint64_t)(v266 & 0x7F) << v263;
              if (v266 < 0)
              {
                v263 += 7;
                unint64_t v149 = v265;
                BOOL v14 = v264++ > 8;
                if (v14) {
                  goto LABEL_320;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v154) = 0;
              }
            }
            break;
          }
LABEL_420:
          *((_DWORD *)this + 25) = v154;
          goto LABEL_210;
        case 0x1Bu:
          *(void *)((char *)this + 156) |= 0x8000uLL;
          unint64_t v157 = *((void *)a2 + 1);
          unint64_t v158 = *((void *)a2 + 2);
          uint64_t v159 = *(void *)a2;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            char v160 = 0;
            unsigned int v161 = 0;
            uint64_t v162 = 0;
            do
            {
              unint64_t v163 = v157 + 1;
              *((void *)a2 + 1) = v157 + 1;
              char v164 = *(unsigned char *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0) {
                goto LABEL_424;
              }
              v160 += 7;
              unint64_t v157 = v163;
              BOOL v14 = v161++ > 8;
            }
            while (!v14);
LABEL_327:
            LODWORD(v162) = 0;
            goto LABEL_424;
          }
          char v267 = 0;
          unsigned int v268 = 0;
          uint64_t v162 = 0;
          if (v158 <= v157) {
            unint64_t v158 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v269 = v157 + 1;
              char v270 = *(unsigned char *)(v159 + v157);
              *((void *)a2 + 1) = v269;
              v162 |= (unint64_t)(v270 & 0x7F) << v267;
              if (v270 < 0)
              {
                v267 += 7;
                unint64_t v157 = v269;
                BOOL v14 = v268++ > 8;
                if (v14) {
                  goto LABEL_327;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v162) = 0;
              }
            }
            break;
          }
LABEL_424:
          *((_DWORD *)this + 21) = v162;
          goto LABEL_210;
        case 0x1Cu:
          *(void *)((char *)this + 156) |= 0x800000uLL;
          unint64_t v165 = *((void *)a2 + 1);
          if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((void *)a2 + 2)) {
            goto LABEL_209;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v165);
          goto LABEL_191;
        case 0x1Du:
          *(void *)((char *)this + 156) |= 0x100000uLL;
          unint64_t v166 = *((void *)a2 + 1);
          unint64_t v167 = *((void *)a2 + 2);
          uint64_t v168 = *(void *)a2;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            char v169 = 0;
            unsigned int v170 = 0;
            uint64_t v171 = 0;
            do
            {
              unint64_t v172 = v166 + 1;
              *((void *)a2 + 1) = v166 + 1;
              char v173 = *(unsigned char *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0) {
                goto LABEL_428;
              }
              v169 += 7;
              unint64_t v166 = v172;
              BOOL v14 = v170++ > 8;
            }
            while (!v14);
LABEL_334:
            LODWORD(v171) = 0;
            goto LABEL_428;
          }
          char v271 = 0;
          unsigned int v272 = 0;
          uint64_t v171 = 0;
          if (v167 <= v166) {
            unint64_t v167 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v167 == v166)
            {
              LODWORD(v171) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v273 = v166 + 1;
              char v274 = *(unsigned char *)(v168 + v166);
              *((void *)a2 + 1) = v273;
              v171 |= (unint64_t)(v274 & 0x7F) << v271;
              if (v274 < 0)
              {
                v271 += 7;
                unint64_t v166 = v273;
                BOOL v14 = v272++ > 8;
                if (v14) {
                  goto LABEL_334;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v171) = 0;
              }
            }
            break;
          }
LABEL_428:
          *((_DWORD *)this + 26) = v171;
          goto LABEL_210;
        case 0x1Eu:
          *(void *)((char *)this + 156) |= 0x4000000uLL;
          unint64_t v174 = *((void *)a2 + 1);
          if (v174 > 0xFFFFFFFFFFFFFFFBLL || v174 + 4 > *((void *)a2 + 2)) {
            goto LABEL_209;
          }
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v174);
          goto LABEL_191;
        case 0x1Fu:
          *(void *)((char *)this + 156) |= 0x1000000uLL;
          unint64_t v175 = *((void *)a2 + 1);
          unint64_t v176 = *((void *)a2 + 2);
          uint64_t v177 = *(void *)a2;
          if (v175 <= 0xFFFFFFFFFFFFFFF5 && v175 + 10 <= v176)
          {
            char v178 = 0;
            unsigned int v179 = 0;
            uint64_t v180 = 0;
            do
            {
              unint64_t v181 = v175 + 1;
              *((void *)a2 + 1) = v175 + 1;
              char v182 = *(unsigned char *)(v177 + v175);
              v180 |= (unint64_t)(v182 & 0x7F) << v178;
              if ((v182 & 0x80) == 0) {
                goto LABEL_432;
              }
              v178 += 7;
              unint64_t v175 = v181;
              BOOL v14 = v179++ > 8;
            }
            while (!v14);
LABEL_341:
            LODWORD(v180) = 0;
            goto LABEL_432;
          }
          char v275 = 0;
          unsigned int v276 = 0;
          uint64_t v180 = 0;
          if (v176 <= v175) {
            unint64_t v176 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v176 == v175)
            {
              LODWORD(v180) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v277 = v175 + 1;
              char v278 = *(unsigned char *)(v177 + v175);
              *((void *)a2 + 1) = v277;
              v180 |= (unint64_t)(v278 & 0x7F) << v275;
              if (v278 < 0)
              {
                v275 += 7;
                unint64_t v175 = v277;
                BOOL v14 = v276++ > 8;
                if (v14) {
                  goto LABEL_341;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v180) = 0;
              }
            }
            break;
          }
LABEL_432:
          *((_DWORD *)this + 30) = v180;
          goto LABEL_210;
        case 0x20u:
          *(void *)((char *)this + 156) |= 0x10uLL;
          unint64_t v183 = *((void *)a2 + 1);
          unint64_t v184 = *((void *)a2 + 2);
          uint64_t v185 = *(void *)a2;
          if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
          {
            char v186 = 0;
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            do
            {
              unint64_t v189 = v183 + 1;
              *((void *)a2 + 1) = v183 + 1;
              char v190 = *(unsigned char *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0) {
                goto LABEL_436;
              }
              v186 += 7;
              unint64_t v183 = v189;
              BOOL v14 = v187++ > 8;
            }
            while (!v14);
LABEL_348:
            LODWORD(v188) = 0;
            goto LABEL_436;
          }
          char v279 = 0;
          unsigned int v280 = 0;
          uint64_t v188 = 0;
          if (v184 <= v183) {
            unint64_t v184 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v184 == v183)
            {
              LODWORD(v188) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v281 = v183 + 1;
              char v282 = *(unsigned char *)(v185 + v183);
              *((void *)a2 + 1) = v281;
              v188 |= (unint64_t)(v282 & 0x7F) << v279;
              if (v282 < 0)
              {
                v279 += 7;
                unint64_t v183 = v281;
                BOOL v14 = v280++ > 8;
                if (v14) {
                  goto LABEL_348;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v188) = 0;
              }
            }
            break;
          }
LABEL_436:
          *((_DWORD *)this + 10) = v188;
          goto LABEL_210;
        case 0x21u:
          *(void *)((char *)this + 156) |= 0x40uLL;
          unint64_t v191 = *((void *)a2 + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((void *)a2 + 2)) {
            goto LABEL_209;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v191);
LABEL_191:
          uint64_t v192 = *((void *)a2 + 1) + 4;
          goto LABEL_192;
        case 0x22u:
          *(void *)((char *)this + 156) |= 0x10000uLL;
          unint64_t v193 = *((void *)a2 + 1);
          unint64_t v194 = *((void *)a2 + 2);
          uint64_t v195 = *(void *)a2;
          if (v193 <= 0xFFFFFFFFFFFFFFF5 && v193 + 10 <= v194)
          {
            char v196 = 0;
            unsigned int v197 = 0;
            uint64_t v198 = 0;
            do
            {
              unint64_t v199 = v193 + 1;
              *((void *)a2 + 1) = v193 + 1;
              char v200 = *(unsigned char *)(v195 + v193);
              v198 |= (unint64_t)(v200 & 0x7F) << v196;
              if ((v200 & 0x80) == 0) {
                goto LABEL_440;
              }
              v196 += 7;
              unint64_t v193 = v199;
              BOOL v14 = v197++ > 8;
            }
            while (!v14);
LABEL_355:
            LODWORD(v198) = 0;
            goto LABEL_440;
          }
          char v283 = 0;
          unsigned int v284 = 0;
          uint64_t v198 = 0;
          if (v194 <= v193) {
            unint64_t v194 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v194 == v193)
            {
              LODWORD(v198) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v285 = v193 + 1;
              char v286 = *(unsigned char *)(v195 + v193);
              *((void *)a2 + 1) = v285;
              v198 |= (unint64_t)(v286 & 0x7F) << v283;
              if (v286 < 0)
              {
                v283 += 7;
                unint64_t v193 = v285;
                BOOL v14 = v284++ > 8;
                if (v14) {
                  goto LABEL_355;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v198) = 0;
              }
            }
            break;
          }
LABEL_440:
          *((_DWORD *)this + 22) = v198;
          goto LABEL_210;
        case 0x23u:
          *(void *)((char *)this + 156) |= 0x2000uLL;
          unint64_t v201 = *((void *)a2 + 1);
          unint64_t v202 = *((void *)a2 + 2);
          uint64_t v203 = *(void *)a2;
          if (v201 <= 0xFFFFFFFFFFFFFFF5 && v201 + 10 <= v202)
          {
            char v204 = 0;
            unsigned int v205 = 0;
            uint64_t v206 = 0;
            do
            {
              unint64_t v207 = v201 + 1;
              *((void *)a2 + 1) = v201 + 1;
              char v208 = *(unsigned char *)(v203 + v201);
              v206 |= (unint64_t)(v208 & 0x7F) << v204;
              if ((v208 & 0x80) == 0) {
                goto LABEL_444;
              }
              v204 += 7;
              unint64_t v201 = v207;
              BOOL v14 = v205++ > 8;
            }
            while (!v14);
LABEL_362:
            LODWORD(v206) = 0;
            goto LABEL_444;
          }
          char v287 = 0;
          unsigned int v288 = 0;
          uint64_t v206 = 0;
          if (v202 <= v201) {
            unint64_t v202 = *((void *)a2 + 1);
          }
          break;
        case 0x24u:
          *(void *)((char *)this + 156) |= 1uLL;
          unint64_t v209 = *((void *)a2 + 1);
          if (v209 <= 0xFFFFFFFFFFFFFFF7 && v209 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 1) = *(void *)(*(void *)a2 + v209);
LABEL_364:
            uint64_t v192 = *((void *)a2 + 1) + 8;
LABEL_192:
            *((void *)a2 + 1) = v192;
          }
          else
          {
LABEL_209:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_210;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_210;
      }
      while (1)
      {
        if (v202 == v201)
        {
          LODWORD(v206) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_444;
        }
        unint64_t v289 = v201 + 1;
        char v290 = *(unsigned char *)(v203 + v201);
        *((void *)a2 + 1) = v289;
        v206 |= (unint64_t)(v290 & 0x7F) << v287;
        if ((v290 & 0x80) == 0) {
          break;
        }
        v287 += 7;
        unint64_t v201 = v289;
        BOOL v14 = v288++ > 8;
        if (v14) {
          goto LABEL_362;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v206) = 0;
      }
LABEL_444:
      *((_DWORD *)this + 19) = v206;
LABEL_210:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}