void sub_100003E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_100003F24(id a1, NSError *a2)
{
  v2 = a2;
  if (v2)
  {
    if (qword_1003DB810 != -1) {
      dispatch_once(&qword_1003DB810, &stru_100399180);
    }
    uint64_t v3 = qword_1003DB818;
    if (os_log_type_enabled((os_log_t)qword_1003DB818, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      v9 = v2;
      v4 = "Failed to add Feedback Assistant notification request,error,%@";
      v5 = v3;
      uint32_t v6 = 12;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&v8, v6);
    }
  }
  else
  {
    if (qword_1003DB810 != -1) {
      dispatch_once(&qword_1003DB810, &stru_100399180);
    }
    uint64_t v7 = qword_1003DB818;
    if (os_log_type_enabled((os_log_t)qword_1003DB818, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      v4 = "Successfully added Feedback Assistant notification request";
      v5 = v7;
      uint32_t v6 = 2;
      goto LABEL_10;
    }
  }
}

void sub_100004058(id a1)
{
  qword_1003DB818 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "FeedbackAssistant");

  _objc_release_x1();
}

uint64_t sub_100005810(uint64_t result)
{
  *(void *)result = &off_1003991B0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_10000583C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_100005874(uint64_t result, uint64_t a2)
{
  *(void *)result = &off_1003991B0;
  *(_DWORD *)(result + 52) = 0;
  char v2 = *(unsigned char *)(a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 44);
    char v3 = 32;
    *(unsigned char *)(result + 52) = 32;
    *(_DWORD *)(result + 44) = v4;
    char v2 = *(unsigned char *)(a2 + 52);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 52) & 0x40) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 48);
    v3 |= 0x40u;
    *(unsigned char *)(result + 52) = v3;
    *(_DWORD *)(result + 48) = v5;
    char v2 = *(unsigned char *)(a2 + 52);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 40);
    v3 |= 0x10u;
    *(unsigned char *)(result + 52) = v3;
    *(_DWORD *)(result + 40) = v6;
    char v2 = *(unsigned char *)(a2 + 52);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(unsigned char *)(result + 52) = v3;
  *(void *)(result + 32) = v7;
  char v2 = *(unsigned char *)(a2 + 52);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v8 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(unsigned char *)(result + 52) = v3;
  *(void *)(result + 8) = v8;
  char v2 = *(unsigned char *)(a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_16:
    uint64_t v10 = *(void *)(a2 + 16);
    *(unsigned char *)(result + 52) = v3 | 2;
    *(void *)(result + 16) = v10;
    return result;
  }
LABEL_15:
  uint64_t v9 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(unsigned char *)(result + 52) = v3;
  *(void *)(result + 24) = v9;
  if ((*(unsigned char *)(a2 + 52) & 2) != 0) {
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_100005964(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100005874((uint64_t)v7, a2);
    long long v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v10 = v3;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t sub_1000059D4(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 52);
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v2;
  int v3 = *(_DWORD *)(result + 44);
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v3;
  int v4 = *(_DWORD *)(result + 48);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = v4;
  int v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  uint64_t v6 = *(void *)(result + 32);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v6;
  uint64_t v7 = *(void *)(result + 8);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v7;
  uint64_t v8 = *(void *)(result + 24);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v8;
  uint64_t v9 = *(void *)(result + 16);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v9;
  return result;
}

uint64_t sub_100005A58(uint64_t result, uint64_t a2)
{
  *(void *)result = &off_1003991B0;
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  return result;
}

uint64_t sub_100005ABC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v9 = &off_1003991B0;
    long long v3 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 52) = 0;
    long long v4 = *(_OWORD *)(a1 + 40);
    long long v11 = *(_OWORD *)(a1 + 24);
    long long v12 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 8) = v6;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t sub_100005B48(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 52);
  if (v5)
  {
    PB::TextFormatter::format(this, "createdAtTimestamp", *(void *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 52);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 52) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochNumber", *(_DWORD *)(a1 + 40));
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "epochTimestamp", *(void *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "lastRealTriggerTimestamp", *(void *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "mode", *(_DWORD *)(a1 + 44));
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "receivedAtTimestamp", *(void *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 52) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "sessionNumber", *(_DWORD *)(a1 + 48));
LABEL_9:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_100005C6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          unint64_t v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 2u:
              *(unsigned char *)(a1 + 52) |= 0x20u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v64 = 0;
                unsigned int v65 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  unint64_t v66 = v21++;
                  char v67 = *(unsigned char *)(v22 + v66);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v67 & 0x7F) << v64;
                  if ((v67 & 0x80) == 0) {
                    break;
                  }
                  v64 += 7;
                  BOOL v14 = v65++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_134;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
LABEL_134:
                unint64_t v3 = v66 + 1;
              }
              else
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                do
                {
                  unint64_t v3 = v21 + 1;
                  *((void *)this + 1) = v21 + 1;
                  char v26 = *(unsigned char *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0) {
                    goto LABEL_135;
                  }
                  v23 += 7;
                  unint64_t v21 = v3;
                  BOOL v14 = v24++ > 8;
                }
                while (!v14);
                LODWORD(v25) = 0;
              }
LABEL_135:
              *(_DWORD *)(a1 + 44) = v25;
              goto LABEL_166;
            case 3u:
              *(unsigned char *)(a1 + 52) |= 0x40u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v72 = 0;
                unsigned int v73 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  unint64_t v74 = v33++;
                  char v75 = *(unsigned char *)(v34 + v74);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v75 & 0x7F) << v72;
                  if ((v75 & 0x80) == 0) {
                    break;
                  }
                  v72 += 7;
                  BOOL v14 = v73++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_144:
                    unint64_t v3 = v74 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_144;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v3 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v35 += 7;
                unint64_t v33 = v3;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 48) = v37;
              goto LABEL_166;
            case 4u:
              *(unsigned char *)(a1 + 52) |= 0x10u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v76 = 0;
                unsigned int v77 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  unint64_t v78 = v39++;
                  char v79 = *(unsigned char *)(v40 + v78);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v79 & 0x7F) << v76;
                  if ((v79 & 0x80) == 0) {
                    break;
                  }
                  v76 += 7;
                  BOOL v14 = v77++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_149:
                    unint64_t v3 = v78 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_149;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v3 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v41 += 7;
                unint64_t v39 = v3;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_166;
            case 5u:
              *(unsigned char *)(a1 + 52) |= 8u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v80 = 0;
                unsigned int v81 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v45)
                  {
                    uint64_t v49 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_155;
                  }
                  unint64_t v82 = v45++;
                  char v83 = *(unsigned char *)(v46 + v82);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v83 & 0x7F) << v80;
                  if ((v83 & 0x80) == 0) {
                    break;
                  }
                  v80 += 7;
                  BOOL v14 = v81++ > 8;
                  if (v14)
                  {
                    uint64_t v49 = 0;
LABEL_154:
                    unint64_t v3 = v82 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v49 = 0;
                }
                goto LABEL_154;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v3 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_155;
                }
                v47 += 7;
                unint64_t v45 = v3;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              uint64_t v49 = 0;
LABEL_155:
              *(void *)(a1 + 32) = v49;
              goto LABEL_166;
            case 6u:
              *(unsigned char *)(a1 + 52) |= 1u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v84 = 0;
                unsigned int v85 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v51)
                  {
                    uint64_t v55 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_160;
                  }
                  unint64_t v86 = v51++;
                  char v87 = *(unsigned char *)(v52 + v86);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v87 & 0x7F) << v84;
                  if ((v87 & 0x80) == 0) {
                    break;
                  }
                  v84 += 7;
                  BOOL v14 = v85++ > 8;
                  if (v14)
                  {
                    uint64_t v55 = 0;
LABEL_159:
                    unint64_t v3 = v86 + 1;
                    goto LABEL_160;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v55 = 0;
                }
                goto LABEL_159;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v3 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_160;
                }
                v53 += 7;
                unint64_t v51 = v3;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              uint64_t v55 = 0;
LABEL_160:
              *(void *)(a1 + 8) = v55;
              goto LABEL_166;
            default:
              if (v20 == 100)
              {
                *(unsigned char *)(a1 + 52) |= 4u;
                unint64_t v57 = *((void *)this + 1);
                unint64_t v2 = *((void *)this + 2);
                uint64_t v58 = *(void *)this;
                if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
                {
                  char v88 = 0;
                  unsigned int v89 = 0;
                  uint64_t v61 = 0;
                  if (v2 <= v57) {
                    unint64_t v3 = *((void *)this + 1);
                  }
                  else {
                    unint64_t v3 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v3 == v57)
                    {
                      uint64_t v61 = 0;
                      *((unsigned char *)this + 24) = 1;
                      goto LABEL_165;
                    }
                    unint64_t v90 = v57++;
                    char v91 = *(unsigned char *)(v58 + v90);
                    *((void *)this + 1) = v57;
                    v61 |= (unint64_t)(v91 & 0x7F) << v88;
                    if ((v91 & 0x80) == 0) {
                      break;
                    }
                    v88 += 7;
                    BOOL v14 = v89++ > 8;
                    if (v14)
                    {
                      uint64_t v61 = 0;
                      goto LABEL_164;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    uint64_t v61 = 0;
                  }
LABEL_164:
                  unint64_t v3 = v90 + 1;
                }
                else
                {
                  char v59 = 0;
                  unsigned int v60 = 0;
                  uint64_t v61 = 0;
                  while (1)
                  {
                    unint64_t v3 = v57 + 1;
                    *((void *)this + 1) = v57 + 1;
                    char v62 = *(unsigned char *)(v58 + v57);
                    v61 |= (unint64_t)(v62 & 0x7F) << v59;
                    if ((v62 & 0x80) == 0) {
                      break;
                    }
                    v59 += 7;
                    unint64_t v57 = v3;
                    BOOL v14 = v60++ > 8;
                    if (v14)
                    {
                      uint64_t v61 = 0;
                      break;
                    }
                  }
                }
LABEL_165:
                *(void *)(a1 + 24) = v61;
              }
              else if (v20 == 101)
              {
                *(unsigned char *)(a1 + 52) |= 2u;
                unint64_t v27 = *((void *)this + 1);
                unint64_t v2 = *((void *)this + 2);
                uint64_t v28 = *(void *)this;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  char v68 = 0;
                  unsigned int v69 = 0;
                  uint64_t v31 = 0;
                  if (v2 <= v27) {
                    unint64_t v3 = *((void *)this + 1);
                  }
                  else {
                    unint64_t v3 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v3 == v27)
                    {
                      uint64_t v31 = 0;
                      *((unsigned char *)this + 24) = 1;
                      goto LABEL_140;
                    }
                    unint64_t v70 = v27++;
                    char v71 = *(unsigned char *)(v28 + v70);
                    *((void *)this + 1) = v27;
                    v31 |= (unint64_t)(v71 & 0x7F) << v68;
                    if ((v71 & 0x80) == 0) {
                      break;
                    }
                    v68 += 7;
                    BOOL v14 = v69++ > 8;
                    if (v14)
                    {
                      uint64_t v31 = 0;
                      goto LABEL_139;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    uint64_t v31 = 0;
                  }
LABEL_139:
                  unint64_t v3 = v70 + 1;
                }
                else
                {
                  char v29 = 0;
                  unsigned int v30 = 0;
                  uint64_t v31 = 0;
                  while (1)
                  {
                    unint64_t v3 = v27 + 1;
                    *((void *)this + 1) = v27 + 1;
                    char v32 = *(unsigned char *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0) {
                      break;
                    }
                    v29 += 7;
                    unint64_t v27 = v3;
                    BOOL v14 = v30++ > 8;
                    if (v14)
                    {
                      uint64_t v31 = 0;
                      break;
                    }
                  }
                }
LABEL_140:
                *(void *)(a1 + 16) = v31;
              }
              else
              {
                uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
                if (!result) {
                  return result;
                }
                unint64_t v3 = *((void *)this + 1);
                unint64_t v2 = *((void *)this + 2);
              }
LABEL_166:
              int v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_100006474(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 52);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 44), 2u);
    char v4 = *(unsigned char *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 52) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 3u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 4u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 5u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x64u);
    if ((*(unsigned char *)(v3 + 52) & 2) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 6u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_15:
  unint64_t v5 = *(void *)(v3 + 16);

  return PB::Writer::writeVarInt(this, v5, 0x65u);
}

BOOL sub_100006570(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 52) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 0x20) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 0x40) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 0x40) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 52))
  {
    if ((*(unsigned char *)(a2 + 52) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 52))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 52) & 2) == 0;
  if ((*(unsigned char *)(a1 + 52) & 2) != 0) {
    return (*(unsigned char *)(a2 + 52) & 2) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  return v2;
}

uint64_t sub_10000666C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 52) & 0x20) != 0)
  {
    uint64_t v1 = *(unsigned int *)(a1 + 44);
    if ((*(unsigned char *)(a1 + 52) & 0x40) != 0)
    {
LABEL_3:
      uint64_t v2 = *(unsigned int *)(a1 + 48);
      if ((*(unsigned char *)(a1 + 52) & 0x10) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*(unsigned char *)(a1 + 52) & 0x40) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*(unsigned char *)(a1 + 52) & 0x10) != 0)
  {
LABEL_4:
    uint64_t v3 = *(unsigned int *)(a1 + 40);
    if ((*(unsigned char *)(a1 + 52) & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v3 = 0;
  if ((*(unsigned char *)(a1 + 52) & 8) != 0)
  {
LABEL_5:
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(unsigned char *)(a1 + 52)) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v4 = 0;
  if (*(unsigned char *)(a1 + 52))
  {
LABEL_6:
    uint64_t v5 = *(void *)(a1 + 8);
    if ((*(unsigned char *)(a1 + 52) & 4) != 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t v6 = 0;
    if ((*(unsigned char *)(a1 + 52) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_15:
    uint64_t v7 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
  }
LABEL_13:
  uint64_t v5 = 0;
  if ((*(unsigned char *)(a1 + 52) & 4) == 0) {
    goto LABEL_14;
  }
LABEL_7:
  uint64_t v6 = *(void *)(a1 + 24);
  if ((*(unsigned char *)(a1 + 52) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v7 = *(void *)(a1 + 16);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
}

uint64_t sub_1000066FC(uint64_t a1)
{
  *(void *)a1 = off_10039C308;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v2 = (char *)sub_100007BC0((void *)(a1 + 48), "none");
  *(void *)a1 = &off_100399200;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 84) = 0;
  *(void *)(a1 + 100) = 0;
  *(void *)(a1 + 92) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  if (*(char *)(a1 + 71) < 0)
  {
    *(void *)(a1 + 56) = 6;
    uint64_t v2 = *(char **)(a1 + 48);
  }
  else
  {
    *(unsigned char *)(a1 + 71) = 6;
  }
  strcpy(v2, "de-TLS");
  *(_DWORD *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_1000067E0(uint64_t a1, uint64_t a2, const char *a3)
{
  return CLKappaDeescalator::raiseUnless(*(unsigned __int8 *)(a1 + 160), (BOOL)"[de-TLS] missing config", a3);
}

__n128 sub_1000067F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (__n128 *)(a1 + 108);
  __n128 result = *(__n128 *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  if (*(unsigned char *)(a1 + 160))
  {
    *(unsigned char *)(a1 + 156) = *(unsigned char *)(a2 + 48);
    *(_OWORD *)(a1 + 124) = v4;
    *(_OWORD *)(a1 + 140) = v5;
    __n128 *v2 = result;
  }
  else
  {
    *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 124) = v4;
    *(_OWORD *)(a1 + 140) = v5;
    __n128 *v2 = result;
    *(unsigned char *)(a1 + 160) = 1;
  }
  return result;
}

void sub_10000683C(uint64_t a1)
{
  id v33 = +[CSPersistentConfiguration configBaseKey:"DeescalatorTLSConfig" forFeatureMode:*(unsigned __int8 *)(a1 + 32)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned __int8 v32 = [v2 BOOLThreshold:&unk_100337B48 forKey:v33];
  unsigned __int8 v31 = [v2 BOOLThreshold:&unk_100337B58 forKey:v33];
  unsigned __int8 v30 = [v2 BOOLThreshold:&unk_100337B68 forKey:v33];
  unsigned __int8 v29 = [v2 BOOLThreshold:&unk_100337B78 forKey:v33];
  unsigned __int8 v3 = [v2 BOOLThreshold:&unk_100337B88 forKey:v33];
  [v2 floatThreshold:&unk_100337B98 forKey:v33];
  int v5 = v4;
  [v2 floatThreshold:&unk_100337BA8 forKey:v33];
  int v7 = v6;
  [v2 floatThreshold:&unk_100337BB8 forKey:v33];
  int v9 = v8;
  [v2 floatThreshold:&unk_100337BC8 forKey:v33];
  int v11 = v10;
  [v2 floatThreshold:&unk_100337BD8 forKey:v33];
  int v13 = v12;
  [v2 floatThreshold:&unk_100337BE8 forKey:v33];
  float v15 = v14;
  [v2 floatThreshold:&unk_100337BF8 forKey:v33];
  int v17 = v16;
  unsigned __int8 v18 = [v2 BOOLThreshold:&unk_100337C08 forKey:v33];
  unsigned __int8 v19 = [v2 BOOLThreshold:&unk_100337C18 forKey:v33];
  unsigned __int8 v20 = [v2 BOOLThreshold:&unk_100337C28 forKey:v33];
  unsigned __int8 v21 = [v2 BOOLThreshold:&unk_100337C38 forKey:v33];
  unsigned __int8 v22 = [v2 BOOLThreshold:&unk_100337C48 forKey:v33];
  unsigned __int8 v23 = [v2 BOOLThreshold:&unk_100337C58 forKey:v33];
  unsigned __int8 v24 = [v2 BOOLThreshold:&unk_100337C68 forKey:v33];
  [v2 floatThreshold:&unk_100337C78 forKey:v33];
  int v26 = v25;
  unsigned __int8 v27 = [v2 BOOLThreshold:&unk_100337C88 forKey:v33];
  int v28 = *(unsigned __int8 *)(a1 + 160);
  *(unsigned char *)(a1 + 108) = v32;
  *(unsigned char *)(a1 + 109) = v31;
  *(unsigned char *)(a1 + 110) = v30;
  *(unsigned char *)(a1 + 111) = v29;
  *(unsigned char *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 116) = v5;
  *(_DWORD *)(a1 + 120) = v7;
  *(_DWORD *)(a1 + 124) = v9;
  *(_DWORD *)(a1 + 128) = v11;
  *(_DWORD *)(a1 + 132) = v13;
  *(_DWORD *)(a1 + 136) = (int)v15;
  *(_DWORD *)(a1 + 140) = v17;
  *(unsigned char *)(a1 + 144) = v18;
  *(unsigned char *)(a1 + 145) = v19;
  *(unsigned char *)(a1 + 146) = v20;
  *(unsigned char *)(a1 + 147) = v21;
  *(unsigned char *)(a1 + 148) = v22;
  *(unsigned char *)(a1 + 149) = v23;
  *(unsigned char *)(a1 + 150) = v24;
  if (!v28) {
    *(unsigned char *)(a1 + 160) = 1;
  }
  *(_DWORD *)(a1 + 152) = v26;
  *(unsigned char *)(a1 + 156) = v27;
  *(unsigned char *)(a1 + 80) = CLKappaDeescalator::shouldForce((CLKappaDeescalator *)a1, "TurnOffTwoLevelSense");
  *(unsigned char *)(a1 + 40) = CLKappaDeescalator::shouldForceNoop((CLKappaDeescalator *)a1, "ForceTwoLevel");
  *(_DWORD *)(a1 + 36) = CLKappaDeescalator::shouldForceDeescalate((CLKappaDeescalator *)a1, "ForceTwoLevel");
}

void sub_100006B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_100006BA8(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 160)) {
    sub_100007D1C();
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_100399280);
  }
  int v4 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 24);
    int v6 = *(unsigned __int8 *)(a1 + 32);
    int v7 = *(unsigned __int8 *)(a1 + 108);
    int v8 = *(unsigned __int8 *)(a1 + 109);
    int v9 = *(unsigned __int8 *)(a1 + 110);
    int v10 = *(unsigned __int8 *)(a1 + 111);
    int v11 = *(unsigned __int8 *)(a1 + 112);
    double v12 = *(float *)(a1 + 116);
    double v13 = *(float *)(a1 + 120);
    double v14 = *(float *)(a1 + 124);
    double v15 = *(float *)(a1 + 128);
    double v16 = *(float *)(a1 + 132);
    int v17 = *(_DWORD *)(a1 + 136);
    double v18 = *(float *)(a1 + 140);
    int v19 = *(unsigned __int8 *)(a1 + 144);
    int v20 = *(unsigned __int8 *)(a1 + 145);
    int v21 = *(unsigned __int8 *)(a1 + 146);
    int v22 = *(unsigned __int8 *)(a1 + 147);
    int v23 = *(unsigned __int8 *)(a1 + 148);
    int v24 = *(unsigned __int8 *)(a1 + 149);
    int v25 = *(unsigned __int8 *)(a1 + 150);
    double v26 = *(float *)(a1 + 152);
    int v27 = *(unsigned __int8 *)(a1 + 156);
    int v28 = 134354944;
    uint64_t v29 = a2;
    __int16 v30 = 1026;
    int v31 = v5;
    __int16 v32 = 1026;
    int v33 = v6;
    __int16 v34 = 1026;
    int v35 = v7;
    __int16 v36 = 1026;
    int v37 = v8;
    __int16 v38 = 1026;
    int v39 = v9;
    __int16 v40 = 1026;
    int v41 = v10;
    __int16 v42 = 1026;
    int v43 = v11;
    __int16 v44 = 2050;
    double v45 = v12;
    __int16 v46 = 2050;
    double v47 = v13;
    __int16 v48 = 2050;
    double v49 = v14;
    __int16 v50 = 2050;
    double v51 = v15;
    __int16 v52 = 2050;
    double v53 = v16;
    __int16 v54 = 1026;
    int v55 = v17;
    __int16 v56 = 2050;
    double v57 = v18;
    __int16 v58 = 1026;
    int v59 = v19;
    __int16 v60 = 1026;
    int v61 = v20;
    __int16 v62 = 1026;
    int v63 = v21;
    __int16 v64 = 1026;
    int v65 = v22;
    __int16 v66 = 1026;
    int v67 = v23;
    __int16 v68 = 1026;
    int v69 = v24;
    __int16 v70 = 1026;
    int v71 = v25;
    __int16 v72 = 2050;
    double v73 = v26;
    __int16 v74 = 1026;
    int v75 = v27;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[de-TLS] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,config-1,%{public}d,config-2,%{public}d,config-3,%{public}d,config-4,%{public}d,config-5,%{public}d,config-6,%{public}f,config-7,%{public}f,config-8,%{public}f,config-9,%{public}f,config-10,%{public}f,config-11,%{public}d,config-12,%{public}f,config-13,%{public}d,config-14,%{public}d,config-15,%{public}d,config-16,%{public}d,config-17,%{public}d,config-18,%{public}d,config-19,%{public}d,config-20,%{public}f,config-21,%{public}d", (uint8_t *)&v28, 0xB2u);
  }
}

uint64_t sub_100006DBC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 72) = a2;
  return result;
}

uint64_t sub_100006DC4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 73) = a2;
  return result;
}

uint64_t sub_100006DCC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 76) = a2;
  return result;
}

uint64_t sub_100006DD4(unsigned char *a1)
{
  if (!a1[160]) {
    sub_100007D1C();
  }
  uint64_t v1 = a1[111] && a1[74];
  if (a1[108] && a1[75]) {
    v1 |= 2uLL;
  }
  if (a1[110] && a1[77]) {
    v1 |= 4uLL;
  }
  if (a1[76])
  {
    v1 |= 0x80uLL;
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_100399280);
    }
    uint64_t v2 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[de-TLS] force high sensitivity", v4, 2u);
    }
  }
  return v1;
}

BOOL sub_100006EC4(unsigned char *a1)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_100399280);
  }
  uint64_t v2 = (id)qword_1003DB6A8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 67240192;
    v4[1] = sub_100006DD4(a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[de-TLS] proxyForCar bitmap %{public}d", (uint8_t *)v4, 8u);
  }

  return sub_100006DD4(a1) != 0;
}

void sub_100006FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100006FC4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80)) {
    return 6;
  }
  if (*(unsigned char *)(a1 + 79) && !*(unsigned char *)(a1 + 74))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_100399280);
    }
    int v11 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v12) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[de-TLS] De-escalating due to road distance", (uint8_t *)&v12, 2u);
    }
    *(_DWORD *)(a1 + 104) = 2;
    return 4;
  }
  else if (*(unsigned char *)(a1 + 73) && (sub_100006EC4((unsigned char *)a1) || *(unsigned char *)(a1 + 73) && *(unsigned char *)(a1 + 72)))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_100399280);
    }
    unsigned __int8 v3 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(unsigned __int8 *)(a1 + 73);
      BOOL v5 = sub_100006EC4((unsigned char *)a1);
      int v6 = *(unsigned __int8 *)(a1 + 72);
      int v12 = 67240704;
      int v13 = v4;
      __int16 v14 = 1026;
      BOOL v15 = v5;
      __int16 v16 = 1026;
      int v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[de-TLS] two-level escalation min/max cand %{public}d proxy %{public}d ls %{public}d", (uint8_t *)&v12, 0x14u);
    }

    return 5;
  }
  else
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_100399280);
    }
    int v7 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(unsigned __int8 *)(a1 + 73);
      BOOL v9 = sub_100006EC4((unsigned char *)a1);
      int v10 = *(unsigned __int8 *)(a1 + 72);
      int v12 = 67240704;
      int v13 = v8;
      __int16 v14 = 1026;
      BOOL v15 = v9;
      __int16 v16 = 1026;
      int v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[de-TLS] two-level no info min/max cand %{public}d proxy %{public}d ls %{public}d", (uint8_t *)&v12, 0x14u);
    }

    return 0;
  }
}

void sub_100007228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_100007244(uint64_t a1)
{
  uint64_t v2 = +[CSPersistentConfiguration configBaseKey:"ForceTwoLevelReason" forFeatureMode:*(unsigned __int8 *)(a1 + 32)];
  unsigned __int8 v3 = +[CSPersistentConfiguration sharedConfiguration];
  unint64_t v4 = (unint64_t)[v3 getIntegerDefault:v2];

  if ((v4 & 0xFF00000000) == 0 || v4 == 0)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 104);
  }
  else if ((v4 - 1) >= 2)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_100399280);
    }
    int v6 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      v8[0] = 67109120;
      v8[1] = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[de-TLS] rejecting invalid reason %d", (uint8_t *)v8, 8u);
    }
    unint64_t v4 = 0;
  }

  return v4;
}

void sub_100007384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000073A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80)) {
    return 6;
  }
  if (*(unsigned char *)(a1 + 73) && (sub_100006EC4((unsigned char *)a1) || *(unsigned char *)(a1 + 73) && *(unsigned char *)(a1 + 72)))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_100399280);
    }
    unsigned __int8 v3 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(unsigned __int8 *)(a1 + 73);
      BOOL v5 = sub_100006EC4((unsigned char *)a1);
      int v6 = *(unsigned __int8 *)(a1 + 72);
      int v11 = 67240704;
      int v12 = v4;
      __int16 v13 = 1026;
      BOOL v14 = v5;
      __int16 v15 = 1026;
      int v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[de-TLS] two-level escalation at boundary cand %{public}d proxy %{public}d ls %{public}d", (uint8_t *)&v11, 0x14u);
    }

    return 5;
  }
  else
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_100399280);
    }
    int v7 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(unsigned __int8 *)(a1 + 73);
      BOOL v9 = sub_100006EC4((unsigned char *)a1);
      int v10 = *(unsigned __int8 *)(a1 + 72);
      int v11 = 67240704;
      int v12 = v8;
      __int16 v13 = 1026;
      BOOL v14 = v9;
      __int16 v15 = 1026;
      int v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[de-TLS] two-level de-escalation at boundary cand %{public}d proxy %{public}d ls %{public}d", (uint8_t *)&v11, 0x14u);
    }

    *(_DWORD *)(a1 + 104) = 1;
    return 4;
  }
}

void sub_10000758C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000075A8(uint64_t a1, float16x4_t *a2)
{
  if (!*(unsigned char *)(a1 + 160)) {
    sub_100007D1C();
  }
  if (a2[3].i8[4] == 1)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_100399280);
    }
    int v4 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v22) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[de-TLS] got bt hint, probably in car", (uint8_t *)&v22, 2u);
    }
    *(unsigned char *)(a1 + 74) = 1;
  }
  *(void *)(a1 + 84) = vcvtq_f32_f16(a2[5]).u64[0];
  _H0 = a2[5].i16[2];
  __asm { FCVT            S0, H0 }
  *(_DWORD *)(a1 + 92) = _S0;
  *(void *)(a1 + 96) = (unint64_t)((double)(unint64_t)(*(void *)&a2[1] - *(void *)&a2[4]) / 1000000.0);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_100399280);
  }
  int v11 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v12 = *(float *)(a1 + 84);
    double v13 = *(float *)(a1 + 116);
    double v14 = *(float *)(a1 + 88);
    double v15 = *(float *)(a1 + 120);
    double v16 = *(float *)(a1 + 92);
    double v17 = *(float *)(a1 + 124);
    uint64_t v18 = *(void *)(a1 + 96);
    double v19 = *(float *)(a1 + 128);
    int v22 = 134350848;
    double v23 = v12;
    __int16 v24 = 2050;
    double v25 = v13;
    __int16 v26 = 2050;
    double v27 = v14;
    __int16 v28 = 2050;
    double v29 = v15;
    __int16 v30 = 2050;
    double v31 = v16;
    __int16 v32 = 2050;
    double v33 = v17;
    __int16 v34 = 2050;
    uint64_t v35 = v18;
    __int16 v36 = 2050;
    double v37 = v19;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[de-TLS] imu confidence (%{public}f, %{public}f) (%{public}f, %{public}f) (%{public}f, %{public}f) (%{public}llu, %{public}f)", (uint8_t *)&v22, 0x52u);
  }
  if (*(void *)(a1 + 96) <= (unint64_t)*(float *)(a1 + 128))
  {
    if (*(float *)(a1 + 84) > *(float *)(a1 + 116)
      || *(float *)(a1 + 88) > *(float *)(a1 + 120)
      || *(float *)(a1 + 92) > *(float *)(a1 + 124))
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_100399280);
      }
      int v21 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v22) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "[de-TLS] imu cond passed", (uint8_t *)&v22, 2u);
      }
      *(unsigned char *)(a1 + 75) = 1;
    }
  }
  else
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_100399280);
    }
    int v20 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v22) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "[de-TLS] imu coef too old", (uint8_t *)&v22, 2u);
    }
  }
}

void sub_1000078BC(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 160)) {
    sub_100007D1C();
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_100399280);
  }
  int v4 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 156);
    int v6 = *(unsigned __int8 *)(a2 + 16);
    double v7 = *(double *)(a2 + 8);
    double v8 = *(float *)(a1 + 140);
    v12[0] = 67241216;
    v12[1] = v5;
    __int16 v13 = 1026;
    int v14 = v6;
    __int16 v15 = 2050;
    double v16 = v7;
    __int16 v17 = 2050;
    double v18 = v8;
    __int16 v19 = 1026;
    BOOL v20 = v7 < v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[de-TLS] ignoreUnknownRoads %{public}d roadClass %{public}d distance to road %{public}f under %{public}f passed %{public}d", (uint8_t *)v12, 0x28u);
  }
  if (*(unsigned char *)(a1 + 156) && *(unsigned char *)(a2 + 16) == 9)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_100399280);
    }
    BOOL v9 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v12[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[de-TLS] roadClass UNKNOWN_ROAD. Ignoring per configuration.", (uint8_t *)v12, 2u);
    }
  }
  else
  {
    double v10 = *(double *)(a2 + 8);
    if (v10 < *(float *)(a1 + 140)) {
      *(unsigned char *)(a1 + 77) = 1;
    }
    if (*(unsigned char *)(a1 + 149))
    {
      if (*(unsigned char *)(a1 + 150))
      {
        if (!sub_100007B10()) {
          return;
        }
        double v10 = *(double *)(a2 + 8);
      }
      if (v10 > *(float *)(a1 + 152))
      {
        if (qword_1003DB6A0 != -1) {
          dispatch_once(&qword_1003DB6A0, &stru_100399280);
        }
        int v11 = qword_1003DB6A8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v12[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[de-TLS] Road Distance de-escalation condition met", (uint8_t *)v12, 2u);
        }
        *(unsigned char *)(a1 + 79) = 1;
      }
    }
  }
}

id sub_100007B10()
{
  v0 = +[CSMapDataQuality sharedInstance];
  id v1 = [v0 turnByTurnDirectionsEnabled];

  return v1;
}

void sub_100007B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100007B64(void **a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

uint64_t sub_100007BA4()
{
  return 6;
}

uint64_t sub_100007BAC()
{
  return 6;
}

uint64_t sub_100007BB4()
{
  return 6;
}

void *sub_100007BC0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_100007C74();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_100007C74()
{
}

void sub_100007C8C(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100007CE8(exception, a1);
}

void sub_100007CD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100007CE8(std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_100007D1C()
{
  exception = __cxa_allocate_exception(8uLL);
}

void sub_100007D68(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

uint64_t sub_100007DAC(uint64_t result)
{
  *(void *)__n128 result = &off_1003992B0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_100007DD4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_100007E0C(uint64_t result, uint64_t a2)
{
  *(void *)__n128 result = &off_1003992B0;
  *(_DWORD *)(result + 12) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_100007E48(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &off_1003992B0;
    int v3 = *(unsigned char *)(a2 + 12) & 1;
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sub_100007EBC(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v3;
  return result;
}

uint64_t sub_100007EE0(uint64_t result, uint64_t a2)
{
  *(void *)__n128 result = &off_1003992B0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_100007F14(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &off_1003992B0;
    uint64_t v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sub_100007F84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "nop", *(_DWORD *)(a1 + 8));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_100007FE4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10000821C(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  }
  return result;
}

BOOL sub_10000823C(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_100008278(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 12)) {
    return *(int *)(a1 + 8);
  }
  else {
    return 0;
  }
}

void sub_1000082FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100008384(id a1)
{
  qword_1003DD610 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CSInjectionServiceSilo"];

  _objc_release_x1();
}

void sub_1000084EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000859C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000889C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000088CC()
{
  if (qword_1003DB730 != -1) {
    dispatch_once(&qword_1003DB730, &stru_100399318);
  }
  v0 = (void *)qword_1003DB738;

  return v0;
}

void sub_100008964(id a1)
{
  qword_1003DB738 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "InjectionService");

  _objc_release_x1();
}

void sub_1000089A8(uint64_t a1)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_100399F30);
  }
  unint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 24);
    int v5 = *(unsigned __int16 *)(a1 + 32);
    int v6 = *(unsigned __int16 *)(a1 + 34);
    double v7 = *(float *)(a1 + 48);
    double v8 = *(float *)(a1 + 40);
    double v9 = *(float *)(a1 + 44);
    double v10 = *(float *)(a1 + 52);
    double v11 = *(float *)(a1 + 56);
    int v12 = *(__int16 *)(a1 + 38);
    int v13 = *(unsigned __int16 *)(a1 + 36);
    int v14 = *(_DWORD *)(a1 + 12);
    int v16 = *(_DWORD *)(a1 + 60);
    int v15 = *(_DWORD *)(a1 + 64);
    double v17 = *(float *)(a1 + 16);
    double v18 = *(float *)(a1 + 20);
    int v20 = 67244032;
    int v21 = v3;
    __int16 v22 = 2050;
    uint64_t v23 = v4;
    __int16 v24 = 1026;
    int v25 = v5;
    __int16 v26 = 1026;
    int v27 = v6;
    __int16 v28 = 2050;
    double v29 = v7;
    __int16 v30 = 2050;
    double v31 = v8;
    __int16 v32 = 2050;
    double v33 = v9;
    __int16 v34 = 2050;
    double v35 = v10;
    __int16 v36 = 2050;
    double v37 = v11;
    __int16 v38 = 1026;
    int v39 = v12;
    __int16 v40 = 1026;
    int v41 = v13;
    __int16 v42 = 1026;
    int v43 = v14;
    __int16 v44 = 1026;
    int v45 = v15;
    __int16 v46 = 1026;
    int v47 = v16;
    __int16 v48 = 2050;
    double v49 = v17;
    __int16 v50 = 2050;
    double v51 = v18;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Zg] summary,%{public}d,A,%{public}llu,B,%{public}hu,C,%{public}hu,D,%{public}f,E,%{public}f,F,%{public}f,G,%{public}f,H,%{public}f,I,%{public}hd,J,%{public}hu,K,%{public}d,L,%{public}d,M,%{public}d,config-1,%{public}f,config-2,%{public}f\n", (uint8_t *)&v20, 0x82u);
  }
  if (*(unsigned char *)(a1 + 8))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_100399F30);
    }
    __int16 v19 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 67240192;
      int v21 = dword_1003DD620;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[Zg] epoch %{public}d YES\n", (uint8_t *)&v20, 8u);
    }
  }
  ++dword_1003DD620;
}

id sub_100008BCC()
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_100399F30);
  }
  v0 = (void *)qword_1003DB6A8;

  return v0;
}

void sub_100008C20(uint64_t a1, void *a2)
{
  id v24 = a2;
  int v3 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 32)];
  [v24 setObject:v3 forKeyedSubscript:@"zg-A"];

  uint64_t v4 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 34)];
  [v24 setObject:v4 forKeyedSubscript:@"zg-B"];

  int v5 = +[NSNumber numberWithDouble:*(float *)(a1 + 48)];
  int v6 = [v5 stringValue];
  [v24 setObject:v6 forKeyedSubscript:@"zg-C"];

  double v7 = +[NSNumber numberWithDouble:*(float *)(a1 + 40)];
  double v8 = [v7 stringValue];
  [v24 setObject:v8 forKeyedSubscript:@"zg-D"];

  double v9 = +[NSNumber numberWithDouble:*(float *)(a1 + 44)];
  double v10 = [v9 stringValue];
  [v24 setObject:v10 forKeyedSubscript:@"zg-E"];

  double v11 = +[NSNumber numberWithDouble:*(float *)(a1 + 52)];
  int v12 = [v11 stringValue];
  [v24 setObject:v12 forKeyedSubscript:@"zg-F"];

  int v13 = +[NSNumber numberWithDouble:*(float *)(a1 + 56)];
  int v14 = [v13 stringValue];
  [v24 setObject:v14 forKeyedSubscript:@"zg-G"];

  int v15 = +[NSNumber numberWithShort:*(__int16 *)(a1 + 38)];
  [v24 setObject:v15 forKeyedSubscript:@"zg-H"];

  int v16 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 36)];
  [v24 setObject:v16 forKeyedSubscript:@"zg-I"];

  double v17 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 12)];
  [v24 setObject:v17 forKeyedSubscript:@"zg-J"];

  double v18 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  [v24 setObject:v18 forKeyedSubscript:@"zg-K"];

  __int16 v19 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  [v24 setObject:v19 forKeyedSubscript:@"zg-L"];

  int v20 = +[NSNumber numberWithDouble:*(float *)(a1 + 16)];
  int v21 = [v20 stringValue];
  [v24 setObject:v21 forKeyedSubscript:@"zg-config-1"];

  __int16 v22 = +[NSNumber numberWithDouble:*(float *)(a1 + 20)];
  uint64_t v23 = [v22 stringValue];
  [v24 setObject:v23 forKeyedSubscript:@"zg-config-2"];
}

void sub_100008F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100008FE0(uint64_t a1, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock((CLKappaAlgBlock *)a1, a2 + 1);
  uint64_t v4 = *a2;
  uint64_t *v5 = *a2;
  *(void *)(a1 + *(void *)(v4 - 152)) = a2[6];
  *(void *)(a1 + *(void *)(*(void *)a1 - 160)) = a2[7];
  *(void *)(a1 + *(void *)(*(void *)a1 - 168)) = a2[8];
  *(void *)(a1 + *(void *)(*(void *)a1 - 176)) = a2[9];
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1;
  *(void *)(a1 + 68) = 0x410000003DCCCCCDLL;
  *(void *)(a1 + 80) = -1;
  int32x2_t v6 = vdup_n_s32(0x7F7FFFFFu);
  *(int32x2_t *)(a1 + 88) = v6;
  *(_DWORD *)(a1 + 96) = 2139095039;
  *(_OWORD *)(a1 + 104) = xmmword_100337D70;
  *(_OWORD *)(a1 + 120) = xmmword_100337D80;
  *(void *)(a1 + 136) = -1;
  *(int32x2_t *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 152) = 2139095039;
  sub_10000AE88(a1 + 232, 0);
  *(unsigned char *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0xBF80000000000000;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 382) = 0;
  *(void *)(a1 + 390) = 0xFFFFLL;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0x4B200000000;
  *(void *)(a1 + 29296) = 0x4B200000000;
  *(void *)(a1 + 30512) = 0x12D00000000;
  *(void *)(a1 + 37744) = 0x12C00000000;
  double v7 = (char *)operator new(0x90uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)double v7 = off_10039A1E8;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((void *)v7 + 3) = &off_1003A1A28;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((void *)v7 + 5) = 0x410000003DCCCCCDLL;
  *(_OWORD *)(v7 + 77) = 0u;
  *((_DWORD *)v7 + 26) = 0;
  *((void *)v7 + 12) = 0;
  *((void *)v7 + 14) = 0;
  *((void *)v7 + 15) = 0;
  double v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v7 + 24;
  *(void *)(a1 + 16) = v7;
  if (v8)
  {
    sub_10000BB9C(v8);
    double v7 = *(char **)(a1 + 16);
    int v13 = *(char **)(a1 + 8);
    int v14 = (std::__shared_weak_count *)v7;
    if (!v7) {
      goto LABEL_6;
    }
  }
  else
  {
    int v13 = v7 + 24;
    int v14 = (std::__shared_weak_count *)v7;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10000941C((uint64_t)&v13, &v15);
  long long v9 = v15;
  long long v15 = 0uLL;
  double v10 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v9;
  if (v10)
  {
    sub_10000BB9C(v10);
    if (*((void *)&v15 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v15 + 1));
    }
  }
  if (v14) {
    sub_10000BB9C(v14);
  }
  double v11 = +[CSPlatformInfo sharedInstance];
  sub_1000094AC(a1, (unint64_t)[v11 hardware]);
  *(void *)(*(void *)(a1 + 32) + 104) = [v11 hardware];
  *(void *)(*(void *)(a1 + 32) + 112) = CLZgDetection::getHardwareProperties((CLZgDetection *)(a1 + 104));
  (*(void (**)(uint64_t))(*(void *)a1 + 312))(a1);

  return a1;
}

void sub_1000093C4(_Unwind_Exception *a1)
{
  sub_10000B6AC((uint64_t)v1 + 296);
  sub_10000B6AC((uint64_t)v1 + 256);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v4) {
    sub_10000BB9C(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v5) {
    sub_10000BB9C(v5);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10000941C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  BOOL result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t sub_1000094AC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 8);
  long long v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10000941C((uint64_t)&v8, &v10);
  long long v5 = v10;
  long long v10 = 0uLL;
  int32x2_t v6 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v10 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  if (v9) {
    sub_10000BB9C(v9);
  }
  *(void *)(*(void *)(a1 + 32) + 104) = a2;
  CLZgDetection::setHardware(a1 + 104, a2);
  uint64_t result = CLZgDetection::getHardwareProperties((CLZgDetection *)(a1 + 104));
  *(void *)(*(void *)(a1 + 32) + 112) = result;
  return result;
}

uint64_t sub_10000955C(uint64_t a1)
{
  return CLZgDetection::getHardwareProperties((CLZgDetection *)(a1 + 104));
}

uint64_t sub_100009564(uint64_t a1)
{
  unint64_t v2 = (void *)(a1 + 44952);
  *(void *)a1 = off_100399F60;
  *(void *)(a1 + 44952) = off_10039A008;
  *(void *)(a1 + 44960) = off_10039A0D0;
  *(void *)(a1 + 44968) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock((CLKappaAlgBlock *)a1, (uint64_t *)off_100399908);
  *(void *)uint64_t v3 = off_1003993E8;
  void *v2 = off_100399698;
  v2[1] = off_1003997D8;
  v2[2] = off_1003998B8;
  *(_OWORD *)(v3 + 32) = 0u;
  uint64_t v4 = v3 + 32;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 1;
  *(void *)(v3 + 68) = 0x410000003DCCCCCDLL;
  *(void *)(v3 + 80) = -1;
  int32x2_t v5 = vdup_n_s32(0x7F7FFFFFu);
  *(int32x2_t *)(v3 + 88) = v5;
  *(_DWORD *)(v3 + 96) = 2139095039;
  *(_OWORD *)(v3 + 104) = xmmword_100337D70;
  int32x2_t v6 = (CLZgDetection *)(v3 + 104);
  *(_OWORD *)(v3 + 120) = xmmword_100337D80;
  *(void *)(v3 + 136) = -1;
  *(int32x2_t *)(v3 + 144) = v5;
  *(_DWORD *)(a1 + 152) = 2139095039;
  sub_10000AE88(v3 + 232, 0);
  *(unsigned char *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0xBF80000000000000;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 382) = 0;
  *(void *)(a1 + 390) = 0xFFFFLL;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0x4B200000000;
  *(void *)(a1 + 29296) = 0x4B200000000;
  *(void *)(a1 + 30512) = 0x12D00000000;
  *(void *)(a1 + 37744) = 0x12C00000000;
  double v7 = (char *)operator new(0x90uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)double v7 = off_10039A1E8;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((void *)v7 + 3) = &off_1003A1A28;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((void *)v7 + 5) = 0x410000003DCCCCCDLL;
  *(_OWORD *)(v7 + 77) = 0u;
  *((_DWORD *)v7 + 26) = 0;
  *((void *)v7 + 12) = 0;
  *((void *)v7 + 14) = 0;
  *((void *)v7 + 15) = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v7 + 24;
  *(void *)(a1 + 16) = v7;
  if (v8)
  {
    sub_10000BB9C(v8);
    double v7 = *(char **)(a1 + 16);
    int v13 = *(char **)(a1 + 8);
    int v14 = (std::__shared_weak_count *)v7;
    if (!v7) {
      goto LABEL_6;
    }
  }
  else
  {
    int v13 = v7 + 24;
    int v14 = (std::__shared_weak_count *)v7;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10000941C((uint64_t)&v13, &v15);
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v9;
  if (v10)
  {
    sub_10000BB9C(v10);
    if (*((void *)&v15 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v15 + 1));
    }
  }
  if (v14) {
    sub_10000BB9C(v14);
  }
  double v11 = +[CSPlatformInfo sharedInstance];
  sub_1000094AC(a1, (unint64_t)[v11 hardware]);
  *(void *)(*(void *)v4 + 104) = [v11 hardware];
  *(void *)(*(void *)(a1 + 32) + 112) = CLZgDetection::getHardwareProperties(v6);
  (*(void (**)(uint64_t))(*(void *)a1 + 312))(a1);

  return a1;
}

void sub_1000098C4(_Unwind_Exception *a1)
{
  sub_10000B6AC((uint64_t)v1 + 296);
  sub_10000B6AC((uint64_t)v1 + 256);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v3) {
    sub_10000BB9C(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100399908);
  _Unwind_Resume(a1);
}

void sub_100009920(uint64_t a1)
{
  id v12 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgZgConfig" forFeatureMode:*(unsigned __int8 *)(a1 + 24)];
  unint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 983815946;
  LODWORD(v4) = 1036831949;
  LODWORD(v5) = 1.5;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v12 withMinValue:v3 maxValue:v5 defaultValue:v4];
  v13[0] = v6;

  double v7 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v8) = 1.0;
  LODWORD(v9) = 14.0;
  LODWORD(v10) = 8.0;
  [v7 algorithmThresholdNumber:1 inArrayForKey:v12 withMinValue:v8 maxValue:v9 defaultValue:v10];
  v13[1] = v11;

  sub_100009A1C(a1, v13);
}

void sub_1000099F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

double sub_100009A1C(uint64_t a1, int *a2)
{
  int v3 = *a2;
  *(_DWORD *)(a1 + 68) = *a2;
  int v4 = a2[1];
  *(_DWORD *)(a1 + 72) = v4;
  uint64_t v5 = *(void *)(a1 + 32);
  *(_DWORD *)(v5 + 16) = v3;
  *(_DWORD *)(v5 + 20) = v4;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_100399F30);
  }
  int v6 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v8 = *(float *)(a1 + 68);
    double v9 = *(float *)(a1 + 72);
    int v10 = 134218240;
    double v11 = v8;
    __int16 v12 = 2048;
    double v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[Zg] config %f, %f", (uint8_t *)&v10, 0x16u);
  }
  return result;
}

void sub_100009B14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(v3 + 24) = a2;
  *(_DWORD *)(v3 + 44) = 0;
  id v4 = *(id *)(*(void *)(a1 + 48) + 24);
  if ([v4 count]) {
    *(float *)(*(void *)(a1 + 32) + 44) = CLRobustMaxAccelNorm::robustMaxAccelNorm(v4);
  }
}

void sub_100009B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100009BA0(void *a1, uint64_t a2)
{
}

void sub_100009BBC(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 32);
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = *(void *)(a1 + 32);
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_DWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 29296) = 0;
  *(_DWORD *)(a1 + 30512) = 0;
  *(_DWORD *)(a1 + 37744) = 0;
  *(_DWORD *)(a1 + 388) = -65536;
  *(_OWORD *)(a1 + 368) = xmmword_100337D90;
  *(void *)(a1 + 80) = -1;
  *(int32x2_t *)(a1 + 88) = vdup_n_s32(0x7F7FFFFFu);
  *(_DWORD *)(a1 + 96) = 2139095039;
  CLZgDetection::reset((int32x2_t *)(a1 + 104));
  *(_DWORD *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 396) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 400) = 0;
}

void sub_100009C8C(void *a1)
{
}

void sub_100009CA8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)a2;
  if (!*(void *)(v5 + 88)) {
    *(void *)(v5 + 88) = v6;
  }
  *(void *)(v5 + 96) = v6;
  uint64_t v7 = *(unsigned __int16 *)(a1 + 442);
  if (*(_WORD *)(a1 + 442))
  {
    a3 = (double)v6;
    uint64_t v8 = a1 + 448;
    unint64_t v9 = v7 + *(unsigned __int16 *)(a1 + 440) - 1;
    unint64_t v10 = *(unsigned int *)(a1 + 444);
    if (v9 >= v10) {
      uint64_t v11 = *(unsigned int *)(a1 + 444);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = *(void *)(v8 + 24 * (v9 - v11));
    if ((double)v12 + 2499.99994 < a3)
    {
      ++*(_WORD *)(v5 + 80);
      *(float *)&a3 = (float)(v6 - v12) / 1000000.0;
      if (*(float *)(v5 + 72) >= *(float *)&a3) {
        LODWORD(a3) = *(_DWORD *)(v5 + 72);
      }
      *(_DWORD *)(v5 + 72) = LODWORD(a3);
    }
    if (v6 <= v12)
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_100399F30);
      }
      double v13 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v14 = *(void *)a2;
        unint64_t v15 = *(unsigned __int16 *)(a1 + 440) + (unint64_t)*(unsigned __int16 *)(a1 + 442) - 1;
        unint64_t v16 = *(unsigned int *)(a1 + 444);
        if (v15 < v16) {
          unint64_t v16 = 0;
        }
        uint64_t v17 = *(void *)(v8 + 24 * (v15 - v16));
        *(_DWORD *)id v24 = 134218240;
        *(void *)&v24[4] = v14;
        *(_WORD *)&v24[12] = 2048;
        *(void *)&v24[14] = v17;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[Zg] acc went backward %llu <- %llu", v24, 0x16u);
      }
      return;
    }
  }
  else
  {
    LODWORD(v10) = *(_DWORD *)(a1 + 444);
  }
  double v18 = (unsigned __int16 *)(a1 + 440);
  if (v10 == v7)
  {
    __int16 v19 = (_WORD *)(a1 + 29296);
    __int16 v20 = *(_WORD *)(a1 + 29298);
    if (v20)
    {
      uint64_t v21 = (unsigned __int16)*v19;
      LOBYTE(a3) = *(unsigned char *)(a1 + v21 + 29304);
      *(float *)(a1 + 352) = *(float *)(a1 + 352) + (float)((float)LODWORD(a3) * -0.00125);
      unint64_t v22 = v21 + 1;
      unint64_t v23 = *(unsigned int *)(a1 + 29300);
      if (v22 < v23) {
        LOWORD(v23) = 0;
      }
      *__int16 v19 = v22 - v23;
      *(_WORD *)(a1 + 29298) = v20 - 1;
    }
  }
  *(void *)id v24 = v6;
  *(void *)&v24[8] = *(void *)(a2 + 8);
  *(_DWORD *)&v24[16] = *(_DWORD *)(a2 + 16);
  sub_100009EE4(v18, (long long *)v24);
}

unsigned __int16 *sub_100009EE4(unsigned __int16 *result, long long *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  id v4 = &result[12 * (v3 - v2)];
  long long v5 = *a2;
  *((void *)v4 + 3) = *((void *)a2 + 2);
  *(_OWORD *)(v4 + 4) = v5;
  unsigned int v6 = result[1];
  unint64_t v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    unint64_t v8 = *result + 1;
    if (v8 < v7) {
      LOWORD(v7) = 0;
    }
    *double result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

void sub_100009F50(void *a1, uint64_t a2, double a3)
{
}

void sub_100009F6C(float32x2_t *a1, uint64_t a2)
{
  id v4 = a1 + 3814;
  float32x2_t v5 = a1[4];
  unint64_t v6 = *(void *)(a2 + 42);
  if (!*(void *)(*(void *)&v5 + 88)) {
    *(void *)(*(void *)&v5 + 88) = v6;
  }
  *(void *)(*(void *)&v5 + 96) = v6;
  if (!a1[3814].i16[1]) {
    goto LABEL_11;
  }
  unint64_t v7 = a1 + 3815;
  unint64_t v8 = a1[3814].u16[1] + (unint64_t)a1[3814].u16[0] - 1;
  unint64_t v9 = a1[3814].u32[1];
  if (v8 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v10 = (unint64_t)v7[3 * (v8 - v9)];
  if ((double)v10 + 9999.99978 < (double)v6)
  {
    ++*(_WORD *)(*(void *)&v5 + 82);
    float v11 = (float)(v6 - v10) / 1000000.0;
    if (*(float *)(*(void *)&v5 + 76) >= v11) {
      float v11 = *(float *)(*(void *)&v5 + 76);
    }
    *(float *)(*(void *)&v5 + 76) = v11;
  }
  if (v6 <= v10)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_100399F30);
    }
    uint64_t v17 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a2 + 42);
      unint64_t v19 = v4->u16[0] + (unint64_t)v4->u16[1] - 1;
      unint64_t v20 = v4->u32[1];
      if (v19 < v20) {
        unint64_t v20 = 0;
      }
      float32x2_t v21 = v7[3 * (v19 - v20)];
      *(_DWORD *)unint64_t v22 = 134218240;
      *(void *)&v22[4] = v18;
      *(_WORD *)&v22[12] = 2048;
      *(float32x2_t *)&v22[14] = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[Zg] DM went backward %llu <- %llu", v22, 0x16u);
    }
  }
  else
  {
LABEL_11:
    *(void *)unint64_t v22 = v6;
    *(void *)&v22[8] = *(void *)(a2 + 16);
    *(_DWORD *)&v22[16] = *(_DWORD *)(a2 + 24);
    sub_100009EE4((unsigned __int16 *)&a1[3814], (long long *)v22);
    float32x2_t v13 = a1[10];
    float32x2_t v14 = *(float32x2_t *)(a2 + 42);
    if (*(void *)&v13 != -1 && *(void *)&v14 > *(void *)&v13)
    {
      *(float *)v12.i32 = (float)(unint64_t)(*(void *)&v14 - *(void *)&v13) / 1000000.0;
      float v15 = (float)(*(float *)(a2 + 24) - a1[12].f32[0]) / *(float *)v12.i32;
      *(void *)unint64_t v22 = (*(void *)&v14 + *(void *)&v13) >> 1;
      *(float32x2_t *)&v22[8] = vdiv_f32(vsub_f32(*(float32x2_t *)(a2 + 16), a1[11]), (float32x2_t)vdup_lane_s32(v12, 0));
      *(float *)&v22[16] = v15;
      sub_100009EE4((unsigned __int16 *)&a1[4718], (long long *)v22);
      float32x2_t v14 = *(float32x2_t *)(a2 + 42);
    }
    __int32 v16 = *(_DWORD *)(a2 + 24);
    a1[10] = v14;
    a1[11] = *(float32x2_t *)(a2 + 16);
    a1[12].i32[0] = v16;
    sub_10000A1E0(a1);
  }
}

void sub_10000A1E0(float32x2_t *a1)
{
  id v1 = (unsigned __int16 *)&a1[4718] + 1;
  if (a1[4718].u16[1] >= 2u)
  {
    unint64_t v3 = a1 + 3662;
    unint64_t v4 = a1[3662].u16[1];
    if (v4 < a1[55].u16[1])
    {
      __int16 v36 = (unsigned __int16 *)&a1[4718];
      float32x2_t v5 = (unsigned __int16 *)&a1[55];
      unint64_t v6 = a1 + 3663;
      double v35 = (unsigned __int16 *)&a1[3814];
      float32x2_t v7 = (float32x2_t)vdup_n_s32(0x3AA3D70Au);
      double v33 = (unsigned __int16 *)&a1[4718] + 1;
      __int16 v34 = (CLZgDetection *)&a1[13];
      __int16 v32 = (unsigned __int16 *)&a1[55];
      do
      {
        unint64_t v38 = *v1;
        unint64_t v37 = v3[152].u16[1];
        int v8 = sub_10000A548((unsigned __int16 *)a1, v4, (uint64_t *)&v38, (uint64_t *)&v37);
        if (v8)
        {
          if (v8 == 2) {
            break;
          }
          unint64_t v9 = (const CSSPUTriad_Struct *)sub_10000BCAC(v5, v4);
          unint64_t v10 = v37;
          float v11 = (CSSPUTriad_Struct *)sub_10000BCAC(v35, v37);
          int32x2_t v12 = (CSSPUTriad_Struct *)sub_10000BCAC(v35, v10 - 1);
          unint64_t v13 = v38;
          float32x2_t v14 = (const CSSPUTriad_Struct *)sub_10000BCAC(v36, v38);
          float v15 = (const CSSPUTriad_Struct *)sub_10000BCAC(v36, v13 - 1);
          CLZgDetection::queryZgState(v34, v9, v11, v12, v14, v15);
          uint64_t v17 = v3->u16[1];
          unint64_t v18 = v3->u32[1];
          uint64_t v19 = v3->u16[0];
          if (v19 + v17 >= v18) {
            uint64_t v20 = v3->u32[1];
          }
          else {
            uint64_t v20 = 0;
          }
          v6->i8[v19 + v17 - v20] = v16;
          if (v18 <= v17)
          {
            if (v19 + 1 < v18) {
              LOWORD(v18) = 0;
            }
            v3->i16[0] = v19 + 1 - v18;
          }
          else
          {
            v3->i16[1] = v17 + 1;
          }
          float32x2_t v5 = v32;
          id v1 = v33;
          if (v16)
          {
            if (*(void *)sub_10000BCAC(v32, v4) - *(void *)&a1[52] <= 0xEA3uLL)
            {
              float v25 = a1[45].f32[0];
            }
            else
            {
              ++a1[49].i16[2];
              float v25 = 0.00125;
            }
            float v26 = v25 + 0.00125;
            a1[45].f32[0] = v26;
            if (a1[45].f32[1] >= v26) {
              float v26 = a1[45].f32[1];
            }
            a1[45].f32[1] = v26;
            float32x2_t v27 = a1[50];
            if (!*(void *)&v27) {
              float32x2_t v27 = *(float32x2_t *)sub_10000BCAC(v32, v4);
            }
            a1[50] = v27;
            __int16 v28 = (void *)sub_10000BCAC(v32, v4);
            float32x2_t v29 = a1[51];
            if (*v28 > *(void *)&v29) {
              float32x2_t v29 = *(float32x2_t *)sub_10000BCAC(v32, v4);
            }
            a1[51] = v29;
            a1[44] = vadd_f32(a1[44], v7);
            a1[52] = *(float32x2_t *)sub_10000BCAC(v32, v4);
          }
        }
        else
        {
          uint64_t v21 = v3->u16[1];
          unint64_t v22 = v3->u32[1];
          uint64_t v23 = v3->u16[0];
          if (v23 + v21 >= v22) {
            uint64_t v24 = v3->u32[1];
          }
          else {
            uint64_t v24 = 0;
          }
          v6->i8[v23 + v21 - v24] = 0;
          if (v22 <= v21)
          {
            if (v23 + 1 < v22) {
              LOWORD(v22) = 0;
            }
            v3->i16[0] = v23 + 1 - v22;
          }
          else
          {
            v3->i16[1] = v21 + 1;
          }
        }
        ++v4;
      }
      while (v4 < a1[55].u16[1]);
    }
    LODWORD(v38) = -1082130432;
    __int16 v30 = -1;
    LOWORD(v37) = -1;
    float v31 = -1.0;
    if (a1[44].f32[0] >= a1[8].f32[1])
    {
      if (*(_DWORD *)(v1 + 1) == *v1 && a1[55].i32[1] == a1[55].u16[1])
      {
        sub_10000A654((uint64_t)a1, (float *)&v38, (__int16 *)&v37);
        ++a1[49].i16[0];
        float v31 = *(float *)&v38;
        __int16 v30 = v37;
      }
      else
      {
        __int16 v30 = -1;
      }
    }
    sub_10000A848((uint64_t)a1, v30, v31);
  }
}

void sub_10000A52C(void *a1, uint64_t a2)
{
}

uint64_t sub_10000A548(unsigned __int16 *a1, unint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4 = a1 + 15257;
  if (a1[18873])
  {
    unint64_t v9 = a1 + 18872;
    *a3 = a1[18873];
    unint64_t v10 = a1 + 220;
    while (1)
    {
      unint64_t v11 = *(void *)sub_10000BCAC(v10, a2);
      int32x2_t v12 = (unint64_t *)sub_10000BCAC(v9, *a3 - 1);
      uint64_t v13 = *a3;
      if (v11 > *v12) {
        break;
      }
      uint64_t v14 = v13 - 1;
      *a3 = v14;
      if (!v14) {
        return 0;
      }
    }
    if (v13 == v4[3616])
    {
      return 2;
    }
    else
    {
      int v16 = a1 + 15256;
      for (uint64_t i = *v4; ; uint64_t i = *a4 - 1)
      {
        *a4 = i;
        unint64_t v18 = *(void *)sub_10000BCAC(v10, a2);
        if (v18 > *(void *)sub_10000BCAC(v16, *a4 - 1)) {
          break;
        }
      }
      return 1;
    }
  }
  else
  {
    uint64_t v19 = sub_1003253A0();
    return sub_10000A654(v19);
  }
}

uint64_t sub_10000A654(uint64_t result, float *a2, __int16 *a3)
{
  *a2 = 0.0;
  *a3 = 0;
  unsigned int v3 = *(unsigned __int16 *)(result + 442);
  if (v3 >= 0x14)
  {
    uint64_t v4 = result;
    float32x2_t v5 = (_WORD *)(result + 29298);
    if (v3 >= *(unsigned __int16 *)(result + 29298))
    {
      unint64_t v8 = 0;
      float v9 = 0.0;
      do
      {
        float v10 = *(float *)(sub_10000BCAC((unsigned __int16 *)(v4 + 440), v8) + 8);
        float v11 = *(float *)(sub_10000BCAC((unsigned __int16 *)(v4 + 440), v8) + 12);
        double result = sub_10000BCAC((unsigned __int16 *)(v4 + 440), v8);
        float v9 = v9
           + sqrtf((float)((float)(v11 * v11) + (float)(v10 * v10))+ (float)(*(float *)(result + 16) * *(float *)(result + 16)));
        ++v8;
      }
      while (v8 != 20);
      *a2 = v9 / 20.0;
      __int16 v12 = *a3;
      if ((float)(v9 / 20.0) >= *(float *)(v4 + 72)) {
        ++v12;
      }
      *a3 = v12;
      if (*v5 != 20)
      {
        unint64_t v13 = 0;
        do
        {
          float v14 = *(float *)(sub_10000BCAC((unsigned __int16 *)(v4 + 440), v13) + 8);
          float v15 = *(float *)(sub_10000BCAC((unsigned __int16 *)(v4 + 440), v13) + 12);
          uint64_t v16 = sub_10000BCAC((unsigned __int16 *)(v4 + 440), v13);
          float v17 = v9
              - sqrtf((float)((float)(v15 * v15) + (float)(v14 * v14))+ (float)(*(float *)(v16 + 16) * *(float *)(v16 + 16)));
          float v18 = *(float *)(sub_10000BCAC((unsigned __int16 *)(v4 + 440), v13 + 20) + 8);
          float v19 = *(float *)(sub_10000BCAC((unsigned __int16 *)(v4 + 440), v13 + 20) + 12);
          double result = sub_10000BCAC((unsigned __int16 *)(v4 + 440), v13 + 20);
          float v9 = v17
             + sqrtf((float)((float)(v19 * v19) + (float)(v18 * v18))+ (float)(*(float *)(result + 16) * *(float *)(result + 16)));
          if ((float)(v9 / 20.0) >= *(float *)(v4 + 72))
          {
            uint64_t v20 = *(void *)(v4 + 432);
            if (!v20)
            {
              double result = sub_10000BCAC((unsigned __int16 *)(v4 + 440), v13 + 1);
              uint64_t v20 = *(void *)result;
            }
            *(void *)(v4 + 432) = v20;
            ++*a3;
          }
          float v21 = *a2;
          if (*a2 < (float)(v9 / 20.0)) {
            float v21 = v9 / 20.0;
          }
          *a2 = v21;
          unint64_t v22 = v13 + 2;
          ++v13;
        }
        while (v22 <= (unint64_t)(unsigned __int16)*v5 - 20);
      }
    }
  }
  return result;
}

float sub_10000A848(uint64_t a1, int a2, float a3)
{
  float v3 = *(float *)(a1 + 352);
  if (v3 >= *(float *)(a1 + 68) && *(float *)(a1 + 72) <= a3)
  {
    ++*(_WORD *)(a1 + 394);
    if (v3 < *(float *)(a1 + 376)) {
      float v3 = *(float *)(a1 + 376);
    }
    *(float *)(a1 + 376) = v3;
    if (*(float *)(a1 + 368) > a3) {
      a3 = *(float *)(a1 + 368);
    }
    *(float *)(a1 + 368) = a3;
    int v10 = *(__int16 *)(a1 + 388);
    if (v10 <= a2) {
      LOWORD(v10) = a2;
    }
    *(_WORD *)(a1 + 388) = v10;
    uint64_t v6 = *(void *)(a1 + 32);
    *(unsigned char *)(v6 + 8) = 1;
    *(unsigned char *)(v6 + 68) = 1;
  }
  else
  {
    if (*(float *)(a1 + 372) > a3) {
      a3 = *(float *)(a1 + 372);
    }
    *(float *)(a1 + 372) = a3;
    int v4 = *(__int16 *)(a1 + 390);
    if (v4 <= a2) {
      LOWORD(v4) = a2;
    }
    *(_WORD *)(a1 + 390) = v4;
    uint64_t v5 = 352;
    if (v3 < *(float *)(a1 + 380)) {
      uint64_t v5 = 380;
    }
    *(_DWORD *)(a1 + 380) = *(_DWORD *)(a1 + v5);
    uint64_t v6 = *(void *)(a1 + 32);
    if (!*(unsigned char *)(v6 + 8))
    {
      float32x2_t v7 = (int *)(a1 + 372);
      unint64_t v8 = (__int16 *)(a1 + 390);
      float v9 = (_DWORD *)(a1 + 380);
      goto LABEL_19;
    }
  }
  float v9 = (_DWORD *)(a1 + 376);
  float32x2_t v7 = (int *)(a1 + 368);
  unint64_t v8 = (__int16 *)(a1 + 388);
LABEL_19:
  __int16 v11 = *v8;
  int v12 = *v7;
  *(_DWORD *)(v6 + 48) = *v9;
  *(_DWORD *)(v6 + 40) = v12;
  *(_WORD *)(v6 + 38) = v11;
  uint64_t v13 = *(void *)(a1 + 424);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 432);
    int v15 = v14 - v13;
    if (!v14) {
      int v15 = 0x7FFFFFFF;
    }
    *(_DWORD *)(v6 + 12) = v15;
    uint64_t v16 = *(void *)(a1 + 400);
    int v17 = v16 - v13;
    if (!v16) {
      int v17 = 0x7FFFFFFF;
    }
    *(_DWORD *)(v6 + 64) = v17;
  }
  uint64_t v18 = *(void *)(a1 + 408);
  if (v18) {
    int v19 = v18 - *(_DWORD *)(a1 + 400);
  }
  else {
    int v19 = 0x7FFFFFFF;
  }
  *(_DWORD *)(v6 + 60) = v19;
  *(_WORD *)(v6 + 32) = *(_WORD *)(a1 + 392);
  *(_DWORD *)(v6 + 34) = *(_DWORD *)(a1 + 394);
  float result = *(float *)(a1 + 356);
  int v21 = *(_DWORD *)(a1 + 364);
  *(float *)(v6 + 52) = result;
  *(_DWORD *)(v6 + 56) = v21;
  return result;
}

uint64_t sub_10000A9E4()
{
  return 0;
}

uint64_t sub_10000A9EC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

uint64_t sub_10000A9F8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10000AA58(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_10000AA88@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_10000AB04@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (char *)result + *(void *)(*result - 40);
  uint64_t v4 = *((void *)v2 + 1);
  uint64_t v3 = *((void *)v2 + 2);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10000ABD8(CLKappaAlgBlock *a1)
{
}

void sub_10000ABE4(CLKappaAlgBlock *a1)
{
  sub_10000B9D0(a1, (uint64_t *)&off_100399900);

  operator delete();
}

uint64_t sub_10000AC24(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 24);
  if (v2 == 2)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x10) != 0) {
      return result;
    }
    goto LABEL_6;
  }
  if (v2 != 1 || (*(unsigned char *)(a2 + 1) & 0x10) == 0) {
LABEL_6:
  }
    *(void *)(result + 424) = *(void *)(a2 + 8);
  return result;
}

void sub_10000AC5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    sub_10000BB9C(v4);
  }
}

uint64_t sub_10000AC88(uint64_t result)
{
  *(void *)(result + 424) = 0;
  return result;
}

void sub_10000AC90(void *a1)
{
}

void sub_10000ACB4(void *a1)
{
  sub_10000B9D0((CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)&off_100399900);

  operator delete();
}

void sub_10000AD0C(void *a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 32);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 7);
  *((void *)v2 + 6) = v4;
  *((void *)v2 + 7) = v3;
  if (v5) {
    sub_10000BB9C(v5);
  }
}

void sub_10000AD4C(void *a1)
{
}

void sub_10000AD70(void *a1)
{
  sub_10000B9D0((CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)&off_100399900);

  operator delete();
}

void sub_10000ADC8(void *a1)
{
}

void sub_10000ADEC(void *a1)
{
  sub_10000B9D0((CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)&off_100399900);

  operator delete();
}

void sub_10000AE44(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

uint64_t sub_10000AE88(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = a1 + 24;
  memcpy(__dst, &unk_100337DE0, sizeof(__dst));
  sub_10000B18C(v4, __dst, 34);
  memcpy(__dst, &unk_100338110, sizeof(__dst));
  sub_10000B18C(a1 + 64, __dst, 34);
  sub_10000AF7C(a1, a2);
  return a1;
}

void sub_10000AF50(_Unwind_Exception *a1)
{
  sub_10000B6AC(v2);
  sub_10000B6AC(v1);
  _Unwind_Resume(a1);
}

double sub_10000AF7C(uint64_t a1, unint64_t a2)
{
  unint64_t v16 = a2;
  *(void *)(a1 + 104) = a2;
  uint64_t v3 = a1 + 24;
  if (sub_10000B6F8((void *)(a1 + 24), &v16))
  {
    *(void *)buf = &v16;
    uint64_t v4 = sub_10000B7AC(a1 + 64, &v16, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    uint64_t v5 = v4[3];
    *(_DWORD *)(a1 + 20) = *((_DWORD *)v4 + 8);
    *(void *)(a1 + 12) = v5;
    *(void *)buf = &v16;
    uint64_t v6 = sub_10000B7AC(v3, &v16, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    uint64_t v7 = v6[3];
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v6 + 8);
    *(void *)a1 = v7;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_100399F30);
  }
  unint64_t v8 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
  {
    double v10 = *(float *)(a1 + 12);
    double v11 = *(float *)(a1 + 16);
    double v12 = *(float *)(a1 + 20);
    double v13 = *(float *)a1;
    double v14 = *(float *)(a1 + 4);
    double v15 = *(float *)(a1 + 8);
    *(_DWORD *)buf = 136317954;
    *(void *)&buf[4] = "Lx";
    __int16 v18 = 2048;
    double v19 = v10;
    __int16 v20 = 2080;
    int v21 = "Ly";
    __int16 v22 = 2048;
    double v23 = v11;
    __int16 v24 = 2080;
    float v25 = "Lz";
    __int16 v26 = 2048;
    double v27 = v12;
    __int16 v28 = 2080;
    float32x2_t v29 = "Ix";
    __int16 v30 = 2048;
    double v31 = v13;
    __int16 v32 = 2080;
    double v33 = "Iy";
    __int16 v34 = 2048;
    double v35 = v14;
    __int16 v36 = 2080;
    unint64_t v37 = "Iz";
    __int16 v38 = 2048;
    double v39 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "device parameters,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f", buf, 0x7Au);
  }
  return result;
}

uint64_t sub_10000B18C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      sub_10000B208(a1, a2, (uint64_t)a2);
      a2 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_10000B1F4(_Unwind_Exception *a1)
{
  sub_10000B6AC(v1);
  _Unwind_Resume(a1);
}

void *sub_10000B208(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    float v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  i[4] = *(void *)(a3 + 16);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_10000B460(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  double v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *double v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    double v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10000B418(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10000B42C()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_10000B460(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_10000B550(a1, prime);
    }
  }
}

void sub_10000B550(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_10000B42C();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    double v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t sub_10000B6AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_10000B6F8(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  double result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_10000B7AC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    double v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x28uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  uint64_t v13 = **a4;
  *((_DWORD *)v11 + 8) = 0;
  v11[2] = v13;
  v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10000B460(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  int v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t v11 = *v21;
LABEL_38:
    *int v21 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_10000B9BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10000B9D0(CLKappaAlgBlock *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)((char *)a1 + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 160)) = a2[7];
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 168)) = a2[8];
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 176)) = a2[9];
  sub_10000B6AC((uint64_t)a1 + 296);
  sub_10000B6AC((uint64_t)a1 + 256);
  unint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 7);
  if (v5) {
    sub_10000BB9C(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 5);
  if (v6) {
    sub_10000BB9C(v6);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(a1, a2 + 1);
}

void sub_10000BB9C(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_10000BC10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10039A1E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10000BC30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10039A1E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10000BC84(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_10000BCAC(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      int v8 = *((_DWORD *)a1 + 1);
      int v9 = 134218754;
      CFAbsoluteTime v10 = Current;
      __int16 v11 = 2080;
      unint64_t v12 = "const T &CMQueue<CSSPUTriad_Struct>::operator[](const size_t) const [T = CSSPUTriad_Struct]";
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 1024;
      int v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  unint64_t v5 = *a1 + a2;
  if (v5 < v4) {
    unint64_t v4 = 0;
  }
  return (uint64_t)&a1[12 * (v5 - v4) + 4];
}

uint64_t sub_10000BE04(uint64_t result)
{
  *(void *)double result = &off_10039A238;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_10000BE2C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10000BE64(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10039A238;
  *(_DWORD *)(result + 12) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_10000BEA0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &off_10039A238;
    int v3 = *(unsigned char *)(a2 + 12) & 1;
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sub_10000BF14(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10039A238;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_10000BF48(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &off_10039A238;
    uint64_t v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sub_10000BFB8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "nop", *(_DWORD *)(a1 + 8));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10000C018(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10000C250(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  }
  return result;
}

void sub_10000C270(uint64_t a1)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039AE70);
  }
  unint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 100);
    BOOL v4 = *(unsigned char *)(a1 + 100) != 0;
    double v5 = *(float *)(a1 + 80);
    double v6 = *(float *)(a1 + 84);
    double v7 = *(float *)(a1 + 88);
    int v8 = *(_DWORD *)(a1 + 96);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    double v11 = *(float *)(a1 + 92);
    int v12 = *(_DWORD *)(a1 + 12);
    int v13 = *(_DWORD *)(a1 + 76);
    float v14 = *(float *)(a1 + 104);
    float v15 = *(float *)(a1 + 108);
    double v16 = v14;
    double v17 = v15;
    double v18 = (float)(v14 - v15);
    double v19 = *(float *)(a1 + 112);
    uint64_t v20 = *(void *)(a1 + 120);
    uint64_t v21 = *(void *)(a1 + 128);
    int v22 = *(unsigned __int8 *)(a1 + 140);
    uint64_t v23 = *(void *)(a1 + 144);
    double v24 = *(float *)(a1 + 136);
    double v25 = *(float *)(a1 + 16);
    double v26 = *(float *)(a1 + 20);
    double v27 = *(float *)(a1 + 24);
    double v28 = *(float *)(a1 + 28);
    double v29 = *(float *)(a1 + 32);
    double v30 = *(float *)(a1 + 36);
    double v31 = *(float *)(a1 + 40);
    v32[0] = 67246848;
    v32[1] = v4;
    __int16 v33 = 2050;
    double v34 = v5;
    __int16 v35 = 2050;
    uint64_t v36 = v9;
    __int16 v37 = 2050;
    double v38 = v6;
    __int16 v39 = 2050;
    double v40 = v7;
    __int16 v41 = 1026;
    int v42 = v8;
    __int16 v43 = 1026;
    int v44 = v3;
    __int16 v45 = 2050;
    uint64_t v46 = v10;
    __int16 v47 = 2050;
    double v48 = v11;
    __int16 v49 = 1026;
    int v50 = v12;
    __int16 v51 = 1026;
    int v52 = v13;
    __int16 v53 = 2050;
    double v54 = v16;
    __int16 v55 = 2050;
    double v56 = v17;
    __int16 v57 = 2050;
    double v58 = v18;
    __int16 v59 = 2050;
    double v60 = v19;
    __int16 v61 = 2050;
    uint64_t v62 = v20;
    __int16 v63 = 2050;
    uint64_t v64 = v21;
    __int16 v65 = 1026;
    int v66 = v22;
    __int16 v67 = 2050;
    uint64_t v68 = v23;
    __int16 v69 = 2050;
    double v70 = v24;
    __int16 v71 = 2050;
    double v72 = v25;
    __int16 v73 = 2050;
    double v74 = v26;
    __int16 v75 = 2050;
    double v76 = v27;
    __int16 v77 = 2050;
    double v78 = v28;
    __int16 v79 = 2050;
    double v80 = v29;
    __int16 v81 = 2050;
    double v82 = v30;
    __int16 v83 = 2050;
    double v84 = v31;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[BA] summary,%{public}d,A,%{public}f,B,%{public}llu,C,%{public}f,D,%{public}f,E,%{public}d,F,%{public}d,G,%{public}llu,H,%{public}f,I,%{public}d,J,%{public}d,K,%{public}f,L,%{public}f,M,%{public}f,N,%{public}f,O,%{public}llu,P,%{public}llu,Q,%{public}d,R,%{public}llu,S,%{public}f,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,config-5,%{public}f,config-6,%{public}f,config-7,%{public}f\n", (uint8_t *)v32, 0xF8u);
  }
}

void sub_10000C4AC(uint64_t a1, void *a2)
{
  id v37 = a2;
  int v3 = +[NSNumber numberWithDouble:*(float *)(a1 + 80)];
  BOOL v4 = [v3 stringValue];
  [v37 setObject:v4 forKeyedSubscript:@"ba-A"];

  double v5 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 56)];
  [v37 setObject:v5 forKeyedSubscript:@"ba-B"];

  double v6 = +[NSNumber numberWithDouble:*(float *)(a1 + 84)];
  double v7 = [v6 stringValue];
  [v37 setObject:v7 forKeyedSubscript:@"ba-C"];

  int v8 = +[NSNumber numberWithDouble:*(float *)(a1 + 88)];
  uint64_t v9 = [v8 stringValue];
  [v37 setObject:v9 forKeyedSubscript:@"ba-D"];

  uint64_t v10 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 96)];
  [v37 setObject:v10 forKeyedSubscript:@"ba-E"];

  double v11 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 100)];
  [v37 setObject:v11 forKeyedSubscript:@"ba-F"];

  int v12 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 64)];
  [v37 setObject:v12 forKeyedSubscript:@"ba-G"];

  int v13 = +[NSNumber numberWithDouble:*(float *)(a1 + 92)];
  float v14 = [v13 stringValue];
  [v37 setObject:v14 forKeyedSubscript:@"ba-H"];

  float v15 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 12)];
  [v37 setObject:v15 forKeyedSubscript:@"ba-I"];

  double v16 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 76)];
  [v37 setObject:v16 forKeyedSubscript:@"ba-J"];

  double v17 = +[NSNumber numberWithDouble:*(float *)(a1 + 104)];
  double v18 = [v17 stringValue];
  [v37 setObject:v18 forKeyedSubscript:@"ba-K"];

  double v19 = +[NSNumber numberWithDouble:*(float *)(a1 + 108)];
  uint64_t v20 = [v19 stringValue];
  [v37 setObject:v20 forKeyedSubscript:@"ba-L"];

  uint64_t v21 = +[NSNumber numberWithDouble:(float)(*(float *)(a1 + 104) - *(float *)(a1 + 108))];
  int v22 = [v21 stringValue];
  [v37 setObject:v22 forKeyedSubscript:@"ba-M"];

  uint64_t v23 = +[NSNumber numberWithDouble:*(float *)(a1 + 16)];
  double v24 = [v23 stringValue];
  [v37 setObject:v24 forKeyedSubscript:@"ba-config-1"];

  double v25 = +[NSNumber numberWithDouble:*(float *)(a1 + 20)];
  double v26 = [v25 stringValue];
  [v37 setObject:v26 forKeyedSubscript:@"ba-config-2"];

  double v27 = +[NSNumber numberWithDouble:*(float *)(a1 + 24)];
  double v28 = [v27 stringValue];
  [v37 setObject:v28 forKeyedSubscript:@"ba-config-3"];

  double v29 = +[NSNumber numberWithDouble:*(float *)(a1 + 28)];
  double v30 = [v29 stringValue];
  [v37 setObject:v30 forKeyedSubscript:@"ba-config-4"];

  double v31 = +[NSNumber numberWithDouble:*(float *)(a1 + 32)];
  __int16 v32 = [v31 stringValue];
  [v37 setObject:v32 forKeyedSubscript:@"ba-config-5"];

  __int16 v33 = +[NSNumber numberWithDouble:*(float *)(a1 + 36)];
  double v34 = [v33 stringValue];
  [v37 setObject:v34 forKeyedSubscript:@"ba-config-6"];

  __int16 v35 = +[NSNumber numberWithDouble:*(float *)(a1 + 40)];
  uint64_t v36 = [v35 stringValue];
  [v37 setObject:v36 forKeyedSubscript:@"ba-config-7"];
}

void sub_10000C988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000CA38(uint64_t a1, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock((CLKappaAlgBlock *)a1, a2 + 1);
  uint64_t v4 = *a2;
  uint64_t *v5 = *a2;
  *(void *)(a1 + *(void *)(v4 - 152)) = a2[6];
  *(void *)(a1 + *(void *)(*(void *)a1 - 160)) = a2[7];
  *(void *)(a1 + *(void *)(*(void *)a1 - 168)) = a2[8];
  *(void *)(a1 + *(void *)(*(void *)a1 - 176)) = a2[9];
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 88) = 0x42B40000432A0000;
  *(_DWORD *)(a1 + 96) = 1145569280;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(unsigned char *)(a1 + 432) = 1;
  *(_DWORD *)(a1 + 436) = 0;
  *(void *)(a1 + 440) = 1;
  *(_DWORD *)(a1 + 448) = -1082130432;
  *(void *)(a1 + 456) = 0;
  double v6 = (std::__shared_weak_count *)operator new(0x120uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_10039AEA0;
  sub_100010DC8((uint64_t)&v6[1]);
  double v7 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v6 + 1;
  *(void *)(a1 + 16) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    double v6 = *(std::__shared_weak_count **)(a1 + 16);
    double v11 = *(std::__shared_weak_count **)(a1 + 8);
    int v12 = v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    double v11 = v6 + 1;
    int v12 = v6;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10000CDB8((uint64_t)&v11, &v13);
  long long v8 = v13;
  long long v13 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v13 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (v12) {
    sub_10000BB9C(v12);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 312))(a1);
  return a1;
}

void sub_10000CD44(_Unwind_Exception *a1)
{
  sub_100010C84(v3 + 27);
  sub_100010B8C(v3 + 21);
  sub_100010C84(v3 + 15);
  sub_100010B8C(v3 + 9);
  double v6 = (void *)*((void *)v1 + 25);
  if (v6)
  {
    *((void *)v1 + 26) = v6;
    operator delete(v6);
  }
  sub_100010C84(v3);
  sub_100010B8C(v4);
  double v7 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v7) {
    sub_10000BB9C(v7);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10000CDB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t sub_10000CE48(uint64_t a1)
{
  *(void *)a1 = off_100399F60;
  *(void *)(a1 + 464) = off_10039A008;
  *(void *)(a1 + 472) = off_10039A0D0;
  *(void *)(a1 + 480) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock((CLKappaAlgBlock *)a1, (uint64_t *)off_10039A848);
  *(void *)uint64_t v2 = off_10039A328;
  *(void *)(v2 + 464) = off_10039A5D8;
  *(void *)(v2 + 472) = off_10039A718;
  *(void *)(v2 + 480) = off_10039A7F8;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0x42B40000432A0000;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_DWORD *)(v2 + 96) = 1145569280;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(void *)(v2 + 424) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(unsigned char *)(v2 + 432) = 1;
  *(_DWORD *)(v2 + 436) = 0;
  *(void *)(v2 + 440) = 1;
  *(_DWORD *)(v2 + 448) = -1082130432;
  *(void *)(v2 + 456) = 0;
  int v3 = (std::__shared_weak_count *)operator new(0x120uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_10039AEA0;
  sub_100010DC8((uint64_t)&v3[1]);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v3 + 1;
  *(void *)(a1 + 16) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    int v3 = *(std::__shared_weak_count **)(a1 + 16);
    long long v8 = *(std::__shared_weak_count **)(a1 + 8);
    uint64_t v9 = v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    long long v8 = v3 + 1;
    uint64_t v9 = v3;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10000CDB8((uint64_t)&v8, &v10);
  long long v5 = v10;
  long long v10 = 0uLL;
  double v6 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v10 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  if (v9) {
    sub_10000BB9C(v9);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 312))(a1);
  return a1;
}

void sub_10000D0E0(_Unwind_Exception *a1)
{
  sub_100010C84((void *)v1 + 46);
  sub_100010B8C((void *)v1 + 40);
  sub_100010C84((void *)v1 + 34);
  sub_100010B8C((void *)v1 + 28);
  long long v5 = (void *)*((void *)v1 + 25);
  if (v5)
  {
    *((void *)v1 + 26) = v5;
    operator delete(v5);
  }
  sub_100010C84(v3);
  sub_100010B8C(v2);
  double v6 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v6) {
    sub_10000BB9C(v6);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039A848);
  _Unwind_Resume(a1);
}

double sub_10000D158(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  long long v4 = *a2;
  *(_OWORD *)(v3 + 28) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)(v3 + 16) = v4;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039AE70);
  }
  long long v5 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *(float **)(a1 + 32);
    double v8 = v7[4];
    double v9 = v7[5];
    double v10 = v7[6];
    double v11 = v7[7];
    double v12 = v7[8];
    double v13 = v7[9];
    double v14 = v7[10];
    int v15 = 134219520;
    double v16 = v8;
    __int16 v17 = 2048;
    double v18 = v9;
    __int16 v19 = 2048;
    double v20 = v10;
    __int16 v21 = 2048;
    double v22 = v11;
    __int16 v23 = 2048;
    double v24 = v12;
    __int16 v25 = 2048;
    double v26 = v13;
    __int16 v27 = 2048;
    double v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[BA] config %f, %f, %f, %f, %f, %f, %f", (uint8_t *)&v15, 0x48u);
  }
  return result;
}

uint64_t sub_10000D298(uint64x2_t *a1, uint64_t a2)
{
  uint64_t v2 = (char *)a1[12].i64[1];
  long long v4 = (char *)a1[13].i64[0];
  uint64_t v3 = &a1[12].i64[1];
  uint64_t v5 = v4 - v2;
  if ((unint64_t)(v4 - v2) > 0x48) {
    return 1;
  }
  uint64_t v7 = a1[4].i64[1];
  if (v7)
  {
    uint64_t v8 = a2 - v7;
    uint64_t v9 = (uint64_t)&a1[13].i64[1];
    unint64_t v10 = a1[13].u64[1];
    if ((unint64_t)v4 >= v10)
    {
      uint64_t v11 = v5 >> 3;
      uint64_t v12 = v10 - (void)v2;
      if (v12 >> 2 <= (unint64_t)((v5 >> 3) + 1)) {
        uint64_t v13 = v11 + 1;
      }
      else {
        uint64_t v13 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      int v15 = (char *)sub_10000EEB0(v9, v14);
      double v16 = (char *)a1[12].i64[1];
      __int16 v17 = (char *)a1[13].i64[0];
      uint64_t v2 = &v15[8 * v11];
      __int16 v19 = &v15[8 * v18];
      *(void *)uint64_t v2 = v8;
      long long v4 = v2 + 8;
      while (v17 != v16)
      {
        uint64_t v20 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v2 - 1) = v20;
        v2 -= 8;
      }
      a1[12].i64[1] = (uint64_t)v2;
      a1[13].i64[0] = (uint64_t)v4;
      a1[13].i64[1] = (uint64_t)v19;
      if (v16)
      {
        operator delete(v16);
        uint64_t v2 = (char *)*v3;
      }
    }
    else
    {
      *(void *)long long v4 = v8;
      v4 += 8;
    }
    a1[13].i64[0] = (uint64_t)v4;
  }
  if (v4 - v2 != 80) {
    return 0;
  }
  double v21 = 1.0 / (float)((float)sub_10000D508((uint64_t)v3) * 0.000001);
  a1[27].i32[1] = (int)v21;
  if (((int)v21 - 271) > 0xFFFFFF04)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039AE70);
    }
    __int16 v25 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
    {
      __int32 v26 = a1[27].i32[1];
      int v27 = 67240192;
      __int32 v28 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[BA] calculatedRate, %{public}d", (uint8_t *)&v27, 8u);
    }
    a1[3] = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x3F4000003E4CCCCDLL, (float)a1[27].i32[1])));
    return 1;
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039AE70);
  }
  double v22 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_ERROR))
  {
    __int32 v23 = a1[27].i32[1];
    int v27 = 67109120;
    __int32 v28 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[BA] error, rate outside possible range, %d", (uint8_t *)&v27, 8u);
  }
  uint64_t result = 0;
  a1[13].i64[0] = a1[12].i64[1];
  a1[27].i32[1] = 0;
  return result;
}

unint64_t sub_10000D508(uint64_t a1)
{
  double v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_100010EB0(&v6, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  uint64_t v1 = v6;
  unint64_t v2 = (unint64_t)(v7 - v6) >> 1;
  uint64_t v3 = &v6[v2];
  if (v3 != v7)
  {
    sub_100010F70((uint64_t)v6, v3, v7);
    uint64_t v1 = v6;
    unint64_t v2 = (unint64_t)(v7 - v6) >> 1;
  }
  unint64_t v4 = v1[v2];
  uint64_t v7 = v1;
  operator delete(v1);
  return v4;
}

void sub_10000D58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10000D5A8(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  unint64_t v2 = *(void ***)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  *(void *)(a1 + 144) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 120);
      unint64_t v2 = (void **)(*(void *)(a1 + 112) + 8);
      *(void *)(a1 + 112) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 1024;
  }
  *(void *)(a1 + 136) = v6;
LABEL_8:
  uint64_t v7 = *(void ***)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 168);
  *(void *)(a1 + 192) = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 168);
      uint64_t v7 = (void **)(*(void *)(a1 + 160) + 8);
      *(void *)(a1 + 160) = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 256;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v11 = 512;
  }
  *(void *)(a1 + 184) = v11;
LABEL_15:
  *(void *)(a1 + 208) = *(void *)(a1 + 200);
  uint64_t v12 = *(void ***)(a1 + 232);
  uint64_t v13 = *(void *)(a1 + 240);
  *(void *)(a1 + 264) = 0;
  unint64_t v14 = v13 - (void)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      uint64_t v15 = *(void *)(a1 + 240);
      uint64_t v12 = (void **)(*(void *)(a1 + 232) + 8);
      *(void *)(a1 + 232) = v12;
      unint64_t v14 = v15 - (void)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 512;
  }
  else
  {
    if (v14 >> 3 != 2) {
      goto LABEL_22;
    }
    uint64_t v16 = 1024;
  }
  *(void *)(a1 + 256) = v16;
LABEL_22:
  __int16 v17 = *(void ***)(a1 + 280);
  uint64_t v18 = *(void *)(a1 + 288);
  *(void *)(a1 + 312) = 0;
  unint64_t v19 = v18 - (void)v17;
  if (v19 >= 0x11)
  {
    do
    {
      operator delete(*v17);
      uint64_t v20 = *(void *)(a1 + 288);
      __int16 v17 = (void **)(*(void *)(a1 + 280) + 8);
      *(void *)(a1 + 280) = v17;
      unint64_t v19 = v20 - (void)v17;
    }
    while (v19 > 0x10);
  }
  if (v19 >> 3 == 1)
  {
    uint64_t v21 = 256;
  }
  else
  {
    if (v19 >> 3 != 2) {
      goto LABEL_29;
    }
    uint64_t v21 = 512;
  }
  *(void *)(a1 + 304) = v21;
LABEL_29:
  *(_DWORD *)(a1 + 448) = -1082130432;
  double v22 = *(void ***)(a1 + 328);
  uint64_t v23 = *(void *)(a1 + 336);
  *(void *)(a1 + 360) = 0;
  unint64_t v24 = v23 - (void)v22;
  if (v24 >= 0x11)
  {
    do
    {
      operator delete(*v22);
      uint64_t v25 = *(void *)(a1 + 336);
      double v22 = (void **)(*(void *)(a1 + 328) + 8);
      *(void *)(a1 + 328) = v22;
      unint64_t v24 = v25 - (void)v22;
    }
    while (v24 > 0x10);
  }
  if (v24 >> 3 == 1)
  {
    uint64_t v26 = 512;
  }
  else
  {
    if (v24 >> 3 != 2) {
      goto LABEL_36;
    }
    uint64_t v26 = 1024;
  }
  *(void *)(a1 + 352) = v26;
LABEL_36:
  int v27 = *(void ***)(a1 + 376);
  uint64_t v28 = *(void *)(a1 + 384);
  *(void *)(a1 + 408) = 0;
  unint64_t v29 = v28 - (void)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      uint64_t v30 = *(void *)(a1 + 384);
      int v27 = (void **)(*(void *)(a1 + 376) + 8);
      *(void *)(a1 + 376) = v27;
      unint64_t v29 = v30 - (void)v27;
    }
    while (v29 > 0x10);
  }
  if (v29 >> 3 == 1)
  {
    uint64_t v31 = 256;
    goto LABEL_42;
  }
  if (v29 >> 3 == 2)
  {
    uint64_t v31 = 512;
LABEL_42:
    *(void *)(a1 + 400) = v31;
  }
  *(_DWORD *)(a1 + 436) = 0;
  *(void *)(a1 + 440) = 1;
  (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  uint64_t v32 = *(void *)(a1 + 32);
  *(void *)(v32 + 48) = 0;
  *(void *)(v32 + 56) = 0;
  *(void *)(v32 + 64) = 0;
  *(void *)&double result = 0x8000000080000000;
  *(void *)(v32 + 72) = 0x8000000080000000;
  *(_OWORD *)(v32 + 80) = xmmword_100338510;
  *(_DWORD *)(v32 + 96) = 0;
  *(unsigned char *)(v32 + 100) = 0;
  __asm { FMOV            V2.2S, #-1.0 }
  *(void *)(v32 + 104) = _D2;
  *(_DWORD *)(v32 + 112) = -1082130432;
  *(void *)(v32 + 120) = 0;
  *(void *)(v32 + 128) = 0;
  *(_DWORD *)(v32 + 136) = -1082130432;
  *(unsigned char *)(v32 + 140) = 0;
  *(void *)(v32 + 144) = 0;
  uint64_t v39 = *(void *)(a1 + 32);
  *(void *)(v39 + 152) = 0;
  *(void *)(v39 + 160) = 0;
  *(void *)(v39 + 168) = 0x8000000080000000;
  *(_OWORD *)(v39 + 176) = xmmword_100338510;
  *(_DWORD *)(v39 + 192) = 0;
  *(unsigned char *)(v39 + 196) = 0;
  *(void *)(v39 + 200) = _D2;
  *(_DWORD *)(v39 + 208) = -1082130432;
  *(void *)(v39 + 216) = 0;
  *(void *)(v39 + 224) = 0;
  *(_DWORD *)(v39 + 232) = -1082130432;
  *(unsigned char *)(v39 + 236) = 0;
  *(void *)(v39 + 240) = 0;
  return result;
}

void sub_10000D89C(uint64_t a1)
{
  id v33 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgBaroConfig" forFeatureMode:*(unsigned __int8 *)(a1 + 24)];
  unint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 1140457472;
  LODWORD(v4) = 1129447424;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v33 withMinValue:0.0 maxValue:v3 defaultValue:v4];
  *(_DWORD *)(*(void *)(a1 + 32) + 16) = v5;

  uint64_t v6 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v7) = 1132068864;
  LODWORD(v8) = 1119092736;
  [v6 algorithmThresholdNumber:1 inArrayForKey:v33 withMinValue:0.0 maxValue:v7 defaultValue:v8];
  *(_DWORD *)(*(void *)(a1 + 32) + 20) = v9;

  uint64_t v10 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v11) = 1128792064;
  LODWORD(v12) = 1176256512;
  LODWORD(v13) = 1145569280;
  [v10 algorithmThresholdNumber:2 inArrayForKey:v33 withMinValue:v11 maxValue:v12 defaultValue:v13];
  *(_DWORD *)(*(void *)(a1 + 32) + 24) = v14;

  uint64_t v15 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v16) = 1120403456;
  LODWORD(v17) = 20.0;
  LODWORD(v18) = 30.0;
  [v15 algorithmThresholdNumber:3 inArrayForKey:v33 withMinValue:v17 maxValue:v16 defaultValue:v18];
  *(_DWORD *)(*(void *)(a1 + 32) + 28) = v19;

  uint64_t v20 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v21) = 1148846080;
  LODWORD(v22) = 5.0;
  [v20 algorithmThresholdNumber:4 inArrayForKey:v33 withMinValue:0.0 maxValue:v21 defaultValue:v22];
  *(_DWORD *)(*(void *)(a1 + 32) + 32) = v23;

  unint64_t v24 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v25) = 1148846080;
  LODWORD(v26) = 8.0;
  [v24 algorithmThresholdNumber:5 inArrayForKey:v33 withMinValue:0.0 maxValue:v25 defaultValue:v26];
  *(_DWORD *)(*(void *)(a1 + 32) + 36) = v27;

  uint64_t v28 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v29) = -5.0;
  LODWORD(v30) = 5.0;
  LODWORD(v31) = 2.0;
  [v28 algorithmThresholdNumber:6 inArrayForKey:v33 withMinValue:v29 maxValue:v30 defaultValue:v31];
  *(_DWORD *)(*(void *)(a1 + 32) + 40) = v32;
}

void sub_10000DA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000DACC(uint64x2_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[4].i64[1];
  uint64_t v5 = *(void *)a2;
  if (v4 && (unint64_t)(v5 - v4) >> 4 >= 0xC35)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039AE70);
    }
    uint64_t v6 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[BA] clearing", v20, 2u);
    }
    double v7 = (void **)a1[7].i64[0];
    uint64_t v8 = a1[7].i64[1];
    a1[9].i64[0] = 0;
    unint64_t v9 = v8 - (void)v7;
    if (v9 >= 0x11)
    {
      do
      {
        operator delete(*v7);
        uint64_t v10 = a1[7].i64[1];
        double v7 = (void **)(a1[7].i64[0] + 8);
        a1[7].i64[0] = (uint64_t)v7;
        unint64_t v9 = v10 - (void)v7;
      }
      while (v9 > 0x10);
    }
    if (v9 >> 3 == 1)
    {
      uint64_t v11 = 512;
    }
    else
    {
      if (v9 >> 3 != 2) {
        goto LABEL_14;
      }
      uint64_t v11 = 1024;
    }
    a1[8].i64[1] = v11;
LABEL_14:
    double v12 = (void **)a1[10].i64[0];
    uint64_t v13 = a1[10].i64[1];
    a1[12].i64[0] = 0;
    unint64_t v14 = v13 - (void)v12;
    if (v14 >= 0x11)
    {
      do
      {
        operator delete(*v12);
        uint64_t v15 = a1[10].i64[1];
        double v12 = (void **)(a1[10].i64[0] + 8);
        a1[10].i64[0] = (uint64_t)v12;
        unint64_t v14 = v15 - (void)v12;
      }
      while (v14 > 0x10);
    }
    if (v14 >> 3 == 1)
    {
      uint64_t v16 = 256;
    }
    else
    {
      if (v14 >> 3 != 2)
      {
LABEL_21:
        a1[27].i64[1] = 1;
        uint64_t v5 = *(void *)a2;
        goto LABEL_22;
      }
      uint64_t v16 = 512;
    }
    a1[11].i64[1] = v16;
    goto LABEL_21;
  }
LABEL_22:
  int v17 = sub_10000D298(a1, v5);
  uint64_t v18 = *(void *)a2;
  a1[4].i64[1] = *(void *)a2;
  if (v17)
  {
    if (a1[27].i8[0])
    {
      a1[26].i64[0] = v18;
      a1[27].i8[0] = 0;
    }
    sub_10000DCB4(&a1[6].i64[1], (float *)(a2 + 8));
    sub_10000DD3C(&a1[9].i64[1], (void *)a2);
    sub_10000DDC4(a1);
    if (a1[9].i64[0] == a1[3].i64[1])
    {
      uint64_t v19 = a1[27].i64[1] - 1;
      a1[27].i64[1] = v19;
      if (!v19)
      {
        sub_10000DE48((uint64_t)a1);
        a1[27].i64[1] = a1[3].i64[0];
      }
    }
  }
}

float sub_10000DCB4(void *a1, float *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100011318(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  float result = *a2;
  *(float *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

void sub_10000DD3C(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100011A9C(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void *sub_10000DDC4(void *result)
{
  unint64_t v1 = result[18];
  if (v1 > result[7])
  {
    unint64_t v2 = result;
    ++result[17];
    result[18] = v1 - 1;
    sub_100012558((uint64_t)(result + 13), 1);
    *(int64x2_t *)(v2 + 23) = vaddq_s64(*(int64x2_t *)(v2 + 23), (int64x2_t)xmmword_100338520);
    return (void *)sub_1000125B8((uint64_t)(v2 + 19), 1);
  }
  return result;
}

void sub_10000DE48(uint64_t a1)
{
  float v2 = sub_10000E2B8(a1, (void *)(a1 + 104));
  uint64_t v3 = *(void *)(a1 + 112);
  unint64_t v5 = *(void *)(a1 + 136);
  unint64_t v4 = *(void *)(a1 + 144);
  uint64_t v6 = (char *)(v3 + 8 * (v5 >> 10));
  uint64_t v7 = *(float **)v6;
  unint64_t v8 = (float *)(*(void *)v6 + 4 * (v5 & 0x3FF));
  uint64_t v9 = *(void *)(v3 + (((v4 + v5) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v4 + v5) & 0x3FF);
  uint64_t v10 = v6;
  if (v8 != (float *)v9)
  {
    uint64_t v11 = (float *)(*(void *)v6 + 4 * (*(void *)(a1 + 136) & 0x3FFLL));
    double v12 = (char *)(v3 + 8 * (v5 >> 10));
    while (1)
    {
      if ((char *)++v11 - (char *)v7 == 4096)
      {
        uint64_t v13 = (float *)*((void *)v12 + 1);
        v12 += 8;
        uint64_t v7 = v13;
        uint64_t v11 = v13;
      }
      if (v11 == (float *)v9) {
        break;
      }
      if (*v8 < *v11)
      {
        uint64_t v10 = v12;
        unint64_t v8 = v11;
      }
    }
  }
  float v14 = *v8 - v2;
  if (v8 == (float *)(*(void *)v6 + 4 * (v5 & 0x3FF))) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = (((uint64_t)v8 - *(void *)v10) >> 2) + ((v10 - v6) << 7) - ((uint64_t)(4 * (v5 & 0x3FF)) >> 2);
  }
  unsigned int v16 = 0;
  uint64_t v17 = *(void *)(a1 + 184);
  uint64_t v18 = *(void *)(a1 + 160);
  uint64_t v19 = *(void *)(v18 + (((unint64_t)(v17 + v15) >> 6) & 0x3FFFFFFFFFFFFF8));
  uint64_t v20 = (v17 + v15) & 0x1FF;
  uint64_t v21 = *(void *)(v19 + 8 * v20);
  float v22 = v14 * 0.2;
  uint64_t v23 = v15 - 1;
  while (v23 + 1 >= 1)
  {
    float v24 = *(float *)(*(void *)(v3 + (((v5 + v23) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v5 + v23) & 0x3FF)) - v2;
    --v23;
    if (v24 < v22) {
      ++v16;
    }
    else {
      unsigned int v16 = 0;
    }
    if (v24 < v22 && v16 >= 3)
    {
      uint64_t v26 = v23 + (int)v16;
      goto LABEL_24;
    }
  }
  uint64_t v26 = -1;
LABEL_24:
  uint64_t v27 = 0;
  signed int v28 = 0;
  uint64_t v29 = ~v17;
  unint64_t v30 = v5 + 1;
  do
  {
    if (v15 + v27 + 1 >= v4)
    {
      *(void *)(a1 + 64) = v21;
      float v38 = -1.0;
      float v37 = -1.0;
      float v34 = -1.0;
      goto LABEL_45;
    }
    float v31 = *(float *)(*(void *)(v3 + (((v15 + v30) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v15 + v30) & 0x3FF)) - v2;
    --v29;
    if (v31 < v22) {
      ++v28;
    }
    else {
      signed int v28 = 0;
    }
    ++v27;
    ++v30;
  }
  while (v31 >= v22 || v28 < 3);
  uint64_t v33 = v27 - v28;
  *(void *)(a1 + 64) = v21;
  float v34 = -1.0;
  if (v33 + v15 < -1
    || v26 < 0
    || v26 == v15
    || (v33 != -1 ? (BOOL v35 = (unint64_t)(v33 + v15 + 1) >= *(void *)(a1 + 56)) : (BOOL v35 = 1), v35))
  {
    float v38 = -1.0;
    float v37 = -1.0;
  }
  else
  {
    unint64_t v36 = *(void *)(*(void *)(v18 + (((unint64_t)(v26 + v17) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((v26 + v17) & 0x1FF));
    float v37 = (float)(*(void *)(*(void *)(v18 + (((unint64_t)(v15 - v28 - v29) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v15 - v28 - v29) & 0x1FF))
                - v36)
        * 0.001;
    float v38 = (float)(*(void *)(v19 + 8 * v20) - v36) * 0.001;
    unint64_t v39 = sub_10000E3D4((void *)a1, v36, v2, v14);
    if (v39) {
      float v34 = (float)(v39 - v36) * 0.001;
    }
  }
LABEL_45:
  float v40 = sub_10000E458((void *)a1);
  BOOL v41 = 0;
  uint64_t v42 = *(void *)(a1 + 32);
  if (v14 > *(float *)(v42 + 24) && v37 > 0.0) {
    BOOL v41 = v37 <= *(float *)(v42 + 16)
  }
       && v37 >= *(float *)(v42 + 28)
       && v38 <= *(float *)(v42 + 20)
       && v40 > *(float *)(v42 + 32);
  uint64_t v43 = *(void *)(a1 + 184);
  uint64_t v44 = *(void *)(a1 + 160);
  uint64_t v45 = *(void *)(*(void *)(v44 + (((unint64_t)(v43 + v15) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((v43 + v15) & 0x1FF));
  if (v37 <= 0.0) {
    uint64_t v46 = 0;
  }
  else {
    uint64_t v46 = *(void *)(*(void *)(v44 + (((unint64_t)(v43 + v26) >> 6) & 0x3FFFFFFFFFFFFF8))
  }
                    + 8 * ((v43 + v26) & 0x1FF));
  char v47 = *(unsigned char *)(v42 + 140);
  if (!v47 && (v14 > *(float *)(v42 + 176) || v45 == *(void *)(v42 + 160) && v37 > 0.0))
  {
    *(void *)(v42 + 152) = v46;
    *(void *)(v42 + 160) = v45;
    *(float *)(v42 + 176) = v14;
    *(float *)(v42 + 180) = v37;
    *(float *)(v42 + 184) = v38;
    *(float *)(v42 + 188) = v34;
    *(float *)(v42 + 208) = v40;
    *(_DWORD *)(v42 + 192) = *(_DWORD *)(a1 + 436);
  }
  if (v41)
  {
    *(unsigned char *)(v42 + 140) = v47 + 1;
    if (v14 > *(float *)(v42 + 80))
    {
      *(float *)(v42 + 80) = v14;
      *(float *)(v42 + 84) = v37;
      *(void *)(v42 + 56) = v46;
      *(void *)(v42 + 64) = v45;
      *(float *)(v42 + 88) = v38;
      *(float *)(v42 + 92) = v34;
      *(float *)(v42 + 112) = v40;
      *(_DWORD *)(v42 + 96) = *(_DWORD *)(a1 + 436);
    }
  }
  *(float *)(v42 + 248) = v2;
}

void sub_10000E21C(void *a1, uint64_t a2)
{
}

uint64_t sub_10000E238(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 24);
  if (v2 == 2)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x10) != 0) {
      return result;
    }
    goto LABEL_6;
  }
  if (v2 != 1 || (*(unsigned char *)(a2 + 1) & 0x10) == 0) {
LABEL_6:
  }
    *(void *)(result + 80) = *(void *)(a2 + 8);
  return result;
}

void *sub_10000E26C(void *result, uint64_t a2)
{
  int v2 = (char *)result + *(void *)(*result - 88);
  int v3 = v2[24];
  if (v3 == 2)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x10) != 0) {
      return result;
    }
    goto LABEL_6;
  }
  if (v3 != 1 || (*(unsigned char *)(a2 + 1) & 0x10) == 0) {
LABEL_6:
  }
    *((void *)v2 + 10) = *(void *)(a2 + 8);
  return result;
}

float sub_10000E2B8(uint64_t a1, void *a2)
{
  sub_100011DB4((uint64_t)&v9, a2);
  int v2 = (float **)(v10 + 8 * (v12 >> 10));
  if (v11 == v10)
  {
    int v3 = 0;
    unint64_t v5 = 0;
    unint64_t v4 = (float **)(v10 + 8 * ((v13 + v12) >> 10));
  }
  else
  {
    int v3 = &(*v2)[v12 & 0x3FF];
    unint64_t v4 = (float **)(v10 + 8 * ((v13 + v12) >> 10));
    unint64_t v5 = &(*v4)[(v13 + v12) & 0x3FF];
  }
  sub_10000EEE8(v2, v3, v4, v5, (uint64_t)&v14);
  unint64_t v6 = v12 + (v13 >> 1);
  if (v13) {
    float v7 = *(float *)(*(void *)(v10 + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF));
  }
  else {
    float v7 = (float)(*(float *)(*(void *)(v10 + (((v6 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v6 - 1) & 0x3FF))
  }
               + *(float *)(*(void *)(v10 + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF)))
       * 0.5;
  sub_100010B8C(&v9);
  return v7;
}

void sub_10000E3C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100010B8C((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10000E3D4(void *a1, unint64_t a2, float a3, float a4)
{
  uint64_t v4 = a1[18];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = 0;
  float v6 = a4 * 0.8;
  while (1)
  {
    if ((float)(*(float *)(*(void *)(a1[14] + (((unint64_t)(a1[17] + v5) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((a1[17] + v5) & 0x3FF))
               - a3) >= v6)
    {
      unint64_t v7 = *(void *)(*(void *)(a1[20] + (((unint64_t)(v5 + a1[23]) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v5 + a1[23]) & 0x1FF));
      if (v7 > a2) {
        break;
      }
    }
    if (v4 == ++v5) {
      return 0;
    }
  }
  return v7;
}

float sub_10000E458(void *a1)
{
  float v16 = -1.0;
  uint64_t v15 = 0;
  uint64_t v2 = a1[39];
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1[38];
    uint64_t v5 = a1[20];
    unint64_t v6 = a1[23];
    uint64_t v7 = *(void *)(v5 + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8));
    uint64_t v8 = a1[35];
    unint64_t v9 = v6 - 1;
    unint64_t v10 = *(void *)(v7 + 8 * (a1[23] & 0x1FFLL));
    float v11 = -1.0;
    do
    {
      unint64_t v12 = *(void *)(*(void *)(v8 + (((unint64_t)(v4 + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v4 + v3) & 0x1FF));
      if (v12 >= v10
        && v12 <= *(void *)(*(void *)(v5 + (((v9 + a1[24]) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v9 + a1[24]) & 0x1FF)))
      {
        float v13 = *(float *)(*(void *)(a1[29] + (((unint64_t)(v3 + a1[32]) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v3 + a1[32]) & 0x3FF));
        if (v13 > v11)
        {
          uint64_t v15 = *(void *)(*(void *)(v8 + (((unint64_t)(v4 + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v4 + v3) & 0x1FF));
          float v16 = v13;
          float v11 = v13;
        }
      }
      ++v3;
    }
    while (v2 != v3);
  }
  sub_10000DCB4(a1 + 40, &v16);
  sub_10000DD3C(a1 + 46, &v15);
  return v16;
}

uint64_t sub_10000E564(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  uint64_t v2 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v3 = *(void *)(v2 + 56);
    if (v3) {
      *(_DWORD *)(v2 + 72) = v3 - v1;
    }
    uint64_t v4 = *(void *)(v2 + 152);
    if (v4) {
      *(_DWORD *)(v2 + 168) = v4 - v1;
    }
    uint64_t v5 = *(void *)(v2 + 64);
    if (v5) {
      *(_DWORD *)(v2 + 76) = v5 - v1;
    }
    uint64_t v6 = *(void *)(v2 + 160);
    if (v6) {
      *(_DWORD *)(v2 + 172) = v6 - v1;
    }
  }
  if (!*(unsigned char *)(v2 + 140))
  {
    *(_OWORD *)(v2 + 56) = *(_OWORD *)(v2 + 152);
    *(_OWORD *)(v2 + 72) = *(_OWORD *)(v2 + 168);
    *(_OWORD *)(v2 + 136) = *(_OWORD *)(v2 + 232);
    *(_OWORD *)(v2 + 120) = *(_OWORD *)(v2 + 216);
    *(_OWORD *)(v2 + 104) = *(_OWORD *)(v2 + 200);
    *(_OWORD *)(v2 + 88) = *(_OWORD *)(v2 + 184);
    uint64_t v2 = *(void *)(result + 32);
  }
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(v2 + 72);
  return result;
}

uint64_t sub_10000E5F8(void *a1)
{
  return sub_10000E564((uint64_t)a1 + *(void *)(*a1 - 144));
}

double sub_10000E614(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v2 = *(void ***)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  *(void *)(a1 + 144) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 120);
      uint64_t v2 = (void **)(*(void *)(a1 + 112) + 8);
      *(void *)(a1 + 112) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 1024;
  }
  *(void *)(a1 + 136) = v6;
LABEL_8:
  uint64_t v7 = *(void ***)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 168);
  *(void *)(a1 + 192) = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 168);
      uint64_t v7 = (void **)(*(void *)(a1 + 160) + 8);
      *(void *)(a1 + 160) = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 256;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v11 = 512;
  }
  *(void *)(a1 + 184) = v11;
LABEL_15:
  unint64_t v12 = *(void ***)(a1 + 232);
  uint64_t v13 = *(void *)(a1 + 240);
  *(void *)(a1 + 264) = 0;
  unint64_t v14 = v13 - (void)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      uint64_t v15 = *(void *)(a1 + 240);
      unint64_t v12 = (void **)(*(void *)(a1 + 232) + 8);
      *(void *)(a1 + 232) = v12;
      unint64_t v14 = v15 - (void)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 512;
  }
  else
  {
    if (v14 >> 3 != 2) {
      goto LABEL_22;
    }
    uint64_t v16 = 1024;
  }
  *(void *)(a1 + 256) = v16;
LABEL_22:
  uint64_t v17 = *(void ***)(a1 + 280);
  uint64_t v18 = *(void *)(a1 + 288);
  *(void *)(a1 + 312) = 0;
  unint64_t v19 = v18 - (void)v17;
  if (v19 >= 0x11)
  {
    do
    {
      operator delete(*v17);
      uint64_t v20 = *(void *)(a1 + 288);
      uint64_t v17 = (void **)(*(void *)(a1 + 280) + 8);
      *(void *)(a1 + 280) = v17;
      unint64_t v19 = v20 - (void)v17;
    }
    while (v19 > 0x10);
  }
  if (v19 >> 3 == 1)
  {
    uint64_t v21 = 256;
  }
  else
  {
    if (v19 >> 3 != 2) {
      goto LABEL_29;
    }
    uint64_t v21 = 512;
  }
  *(void *)(a1 + 304) = v21;
LABEL_29:
  *(_DWORD *)(a1 + 448) = -1082130432;
  float v22 = *(void ***)(a1 + 328);
  uint64_t v23 = *(void *)(a1 + 336);
  *(void *)(a1 + 360) = 0;
  unint64_t v24 = v23 - (void)v22;
  if (v24 >= 0x11)
  {
    do
    {
      operator delete(*v22);
      uint64_t v25 = *(void *)(a1 + 336);
      float v22 = (void **)(*(void *)(a1 + 328) + 8);
      *(void *)(a1 + 328) = v22;
      unint64_t v24 = v25 - (void)v22;
    }
    while (v24 > 0x10);
  }
  if (v24 >> 3 == 1)
  {
    uint64_t v26 = 512;
  }
  else
  {
    if (v24 >> 3 != 2) {
      goto LABEL_36;
    }
    uint64_t v26 = 1024;
  }
  *(void *)(a1 + 352) = v26;
LABEL_36:
  uint64_t v27 = *(void ***)(a1 + 376);
  uint64_t v28 = *(void *)(a1 + 384);
  *(void *)(a1 + 408) = 0;
  unint64_t v29 = v28 - (void)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      uint64_t v30 = *(void *)(a1 + 384);
      uint64_t v27 = (void **)(*(void *)(a1 + 376) + 8);
      *(void *)(a1 + 376) = v27;
      unint64_t v29 = v30 - (void)v27;
    }
    while (v29 > 0x10);
  }
  if (v29 >> 3 == 1)
  {
    uint64_t v31 = 256;
    goto LABEL_42;
  }
  if (v29 >> 3 == 2)
  {
    uint64_t v31 = 512;
LABEL_42:
    *(void *)(a1 + 400) = v31;
  }
  *(void *)(a1 + 440) = 1;
  (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  uint64_t v32 = *(void *)(a1 + 32);
  *(void *)(v32 + 56) = 0;
  *(void *)(v32 + 64) = 0;
  *(void *)&double result = 0x8000000080000000;
  *(void *)(v32 + 72) = 0x8000000080000000;
  *(_OWORD *)(v32 + 80) = xmmword_100338510;
  *(_DWORD *)(v32 + 96) = 0;
  *(unsigned char *)(v32 + 100) = 0;
  __asm { FMOV            V2.2S, #-1.0 }
  *(void *)(v32 + 104) = _D2;
  *(_DWORD *)(v32 + 112) = -1082130432;
  *(void *)(v32 + 120) = 0;
  *(void *)(v32 + 128) = 0;
  *(_DWORD *)(v32 + 136) = -1082130432;
  *(unsigned char *)(v32 + 140) = 0;
  *(void *)(v32 + 144) = 0;
  uint64_t v39 = *(void *)(a1 + 32);
  *(void *)(v39 + 152) = 0;
  *(void *)(v39 + 160) = 0;
  *(void *)(v39 + 168) = 0x8000000080000000;
  *(_OWORD *)(v39 + 176) = xmmword_100338510;
  *(_DWORD *)(v39 + 192) = 0;
  *(unsigned char *)(v39 + 196) = 0;
  *(void *)(v39 + 200) = _D2;
  *(_DWORD *)(v39 + 208) = -1082130432;
  *(void *)(v39 + 216) = 0;
  *(void *)(v39 + 224) = 0;
  *(_DWORD *)(v39 + 232) = -1082130432;
  *(unsigned char *)(v39 + 236) = 0;
  *(void *)(v39 + 240) = 0;
  return result;
}

double sub_10000E8F4(void *a1)
{
  return sub_10000E614((uint64_t)a1 + *(void *)(*a1 - 56));
}

float sub_10000E910(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 128))(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(v5 + 48) = a2;
  *(unsigned char *)(a1 + 432) = 1;
  uint64_t v6 = *(void *)(a1 + 192);
  if (v6)
  {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 160)
                               + (((unint64_t)(v6 + *(void *)(a1 + 184) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v6 + *(void *)(a1 + 184) - 1) & 0x1FF));
    *(void *)(a1 + 424) = v7;
    *(void *)(v5 + 120) = *(void *)(a1 + 416);
    *(void *)(v5 + 128) = v7;
    uint64_t v8 = *(void *)(a1 + 360);
    if (v8)
    {
      *(_DWORD *)(a1 + 448) = -1082130432;
      if (!*(unsigned char *)(v5 + 140)) {
        goto LABEL_14;
      }
      uint64_t v9 = *(void *)(a1 + 408);
      if (!v9) {
        goto LABEL_14;
      }
      char v10 = 0;
      uint64_t v11 = 0;
      float result = *(float *)(v5 + 40) * 1000000.0;
      uint64_t v12 = *(void *)(a1 + 400);
      uint64_t v13 = *(void *)(a1 + 376);
      unint64_t v14 = *(void *)(v5 + 64);
      unint64_t v15 = v14 + (uint64_t)result;
      do
      {
        unint64_t v16 = *(void *)(*(void *)(v13 + (((unint64_t)(v12 + v11) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v12 + v11) & 0x1FF));
        if (v16 + 750000 >= v14 && v16 <= v15)
        {
          float result = *(float *)(*(void *)(*(void *)(a1 + 328)
                                        + (((unint64_t)(v11 + *(void *)(a1 + 352)) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v11 + *(void *)(a1 + 352)) & 0x3FF));
          if (result > *(float *)(v5 + 36))
          {
            *(float *)(v5 + 136) = result;
            *(void *)(v5 + 144) = v16;
            *(float *)(a1 + 448) = result;
            *(void *)(a1 + 456) = v16;
            ++*(unsigned char *)(v5 + 100);
            char v10 = 1;
          }
        }
        ++v11;
      }
      while (v9 != v11);
      if ((v10 & 1) == 0)
      {
LABEL_14:
        unint64_t v18 = *(void *)(a1 + 352);
        uint64_t v19 = *(void *)(a1 + 328);
        uint64_t v20 = (char *)(v19 + 8 * (v18 >> 10));
        if (*(void *)(a1 + 336) == v19)
        {
          float v22 = 0;
          uint64_t v28 = 0;
          unint64_t v24 = (char *)(v19 + 8 * (v18 >> 10));
        }
        else
        {
          uint64_t v21 = *(float **)v20;
          float v22 = (float *)(*(void *)v20 + 4 * (*(void *)(a1 + 352) & 0x3FFLL));
          uint64_t v23 = *(void *)(v19 + (((v18 + v8) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v18 + v8) & 0x3FF);
          unint64_t v24 = (char *)(v19 + 8 * (v18 >> 10));
          if (v22 != (float *)v23)
          {
            uint64_t v25 = (float *)(*(void *)v20 + 4 * (*(void *)(a1 + 352) & 0x3FFLL));
            uint64_t v26 = (char *)(v19 + 8 * (v18 >> 10));
            while (1)
            {
              if ((char *)++v25 - (char *)v21 == 4096)
              {
                uint64_t v27 = (float *)*((void *)v26 + 1);
                v26 += 8;
                uint64_t v21 = v27;
                uint64_t v25 = v27;
              }
              if (v25 == (float *)v23) {
                break;
              }
              if (*v22 < *v25)
              {
                unint64_t v24 = v26;
                float v22 = v25;
              }
            }
          }
          uint64_t v28 = *(void *)v20 + 4 * (*(void *)(a1 + 352) & 0x3FFLL);
        }
        if (v22 == (float *)v28) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = (((uint64_t)v22 - *(void *)v24) >> 2) + ((v24 - v20) << 7) - ((v28 - *(void *)v20) >> 2);
        }
        float result = *(float *)(*(void *)(v19 + (((v29 + v18) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v29 + v18) & 0x3FF));
        *(float *)(a1 + 448) = result;
        uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 376)
                                    + (((unint64_t)(*(void *)(a1 + 400) + v29) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*(void *)(a1 + 400) + v29) & 0x1FF));
        *(void *)(a1 + 456) = v30;
        *(float *)(v5 + 136) = result;
        *(void *)(v5 + 144) = v30;
      }
    }
  }
  return result;
}

float sub_10000EB90(void *a1, uint64_t a2)
{
  return sub_10000E910((uint64_t)a1 + *(void *)(*a1 - 48), a2);
}

void sub_10000EBAC(int64x2_t *a1, uint64_t a2)
{
  if (a1[27].i32[1] >= 1)
  {
    float v5 = sqrtf((float)((float)(*(float *)(a2 + 12) * *(float *)(a2 + 12)) + (float)(*(float *)(a2 + 8) * *(float *)(a2 + 8)))+ (float)(*(float *)(a2 + 16) * *(float *)(a2 + 16)));
    sub_10000DCB4((int64x2_t *)a1[14].i64, &v5);
    sub_10000DD3C((int64x2_t *)a1[17].i64, (void *)a2);
  }
  unint64_t v4 = a1[16].u64[1];
  if (v4 >= 0x321)
  {
    ++a1[16].i64[0];
    a1[16].i64[1] = v4 - 1;
    sub_100012558((uint64_t)a1[14].i64, 1);
    a1[19] = vaddq_s64(a1[19], (int64x2_t)xmmword_100338520);
    sub_1000125B8((uint64_t)a1[17].i64, 1);
  }
}

void sub_10000EC60(void *a1, uint64_t a2)
{
}

void sub_10000EC7C(CLKappaAlgBlock *a1)
{
}

void sub_10000EC88(CLKappaAlgBlock *a1)
{
  sub_10001099C(a1, (uint64_t *)&off_10039A840);

  operator delete();
}

void sub_10000ECCC(void *a1)
{
}

void sub_10000ECF0(void *a1)
{
  sub_10001099C((CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)&off_10039A840);

  operator delete();
}

void sub_10000ED48(void *a1)
{
}

void sub_10000ED6C(void *a1)
{
  sub_10001099C((CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)&off_10039A840);

  operator delete();
}

void sub_10000EDC4(void *a1)
{
}

void sub_10000EDE8(void *a1)
{
  sub_10001099C((CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)&off_10039A840);

  operator delete();
}

void sub_10000EE40(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_10000EE84(void *a1)
{
}

void sub_10000EE98()
{
}

void *sub_10000EEB0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10000B42C();
  }
  return operator new(8 * a2);
}

float **sub_10000EEE8(float **a1, float *a2, float **a3, float *a4, uint64_t a5)
{
  if (a4 == a2 || (v5 = a4 - *a3 + (((char *)a3 - (char *)a1) << 7), uint64_t v6 = (char *)a2 - (char *)*a1, v5 == v6 >> 2)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = 63 - __clz(v5 - (v6 >> 2));
  }
  return sub_10000EF38(a1, a2, a3, a4, a5, 2 * v7, 1);
}

float **sub_10000EF38(float **result, float *a2, float **a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v130 = result;
  v131 = a2;
  BOOL v7 = a2 > a4;
  if (a2 == a4) {
    return result;
  }
  char v10 = a4;
  uint64_t v12 = a2;
  for (uint64_t i = a6 - 1; ; --i)
  {
    unint64_t v14 = v130;
    unint64_t v15 = *a3;
    unint64_t v16 = *v130;
    unint64_t v17 = v10 - *a3 + (((char *)a3 - (char *)v130) << 7) - (v12 - *v130);
    if (!v7)
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (v10 == v15) {
            char v10 = *(a3 - 1) + 1024;
          }
          float v96 = *(v10 - 1);
          if (v96 < *v12)
          {
            float v97 = *v12;
            *uint64_t v12 = v96;
            *(v10 - 1) = v97;
          }
          return result;
        case 3uLL:
          uint64_t v98 = (char *)v12 - (char *)v16;
          uint64_t v99 = v12 - v16;
          if (v98 < -3)
          {
            unint64_t v113 = 1022 - v99;
            v101 = &v130[-(v113 >> 10)];
            v102 = &(*v101)[~(_WORD)v113 & 0x3FF];
          }
          else
          {
            unint64_t v100 = v99 + 1;
            v101 = &v130[v100 >> 10];
            v102 = &(*v101)[v100 & 0x3FF];
          }
          if (v10 == v15)
          {
            uint64_t v114 = (uint64_t)*--a3;
            char v10 = (float *)(v114 + 4096);
          }
          return (float **)sub_10000F97C((uint64_t)v130, v12, (uint64_t)v101, v102, (uint64_t)a3, v10 - 1);
        case 4uLL:
          uint64_t v103 = (char *)v12 - (char *)v16;
          uint64_t v104 = v12 - v16;
          if (v103 < -3)
          {
            v105 = &v130[-((unint64_t)(1022 - v104) >> 10)];
            v106 = &(*v105)[~(1022 - (_WORD)v104) & 0x3FF];
            if ((unint64_t)v103 < 0xFFFFFFFFFFFFFFF9)
            {
              unint64_t v123 = 1021 - v104;
              v115 = &v130[-(v123 >> 10)];
              v116 = &(*v115)[~(_WORD)v123 & 0x3FF];
LABEL_79:
              if (v10 == v15)
              {
                uint64_t v124 = (uint64_t)*--a3;
                char v10 = (float *)(v124 + 4096);
              }
              return (float **)sub_10001023C((uint64_t)v130, v12, (uint64_t)v105, v106, (uint64_t)v115, v116, (uint64_t)a3, v10 - 1);
            }
            unint64_t v107 = 1;
          }
          else
          {
            v105 = &v130[(unint64_t)(v104 + 1) >> 10];
            v106 = &(*v105)[(v104 + 1) & 0x3FF];
            unint64_t v107 = v104 + 2;
          }
          v115 = &v130[v107 >> 10];
          v116 = &(*v115)[v107 & 0x3FF];
          goto LABEL_79;
        case 5uLL:
          uint64_t v108 = (char *)v12 - (char *)v16;
          uint64_t v109 = v12 - v16;
          if (v108 < -3)
          {
            v110 = &v130[-((unint64_t)(1022 - v109) >> 10)];
            v111 = &(*v110)[~(1022 - (_WORD)v109) & 0x3FF];
            if ((unint64_t)v108 < 0xFFFFFFFFFFFFFFF9)
            {
              v117 = &v130[-((unint64_t)(1021 - v109) >> 10)];
              v118 = &(*v117)[~(1021 - (_WORD)v109) & 0x3FF];
              if ((unint64_t)v108 < 0xFFFFFFFFFFFFFFF5)
              {
                unint64_t v125 = 1020 - v109;
                v120 = &v130[-(v125 >> 10)];
                v121 = &(*v120)[~(_WORD)v125 & 0x3FF];
LABEL_74:
                if (v10 == v15)
                {
                  uint64_t v122 = (uint64_t)*--a3;
                  char v10 = (float *)(v122 + 4096);
                }
                return (float **)sub_1000102C0((uint64_t)v130, v12, (uint64_t)v110, v111, (uint64_t)v117, v118, (uint64_t)v120, v121, (uint64_t)a3, v10 - 1);
              }
              unint64_t v119 = 1;
LABEL_73:
              v120 = &v130[v119 >> 10];
              v121 = &(*v120)[v119 & 0x3FF];
              goto LABEL_74;
            }
            unint64_t v112 = 1;
          }
          else
          {
            v110 = &v130[(unint64_t)(v109 + 1) >> 10];
            v111 = &(*v110)[(v109 + 1) & 0x3FF];
            unint64_t v112 = v109 + 2;
          }
          v117 = &v130[v112 >> 10];
          v118 = &(*v117)[v112 & 0x3FF];
          unint64_t v119 = v109 + 3;
          goto LABEL_73;
        default:
          JUMPOUT(0);
      }
    }
    if ((uint64_t)v17 <= 23)
    {
      if (a7) {
        return sub_10000F7CC(v130, v12, (uint64_t)a3, v10);
      }
      else {
        return (float **)sub_10000F87C(v130, v12, (uint64_t)a3, v10);
      }
    }
    if (i == -1) {
      break;
    }
    uint64_t v18 = v17 >> 1;
    uint64_t v19 = sub_10000F768((uint64_t)&v130, v17 >> 1);
    if (v17 < 0x81)
    {
      uint64_t v24 = (char *)v10 - (char *)*a3;
      uint64_t v25 = v24 >> 2;
      if (v24 >= 5)
      {
        unint64_t v26 = v25 - 1;
        float v34 = &a3[v26 >> 10];
        BOOL v35 = &(*v34)[v26 & 0x3FF];
      }
      else
      {
        unint64_t v33 = 1024 - v25;
        float v34 = &a3[-(v33 >> 10)];
        BOOL v35 = &(*v34)[~(_WORD)v33 & 0x3FF];
      }
      sub_10000F97C((uint64_t)v19, v20, (uint64_t)v130, v131, (uint64_t)v34, v35);
      if (a7)
      {
LABEL_33:
        unint64_t v36 = v130;
        float v37 = v131;
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v21 = (char *)v10 - (char *)*a3;
      uint64_t v22 = v21 >> 2;
      if (v21 >= 5)
      {
        unint64_t v23 = v22 - 1;
        uint64_t v28 = &a3[v23 >> 10];
        uint64_t v29 = &(*v28)[v23 & 0x3FF];
      }
      else
      {
        unint64_t v27 = 1024 - v22;
        uint64_t v28 = &a3[-(v27 >> 10)];
        uint64_t v29 = &(*v28)[~(_WORD)v27 & 0x3FF];
      }
      sub_10000F97C((uint64_t)v14, v12, (uint64_t)v19, v20, (uint64_t)v28, v29);
      uint64_t v30 = (char *)v131 - (char *)*v130;
      uint64_t v31 = v30 >> 2;
      if (v30 >= -3)
      {
        unint64_t v32 = v31 + 1;
        BOOL v41 = &v130[v32 >> 10];
        uint64_t v42 = *v41;
        uint64_t v43 = v32 & 0x3FF;
      }
      else
      {
        unint64_t v40 = 1022 - v31;
        BOOL v41 = &v130[-(v40 >> 10)];
        uint64_t v42 = *v41;
        uint64_t v43 = ~v40 & 0x3FFLL;
      }
      uint64_t v44 = &v42[v43];
      uint64_t v46 = sub_10000F768((uint64_t)&v130, v18 - 1);
      uint64_t v47 = (char *)v10 - (char *)*a3;
      uint64_t v48 = v47 >> 2;
      if (v47 < 9)
      {
        unint64_t v54 = 1025 - v48;
        int v50 = &a3[-(v54 >> 10)];
        __int16 v51 = &(*v50)[~(_WORD)v54 & 0x3FF];
      }
      else
      {
        unint64_t v49 = v48 - 2;
        int v50 = &a3[v49 >> 10];
        __int16 v51 = &(*v50)[v49 & 0x3FF];
      }
      uint64_t v55 = a5;
      sub_10000F97C((uint64_t)v41, v44, (uint64_t)v46, v45, (uint64_t)v50, v51);
      uint64_t v56 = (char *)v131 - (char *)*v130;
      uint64_t v57 = v56 >> 2;
      if (v56 < -7)
      {
        unint64_t v62 = 1021 - v57;
        __int16 v59 = &v130[-(v62 >> 10)];
        double v60 = *v59;
        uint64_t v61 = ~v62 & 0x3FFLL;
      }
      else
      {
        unint64_t v58 = v57 + 2;
        __int16 v59 = &v130[v58 >> 10];
        double v60 = *v59;
        uint64_t v61 = v58 & 0x3FF;
      }
      __int16 v63 = &v60[v61];
      uint64_t v64 = sub_10000F768((uint64_t)&v130, v18 + 1);
      int v66 = v65;
      v126 = v10;
      uint64_t v67 = (char *)v10 - (char *)*a3;
      uint64_t v68 = v67 >> 2;
      uint64_t v69 = a7;
      if (v67 < 13)
      {
        unint64_t v73 = 1026 - v68;
        __int16 v71 = &a3[-(v73 >> 10)];
        double v72 = &(*v71)[~(_WORD)v73 & 0x3FF];
      }
      else
      {
        unint64_t v70 = v68 - 3;
        __int16 v71 = &a3[v70 >> 10];
        double v72 = &(*v71)[v70 & 0x3FF];
      }
      double v74 = v63;
      a5 = v55;
      sub_10000F97C((uint64_t)v59, v74, (uint64_t)v64, v66, (uint64_t)v71, v72);
      __int16 v75 = sub_10000F768((uint64_t)&v130, v18 - 1);
      __int16 v77 = v76;
      double v78 = sub_10000F768((uint64_t)&v130, v18);
      double v80 = v79;
      __int16 v81 = sub_10000F768((uint64_t)&v130, v18 + 1);
      sub_10000F97C((uint64_t)v75, v77, (uint64_t)v78, v80, (uint64_t)v81, v82);
      sub_10000F768((uint64_t)&v130, v18);
      int v83 = *(_DWORD *)v131;
      float *v131 = *v84;
      *(_DWORD *)double v84 = v83;
      a7 = v69;
      char v10 = v126;
      if (a7) {
        goto LABEL_33;
      }
    }
    unint64_t v36 = v130;
    float v37 = v131;
    uint64_t v38 = (char *)v131 - (char *)*v130;
    uint64_t v39 = v38 >> 2;
    if (v38 >= 5) {
      int v52 = &(*(float **)((char *)v130 + (((unint64_t)(v39 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v39 - 1) & 0x3FF];
    }
    else {
      int v52 = &v130[-((unint64_t)(1024 - v39) >> 10)][~(1024 - (_WORD)v39) & 0x3FF];
    }
    if (*v52 >= *v131)
    {
      float result = sub_10000FA04(v130, v131, a3, v10);
      a7 = 0;
      v130 = result;
      v131 = v53;
      goto LABEL_46;
    }
LABEL_34:
    sub_10000FBCC(v36, v37, a3, v10, (uint64_t)&v127);
    unsigned int v85 = v127;
    unint64_t v86 = v128;
    if (!v129) {
      goto LABEL_42;
    }
    int v87 = sub_10000FD84((char *)v130, v131, v127, v128);
    uint64_t v88 = (uint64_t)v86 - *(void *)v85;
    uint64_t v89 = v88 >> 2;
    if (v88 >= -3)
    {
      unint64_t v90 = v89 + 1;
      v92 = &v85[8 * (v90 >> 10)];
      v93 = (float *)(*(void *)v92 + 4 * (v90 & 0x3FF));
    }
    else
    {
      unint64_t v91 = 1022 - v89;
      v92 = &v85[-8 * (v91 >> 10)];
      v93 = (float *)(*(void *)v92 + 4 * (~(_WORD)v91 & 0x3FF));
    }
    float result = (float **)sub_10000FD84(v92, v93, (char *)a3, v10);
    if (result)
    {
      a3 = (float **)v85;
      char v10 = v86;
      if (v87) {
        return result;
      }
      goto LABEL_46;
    }
    if (!v87)
    {
LABEL_42:
      float result = (float **)sub_10000EF38(v130, v131, v85, v86, a5, i, a7 & 1);
      a7 = 0;
    }
    v94 = v86 + 1;
    if ((float *)((char *)v86 - *(void *)v85 + 4) == (float *)4096)
    {
      v95 = (float *)*((void *)v85 + 1);
      v85 += 8;
      v94 = v95;
    }
    v130 = (float **)v85;
    v131 = v94;
LABEL_46:
    uint64_t v12 = v131;
    BOOL v7 = v10 > v131;
    if (v10 == v131) {
      return result;
    }
  }
  if (v10 != v12) {
    return sub_100010370((char *)v130, v12, a3, v10, (uint64_t)a3, v10, a5);
  }
  return result;
}

void *sub_10000F768(uint64_t a1, uint64_t a2)
{
  float result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 2);
    if (v4 < 1) {
      result -= (unint64_t)(1023 - v4) >> 10;
    }
    else {
      result += (unint64_t)v4 >> 10;
    }
  }
  return result;
}

float **sub_10000F7CC(float **result, float *a2, uint64_t a3, float *a4)
{
  if (a2 != a4)
  {
    uint64_t v4 = a2 + 1;
    uint64_t v5 = *result;
    while (1)
    {
      if ((char *)v4 - (char *)v5 == 4096)
      {
        uint64_t v6 = result[1];
        ++result;
        uint64_t v5 = v6;
        uint64_t v4 = v6;
      }
      if (v4 == a4) {
        break;
      }
      BOOL v7 = result;
      uint64_t v8 = (uint64_t)v4;
      if (v4 == v5)
      {
        BOOL v7 = result - 1;
        uint64_t v8 = (uint64_t)(*(result - 1) + 1024);
      }
      float v10 = *(float *)(v8 - 4);
      uint64_t v9 = (float *)(v8 - 4);
      float v11 = v10;
      float v12 = *v4;
      if (*v4 < v10)
      {
        uint64_t v13 = v4;
        while (1)
        {
          *uint64_t v13 = v11;
          if (v9 == a2) {
            break;
          }
          unint64_t v14 = v9;
          if (v9 == *v7)
          {
            uint64_t v15 = (uint64_t)*--v7;
            uint64_t v9 = (float *)(v15 + 4096);
          }
          float v16 = *--v9;
          float v11 = v16;
          uint64_t v13 = v14;
          if (v12 >= v16) {
            goto LABEL_16;
          }
        }
        unint64_t v14 = a2;
LABEL_16:
        *unint64_t v14 = v12;
      }
      ++v4;
    }
  }
  return result;
}

void *sub_10000F87C(void *result, float *a2, uint64_t a3, float *a4)
{
  if (a2 != a4)
  {
    uint64_t v4 = (uint64_t)a2 - *result;
    uint64_t v5 = v4 >> 2;
    if (v4 < -3)
    {
      unint64_t v8 = 1022 - v5;
      __int16 v6 = ~(_WORD)v8;
      BOOL v7 = (float **)&result[-(v8 >> 10)];
    }
    else
    {
      __int16 v6 = v5 + 1;
      BOOL v7 = (float **)&result[(unint64_t)(v5 + 1) >> 10];
    }
    uint64_t v9 = *v7;
    float v10 = &(*v7)[v6 & 0x3FF];
    while (v10 != a4)
    {
      uint64_t v11 = v10 - v9;
      if ((char *)v10 - (char *)v9 < 5)
      {
        unint64_t v14 = 1024 - v11;
        __int16 v12 = ~(_WORD)v14;
        uint64_t v13 = &v7[-(v14 >> 10)];
      }
      else
      {
        __int16 v12 = v11 - 1;
        uint64_t v13 = &v7[(unint64_t)(v11 - 1) >> 10];
      }
      uint64_t v15 = *v13;
      float v16 = &(*v13)[v12 & 0x3FF];
      float v17 = *v10;
      float v18 = *v16;
      if (*v10 < *v16)
      {
        uint64_t v19 = v10;
        do
        {
          uint64_t v20 = v16;
          *uint64_t v19 = v18;
          if (v16 == v15)
          {
            uint64_t v21 = *--v13;
            uint64_t v15 = v21;
            float v16 = v21 + 1024;
          }
          float v22 = *--v16;
          float v18 = v22;
          uint64_t v19 = v20;
        }
        while (v17 < v22);
        *uint64_t v20 = v17;
      }
      if ((char *)++v10 - (char *)v9 == 4096)
      {
        unint64_t v23 = v7[1];
        ++v7;
        uint64_t v9 = v23;
        float v10 = v23;
      }
    }
  }
  return result;
}

uint64_t sub_10000F97C(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6 = *a4;
  float v7 = *a2;
  float v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7) {
      return 1;
    }
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    float v9 = *a2;
    if (*a4 >= *a2) {
      return 1;
    }
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

float **sub_10000FA04(float **result, float *a2, float **a3, float *a4)
{
  float v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = (char *)a4 - (char *)*a3;
  uint64_t v7 = v6 >> 2;
  if (v6 < 5) {
    float v8 = &a3[-((unint64_t)(1024 - v7) >> 10)][~(1024 - (_WORD)v7) & 0x3FF];
  }
  else {
    float v8 = &(*(float **)((char *)a3 + (((unint64_t)(v7 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v7 - 1) & 0x3FF];
  }
  float v9 = *v8;
  float v10 = *result;
  uint64_t v11 = a2;
  if (v4 >= v9)
  {
    do
    {
      if ((char *)++v11 - (char *)v10 == 4096)
      {
        uint64_t v13 = result[1];
        ++result;
        float v10 = v13;
        uint64_t v11 = v13;
      }
    }
    while ((result < a3 || result == a3 && v11 < a4) && v4 >= *v11);
  }
  else
  {
    do
    {
      if ((char *)++v11 - (char *)v10 == 4096)
      {
        __int16 v12 = result[1];
        ++result;
        float v10 = v12;
        uint64_t v11 = v12;
      }
    }
    while (v4 >= *v11);
  }
  if (result < a3 || result == a3 && v11 < a4)
  {
    do
    {
      if (a4 == v5)
      {
        unint64_t v14 = *--a3;
        uint64_t v5 = v14;
        a4 = v14 + 1024;
      }
      float v15 = *--a4;
    }
    while (v4 < v15);
  }
  while (result < a3 || result == a3 && v11 < a4)
  {
    float v16 = *v11;
    *uint64_t v11 = *a4;
    *a4 = v16;
    do
    {
      if ((char *)++v11 - (char *)v10 == 4096)
      {
        float v17 = result[1];
        ++result;
        float v10 = v17;
        uint64_t v11 = v17;
      }
    }
    while (v4 >= *v11);
    do
    {
      if (a4 == v5)
      {
        float v18 = *--a3;
        uint64_t v5 = v18;
        a4 = v18 + 1024;
      }
      float v19 = *--a4;
    }
    while (v4 < v19);
  }
  uint64_t v20 = (char *)v11 - (char *)v10;
  uint64_t v21 = v20 >> 2;
  if (v20 < 5) {
    float v22 = &result[-((unint64_t)(1024 - v21) >> 10)][~(1024 - (_WORD)v21) & 0x3FF];
  }
  else {
    float v22 = &(*(float **)((char *)result + (((unint64_t)(v21 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v21 - 1) & 0x3FF];
  }
  if (v22 != a2) {
    *a2 = *v22;
  }
  *float v22 = v4;
  return result;
}

float **sub_10000FBCC@<X0>(float **result@<X0>, float *a2@<X1>, float **a3@<X2>, float *a4@<X3>, uint64_t a5@<X8>)
{
  float v5 = *a2;
  uint64_t v6 = *result;
  uint64_t v7 = a2;
  do
  {
    if ((char *)++v7 - (char *)v6 == 4096)
    {
      float v8 = result[1];
      ++result;
      uint64_t v6 = v8;
      uint64_t v7 = v8;
    }
    float v9 = *v7;
  }
  while (*v7 < v5);
  uint64_t v10 = v7 - v6;
  if ((char *)v7 - (char *)v6 < 5) {
    uint64_t v11 = (uint64_t)&result[-((unint64_t)(1024 - v10) >> 10)][~(1024 - (_WORD)v10) & 0x3FF];
  }
  else {
    uint64_t v11 = (uint64_t)&(*(float **)((char *)result + (((unint64_t)(v10 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v10 - 1) & 0x3FF];
  }
  if ((float *)v11 == a2)
  {
    do
    {
      if (result >= a3 && (result != a3 || v7 >= a4)) {
        break;
      }
      if (a4 == *a3)
      {
        uint64_t v15 = (uint64_t)*--a3;
        a4 = (float *)(v15 + 4096);
      }
      float v16 = *--a4;
    }
    while (v16 >= v5);
  }
  else
  {
    __int16 v12 = *a3;
    do
    {
      if (a4 == v12)
      {
        uint64_t v13 = *--a3;
        __int16 v12 = v13;
        a4 = v13 + 1024;
      }
      float v14 = *--a4;
    }
    while (v14 >= v5);
  }
  BOOL v18 = result != a3 || v7 >= a4;
  if (result < a3) {
    BOOL v18 = 0;
  }
  while (result < a3 || result == a3 && v7 < a4)
  {
    *uint64_t v7 = *a4;
    *a4 = v9;
    do
    {
      if ((char *)++v7 - (char *)v6 == 4096)
      {
        float v19 = result[1];
        ++result;
        uint64_t v6 = v19;
        uint64_t v7 = v19;
      }
      float v9 = *v7;
    }
    while (*v7 < v5);
    uint64_t v20 = *a3;
    do
    {
      if (a4 == v20)
      {
        uint64_t v21 = *--a3;
        uint64_t v20 = v21;
        a4 = v21 + 1024;
      }
      float v22 = *--a4;
    }
    while (v22 >= v5);
  }
  uint64_t v23 = (char *)v7 - (char *)v6;
  uint64_t v24 = v23 >> 2;
  if (v23 < 5)
  {
    unint64_t v27 = 1024 - v24;
    __int16 v25 = ~(_WORD)v27;
    unint64_t v26 = &result[-(v27 >> 10)];
  }
  else
  {
    __int16 v25 = v24 - 1;
    unint64_t v26 = &result[(unint64_t)(v24 - 1) >> 10];
  }
  uint64_t v28 = &(*v26)[v25 & 0x3FF];
  if (v28 != a2) {
    *a2 = *v28;
  }
  *uint64_t v28 = v5;
  *(void *)a5 = v26;
  *(void *)(a5 + 8) = v28;
  *(unsigned char *)(a5 + 16) = v18;
  return result;
}

uint64_t sub_10000FD84(char *a1, float *a2, char *a3, float *a4)
{
  if (a4 == a2) {
    return 1;
  }
  uint64_t v4 = (uint64_t)a4;
  uint64_t v5 = (uint64_t)a3;
  uint64_t v7 = *(float **)a3;
  uint64_t v8 = (uint64_t)a2 - *(void *)a1;
  uint64_t v9 = v8 >> 2;
  BOOL v10 = 1;
  switch((((uint64_t)a4 - *(void *)a3) >> 2) + ((a3 - a1) << 7) - (v8 >> 2))
  {
    case 0:
    case 1:
      return v10;
    case 2:
      if (v7 == a4) {
        uint64_t v4 = *((void *)a3 - 1) + 4096;
      }
      float v11 = *(float *)(v4 - 4);
      float v12 = *a2;
      if (v11 < *a2)
      {
        *a2 = v11;
        *(float *)(v4 - 4) = v12;
      }
      return v10;
    case 3:
      if (v8 < -3)
      {
        float v17 = &a1[-8 * ((unint64_t)(1022 - v9) >> 10)];
        BOOL v18 = (float *)(*(void *)v17 + 4 * (~(1022 - (_WORD)v9) & 0x3FF));
      }
      else
      {
        float v17 = &a1[8 * ((unint64_t)(v9 + 1) >> 10)];
        BOOL v18 = (float *)(*(void *)v17 + 4 * (((_WORD)v9 + 1) & 0x3FF));
      }
      if (v7 == (float *)v4)
      {
        uint64_t v27 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v27 + 4096;
      }
      sub_10000F97C((uint64_t)a1, a2, (uint64_t)v17, v18, v5, (float *)(v4 - 4));
      return 1;
    case 4:
      if (v8 >= -3)
      {
        float v22 = &a1[8 * ((unint64_t)(v9 + 1) >> 10)];
        uint64_t v23 = (float *)(*(void *)v22 + 4 * ((v9 + 1) & 0x3FF));
        unint64_t v24 = v9 + 2;
LABEL_31:
        float v34 = &a1[8 * (v24 >> 10)];
        BOOL v35 = (float *)(*(void *)v34 + 4 * (v24 & 0x3FF));
        goto LABEL_54;
      }
      float v22 = &a1[-8 * ((unint64_t)(1022 - v9) >> 10)];
      uint64_t v23 = (float *)(*(void *)v22 + 4 * (~(1022 - (_WORD)v9) & 0x3FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFF9)
      {
        unint64_t v24 = 1;
        goto LABEL_31;
      }
      float v34 = &a1[-8 * ((unint64_t)(1021 - v9) >> 10)];
      BOOL v35 = (float *)(*(void *)v34 + 4 * (~(1021 - (_WORD)v9) & 0x3FF));
LABEL_54:
      if (v7 == (float *)v4)
      {
        uint64_t v55 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v55 + 4096;
      }
      sub_10001023C((uint64_t)a1, a2, (uint64_t)v22, v23, (uint64_t)v34, v35, v5, (float *)(v4 - 4));
      return 1;
    case 5:
      if (v8 >= -3)
      {
        float v19 = &a1[8 * ((unint64_t)(v9 + 1) >> 10)];
        uint64_t v20 = (float *)(*(void *)v19 + 4 * ((v9 + 1) & 0x3FF));
        unint64_t v21 = v9 + 2;
LABEL_24:
        uint64_t v28 = &a1[8 * (v21 >> 10)];
        uint64_t v29 = (float *)(*(void *)v28 + 4 * (v21 & 0x3FF));
        unint64_t v30 = v9 + 3;
LABEL_25:
        uint64_t v31 = &a1[8 * (v30 >> 10)];
        unint64_t v32 = (float *)(*(void *)v31 + 4 * (v30 & 0x3FF));
        goto LABEL_26;
      }
      float v19 = &a1[-8 * ((unint64_t)(1022 - v9) >> 10)];
      uint64_t v20 = (float *)(*(void *)v19 + 4 * (~(1022 - (_WORD)v9) & 0x3FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFF9)
      {
        unint64_t v21 = 1;
        goto LABEL_24;
      }
      uint64_t v28 = &a1[-8 * ((unint64_t)(1021 - v9) >> 10)];
      uint64_t v29 = (float *)(*(void *)v28 + 4 * (~(1021 - (_WORD)v9) & 0x3FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFF5)
      {
        unint64_t v30 = 1;
        goto LABEL_25;
      }
      uint64_t v31 = &a1[-8 * ((unint64_t)(1020 - v9) >> 10)];
      unint64_t v32 = (float *)(*(void *)v31 + 4 * (~(1020 - (_WORD)v9) & 0x3FF));
LABEL_26:
      if (v7 == (float *)v4)
      {
        uint64_t v33 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v33 + 4096;
      }
      sub_1000102C0((uint64_t)a1, a2, (uint64_t)v19, v20, (uint64_t)v28, v29, (uint64_t)v31, v32, v5, (float *)(v4 - 4));
      return 1;
    default:
      if (v8 <= -8)
      {
        uint64_t v13 = (float **)&a1[-8 * ((unint64_t)(1021 - v9) >> 10)];
        float v14 = &(*v13)[~(1021 - (_WORD)v9) & 0x3FF];
        unint64_t v16 = 1022 - v9;
        goto LABEL_17;
      }
      uint64_t v13 = (float **)&a1[8 * ((unint64_t)(v9 + 2) >> 10)];
      float v14 = &(*v13)[(v9 + 2) & 0x3FF];
      unint64_t v15 = v9 + 1;
      if (v9 == -1)
      {
        unint64_t v16 = 1023;
LABEL_17:
        __int16 v25 = &a1[-8 * (v16 >> 10)];
        unint64_t v26 = (float *)(*(void *)v25 + 4 * (~(_WORD)v16 & 0x3FF));
        goto LABEL_33;
      }
      __int16 v25 = &a1[8 * (v15 >> 10)];
      unint64_t v26 = (float *)(*(void *)v25 + 4 * (v15 & 0x3FF));
LABEL_33:
      sub_10000F97C((uint64_t)a1, a2, (uint64_t)v25, v26, (uint64_t)v13, v14);
      unint64_t v36 = *v13;
      uint64_t v37 = (char *)v14 - (char *)*v13;
      uint64_t v38 = v37 >> 2;
      if (v37 < -3)
      {
        unint64_t v43 = 1022 - v38;
        unint64_t v40 = &v13[-(v43 >> 10)];
        BOOL v41 = *v40;
        uint64_t v42 = ~v43 & 0x3FFLL;
      }
      else
      {
        unint64_t v39 = v38 + 1;
        unint64_t v40 = &v13[v39 >> 10];
        BOOL v41 = *v40;
        uint64_t v42 = v39 & 0x3FF;
      }
      uint64_t v44 = &v41[v42];
      if (v44 == (float *)v4) {
        return 1;
      }
      int v45 = 0;
      while (1)
      {
        uint64_t v46 = v44;
        uint64_t v47 = v40;
        uint64_t v48 = v41;
        float v49 = *v44;
        float v50 = *v14;
        if (*v44 < *v14)
        {
          __int16 v51 = v44;
          while (1)
          {
            *__int16 v51 = v50;
            if (v14 == a2) {
              break;
            }
            int v52 = v14;
            if (v14 == v36)
            {
              __int16 v53 = *--v13;
              unint64_t v36 = v53;
              float v14 = v53 + 1024;
            }
            float v54 = *--v14;
            float v50 = v54;
            __int16 v51 = v52;
            if (v49 >= v54) {
              goto LABEL_46;
            }
          }
          int v52 = a2;
LABEL_46:
          *int v52 = v49;
          if (++v45 == 8) {
            break;
          }
        }
        ++v44;
        BOOL v41 = v48;
        unint64_t v40 = v47;
        if ((char *)(v46 + 1) - (char *)v48 == 4096)
        {
          unint64_t v40 = v47 + 1;
          BOOL v41 = v47[1];
          uint64_t v44 = v41;
        }
        unint64_t v36 = v48;
        uint64_t v13 = v47;
        float v14 = v46;
        if (v44 == (float *)v4) {
          return 1;
        }
      }
      uint64_t v57 = v44 + 1;
      if ((char *)(v44 + 1) - (char *)v48 == 4096) {
        uint64_t v57 = v47[1];
      }
      BOOL v10 = v57 == (float *)v4;
      break;
  }
  return v10;
}

uint64_t sub_10001023C(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6, uint64_t a7, float *a8)
{
  uint64_t result = sub_10000F97C(a1, a2, a3, a4, a5, a6);
  float v13 = *a6;
  if (*a8 < *a6)
  {
    *a6 = *a8;
    *a8 = v13;
    float v14 = *a4;
    if (*a6 < *a4)
    {
      *a4 = *a6;
      *a6 = v14;
      float v15 = *a2;
      if (*a4 < *a2)
      {
        *a2 = *a4;
        *a4 = v15;
      }
    }
  }
  return result;
}

uint64_t sub_1000102C0(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6, uint64_t a7, float *a8, uint64_t a9, float *a10)
{
  uint64_t result = sub_10001023C(a1, a2, a3, a4, a5, a6, a7, a8);
  float v15 = *a8;
  if (*a10 < *a8)
  {
    *a8 = *a10;
    *a10 = v15;
    float v16 = *a6;
    if (*a8 < *a6)
    {
      *a6 = *a8;
      *a8 = v16;
      float v17 = *a4;
      if (*a6 < *a4)
      {
        *a4 = *a6;
        *a6 = v17;
        float v18 = *a2;
        if (*a4 < *a2)
        {
          *a2 = *a4;
          *a4 = v18;
        }
      }
    }
  }
  return result;
}

float **sub_100010370(char *a1, float *a2, float **a3, float *a4, uint64_t a5, float *a6, uint64_t a7)
{
  if (a2 == a4) {
    return (float **)a5;
  }
  uint64_t v9 = a4;
  BOOL v10 = a3;
  unint64_t v39 = a1;
  unint64_t v40 = a2;
  int64_t v13 = ((char *)a3 - a1) << 7;
  float v14 = *a3;
  uint64_t v15 = a4 - *a3 + v13 - (((uint64_t)a2 - *(void *)a1) >> 2);
  if (v15 >= 2)
  {
    int64_t v38 = ((char *)a3 - a1) << 7;
    unint64_t v16 = (unint64_t)(v15 - 2) >> 1;
    do
    {
      float v17 = v39;
      float v18 = v40;
      float v19 = (char *)sub_10000F768((uint64_t)&v39, v16);
      sub_1000105E0(v17, v18, a7, v15, v19, v20);
      --v16;
    }
    while (v16 != -1);
    float v14 = *v10;
    int64_t v13 = v38;
    uint64_t v15 = v38 + v9 - *v10 - (((uint64_t)a2 - *(void *)a1) >> 2);
  }
  if (v9 == a6)
  {
    float v22 = v10;
  }
  else
  {
    unint64_t v21 = v9;
    float v22 = v10;
    do
    {
      float v23 = *v21;
      if (*v21 < *a2)
      {
        *unint64_t v21 = *a2;
        *a2 = v23;
        sub_1000105E0(a1, a2, a7, v15, a1, a2);
        float v14 = *v22;
      }
      if ((char *)++v21 - (char *)v14 == 4096)
      {
        unint64_t v24 = v22[1];
        ++v22;
        float v14 = v24;
        unint64_t v21 = v24;
      }
    }
    while (v21 != a6);
    uint64_t v15 = v13 + v9 - *v10 - (((uint64_t)a2 - *(void *)a1) >> 2);
  }
  if (v15 >= 2)
  {
    do
    {
      float v25 = *a2;
      sub_1000107D4(a1, a2, a7, v15);
      uint64_t v28 = v26;
      uint64_t v29 = *v10;
      uint64_t v30 = (uint64_t)v9;
      if (*v10 == v9) {
        uint64_t v30 = (uint64_t)(*(v10 - 1) + 1024);
      }
      uint64_t v31 = (float *)(v30 - 4);
      if (v31 == v27)
      {
        *uint64_t v27 = v25;
      }
      else
      {
        *uint64_t v27 = *v31;
        uint64_t v32 = (uint64_t)(v27 + 1);
        uint64_t v33 = *(void *)v26;
        if ((float *)((char *)v27 - *(void *)v26 + 4) == (float *)4096)
        {
          uint64_t v28 = v26 + 8;
          uint64_t v32 = *((void *)v26 + 1);
          uint64_t v33 = v32;
        }
        *uint64_t v31 = v25;
        if ((float *)v32 == a2) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = ((v28 - a1) << 7) + ((v32 - v33) >> 2) - (((uint64_t)a2 - *(void *)a1) >> 2);
        }
        sub_1000108F0(a1, (uint64_t)a2, v28, v32, a7, v34);
        uint64_t v29 = *v10;
      }
      if (v9 == v29)
      {
        uint64_t v35 = (uint64_t)*--v10;
        uint64_t v9 = (float *)(v35 + 4096);
      }
      --v9;
    }
    while (v15-- > 2);
  }
  return v22;
}

char *sub_1000105E0(char *result, float *a2, uint64_t a3, uint64_t a4, char *a5, float *a6)
{
  uint64_t v6 = a6;
  v23[0] = result;
  v23[1] = a2;
  if (a2 == a6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (((uint64_t)a6 - *(void *)a5) >> 2) + ((a5 - result) << 7) - (((uint64_t)a2 - *(void *)result) >> 2);
  }
  unint64_t v9 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) >= v8)
    {
      uint64_t v11 = 2 * v8;
      uint64_t v12 = (2 * v8) | 1;
      uint64_t result = (char *)sub_10000F768((uint64_t)v23, v12);
      if (v11 + 2 < a4)
      {
        uint64_t v14 = (uint64_t)v13 - *(void *)result;
        uint64_t v15 = v14 >> 2;
        unint64_t v16 = (float *)(v14 < -3
                      ? *(void *)&result[-8 * ((unint64_t)(1022 - v15) >> 10)]
                      + 4 * (~(1022 - (_WORD)v15) & 0x3FF)
                      : *(void *)&result[((unint64_t)(v15 + 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                      + 4 * ((v15 + 1) & 0x3FF));
        if (*v13 < *v16)
        {
          if ((float *)((char *)++v13 - *(void *)result) == (float *)4096) {
            int64_t v13 = (float *)*((void *)result + 1);
          }
          uint64_t v12 = v11 + 2;
        }
      }
      float v17 = *v13;
      float v18 = *v6;
      if (*v13 >= *v6)
      {
        do
        {
          *uint64_t v6 = v17;
          uint64_t v6 = v13;
          if (v10 < v12) {
            break;
          }
          uint64_t v19 = 2 * v12;
          uint64_t v12 = (2 * v12) | 1;
          uint64_t result = (char *)sub_10000F768((uint64_t)v23, v12);
          if (v19 + 2 < a4)
          {
            uint64_t v20 = (uint64_t)v13 - *(void *)result;
            uint64_t v21 = v20 >> 2;
            float v22 = (float *)(v20 < -3
                          ? *(void *)&result[-8 * ((unint64_t)(1022 - v21) >> 10)]
                          + 4 * (~(1022 - (_WORD)v21) & 0x3FF)
                          : *(void *)&result[((unint64_t)(v21 + 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                          + 4 * ((v21 + 1) & 0x3FF));
            if (*v13 < *v22)
            {
              if ((float *)((char *)++v13 - *(void *)result) == (float *)4096) {
                int64_t v13 = (float *)*((void *)result + 1);
              }
              uint64_t v12 = v19 + 2;
            }
          }
          float v17 = *v13;
        }
        while (*v13 >= v18);
        *uint64_t v6 = v18;
      }
    }
  }
  return result;
}

float sub_1000107D4(void *a1, float *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = a4 - 2;
  if (a4 < 2) {
    uint64_t v5 = a4 - 1;
  }
  uint64_t v6 = v5 >> 1;
  do
  {
    uint64_t v7 = a2;
    if (v4 != -1)
    {
      uint64_t v8 = v4 + 1 + (((uint64_t)a2 - *a1) >> 2);
      if (v8 < 1)
      {
        unint64_t v9 = 1023 - v8;
        a1 -= v9 >> 10;
        a2 = (float *)(*a1 + 4 * (~(_WORD)v9 & 0x3FF));
      }
      else
      {
        a1 += (unint64_t)v8 >> 10;
        a2 = (float *)(*a1 + 4 * (v8 & 0x3FF));
      }
    }
    uint64_t v10 = (2 * v4) | 1;
    uint64_t v4 = 2 * v4 + 2;
    if (v4 >= a4
      || ((uint64_t v11 = (uint64_t)a2 - *a1, v12 = v11 >> 2, v11 < -3)
        ? (int64_t v13 = (float *)(a1[-((unint64_t)(1022 - v12) >> 10)] + 4 * (~(1022 - (_WORD)v12) & 0x3FF)))
        : (int64_t v13 = (float *)(*(void *)((char *)a1 + (((unint64_t)(v12 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((v12 + 1) & 0x3FF))),
          *a2 >= *v13))
    {
      uint64_t v4 = v10;
    }
    else if ((float *)((char *)++a2 - *a1) == (float *)4096)
    {
      uint64_t v14 = (float *)a1[1];
      ++a1;
      a2 = v14;
    }
    float result = *a2;
    *uint64_t v7 = *a2;
  }
  while (v4 <= v6);
  return result;
}

void *sub_1000108F0(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v15[0] = result;
  v15[1] = a2;
  unint64_t v6 = a6 - 2;
  if (a6 >= 2)
  {
    uint64_t v9 = v6 >> 1;
    float result = sub_10000F768((uint64_t)v15, v6 >> 1);
    if (*a3 == a4) {
      a4 = *(a3 - 1) + 4096;
    }
    float v12 = *(float *)(a4 - 4);
    uint64_t v11 = (float *)(a4 - 4);
    float v13 = v12;
    float v14 = *v10;
    if (*v10 < v12)
    {
      do
      {
        *uint64_t v11 = v14;
        uint64_t v11 = v10;
        if (!v9) {
          break;
        }
        uint64_t v9 = (unint64_t)(v9 - 1) >> 1;
        float result = sub_10000F768((uint64_t)v15, v9);
        float v14 = *v10;
      }
      while (*v10 < v13);
      *uint64_t v11 = v13;
    }
  }
  return result;
}

void sub_10001099C(CLKappaAlgBlock *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)((char *)a1 + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 160)) = a2[7];
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 168)) = a2[8];
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 176)) = a2[9];
  sub_100010C84((void *)a1 + 46);
  sub_100010B8C((void *)a1 + 40);
  sub_100010C84((void *)a1 + 34);
  sub_100010B8C((void *)a1 + 28);
  uint64_t v5 = (void *)*((void *)a1 + 25);
  if (v5)
  {
    *((void *)a1 + 26) = v5;
    operator delete(v5);
  }
  sub_100010C84((void *)a1 + 19);
  sub_100010B8C((void *)a1 + 13);
  unint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 5);
  if (v6) {
    sub_10000BB9C(v6);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(a1, a2 + 1);
}

uint64_t sub_100010B8C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_100010C34((uint64_t)a1);
}

uint64_t sub_100010C34(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_100010C84(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_100010C34((uint64_t)a1);
}

void sub_100010D2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10039AEA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100010D4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10039AEA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100010DA0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

double sub_100010DC8(uint64_t a1)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &off_1003A1608;
  *(_OWORD *)(a1 + 16) = xmmword_100338530;
  *(void *)(a1 + 32) = 0x4100000040A00000;
  *(_DWORD *)(a1 + 40) = 0x40000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)&double result = 0x8000000080000000;
  *(void *)(a1 + 72) = 0x8000000080000000;
  __asm { FMOV            V1.2S, #-1.0 }
  *(void *)(a1 + 84) = _D1;
  *(_DWORD *)(a1 + 92) = -1082130432;
  *(unsigned char *)(a1 + 100) = 0;
  *(void *)(a1 + 104) = _D1;
  *(_DWORD *)(a1 + 112) = -1082130432;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1082130432;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0x8000000080000000;
  *(void *)(a1 + 180) = _D1;
  *(_DWORD *)(a1 + 188) = -1082130432;
  *(unsigned char *)(a1 + 196) = 0;
  *(void *)(a1 + 200) = _D1;
  *(_DWORD *)(a1 + 208) = -1082130432;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = -1082130432;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = -1082130432;
  return result;
}

void *sub_100010EB0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = sub_100010F2C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100010F10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100010F2C(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10000EE98();
  }
  double result = (char *)sub_10000EEB0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t sub_100010F70(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  if (a3 != a2)
  {
    uint64_t v3 = a3;
    unint64_t v5 = (unint64_t *)result;
    do
    {
      unint64_t v6 = v3 - v5;
      if (v6 < 2) {
        break;
      }
      if (v6 == 3)
      {
        return sub_10001121C(v5, v5 + 1, v3 - 1);
      }
      if (v6 == 2)
      {
        unint64_t v33 = *(v3 - 1);
        unint64_t v34 = *v5;
        if (v33 < *v5)
        {
          unint64_t *v5 = v33;
          *(v3 - 1) = v34;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 63)
      {
        return (uint64_t)sub_1000112A4(v5, v3);
      }
      uint64_t v7 = &v5[v6 >> 1];
      size_t v8 = v3 - 1;
      double result = sub_10001121C(v5, v7, v3 - 1);
      unint64_t v9 = *v5;
      if (*v5 >= *v7)
      {
        uint64_t v10 = v3 - 1;
        while (--v10 != v5)
        {
          if (*v10 < *v7)
          {
            unint64_t *v5 = *v10;
            *uint64_t v10 = v9;
            double result = (result + 1);
            goto LABEL_13;
          }
        }
        float v22 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v22 != v8)
          {
            unint64_t v23 = *v22;
            if (v9 < *v22)
            {
              *v22++ = *v8;
              *size_t v8 = v23;
              goto LABEL_45;
            }
            ++v22;
          }
          return result;
        }
LABEL_45:
        if (v22 == v8) {
          return result;
        }
        while (1)
        {
          unint64_t v27 = *v5;
          do
          {
            unint64_t v29 = *v22++;
            unint64_t v28 = v29;
          }
          while (v27 >= v29);
          uint64_t v30 = v22 - 1;
          do
          {
            unint64_t v32 = *--v8;
            unint64_t v31 = v32;
          }
          while (v27 < v32);
          if (v30 >= v8) {
            break;
          }
          *uint64_t v30 = v31;
          *size_t v8 = v28;
        }
        unint64_t v5 = v22 - 1;
        if (v30 > a2) {
          return result;
        }
      }
      else
      {
        uint64_t v10 = v3 - 1;
LABEL_13:
        uint64_t v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          unint64_t v16 = v5 + 1;
        }
        else
        {
          float v12 = v5 + 1;
          while (1)
          {
            unint64_t v13 = *v7;
            do
            {
              unint64_t v15 = *v12++;
              unint64_t v14 = v15;
            }
            while (v15 < v13);
            unint64_t v16 = v12 - 1;
            do
            {
              unint64_t v18 = *--v10;
              unint64_t v17 = v18;
            }
            while (v18 >= v13);
            if (v16 >= v10) {
              break;
            }
            *unint64_t v16 = v17;
            *uint64_t v10 = v14;
            double result = (result + 1);
            if (v16 == v7) {
              uint64_t v7 = v10;
            }
          }
        }
        if (v16 != v7)
        {
          unint64_t v19 = *v16;
          if (*v7 < *v16)
          {
            *unint64_t v16 = *v7;
            *uint64_t v7 = v19;
            double result = (result + 1);
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!result)
        {
          if (v16 <= a2)
          {
            unint64_t v24 = v16 + 1;
            while (v24 != v3)
            {
              unint64_t v26 = *(v24 - 1);
              unint64_t v25 = *v24++;
              if (v25 < v26) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v11 != v16)
            {
              unint64_t v21 = *(v11 - 1);
              unint64_t v20 = *v11++;
              if (v20 < v21) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          unint64_t v5 = v16 + 1;
        }
        else {
          uint64_t v3 = v16;
        }
      }
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t sub_10001121C(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  unint64_t v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    unint64_t v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *sub_1000112A4(unint64_t *result, unint64_t *a2)
{
  while (result != a2 - 1)
  {
    uint64_t v2 = result++;
    if (v2 != a2 && result != a2)
    {
      unint64_t v3 = *v2;
      unint64_t v4 = result;
      unint64_t v5 = v2;
      unint64_t v6 = result;
      do
      {
        unint64_t v8 = *v6++;
        unint64_t v7 = v8;
        if (v8 < v3)
        {
          unint64_t v3 = v7;
          unint64_t v5 = v4;
        }
        unint64_t v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v2)
      {
        unint64_t v9 = *v2;
        unint64_t *v2 = *v5;
        unint64_t *v5 = v9;
      }
    }
  }
  return result;
}

void sub_100011318(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_10000EEB0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      int64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100011630(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100011748((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_10000EEB0((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_10000EEB0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0x1000uLL);
  sub_100011868(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100011980((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1000115E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100011630(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  unint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v19 = (char *)sub_10000EEB0(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      unint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        unint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      unint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        unint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        unint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      unint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)unint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_100011748(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_10000EEB0(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_100011868(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_10000EEB0(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_100011980(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_10000EEB0(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_100011A9C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_10000EEB0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      int64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100011630(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100011748((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_10000EEB0((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_10000EEB0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0x1000uLL);
  sub_100011868(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100011980((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100011D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100011DB4(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (char **)(v5 + 8 * (v4 >> 10));
  if (v6 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 10));
  }
  else
  {
    uint64_t v8 = &(*v7)[4 * (v4 & 0x3FF)];
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 10));
    uint64_t v11 = (char *)(*(void *)v10 + 4 * (v9 & 0x3FF));
  }
  sub_100011E60((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100011E4C(_Unwind_Exception *a1)
{
  sub_100010C34(v1);
  _Unwind_Resume(a1);
}

void *sub_100011E60(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = ((uint64_t)&a5[-*(void *)a4] >> 2) + ((a4 - (char *)a2) << 7) - ((a3 - *a2) >> 2);
  }
  return sub_100011E94(a1, a2, a3, v5);
}

void *sub_100011E94(void *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 7) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100011FCC(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  uint64_t v13 = (void *)(v8 + 8 * (v11 >> 10));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 4 * (v11 & 0x3FF);
  }
  v24[0] = v8 + 8 * (v11 >> 10);
  v24[1] = v14;
  double result = sub_10000F768((uint64_t)v24, a4);
  if (v14 != v16)
  {
    uint64_t v17 = a1[5];
    do
    {
      if (v13 == result) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4096;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        uint64_t v19 = *a2;
        int64_t v20 = (_DWORD *)v14;
        do
        {
          int v21 = *(_DWORD *)a3;
          a3 += 4;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            unint64_t v22 = a2[1];
            ++a2;
            uint64_t v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_DWORD *)v18);
      }
      v17 += (v18 - v14) >> 2;
      if (v13 == result) {
        break;
      }
      uint64_t v23 = v13[1];
      ++v13;
      uint64_t v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

void sub_100011FCC(void *a1, unint64_t a2)
{
  BOOL v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x3FF) != 0) {
    unint64_t v6 = (v5 >> 10) + 1;
  }
  else {
    unint64_t v6 = v5 >> 10;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 10) {
    unint64_t v8 = v7 >> 10;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 10)
  {
    for (a1[4] = v7 - (v8 << 10); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          unint64_t v29 = (char *)sub_10000EEB0((uint64_t)(a1 + 3), v28);
          long long v31 = &v29[8 * (v28 >> 2)];
          long long v32 = (uint64_t *)a1[1];
          BOOL v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            BOOL v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            BOOL v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            BOOL v3 = (char *)a1[1];
          }
          unint64_t v27 = &v3[-8 * (v24 >> 1)];
          BOOL v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)BOOL v3 = v18;
      BOOL v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100011630(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100011748((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 1023;
          }
          else {
            uint64_t v64 = 1024;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 10);
      if (v8)
      {
        int v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          uint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              __int16 v79 = (char *)sub_10000EEB0((uint64_t)(a1 + 3), v78);
              __int16 v81 = &v79[8 * (v78 >> 2)];
              double v82 = (uint64_t *)a1[1];
              int v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                int v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                unsigned int v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)unsigned int v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              int v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                int v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              __int16 v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                int v66 = (char *)a1[1];
              }
              __int16 v77 = &v66[-8 * (v74 >> 1)];
              int v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)int v66 = v69;
          int v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      unint64_t v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_10000EEB0((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 10;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        uint64_t v88 = operator new(0x1000uLL);
        sub_100011868(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_10000EEB0((uint64_t)v91, v48);
              __int16 v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                long long v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)long long v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_100011980((uint64_t)__p, v57);
      }
      __int16 v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1000124E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100012558(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

uint64_t sub_1000125B8(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t sub_100012618(uint64_t result)
{
  *(void *)double result = &off_10039AEF0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10001263C(PB::Base *this)
{
  *(void *)this = &off_10039AEF0;
  uint64_t v4 = *((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

void sub_1000126A0(PB::Base *a1)
{
  sub_10001263C(a1);

  operator delete();
}

uint64_t sub_1000126D8(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10039AEF0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  if (*(unsigned char *)(a2 + 20))
  {
    int v2 = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(result + 20) |= 1u;
    *(_DWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_1000127B8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000126D8((uint64_t)v6, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v8;
    uint64_t v8 = v4;
    sub_10001263C((PB::Base *)v6);
  }
  return a1;
}

uint64_t sub_10001281C(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = v2;
  uint64_t v3 = *(void *)(result + 8);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v3;
  LODWORD(v3) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_100012850(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10039AEF0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v6 = *v4;
  uint64_t *v4 = v5;
  if (v6) {
    sub_100012E84((uint64_t)v4, v6);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t sub_1000128C8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100012850((uint64_t)v6, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v8;
    uint64_t v8 = v4;
    sub_10001263C((PB::Base *)v6);
  }
  return a1;
}

uint64_t sub_10001292C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 20)) {
    PB::TextFormatter::format(this, "uploadReason", *(_DWORD *)(a1 + 16));
  }
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format();
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1000129A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        uint64_t v23 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)this + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v32 = v21 + 1;
            char v33 = *(unsigned char *)(v23 + v21);
            *((void *)this + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v21 = v32;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v26) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v26) = 0;
          }
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v27 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v26;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_100012C44(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(void *)(result + 8)) {
    uint64_t result = PB::Writer::write();
  }
  if (*(unsigned char *)(v3 + 20))
  {
    int v4 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(this, v4, 2u);
  }
  return result;
}

BOOL sub_100012CAC(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      unsigned int v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      unsigned int v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  BOOL result = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if ((*(unsigned char *)(a1 + 20) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

unint64_t sub_100012D8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    unint64_t v3 = sub_100012EE0((uint64_t)&v6, v2);
  }
  else {
    unint64_t v3 = 0;
  }
  if (*(unsigned char *)(a1 + 20)) {
    uint64_t v4 = *(int *)(a1 + 16);
  }
  else {
    uint64_t v4 = 0;
  }
  return v4 ^ v3;
}

void *sub_100012DE4(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_100007C74();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_100012E84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    operator delete();
  }
}

unint64_t sub_100012EE0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_100012F20((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_100012F20(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      unint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_1000132CC(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_100013220(a2, a3);
  }
  else
  {
    return sub_100013128(a2, a3);
  }
}

unint64_t sub_100013128(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_100013220(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_1000132CC(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void sub_1000135B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001368C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000137CC(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_100013918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000139AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100013A98(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100013D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100013D48()
{
  if (qword_1003DB770 != -1) {
    dispatch_once(&qword_1003DB770, &stru_10039B000);
  }
  v0 = (void *)qword_1003DB778;

  return v0;
}

void sub_100014100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001439C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000146D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  objc_destroyWeak(v26);
  _Block_object_dispose(&a18, 8);

  objc_destroyWeak((id *)(v27 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_10001479C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000147AC(uint64_t a1)
{
}

void sub_1000147B4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v23 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    id v11 = v8;
    id v12 = *(id *)(v10 + 40);
    *(void *)(v10 + 40) = v11;
  }
  else
  {
    id v12 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_sync_enter(v12);
    if (([v12 registered] & 1) == 0)
    {
      [v12 setRegistered:1];
      [v12 setSubjectID:v23];
      [v12 setSubjectAuthorizationToken:v7];
      unint64_t v13 = +[NSUserDefaults standardUserDefaults];
      unint64_t v14 = [v23 UUIDString];
      uint64_t v15 = [v12 defaultsSubjectIDKeyName];
      [v13 setObject:v14 forKey:v15];

      unint64_t v16 = +[NSUserDefaults standardUserDefaults];
      uint64_t v17 = [v12 defaultsSubjectAuthTokenKeyName];
      [v16 setObject:v7 forKey:v17];

      uint64_t v18 = +[NSUserDefaults standardUserDefaults];
      uint64_t v19 = +[NSDate date];
      [v19 timeIntervalSinceReferenceDate];
      double v21 = v20;
      unint64_t v22 = [v12 defaultsRegistrationDateKeyName];
      [v18 setInteger:(uint64_t)v21 forKey:v22];
    }
    objc_sync_exit(v12);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100014990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

void sub_100014C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100015150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, void *a11)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(v12);

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v15 - 112));
  _Unwind_Resume(a1);
}

id sub_1000152A4(uint64_t a1, void *a2, void *a3)
{
  id v47 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = +[NSFileManager defaultManager];
  if ((sub_10001D0F8(*(void **)(a1 + 32), a3, @"oob") & 1) == 0)
  {
    id v8 = 0;
    goto LABEL_38;
  }
  int64_t v46 = v5;
  uint64_t v44 = +[NSData dataWithContentsOfURL:v47];
  uint64_t v55 = 0;
  uint64_t v56 = &v55;
  uint64_t v57 = 0x3032000000;
  uint64_t v58 = sub_10001479C;
  __int16 v59 = sub_1000147AC;
  id v60 = 0;
  uint64_t v6 = [WeakRetained folderURL];
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472;
  v54[2] = sub_100015B48;
  v54[3] = &unk_10039AF68;
  v54[4] = &v55;
  uint64_t v43 = [v5 enumeratorAtURL:v6 includingPropertiesForKeys:0 options:5 errorHandler:v54];

  id v7 = (void *)v56[5];
  if (v7)
  {
    id v8 = 0;
    *a3 = v7;
    goto LABEL_37;
  }
  id v40 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v44 error:a3];
  if (([v40 containsValueForKey:@"spooled"] & 1) == 0)
  {
    id v8 = 0;
    goto LABEL_36;
  }
  [v40 decodeDoubleForKey:@"enqueueTime"];
  double v10 = v9;
  id v11 = +[NSDate now];
  [v11 timeIntervalSinceReferenceDate];
  double v13 = v12;

  unsigned int v41 = [v40 decodeBoolForKey:@"spooled"];
  uint64_t v45 = [v40 decodeObjectOfClass:objc_opt_class() forKey:@"metadata"];
  if (v41)
  {
    uint64_t v42 = [v47 URLByDeletingPathExtension];
  }
  else
  {
    unint64_t v14 = [v40 decodeObjectOfClass:objc_opt_class() forKey:@"unspooledFilePath"];
    uint64_t v42 = +[NSURL fileURLWithPath:v14];
  }
  [v40 finishDecoding];
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id obj = v43;
  id v15 = [obj countByEnumeratingWithState:&v50 objects:v63 count:16];
  if (!v15) {
    goto LABEL_29;
  }
  uint64_t v16 = *(void *)v51;
  while (2)
  {
    for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v51 != v16) {
        objc_enumerationMutation(obj);
      }
      uint64_t v18 = *(void **)(*((void *)&v50 + 1) + 8 * i);
      uint64_t v19 = [v18 pathExtension];
      unsigned int v20 = [v19 isEqualToString:@"oob"];

      if (v20)
      {
        if ([WeakRetained isFileOldEnoughForDeletion:v18])
        {
          [v46 removeItemAtURL:v18 error:0];
          double v21 = 0;
LABEL_26:

          continue;
        }
        unint64_t v22 = +[NSData dataWithContentsOfURL:v18];
        id v23 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v22 error:a3];
        if (([v23 containsValueForKey:@"enqueueTime"] & 1) == 0)
        {
          [v46 removeItemAtURL:v18 error:0];
          [v40 finishDecoding];

          goto LABEL_34;
        }
        [v23 decodeDoubleForKey:@"enqueueTime"];
        double v25 = v24;
        [WeakRetained oobTimeout];
        if (v25 < v10 + v26)
        {
          uint64_t v27 = [v23 decodeObjectOfClass:objc_opt_class() forKey:@"oobMetadata"];
          [v27 lookBack];
          if (v10 >= v25 - v28)
          {
            double v21 = v27;
            goto LABEL_24;
          }
        }
        double v21 = 0;
LABEL_24:
        [v23 finishDecoding];

        if (v21)
        {
          uint64_t v29 = [v45 keyValuePairs];
          uint64_t v30 = +[NSMutableDictionary dictionaryWithDictionary:v29];

          uint64_t v31 = [v21 keyValuePairs];
          [v30 addEntriesFromDictionary:v31];

          uint64_t v32 = [CSStudiesServerUploadMetadata alloc];
          uint64_t v33 = [v45 payloadType];
          uint64_t v34 = [v45 channel];
          uint64_t v35 = [(CSStudiesServerUploadMetadata *)v32 initWithPayloadType:v33 channel:v34 keyValuePairs:v30];

          LOBYTE(v33) = [WeakRetained persistToDiskWithSpooledFile:v41 fileURL:v42 enqueueTime:v35 metadata:a3 theError:v10];
          if ((v33 & 1) == 0)
          {
            unint64_t v22 = v21;
            goto LABEL_34;
          }
        }
        goto LABEL_26;
      }
    }
    id v15 = [obj countByEnumeratingWithState:&v50 objects:v63 count:16];
    if (v15) {
      continue;
    }
    break;
  }
LABEL_29:

  [WeakRetained oobTimeout];
  if (v13 <= v10 + v36)
  {
    NSErrorUserInfoKey v61 = NSLocalizedDescriptionKey;
    [WeakRetained oobTimeout];
    id obj = +[NSString stringWithFormat:@"OOB Timeout has not passed for file %.0f %.0f %.0f", *(void *)&v13, *(void *)&v10, v38];
    id v62 = obj;
    unint64_t v22 = +[NSDictionary dictionaryWithObjects:&v62 forKeys:&v61 count:1];
    *a3 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:35 userInfo:v22];
LABEL_34:

    id v8 = 0;
  }
  else
  {
    uint64_t v37 = [v47 URLByDeletingPathExtension];
    id obj = [v37 URLByAppendingPathExtension:@"metadata"];

    id v8 = [v46 copyItemAtURL:v47 toURL:obj error:a3];
  }

LABEL_36:
LABEL_37:

  _Block_object_dispose(&v55, 8);
  uint64_t v5 = v46;
LABEL_38:

  return v8;
}

void sub_100015988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100015B48(uint64_t a1, int a2, id obj)
{
  return 0;
}

uint64_t sub_100015B74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v69 = +[NSFileManager defaultManager];
  if (sub_10001D0F8(*(void **)(a1 + 32), a3, @"scanner"))
  {
    uint64_t v68 = +[NSData dataWithContentsOfURL:v5];
    id v67 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v68 error:a3];
    if (([v67 containsValueForKey:@"spooled"] & 1) == 0
      || ![WeakRetained registerForUploadingWithError:a3])
    {
      uint64_t v19 = 0;
LABEL_56:

      goto LABEL_57;
    }
    if ([v67 containsValueForKey:@"unspooledFilePath"]
      && ([v67 decodeObjectOfClass:objc_opt_class() forKey:@"unspooledFilePath"],
          id v7 = objc_claimAutoreleasedReturnValue(),
          (id v8 = v7) != 0))
    {
      double v9 = [v7 lastPathComponent];
      double v10 = [WeakRetained folderURL];
      id v11 = [v10 URLByAppendingPathComponent:v9];
      double v12 = [v11 path];
      unsigned __int8 v13 = [v69 copyItemAtPath:v8 toPath:v12 error:a3];

      if ((v13 & 1) == 0)
      {

        uint64_t v16 = 0;
        uint64_t v19 = 0;
        uint64_t v18 = v8;
        goto LABEL_55;
      }
      unint64_t v14 = [WeakRetained folderURL];
      id v15 = [v14 URLByAppendingPathComponent:v9];
      uint64_t v16 = [v15 path];

      char v17 = 0;
      uint64_t v18 = v8;
    }
    else
    {
      double v9 = [v5 URLByDeletingPathExtension];
      uint64_t v16 = [v9 path];
      uint64_t v18 = 0;
      char v17 = 1;
    }

    if (![*(id *)(a1 + 32) isFileOldEnoughForDeletion:v5])
    {
      char v70 = 0;
      uint64_t v65 = v18;
      unsigned __int8 v20 = [v69 fileExistsAtPath:v16 isDirectory:&v70];
      if (v70) {
        unsigned __int8 v21 = 0;
      }
      else {
        unsigned __int8 v21 = v20;
      }
      if (v21)
      {
        int v66 = [v67 decodeObjectOfClass:objc_opt_class() forKey:@"metadata"];
        [v67 finishDecoding];
        unint64_t v22 = [v66 keyValuePairs];
        char v59 = v17;
        uint64_t v64 = [v22 objectForKey:@"hasIBSOS"];

        if (v64)
        {
          id v23 = v66;
          unsigned int v24 = [v64 isEqualToString:@"1"];
        }
        else
        {
          unsigned int v24 = 0;
          id v23 = v66;
        }
        double v25 = [v23 keyValuePairs];
        __int16 v63 = [v25 objectForKey:@"hasOBSOS"];

        if (v63) {
          unsigned int v26 = [v63 isEqualToString:@"1"];
        }
        else {
          unsigned int v26 = 0;
        }
        uint64_t v27 = [v66 keyValuePairs];
        id v62 = [v27 allKeysForObject:@"companionUploaded"];

        double v28 = [v66 keyValuePairs];
        NSErrorUserInfoKey v61 = [v28 objectForKey:@"recordingUUID"];

        unsigned int v29 = [v62 containsObject:v61];
        if (v29)
        {
          uint64_t v30 = [v66 keyValuePairs];
          [v30 setValue:&off_1003C1A70 forKey:@"uploadedOnCompanionNotification"];
        }
        uint64_t v31 = [v66 keyValuePairs];
        id v60 = [v31 objectForKey:@"shouldUploadIndependentlyOfSOS"];

        if (v60) {
          unsigned int v32 = [v60 isEqualToString:@"1"];
        }
        else {
          unsigned int v32 = 0;
        }
        int v33 = v24 | v26;
        if ((v33 | v32 | v29))
        {
          uint64_t v34 = [v66 keyValuePairs];
          long long v54 = +[NSMutableDictionary dictionaryWithDictionary:v34];

          [v54 removeObjectsForKeys:&off_1003C3460];
          [v66 setKeyValuePairs:v54];
          uint64_t v35 = sub_100013D48();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            double v36 = [v66 keyValuePairs];
            *(_DWORD *)buf = 138544386;
            uint64_t v72 = v16;
            __int16 v73 = 1026;
            int v74 = v33;
            __int16 v75 = 1026;
            unsigned int v76 = v32;
            __int16 v77 = 1026;
            unsigned int v78 = v29;
            __int16 v79 = 2114;
            uint64_t v80 = v36;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "File %{public}@ will be uploaded, SOS: %{public}d independent: %{public}d companion: %{public}d metadata: %{public}@", buf, 0x28u);
          }
          uint64_t v37 = [WeakRetained configuration];
          uint64_t v38 = [v37 certificate];
          SecCertificateRef v57 = sub_10001B6F0(v38);

          unint64_t v39 = [CSHealthWrapMessageConfiguration alloc];
          id v40 = +[NSUUID UUID];
          uint64_t v55 = [WeakRetained subjectID];
          long long v53 = [WeakRetained configuration];
          unsigned int v41 = [v53 studyUUID];
          uint64_t v42 = [v66 channel];
          uint64_t v43 = [v66 payloadType];
          uint64_t v58 = [(CSHealthWrapMessageConfiguration *)v39 initWithCertificate:v57 messageUUID:v40 subjectUUID:v55 studyUUID:v41 channel:v42 payloadType:v43];

          uint64_t v44 = [v66 keyValuePairs];
          [(CSHealthWrapMessageConfiguration *)v58 setKeyValuePairs:v44];

          uint64_t v45 = [[CSHealthWrapMessage alloc] initWithConfiguration:v58];
          int64_t v46 = [v5 URLByDeletingPathExtension];
          uint64_t v56 = [v46 URLByAppendingPathExtension:@"temp"];

          if ([(CSHealthWrapMessage *)v45 startWithOutputFileURL:v56 error:a3])
          {
            id v47 = +[NSURL fileURLWithPath:v16];
            if ([(CSHealthWrapMessage *)v45 appendDataFromFileURL:v47 error:a3]
              && [(CSHealthWrapMessage *)v45 finalizeWithError:a3]
              && [v69 removeItemAtURL:v47 error:a3]
              && ((v59 & 1) != 0 || [v69 removeItemAtPath:v65 error:a3]))
            {
              unint64_t v48 = [v5 URLByDeletingPathExtension];
              uint64_t v49 = [v48 URLByAppendingPathExtension:@"encrypted"];

              uint64_t v19 = (uint64_t)[v69 moveItemAtURL:v56 toURL:v49 error:a3];
            }
            else
            {
              uint64_t v19 = 0;
            }
          }
          else
          {
            uint64_t v19 = 0;
          }
        }
        else
        {
          long long v50 = sub_100013D48();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
          {
            long long v51 = [v66 keyValuePairs];
            *(_DWORD *)buf = 138544386;
            uint64_t v72 = v16;
            __int16 v73 = 1026;
            int v74 = 0;
            __int16 v75 = 1026;
            unsigned int v76 = 0;
            __int16 v77 = 1026;
            unsigned int v78 = 0;
            __int16 v79 = 2114;
            uint64_t v80 = v51;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "File %{public}@ will NOT be uploaded, SOS: %{public}d independent: %{public}d companion: %{public}d metadata: %{public}@", buf, 0x28u);
          }
          uint64_t v19 = ([v69 removeItemAtPath:v16 error:a3] & 1) != 0
             && ((v59 & 1) != 0 || [v69 removeItemAtPath:v65 error:a3]);
        }
      }
      else
      {
        if (!a3)
        {
          uint64_t v19 = 0;
          goto LABEL_55;
        }
        NSErrorUserInfoKey v81 = NSLocalizedDescriptionKey;
        uint64_t v82 = +[NSString stringWithFormat:@"While scanning, can't find file to encrypt at: %@", v16];
        int v66 = (void *)v82;
        uint64_t v64 = +[NSDictionary dictionaryWithObjects:&v82 forKeys:&v81 count:1];
        +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 2);
        uint64_t v19 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }

      uint64_t v18 = v65;
      goto LABEL_55;
    }
    [v69 removeItemAtPath:v16 error:0];
    uint64_t v19 = 1;
LABEL_55:

    goto LABEL_56;
  }
  uint64_t v19 = 0;
LABEL_57:

  return v19;
}

void sub_1000164B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100016784(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v16 = 0;
  char v17 = &v16;
  uint64_t v18 = 0x3032000000;
  uint64_t v19 = sub_10001479C;
  unsigned __int8 v20 = sub_1000147AC;
  id v21 = 0;
  if ([WeakRetained isFileOldEnoughForDeletion:v3])
  {
    uint64_t v5 = 1;
  }
  else
  {
    dispatch_semaphore_t v6 = dispatch_semaphore_create(0);
    id v7 = [WeakRetained submitter];
    double v10 = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472;
    double v12 = sub_100016948;
    unsigned __int8 v13 = &unk_10039AFB8;
    id v15 = &v16;
    id v8 = v6;
    unint64_t v14 = v8;
    [v7 submitFileWithURL:v3 andCompletionHandler:&v10];

    dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v5 = (uint64_t)[v17[5] statusCodeIndicatesSucess:v10, v11, v12, v13];
  }
  _Block_object_dispose(&v16, 8);

  return v5;
}

void sub_1000168F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_100016948(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  if (qword_1003DB770 != -1) {
    dispatch_once(&qword_1003DB770, &stru_10039B000);
  }
  id v8 = (id)qword_1003DB778;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    id v9 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) statusCode];
    int v10 = 134218242;
    id v11 = v9;
    __int16 v12 = 2112;
    id v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Studies Server ingest: %ld %@", (uint8_t *)&v10, 0x16u);
  }
}

void sub_100016A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_10001706C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100017160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  int v10 = v9;

  a9.super_class = (Class)CSStudiesServerUploader;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100017388(id a1)
{
  qword_1003DB778 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "StudiesUploader");

  _objc_release_x1();
}

void sub_100017618(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    id v10 = v8;
    if ([v10 statusCodeIndicatesSucess]
      && ([v10 MIMEType],
          id v11 = objc_claimAutoreleasedReturnValue(),
          unsigned int v12 = [v11 isEqualToString:@"application/json"],
          v11,
          v12))
    {
      id v27 = 0;
      id v13 = +[NSJSONSerialization JSONObjectWithData:v7 options:0 error:&v27];
      id v14 = v27;
      if (v14)
      {
        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      }
      else
      {
        uint64_t v18 = [v13 objectForKey:@"subjectId"];
        if (v18
          && (uint64_t v19 = (void *)v18,
              [v13 objectForKey:@"token"],
              unsigned __int8 v20 = objc_claimAutoreleasedReturnValue(),
              v20,
              v19,
              v20))
        {
          uint64_t v21 = *(void *)(a1 + 32);
          id v22 = objc_alloc((Class)NSUUID);
          id v23 = [v13 objectForKeyedSubscript:@"subjectId"];
          id v24 = [v22 initWithUUIDString:v23];
          double v25 = [v13 objectForKeyedSubscript:@"token"];
          (*(void (**)(uint64_t, id, void *, void))(v21 + 16))(v21, v24, v25, 0);
        }
        else
        {
          unsigned int v26 = +[NSError errorWithDomain:NSCocoaErrorDomain code:1024 userInfo:0];
          (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
        }
      }
    }
    else
    {
      if ([v10 statusCodeIndicatesSucess])
      {
        NSErrorUserInfoKey v28 = NSLocalizedDescriptionKey;
        id v15 = [v10 MIMEType];
        uint64_t v16 = +[NSString stringWithFormat:@"Response type: %@", v15];
        unsigned int v29 = v16;
        char v17 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
        id v14 = +[NSError errorWithDomain:NSURLErrorDomain code:-1011 userInfo:v17];
      }
      else
      {
        NSErrorUserInfoKey v30 = NSLocalizedDescriptionKey;
        id v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"HTTP return code: %ld", [v10 statusCode]);
        uint64_t v31 = v15;
        uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
        id v14 = +[NSError errorWithDomain:NSURLErrorDomain code:-1008 userInfo:v16];
      }

      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
  }
}

void sub_100018100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100018124(uint64_t a1, uint64_t a2, void *a3)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = a3;
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = [*(id *)(*((void *)&v12 + 1) + 8 * i) taskDescription:v12];
        id v10 = [*(id *)(a1 + 32) absoluteString];
        unsigned int v11 = [v9 isEqualToString:v10];

        if (v11)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
          goto LABEL_11;
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1000187F8(id a1)
{
  qword_1003DB798 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "StudiesSubmitter");

  _objc_release_x1();
}

uint64_t sub_10001883C(uint64_t result)
{
  *(void *)unint64_t result = &off_10039B0A0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_100018864(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10001889C(uint64_t result, uint64_t a2)
{
  *(void *)unint64_t result = &off_10039B0A0;
  *(_DWORD *)(result + 12) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_1000188D8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &off_10039B0A0;
    int v3 = *(unsigned char *)(a2 + 12) & 1;
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sub_10001894C(uint64_t result, uint64_t a2)
{
  *(void *)unint64_t result = &off_10039B0A0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_100018980(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &off_10039B0A0;
    uint64_t v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sub_1000189F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "nop", *(_DWORD *)(a1 + 8));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_100018A50(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_100018C88(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  }
  return result;
}

void sub_100018D5C(id a1)
{
  qword_1003DD628 = [[CSKappaTap2RadarConfiguration alloc] initWithAllowOnBattery:0 checkIntervalInSeconds:3600 coolDownPeriodInSeconds:1800];

  _objc_release_x1();
}

void sub_100018E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100018E84(id a1)
{
  qword_1003DD630 = [[CSKappaTap2RadarConfiguration alloc] initWithAllowOnBattery:0 checkIntervalInSeconds:3600 coolDownPeriodInSeconds:1800];

  _objc_release_x1();
}

void sub_100019070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100019090()
{
  if (qword_1003DB7A0 != -1) {
    dispatch_once(&qword_1003DB7A0, &stru_10039B170);
  }
  v0 = (void *)qword_1003DB7A8;

  return v0;
}

void sub_100019380(_Unwind_Exception *a1)
{
  id v6 = v4;

  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1000193F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (sub_10001D0F8(*(void **)(a1 + 32), (void *)a3, @"ttrAction"))
  {
    id v6 = +[NSData dataWithContentsOfURL:v5];
    id v7 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v6 error:a3];
    if (![v7 containsValueForKey:@"triggerUUID"]
      || ([v7 containsValueForKey:@"timestamp"] & 1) == 0)
    {
      a3 = 0;
LABEL_23:

      goto LABEL_24;
    }
    uint64_t v8 = [v7 decodeObjectOfClass:objc_opt_class() forKey:@"triggerUUID"];
    id v9 = [v7 decodeInt64ForKey:@"timestamp"];
    uint64_t v10 = (uint64_t)CFAbsoluteTimeGetCurrent() - (void)v9;
    if (v10 < (uint64_t)[*(id *)(*(void *)(a1 + 32) + 8) coolDownPeriodInSeconds])
    {
      if (qword_1003DB7A0 != -1) {
        dispatch_once(&qword_1003DB7A0, &stru_10039B170);
      }
      unint64_t v11 = (id)qword_1003DB7A8;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        unint64_t v12 = (char *)[*(id *)(*(void *)(a1 + 32) + 8) coolDownPeriodInSeconds];
        *(_DWORD *)buf = 138412546;
        char v25 = v8;
        __int16 v26 = 2048;
        char v27 = &v12[-v10];
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Backing down from TTR %@ because we still need to cool down for %lld seconds", buf, 0x16u);
      }

      if (a3)
      {
        NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
        CFStringRef v23 = @"Cooldown still in place";
        char v13 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
        *(void *)a3 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:35 userInfo:v13];

        a3 = 0;
      }
      goto LABEL_22;
    }
    unsigned int v14 = [*(id *)(a1 + 32) showConfirmationWithError:a3 andEventType:4];
    unsigned int v15 = v14;
    unint64_t v17 = v16;
    if (v14 == 3) {
      goto LABEL_18;
    }
    if (v14 != 4 && ([*(id *)(a1 + 32) showPrivacyNotificationWithError:a3] & 1) != 0)
    {
      char v18 = *(void **)(a1 + 32);
      id v19 = v17;
      if (!v18)
      {
        unint64_t v20 = v19;
        a3 = 0;
        goto LABEL_19;
      }
      if (objc_msgSend(v18, "radarWithResult:triggerUUID:ttrType:error:", v15, v17, v8, 4, a3))
      {
LABEL_18:
        unint64_t v20 = +[NSFileManager defaultManager];
        [v20 removeItemAtURL:v5 error:0];
        a3 = 1;
LABEL_19:

LABEL_21:
LABEL_22:

        goto LABEL_23;
      }
    }
    a3 = 0;
    goto LABEL_21;
  }
  a3 = 0;
LABEL_24:

  return a3;
}

void sub_100019724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000198D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001A0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001A294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001A650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001A7B8(void *a1)
{
  unint64_t v2 = (void *)a1[4];
  id v17 = 0;
  unsigned int v3 = [v2 showConfirmationWithError:&v17 andEventType:a1[6]];
  id v5 = v4;
  id v6 = v17;
  if (v3 - 3 >= 2)
  {
    id v7 = (void *)a1[4];
    id v16 = v6;
    unsigned int v8 = [v7 showPrivacyNotificationWithError:&v16];
    id v9 = v16;

    if (v8)
    {
      uint64_t v10 = (void *)a1[4];
      id v11 = v5;
      uint64_t v12 = a1[5];
      uint64_t v13 = a1[6];
      id v15 = v9;
      if (v10)
      {
        [v10 radarWithResult:v3 triggerUUID:v5 ttrType:v12 error:&v13];
        id v14 = v15;
        id v11 = v9;
        id v9 = v14;
      }
    }
    id v6 = v9;
  }
}

void sub_10001A89C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001A924(id a1)
{
  qword_1003DB7A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "KappaTap2Radar");

  _objc_release_x1();
}

id sub_10001A994(int *a1)
{
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039B1A8);
  }
  unint64_t v2 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *a1;
    *(_DWORD *)buf = 67174657;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending sos event for mode %{private}d", buf, 8u);
  }
  PB::Writer::Writer((PB::Writer *)buf);
  SafetySOSEventDetected::SafetySOSEventDetected((SafetySOSEventDetected *)v7);
  int v4 = *a1;
  v8 |= 1u;
  v7[2] = v4;
  SafetySOSEventDetected::writeTo((uint64_t)v7, (PB::Writer *)buf);
  id v5 = +[NSData dataWithBytes:v10 length:*(void *)buf - v10];
  SafetySOSEventDetected::~SafetySOSEventDetected((SafetySOSEventDetected *)v7);
  PB::Writer::~Writer((PB::Writer *)buf);

  return v5;
}

void sub_10001AAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10001AAF8(void *a1)
{
  id v1 = a1;
  PB::Reader::Reader((PB::Reader *)v8, (const unsigned __int8 *)[v1 bytes], (unint64_t)[v1 length]);
  SafetySOSEventDetected::SafetySOSEventDetected((SafetySOSEventDetected *)v6);
  SafetySOSEventDetected::readFrom((SafetySOSEventDetected *)v6, (PB::Reader *)v8);
  int v2 = v7 << 31 >> 31;
  int v3 = v6[2];
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039B1A8);
  }
  int v4 = v2 & v3;
  id v5 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67174657;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "receiving sos event for mode %{private}d", buf, 8u);
  }
  operator new();
}

void sub_10001AC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SafetySOSEventDetected::~SafetySOSEventDetected((SafetySOSEventDetected *)&a9);

  _Unwind_Resume(a1);
}

id sub_10001AC6C(int8x16_t *a1)
{
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039B1A8);
  }
  int v2 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    int v3 = a1->u8[0];
    uint64_t v4 = a1[1].i64[0];
    uint64_t v5 = a1[2].i64[0];
    *(_DWORD *)buf = 67109632;
    int v14 = v3;
    *(_WORD *)id v15 = 2048;
    *(void *)&void v15[2] = v4;
    *(_WORD *)&v15[10] = 2048;
    *(void *)&v15[12] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending safety remote sample [%d %llu] [%llu]", buf, 0x1Cu);
  }
  PB::Writer::Writer((PB::Writer *)&v11);
  sub_100005810((uint64_t)buf);
  __int32 v7 = a1->i32[1];
  __int32 v6 = a1->i32[2];
  int v18 = a1->u8[0];
  __int32 v19 = v7;
  __int32 v17 = v6;
  uint64_t v8 = a1[1].i64[0];
  uint64_t v16 = a1[1].i64[1];
  *(void *)id v15 = v8;
  v20 |= 0x7Fu;
  *(int8x16_t *)&v15[8] = vextq_s8(a1[2], a1[2], 8uLL);
  sub_100006474((uint64_t)buf, (PB::Writer *)&v11);
  id v9 = +[NSData dataWithBytes:v12 length:v11 - v12];
  PB::Base::~Base((PB::Base *)buf);
  PB::Writer::~Writer((PB::Writer *)&v11);

  return v9;
}

void sub_10001ADE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  PB::Base::~Base((PB::Base *)va1);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void sub_10001AE0C(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = a1;
  PB::Reader::Reader((PB::Reader *)v22, (const unsigned __int8 *)[v3 bytes], (unint64_t)[v3 length]);
  sub_100005810((uint64_t)v17);
  if (sub_100005C6C((uint64_t)v17, (PB::Reader *)v22))
  {
    int v4 = (char)(4 * v21);
    int v5 = v20;
    if (v21) {
      uint64_t v6 = v18;
    }
    else {
      uint64_t v6 = 0;
    }
    int32x2_t v7 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)0x200000004));
    v8.i64[0] = v7.i32[0];
    v8.i64[1] = v7.i32[1];
    int8x16_t v9 = v8;
    int8x16_t v10 = vextq_s8(v19, v19, 8uLL);
    if (qword_1003DB710 != -1)
    {
      int8x16_t v14 = v10;
      int8x16_t v16 = v9;
      dispatch_once(&qword_1003DB710, &stru_10039B1A8);
      int8x16_t v10 = v14;
      int8x16_t v9 = v16;
    }
    int v11 = v5 & (v4 >> 7);
    unint64_t v15 = vbicq_s8(v10, v9).u64[0];
    uint64_t v12 = qword_1003DB718;
    if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109632;
      int v24 = v11;
      __int16 v25 = 2048;
      uint64_t v26 = v6;
      __int16 v27 = 2048;
      unint64_t v28 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "receiving safety remote sample [%d %llu] [%llu]", buf, 0x1Cu);
    }
    operator new();
  }
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039B1A8);
  }
  uint64_t v13 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "receiving invalid safety remote sample", buf, 2u);
  }
  *a2 = 0;
  PB::Base::~Base((PB::Base *)v17);
}

void sub_10001B080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  PB::Base::~Base((PB::Base *)va);

  _Unwind_Resume(a1);
}

id sub_10001B0A8()
{
  int v0 = rand();
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039B1A8);
  }
  id v1 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "sending safety lend punch thru %d", buf, 8u);
  }
  PB::Writer::Writer((PB::Writer *)buf);
  sub_100007DAC((uint64_t)v4);
  v5 |= 1u;
  _DWORD v4[2] = v0;
  sub_10000821C((uint64_t)v4, (PB::Writer *)buf);
  int v2 = +[NSData dataWithBytes:v7 length:*(void *)buf - v7];
  PB::Base::~Base((PB::Base *)v4);
  PB::Writer::~Writer((PB::Writer *)buf);

  return v2;
}

void sub_10001B1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10001B208(void *a1)
{
  id v1 = a1;
  PB::Reader::Reader((PB::Reader *)v8, (const unsigned __int8 *)[v1 bytes], (unint64_t)[v1 length]);
  sub_100007DAC((uint64_t)v6);
  sub_100007FE4((uint64_t)v6, (PB::Reader *)v8);
  int v2 = v7 << 31 >> 31;
  int v3 = v6[2];
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039B1A8);
  }
  int v4 = v2 & v3;
  char v5 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "receiving safety lend punch thru %d", buf, 8u);
  }
  operator new();
}

void sub_10001B354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PB::Base::~Base((PB::Base *)&a9);

  _Unwind_Resume(a1);
}

id sub_10001B37C()
{
  int v0 = rand();
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039B1A8);
  }
  id v1 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "sending safety retract punch thru %d", buf, 8u);
  }
  PB::Writer::Writer((PB::Writer *)buf);
  sub_10001883C((uint64_t)v4);
  v5 |= 1u;
  _DWORD v4[2] = v0;
  sub_100018C88((uint64_t)v4, (PB::Writer *)buf);
  int v2 = +[NSData dataWithBytes:v7 length:*(void *)buf - v7];
  PB::Base::~Base((PB::Base *)v4);
  PB::Writer::~Writer((PB::Writer *)buf);

  return v2;
}

void sub_10001B4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10001B4DC(void *a1)
{
  id v1 = a1;
  PB::Reader::Reader((PB::Reader *)v8, (const unsigned __int8 *)[v1 bytes], (unint64_t)[v1 length]);
  sub_10001883C((uint64_t)v6);
  sub_100018A50((uint64_t)v6, (PB::Reader *)v8);
  int v2 = v7 << 31 >> 31;
  int v3 = v6[2];
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039B1A8);
  }
  int v4 = v2 & v3;
  char v5 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "receiving safety retract punch thru %d", buf, 8u);
  }
  operator new();
}

void sub_10001B628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PB::Base::~Base((PB::Base *)&a9);

  _Unwind_Resume(a1);
}

void sub_10001B650(id a1)
{
  qword_1003DB718 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Companion");

  _objc_release_x1();
}

id sub_10001B694(void *a1)
{
  id v1 = a1;
  id v2 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v1 options:0];

  return v2;
}

SecCertificateRef sub_10001B6F0(void *a1)
{
  sub_10001B694(a1);
  CFDataRef v1 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  SecCertificateRef v2 = SecCertificateCreateWithData(0, v1);

  return v2;
}

void sub_10001C07C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = +[GPBMessage message];
  unsigned __int8 v7 = +[GPBMessage message];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v7 setType:1];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v7 setType:3];
      [v7 setString:v5];
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [v7 setType:4];
        [v7 setInteger:[v5 integerValue]];
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [v7 setType:2];
          [v7 setBytes:v5];
        }
        else
        {
          +[NSException raise:NSInvalidArgumentException, @"Invalid value type for key: %@", v8 format];
        }
      }
    }
  }
  [v6 setValue:v7];
  [v6 setKey:v8];
  [*(id *)(a1 + 32) addObject:v6];
}

void sub_10001C4E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  SecCertificateRef v2 = *(NSObject **)(v1 + 72);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001C558;
  block[3] = &unk_10039B1F8;
  block[4] = v1;
  dispatch_sync(v2, block);
}

void sub_10001C558(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  id v2 = [v1[1] data];
  [v1 _writeDataToCompressor:v2];
}

id sub_10001CB7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _writeDataToCompressor:*(void *)(a1 + 40)];
}

id sub_10001CC88(uint64_t a1)
{
  return [*(id *)(a1 + 32) _finalize];
}

void sub_10001CF30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(void **)(*(void *)(a1 + 32) + 48);
  id obj = 0;
  unsigned __int8 v4 = [v3 appendData:v2 error:&obj];
  id v5 = obj;
  *(unsigned char *)(*(void *)(a1 + 32) + 82) = v4;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 88), v5);
}

void sub_10001CFF8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48);
  id obj = 0;
  unsigned __int8 v3 = [v2 finalizeWithError:&obj];
  id v4 = obj;
  *(unsigned char *)(*(void *)(a1 + 32) + 82) = v3;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 88), v4);
}

uint64_t sub_10001D0F8(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  unsigned __int8 v7 = +[NSFileManager defaultManager];
  char v18 = 0;
  id v8 = [v5 folderURL];
  int8x16_t v9 = [v8 path];
  unsigned int v10 = [v7 fileExistsAtPath:v9 isDirectory:&v18];
  if (v18) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }

  if (a2) {
    char v12 = v11;
  }
  else {
    char v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    uint64_t v13 = [v5 folderURL];
    int8x16_t v14 = [v13 path];
    unint64_t v15 = +[NSString stringWithFormat:@"On %@ find spooler directory at: %@", v6, v14];
    unsigned __int8 v20 = v15;
    int8x16_t v16 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    *a2 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:2 userInfo:v16];
  }
  return v11;
}

void sub_10001D2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001D3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001D51C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001D8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38,char a39)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_10001D978(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001D988(uint64_t a1)
{
}

uint64_t sub_10001D990(uint64_t a1, int a2, id obj)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), obj);
  id v5 = obj;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;

  return 0;
}

void sub_10001D9E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned __int8 v3 = [*(id *)(a1 + 40) path];
  LODWORD(v2) = [v2 fileExistsAtPath:v3];

  if (v2)
  {
    if (qword_1003DB7D0 != -1) {
      dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
    }
    id v4 = (id)qword_1003DB7D8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      id v5 = [*(id *)(a1 + 48) folderURL];
      id v6 = [*(id *)(a1 + 48) extension];
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      unint64_t v28 = v5;
      __int16 v29 = 2112;
      id v30 = v6;
      __int16 v31 = 2112;
      uint64_t v32 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Folder monitor for %@ %@ attempting action on %@", buf, 0x20u);
    }
    id v8 = [*(id *)(a1 + 48) action];
    uint64_t v9 = *(void *)(a1 + 40);
    id v26 = 0;
    int v10 = ((uint64_t (**)(void, uint64_t, id *))v8)[2](v8, v9, &v26);
    id v11 = v26;

    if (v10)
    {
      char v12 = *(void **)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      id v25 = v11;
      unsigned __int8 v14 = [v12 removeItemAtURL:v13 error:&v25];
      id v15 = v25;

      if ((v14 & 1) == 0)
      {
        if (qword_1003DB7D0 != -1) {
          dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
        }
        int8x16_t v16 = qword_1003DB7D8;
        if (os_log_type_enabled((os_log_t)qword_1003DB7D8, OS_LOG_TYPE_ERROR))
        {
          __int32 v17 = *(void **)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          unint64_t v28 = v17;
          __int16 v29 = 2112;
          id v30 = v15;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Unable to remove file %@: %@", buf, 0x16u);
        }
      }
      if (qword_1003DB7D0 != -1) {
        dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
      }
      char v18 = (id)qword_1003DB7D8;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        NSErrorUserInfoKey v19 = [*(id *)(a1 + 48) folderURL];
        unsigned __int8 v20 = [*(id *)(a1 + 48) extension];
        uint64_t v21 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412802;
        unint64_t v28 = v19;
        __int16 v29 = 2112;
        id v30 = v20;
        __int16 v31 = 2112;
        uint64_t v32 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Action for %@ %@ on %@ succeeded", buf, 0x20u);
      }
    }
    else
    {
      if (qword_1003DB7D0 != -1) {
        dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
      }
      char v18 = (id)qword_1003DB7D8;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        NSErrorUserInfoKey v22 = [*(id *)(a1 + 48) folderURL];
        CFStringRef v23 = [*(id *)(a1 + 48) extension];
        uint64_t v24 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138413058;
        unint64_t v28 = v22;
        __int16 v29 = 2112;
        id v30 = v23;
        __int16 v31 = 2112;
        uint64_t v32 = v24;
        __int16 v33 = 2112;
        id v34 = v11;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Action for %@ %@ on %@ failed: %@", buf, 0x2Au);
      }
      id v15 = v11;
    }
  }
}

void sub_10001DD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  _Unwind_Resume(a1);
}

void sub_10001E2CC(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (qword_1003DB7D0 != -1) {
    dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
  }
  id v5 = qword_1003DB7D8;
  if (os_log_type_enabled((os_log_t)qword_1003DB7D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 134218496;
    *(void *)double v36 = state;
    *(_WORD *)&v36[8] = 2048;
    *(void *)&v36[10] = v6;
    *(_WORD *)&v36[18] = 2048;
    *(void *)&v36[20] = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "xpc activity state %ld begin %p %p", buf, 0x20u);
  }
  if (state == 2)
  {
    __int32 v17 = +[CSPower sharedInstance];
    [v17 powerlogActivity:4 state:CFAbsoluteTimeGetCurrent()];

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    id v34 = 0;
    unsigned int v19 = [WeakRetained scan:&v34];
    id v20 = v34;

    if ((v19 & 1) == 0)
    {
      if (qword_1003DB7D0 != -1) {
        dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
      }
      uint64_t v21 = qword_1003DB7D8;
      if (os_log_type_enabled((os_log_t)qword_1003DB7D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        *(void *)double v36 = v22;
        *(_WORD *)&v36[8] = 2112;
        *(void *)&v36[10] = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Error scanning folder on activity %@: %@", buf, 0x16u);
      }
    }
    BOOL v23 = xpc_activity_set_state(v3, 5);
    if (qword_1003DB7D0 != -1) {
      dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
    }
    uint64_t v24 = qword_1003DB7D8;
    if (os_log_type_enabled((os_log_t)qword_1003DB7D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      *(void *)double v36 = v25;
      *(_WORD *)&v36[8] = 1024;
      *(_DWORD *)&v36[10] = v19;
      *(_WORD *)&v36[14] = 1024;
      *(_DWORD *)&v36[16] = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Ran %@ activity. Worked: %d set as done: %d", buf, 0x18u);
    }
    id v26 = +[CSPower sharedInstance];
    [v26 powerlogActivity:4 state:CFAbsoluteTimeGetCurrent()];
  }
  else
  {
    if (!state)
    {
      uint64_t v7 = +[CSPower sharedInstance];
      [v7 powerlogActivity:3 state:CFAbsoluteTimeGetCurrent()];

      id v8 = +[CSPersistentConfiguration sharedConfiguration];
      id v9 = [v8 integerForKey:@"UploaderOverrideAllIntervals"];

      if (!v9)
      {
        if (qword_1003DB7D0 != -1) {
          dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
        }
        __int16 v29 = qword_1003DB7D8;
        if (os_log_type_enabled((os_log_t)qword_1003DB7D8, OS_LOG_TYPE_INFO))
        {
          uint64_t v30 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412290;
          *(void *)double v36 = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Checked in for folder scanning activity: %@", buf, 0xCu);
        }
LABEL_41:
        __int16 v33 = +[CSPower sharedInstance];
        [v33 powerlogActivity:3 state:CFAbsoluteTimeGetCurrent()];

        if (qword_1003DB7D0 != -1) {
          dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
        }
        unint64_t v28 = qword_1003DB7D8;
        if (os_log_type_enabled((os_log_t)qword_1003DB7D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)double v36 = 0;
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      xpc_object_t v10 = xpc_activity_copy_criteria(v3);
      id v11 = v10;
      if (v10)
      {
        xpc_dictionary_set_uint64(v10, XPC_ACTIVITY_INTERVAL, (uint64_t)v9);
        xpc_activity_set_criteria(v3, v11);
        if (qword_1003DB7D0 != -1) {
          dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
        }
        uint64_t v12 = qword_1003DB7D8;
        if (!os_log_type_enabled((os_log_t)qword_1003DB7D8, OS_LOG_TYPE_INFO)) {
          goto LABEL_40;
        }
        uint64_t v13 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 134218242;
        *(void *)double v36 = v9;
        *(_WORD *)&v36[8] = 2112;
        *(void *)&v36[10] = v13;
        unsigned __int8 v14 = "Checked in with overriden period of %llu seconds for folder scanning activity: %@";
        id v15 = v12;
        uint32_t v16 = 22;
      }
      else
      {
        if (qword_1003DB7D0 != -1) {
          dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
        }
        uint64_t v31 = qword_1003DB7D8;
        if (!os_log_type_enabled((os_log_t)qword_1003DB7D8, OS_LOG_TYPE_INFO)) {
          goto LABEL_40;
        }
        uint64_t v32 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        *(void *)double v36 = v32;
        unsigned __int8 v14 = "Checked in with NULL criteria for folder scanning activity: %@";
        id v15 = v31;
        uint32_t v16 = 12;
      }
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v14, buf, v16);
LABEL_40:

      goto LABEL_41;
    }
    if (qword_1003DB7D0 != -1) {
      dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
    }
    __int16 v27 = qword_1003DB7D8;
    if (os_log_type_enabled((os_log_t)qword_1003DB7D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)double v36 = 0;
      *(_WORD *)&v36[4] = 2082;
      *(void *)&v36[6] = "";
      *(_WORD *)&v36[14] = 2050;
      *(void *)&v36[16] = state;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"skip folder scanning activity\", \"Current State\":%{public}ld}", buf, 0x1Cu);
    }
  }
  if (qword_1003DB7D0 != -1) {
    dispatch_once(&qword_1003DB7D0, &stru_10039B2B8);
  }
  unint64_t v28 = qword_1003DB7D8;
  if (os_log_type_enabled((os_log_t)qword_1003DB7D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)double v36 = state;
LABEL_45:
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "xpc activity state %ld end", buf, 0xCu);
  }
LABEL_46:
}

void sub_10001E8E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001EA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10001EAEC(id a1)
{
  qword_1003DB7D8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "FolderMonitor");

  _objc_release_x1();
}

void sub_10001EC10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001ED78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001EE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001EEF4(id a1)
{
  uint64_t v1 = [CSStudiesServerConfiguration alloc];
  id v4 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"28ed3541-9da1-411d-81ae-eb620f6b3a8d"];
  uint64_t v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", @"https://ingest.apple-studies.com", @"MIIDjTCCAnWgAwIBAgIEFN2TTjANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzODI4WhcNMTgwNDE4MTgzODI4WjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvR2JtAkPdG/BldPRT7EupiMo4ZvLOzztoDeul2awbM9fBU8kc3nlapOi2vooX62cyPJKsqCas465gy4U3JJBMVg/MjshfUIDBb1LQzGtvfYkirdpWOqJ7riQ0Wbe6LLRFD0963JNF1lyMHkf7OqZegIh8c+xGGgd2ynkdivaKOr2d7Qf67y2UarQc+qIgkljsaOugfBr3jsUcO0tE0j9LGOvTZZEZd3ykXUEChIkwGW+QWWd3Indit4ArSMGDjkrltGX88FBWgbPYe8dgjWcE2GkEEWhJFwIiTCHQZFHlizSzY5vyG0mcbgdl/HjbyswUn3kw8CvmSOuzi7YNolypAgMBAAGjITAfMB0GA1UdDgQWBBRaESD5M6MGBsOr4aMdm42SVZwycDANBgkqhkiG9w0BAQsFAAOCAQEAVg1mV0Zf9/o+cAbwvcQgdGIbeUghVdDybkVkeew/3dpdRN/S9k9BTusNL4gNKbRRIjJiESq68rP++8BP7xhIO3EsICFAo/fp87af1EncYIjwh9V6P77V+wnvU8Ehgj9tGj5GhU/o1tmCLmBsJi+uUz8vd7p8S/CbH0wUpe0uov4d79R1DGYrM+fansMd9JnmZfLeGU1sx2q+hEfAZyuSRJEf4+GbgEuthq0aBNC6VeXVmmNqd36at3F9O4DzJiJOZiEHXNYOXiyJYSBEvgKdd23G9tR1Pdqw//0sKv/C4b3FQWowN7uZzJ3SJTrolzpUGlTSy5PPeXsmsL7TKM27uA==");
  unsigned __int8 v3 = (void *)qword_1003DD648;
  qword_1003DD648 = (uint64_t)v2;
}

void sub_10001EF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001EFF4(id a1)
{
  uint64_t v1 = [CSStudiesServerConfiguration alloc];
  id v4 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"219833ee-013d-42e5-ae9b-5bc7f73eadeb"];
  uint64_t v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", @"https://ingest.apple-studies.com", @"MIIDjTCCAnWgAwIBAgIEFN2TTjANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzODI4WhcNMTgwNDE4MTgzODI4WjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvR2JtAkPdG/BldPRT7EupiMo4ZvLOzztoDeul2awbM9fBU8kc3nlapOi2vooX62cyPJKsqCas465gy4U3JJBMVg/MjshfUIDBb1LQzGtvfYkirdpWOqJ7riQ0Wbe6LLRFD0963JNF1lyMHkf7OqZegIh8c+xGGgd2ynkdivaKOr2d7Qf67y2UarQc+qIgkljsaOugfBr3jsUcO0tE0j9LGOvTZZEZd3ykXUEChIkwGW+QWWd3Indit4ArSMGDjkrltGX88FBWgbPYe8dgjWcE2GkEEWhJFwIiTCHQZFHlizSzY5vyG0mcbgdl/HjbyswUn3kw8CvmSOuzi7YNolypAgMBAAGjITAfMB0GA1UdDgQWBBRaESD5M6MGBsOr4aMdm42SVZwycDANBgkqhkiG9w0BAQsFAAOCAQEAVg1mV0Zf9/o+cAbwvcQgdGIbeUghVdDybkVkeew/3dpdRN/S9k9BTusNL4gNKbRRIjJiESq68rP++8BP7xhIO3EsICFAo/fp87af1EncYIjwh9V6P77V+wnvU8Ehgj9tGj5GhU/o1tmCLmBsJi+uUz8vd7p8S/CbH0wUpe0uov4d79R1DGYrM+fansMd9JnmZfLeGU1sx2q+hEfAZyuSRJEf4+GbgEuthq0aBNC6VeXVmmNqd36at3F9O4DzJiJOZiEHXNYOXiyJYSBEvgKdd23G9tR1Pdqw//0sKv/C4b3FQWowN7uZzJ3SJTrolzpUGlTSy5PPeXsmsL7TKM27uA==");
  unsigned __int8 v3 = (void *)qword_1003DD650;
  qword_1003DD650 = (uint64_t)v2;
}

void sub_10001F08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001F0F4(id a1)
{
  uint64_t v1 = [CSStudiesServerConfiguration alloc];
  id v4 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"33f4a2c5-8ff4-4a20-b5bb-6120df9ef511"];
  uint64_t v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", @"https://ingest.stg.apple-studies.com", @"MIIDjTCCAnWgAwIBAgIEDZOX8jANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzNzIxWhcNMTgwNDE4MTgzNzIxWjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3PXGIYi84LTNzcOvbKPly9+gwYjg2D5DJnMstVFrAkjfNp+6fE8PtBQPfCxYBJGnVWAMNAKHjsTHJtpq92gW+l/WG1/SGnG251LN13ugBgSI7oaf8aF3iAJ4dyFnb5xScZoFKjwXtoR2HLFgxpCfG6KYWABSvubaupxIwmqqRMNfQb6xWHhu0y1MJG6U0UX+9PghEw5xFTtIoEpkIiuOEWU6LwdhW5cnrnVFn49f9j02LHkBq/eLbjm7lXHIGwYolhNN/RurwpF2MbAaAw4pF6b//WswZUSepbnFtlfCEo3HjraNe1nVB2S+f8pysdc67Lfr8vhn6rjK2f0nQ11oZAgMBAAGjITAfMB0GA1UdDgQWBBQ/j4HEfBnPOz4ZGC5Add8PGVw6oDANBgkqhkiG9w0BAQsFAAOCAQEAEoMDoP4ls0RxjZJesTYPv+7XHqcREDlBup4vJLUSOrOU41jKaDUH2dygzdntpaSh8C3hoY/BYwWIxNPKlETikn0bNAz0Q+TX1rNPc67ZGyJwGisIsIYdcXjrL1oc6dp45KdPN1KQY2VrW3XCXbswoT+65noI13WIXpzky+UugnbQ3fGfOw/ku6NYcZ/VfVPl9nr8JdEWY9Jlbo1Ze8J7XGrDhn2llzWDfBMZOuETJG5ZxIJum2xnIblb9I0gxxMH9BGujxCw02xoSdAbrS2kQEhDCfyE4/vOMloTnjUV95DYezSfJ08CX/Uc0nm1hCB+5CjfATWNwaYddzWbzeiWag==");
  unsigned __int8 v3 = (void *)qword_1003DD658;
  qword_1003DD658 = (uint64_t)v2;
}

void sub_10001F18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001F1F4(id a1)
{
  uint64_t v1 = [CSStudiesServerConfiguration alloc];
  id v4 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"b4e6b326-3293-449f-a764-b30090b310fa"];
  uint64_t v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", @"https://ingest.stg.apple-studies.com", @"MIIDjTCCAnWgAwIBAgIEDZOX8jANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzNzIxWhcNMTgwNDE4MTgzNzIxWjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3PXGIYi84LTNzcOvbKPly9+gwYjg2D5DJnMstVFrAkjfNp+6fE8PtBQPfCxYBJGnVWAMNAKHjsTHJtpq92gW+l/WG1/SGnG251LN13ugBgSI7oaf8aF3iAJ4dyFnb5xScZoFKjwXtoR2HLFgxpCfG6KYWABSvubaupxIwmqqRMNfQb6xWHhu0y1MJG6U0UX+9PghEw5xFTtIoEpkIiuOEWU6LwdhW5cnrnVFn49f9j02LHkBq/eLbjm7lXHIGwYolhNN/RurwpF2MbAaAw4pF6b//WswZUSepbnFtlfCEo3HjraNe1nVB2S+f8pysdc67Lfr8vhn6rjK2f0nQ11oZAgMBAAGjITAfMB0GA1UdDgQWBBQ/j4HEfBnPOz4ZGC5Add8PGVw6oDANBgkqhkiG9w0BAQsFAAOCAQEAEoMDoP4ls0RxjZJesTYPv+7XHqcREDlBup4vJLUSOrOU41jKaDUH2dygzdntpaSh8C3hoY/BYwWIxNPKlETikn0bNAz0Q+TX1rNPc67ZGyJwGisIsIYdcXjrL1oc6dp45KdPN1KQY2VrW3XCXbswoT+65noI13WIXpzky+UugnbQ3fGfOw/ku6NYcZ/VfVPl9nr8JdEWY9Jlbo1Ze8J7XGrDhn2llzWDfBMZOuETJG5ZxIJum2xnIblb9I0gxxMH9BGujxCw02xoSdAbrS2kQEhDCfyE4/vOMloTnjUV95DYezSfJ08CX/Uc0nm1hCB+5CjfATWNwaYddzWbzeiWag==");
  unsigned __int8 v3 = (void *)qword_1003DD660;
  qword_1003DD660 = (uint64_t)v2;
}

void sub_10001F28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001F2F4(id a1)
{
  uint64_t v1 = [CSStudiesServerConfiguration alloc];
  id v4 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"33f4a2c5-8ff4-4a20-b5bb-6120df9ef511"];
  uint64_t v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", @"https://ingest.stg.apple-studies.com", @"MIIDjTCCAnWgAwIBAgIEDZOX8jANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzNzIxWhcNMTgwNDE4MTgzNzIxWjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3PXGIYi84LTNzcOvbKPly9+gwYjg2D5DJnMstVFrAkjfNp+6fE8PtBQPfCxYBJGnVWAMNAKHjsTHJtpq92gW+l/WG1/SGnG251LN13ugBgSI7oaf8aF3iAJ4dyFnb5xScZoFKjwXtoR2HLFgxpCfG6KYWABSvubaupxIwmqqRMNfQb6xWHhu0y1MJG6U0UX+9PghEw5xFTtIoEpkIiuOEWU6LwdhW5cnrnVFn49f9j02LHkBq/eLbjm7lXHIGwYolhNN/RurwpF2MbAaAw4pF6b//WswZUSepbnFtlfCEo3HjraNe1nVB2S+f8pysdc67Lfr8vhn6rjK2f0nQ11oZAgMBAAGjITAfMB0GA1UdDgQWBBQ/j4HEfBnPOz4ZGC5Add8PGVw6oDANBgkqhkiG9w0BAQsFAAOCAQEAEoMDoP4ls0RxjZJesTYPv+7XHqcREDlBup4vJLUSOrOU41jKaDUH2dygzdntpaSh8C3hoY/BYwWIxNPKlETikn0bNAz0Q+TX1rNPc67ZGyJwGisIsIYdcXjrL1oc6dp45KdPN1KQY2VrW3XCXbswoT+65noI13WIXpzky+UugnbQ3fGfOw/ku6NYcZ/VfVPl9nr8JdEWY9Jlbo1Ze8J7XGrDhn2llzWDfBMZOuETJG5ZxIJum2xnIblb9I0gxxMH9BGujxCw02xoSdAbrS2kQEhDCfyE4/vOMloTnjUV95DYezSfJ08CX/Uc0nm1hCB+5CjfATWNwaYddzWbzeiWag==");
  unsigned __int8 v3 = (void *)qword_1003DD668;
  qword_1003DD668 = (uint64_t)v2;
}

void sub_10001F38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001F3F4(id a1)
{
  uint64_t v1 = [CSStudiesServerConfiguration alloc];
  id v4 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"fc2a58e3-5fef-42b8-89fc-a2e0bfe517b0"];
  uint64_t v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", @"https://ingest.stg.apple-studies.com", @"MIIDjTCCAnWgAwIBAgIEDZOX8jANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzNzIxWhcNMTgwNDE4MTgzNzIxWjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3PXGIYi84LTNzcOvbKPly9+gwYjg2D5DJnMstVFrAkjfNp+6fE8PtBQPfCxYBJGnVWAMNAKHjsTHJtpq92gW+l/WG1/SGnG251LN13ugBgSI7oaf8aF3iAJ4dyFnb5xScZoFKjwXtoR2HLFgxpCfG6KYWABSvubaupxIwmqqRMNfQb6xWHhu0y1MJG6U0UX+9PghEw5xFTtIoEpkIiuOEWU6LwdhW5cnrnVFn49f9j02LHkBq/eLbjm7lXHIGwYolhNN/RurwpF2MbAaAw4pF6b//WswZUSepbnFtlfCEo3HjraNe1nVB2S+f8pysdc67Lfr8vhn6rjK2f0nQ11oZAgMBAAGjITAfMB0GA1UdDgQWBBQ/j4HEfBnPOz4ZGC5Add8PGVw6oDANBgkqhkiG9w0BAQsFAAOCAQEAEoMDoP4ls0RxjZJesTYPv+7XHqcREDlBup4vJLUSOrOU41jKaDUH2dygzdntpaSh8C3hoY/BYwWIxNPKlETikn0bNAz0Q+TX1rNPc67ZGyJwGisIsIYdcXjrL1oc6dp45KdPN1KQY2VrW3XCXbswoT+65noI13WIXpzky+UugnbQ3fGfOw/ku6NYcZ/VfVPl9nr8JdEWY9Jlbo1Ze8J7XGrDhn2llzWDfBMZOuETJG5ZxIJum2xnIblb9I0gxxMH9BGujxCw02xoSdAbrS2kQEhDCfyE4/vOMloTnjUV95DYezSfJ08CX/Uc0nm1hCB+5CjfATWNwaYddzWbzeiWag==");
  unsigned __int8 v3 = (void *)qword_1003DD670;
  qword_1003DD670 = (uint64_t)v2;
}

void sub_10001F48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001F4F4(id a1)
{
  uint64_t v1 = [CSStudiesServerConfiguration alloc];
  id v4 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"75ff2079-4a69-4622-af4d-5e561a6f7323"];
  uint64_t v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", @"https://ingest.apple-studies.com", @"MIIDjTCCAnWgAwIBAgIEFN2TTjANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzODI4WhcNMTgwNDE4MTgzODI4WjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvR2JtAkPdG/BldPRT7EupiMo4ZvLOzztoDeul2awbM9fBU8kc3nlapOi2vooX62cyPJKsqCas465gy4U3JJBMVg/MjshfUIDBb1LQzGtvfYkirdpWOqJ7riQ0Wbe6LLRFD0963JNF1lyMHkf7OqZegIh8c+xGGgd2ynkdivaKOr2d7Qf67y2UarQc+qIgkljsaOugfBr3jsUcO0tE0j9LGOvTZZEZd3ykXUEChIkwGW+QWWd3Indit4ArSMGDjkrltGX88FBWgbPYe8dgjWcE2GkEEWhJFwIiTCHQZFHlizSzY5vyG0mcbgdl/HjbyswUn3kw8CvmSOuzi7YNolypAgMBAAGjITAfMB0GA1UdDgQWBBRaESD5M6MGBsOr4aMdm42SVZwycDANBgkqhkiG9w0BAQsFAAOCAQEAVg1mV0Zf9/o+cAbwvcQgdGIbeUghVdDybkVkeew/3dpdRN/S9k9BTusNL4gNKbRRIjJiESq68rP++8BP7xhIO3EsICFAo/fp87af1EncYIjwh9V6P77V+wnvU8Ehgj9tGj5GhU/o1tmCLmBsJi+uUz8vd7p8S/CbH0wUpe0uov4d79R1DGYrM+fansMd9JnmZfLeGU1sx2q+hEfAZyuSRJEf4+GbgEuthq0aBNC6VeXVmmNqd36at3F9O4DzJiJOZiEHXNYOXiyJYSBEvgKdd23G9tR1Pdqw//0sKv/C4b3FQWowN7uZzJ3SJTrolzpUGlTSy5PPeXsmsL7TKM27uA==");
  unsigned __int8 v3 = (void *)qword_1003DD678;
  qword_1003DD678 = (uint64_t)v2;
}

void sub_10001F58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100020060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000204DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020868(uint64_t a1)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039BFB0);
  }
  uint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 80);
    double v4 = *(float *)(a1 + 96);
    double v5 = *(float *)(a1 + 100);
    uint64_t v6 = *(void *)(a1 + 104);
    double v7 = *(float *)(a1 + 208);
    double v8 = *(float *)(a1 + 216);
    double v9 = *(float *)(a1 + 228);
    double v10 = *(float *)(a1 + 236);
    double v11 = *(float *)(a1 + 248);
    double v12 = *(float *)(a1 + 256);
    double v13 = *(float *)(a1 + 268);
    double v14 = *(float *)(a1 + 276);
    double v15 = *(float *)(a1 + 288);
    double v16 = *(float *)(a1 + 296);
    double v17 = *(float *)(a1 + 308);
    double v18 = *(float *)(a1 + 316);
    uint64_t v19 = *(void *)(a1 + 120);
    double v20 = *(float *)(a1 + 16);
    double v21 = *(float *)(a1 + 20);
    double v22 = *(float *)(a1 + 24);
    int v23 = *(_DWORD *)(a1 + 28);
    double v24 = *(float *)(a1 + 32);
    double v25 = *(float *)(a1 + 36);
    int v26 = *(_DWORD *)(a1 + 40);
    double v27 = *(float *)(a1 + 44);
    double v28 = *(float *)(a1 + 48);
    int v29 = *(_DWORD *)(a1 + 52);
    double v30 = *(float *)(a1 + 56);
    double v31 = *(float *)(a1 + 60);
    double v32 = *(float *)(a1 + 64);
    double v33 = *(float *)(a1 + 68);
    double v34 = *(float *)(a1 + 72);
    int v35 = *(_DWORD *)(a1 + 76);
    uint64_t v36 = *(void *)(a1 + 512);
    uint64_t v37 = *(void *)(a1 + 520);
    v38[0] = 67248896;
    v38[1] = v3;
    __int16 v39 = 2050;
    double v40 = v4;
    __int16 v41 = 2050;
    double v42 = v5;
    __int16 v43 = 2050;
    uint64_t v44 = v6;
    __int16 v45 = 2050;
    double v46 = v7;
    __int16 v47 = 2050;
    double v48 = v8;
    __int16 v49 = 2050;
    double v50 = v9;
    __int16 v51 = 2050;
    double v52 = v10;
    __int16 v53 = 2050;
    double v54 = v11;
    __int16 v55 = 2050;
    double v56 = v12;
    __int16 v57 = 2050;
    double v58 = v13;
    __int16 v59 = 2050;
    double v60 = v14;
    __int16 v61 = 2050;
    double v62 = v15;
    __int16 v63 = 2050;
    double v64 = v16;
    __int16 v65 = 2050;
    double v66 = v17;
    __int16 v67 = 2050;
    double v68 = v18;
    __int16 v69 = 2050;
    uint64_t v70 = v19;
    __int16 v71 = 2050;
    double v72 = v20;
    __int16 v73 = 2050;
    double v74 = v21;
    __int16 v75 = 2050;
    double v76 = v22;
    __int16 v77 = 1026;
    int v78 = v23;
    __int16 v79 = 2050;
    double v80 = v24;
    __int16 v81 = 2050;
    double v82 = v25;
    __int16 v83 = 1026;
    int v84 = v26;
    __int16 v85 = 2050;
    double v86 = v27;
    __int16 v87 = 2050;
    double v88 = v28;
    __int16 v89 = 1026;
    int v90 = v29;
    __int16 v91 = 2050;
    double v92 = v30;
    __int16 v93 = 2050;
    double v94 = v31;
    __int16 v95 = 2050;
    double v96 = v32;
    __int16 v97 = 2050;
    double v98 = v33;
    __int16 v99 = 2050;
    double v100 = v34;
    __int16 v101 = 1026;
    int v102 = v35;
    __int16 v103 = 2050;
    uint64_t v104 = v36;
    __int16 v105 = 2050;
    uint64_t v106 = v37;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[PU] summary,%{public}d,A,%{public}f,B,%{public}f,C,%{public}llu,D,%{public}f,E,%{public}f,F,%{public}f,G,%{public}f,H,%{public}f,I,%{public}f,J,%{public}f,K,%{public}f,L,%{public}f,M,%{public}f,N,%{public}f,O,%{public}f,P,%{public}llu,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}d,config-5,%{public}f,config-6,%{public}f,config-7,%{public}d,config-8,%{public}f,config-9,%{public}f,config-10,%{public}d,config-11,%{public}f,config-12,%{public}f,config-13,%{public}f,config-14,%{public}f,config-15,%{public}f,config-16,%{public}d,debug-1,%{public}llu,debug-2,%{public}llu", (uint8_t *)v38, 0x14Cu);
  }
}

void sub_100020B44(uint64_t a1, void *a2)
{
  id v12 = a2;
  int v3 = +[NSNumber numberWithDouble:*(float *)(a1 + 96)];
  double v4 = [v3 stringValue];
  [v12 setObject:v4 forKeyedSubscript:@"pu-A"];

  double v5 = +[NSNumber numberWithDouble:*(float *)(a1 + 100)];
  uint64_t v6 = [v5 stringValue];
  [v12 setObject:v6 forKeyedSubscript:@"pu-B"];

  double v7 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 104)];
  [v12 setObject:v7 forKeyedSubscript:@"pu-C"];

  double v8 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 88)];
  [v12 setObject:v8 forKeyedSubscript:@"pu-D"];

  double v9 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 12)];
  [v12 setObject:v9 forKeyedSubscript:@"pu-E"];

  double v10 = +[NSNumber numberWithDouble:*(float *)(a1 + 16)];
  double v11 = [v10 stringValue];
  [v12 setObject:v11 forKeyedSubscript:@"pu-config-1"];
}

void sub_100020CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100020D24(uint64_t result, int a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  if (a2)
  {
    *(unsigned char *)(result + 80) = 1;
    *(unsigned char *)(result + 8) = 1;
  }
  if (*(float *)(result + 96) < a5)
  {
    *(float *)(result + 96) = a5;
    *(float *)(result + 100) = a6;
    *(void *)(result + 88) = a3;
    *(void *)(result + 104) = a4;
  }
  return result;
}

uint64_t sub_100020D50(uint64_t a1)
{
  *(unsigned char *)(a1 + 80) = 0;
  uint64_t v1 = a1 + 80;
  *(_OWORD *)(v1 + 68) = 0u;
  uint64_t result = v1 + 68;
  *(unsigned char *)(result - 140) = 0;
  *(_DWORD *)(result - 136) = 0;
  *(void *)(result - 60) = 0;
  *(_OWORD *)(result - 52) = 0u;
  *(_OWORD *)(result - 36) = xmmword_100338710;
  *(_DWORD *)(result - 20) = 0;
  *(void *)(result - 12) = 0;
  *(unsigned char *)(result - 4) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 336) = 0u;
  *(void *)(result + 352) = 0;
  *(_DWORD *)(result + 380) = 0;
  *(_OWORD *)(result + 364) = 0u;
  return result;
}

uint64_t sub_100020DC4(uint64_t a1, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock((CLKappaAlgBlock *)a1, a2 + 1);
  uint64_t v4 = *a2;
  uint64_t *v5 = *a2;
  *(void *)(a1 + *(void *)(v4 - 152)) = a2[6];
  *(void *)(a1 + *(void *)(*(void *)a1 - 160)) = a2[7];
  *(void *)(a1 + *(void *)(*(void *)a1 - 168)) = a2[8];
  *(void *)(a1 + *(void *)(*(void *)a1 - 176)) = a2[9];
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 160) = 1;
  *(unsigned char *)(a1 + 164) = 0;
  *(unsigned char *)(a1 + 214) = 0;
  *(void *)(a1 + 216) = 0x2800000000;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 709) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_DWORD *)(a1 + 736) = 0;
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x230uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_10039BFE0;
  sub_1000247A4((uint64_t)&v6[1]);
  double v7 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v6 + 1;
  *(void *)(a1 + 16) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    double v11 = *(std::__shared_weak_count **)(a1 + 8);
    id v12 = v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    double v11 = v6 + 1;
    id v12 = v6;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_100021104((uint64_t)&v11, &v13);
  long long v8 = v13;
  long long v13 = 0uLL;
  double v9 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v13 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (v12) {
    sub_10000BB9C(v12);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 312))(a1);
  return a1;
}

void sub_10002108C(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)*((void *)v1 + 17);
  if (v4)
  {
    *((void *)v1 + 18) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)v1 + 14);
  if (v5)
  {
    *((void *)v1 + 15) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)v1 + 11);
  if (v6)
  {
    *((void *)v1 + 12) = v6;
    operator delete(v6);
  }
  double v7 = (void *)*((void *)v1 + 8);
  if (v7)
  {
    *((void *)v1 + 9) = v7;
    operator delete(v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v8) {
    sub_10000BB9C(v8);
  }
  double v9 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v9) {
    sub_10000BB9C(v9);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_100021104@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t sub_100021194(uint64_t a1)
{
  *(void *)a1 = off_100399F60;
  *(void *)(a1 + 752) = off_10039A008;
  *(void *)(a1 + 760) = off_10039A0D0;
  *(void *)(a1 + 768) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock((CLKappaAlgBlock *)a1, (uint64_t *)off_10039B988);
  *(void *)uint64_t v2 = off_10039B468;
  *(void *)(v2 + 752) = off_10039B718;
  *(void *)(v2 + 760) = off_10039B858;
  *(void *)(v2 + 768) = off_10039B938;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_DWORD *)(v2 + 160) = 1;
  *(unsigned char *)(v2 + 164) = 0;
  *(unsigned char *)(v2 + 214) = 0;
  *(void *)(v2 + 216) = 0x2800000000;
  *(void *)(v2 + 744) = 0;
  *(void *)(v2 + 704) = 0;
  *(void *)(v2 + 709) = 0;
  *(_DWORD *)(v2 + 736) = 0;
  *(_OWORD *)(v2 + 720) = 0u;
  int v3 = (std::__shared_weak_count *)operator new(0x230uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_10039BFE0;
  sub_1000247A4((uint64_t)&v3[1]);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v3 + 1;
  *(void *)(a1 + 16) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    int v3 = *(std::__shared_weak_count **)(a1 + 16);
    long long v8 = *(std::__shared_weak_count **)(a1 + 8);
    double v9 = v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    long long v8 = v3 + 1;
    double v9 = v3;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_100021104((uint64_t)&v8, &v10);
  long long v5 = v10;
  long long v10 = 0uLL;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v10 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  if (v9) {
    sub_10000BB9C(v9);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 312))(a1);
  return a1;
}

void sub_1000213DC(_Unwind_Exception *a1)
{
  int v3 = (void *)*((void *)v1 + 17);
  if (v3)
  {
    *((void *)v1 + 18) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)v1 + 14);
  if (v4)
  {
    *((void *)v1 + 15) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)v1 + 11);
  if (v5)
  {
    *((void *)v1 + 12) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)v1 + 8);
  if (v6)
  {
    *((void *)v1 + 9) = v6;
    operator delete(v6);
  }
  double v7 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v7) {
    sub_10000BB9C(v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v8) {
    sub_10000BB9C(v8);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039B988);
  _Unwind_Resume(a1);
}

void sub_100021458(uint64_t a1)
{
  id v55 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgPulseConfig" forFeatureMode:*(unsigned __int8 *)(a1 + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 1110756557;
  LODWORD(v4) = 4.0;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v55 withMinValue:0.0 maxValue:v3 defaultValue:v4];
  *(_DWORD *)(*(void *)(a1 + 32) + 16) = v5;

  uint64_t v6 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v7) = 16.0;
  LODWORD(v8) = 1.5;
  [v6 algorithmThresholdNumber:1 inArrayForKey:v55 withMinValue:0.0 maxValue:v7 defaultValue:v8];
  *(_DWORD *)(*(void *)(a1 + 32) + 20) = v9;

  long long v10 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v11) = 10.0;
  LODWORD(v12) = 1033476506;
  [v10 algorithmThresholdNumber:2 inArrayForKey:v55 withMinValue:0.0 maxValue:v11 defaultValue:v12];
  *(_DWORD *)(*(void *)(a1 + 32) + 24) = v13;

  double v14 = +[CSPersistentConfiguration sharedConfiguration];
  *(_DWORD *)(*(void *)(a1 + 32) + 28) = [v14 algorithmIntegerNumber:3 inArrayForKey:v55 withMinValue:1 maxValue:10 defaultValue:2];

  double v15 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v16) = 16.0;
  LODWORD(v17) = 1.5;
  [v15 algorithmThresholdNumber:4 inArrayForKey:v55 withMinValue:0.0 maxValue:v16 defaultValue:v17];
  *(_DWORD *)(*(void *)(a1 + 32) + 32) = v18;

  uint64_t v19 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v20) = 10.0;
  LODWORD(v21) = 1033476506;
  [v19 algorithmThresholdNumber:5 inArrayForKey:v55 withMinValue:0.0 maxValue:v20 defaultValue:v21];
  *(_DWORD *)(*(void *)(a1 + 32) + 36) = v22;

  int v23 = +[CSPersistentConfiguration sharedConfiguration];
  *(_DWORD *)(*(void *)(a1 + 32) + 40) = [v23 algorithmIntegerNumber:6 inArrayForKey:v55 withMinValue:1 maxValue:10 defaultValue:2];

  double v24 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v25) = 16.0;
  LODWORD(v26) = 2.0;
  [v24 algorithmThresholdNumber:7 inArrayForKey:v55 withMinValue:0.0 maxValue:v25 defaultValue:v26];
  *(_DWORD *)(*(void *)(a1 + 32) + 44) = v27;

  double v28 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v29) = 10.0;
  LODWORD(v30) = 1033476506;
  [v28 algorithmThresholdNumber:8 inArrayForKey:v55 withMinValue:0.0 maxValue:v29 defaultValue:v30];
  *(_DWORD *)(*(void *)(a1 + 32) + 48) = v31;

  double v32 = +[CSPersistentConfiguration sharedConfiguration];
  *(_DWORD *)(*(void *)(a1 + 32) + 52) = [v32 algorithmIntegerNumber:9 inArrayForKey:v55 withMinValue:1 maxValue:10 defaultValue:2];

  double v33 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v34) = 1065353300;
  LODWORD(v35) = 0.25;
  [v33 algorithmThresholdNumber:10 inArrayForKey:v55 withMinValue:0.0 maxValue:v34 defaultValue:v35];
  *(_DWORD *)(*(void *)(a1 + 32) + 56) = v36;

  uint64_t v37 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v38) = 2.0;
  LODWORD(v39) = 24.0;
  [v37 algorithmThresholdNumber:11 inArrayForKey:v55 withMinValue:v38 maxValue:8589936700.0 defaultValue:v39];
  *(_DWORD *)(*(void *)(a1 + 32) + 60) = v40;

  __int16 v41 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v42) = 1132462080;
  LODWORD(v43) = 24.0;
  LODWORD(v44) = 1132462080;
  [v41 algorithmThresholdNumber:12 inArrayForKey:v55 withMinValue:v43 maxValue:v42 defaultValue:v44];
  *(_DWORD *)(*(void *)(a1 + 32) + 64) = v45;

  double v46 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v47) = 786163455;
  LODWORD(v48) = 16.0;
  [v46 algorithmThresholdNumber:13 inArrayForKey:v55 withMinValue:0.0 maxValue:v48 defaultValue:v47];
  *(_DWORD *)(*(void *)(a1 + 32) + 68) = v49;

  double v50 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v51) = 10.0;
  LODWORD(v52) = 1033476506;
  [v50 algorithmThresholdNumber:14 inArrayForKey:v55 withMinValue:0.0 maxValue:v51 defaultValue:v52];
  *(_DWORD *)(*(void *)(a1 + 32) + 72) = v53;

  double v54 = +[CSPersistentConfiguration sharedConfiguration];
  *(_DWORD *)(*(void *)(a1 + 32) + 76) = [v54 algorithmIntegerNumber:15 inArrayForKey:v55 withMinValue:1 maxValue:10 defaultValue:2];
}

void sub_10002181C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double sub_100021878(uint64_t a1, float *a2)
{
  double v3 = *(_OWORD **)(a1 + 32);
  long long v4 = *(_OWORD *)a2;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 3);
  v3[3] = *((_OWORD *)a2 + 2);
  v3[4] = v6;
  v3[1] = v4;
  v3[2] = v5;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039BFB0);
  }
  double v7 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
  {
    double v9 = *a2;
    double v10 = a2[1];
    double v11 = a2[2];
    int v12 = *((_DWORD *)a2 + 3);
    double v13 = a2[4];
    double v14 = a2[5];
    int v15 = *((_DWORD *)a2 + 6);
    double v16 = a2[7];
    double v17 = a2[8];
    int v18 = *((_DWORD *)a2 + 9);
    double v19 = a2[10];
    double v20 = a2[11];
    double v21 = a2[12];
    double v22 = a2[13];
    double v23 = a2[14];
    int v24 = *((_DWORD *)a2 + 15);
    int v25 = 134221824;
    double v26 = v9;
    __int16 v27 = 2048;
    double v28 = v10;
    __int16 v29 = 2048;
    double v30 = v11;
    __int16 v31 = 1024;
    int v32 = v12;
    __int16 v33 = 2048;
    double v34 = v13;
    __int16 v35 = 2048;
    double v36 = v14;
    __int16 v37 = 1024;
    int v38 = v15;
    __int16 v39 = 2048;
    double v40 = v16;
    __int16 v41 = 2048;
    double v42 = v17;
    __int16 v43 = 1024;
    int v44 = v18;
    __int16 v45 = 2048;
    double v46 = v19;
    __int16 v47 = 2048;
    double v48 = v20;
    __int16 v49 = 2048;
    double v50 = v21;
    __int16 v51 = 2048;
    double v52 = v22;
    __int16 v53 = 2048;
    double v54 = v23;
    __int16 v55 = 1024;
    int v56 = v24;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[PU] config-1,%f,config-2,%f,config-3,%f,config-4,%d,config-5,%f,config-6,%f,config-7,%d,config-8,%f,config-9,%f,config-10,%d,config-11,%f,config-12,%f,config-13,%f,config-14,%f,config-15,%f,config-16,%d", (uint8_t *)&v25, 0x92u);
  }
  return result;
}

uint64_t sub_100021A34(uint64_t result, float32x2_t *a2)
{
  if (*(unsigned char *)(result + 214)) {
    return sub_100021A48((float32x2_t *)result, a2, (float32x4_t *)(result + 164));
  }
  return result;
}

uint64_t sub_100021A48(float32x2_t *a1, float32x2_t *a2, float32x4_t *a3)
{
  float32x4_t v55 = *a3;
  CMOQuaternion::normalize(&v55, v55);
  float v5 = a2[2].f32[0];
  float32x2_t v53 = a2[1];
  float v54 = v5;
  CMOQuaternion::rotateFrameInPlace((CMOQuaternion *)&v55, (uint64_t)&v53);
  v51[0] = CMOQuaternion::gravity((CMOQuaternion *)&v55);
  v51[1] = v6;
  float v52 = v7;
  CMOQuaternion::rotateFrameInPlace((CMOQuaternion *)&v55, (uint64_t)v51);
  float v54 = v54 - v52;
  float32x2_t v8 = a1[10];
  double v9 = (float32x2_t *)a1[9];
  if ((unint64_t)v9 >= *(void *)&v8)
  {
    float32x2_t v12 = a1[8];
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)&v12) >> 2);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x1555555555555555) {
      sub_10000EE98();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v8 - *(void *)&v12) >> 2);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      double v17 = (char *)sub_1000242C0((uint64_t)&a1[10], v16);
    }
    else {
      double v17 = 0;
    }
    int v18 = (float32x2_t *)&v17[12 * v13];
    double v19 = &v17[12 * v16];
    float32x2_t v20 = v53;
    v18[1].f32[0] = v54;
    *int v18 = v20;
    float32x2_t v11 = (float32x2_t)((char *)&v18[1] + 4);
    double v22 = (_DWORD *)a1[8];
    double v21 = (_DWORD *)a1[9];
    if (v21 != v22)
    {
      do
      {
        float32x2_t v23 = *(float32x2_t *)(v21 - 3);
        v21 -= 3;
        __int32 v24 = v21[2];
        *(float32x2_t *)((char *)v18 - 12) = v23;
        int v18 = (float32x2_t *)((char *)v18 - 12);
        v18[1].i32[0] = v24;
      }
      while (v21 != v22);
      double v21 = (_DWORD *)a1[8];
    }
    a1[8] = (float32x2_t)v18;
    a1[9] = v11;
    a1[10] = (float32x2_t)v19;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    float32x2_t v10 = v53;
    v9[1].f32[0] = v54;
    float32x2_t *v9 = v10;
    float32x2_t v11 = (float32x2_t)((char *)&v9[1] + 4);
  }
  unint64_t v25 = (unint64_t)a1[16];
  a1[9] = v11;
  double v26 = (float32x2_t *)a1[15];
  if ((unint64_t)v26 >= v25)
  {
    double v28 = (float32x2_t *)a1[14];
    uint64_t v29 = v26 - v28;
    if ((unint64_t)(v29 + 1) >> 61) {
      sub_10000EE98();
    }
    unint64_t v30 = v25 - (void)v28;
    unint64_t v31 = (uint64_t)(v25 - (void)v28) >> 2;
    if (v31 <= v29 + 1) {
      unint64_t v31 = v29 + 1;
    }
    if (v30 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32)
    {
      __int16 v33 = (char *)sub_10000EEB0((uint64_t)&a1[16], v32);
      double v28 = (float32x2_t *)a1[14];
      double v26 = (float32x2_t *)a1[15];
    }
    else
    {
      __int16 v33 = 0;
    }
    double v34 = (float32x2_t *)&v33[8 * v29];
    __int16 v35 = &v33[8 * v32];
    *double v34 = *a2;
    __int16 v27 = v34 + 1;
    while (v26 != v28)
    {
      float32x2_t v36 = v26[-1];
      --v26;
      v34[-1] = v36;
      --v34;
    }
    a1[14] = (float32x2_t)v34;
    a1[15] = (float32x2_t)v27;
    a1[16] = (float32x2_t)v35;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *double v26 = *a2;
    __int16 v27 = v26 + 1;
  }
  a1[15] = (float32x2_t)v27;
  float32x2_t v37 = (float32x2_t)vdup_n_s32(0x411CE80Au);
  float32x2_t v38 = vadd_f32(vmul_f32(vmul_f32(v53, (float32x2_t)vdup_n_s32(0x3AA3D70Au)), v37), a1[88]);
  float32x2_t v49 = v38;
  if (a1[27].i32[1] == a1[27].u16[1])
  {
    v39.f32[0] = sub_100021F60((unsigned __int16 *)&a1[27]);
    v39.i32[1] = v40;
    float32x2_t v38 = vadd_f32(v38, vmul_f32(vmul_f32(v39, (float32x2_t)vdup_n_s32(0xBAA3D70A)), v37));
    float32x2_t v49 = v38;
    __int16 v41 = a1[27].i16[1];
    if (v41)
    {
      unint64_t v42 = a1[27].u16[0] + 1;
      unint64_t v43 = a1[27].u32[1];
      if (v42 < v43) {
        LOWORD(v43) = 0;
      }
      a1[27].i16[0] = v42 - v43;
      a1[27].i16[1] = v41 - 1;
    }
  }
  uint64_t result = (uint64_t)sub_1000249D8((unsigned __int16 *)&a1[27], (uint64_t)&v53);
  uint64_t v45 = 0;
  int v50 = 0;
  a1[88] = v38;
  float v46 = 0.0;
  a1[89].i32[0] = 0;
  do
  {
    float v46 = v46 + (float)(v49.f32[v45] * v49.f32[v45]);
    ++v45;
  }
  while (v45 != 3);
  float v47 = sqrtf(v46);
  a1[91].f32[1] = v47;
  if (v47 > a1[91].f32[0]) {
    a1[91].f32[0] = v47;
  }
  if (!a1[89].i8[4] && a1[27].i32[1] == a1[27].u16[1]) {
    a1[89].i8[4] = 1;
  }
  unint64_t v48 = (unint64_t)*a2;
  if (*a2 != *(void *)&a1[90])
  {
    uint64_t result = sub_100021FC4((uint64_t)a1, v48);
    unint64_t v48 = (unint64_t)*a2;
  }
  a1[93] = (float32x2_t)v48;
  return result;
}

uint64_t sub_100021DC0(void *a1, float32x2_t *a2)
{
  uint64_t result = (uint64_t)a1 + *(void *)(*a1 - 64);
  if (*(unsigned char *)(result + 214)) {
    return sub_100021A48((float32x2_t *)result, a2, (float32x4_t *)(result + 164));
  }
  return result;
}

uint64_t sub_100021DEC(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 24);
  if (v2 == 2)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x10) != 0) {
      return result;
    }
    goto LABEL_6;
  }
  if (v2 != 1 || (*(unsigned char *)(a2 + 1) & 0x10) == 0) {
LABEL_6:
  }
    *(void *)(*(void *)(result + 32) + 112) = *(void *)(a2 + 8);
  return result;
}

void *sub_100021E24(void *result, uint64_t a2)
{
  int v2 = (char *)result + *(void *)(*result - 88);
  int v3 = v2[24];
  if (v3 == 2)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x10) != 0) {
      return result;
    }
    goto LABEL_6;
  }
  if (v3 != 1 || (*(unsigned char *)(a2 + 1) & 0x10) == 0) {
LABEL_6:
  }
    *(void *)(*((void *)v2 + 4) + 112) = *(void *)(a2 + 8);
  return result;
}

uint64_t sub_100021E78(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 214);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  __int16 v5 = *(_WORD *)(a2 + 48);
  *(_OWORD *)(result + 164) = *(_OWORD *)a2;
  *(_WORD *)(result + 212) = v5;
  *(_OWORD *)(result + 196) = v3;
  *(_OWORD *)(result + 180) = v4;
  if (!v2) {
    *(unsigned char *)(result + 214) = 1;
  }
  return result;
}

void *sub_100021EAC(void *result, uint64_t a2)
{
  int v2 = (char *)result + *(void *)(*result - 96);
  int v3 = v2[214];
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  __int16 v6 = *(_WORD *)(a2 + 48);
  *(_OWORD *)(v2 + 164) = *(_OWORD *)a2;
  *((_WORD *)v2 + 106) = v6;
  *(_OWORD *)(v2 + 196) = v4;
  *(_OWORD *)(v2 + 180) = v5;
  if (!v3) {
    v2[214] = 1;
  }
  return result;
}

uint64_t sub_100021EF8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10032567C();
    }
    __assert_rtn("operator[]", "CMVector.h", 277, "false");
  }
  return a1 + 4 * a2;
}

float sub_100021F60(unsigned __int16 *a1)
{
  if (!a1[1])
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100325714();
    }
    __assert_rtn("front", "CMVectorBuffer.h", 139, "false");
  }
  return *(float *)sub_1000248AC(a1, 0);
}

uint64_t sub_100021FC4(uint64_t result, unint64_t a2)
{
  if (*(unsigned char *)(result + 716))
  {
    uint64_t v3 = result;
    float v4 = *(float *)(result + 732);
    uint64_t v5 = *(void *)(result + 32);
    if (v4 < (float)(*(float *)(v5 + 16) * 0.49033))
    {
      float v8 = *(float *)(result + 736);
    }
    else
    {
      if (*(_WORD *)(result + 218))
      {
        unint64_t v6 = 0;
        do
        {
          uint64_t result = sub_100022114((unsigned __int16 *)(v3 + 216), v6);
          uint64_t v7 = 0;
          uint64_t v12 = *(void *)result;
          int v13 = 0;
          float v8 = *(float *)(v3 + 736);
          float v9 = 0.0;
          do
          {
            float v9 = v9 + (float)(*(float *)((char *)&v12 + v7) * *(float *)((char *)&v12 + v7));
            v7 += 4;
          }
          while (v7 != 12);
          if (v8 <= sqrtf(v9))
          {
            uint64_t v10 = 0;
            float v11 = 0.0;
            do
            {
              float v11 = v11 + (float)(*(float *)((char *)&v12 + v10) * *(float *)((char *)&v12 + v10));
              v10 += 4;
            }
            while (v10 != 12);
            float v8 = sqrtf(v11);
          }
          *(float *)(v3 + 736) = v8;
          ++v6;
        }
        while (v6 < *(unsigned __int16 *)(v3 + 218));
        uint64_t v5 = *(void *)(v3 + 32);
      }
      else
      {
        float v8 = *(float *)(result + 736);
      }
      *(unsigned char *)(v5 + 80) = 1;
      *(unsigned char *)(v5 + 8) = 1;
    }
    if (*(float *)(v5 + 96) < (float)(v4 / 0.49033))
    {
      *(float *)(v5 + 96) = v4 / 0.49033;
      *(float *)(v5 + 100) = v8;
      *(void *)(v5 + 88) = a2;
      *(void *)(v5 + 104) = (unint64_t)((double)a2 + -50000.0007);
    }
  }
  return result;
}

uint64_t sub_100022114(unsigned __int16 *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003257A0(a2);
    }
    __assert_rtn("operator[]", "CMVectorBuffer.h", 39, "false");
  }

  return sub_1000248AC(a1, a2);
}

void sub_100022190(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(v3 + 120) = a2;
  *(_DWORD *)(v3 + 128) = *(_DWORD *)(v3 + 88) - *(_DWORD *)(v3 + 112);
  id v76 = *(id *)(*(void *)(a1 + 48) + 24);
  float v4 = (char *)[v76 count];
  *(unsigned char *)(*(void *)(a1 + 32) + 144) = v4 != 0;
  if (v4) {
    BOOL v5 = *(void *)(a1 + 72) == *(void *)(a1 + 64);
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    unint64_t v6 = [v76 objectAtIndex:0];
    uint64_t v7 = [v76 objectAtIndex:v4 - 1];
    *(void *)(*(void *)(a1 + 32) + 512) = [v6 timestamp];
    *(void *)(*(void *)(a1 + 32) + 520) = [v7 timestamp];
    sub_10002279C((void *)a1);
    uint64_t v8 = *(void *)(a1 + 32);
    float v9 = *(float *)(v8 + 20);
    float v10 = *(float *)(v8 + 24);
    unsigned int v11 = *(_DWORD *)(v8 + 28);
    [v6 timestamp];
    sub_100023060(a1, 0, v11, (uint64_t)&v77, v9, v10);
    *(_OWORD *)(v8 + 208) = v77;
    *(_DWORD *)(v8 + 224) = v78;
    uint64_t v12 = *(float **)(a1 + 32);
    float v13 = v12[8];
    float v14 = v12[9];
    unsigned int v15 = *((_DWORD *)v12 + 10);
    [v6 timestamp];
    sub_100023060(a1, 1, v15, (uint64_t)&v77, v13, v14);
    *(_OWORD *)(v8 + 228) = v77;
    *(_DWORD *)(v8 + 244) = v78;
    unint64_t v16 = *(float **)(a1 + 32);
    float v17 = v16[11];
    float v18 = v16[12];
    unsigned int v19 = *((_DWORD *)v16 + 13);
    [v6 timestamp];
    sub_100023060(a1, 2, v19, (uint64_t)&v77, v17, v18);
    *(_OWORD *)(v8 + 248) = v77;
    *(_DWORD *)(v8 + 264) = v78;
    float32x2_t v20 = *(float **)(a1 + 32);
    float v21 = v20[17];
    float v22 = v20[18];
    unsigned int v23 = *((_DWORD *)v20 + 19);
    [v6 timestamp];
    sub_100023060(a1, 0, v23, (uint64_t)&v77, v21, v22);
    __int32 v24 = (long long *)(v8 + 388);
    *(_DWORD *)(v8 + 404) = v78;
    *(_OWORD *)(v8 + 388) = v77;
    unint64_t v25 = *(float **)(a1 + 32);
    float v26 = v25[17];
    float v27 = v25[18];
    unsigned int v28 = *((_DWORD *)v25 + 19);
    [v6 timestamp];
    sub_100023060(a1, 1, v28, (uint64_t)&v77, v26, v27);
    uint64_t v29 = (long long *)(v8 + 408);
    *(_DWORD *)(v8 + 424) = v78;
    *(_OWORD *)(v8 + 408) = v77;
    unint64_t v30 = *(float **)(a1 + 32);
    float v31 = v30[17];
    float v32 = v30[18];
    unsigned int v33 = *((_DWORD *)v30 + 19);
    [v6 timestamp];
    sub_100023060(a1, 2, v33, (uint64_t)&v77, v31, v32);
    double v34 = (long long *)(v8 + 428);
    *(_DWORD *)(v8 + 444) = v78;
    *(_OWORD *)(v8 + 428) = v77;
    uint64_t v35 = *(void *)(a1 + 96) - *(void *)(a1 + 88);
    *(void *)(v8 + 136) = 0xAAAAAAAAAAAAAAABLL * (v35 >> 2);
    if (v35)
    {
      float32x2_t v36 = *(float **)(a1 + 32);
      float v37 = v36[5];
      float v38 = v36[6];
      unsigned int v39 = *((_DWORD *)v36 + 7);
      [v6 timestamp];
      sub_10002340C((void *)a1, 0, v39, (uint64_t)&v77, v37, v38);
      *(_OWORD *)(v8 + 268) = v77;
      *(_DWORD *)(v8 + 284) = v78;
      __int32 v40 = *(float **)(a1 + 32);
      float v41 = v40[8];
      float v42 = v40[9];
      unsigned int v43 = *((_DWORD *)v40 + 10);
      [v6 timestamp];
      sub_10002340C((void *)a1, 1, v43, (uint64_t)&v77, v41, v42);
      *(_OWORD *)(v8 + 288) = v77;
      *(_DWORD *)(v8 + 304) = v78;
      int v44 = *(float **)(a1 + 32);
      float v45 = v44[11];
      float v46 = v44[12];
      unsigned int v47 = *((_DWORD *)v44 + 13);
      [v6 timestamp];
      sub_10002340C((void *)a1, 2, v47, (uint64_t)&v77, v45, v46);
      *(_DWORD *)(v8 + 324) = v78;
      *(_OWORD *)(v8 + 308) = v77;
      unint64_t v48 = *(float **)(a1 + 32);
      float v49 = v48[17];
      float v50 = v48[18];
      unsigned int v51 = *((_DWORD *)v48 + 19);
      [v6 timestamp];
      sub_10002340C((void *)a1, 0, v51, (uint64_t)&v77, v49, v50);
      *(_OWORD *)(v8 + 448) = v77;
      *(_DWORD *)(v8 + 464) = v78;
      float v52 = *(float **)(a1 + 32);
      float v53 = v52[17];
      float v54 = v52[18];
      unsigned int v55 = *((_DWORD *)v52 + 19);
      [v6 timestamp];
      sub_10002340C((void *)a1, 1, v55, (uint64_t)&v77, v53, v54);
      *(_DWORD *)(v8 + 484) = v78;
      *(_OWORD *)(v8 + 468) = v77;
      int v56 = *(float **)(a1 + 32);
      float v57 = v56[17];
      float v58 = v56[18];
      unsigned int v59 = *((_DWORD *)v56 + 19);
      [v6 timestamp];
      sub_10002340C((void *)a1, 2, v59, (uint64_t)&v77, v57, v58);
      *(_DWORD *)(v8 + 504) = v78;
      v60.i32[1] = DWORD1(v77);
      *(_OWORD *)(v8 + 488) = v77;
      v60.i32[0] = *(_DWORD *)(*(void *)(a1 + 32) + 56);
      *(float *)v61.i32 = 1.0 - *(float *)v60.i32;
      float32x4_t v62 = *(float32x4_t *)(v8 + 284);
      float32x4_t v63 = *(float32x4_t *)(v8 + 224);
      *(float32x4_t *)(v8 + 148) = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v8 + 268), *(float *)v60.i32), *(float32x4_t *)(v8 + 208), 1.0 - *(float *)v60.i32);
      *(float32x4_t *)(v8 + 164) = vmlaq_n_f32(vmulq_n_f32(v62, *(float *)v60.i32), v63, 1.0 - *(float *)v60.i32);
      *(float32x4_t *)(v8 + 180) = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v8 + 300), *(float *)v60.i32), *(float32x4_t *)(v8 + 240), 1.0 - *(float *)v60.i32);
      *(float32x2_t *)(v8 + 196) = vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v60, 0), *(float32x2_t *)(v8 + 316)), *(float32x2_t *)(v8 + 256), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v61, 0));
      *(float *)(v8 + 204) = (float)(*(float *)v60.i32 * *(float *)(v8 + 324))
                           + (float)((float)(1.0 - *(float *)v60.i32) * *(float *)(v8 + 264));
      *(float *)(v8 + 328) = (float)(*(float *)v60.i32 * *(float *)(v8 + 448))
                           + (float)((float)(1.0 - *(float *)v60.i32) * *(float *)(v8 + 388));
      *(float *)(v8 + 348) = (float)(*(float *)v60.i32 * *(float *)(v8 + 468))
                           + (float)((float)(1.0 - *(float *)v60.i32) * *(float *)(v8 + 408));
      *(float *)(v8 + 368) = (float)(*(float *)v60.i32 * *(float *)(v8 + 488))
                           + (float)((float)(1.0 - *(float *)v60.i32) * *(float *)(v8 + 428));
    }
    else
    {
      long long v64 = *(_OWORD *)(v8 + 208);
      *(_OWORD *)(v8 + 148) = v64;
      int v65 = *(_DWORD *)(v8 + 224);
      *(_DWORD *)(v8 + 164) = v65;
      long long v66 = *(_OWORD *)(v8 + 228);
      *(_OWORD *)(v8 + 168) = v66;
      int v67 = *(_DWORD *)(v8 + 244);
      *(_DWORD *)(v8 + 184) = v67;
      long long v68 = *(_OWORD *)(v8 + 248);
      *(_OWORD *)(v8 + 188) = v68;
      int v69 = *(_DWORD *)(v8 + 264);
      *(_DWORD *)(v8 + 204) = v69;
      *(_OWORD *)(v8 + 268) = v64;
      *(_DWORD *)(v8 + 284) = v65;
      *(_OWORD *)(v8 + 288) = v66;
      *(_DWORD *)(v8 + 304) = v67;
      *(_DWORD *)(v8 + 324) = v69;
      *(_OWORD *)(v8 + 308) = v68;
      int v70 = *(_DWORD *)(v8 + 404);
      *(_DWORD *)(v8 + 344) = v70;
      long long v71 = *v24;
      *(_OWORD *)(v8 + 328) = *v24;
      int v72 = *(_DWORD *)(v8 + 424);
      *(_DWORD *)(v8 + 364) = v72;
      long long v73 = *v29;
      *(_OWORD *)(v8 + 348) = *v29;
      int v74 = *(_DWORD *)(v8 + 444);
      *(_DWORD *)(v8 + 384) = v74;
      long long v75 = *v34;
      *(_OWORD *)(v8 + 368) = *v34;
      *(_DWORD *)(v8 + 464) = v70;
      *(_OWORD *)(v8 + 448) = v71;
      *(_DWORD *)(v8 + 484) = v72;
      *(_OWORD *)(v8 + 468) = v73;
      *(_DWORD *)(v8 + 504) = v74;
      *(_OWORD *)(v8 + 488) = v75;
    }
    ++*(_DWORD *)(a1 + 160);
  }
}

void sub_10002273C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_10002279C(void *a1)
{
  id v2 = *(id *)(a1[6] + 32);
  id v3 = *(id *)(a1[6] + 72);
  uint64_t v4 = a1[17];
  __int16 v85 = (void **)(a1 + 17);
  double v86 = (char **)(a1 + 11);
  a1[12] = a1[11];
  a1[18] = v4;
  if ([v2 count] && (unint64_t)objc_msgSend(v3, "count") >= 2)
  {
    sub_100023E3C(v86, (unint64_t)[v2 count]);
    sub_100023F20(v85, (unint64_t)[v2 count]);
    uint64_t v5 = 0;
    uint64_t v6 = a1[4];
    float v7 = *(float *)(v6 + 60);
    float v8 = *(float *)(v6 + 64);
    while (1)
    {
      float v9 = [v2 objectAtIndexedSubscript:v5];
      id v10 = [v9 timestamp];
      unsigned int v11 = [v3 objectAtIndexedSubscript:0];
      id v12 = [v11 timestamp];

      if (v10 >= v12) {
        break;
      }
      if ((char *)[v2 count] - 1 <= (char *)++v5)
      {
        if (qword_1003DB6A0 != -1) {
          dispatch_once(&qword_1003DB6A0, &stru_10039BFB0);
        }
        uint64_t v13 = qword_1003DB6A8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          float v14 = "[PU] HG before DM; IHA not available for this epoch";
LABEL_83:
          double v80 = v13;
          uint32_t v81 = 2;
LABEL_84:
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, v14, buf, v81);
        }
        goto LABEL_85;
      }
    }
    int v88 = 0;
    while (2)
    {
      uint64_t v84 = (v88 + 1);
      __int16 v87 = (char *)(int)v84;
      while (1)
      {
        while (1)
        {
          unsigned int v15 = [v2 objectAtIndexedSubscript:v5];
          id v16 = [v15 timestamp];
          float v17 = [v3 objectAtIndexedSubscript:v88];
          BOOL v18 = v16 < [v17 timestamp];

          if (!v18) {
            break;
          }
          uint64_t v19 = (int)v5 + 1;
          while (1)
          {
            uint64_t v5 = v19;
            float32x2_t v20 = [v2 objectAtIndexedSubscript:v19];
            id v21 = [v20 timestamp];
            float v22 = [v3 objectAtIndexedSubscript:v88];
            id v23 = [v22 timestamp];
            BOOL v24 = v21 < v23;

            if (v21 >= v23) {
              break;
            }
            id v25 = [v2 count];
            uint64_t v19 = v5 + 1;
            if ((id)(v5 + 1) == v25)
            {
              if (qword_1003DB6A0 != -1) {
                dispatch_once(&qword_1003DB6A0, &stru_10039BFB0);
              }
              float v26 = qword_1003DB6A8;
              if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "[PU] Did not catch up to DM", buf, 2u);
              }
              break;
            }
          }
          if (v88 < 1) {
            goto LABEL_77;
          }
          if (qword_1003DB6A0 != -1) {
            dispatch_once(&qword_1003DB6A0, &stru_10039BFB0);
          }
          float v27 = qword_1003DB6A8;
          if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "[PU] DM raced ahead HA", buf, 2u);
          }
          ++*(_DWORD *)(a1[4] + 528);
          if (v21 < v23) {
            goto LABEL_85;
          }
        }
        unsigned int v28 = [v2 objectAtIndexedSubscript:(int)v5];
        id v29 = [v28 timestamp];
        unint64_t v30 = [v3 objectAtIndexedSubscript:v87];
        BOOL v31 = v29 < [v30 timestamp];

        if (!v31) {
          break;
        }
        float v32 = [v3 objectAtIndexedSubscript:v88];
        unsigned int v33 = [v32 c_struct];

        double v34 = [v2 objectAtIndexedSubscript:(int)v5];
        uint64_t v35 = (float *)[v34 c_struct];

        float v36 = v35[3];
        float v37 = fabsf(v35[2]);
        float v38 = fabsf(v36);
        float v39 = v35[4];
        float v40 = fabsf(v39);
        if (v38 < v40) {
          float v38 = v40;
        }
        if (v37 < v38) {
          float v37 = v38;
        }
        if (v37 >= v7)
        {
          unint64_t v41 = 0;
          *(float *)double v92 = v35[2];
          *(float *)&v92[1] = v36;
          *(float *)&v92[2] = v39;
          do
          {
            float v42 = *(float *)sub_100021EF8((uint64_t)v92, v41);
            unsigned int v43 = (float *)sub_100021EF8((uint64_t)v91, v41);
            if (v42 <= (float)-v8) {
              float v44 = -v8;
            }
            else {
              float v44 = v42;
            }
            if (v44 >= v8) {
              float v44 = v8;
            }
            *unsigned int v43 = v44;
            ++v41;
          }
          while (v41 != 3);
          *(_OWORD *)buf = *v33;
          CMOQuaternion::normalize((float32x4_t *)buf, *(float32x4_t *)buf);
          float v45 = CMOQuaternion::rotateFrame((CMOQuaternion *)buf, v91[0], v91[1], v91[2]);
          float v47 = v46;
          float v49 = v48;
          v89[0] = CMOQuaternion::gravity((CMOQuaternion *)buf);
          v89[1] = v50;
          float v90 = v51;
          CMOQuaternion::rotateFrameInPlace((CMOQuaternion *)buf, (uint64_t)v89);
          float v52 = v45 - v90;
          float v53 = v47 - v90;
          float v54 = v49 - v90;
          int v56 = (float *)a1[12];
          unint64_t v55 = a1[13];
          if ((unint64_t)v56 >= v55)
          {
            unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - *v86) >> 2);
            unint64_t v59 = v58 + 1;
            if (v58 + 1 > 0x1555555555555555) {
              sub_10000EE98();
            }
            unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (void)*v86) >> 2);
            if (2 * v60 > v59) {
              unint64_t v59 = 2 * v60;
            }
            if (v60 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v61 = 0x1555555555555555;
            }
            else {
              unint64_t v61 = v59;
            }
            if (v61) {
              float32x4_t v62 = (char *)sub_1000242C0((uint64_t)(a1 + 13), v61);
            }
            else {
              float32x4_t v62 = 0;
            }
            float32x4_t v63 = (float *)&v62[12 * v58];
            *float32x4_t v63 = v52;
            v63[1] = v53;
            v63[2] = v54;
            int v65 = (char *)a1[11];
            long long v64 = (char *)a1[12];
            long long v66 = v63;
            if (v64 != v65)
            {
              do
              {
                uint64_t v67 = *(void *)(v64 - 12);
                v64 -= 12;
                int v68 = *((_DWORD *)v64 + 2);
                *(void *)(v66 - 3) = v67;
                v66 -= 3;
                *((_DWORD *)v66 + 2) = v68;
              }
              while (v64 != v65);
              long long v64 = *v86;
            }
            float v57 = v63 + 3;
            a1[11] = v66;
            a1[12] = v63 + 3;
            a1[13] = &v62[12 * v61];
            if (v64) {
              operator delete(v64);
            }
          }
          else
          {
            *int v56 = v52;
            v56[1] = v53;
            float v57 = v56 + 3;
            v56[2] = v54;
          }
          a1[12] = v57;
          int v70 = (char *)a1[18];
          unint64_t v69 = a1[19];
          if ((unint64_t)v70 >= v69)
          {
            int v72 = (char *)*v85;
            uint64_t v73 = (v70 - (unsigned char *)*v85) >> 3;
            unint64_t v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 61) {
              sub_10000EE98();
            }
            uint64_t v75 = v69 - (void)v72;
            if (v75 >> 2 > v74) {
              unint64_t v74 = v75 >> 2;
            }
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v76 = v74;
            }
            if (v76)
            {
              long long v77 = (char *)sub_10000EEB0((uint64_t)(a1 + 19), v76);
              int v72 = (char *)a1[17];
              int v70 = (char *)a1[18];
            }
            else
            {
              long long v77 = 0;
            }
            int v78 = &v77[8 * v73];
            *(void *)int v78 = *(void *)v35;
            long long v71 = v78 + 8;
            while (v70 != v72)
            {
              uint64_t v79 = *((void *)v70 - 1);
              v70 -= 8;
              *((void *)v78 - 1) = v79;
              v78 -= 8;
            }
            a1[17] = v78;
            a1[18] = v71;
            a1[19] = &v77[8 * v76];
            if (v72) {
              operator delete(v72);
            }
          }
          else
          {
            *(void *)int v70 = *(void *)v35;
            long long v71 = v70 + 8;
          }
          a1[18] = v71;
        }
        if ((char *)[v2 count] - 1 <= (char *)(int)v5)
        {
          if (qword_1003DB6A0 != -1) {
            dispatch_once(&qword_1003DB6A0, &stru_10039BFB0);
          }
          uint64_t v13 = qword_1003DB6A8;
          if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            float v14 = "[PU] Reached end of HA";
            goto LABEL_83;
          }
          goto LABEL_85;
        }
        LODWORD(v5) = v5 + 1;
      }
      if ((char *)[v3 count] - 1 > v87)
      {
        BOOL v24 = 0;
        int v88 = v84;
LABEL_77:
        if (!v24) {
          continue;
        }
        goto LABEL_85;
      }
      break;
    }
    double v82 = (char *)[v2 count];
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039BFB0);
    }
    uint64_t v83 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = &v82[~(uint64_t)(int)v5];
      float v14 = "Reached end of DM buffer with %lu Hg points unused";
      double v80 = v83;
      uint32_t v81 = 12;
      goto LABEL_84;
    }
  }
LABEL_85:
}

void sub_100022F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100023060(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  if (*(void *)(a1 + 72) == *(void *)(a1 + 64))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039BFB0);
    }
    id v10 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[Pulse] buffer is empty", buf, 2u);
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    float v26 = 0;
    float v27 = 0;
    uint64_t v28 = 0;
    switch(a2)
    {
      case 2:
        *(void *)buf = &_mh_execute_header;
        *(_DWORD *)&uint8_t buf[8] = 2;
        sub_100024308((char *)&v26, (char *)buf, (uint64_t)&buf[12], 3uLL);
        break;
      case 1:
        *(void *)buf = &_mh_execute_header;
        sub_100024308((char *)&v26, (char *)buf, (uint64_t)&buf[8], 2uLL);
        break;
      case 0:
        *(_DWORD *)buf = 2;
        sub_100024308((char *)&v26, (char *)buf, (uint64_t)&buf[4], 1uLL);
        break;
    }
    __p = 0;
    BOOL v31 = 0;
    uint64_t v32 = 0;
    sub_100024490(&__p, v26, (uint64_t)v27, (v27 - (unsigned char *)v26) >> 2);
    uint64_t v33 = 0x400F29F7411CF5C3;
    int v34 = 1102024197;
    memset(buf, 0, sizeof(buf));
    uint64_t v11 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) - v11 == 12)
    {
      uint64_t v12 = 0;
      float v13 = 0.0;
      int v14 = 0;
      float v15 = 0.0;
    }
    else
    {
      uint64_t v23 = a4;
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      char v18 = 0;
      float v15 = 0.0;
      int v19 = -1;
      int v14 = 0;
      int v20 = -1;
      float v13 = 0.0;
      int v24 = -1;
      do
      {
        uint64_t v21 = v11 + v16;
        if (sub_100023B9C((uint64_t)buf, v11 + v16) <= a5)
        {
          if (v18)
          {
            if ((float)((float)((int)v17 - v20) * 0.00125) <= a6)
            {
              char v18 = 1;
            }
            else
            {
              if (v20 - v19 + 1 >= a3 && (*(float *)&buf[32] > v15 || v24 == -1))
              {
                float v13 = (float)(v20 - v19) * 0.00125;
                int v14 = *(_DWORD *)&buf[36];
                float v15 = *(float *)&buf[32];
                int v24 = v17;
              }
              char v18 = 0;
              memset(&buf[20], 0, 20);
              int v19 = -1;
            }
          }
          else
          {
            char v18 = 0;
          }
        }
        else
        {
          if ((v18 & 1) == 0) {
            int v19 = v17;
          }
          sub_100023C14((uint64_t)buf, v21, v21 + 12, 0.00125);
          char v18 = 1;
          int v20 = v17;
        }
        ++v17;
        uint64_t v11 = *(void *)(a1 + 64);
        v16 += 12;
      }
      while (-1 - 0x5555555555555555 * ((*(void *)(a1 + 72) - v11) >> 2) > v17);
      uint64_t v12 = *(void *)&buf[12];
      a4 = v23;
    }
    *(void *)a4 = v12;
    *(float *)(a4 + 8) = v15;
    *(_DWORD *)(a4 + 12) = v14;
    *(float *)(a4 + 16) = v13;
    if (__p)
    {
      BOOL v31 = __p;
      operator delete(__p);
    }
    if (v26)
    {
      float v27 = v26;
      operator delete(v26);
    }
  }
}

void sub_1000233CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002340C(void *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  if (a1[9] == a1[8])
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039BFB0);
    }
    uint64_t v11 = qword_1003DB6A8;
    if (!os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_16;
    }
    *(_WORD *)buf = 0;
    uint64_t v12 = "[PU] LG buffer empty";
    goto LABEL_15;
  }
  if (a1[12] == a1[11])
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039BFB0);
    }
    uint64_t v11 = qword_1003DB6A8;
    if (!os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_16;
    }
    *(_WORD *)buf = 0;
    uint64_t v12 = "[PU] HA buffer empty";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, v12, buf, 2u);
LABEL_16:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return;
  }
  int v56 = 0;
  float v57 = 0;
  uint64_t v58 = 0;
  switch(a2)
  {
    case 2:
      *(void *)buf = &_mh_execute_header;
      *(_DWORD *)&uint8_t buf[8] = 2;
      sub_100024308((char *)&v56, (char *)buf, (uint64_t)&buf[12], 3uLL);
      break;
    case 1:
      *(void *)buf = &_mh_execute_header;
      sub_100024308((char *)&v56, (char *)buf, (uint64_t)&buf[8], 2uLL);
      break;
    case 0:
      *(_DWORD *)buf = 2;
      sub_100024308((char *)&v56, (char *)buf, (uint64_t)&buf[4], 1uLL);
      break;
  }
  __p = 0;
  unint64_t v61 = 0;
  uint64_t v62 = 0;
  sub_100024490(&__p, v56, (uint64_t)v57, (v57 - (unsigned char *)v56) >> 2);
  uint64_t v63 = 0x400F29F7411CF5C3;
  int v64 = 1102024197;
  memset(buf, 0, sizeof(buf));
  uint64_t v13 = a1[8];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[9] - v13) >> 2) - 3 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unsigned int v51 = a3;
    uint64_t v50 = a4;
    char v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    BOOL v17 = 0;
    float v18 = 0.0;
    int v54 = -1;
    uint64_t v19 = 1;
    uint64_t v20 = 1;
    unsigned int v52 = -1;
    int v49 = -1;
    int v21 = 0;
    float v22 = 0.0;
    while (1)
    {
      uint64_t v23 = a1[17];
      unint64_t v24 = *(void *)(v23 + 8 * (int)v15);
      uint64_t v25 = (int)v15;
      unint64_t v26 = *(void *)(a1[14] + 8 * (int)v16);
      BOOL v27 = v24 >= v26;
      unint64_t v28 = v24 - v26;
      if (!v27 && !v17)
      {
        while (1)
        {
          unint64_t v29 = *(void *)(v23 + 8 * v25);
          BOOL v17 = v29 < v26;
          if (v29 >= v26) {
            break;
          }
          uint64_t v15 = v25 + 1;
          BOOL v30 = v25 + 2 == (a1[18] - v23) >> 3;
          ++v25;
          if (v30) {
            goto LABEL_33;
          }
        }
        uint64_t v15 = v25;
LABEL_33:
        if ((int)v16 >= 1)
        {
          if (qword_1003DB6A0 != -1) {
            dispatch_once(&qword_1003DB6A0, &stru_10039BFB0);
          }
          uint64_t v35 = qword_1003DB6A8;
          if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)unint64_t v55 = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "[PU] LG ahead of HA", v55, 2u);
          }
          ++*(_DWORD *)(a1[4] + 528);
        }
        uint64_t v20 = v16;
        goto LABEL_62;
      }
      uint64_t v53 = v15;
      char v31 = v14;
      unint64_t v32 = (int)v16;
      float v33 = (float)v28 * 0.000001;
      if (v33 < 0.00125 && !v17)
      {
        int v36 = v54;
        if ((v31 & 1) == 0) {
          int v36 = v16;
        }
        int v54 = v36;
        sub_100023C14((uint64_t)buf, v13 + 12 * (int)v16, a1[11] + 12 * (int)v25, v33);
        sub_100023B9C((uint64_t)buf, v13 + 12 * (int)v16);
        uint64_t v37 = v25 << 32;
        for (uint64_t i = 12 * v25; ; i += 12)
        {
          LODWORD(v15) = v25 + 1;
          uint64_t v39 = a1[11];
          uint64_t v40 = a1[17];
          if (0xAAAAAAAAAAAAAAABLL * ((a1[12] - v39) >> 2) <= v25 + 1
            || *(void *)(v40 + 8 * v25 + 8) - *(void *)(v40 + 8 * v25) > 0x4E1uLL)
          {
            break;
          }
          uint64_t v41 = v39 + i;
          sub_100023C14((uint64_t)buf, v39 + i, v39 + i + 12, 0.0003125);
          v37 += (uint64_t)&_mh_execute_header;
          sub_100023B9C((uint64_t)buf, v41);
          ++v25;
        }
        uint64_t v42 = a1[14];
        unint64_t v43 = v37 >> 32;
        unint64_t v44 = *(void *)(v40 + (v37 >> 29));
        do
        {
          if (*(void *)(v42 + 8 * v32) >= v44) {
            break;
          }
          ++v32;
        }
        while (((a1[15] - v42) >> 3) - 1 > v32);
        uint64_t v45 = v39 + 12 * SHIDWORD(v37);
        unsigned int v52 = v32;
        float v46 = (float)(*(void *)(v42 + 8 * (int)v32) - v44) * 0.000001;
        if (v46 > 0.00125) {
          float v46 = 0.00125;
        }
        sub_100023C14((uint64_t)buf, v45, a1[8] + 12 * (int)v32, v46);
        sub_100023B9C((uint64_t)buf, v45);
        unint64_t v47 = -1 - 0x5555555555555555 * ((uint64_t)(a1[12] - a1[11]) >> 2);
        BOOL v17 = v47 <= v43;
        if (v47 > v43) {
          uint64_t v15 = v15;
        }
        else {
          uint64_t v15 = v25;
        }
        char v14 = 1;
        uint64_t v20 = v52;
        goto LABEL_62;
      }
      if (sub_100023B9C((uint64_t)buf, v13 + 12 * (int)v16) <= a5)
      {
        if (v31)
        {
          if ((float)((float)(int)(v16 - v52) * 0.00125) > a6)
          {
            if (v52 - v54 + 1 >= v51)
            {
              uint64_t v15 = v53;
              if (*(float *)&buf[32] > v18 || v49 == -1)
              {
                float v22 = (float)(int)(v52 - v54) * 0.00125;
                int v21 = *(_DWORD *)&buf[36];
                float v18 = *(float *)&buf[32];
                int v49 = v16;
              }
            }
            else
            {
              uint64_t v15 = v53;
            }
            char v14 = 0;
            memset(&buf[20], 0, 20);
            int v54 = -1;
            goto LABEL_62;
          }
          char v14 = 1;
        }
        else
        {
          char v14 = 0;
        }
      }
      else
      {
        int v34 = v54;
        if ((v31 & 1) == 0) {
          int v34 = v16;
        }
        int v54 = v34;
        sub_100023C14((uint64_t)buf, v13 + 12 * (int)v16, v13 + 12 * v19, 0.00125);
        char v14 = 1;
        unsigned int v52 = v16;
      }
      uint64_t v15 = v53;
LABEL_62:
      uint64_t v16 = v20;
      uint64_t v20 = (v20 + 1);
      uint64_t v19 = (int)v20;
      uint64_t v13 = a1[8];
      if (-1 - 0x5555555555555555 * ((a1[9] - v13) >> 2) <= (unint64_t)(int)v20)
      {
        uint64_t v48 = *(void *)&buf[12];
        a4 = v50;
        goto LABEL_69;
      }
    }
  }
  uint64_t v48 = 0;
  float v22 = 0.0;
  int v21 = 0;
  float v18 = 0.0;
LABEL_69:
  *(void *)a4 = v48;
  *(float *)(a4 + 8) = v18;
  *(_DWORD *)(a4 + 12) = v21;
  *(float *)(a4 + 16) = v22;
  if (__p)
  {
    unint64_t v61 = __p;
    operator delete(__p);
  }
  if (v56)
  {
    float v57 = v56;
    operator delete(v56);
  }
}

void sub_100023AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100023B1C(void *a1, uint64_t a2)
{
}

uint64_t sub_100023B38(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  sub_100024490((void *)(a1 + 40), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 64) = 0x400F29F7411CF5C3;
  *(_DWORD *)(a1 + 72) = 1102024197;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  return a1;
}

float sub_100023B9C(uint64_t a1, uint64_t a2)
{
  id v2 = *(int **)(a1 + 40);
  id v3 = *(int **)(a1 + 48);
  if (v2 == v3)
  {
    float v5 = 0.0;
  }
  else
  {
    float v5 = 0.0;
    do
    {
      unint64_t v6 = *v2++;
      float v7 = sub_100023FE4(a2, v6);
      float v5 = v5 + (float)(v7 * sub_100023FE4(a2, v6));
    }
    while (v2 != v3);
  }
  return sqrtf(v5);
}

void sub_100023C14(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  float32x2_t v18 = 0;
  float v19 = 0.0;
  float v5 = *(int **)(a1 + 40);
  unint64_t v6 = *(int **)(a1 + 48);
  if (v5 != v6)
  {
    double v9 = a4;
    do
    {
      unint64_t v10 = *v5++;
      float v11 = sub_100023FE4(a2, v10);
      float v12 = (float)(v11 + sub_100023FE4(a3, v10)) * 0.5 * v9 * *(float *)(a1 + 72);
      *(float *)sub_100021EF8((uint64_t)&v18, v10) = v12;
    }
    while (v5 != v6);
  }
  float v13 = sub_100023B9C(a1, (uint64_t)&v18);
  *(float32x2_t *)a1 = vadd_f32(v18, *(float32x2_t *)a1);
  *(float *)(a1 + 8) = v19 + *(float *)(a1 + 8);
  float v14 = sub_100023B9C(a1, a1);
  float v15 = *(float *)(a1 + 16);
  if (*(float *)(a1 + 12) >= v14) {
    float v14 = *(float *)(a1 + 12);
  }
  *(float *)(a1 + 12) = v14;
  *(float *)(a1 + 16) = v13 + v15;
  *(float32x2_t *)(a1 + 20) = vadd_f32(v18, *(float32x2_t *)(a1 + 20));
  *(float *)(a1 + 28) = v19 + *(float *)(a1 + 28);
  float v16 = sub_100023B9C(a1, a1 + 20);
  float v17 = *(float *)(a1 + 36);
  if (*(float *)(a1 + 32) >= v16) {
    float v16 = *(float *)(a1 + 32);
  }
  *(float *)(a1 + 32) = v16;
  *(float *)(a1 + 36) = v13 + v17;
}

uint64_t sub_100023D68(uint64_t result)
{
  *(void *)(result + 28) = 0;
  *(void *)(result + 20) = 0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100023D78(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100023DAC(uint64_t a1)
{
  *(_DWORD *)(a1 + 216) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 709) = 0;
  if (*(unsigned char *)(a1 + 214)) {
    *(unsigned char *)(a1 + 214) = 0;
  }
  (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  sub_100023E3C((char **)(a1 + 64), 0xC80uLL);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  *(void *)(v2 + 8) = v3;
  sub_100023F20((void **)v2, 0xC80uLL);
  *(_DWORD *)(v2 + 624) = 0;
}

void sub_100023E3C(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556) {
      sub_10000EE98();
    }
    uint64_t v5 = (a1[1] - *a1) / 12;
    unint64_t v6 = (char *)sub_1000242C0(v3, a2);
    float v7 = &v6[12 * v5];
    double v9 = &v6[12 * v8];
    float v11 = *a1;
    unint64_t v10 = a1[1];
    float v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *(void *)(v10 - 12);
        v10 -= 12;
        int v14 = *((_DWORD *)v10 + 2);
        *(void *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      unint64_t v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_100023F20(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_10000EE98();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_10000EEB0(v3, a2);
    float v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    double v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    float v11 = (char *)a1[1];
    float v12 = v7;
    if (v11 != *a1)
    {
      float v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_100023FC8(void *a1)
{
}

float sub_100023FE4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100325844();
    }
    __assert_rtn("operator[]", "CMVector.h", 271, "false");
  }
  return *(float *)(a1 + 4 * a2);
}

void sub_10002404C(CLKappaAlgBlock *a1)
{
}

void sub_100024058(CLKappaAlgBlock *a1)
{
  sub_10002450C(a1, (uint64_t *)&off_10039B980);

  operator delete();
}

void sub_10002409C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    sub_10000BB9C(v4);
  }
}

void sub_1000240C8(void *a1)
{
}

void sub_1000240EC(void *a1)
{
  sub_10002450C((CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)&off_10039B980);

  operator delete();
}

void sub_100024144(void *a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 32);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 7);
  *((void *)v2 + 6) = v4;
  *((void *)v2 + 7) = v3;
  if (v5) {
    sub_10000BB9C(v5);
  }
}

void sub_100024184(void *a1)
{
}

void sub_1000241A8(void *a1)
{
  sub_10002450C((CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)&off_10039B980);

  operator delete();
}

void sub_100024200(void *a1)
{
}

void sub_100024224(void *a1)
{
  sub_10002450C((CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)&off_10039B980);

  operator delete();
}

void sub_10002427C(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void *sub_1000242C0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_10000B42C();
  }
  return operator new(12 * a2);
}

char *sub_100024308(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  float v7 = result;
  uint64_t v8 = *((void *)result + 2);
  double v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *float v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_10000EE98();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_100024414(v7, v11);
    uint64_t v13 = (char *)v7[1];
    float v12 = (void **)(v7 + 1);
    double v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float32x2_t v18 = v9;
      float v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  float v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  float v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    double v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float32x2_t v18 = v9;
    float v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *float v12 = &v9[v17];
  return result;
}

char *sub_100024414(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_10000EE98();
  }
  uint64_t result = (char *)sub_100024458((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_100024458(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_10000B42C();
  }
  return operator new(4 * a2);
}

void *sub_100024490(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_100024414(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000244F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002450C(CLKappaAlgBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  int64_t v5 = (void *)*((void *)this + 17);
  if (v5)
  {
    *((void *)this + 18) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 14);
  if (v6)
  {
    *((void *)this + 15) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 11);
  if (v7)
  {
    *((void *)this + 12) = v7;
    operator delete(v7);
  }
  size_t v8 = (void *)*((void *)this + 8);
  if (v8)
  {
    *((void *)this + 9) = v8;
    operator delete(v8);
  }
  double v9 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v9) {
    sub_10000BB9C(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v10) {
    sub_10000BB9C(v10);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, a2 + 1);
}

void sub_100024708(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10039BFE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100024728(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10039BFE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10002477C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1000247A4(uint64_t a1)
{
  *(void *)a1 = &off_1003A1848;
  *(void *)(a1 + 16) = 0x3FC0000040800000;
  *(void *)(a1 + 24) = 0x23D99999ALL;
  *(void *)(a1 + 32) = 0x3D99999A3FC00000;
  *(_DWORD *)(a1 + 40) = 2;
  *(void *)(a1 + 44) = 0x3D99999A40000000;
  *(_DWORD *)(a1 + 52) = 2;
  *(_OWORD *)(a1 + 56) = xmmword_100338720;
  *(void *)(a1 + 72) = 0x23D99999ALL;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_OWORD *)(a1 + 420) = 0u;
  *(_OWORD *)(a1 + 436) = 0u;
  *(_OWORD *)(a1 + 452) = 0u;
  *(_OWORD *)(a1 + 468) = 0u;
  *(_OWORD *)(a1 + 484) = 0u;
  *(void *)(a1 + 500) = 0;
  return a1;
}

uint64_t sub_1000248AC(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      int v8 = *((_DWORD *)a1 + 1);
      int v9 = 134218754;
      CFAbsoluteTime v10 = Current;
      __int16 v11 = 2080;
      float v12 = "const T &CMQueue<CMVector<float, 3>>::operator[](const size_t) const [T = CMVector<float, 3>]";
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 1024;
      int v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  unint64_t v5 = *a1 + a2;
  if (v5 < v4) {
    unint64_t v4 = 0;
  }
  return (uint64_t)&a1[6 * (v5 - v4) + 4];
}

unsigned __int16 *sub_1000249D8(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  unint64_t v4 = &result[6 * (v3 - v2)];
  int v5 = *(_DWORD *)(a2 + 8);
  *((void *)v4 + 1) = *(void *)a2;
  *((_DWORD *)v4 + 4) = v5;
  unsigned int v6 = result[1];
  unint64_t v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    unint64_t v8 = *result + 1;
    if (v8 < v7) {
      LOWORD(v7) = 0;
    }
    *uint64_t result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

void start()
{
  if (qword_1003DB670 != -1) {
    dispatch_once(&qword_1003DB670, &stru_10039C040);
  }
  uint64_t v1 = qword_1003DB678;
  if (os_log_type_enabled((os_log_t)qword_1003DB678, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Starting", buf, 2u);
  }
  unint64_t v2 = +[CSPlatformInfo sharedInstance];
  LODWORD(v3) = [v2 isKappaLoggingDevice];
  unsigned int v4 = [v2 isKappaDetectionDevice];
  if ((v3 & v4) == 1)
  {
    int v9 = sub_10002504C();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      unsigned int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2082;
      BOOL v27 = "assert";
      __int16 v28 = 2081;
      unint64_t v29 = "false";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"logging and detection are mutually exclusive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    CFAbsoluteTime v10 = sub_10002504C();
    if (os_signpost_enabled(v10))
    {
      *(_DWORD *)buf = 68289539;
      unsigned int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2082;
      BOOL v27 = "assert";
      __int16 v28 = 2081;
      unint64_t v29 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "logging and detection are mutually exclusive", "{\"msg%{public}.0s\":\"logging and detection are mutually exclusive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    unint64_t v3 = sub_10002504C();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      unsigned int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2082;
      BOOL v27 = "assert";
      __int16 v28 = 2081;
      unint64_t v29 = "false";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"logging and detection are mutually exclusive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    abort_report_np();
    __break(1u);
  }
  else
  {
    if (qword_1003DB670 != -1) {
      dispatch_once(&qword_1003DB670, &stru_10039C040);
    }
    int v5 = qword_1003DB678;
    if (os_log_type_enabled((os_log_t)qword_1003DB678, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      unsigned int v23 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "isLoggingDevice %{public}d", buf, 8u);
    }
    if (qword_1003DB670 != -1) {
      dispatch_once(&qword_1003DB670, &stru_10039C040);
    }
    unsigned int v6 = qword_1003DB678;
    if (os_log_type_enabled((os_log_t)qword_1003DB678, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      unsigned int v23 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "isDetectionDevice %{public}d", buf, 8u);
    }
    char v7 = _set_user_dir_suffix();
    if (confstr(65537, (char *)buf, 0x40uLL)) {
      char v8 = v7;
    }
    else {
      char v8 = 0;
    }
    if ((v8 & 1) == 0)
    {
      perror("Unable to change temporary directory");
      _Exit(1);
    }
  }
  __int16 v11 = sub_10002504C();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v21 = 136446210;
    *(void *)&v21[4] = buf;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Temporary directory: %{public}s", v21, 0xCu);
  }

  CFStringRef v19 = @"CSCompanionService";
  CFStringRef v20 = @"CSCompanionService";
  uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
  [v2 isKappaDetectionDevice];
  [v2 isKappaLoggingDevice];
  __int16 v13 = objc_opt_new();
  [v13 setServiceReplacementMap:v12 missBehavior:0];
  [v13 ensureServiceIsRunning:@"CSCompanionService"];
  [v13 ensureServiceIsRunning:@"CSAnomalyEventService"];
  *(void *)int v21 = 0xF00000002;
  *(_DWORD *)&v21[8] = 3;
  sub_1000251DC(__p, v21, 3uLL);
  sub_1000250A0((int **)__p, v13);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (((v3 | v4) & 1) == 0)
  {
    unint64_t v14 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    __int16 v15 = dispatch_queue_create("FeatureDisabledExit", v14);

    int v16 = sub_10002504C();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "exiting in 5 seconds", v21, 2u);
    }

    dispatch_time_t v17 = dispatch_time(0, 5000000000);
    dispatch_after(v17, v15, &stru_10039C020);
  }
  dispatch_main();
}

void sub_100024FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_10002504C()
{
  if (qword_1003DB670 != -1) {
    dispatch_once(&qword_1003DB670, &stru_10039C040);
  }
  int v0 = (void *)qword_1003DB678;

  return v0;
}

void sub_1000250A0(int **a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *a1;
  int v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      int v6 = *v4;
      sigignore(*v4);
      dispatch_source_t v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, v6, 0, (dispatch_queue_t)&_dispatch_main_q);
      if (v7)
      {
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_100025338;
        handler[3] = &unk_10039C068;
        int v12 = v6;
        id v10 = v3;
        char v8 = v7;
        __int16 v11 = v8;
        dispatch_source_set_event_handler(v8, handler);
        dispatch_activate(v8);
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_1000251CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1000251DC(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_100024414(a1, a3);
    int v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_100025244(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100025260(id a1)
{
  if (qword_1003DB670 != -1) {
    dispatch_once(&qword_1003DB670, &stru_10039C040);
  }
  uint64_t v1 = qword_1003DB678;
  if (os_log_type_enabled((os_log_t)qword_1003DB678, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "exiting daemon", v2, 2u);
  }
  raise(3);
}

void sub_1000252F4(id a1)
{
  qword_1003DB678 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "main");

  _objc_release_x1();
}

void sub_100025338(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  id v2 = *(id *)(a1 + 32);
  if (qword_1003DB670 != -1) {
    dispatch_once(&qword_1003DB670, &stru_10039C040);
  }
  id v3 = qword_1003DB678;
  if (os_log_type_enabled((os_log_t)qword_1003DB678, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67240192;
    v4[1] = v1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Exiting with signal %{public}d", (uint8_t *)v4, 8u);
  }
  [v2 retireServiceWithName:@"CSKappaDetectionService"];
  _Exit(0);
}

void sub_100025404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000254D0(id a1)
{
  qword_1003DD6B8 = [[CSMartyTap2RadarConfiguration alloc] initWithAllowOnBattery:1 checkIntervalInSeconds:3600 coolDownPeriodInSeconds:1800];

  _objc_release_x1();
}

void sub_1000255E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000255F8(id a1)
{
  qword_1003DD6C0 = [[CSMartyTap2RadarConfiguration alloc] initWithAllowOnBattery:1 checkIntervalInSeconds:3600 coolDownPeriodInSeconds:1800];

  _objc_release_x1();
}

void sub_100025868(_Unwind_Exception *a1)
{
  dispatch_source_t v7 = v6;

  _Unwind_Resume(a1);
}

id sub_1000258C4()
{
  if (qword_1003DB7B0 != -1) {
    dispatch_once(&qword_1003DB7B0, &stru_10039C158);
  }
  int v0 = (void *)qword_1003DB7B8;

  return v0;
}

void sub_100025B4C(_Unwind_Exception *a1)
{
  char v8 = v6;

  _Unwind_Resume(a1);
}

void sub_100025C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100025DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000260E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_10002617C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (sub_10001D0F8(*(void **)(a1 + 32), a3, @"ttrAction"))
  {
    int v6 = +[NSData dataWithContentsOfURL:v5];
    id v7 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v6 error:a3];
    if (![v7 containsValueForKey:@"triggerUUID"]
      || ![v7 containsValueForKey:@"timestamp"]
      || ([v7 containsValueForKey:@"ttrManagedFiles"] & 1) == 0)
    {
      uint64_t v16 = 0;
LABEL_18:

      goto LABEL_19;
    }
    char v8 = [v7 decodeObjectOfClass:objc_opt_class() forKey:@"triggerUUID"];
    id v9 = [v7 decodeInt64ForKey:@"timestamp"];
    double Current = CFAbsoluteTimeGetCurrent();
    id v11 = [v7 decodeBoolForKey:@"ttrManagedFiles"];
    uint64_t v12 = (uint64_t)Current - (void)v9;
    if (v12 < (uint64_t)[*(id *)(*(void *)(a1 + 32) + 8) coolDownPeriodInSeconds])
    {
      if (qword_1003DB7B0 != -1) {
        dispatch_once(&qword_1003DB7B0, &stru_10039C158);
      }
      __int16 v13 = (id)qword_1003DB7B8;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        unint64_t v14 = (char *)[*(id *)(*(void *)(a1 + 32) + 8) coolDownPeriodInSeconds];
        *(_DWORD *)buf = 138412546;
        unint64_t v29 = v8;
        __int16 v30 = 2048;
        char v31 = &v14[-v12];
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Backing down from TTR %@ because we still need to cool down for %lld seconds", buf, 0x16u);
      }

      if (!a3)
      {
        uint64_t v16 = 0;
LABEL_45:

        goto LABEL_18;
      }
      NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
      CFStringRef v27 = @"Cooldown still in place";
      __int16 v15 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
      +[NSError errorWithDomain:NSPOSIXErrorDomain code:35 userInfo:v15];
      uint64_t v16 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_44:

      goto LABEL_45;
    }
    id v19 = [*(id *)(a1 + 32) showConfirmationWithError:a3 withEventType:4];
    __int16 v15 = v20;
    if (qword_1003DB7B0 != -1) {
      dispatch_once(&qword_1003DB7B0, &stru_10039C158);
    }
    int v21 = qword_1003DB7B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB7B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v29) = v19;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Marty TTR confirmation result: %d", buf, 8u);
    }
    if (v19 == 3)
    {
      unsigned int v23 = sub_1000258C4();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v29) = v11;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "User chose not to file radar. ttrManaged,%d", buf, 8u);
      }

      [*(id *)(a1 + 32) deletePendingFiles:v8 ttrManagedMsl:v11];
    }
    else
    {
      if (v19 == 4)
      {
        float v22 = sub_1000258C4();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v29) = v11;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Error with confirmation. ttrManagedFiles,%d", buf, 8u);
        }
LABEL_43:

        [*(id *)(a1 + 32) deletePendingFiles:v8 ttrManagedMsl:v11];
        uint64_t v16 = 0;
        goto LABEL_44;
      }
      if (([*(id *)(a1 + 32) showPrivacyNotificationWithError:a3] & 1) == 0)
      {
        float v22 = sub_1000258C4();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v29) = v11;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "User did not consent. ttrManaged,%d", buf, 8u);
        }
        goto LABEL_43;
      }
      if (([*(id *)(a1 + 32) radarWithResult:v19 triggerUUID:v8 ttrManagedMsl:v11 eventType:4 error:a3 formattedDate:v15] & 1) == 0)
      {
        float v22 = sub_1000258C4();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v29) = v11;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Not able to generate TTR. ttrManaged,%d", buf, 8u);
        }
        goto LABEL_43;
      }
    }
    __int16 v24 = sub_1000258C4();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "removing TTR file", buf, 2u);
    }

    uint64_t v25 = +[NSFileManager defaultManager];
    [v25 removeItemAtURL:v5 error:0];

    uint64_t v16 = 1;
    goto LABEL_44;
  }
  if (qword_1003DB7B0 != -1) {
    dispatch_once(&qword_1003DB7B0, &stru_10039C158);
  }
  dispatch_time_t v17 = qword_1003DB7B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB7B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "!checkForSpoolerDirectory", buf, 2u);
  }
  uint64_t v16 = 0;
LABEL_19:

  return v16;
}

void sub_10002676C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000267F8(id a1, NSURL *a2, id *a3)
{
  unsigned int v4 = a2;
  id v5 = +[NSFileManager defaultManager];
  int v6 = v4;
  id v7 = [(NSURL *)v6 path];
  char v8 = [v5 attributesOfItemAtPath:v7 error:a3];

  if (a3)
  {
    id v9 = [v8 fileCreationDate];
    [v9 timeIntervalSinceNow];
    double v11 = v10;

    uint64_t v12 = +[CSPersistentConfiguration sharedConfiguration];
    unint64_t v13 = (unint64_t)[v12 getFloatDefault:@"MartyTTRCleanupExpirationAge"];
    if ((v13 & 0xFF00000000) != 0) {
      double v14 = *(float *)&v13;
    }
    else {
      double v14 = 14400.0;
    }
    if (qword_1003DB7B0 != -1) {
      dispatch_once(&qword_1003DB7B0, &stru_10039C158);
    }
    double v15 = fabs(v11);
    uint64_t v16 = qword_1003DB7B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB7B8, OS_LOG_TYPE_DEBUG))
    {
      int v20 = 138412802;
      int v21 = v6;
      __int16 v22 = 2048;
      double v23 = v15;
      __int16 v24 = 2048;
      double v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Checking file: %@: age:%4.2f ageExpiration:%4.2f", (uint8_t *)&v20, 0x20u);
    }
    BOOL v17 = v15 > v14;
  }
  else
  {
    if (qword_1003DB7B0 != -1) {
      dispatch_once(&qword_1003DB7B0, &stru_10039C158);
    }
    float32x2_t v18 = qword_1003DB7B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB7B8, OS_LOG_TYPE_DEBUG))
    {
      int v20 = 138412546;
      int v21 = v6;
      __int16 v22 = 2112;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Error getting file attributes: %@ - %@", (uint8_t *)&v20, 0x16u);
    }
    BOOL v17 = 1;
  }

  return v17;
}

void sub_100026A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100026B40(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v28 = 0;
  id v3 = [v2 showConfirmationWithError:&v28 withEventType:*(void *)(a1 + 48)];
  id v5 = v4;
  id v6 = v28;
  if (qword_1003DB7B0 != -1) {
    dispatch_once(&qword_1003DB7B0, &stru_10039C158);
  }
  id v7 = qword_1003DB7B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB7B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    int v30 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Marty TTR confirmation result: %d", buf, 8u);
  }
  if (v3 == 3)
  {
    if (qword_1003DB7B0 != -1) {
      dispatch_once(&qword_1003DB7B0, &stru_10039C158);
    }
    __int16 v22 = qword_1003DB7B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB7B8, OS_LOG_TYPE_DEBUG))
    {
      int v23 = *(unsigned __int8 *)(a1 + 56);
      *(_DWORD *)buf = 67109120;
      int v30 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "User chose not to file radar. ttrManaged,%d", buf, 8u);
    }
    [*(id *)(a1 + 32) deletePendingFiles:*(void *)(a1 + 40) ttrManagedMsl:*(unsigned __int8 *)(a1 + 56)];
  }
  else
  {
    if (v3 == 4)
    {
      if (qword_1003DB7B0 != -1) {
        dispatch_once(&qword_1003DB7B0, &stru_10039C158);
      }
      char v8 = qword_1003DB7B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB7B8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *(unsigned __int8 *)(a1 + 56);
        *(_DWORD *)buf = 67109120;
        int v30 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Error with confirmation. ttrManagedFiles,%d", buf, 8u);
      }
      [*(id *)(a1 + 32) deletePendingFiles:*(void *)(a1 + 40) ttrManagedMsl:*(unsigned __int8 *)(a1 + 56)];
    }
    if (qword_1003DB7B0 != -1) {
      dispatch_once(&qword_1003DB7B0, &stru_10039C158);
    }
    double v10 = qword_1003DB7B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB7B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "User chose to file radar.", buf, 2u);
    }
    double v11 = *(void **)(a1 + 32);
    id v27 = v6;
    unsigned __int8 v12 = [v11 showPrivacyNotificationWithError:&v27];
    id v13 = v27;

    id v6 = v13;
    if (v12)
    {
      double v14 = *(void **)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = *(unsigned __int8 *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 48);
      id v26 = v13;
      unsigned __int8 v18 = [v14 radarWithResult:v3 triggerUUID:v15 ttrManagedMsl:v16 eventType:v17 error:&v26 formattedDate:v5];
      id v19 = v26;

      id v6 = v19;
      if ((v18 & 1) == 0)
      {
        if (qword_1003DB7B0 != -1) {
          dispatch_once(&qword_1003DB7B0, &stru_10039C158);
        }
        int v20 = qword_1003DB7B8;
        if (os_log_type_enabled((os_log_t)qword_1003DB7B8, OS_LOG_TYPE_DEBUG))
        {
          int v21 = *(unsigned __int8 *)(a1 + 56);
          *(_DWORD *)buf = 67109120;
          int v30 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Not able to generate TTR. ttrManaged,%d", buf, 8u);
        }
        [*(id *)(a1 + 32) deletePendingFiles:*(void *)(a1 + 40) ttrManagedMsl:*(unsigned __int8 *)(a1 + 56)];
      }
    }
    else
    {
      if (qword_1003DB7B0 != -1) {
        dispatch_once(&qword_1003DB7B0, &stru_10039C158);
      }
      __int16 v24 = qword_1003DB7B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB7B8, OS_LOG_TYPE_DEBUG))
      {
        int v25 = *(unsigned __int8 *)(a1 + 56);
        *(_DWORD *)buf = 67109120;
        int v30 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "User did not consent. ttrManaged,%d", buf, 8u);
      }
      [*(id *)(a1 + 32) deletePendingFiles:*(void *)(a1 + 40) ttrManagedMsl:*(unsigned __int8 *)(a1 + 56)];
    }
  }
}

void sub_100026F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002715C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002748C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100027784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000279A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100027B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100028170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

id sub_1000282A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) deletePendingMetadatafile:*(void *)(a1 + 40) ttrManagedMsl:1];
}

void sub_100028338(id a1)
{
  qword_1003DB7B8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "MartyTap2Radar");

  _objc_release_x1();
}

id MartyCompanion::serializeDeviceInfo(MartyCompanion *this, const CompanionDeviceInfo *a2)
{
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039C178);
  }
  id v3 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(_DWORD *)this;
    if (*((char *)this + 31) >= 0) {
      id v5 = (char *)this + 8;
    }
    else {
      id v5 = (char *)*((void *)this + 1);
    }
    int v6 = *((_DWORD *)this + 8);
    int v7 = *((_DWORD *)this + 9);
    int v8 = *((_DWORD *)this + 10);
    int v9 = *((_DWORD *)this + 11);
    int v10 = *((_DWORD *)this + 12);
    int v11 = *((_DWORD *)this + 13);
    int v12 = *((_DWORD *)this + 14);
    *(_DWORD *)buf = 67176707;
    int v24 = v4;
    *(_WORD *)int v25 = 2081;
    *(void *)&v25[2] = v5;
    *(_WORD *)&v25[10] = 1025;
    int v26 = v6;
    LOWORD(v27) = 1025;
    *(_DWORD *)((char *)&v27 + 2) = v8;
    HIWORD(v27) = 1025;
    int v28 = v7;
    LOWORD(v29) = 1025;
    *(_DWORD *)((char *)&v29 + 2) = v9;
    HIWORD(v29) = 1025;
    int v30 = v10;
    __int16 v31 = 1025;
    int v32 = v11;
    __int16 v33 = 1025;
    int v34 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sending marty device info %{private}d %{private}s %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d", buf, 0x3Cu);
  }
  PB::Writer::Writer((PB::Writer *)&v21);
  KappaCompanionDeviceInfo::KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)buf);
  int v13 = *(_DWORD *)this;
  LOBYTE(v31) = v31 | 1;
  *(_DWORD *)&v25[8] = v13;
  sub_100029B58((uint64_t)buf);
  std::string::operator=(*(std::string **)v25, (const std::string *)((char *)this + 8));
  int v14 = *((_DWORD *)this + 9);
  int v15 = *((_DWORD *)this + 10);
  int v16 = *((_DWORD *)this + 11);
  HIDWORD(v27) = *((_DWORD *)this + 8);
  int v28 = v15;
  HIDWORD(v29) = v14;
  int v30 = v16;
  int v17 = *((_DWORD *)this + 12);
  LODWORD(v29) = *((_DWORD *)this + 13);
  int v18 = *((_DWORD *)this + 14);
  LOBYTE(v31) = v31 | 0xFE;
  int v26 = v18;
  LODWORD(v27) = v17;
  KappaCompanionDeviceInfo::writeTo((uint64_t)buf, (PB::Writer *)&v21);
  id v19 = +[NSData dataWithBytes:v22 length:v21 - v22];
  KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)buf);
  PB::Writer::~Writer((PB::Writer *)&v21);

  return v19;
}

void sub_100028564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)va1);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void MartyCompanion::deserializeDeviceInfo(MartyCompanion *this, const NSData *a2)
{
  id v2 = this;
  PB::Reader::Reader((PB::Reader *)v24, (const unsigned __int8 *)[(MartyCompanion *)v2 bytes], (unint64_t)[(MartyCompanion *)v2 length]);
  KappaCompanionDeviceInfo::KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)v13);
  int v8 = 0;
  *(_OWORD *)__p = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  int v12 = 0;
  KappaCompanionDeviceInfo::readFrom((KappaCompanionDeviceInfo *)v13, (PB::Reader *)v24);
  char v3 = v23;
  if (v23) {
    int v8 = v15;
  }
  if (__str)
  {
    std::string::operator=((std::string *)__p, __str);
    char v3 = v23;
  }
  int v4 = v18;
  int v5 = v21;
  if ((v3 & 8) == 0) {
    int v4 = -1;
  }
  if ((v3 & 0x40) == 0) {
    int v5 = -1;
  }
  *((void *)&v10 + 1) = __PAIR64__(v5, v4);
  if ((v3 & 0x10) != 0)
  {
    LODWORD(v11) = v19;
    if ((v3 & 0x80) == 0)
    {
LABEL_11:
      if ((v3 & 4) == 0) {
        goto LABEL_12;
      }
      goto LABEL_25;
    }
  }
  else if ((v3 & 0x80) == 0)
  {
    goto LABEL_11;
  }
  DWORD1(v11) = v22;
  if ((v3 & 4) == 0)
  {
LABEL_12:
    if ((v3 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  DWORD2(v11) = v17;
  if ((v3 & 0x20) == 0)
  {
LABEL_13:
    if ((v3 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_26:
  HIDWORD(v11) = v20;
  if ((v3 & 2) == 0)
  {
LABEL_15:
    if (qword_1003DB710 != -1) {
      dispatch_once(&qword_1003DB710, &stru_10039C178);
    }
    uint64_t v6 = qword_1003DB718;
    if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
    {
      if ((SBYTE7(v10) & 0x80u) == 0) {
        int v7 = __p;
      }
      else {
        int v7 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67176707;
      int v26 = v8;
      __int16 v27 = 2081;
      int v28 = v7;
      __int16 v29 = 1025;
      int v30 = DWORD2(v10);
      __int16 v31 = 1025;
      int v32 = v11;
      __int16 v33 = 1025;
      int v34 = HIDWORD(v10);
      __int16 v35 = 1025;
      int v36 = DWORD1(v11);
      __int16 v37 = 1025;
      int v38 = DWORD2(v11);
      __int16 v39 = 1025;
      int v40 = HIDWORD(v11);
      __int16 v41 = 1025;
      int v42 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "receiving marty device info %{private}d %{private}s %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d", buf, 0x3Cu);
    }
    operator new();
  }
LABEL_14:
  int v12 = v16;
  goto LABEL_15;
}

void sub_100028850(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

id MartyCompanion::serializeTrigger(float16x4_t *this, const CompanionTrigger *a2)
{
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039C178);
  }
  char v3 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    int v4 = this[1].u8[0];
    int v5 = this[1].u8[1];
    int v6 = this[1].u16[1];
    __int32 v7 = this[1].i32[1];
    float16x4_t v8 = this[2];
    double v9 = *(float *)this[3].i32;
    double v10 = *(float *)&this[3].i32[1];
    __int32 v11 = this[4].i8[0];
    int v12 = this[4].i8[1];
    int v13 = this[4].i8[2];
    int v14 = this[4].i8[3];
    int v15 = this[4].i8[4];
    float16x4_t v16 = this[5];
    _H2 = this[6].i16[0];
    __asm { FCVT            D2, H2 }
    _H3 = this[6].i16[1];
    __asm { FCVT            D3, H3 }
    _H4 = this[6].i16[2];
    __asm { FCVT            D4, H4 }
    int v27 = this[6].u8[6];
    int v28 = this[6].u8[7];
    int v29 = this[7].u16[0];
    float16x4_t v30 = this[8];
    double v31 = *(float *)&this[11].i32[1];
    double v32 = *(float *)this[12].i32;
    *(_DWORD *)buf = 67180033;
    int v53 = v4;
    __int16 v54 = 1025;
    int v55 = v5;
    __int16 v56 = 1025;
    int v57 = v6;
    __int16 v58 = 1025;
    __int32 v59 = v7;
    __int16 v60 = 2049;
    *(float16x4_t *)unint64_t v61 = v8;
    *(_WORD *)&v61[8] = 2049;
    *(double *)&v61[10] = v9;
    *(_WORD *)&v61[18] = 2049;
    double v62 = v10;
    v63.i16[0] = 1025;
    *(__int32 *)((char *)v63.i32 + 2) = v11;
    v63.i16[3] = 1025;
    int v64 = v12;
    LOWORD(v65) = 1025;
    *(_DWORD *)((char *)&v65 + 2) = v13;
    HIWORD(v65) = 1025;
    int v66 = v14;
    LOWORD(v67) = 1025;
    *(_DWORD *)((char *)&v67 + 2) = v15;
    HIWORD(v67) = 2049;
    float16x4_t v68 = v16;
    *(_WORD *)unint64_t v69 = 2049;
    *(void *)&v69[2] = _D2;
    *(_WORD *)&v69[10] = 2049;
    unint64_t v70 = _D3;
    *(_WORD *)long long v71 = 2049;
    *(void *)&v71[2] = _D4;
    __int16 v72 = 1025;
    int v73 = v27;
    __int16 v74 = 1025;
    int v75 = v28;
    __int16 v76 = 1025;
    int v77 = v29;
    __int16 v78 = 2049;
    float16x4_t v79 = v30;
    __int16 v80 = 2049;
    double v81 = v31;
    __int16 v82 = 2049;
    double v83 = v32;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sending marty trigger info %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}d %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}f %{private}d %{private}d%{private}d %{private}llu%{private}f %{private}f", buf, 0xAEu);
  }
  PB::Writer::Writer((PB::Writer *)&v47);
  KappaTriggerSample::KappaTriggerSample((KappaTriggerSample *)buf);
  double v62 = *(double *)this;
  __int32 v33 = this[3].i32[1];
  HIDWORD(v65) = this[3].i32[0];
  unsigned int v34 = this[1].u8[1];
  __int32 v35 = this[1].u16[1];
  *(_DWORD *)&v69[4] = this[1].u8[0];
  v68.i32[0] = v35;
  __int32 v36 = this[1].i32[1];
  float16x4_t v63 = this[2];
  HIDWORD(v67) = v33;
  *(_DWORD *)&v69[8] = this[4].i8[0];
  unint64_t v70 = __PAIR64__(v36, v34);
  LODWORD(v67) = this[4].i8[1];
  int v37 = this[4].i8[2];
  *(void *)long long v71 = __PAIR64__(*(unsigned int *)&v71[4], this[4].i8[3]) | 0x3E77E00000000;
  int v38 = this[4].i8[4];
  int v64 = v37;
  LODWORD(v65) = v38;
  float16x4_t v39 = this[5];
  unint64_t __src = vcvtq_f32_f16(this[6]).u64[0];
  _H0 = this[6].i16[2];
  __asm { FCVT            S0, H0 }
  *(float16x4_t *)&v61[12] = v39;
  int v50 = _S0;
  sub_100024308((char *)&v54, (char *)&__src, (uint64_t)&v51, 3uLL);
  int v42 = this[6].u8[6];
  __int32 v43 = this[7].u16[0];
  int v66 = this[6].u8[7];
  v68.i32[1] = v43;
  *(_DWORD *)unint64_t v69 = v42;
  float16x4_t v44 = this[8];
  *(_DWORD *)&v71[4] |= 0x1881u;
  *(float16x4_t *)&v61[4] = v44;
  KappaTriggerSample::writeTo((uint64_t)buf, (PB::Writer *)&v47);
  uint64_t v45 = +[NSData dataWithBytes:v48 length:v47 - v48];
  KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)buf);
  PB::Writer::~Writer((PB::Writer *)&v47);

  return v45;
}

void sub_100028BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)va1);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void MartyCompanion::deserializeTrigger(MartyCompanion *this, const NSData *a2)
{
  __int16 v60 = this;
  PB::Reader::Reader((PB::Reader *)v99, (const unsigned __int8 *)[(MartyCompanion *)v60 bytes], (unint64_t)[(MartyCompanion *)v60 length]);
  KappaTriggerSample::KappaTriggerSample((KappaTriggerSample *)v78);
  int v76 = 0;
  __int16 v77 = 0;
  long long v140 = 0u;
  long long v141 = 0u;
  long long v142 = 0u;
  KappaTriggerSample::readFrom((KappaTriggerSample *)v78, (PB::Reader *)v99);
  int v2 = v98;
  int v3 = v93;
  int v4 = v95;
  int v5 = v90;
  int v6 = v96;
  if ((v98 & 8) != 0) {
    uint64_t v7 = v83;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((v98 & 0x40) != 0) {
    float v8 = v86;
  }
  else {
    float v8 = 0.0;
  }
  if ((v98 & 0x200) != 0) {
    float v9 = v89;
  }
  else {
    float v9 = 0.0;
  }
  int v10 = v94;
  int v71 = v88;
  int v65 = v97;
  int v67 = v84;
  int v63 = v85;
  if ((v98 & 2) != 0) {
    uint64_t v11 = v82;
  }
  else {
    uint64_t v11 = 0;
  }
  __p = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  sub_100029BCC(&__p, v79, v80, (v80 - (uint64_t)v79) >> 2);
  int v54 = v10;
  int v55 = v5;
  int v61 = v4;
  int v69 = v3;
  int v56 = v6;
  uint64_t v58 = v11;
  uint64_t v59 = v7;
  _H11 = 0;
  _H12 = 0;
  _H13 = 0;
  if (v74 - (void)__p == 12)
  {
    _S0 = *(_DWORD *)__p;
    _S1 = *((_DWORD *)__p + 1);
    __asm
    {
      FCVT            H11, S0
      FCVT            H12, S1
    }
    _S0 = *((_DWORD *)__p + 2);
    __asm { FCVT            H13, S0 }
  }
  int v22 = v2 << 18;
  int v23 = v2 << 16;
  int v24 = v2 << 21;
  int v25 = v2 << 17;
  int v26 = v2 << 23;
  int v27 = v2 << 27;
  int v28 = v2 << 14;
  int v29 = v2 << 26;
  int v30 = v2 << 15;
  int v31 = v98 << 19;
  int v32 = v92;
  int v33 = v87;
  int v34 = v91;
  int v35 = v98 << 24;
  int v36 = v98 << 20;
  if (v98) {
    uint64_t v37 = v81;
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t v57 = v37;
  if (qword_1003DB710 != -1)
  {
    int v52 = v25;
    int v53 = v30;
    int v50 = v27;
    int v51 = v26;
    int v49 = v28;
    dispatch_once(&qword_1003DB710, &stru_10039C178);
    int v28 = v49;
    int v27 = v50;
    int v26 = v51;
    int v25 = v52;
    int v30 = v53;
  }
  int v38 = v69 & (v22 >> 31);
  int v39 = v61 & (v23 >> 31);
  int v40 = v55 & (v24 >> 31);
  int v41 = v54 & (v25 >> 31);
  int v68 = v67 & (v27 >> 31);
  int v70 = v71 & (v26 >> 31);
  int v66 = v65 & (v28 >> 31);
  unsigned __int8 v62 = v39;
  int v64 = v63 & (v29 >> 31);
  int v42 = v32 & (v31 >> 31);
  int v43 = v33 & (v35 >> 31);
  int v72 = v34 & (v36 >> 31);
  float16x4_t v44 = qword_1003DB718;
  int v45 = v56 & (v30 >> 31);
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67179521;
    int v101 = v38;
    __int16 v102 = 1025;
    int v103 = v62;
    __int16 v104 = 1025;
    int v105 = (unsigned __int16)v40;
    __asm
    {
      FCVT            D2, H11
      FCVT            D3, H12
    }
    __int16 v106 = 1025;
    __asm { FCVT            D4, H13 }
    int v107 = v45;
    __int16 v108 = 2049;
    uint64_t v109 = v59;
    __int16 v110 = 2049;
    double v111 = v8;
    __int16 v112 = 2049;
    double v113 = v9;
    __int16 v114 = 1025;
    int v115 = (char)v41;
    __int16 v116 = 1025;
    int v117 = (char)v70;
    __int16 v118 = 1025;
    int v119 = (char)v68;
    __int16 v120 = 1025;
    int v121 = (char)v66;
    __int16 v122 = 1025;
    int v123 = (char)v64;
    __int16 v124 = 2049;
    uint64_t v125 = v58;
    __int16 v126 = 2049;
    uint64_t v127 = _D2;
    __int16 v128 = 2049;
    uint64_t v129 = _D3;
    __int16 v130 = 2049;
    uint64_t v131 = _D4;
    __int16 v132 = 1025;
    int v133 = v42;
    __int16 v134 = 1025;
    int v135 = v43;
    __int16 v136 = 1025;
    int v137 = (unsigned __int16)v72;
    __int16 v138 = 2049;
    uint64_t v139 = v57;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "receiving marty trigger info %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}d %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}f %{private}d %{private}d%{private}d %{private}llu", buf, 0x9Au);
  }
  operator new();
}

void sub_1000290C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)&a27);

  _Unwind_Resume(a1);
}

id MartyCompanion::serializeCompanionUUID(const std::string *this, const CompanionUUID *a2)
{
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039C178);
  }
  int v3 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v4 = this;
    }
    else {
      int v4 = (const std::string *)this->__r_.__value_.__r.__words[0];
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sending marty companion uuid %{public}s", (uint8_t *)&buf, 0xCu);
  }
  PB::Writer::Writer((PB::Writer *)&buf);
  MartyCompanionUUID::MartyCompanionUUID((MartyCompanionUUID *)&v7);
  sub_100029B58((uint64_t)&v7);
  std::string::operator=(v8, this);
  MartyCompanionUUID::writeTo((uint64_t)&v7, (PB::Writer *)&buf);
  int v5 = +[NSData dataWithBytes:*((void *)&buf + 1) length:(void)buf - *((void *)&buf + 1)];
  MartyCompanionUUID::~MartyCompanionUUID((MartyCompanionUUID *)&v7);
  PB::Writer::~Writer((PB::Writer *)&buf);

  return v5;
}

void sub_100029254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void MartyCompanion::deserializeCompanionUUID(MartyCompanion *this, const NSData *a2)
{
  int v2 = this;
  PB::Reader::Reader((PB::Reader *)v8, (const unsigned __int8 *)[(MartyCompanion *)v2 bytes], (unint64_t)[(MartyCompanion *)v2 length]);
  MartyCompanionUUID::MartyCompanionUUID((MartyCompanionUUID *)v6);
  memset(&v5, 0, sizeof(v5));
  MartyCompanionUUID::readFrom((MartyCompanionUUID *)v6, (PB::Reader *)v8);
  if (__str) {
    std::string::operator=(&v5, __str);
  }
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039C178);
  }
  int v3 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    int v4 = &v5;
    if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v4 = (std::string *)v5.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136446210;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "receiving marty companion uuid %{public}s", buf, 0xCu);
  }
  operator new();
}

void sub_100029420(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

id MartyCompanion::serializeDeviceInfoRequest(int *a1)
{
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039C178);
  }
  int v2 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *a1;
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending marty requesting device info nop %d", buf, 8u);
  }
  PB::Writer::Writer((PB::Writer *)buf);
  sub_10000BE04((uint64_t)v7);
  int v4 = *a1;
  v8 |= 1u;
  v7[2] = v4;
  sub_10000C250((uint64_t)v7, (PB::Writer *)buf);
  std::string v5 = +[NSData dataWithBytes:v10 length:*(void *)buf - v10];
  PB::Base::~Base((PB::Base *)v7);
  PB::Writer::~Writer((PB::Writer *)buf);

  return v5;
}

void sub_1000295B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void MartyCompanion::deserializeDeviceInfoRequest(MartyCompanion *this, const NSData *a2)
{
  int v2 = this;
  PB::Reader::Reader((PB::Reader *)v9, (const unsigned __int8 *)[(MartyCompanion *)v2 bytes], (unint64_t)[(MartyCompanion *)v2 length]);
  sub_10000BE04((uint64_t)v7);
  sub_10000C018((uint64_t)v7, (PB::Reader *)v9);
  int v3 = v8 << 31 >> 31;
  int v4 = v7[2];
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039C178);
  }
  int v5 = v3 & v4;
  int v6 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "receiving marty requesting device info nop %d", buf, 8u);
  }
  operator new();
}

void sub_100029728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PB::Base::~Base((PB::Base *)&a9);

  _Unwind_Resume(a1);
}

id MartyCompanion::serializeRequestUpload(const std::string *a1)
{
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039C178);
  }
  int v2 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v3 = a1;
    }
    else {
      int v3 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    }
    int data = (int)a1[1].__r_.__value_.__l.__data_;
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = data;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending marty upload request uuid %{public}s %{public}d", buf, 0x12u);
  }
  PB::Writer::Writer((PB::Writer *)buf);
  sub_100012618((uint64_t)v8);
  sub_100029B58((uint64_t)v8);
  std::string::operator=(v9, a1);
  int v5 = (int)a1[1].__r_.__value_.__l.__data_;
  v11 |= 1u;
  int v10 = v5;
  sub_100012C44((uint64_t)v8, (PB::Writer *)buf);
  int v6 = +[NSData dataWithBytes:*(void *)&buf[8] length:*(void *)buf - *(void *)&buf[8]];
  sub_10001269C((PB::Base *)v8);
  PB::Writer::~Writer((PB::Writer *)buf);

  return v6;
}

void sub_1000298BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_10001269C((PB::Base *)va);
  PB::Writer::~Writer((PB::Writer *)va1);
  _Unwind_Resume(a1);
}

void MartyCompanion::deserializeRequestUpload(MartyCompanion *this, const NSData *a2)
{
  int v2 = this;
  PB::Reader::Reader((PB::Reader *)v11, (const unsigned __int8 *)[(MartyCompanion *)v2 bytes], (unint64_t)[(MartyCompanion *)v2 length]);
  sub_100012618((uint64_t)v7);
  memset(&v5, 0, sizeof(v5));
  int v6 = 0;
  sub_1000129A4((uint64_t)v7, (PB::Reader *)v11);
  if (__str) {
    std::string::operator=(&v5, __str);
  }
  if (v10) {
    int v6 = v9;
  }
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_10039C178);
  }
  uint64_t v3 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    int v4 = &v5;
    if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v4 = (std::string *)v5.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136446466;
    int v13 = v4;
    __int16 v14 = 1026;
    int v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "receiving marty upload request uuid %{public}s %{public}d", buf, 0x12u);
  }
  operator new();
}

void sub_100029ABC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
}

void sub_100029B14(id a1)
{
  qword_1003DB718 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Companion");

  _objc_release_x1();
}

uint64_t sub_100029B58(uint64_t result)
{
  if (!*(void *)(result + 8)) {
    operator new();
  }
  return result;
}

void *sub_100029BCC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_100024414(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100029C2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CLKappaDeescalatorAOI::CLKappaDeescalatorAOI(CLKappaDeescalatorAOI *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  sub_100007BC0((void *)this + 6, "none");
  *(void *)this = off_10039C1A8;
  *((int32x2_t *)this + 9) = vdup_n_s32(0x447A0000u);
  *((_DWORD *)this + 20) = 0;
  CSKappaAOIBoost::CSKappaAOIBoost((CLKappaDeescalatorAOI *)((char *)this + 88));
}

void sub_100029D24(_Unwind_Exception *a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(v1);
  _Unwind_Resume(a1);
}

void CLKappaDeescalatorAOI::resetConfiguration(CLKappaDeescalatorAOI *this)
{
  uint64_t v37 = +[CSPersistentConfiguration sharedConfiguration];
  id v38 = [objc_alloc((Class)NSString) initWithCString:"AOIUpdateValues" encoding:1];
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 32) - 1 < 2, (BOOL)"[de-AOI] missing feature mode case", v1);
  if (*((unsigned char *)this + 32) == 1) {
    CFStringRef v2 = @"Kappa";
  }
  else {
    CFStringRef v2 = @"Marty";
  }
  uint64_t v3 = +[NSString stringWithCString:"FeatureAOIs" encoding:1];
  int v39 = +[NSString stringWithFormat:@"%@%@", v2, v3];

  int v4 = +[NSString stringWithCString:"DeleteCurrentList" encoding:1];
  int v40 = +[NSString stringWithFormat:@"%@%@", v2, v4];

  int v41 = [v37 objectForKey:v38];
  int v36 = [v37 objectForKey:v39];
  std::string v5 = [v37 objectForKey:v40];
  unsigned __int8 v6 = [v5 isEqual:&__kCFBooleanTrue];

  if (v6)
  {
    int v7 = 0;
  }
  else
  {
    for (uint64_t i = 0; i != 3192; i += 12)
      CSKappaAOIBoost::addAOI((uint64_t *)this + 11, (float *)((char *)&kAOIList + i));
    int v7 = 266;
  }
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  int v9 = [v41 objectForKey:@"addAOIs"];
  id v10 = [v9 countByEnumeratingWithState:&v48 objects:v60 count:16];
  int v35 = v7;
  int v11 = 0;
  if (v10)
  {
    uint64_t v12 = *(void *)v49;
    do
    {
      for (j = 0; j != v10; j = (char *)j + 1)
      {
        if (*(void *)v49 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(id *)(*((void *)&v48 + 1) + 8 * (void)j);
        if ([v14 count] == (id)3)
        {
          int v15 = [v14 objectAtIndexedSubscript:0];
          float16x4_t v16 = [v14 objectAtIndexedSubscript:1];
          int v17 = [v14 objectAtIndexedSubscript:2];
          [v15 floatValue];
          *(_DWORD *)long long buf = v18;
          [v16 floatValue];
          int v53 = v19;
          [v17 floatValue];
          *(_DWORD *)int v54 = v20;
          CSKappaAOIBoost::addAOI((uint64_t *)this + 11, (float *)buf);

          ++v11;
        }
      }
      id v10 = [v9 countByEnumeratingWithState:&v48 objects:v60 count:16];
    }
    while (v10);
  }

  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  int v21 = [v36 objectForKey:@"addAOIs"];
  id obj = v21;
  int v22 = 0;
  id v23 = [v21 countByEnumeratingWithState:&v44 objects:v59 count:16];
  if (v23)
  {
    uint64_t v24 = *(void *)v45;
    do
    {
      for (k = 0; k != v23; k = (char *)k + 1)
      {
        if (*(void *)v45 != v24) {
          objc_enumerationMutation(obj);
        }
        id v26 = *(id *)(*((void *)&v44 + 1) + 8 * (void)k);
        if ([v26 count] == (id)3)
        {
          int v27 = [v26 objectAtIndexedSubscript:0];
          int v28 = [v26 objectAtIndexedSubscript:1];
          int v29 = [v26 objectAtIndexedSubscript:2];
          [v27 floatValue];
          *(_DWORD *)long long buf = v30;
          [v28 floatValue];
          int v53 = v31;
          [v29 floatValue];
          *(_DWORD *)int v54 = v32;
          CSKappaAOIBoost::addAOI((uint64_t *)this + 11, (float *)buf);

          ++v22;
        }
      }
      int v21 = obj;
      id v23 = [obj countByEnumeratingWithState:&v44 objects:v59 count:16];
    }
    while (v23);
  }

  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039C228);
  }
  int v33 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v34 = *((unsigned __int8 *)this + 32);
    *(_DWORD *)long long buf = 67109888;
    int v53 = v34;
    *(_WORD *)int v54 = 1024;
    *(_DWORD *)&v54[2] = v35;
    __int16 v55 = 1024;
    int v56 = v11;
    __int16 v57 = 1024;
    int v58 = v22;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "[de-AOI] mode,%u,hardcoded,%d,OTA-general,%d,OTA-specific,%d", buf, 0x1Au);
  }
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceAOI");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceAOI");
}

void sub_10002A298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void CLKappaDeescalatorAOI::log(CLKappaDeescalatorAOI *this, uint64_t a2)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039C228);
  }
  int v4 = (id)qword_1003DB6A8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *((_DWORD *)this + 6);
    int v6 = *((unsigned __int8 *)this + 32);
    int v7 = (CLKappaDeescalatorAOI *)((char *)this + 88);
    int v8 = *((_DWORD *)this + 20);
    int v9 = 134350080;
    uint64_t v10 = a2;
    __int16 v11 = 1026;
    int v12 = v5;
    __int16 v13 = 1026;
    int v14 = v6;
    __int16 v15 = 1026;
    int v16 = v8;
    __int16 v17 = 2050;
    uint64_t v18 = CSKappaAOIBoost::size(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[de-AOI] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,debug-1a,%{public}u,debug-2a,%{public}zu", (uint8_t *)&v9, 0x28u);
  }
}

void sub_10002A4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double CLKappaDeescalatorAOI::updateWithCurrentLocation(CLKappaDeescalatorAOI *this, const CSSPUGps_Struct *a2)
{
  double result = *(double *)&a2->latitude;
  *((double *)this + 9) = result;
  return result;
}

void CLKappaDeescalatorAOI::updateWithTrigger(CLKappaDeescalatorAOI *this, const TriggerSample *a2)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039C228);
  }
  int v4 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int path = a2->path;
    int v6 = BYTE2(a2[1].rmsSN);
    v7[0] = 67109376;
    v7[1] = path;
    __int16 v8 = 1024;
    int v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[de-AOI] feedTrigger path %u martyPath %u", (uint8_t *)v7, 0xEu);
  }
  if (a2->btHint == 1) {
    ++*((_DWORD *)this + 20);
  }
}

uint64_t CLKappaDeescalatorAOI::isNearAOI(CSKappaAOIBoost::CSKappaAOIBoostImpl **this, float a2, float a3, int a4)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039C228);
  }
  __int16 v8 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[de-AOI] isNearAOI", buf, 2u);
  }
  int v9 = +[CSPersistentConfiguration configBaseKey:"DisableKappaAOICheck" forFeatureMode:*((unsigned __int8 *)this + 32)];
  uint64_t v10 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned int v11 = [v10 BOOLForKey:v9];

  if (v11)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C228);
    }
    int v12 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      __int16 v20 = 0;
      __int16 v13 = "[de-AOI] AOI mitigation disabled, continue with escalation choice";
      int v14 = (uint8_t *)&v20;
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, v13, v14, 2u);
    }
  }
  else if (a4)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C228);
    }
    int v12 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      __int16 v19 = 0;
      __int16 v13 = "[de-AOI] Trigger with BTHint found, continue with escalation choice";
      int v14 = (uint8_t *)&v19;
      goto LABEL_26;
    }
  }
  else
  {
    if (a2 != 0.0 && a3 != 0.0)
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_10039C228);
      }
      __int16 v15 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[de-AOI] Checking if near AOI", v18, 2u);
      }
      CSKappaAOIBoost::isInAOI(this + 11, a2, a3);
    }
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C228);
    }
    int v12 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      __int16 v17 = 0;
      __int16 v13 = "[de-AOI] Not near AOI on list, continue with escalation choice";
      int v14 = (uint8_t *)&v17;
      goto LABEL_26;
    }
  }

  return 0;
}

void sub_10002A91C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLKappaDeescalatorAOI::onEvaluateFollowingEscalation(CLKappaDeescalatorAOI *this)
{
  if (CLKappaDeescalatorAOI::isNearAOI((CSKappaAOIBoost::CSKappaAOIBoostImpl **)this, *((float *)this + 18), *((float *)this + 19), *((_DWORD *)this + 20)))return 4; {
  else
  }
    return 0;
}

void sub_10002A964(void **a1)
{
  *a1 = off_10039C1A8;
  CSKappaAOIBoost::~CSKappaAOIBoost((CSKappaAOIBoost *)(a1 + 11));

  CLKappaDeescalator::~CLKappaDeescalator(a1);
}

void sub_10002A9B8(void **a1)
{
  *a1 = off_10039C1A8;
  CSKappaAOIBoost::~CSKappaAOIBoost((CSKappaAOIBoost *)(a1 + 11));
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

uint64_t sub_10002AA20()
{
  return 6;
}

uint64_t sub_10002AA28()
{
  return 6;
}

void sub_10002AA34(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void CLKappaDeescalatorStaticGps::CLKappaDeescalatorStaticGps(CLKappaDeescalatorStaticGps *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  CFStringRef v2 = (char *)sub_100007BC0((void *)this + 6, "none");
  *(void *)this = &off_10039C258;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 80) = 0;
  *((_DWORD *)this + 25) = 0;
  *((_WORD *)this + 52) = 0;
  *(void *)((char *)this + 84) = 0;
  *(void *)((char *)this + 89) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((void *)this + 7) = 7;
    CFStringRef v2 = (char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 71) = 7;
  }
  strcpy(v2, "de-SGPS");
}

uint64_t CLKappaDeescalatorStaticGps::assertReady(CLKappaDeescalatorStaticGps *this, uint64_t a2, const char *a3)
{
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 80), (BOOL)"[de-SGPS] missing config", a3);
  int v5 = (void *)((char *)this + 8);
  if (!*((unsigned char *)this + 16)) {
    int v5 = &unk_100338920;
  }
  BOOL v6 = *v5 != 0;

  return CLKappaDeescalator::raiseUnless(v6, (BOOL)"[de-SGPS] missing crashtimestamp", v4);
}

uint64_t CLKappaDeescalatorStaticGps::setConfig(uint64_t result, int *a2)
{
  if (*(unsigned char *)(result + 80))
  {
    int v2 = *a2;
    *(_WORD *)(result + 76) = *((_WORD *)a2 + 2);
    *(_DWORD *)(result + 72) = v2;
  }
  else
  {
    *(void *)(result + 72) = *(void *)a2;
    *(unsigned char *)(result + 80) = 1;
  }
  return result;
}

void CLKappaDeescalatorStaticGps::resetConfiguration(CLKappaDeescalatorStaticGps *this)
{
  id v5 = +[CSPersistentConfiguration configBaseKey:"DeescalatorSGPSConfig" forFeatureMode:*((unsigned __int8 *)this + 32)];
  int v2 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned int v3 = [v2 intThreshold:&CLKappaDeescalatorStaticGps::kConfigurationDefaults forKey:v5];
  unsigned __int16 v4 = (unsigned __int16)[v2 intThreshold:&unk_1003388B8 forKey:v5];
  if (*((unsigned char *)this + 80))
  {
    *((_DWORD *)this + 18) = v3;
    *((_WORD *)this + 38) = v4;
  }
  else
  {
    *((void *)this + 9) = v3 | ((unint64_t)v4 << 32);
    *((unsigned char *)this + 80) = 1;
  }
  *((unsigned char *)this + 104) = CLKappaDeescalator::shouldForce(this, "ForceEscalateGPS");
  *((unsigned char *)this + 105) = CLKappaDeescalator::shouldForce(this, "TurnOffTwoLevelSense");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceStaticGps");
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceStaticGps");
}

void sub_10002AD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLKappaDeescalatorStaticGps::log(CLKappaDeescalatorStaticGps *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 80)) {
    sub_100007D1C();
  }
  uint64_t v4 = *(void *)((char *)this + 84);
  int v5 = *((_DWORD *)this + 23);
  int v6 = *((_DWORD *)this + 25);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039C2D8);
  }
  int v7 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *((_DWORD *)this + 6);
    int v9 = *((unsigned __int8 *)this + 32);
    int v10 = *((_DWORD *)this + 18);
    int v11 = *((unsigned __int16 *)this + 38);
    int v12 = *((unsigned __int8 *)this + 104);
    int v13 = *((unsigned __int8 *)this + 105);
    int v14 = 134351616;
    uint64_t v15 = a2;
    __int16 v16 = 1026;
    int v17 = v8;
    __int16 v18 = 1026;
    int v19 = v9;
    __int16 v20 = 1026;
    int v21 = v10;
    __int16 v22 = 1026;
    int v23 = v11;
    __int16 v24 = 1026;
    int v25 = v12;
    __int16 v26 = 1026;
    int v27 = v13;
    __int16 v28 = 1026;
    int v29 = v4;
    __int16 v30 = 1026;
    int v31 = HIDWORD(v4);
    __int16 v32 = 1026;
    int v33 = v5;
    __int16 v34 = 1026;
    int v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[de-SGPS] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,config-1,%{public}u,config-2,%{public}u,force-1,%{public}u,force-2,%{public}u,debug-1a,%{public}u,debug-1b,%{public}u,debug-1c,%{public}u,debug-1c,%{public}u", (uint8_t *)&v14, 0x48u);
  }
}

uint64_t CLKappaDeescalatorStaticGps::updateCountTotal(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 92);
  if (!*(unsigned char *)(this + 96)) {
    v1 += *(_DWORD *)(this + 100);
  }
  *(_DWORD *)(this + 100) = v1;
  return this;
}

double CLKappaDeescalatorStaticGps::updateWithFeatures(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 28);
  *(double *)(a1 + 84) = result;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 24);
  return result;
}

uint64_t CLKappaDeescalatorStaticGps::onEvaluateBetweenMinAndMaxHoldDuration(CLKappaDeescalatorStaticGps *this)
{
  if (!*((unsigned char *)this + 80)) {
    sub_100007D1C();
  }
  int v2 = *((unsigned __int8 *)this + 104);
  uint64_t result = 2;
  if (!v2)
  {
    if (*((_DWORD *)this + 25) >= *((unsigned __int8 *)this + 76)) {
      return 2;
    }
    else {
      return 3;
    }
  }
  return result;
}

uint64_t CLKappaDeescalatorStaticGps::onEvaluateAtBoundary(CLKappaDeescalatorStaticGps *this)
{
  if (!*((unsigned char *)this + 80)) {
    sub_100007D1C();
  }
  if (*((unsigned char *)this + 104)) {
    return 2;
  }
  if (*((_DWORD *)this + 22) < *((_DWORD *)this + 18)) {
    return 4;
  }
  if (!*((unsigned char *)this + 105)) {
    return 2;
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039C2D8);
  }
  int v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)unsigned int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[de-SGPS] two level is off - escalating", v3, 2u);
  }
  return 5;
}

uint64_t CLKappaDeescalatorStaticGps::onPreviousEpochMadeDecision(uint64_t this)
{
  *(unsigned char *)(this + 96) = 0;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

uint64_t CLKappaDeescalatorStaticGps::onEarlyCrashDetected(uint64_t this)
{
  *(_DWORD *)(this + 100) = 0;
  return this;
}

void sub_10002AFF4(void **a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

void sub_10002B02C(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void CLKappaDeescalator::~CLKappaDeescalator(void **this)
{
  *this = off_10039C308;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
}

{
  *this = off_10039C308;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
}

{
  uint64_t vars8;

  *this = off_10039C308;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }

  operator delete();
}

uint64_t CLKappaDeescalator::earlyCrashDetected(CLKappaDeescalator *this, uint64_t a2)
{
  *((void *)this + 1) = a2;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  return (*(uint64_t (**)(void))(*(void *)this + 48))();
}

uint64_t CLKappaDeescalator::updateWithOption(uint64_t result, int a2)
{
  if (a2 != 6)
  {
    *(_DWORD *)(result + 24) = a2;
    if (a2 == 4) {
      ++*(_DWORD *)(result + 28);
    }
  }
  return result;
}

uint64_t CLKappaDeescalator::evaluateAtMinHoldDuration(CLKappaDeescalator *this)
{
  (*(void (**)(CLKappaDeescalator *))(*(void *)this + 40))(this);
  uint64_t result = (*(uint64_t (**)(CLKappaDeescalator *))(*(void *)this + 56))(this);
  if (*((unsigned char *)this + 40))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    unsigned int v3 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      int v12 = 136315138;
      int v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%s] forcing noop at min hold duration", (uint8_t *)&v12, 0xCu);
    }
    return 6;
  }
  if (*((_DWORD *)this + 9) == 1)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    int v5 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        int v6 = (void *)*v6;
      }
      int v12 = 136315138;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%s] forcing deescalate at min hold duration", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_19;
  }
  if (result == 6) {
    return result;
  }
  if (result == 5)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    int v10 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        int v11 = (void *)*v11;
      }
      int v12 = 136315138;
      int v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%s] escalate at min hold duration", (uint8_t *)&v12, 0xCu);
    }
    uint64_t result = 5;
    goto LABEL_33;
  }
  if (result != 4)
  {
LABEL_33:
    *((_DWORD *)this + 6) = result;
    return result;
  }
LABEL_19:
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039C380);
  }
  int v7 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = (void *)((char *)this + 48);
    if (*((char *)this + 71) < 0) {
      int v8 = (void *)*v8;
    }
    int v12 = 136315138;
    int v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%s] deescalate at min hold duration", (uint8_t *)&v12, 0xCu);
  }
  uint64_t result = 4;
  int v9 = *((_DWORD *)this + 7) + 1;
  *((_DWORD *)this + 6) = 4;
  *((_DWORD *)this + 7) = v9;
  return result;
}

id sub_10002B4DC()
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039C380);
  }
  int v0 = (void *)qword_1003DB6A8;

  return v0;
}

uint64_t CLKappaDeescalator::evaluateAtSecondDeescalationOpportunity(CLKappaDeescalator *this)
{
  (*(void (**)(CLKappaDeescalator *))(*(void *)this + 40))(this);
  uint64_t result = (*(uint64_t (**)(CLKappaDeescalator *))(*(void *)this + 64))(this);
  if (*((unsigned char *)this + 40))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    unsigned int v3 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      int v12 = 136315138;
      int v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%s] forcing noop at second opportunity", (uint8_t *)&v12, 0xCu);
    }
    return 6;
  }
  if (*((_DWORD *)this + 9) == 2)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    int v5 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        int v6 = (void *)*v6;
      }
      int v12 = 136315138;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%s] forcing deescalate at second opportunity", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_19;
  }
  if (result == 6) {
    return result;
  }
  if (result == 5)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    int v10 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        int v11 = (void *)*v11;
      }
      int v12 = 136315138;
      int v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%s] escalate at second opportunity", (uint8_t *)&v12, 0xCu);
    }
    uint64_t result = 5;
    goto LABEL_33;
  }
  if (result != 4)
  {
LABEL_33:
    *((_DWORD *)this + 6) = result;
    return result;
  }
LABEL_19:
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039C380);
  }
  int v7 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = (void *)((char *)this + 48);
    if (*((char *)this + 71) < 0) {
      int v8 = (void *)*v8;
    }
    int v12 = 136315138;
    int v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%s] deescalate at second opportunity", (uint8_t *)&v12, 0xCu);
  }
  uint64_t result = 4;
  int v9 = *((_DWORD *)this + 7) + 1;
  *((_DWORD *)this + 6) = 4;
  *((_DWORD *)this + 7) = v9;
  return result;
}

uint64_t CLKappaDeescalator::evaluateBetweenMinAndMaxHoldDuration(CLKappaDeescalator *this)
{
  (*(void (**)(CLKappaDeescalator *))(*(void *)this + 40))(this);
  uint64_t result = (*(uint64_t (**)(CLKappaDeescalator *))(*(void *)this + 72))(this);
  if (*((unsigned char *)this + 40))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    unsigned int v3 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      int v12 = 136315138;
      int v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%s] forcing noop between min/max", (uint8_t *)&v12, 0xCu);
    }
    return 6;
  }
  if (*((_DWORD *)this + 9) == 3)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    int v5 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        int v6 = (void *)*v6;
      }
      int v12 = 136315138;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%s] forcing deescalate between min/max", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_19;
  }
  if (result == 6) {
    return result;
  }
  if (result == 5)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    int v10 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        int v11 = (void *)*v11;
      }
      int v12 = 136315138;
      int v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%s] escalate between min/max", (uint8_t *)&v12, 0xCu);
    }
    uint64_t result = 5;
    goto LABEL_33;
  }
  if (result != 4)
  {
LABEL_33:
    *((_DWORD *)this + 6) = result;
    return result;
  }
LABEL_19:
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039C380);
  }
  int v7 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = (void *)((char *)this + 48);
    if (*((char *)this + 71) < 0) {
      int v8 = (void *)*v8;
    }
    int v12 = 136315138;
    int v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%s] deescalate between min/max", (uint8_t *)&v12, 0xCu);
  }
  uint64_t result = 4;
  int v9 = *((_DWORD *)this + 7) + 1;
  *((_DWORD *)this + 6) = 4;
  *((_DWORD *)this + 7) = v9;
  return result;
}

uint64_t CLKappaDeescalator::evaluateAtBoundary(CLKappaDeescalator *this)
{
  (*(void (**)(CLKappaDeescalator *))(*(void *)this + 40))(this);
  uint64_t result = (*(uint64_t (**)(CLKappaDeescalator *))(*(void *)this + 80))(this);
  if (*((unsigned char *)this + 40))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    unsigned int v3 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      int v12 = 136315138;
      int v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%s] forcing noop at boundary", (uint8_t *)&v12, 0xCu);
    }
    return 6;
  }
  if (*((_DWORD *)this + 9) == 4)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    int v5 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        int v6 = (void *)*v6;
      }
      int v12 = 136315138;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%s] forcing deescalate at boundary", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_19;
  }
  if (result == 6) {
    return result;
  }
  if (result == 5)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    int v10 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        int v11 = (void *)*v11;
      }
      int v12 = 136315138;
      int v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%s] escalate at boundary", (uint8_t *)&v12, 0xCu);
    }
    uint64_t result = 5;
    goto LABEL_33;
  }
  if (result != 4)
  {
LABEL_33:
    *((_DWORD *)this + 6) = result;
    return result;
  }
LABEL_19:
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039C380);
  }
  int v7 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = (void *)((char *)this + 48);
    if (*((char *)this + 71) < 0) {
      int v8 = (void *)*v8;
    }
    int v12 = 136315138;
    int v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%s] deescalate at boundary", (uint8_t *)&v12, 0xCu);
  }
  uint64_t result = 4;
  int v9 = *((_DWORD *)this + 7) + 1;
  *((_DWORD *)this + 6) = 4;
  *((_DWORD *)this + 7) = v9;
  return result;
}

uint64_t CLKappaDeescalator::evaluateFollowingEscalation(CLKappaDeescalator *this)
{
  (*(void (**)(CLKappaDeescalator *))(*(void *)this + 40))(this);
  uint64_t result = (*(uint64_t (**)(CLKappaDeescalator *))(*(void *)this + 88))(this);
  if (*((unsigned char *)this + 40))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    unsigned int v3 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      int v12 = 136315138;
      int v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%s] forcing noop following escalation", (uint8_t *)&v12, 0xCu);
    }
    return 6;
  }
  if (*((_DWORD *)this + 9) == 5)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    int v5 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        int v6 = (void *)*v6;
      }
      int v12 = 136315138;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%s] forcing deescalate following escalation", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_19;
  }
  if (result == 6) {
    return result;
  }
  if (result == 5)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    }
    int v10 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        int v11 = (void *)*v11;
      }
      int v12 = 136315138;
      int v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%s] escalate following escalation", (uint8_t *)&v12, 0xCu);
    }
    uint64_t result = 5;
    goto LABEL_33;
  }
  if (result != 4)
  {
LABEL_33:
    *((_DWORD *)this + 6) = result;
    return result;
  }
LABEL_19:
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039C380);
  }
  int v7 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = (void *)((char *)this + 48);
    if (*((char *)this + 71) < 0) {
      int v8 = (void *)*v8;
    }
    int v12 = 136315138;
    int v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%s] deescalate following escalation", (uint8_t *)&v12, 0xCu);
  }
  uint64_t result = 4;
  int v9 = *((_DWORD *)this + 7) + 1;
  *((_DWORD *)this + 6) = 4;
  *((_DWORD *)this + 7) = v9;
  return result;
}

uint64_t CLKappaDeescalator::previousEpochMadeDecision(CLKappaDeescalator *this)
{
  if (*((unsigned char *)this + 16)) {
    *((unsigned char *)this + 16) = 0;
  }
  *((void *)this + 3) = 0;
  return (*(uint64_t (**)(void))(*(void *)this + 96))();
}

uint64_t CLKappaDeescalator::assertCrashTimestamp(CLKappaDeescalator *this, uint64_t a2, const char *a3)
{
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 16), (BOOL)"Deescalator missing crashTimestamp", a3);
}

uint64_t CLKappaDeescalator::raiseUnless(uint64_t this, BOOL a2, const char *a3)
{
  if ((this & 1) == 0)
  {
    uint64_t v3 = sub_10002CD0C();
    return CLKappaDeescalator::getHighSpeedDetectedStats(v3);
  }
  return this;
}

uint64_t CLKappaDeescalator::getHighSpeedDetectedStats(unsigned __int16 *a1)
{
  if (!a1[1]) {
    return 0;
  }
  unint64_t v2 = 0;
  char v3 = 0;
  do
  {
    if (*(unsigned char *)sub_10002C20C(a1, v2)) {
      char v3 = 1;
    }
    ++v2;
  }
  while (v2 < a1[1]);
  return v3 & 1;
}

uint64_t sub_10002C20C(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      int v8 = *((_DWORD *)a1 + 1);
      int v9 = 134218754;
      CFAbsoluteTime v10 = Current;
      __int16 v11 = 2080;
      int v12 = "const T &CMQueue<BOOL>::operator[](const size_t) const [T = BOOL]";
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 1024;
      int v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  unint64_t v5 = *a1 + a2;
  if (v5 < v4) {
    unint64_t v4 = 0;
  }
  return (uint64_t)a1 + v5 - v4 + 8;
}

uint64_t CLKappaDeescalator::isDecidedForOption(unsigned int a1)
{
  return (a1 < 6) & (0x32u >> a1);
}

id CLKappaDeescalator::constructModePrefixKey(CLKappaDeescalator *this, const char *a2)
{
  if (a2)
  {
    uint64_t v2 = *((unsigned __int8 *)this + 32);
    return +[CSPersistentConfiguration configBaseKey:a2 forFeatureMode:v2];
  }
  else
  {
    unint64_t v4 = (CLKappaDeescalator *)sub_10002CE80();
    return CLKappaDeescalator::constructModePostKey(v4, v5, v6);
  }
}

id CLKappaDeescalator::constructModePostKey(CLKappaDeescalator *this, NSString *a2, NSString *a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = a3;
  int v6 = (NSString *)v5;
  if (!v4)
  {
    int v9 = sub_10002B4DC();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      int v15 = 0;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2082;
      int v19 = "assert";
      __int16 v20 = 2081;
      int v21 = "key";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    CFAbsoluteTime v10 = sub_10002B4DC();
    if (os_signpost_enabled(v10))
    {
      *(_DWORD *)long long buf = 68289539;
      int v15 = 0;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2082;
      int v19 = "assert";
      __int16 v20 = 2081;
      int v21 = "key";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "key is null", "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    __int16 v11 = sub_10002B4DC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289539;
      int v15 = 0;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2082;
      int v19 = "assert";
      __int16 v20 = 2081;
      int v21 = "key";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_19:

    abort_report_np();
    __break(1u);
  }
  if (!v5)
  {
    int v12 = sub_10002B4DC();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      int v15 = 0;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2082;
      int v19 = "assert";
      __int16 v20 = 2081;
      int v21 = "postfix";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"postfix is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    __int16 v13 = sub_10002B4DC();
    if (os_signpost_enabled(v13))
    {
      *(_DWORD *)long long buf = 68289539;
      int v15 = 0;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2082;
      int v19 = "assert";
      __int16 v20 = 2081;
      int v21 = "postfix";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "postfix is null", "{\"msg%{public}.0s\":\"postfix is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    __int16 v11 = sub_10002B4DC();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289539;
      int v15 = 0;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2082;
      int v19 = "assert";
      __int16 v20 = 2081;
      int v21 = "postfix";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"postfix is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_19;
  }
  id v7 = [objc_alloc((Class)NSString) initWithFormat:@"%@%@", v4, v5];

  return v7;
}

void sub_10002C7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t CLKappaDeescalator::shouldForceDeescalate(CLKappaDeescalator *this, const char *a2)
{
  if (!a2)
  {
    sub_10002CFB4();
    __break(1u);
LABEL_14:
    dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    goto LABEL_7;
  }
  unint64_t v5 = this;
  uint64_t v2 = (CLKappaDeescalator *)+[CSPersistentConfiguration configBaseKey:a2 forFeatureMode:*((unsigned __int8 *)this + 32)];
  char v3 = CLKappaDeescalator::constructModePostKey(v2, (NSString *)v2, @"Deescalate");
  unint64_t v4 = +[CSPersistentConfiguration sharedConfiguration];
  unint64_t v8 = (unint64_t)[v4 getIntegerDefault:v3];
  unint64_t v6 = v8;
  unint64_t v9 = 0;
  if ((v8 & 0xFF00000000) != 0) {
    int v7 = v8;
  }
  else {
    int v7 = 0;
  }
  if ((v7 - 7) < 0xFFFFFFFA) {
    goto LABEL_12;
  }
  if (qword_1003DB6A0 != -1) {
    goto LABEL_14;
  }
LABEL_7:
  CFAbsoluteTime v10 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    __int16 v11 = (void *)((char *)v5 + 48);
    if (*((char *)v5 + 71) < 0) {
      __int16 v11 = (void *)*v11;
    }
    int v13 = 136315394;
    unint64_t v14 = v11;
    __int16 v15 = 1024;
    int v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%s] forcing deescalate at %d", (uint8_t *)&v13, 0x12u);
  }
  unint64_t v9 = v6;
LABEL_12:

  return v9;
}

void sub_10002C960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL CLKappaDeescalator::shouldForceNoop(CLKappaDeescalator *this, const char *a2)
{
  if (!a2)
  {
    sub_10002D0F0();
    __break(1u);
LABEL_13:
    dispatch_once(&qword_1003DB6A0, &stru_10039C380);
    goto LABEL_7;
  }
  unint64_t v4 = this;
  unint64_t v6 = +[CSPersistentConfiguration configBaseKey:a2 forFeatureMode:*((unsigned __int8 *)this + 32)];
  uint64_t v2 = CLKappaDeescalator::constructModePostKey(v6, (NSString *)v6, @"Noop");
  char v3 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned int v7 = (unsigned __int16)[v3 getBooleanDefault:v2];
  if (v7 <= 0x100) {
    char v5 = 0;
  }
  else {
    char v5 = v7;
  }
  if (!v5) {
    goto LABEL_11;
  }
  if (qword_1003DB6A0 != -1) {
    goto LABEL_13;
  }
LABEL_7:
  unint64_t v8 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v9 = (void *)((char *)v4 + 48);
    if (*((char *)v4 + 71) < 0) {
      unint64_t v9 = (void *)*v9;
    }
    int v11 = 136315138;
    int v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[%s] forcing noop behavior", (uint8_t *)&v11, 0xCu);
  }
LABEL_11:

  return v5 != 0;
}

void sub_10002CAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CLKappaDeescalator::shouldForce(CLKappaDeescalator *this, const char *a2)
{
  uint64_t v2 = +[CSPersistentConfiguration configBaseKey:a2 forFeatureMode:*((unsigned __int8 *)this + 32)];
  char v3 = +[CSPersistentConfiguration sharedConfiguration];
  unint64_t v4 = [v3 objectForKey:v2];
  if (v4) {
    id v5 = [v3 BOOLForKey:v2];
  }
  else {
    id v5 = 0;
  }

  return v5;
}

void sub_10002CBA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL CLKappaDeescalator::shouldDeescalateForOption(int a1)
{
  return a1 == 4;
}

_DWORD *CLKappaDeescalationDecision::reset(_DWORD *this)
{
  *this = 0;
  return this;
}

_DWORD *CLKappaDeescalationDecision::update(_DWORD *result, int a2)
{
  if ((a2 - 4) < 2 || a2 == 2) {
    goto LABEL_6;
  }
  if (a2 == 3 && *result == 2)
  {
    a2 = 0;
LABEL_6:
    *uint64_t result = a2;
  }
  return result;
}

void sub_10002CC28(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_10002CCA0(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x26u);
}

void sub_10002CCCC(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x26u);
}

void sub_10002CCEC(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x26u);
}

uint64_t sub_10002CD0C()
{
  int v0 = sub_10002B4DC();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    sub_10002CC6C();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed assert in raiseUnless(): \", \"errorMessage\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  }

  int v1 = sub_10002B4DC();
  if (os_signpost_enabled(v1))
  {
    sub_10002CC6C();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed assert in raiseUnless(): ", "{\"msg%{public}.0s\":\"Failed assert in raiseUnless(): \", \"errorMessage\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  }

  uint64_t v2 = sub_10002B4DC();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    sub_10002CC6C();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Failed assert in raiseUnless(): \", \"errorMessage\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  }

  uint64_t v3 = abort_report_np();
  return sub_10002CE80(v3);
}

uint64_t sub_10002CE80()
{
  int v0 = sub_10002B4DC();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    sub_10000BDD8();
    sub_10002CCEC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  unsigned int v7 = sub_10002B4DC();
  if (os_signpost_enabled(v7))
  {
    sub_10000BDD8();
    sub_10002CCA0((void *)&_mh_execute_header, v8, v9, v10, "key is null", "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  int v13 = sub_10002B4DC();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    sub_10000BDD8();
    sub_10002CCCC((void *)&_mh_execute_header, v14, v15, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  abort_report_np();
  return sub_10002CFB4();
}

uint64_t sub_10002CFB4()
{
  int v0 = sub_10002B4DC();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    sub_10000BDD8();
    sub_10002CCEC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  unsigned int v7 = sub_10002B4DC();
  if (os_signpost_enabled(v7))
  {
    sub_10000BDD8();
    sub_10002CCA0((void *)&_mh_execute_header, v8, v9, v10, "key is null", "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  int v13 = sub_10002B4DC();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    sub_10000BDD8();
    sub_10002CCCC((void *)&_mh_execute_header, v14, v15, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t sub_10002D0F0()
{
  int v0 = sub_10002B4DC();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    sub_10000BDD8();
    sub_10002CCEC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v21, v22, v23, v24, v25);
  }

  unsigned int v7 = sub_10002B4DC();
  if (os_signpost_enabled(v7))
  {
    sub_10000BDD8();
    sub_10002CCA0((void *)&_mh_execute_header, v8, v9, v10, "key is null", "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v21, v22, v23, v24, v25);
  }

  int v13 = sub_10002B4DC();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    sub_10000BDD8();
    sub_10002CCCC((void *)&_mh_execute_header, v14, v15, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v21, v22, v23, v24, v25);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

double CLMartyEstimatesAlgCoupledCrashResult::reset(CLMartyEstimatesAlgCoupledCrashResult *this)
{
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 24) = 0;
  *((unsigned char *)this + 50) = 0;
  *((void *)this + 7) = 0;
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  return result;
}

double CLMartyEstimatesAlgCoupledCrashResult::log(CLMartyEstimatesAlgCoupledCrashResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039CF98);
  }
  int v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 7);
    int v5 = *((unsigned __int8 *)this + 48);
    int v6 = *((unsigned __int8 *)this + 50);
    double v7 = *((float *)this + 16);
    double v8 = *((float *)this + 17);
    double v9 = *((float *)this + 18);
    double v10 = *((float *)this + 19);
    double v11 = *((float *)this + 22);
    double v12 = *((float *)this + 23);
    double v13 = *((float *)this + 24);
    double v14 = *((float *)this + 25);
    double v15 = *((float *)this + 26);
    double v16 = *((float *)this + 20);
    double v17 = *((float *)this + 21);
    double v18 = *((float *)this + 27);
    double v19 = *((float *)this + 28);
    double v20 = *((float *)this + 29);
    double v21 = *((float *)this + 30);
    double v22 = *((float *)this + 31);
    double v23 = *((float *)this + 32);
    int v24 = 134353920;
    uint64_t v25 = v4;
    __int16 v26 = 1026;
    int v27 = v5;
    __int16 v28 = 1026;
    int v29 = v6;
    __int16 v30 = 2050;
    double v31 = v7;
    __int16 v32 = 2050;
    double v33 = v8;
    __int16 v34 = 2050;
    double v35 = v9;
    __int16 v36 = 2050;
    double v37 = v10;
    __int16 v38 = 2050;
    double v39 = v11;
    __int16 v40 = 2050;
    double v41 = v12;
    __int16 v42 = 2050;
    double v43 = v13;
    __int16 v44 = 2050;
    double v45 = v14;
    __int16 v46 = 2050;
    double v47 = v15;
    __int16 v48 = 2050;
    double v49 = v16;
    __int16 v50 = 2050;
    double v51 = v17;
    __int16 v52 = 2050;
    double v53 = v18;
    __int16 v54 = 2050;
    double v55 = v19;
    __int16 v56 = 2050;
    double v57 = v20;
    __int16 v58 = 2050;
    double v59 = v21;
    __int16 v60 = 2050;
    double v61 = v22;
    __int16 v62 = 2050;
    double v63 = v23;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[M][CC] AlgBlock summary,A,%{public}llu,B,%{public}d,C,%{public}d,debug-1,%{public}f,debug-2,%{public}f,debug-3,%{public}f,debug-4,%{public}f,debug-5,%{public}f,debug-6,%{public}f,debug-7,%{public}f,debug-8,%{public}f,debug-9,%{public}f,debug-10,%{public}f,debug-11,%{public}f,debug-12,%{public}f,debug-13,%{public}f,debug-14,%{public}f,debug-15,%{public}f,debug-16,%{public}f,debug-17,%{public}f", (uint8_t *)&v24, 0xC2u);
  }
  return result;
}

void CLMartyEstimatesAlgCoupledCrash::CLMartyEstimatesAlgCoupledCrash(CLMartyEstimatesAlgCoupledCrash *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  uint64_t *v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)&long long v6 = 0x80000000800000;
  *((void *)&v6 + 1) = 0x80000000800000;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 4) = xmmword_100338960;
  *((_OWORD *)this + 5) = xmmword_100338970;
  *((void *)this + 12) = 0x80000000800000;
  double v7 = (char *)operator new(0xA0uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)double v7 = off_10039CFC8;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((void *)v7 + 3) = &off_1003A1D28;
  *(_OWORD *)(v7 + 40) = xmmword_100338980;
  *((void *)v7 + 7) = 0x42AC000041980000;
  *((_DWORD *)v7 + 16) = 1097859072;
  double v8 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v7 + 24;
  *((void *)this + 2) = v7;
  if (v8)
  {
    sub_10000BB9C(v8);
    double v7 = (char *)*((void *)this + 2);
    double v11 = (char *)*((void *)this + 1);
    double v12 = (std::__shared_weak_count *)v7;
    if (!v7) {
      goto LABEL_6;
    }
  }
  else
  {
    double v11 = v7 + 24;
    double v12 = (std::__shared_weak_count *)v7;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10002D758((uint64_t)&v11, &v13);
  long long v9 = v13;
  long long v13 = 0uLL;
  double v10 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v9;
  if (v10)
  {
    sub_10000BB9C(v10);
    if (*((void *)&v13 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (v12) {
    sub_10000BB9C(v12);
  }
  (*(void (**)(CLMartyEstimatesAlgCoupledCrash *))(*(void *)this + 312))(this);
}

void sub_10002D72C(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10002D758@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLMartyEstimatesAlgCoupledCrash::CLMartyEstimatesAlgCoupledCrash(CLMartyEstimatesAlgCoupledCrash *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 13) = off_10039A008;
  *((void *)this + 14) = off_10039A0D0;
  *((void *)this + 15) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10039C970);
  *(void *)uint64_t v2 = off_10039C450;
  *(void *)(v2 + 104) = off_10039C700;
  *(void *)(v2 + 112) = off_10039C840;
  *(void *)(v2 + 120) = off_10039C920;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)&long long v3 = 0x80000000800000;
  *((void *)&v3 + 1) = 0x80000000800000;
  *(_OWORD *)(v2 + 48) = v3;
  *(_OWORD *)(v2 + 64) = xmmword_100338960;
  *(_OWORD *)(v2 + 80) = xmmword_100338970;
  *(void *)(v2 + 96) = 0x80000000800000;
  uint64_t v4 = (char *)operator new(0xA0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = off_10039CFC8;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((void *)v4 + 3) = &off_1003A1D28;
  *(_OWORD *)(v4 + 40) = xmmword_100338980;
  *((void *)v4 + 7) = 0x42AC000041980000;
  *((_DWORD *)v4 + 16) = 1097859072;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v4 + 24;
  *((void *)this + 2) = v4;
  if (v5)
  {
    sub_10000BB9C(v5);
    uint64_t v4 = (char *)*((void *)this + 2);
    double v8 = (char *)*((void *)this + 1);
    long long v9 = (std::__shared_weak_count *)v4;
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    double v8 = v4 + 24;
    long long v9 = (std::__shared_weak_count *)v4;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10002D758((uint64_t)&v8, &v10);
  long long v6 = v10;
  long long v10 = 0uLL;
  double v7 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    if (*((void *)&v10 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  if (v9) {
    sub_10000BB9C(v9);
  }
  (*(void (**)(CLMartyEstimatesAlgCoupledCrash *))(*(void *)this + 312))(this);
}

void sub_10002DA58(_Unwind_Exception *a1)
{
  long long v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039C970);
  _Unwind_Resume(a1);
}

void CLMartyEstimatesAlgCoupledCrash::resetConfiguration(CLMartyEstimatesAlgCoupledCrash *this)
{
  id v32 = +[CSPersistentConfiguration configBaseKey:"EstimatesAlgCCConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 0.5;
  LODWORD(v4) = 11.5;
  LODWORD(v5) = 1193033728;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v32 withMinValue:v3 maxValue:v5 defaultValue:v4];
  LODWORD(v33) = v6;

  double v7 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v8) = 1117782016;
  LODWORD(v9) = 30.0;
  [v7 algorithmThresholdNumber:1 inArrayForKey:v32 withMinValue:0.0 maxValue:v8 defaultValue:v9];
  DWORD1(v33) = v10;

  double v11 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v12) = 1112014848;
  LODWORD(v13) = 7.0;
  [v11 algorithmThresholdNumber:2 inArrayForKey:v32 withMinValue:0.0 maxValue:v12 defaultValue:v13];
  DWORD2(v33) = v14;

  double v15 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v16) = 1157234688;
  LODWORD(v17) = 1120403456;
  [v15 algorithmThresholdNumber:3 inArrayForKey:v32 withMinValue:0.0 maxValue:v16 defaultValue:v17];
  HIDWORD(v33) = v18;

  double v19 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v20) = 1157234688;
  LODWORD(v21) = 19.0;
  [v19 algorithmThresholdNumber:4 inArrayForKey:v32 withMinValue:0.0 maxValue:v20 defaultValue:v21];
  int v34 = v22;

  double v23 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v24) = 1157234688;
  LODWORD(v25) = 1118568448;
  [v23 algorithmThresholdNumber:5 inArrayForKey:v32 withMinValue:0.0 maxValue:v24 defaultValue:v25];
  int v35 = v26;

  int v27 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v28) = 0.5;
  LODWORD(v29) = 15.0;
  LODWORD(v30) = 1193033728;
  [v27 algorithmThresholdNumber:6 inArrayForKey:v32 withMinValue:v28 maxValue:v30 defaultValue:v29];
  int v36 = v31;

  CLMartyEstimatesAlgCoupledCrash::setConfig((uint64_t)this, &v33);
}

void sub_10002DC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLMartyEstimatesAlgCoupledCrash::setConfig(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  long long v4 = *a2;
  *(_OWORD *)(v3 + 28) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)(v3 + 16) = v4;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039CF98);
  }
  double v5 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *(float **)(a1 + 32);
    double v8 = v7[4];
    double v9 = v7[5];
    double v10 = v7[6];
    double v11 = v7[7];
    double v12 = v7[8];
    double v13 = v7[9];
    double v14 = v7[10];
    int v15 = 134219520;
    double v16 = v8;
    __int16 v17 = 2048;
    double v18 = v9;
    __int16 v19 = 2048;
    double v20 = v10;
    __int16 v21 = 2048;
    double v22 = v11;
    __int16 v23 = 2048;
    double v24 = v12;
    __int16 v25 = 2048;
    double v26 = v13;
    __int16 v27 = 2048;
    double v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[M][CC] config-1,%f,config-2,%f,config-3,%f,config-4,%f,config-5,%f,config-6,%f,config-7,%f", (uint8_t *)&v15, 0x48u);
  }
  return result;
}

uint64_t CLMartyEstimatesAlgCoupledCrash::reset(CLMartyEstimatesAlgCoupledCrash *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

double CLMartyEstimatesAlgCoupledCrash::epochFinalize(CLMartyEstimatesAlgCoupledCrash *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 4);
  float v3 = *(float *)(v2 + 32);
  float v4 = *(float *)(v2 + 36);
  float v5 = *((float *)this + 21);
  BOOL v6 = v5 < v3 && *((float *)this + 23) < v3;
  float v7 = *(float *)(v2 + 20);
  float v8 = *(float *)(v2 + 24);
  float v9 = *(float *)(v2 + 28);
  float v10 = *(float *)(v2 + 40);
  float v11 = *((float *)this + 12);
  float v12 = *((float *)this + 14);
  float v13 = *((float *)this + 15);
  float v14 = *((float *)this + 16);
  float v15 = *((float *)this + 22);
  BOOL v16 = v15 >= v4 || *((float *)this + 24) >= v4;
  float v17 = *(float *)(v2 + 16);
  BOOL v18 = v12 < v7;
  if (v13 < v8) {
    BOOL v18 = 1;
  }
  float v19 = *((float *)this + 25);
  if (v14 < v9) {
    BOOL v18 = 1;
  }
  BOOL v20 = v18 || v6;
  if (v19 < v10) {
    BOOL v16 = 0;
  }
  BOOL v21 = !v20 && v16;
  if (v11 >= *((float *)this + 17))
  {
    BOOL v22 = v12 >= *((float *)this + 18);
    if (v14 < *((float *)this + 20)) {
      BOOL v22 = 0;
    }
    if (v13 < *((float *)this + 19)) {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 0;
  }
  *(void *)(v2 + 56) = a2;
  if (v11 < v17) {
    BOOL v21 = 0;
  }
  *(unsigned char *)(v2 + 48) = v21;
  *(unsigned char *)(v2 + 49) = v21;
  *(float *)(v2 + 64) = v17;
  *(float *)(v2 + 68) = v7;
  *(float *)(v2 + 72) = v8;
  *(float *)(v2 + 76) = v9;
  int v23 = *((_DWORD *)this + 13);
  *(float *)(v2 + 88) = v11;
  *(_DWORD *)(v2 + 92) = v23;
  *(float *)(v2 + 96) = v12;
  *(float *)(v2 + 100) = v13;
  *(unsigned char *)(v2 + 50) = v22;
  *(float *)(v2 + 80) = v3;
  *(float *)(v2 + 84) = v4;
  *(float *)(v2 + 104) = v14;
  *(float *)(v2 + 108) = v5;
  *(float *)(v2 + 112) = v15;
  double result = *(double *)((char *)this + 92);
  *(double *)(v2 + 116) = result;
  *(float *)(v2 + 124) = v19;
  *(float *)(v2 + 128) = v10;
  return result;
}

double virtual thunk to'CLMartyEstimatesAlgCoupledCrash::epochFinalize(CLMartyEstimatesAlgCoupledCrash *this, uint64_t a2)
{
  return CLMartyEstimatesAlgCoupledCrash::epochFinalize((CLMartyEstimatesAlgCoupledCrash *)((char *)this + *(void *)(*(void *)this - 48)), a2);
}

double CLMartyEstimatesAlgCoupledCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 12);
  double result = *(double *)(a1 + 84);
  *(void *)&long long v3 = *(void *)(a2 + 44);
  *((double *)&v3 + 1) = result;
  *(_OWORD *)(a1 + 84) = v3;
  return result;
}

double virtual thunk to'CLMartyEstimatesAlgCoupledCrash::feedFeatures(void *a1, uint64_t a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 96);
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a2 + 12);
  double result = *(double *)(v2 + 84);
  *(void *)&long long v4 = *(void *)(a2 + 44);
  *((double *)&v4 + 1) = result;
  *(_OWORD *)(v2 + 84) = v4;
  return result;
}

float CLMartyEstimatesAlgCoupledCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 52) = v2;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 268);
  *(float *)(a1 + 100) = result;
  return result;
}

{
  float result;

  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 56) = result;
  return result;
}

float virtual thunk to'CLMartyEstimatesAlgCoupledCrash::feedFeatures(void *a1, uint64_t a2)
{
  int v2 = (char *)a1 + *(void *)(*a1 - 32);
  int v3 = *(_DWORD *)(a2 + 76);
  *((_DWORD *)v2 + 12) = *(_DWORD *)(a2 + 96);
  *((_DWORD *)v2 + 13) = v3;
  *((_DWORD *)v2 + 15) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 268);
  *((float *)v2 + 25) = result;
  return result;
}

{
  float result;

  float result = *(float *)(a2 + 20);
  *(float *)((char *)a1 + *(void *)(*a1 - 112) + 56) = result;
  return result;
}

double CLMartyEstimatesAlgCoupledCrash::epochReset(CLMartyEstimatesAlgCoupledCrash *this)
{
  uint64_t v1 = *((void *)this + 4);
  *(_WORD *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 50) = 0;
  *(void *)(v1 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_DWORD *)(v1 + 128) = 0;
  return result;
}

double virtual thunk to'CLMartyEstimatesAlgCoupledCrash::epochReset(CLMartyEstimatesAlgCoupledCrash *this)
{
  uint64_t v1 = *(void *)((char *)this + *(void *)(*(void *)this - 56) + 32);
  *(_WORD *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 50) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 116) = 0u;
  return result;
}

void sub_10002E090(CLKappaAlgBlock *this)
{
  *(void *)this = off_10039C450;
  *((void *)this + 13) = off_10039C700;
  *((void *)this + 14) = off_10039C840;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_10039C920;
  int v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_10039C970);
}

void sub_10002E180(CLKappaAlgBlock *this)
{
  *(void *)this = off_10039C450;
  *((void *)this + 13) = off_10039C700;
  *((void *)this + 14) = off_10039C840;
  *((void *)this + 15) = off_10039C920;
  int v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_10039C970);

  operator delete();
}

void sub_10002E25C(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039C450;
  *((void *)v1 + 13) = off_10039C700;
  *((void *)v1 + 14) = off_10039C840;
  *((void *)v1 + 15) = off_10039C920;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039C970);
}

void sub_10002E334(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039C450;
  *((void *)v1 + 13) = off_10039C700;
  *((void *)v1 + 14) = off_10039C840;
  *((void *)v1 + 15) = off_10039C920;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039C970);

  operator delete();
}

void sub_10002E420(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039C450;
  *((void *)v1 + 13) = off_10039C700;
  *((void *)v1 + 14) = off_10039C840;
  *((void *)v1 + 15) = off_10039C920;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039C970);
}

void sub_10002E4F8(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039C450;
  *((void *)v1 + 13) = off_10039C700;
  *((void *)v1 + 14) = off_10039C840;
  *((void *)v1 + 15) = off_10039C920;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039C970);

  operator delete();
}

void sub_10002E5E4(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039C450;
  *((void *)v1 + 13) = off_10039C700;
  *((void *)v1 + 14) = off_10039C840;
  *((void *)v1 + 15) = off_10039C920;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039C970);
}

void sub_10002E6BC(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039C450;
  *((void *)v1 + 13) = off_10039C700;
  *((void *)v1 + 14) = off_10039C840;
  *((void *)v1 + 15) = off_10039C920;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039C970);

  operator delete();
}

void sub_10002E7A8(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_10002E7EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10039CFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002E80C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10039CFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10002E860(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

double CLMartyEstimatesAlgHighSpeedCrashResult::reset(CLMartyEstimatesAlgHighSpeedCrashResult *this)
{
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 16) = 0;
  *((void *)this + 5) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  return result;
}

double CLMartyEstimatesAlgHighSpeedCrashResult::log(CLMartyEstimatesAlgHighSpeedCrashResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039DC00);
  }
  int v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 5);
    int v5 = *((unsigned __int8 *)this + 32);
    double v6 = *((float *)this + 12);
    double v7 = *((float *)this + 13);
    double v8 = *((float *)this + 14);
    double v9 = *((float *)this + 15);
    double v10 = *((float *)this + 16);
    int v11 = *((unsigned __int8 *)this + 68);
    int v12 = *((_DWORD *)this + 18);
    int v13 = *((_DWORD *)this + 19);
    int v14 = *((_DWORD *)this + 20);
    int v15 = 134351616;
    uint64_t v16 = v4;
    __int16 v17 = 1026;
    int v18 = v5;
    __int16 v19 = 2050;
    double v20 = v6;
    __int16 v21 = 2050;
    double v22 = v7;
    __int16 v23 = 2050;
    double v24 = v8;
    __int16 v25 = 2050;
    double v26 = v9;
    __int16 v27 = 2050;
    double v28 = v10;
    __int16 v29 = 1026;
    int v30 = v11;
    __int16 v31 = 1026;
    int v32 = v12;
    __int16 v33 = 1026;
    int v34 = v13;
    __int16 v35 = 1026;
    int v36 = v14;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[M][HSC] AlgBlock summary,A,%{public}llu,B,%{public}d,C,%{public}f,D,%{public}f,E,%{public}f,F,%{public}f,G,%{public}f,H,%{public}d,I,%{public}d,J,%{public}d,K,%{public}d\n", (uint8_t *)&v15, 0x5Cu);
  }
  return result;
}

void CLMartyEstimatesAlgHighSpeedCrash::CLMartyEstimatesAlgHighSpeedCrash(CLMartyEstimatesAlgHighSpeedCrash *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  uint64_t *v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 6) = 0;
  *(void *)((char *)this + 60) = 0x80000000800000;
  *((unsigned char *)this + 68) = 0;
  double v6 = (std::__shared_weak_count *)operator new(0x70uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_10039DC30;
  *(_OWORD *)&v6[1].__shared_owners_ = 0u;
  v6[2].std::__shared_count = 0u;
  *(_OWORD *)&v6[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[3].__shared_owners_ = 0u;
  v6[4].std::__shared_count = 0u;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1003A1DE8;
  v6[1].__shared_weak_owners_ = 0x42A0000041700000;
  LODWORD(v6[2].__vftable) = 1112014848;
  double v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v6 + 1;
  *((void *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    double v6 = (std::__shared_weak_count *)*((void *)this + 2);
    double v10 = (std::__shared_weak_count *)*((void *)this + 1);
    int v11 = v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    double v10 = v6 + 1;
    int v11 = v6;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10002ED00((uint64_t)&v10, &v12);
  long long v8 = v12;
  long long v12 = 0uLL;
  double v9 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v12 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  if (v11) {
    sub_10000BB9C(v11);
  }
  (*(void (**)(CLMartyEstimatesAlgHighSpeedCrash *))(*(void *)this + 312))(this);
}

void sub_10002ECD4(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10002ED00@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLMartyEstimatesAlgHighSpeedCrash::CLMartyEstimatesAlgHighSpeedCrash(CLMartyEstimatesAlgHighSpeedCrash *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 9) = off_10039A008;
  *((void *)this + 10) = off_10039A0D0;
  *((void *)this + 11) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10039D5D8);
  *(void *)uint64_t v2 = off_10039D0B8;
  *(void *)(v2 + 72) = off_10039D368;
  *(void *)(v2 + 80) = off_10039D4A8;
  *(void *)(v2 + 88) = off_10039D588;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  *(void *)(v2 + 60) = 0x80000000800000;
  *(unsigned char *)(v2 + 68) = 0;
  int v3 = (std::__shared_weak_count *)operator new(0x70uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_10039DC30;
  *(_OWORD *)&v3[1].__shared_owners_ = 0u;
  v3[2].std::__shared_count = 0u;
  *(_OWORD *)&v3[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[3].__shared_owners_ = 0u;
  v3[4].std::__shared_count = 0u;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1003A1DE8;
  v3[1].__shared_weak_owners_ = 0x42A0000041700000;
  LODWORD(v3[2].__vftable) = 1112014848;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v3 + 1;
  *((void *)this + 2) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    int v3 = (std::__shared_weak_count *)*((void *)this + 2);
    double v7 = (std::__shared_weak_count *)*((void *)this + 1);
    long long v8 = v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    double v7 = v3 + 1;
    long long v8 = v3;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10002ED00((uint64_t)&v7, &v9);
  long long v5 = v9;
  long long v9 = 0uLL;
  double v6 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v9 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  if (v8) {
    sub_10000BB9C(v8);
  }
  (*(void (**)(CLMartyEstimatesAlgHighSpeedCrash *))(*(void *)this + 312))(this);
}

void sub_10002EFE0(_Unwind_Exception *a1)
{
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039D5D8);
  _Unwind_Resume(a1);
}

void CLMartyEstimatesAlgHighSpeedCrash::resetConfiguration(CLMartyEstimatesAlgHighSpeedCrash *this)
{
  id v17 = +[CSPersistentConfiguration configBaseKey:"EstimatesAlgHSCConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 1008981770;
  LODWORD(v4) = 15.0;
  LODWORD(v5) = 15.0;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v17 withMinValue:v3 maxValue:v4 defaultValue:v5];
  LODWORD(v18) = v6;

  double v7 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v8) = 1117782016;
  LODWORD(v9) = -1138501878;
  LODWORD(v10) = 1117782016;
  [v7 algorithmThresholdNumber:1 inArrayForKey:v17 withMinValue:v9 maxValue:v8 defaultValue:v10];
  HIDWORD(v18) = v11;

  long long v12 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v13) = 1112014848;
  LODWORD(v14) = -1138501878;
  LODWORD(v15) = 1112014848;
  [v12 algorithmThresholdNumber:2 inArrayForKey:v17 withMinValue:v14 maxValue:v13 defaultValue:v15];
  int v19 = v16;

  CLMartyEstimatesAlgHighSpeedCrash::setConfig((uint64_t)this, &v18);
}

void sub_10002F12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLMartyEstimatesAlgHighSpeedCrash::setConfig(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *a2;
  *(_DWORD *)(v3 + 24) = *((_DWORD *)a2 + 2);
  *(void *)(v3 + 16) = v4;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039DC00);
  }
  double v5 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *(float **)(a1 + 32);
    double v8 = v7[4];
    double v9 = v7[5];
    double v10 = v7[6];
    int v11 = 134218496;
    double v12 = v8;
    __int16 v13 = 2048;
    double v14 = v9;
    __int16 v15 = 2048;
    double v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[M][HSC] config-1,%f,config-2,%f,config-3,%f", (uint8_t *)&v11, 0x20u);
  }
  return result;
}

uint64_t CLMartyEstimatesAlgHighSpeedCrash::reset(CLMartyEstimatesAlgHighSpeedCrash *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4));
  *((unsigned char *)this + 68) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  return result;
}

uint64_t CLMartyEstimatesAlgHighSpeedCrash::resetCounters(uint64_t this)
{
  *(unsigned char *)(this + 68) = 0;
  *(void *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CLMartyEstimatesAlgHighSpeedCrash::epochFinalize(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 32);
  float v3 = *(float *)(v2 + 16);
  *(void *)&long long v4 = *(void *)(v2 + 20);
  float32x2_t v5 = *(float32x2_t *)(this + 60);
  int8x8_t v6 = vmvn_s8((int8x8_t)vcge_f32(v5, *(float32x2_t *)&v4));
  float v7 = v3;
  if (v6.i8[0])
  {
    int v8 = *(_DWORD *)(this + 48);
    float v7 = (float)(v8 - 1);
    if (!v8) {
      float v7 = 0.0;
    }
  }
  unsigned int v9 = v7;
  *(_DWORD *)(this + 48) = v7;
  *(float *)v6.i32 = v3;
  if (v6.i8[4])
  {
    int v10 = *(_DWORD *)(this + 52);
    *(float *)v6.i32 = (float)(v10 - 1);
    if (!v10) {
      *(float *)v6.i32 = 0.0;
    }
  }
  unsigned int v11 = *(float *)v6.i32;
  *(_DWORD *)(this + 52) = *(float *)v6.i32;
  char v12 = *(unsigned char *)(this + 68);
  float v13 = v3;
  if (!v12)
  {
    int v14 = *(_DWORD *)(this + 56);
    float v13 = (float)(v14 - 1);
    if (!v14) {
      float v13 = 0.0;
    }
  }
  *(_DWORD *)(this + 56) = v13;
  if (v13) {
    BOOL v15 = v9 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  BOOL v16 = v15 || v11 == 0;
  char v17 = !v16;
  *(void *)(v2 + 40) = a2;
  *(unsigned char *)(v2 + 32) = v17;
  *(unsigned char *)(v2 + 33) = v17;
  *((float32x2_t *)&v4 + 1) = v5;
  *(float *)(v2 + 48) = v3;
  *(_OWORD *)(v2 + 52) = v4;
  *(unsigned char *)(v2 + 68) = v12;
  *(_DWORD *)(v2 + 72) = v9;
  *(_DWORD *)(v2 + 76) = v11;
  *(_DWORD *)(v2 + 80) = v13;
  if (!v16)
  {
    *(unsigned char *)(this + 68) = 0;
    *(void *)(this + 48) = 0;
    *(_DWORD *)(this + 56) = 0;
  }
  return this;
}

uint64_t virtual thunk to'CLMartyEstimatesAlgHighSpeedCrash::epochFinalize(CLMartyEstimatesAlgHighSpeedCrash *this, uint64_t a2)
{
  return CLMartyEstimatesAlgHighSpeedCrash::epochFinalize((uint64_t)this + *(void *)(*(void *)this - 48), a2);
}

uint64_t CLMartyEstimatesAlgHighSpeedCrash::feedFeatures(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 68) = *(unsigned char *)(a2 + 8);
  return result;
}

void *virtual thunk to'CLMartyEstimatesAlgHighSpeedCrash::feedFeatures(void *result, uint64_t a2)
{
  *((unsigned char *)result + *(void *)(*result - 72) + 68) = *(unsigned char *)(a2 + 8);
  return result;
}

float CLMartyEstimatesAlgHighSpeedCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 64) = result;
  return result;
}

{
  float result;

  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 60) = result;
  return result;
}

float virtual thunk to'CLMartyEstimatesAlgHighSpeedCrash::feedFeatures(void *a1, uint64_t a2)
{
  float result = *(float *)(a2 + 16);
  *(float *)((char *)a1 + *(void *)(*a1 - 32) + 64) = result;
  return result;
}

{
  float result;

  float result = *(float *)(a2 + 20);
  *(float *)((char *)a1 + *(void *)(*a1 - 112) + 60) = result;
  return result;
}

double CLMartyEstimatesAlgHighSpeedCrash::epochReset(CLMartyEstimatesAlgHighSpeedCrash *this)
{
  uint64_t v1 = *((void *)this + 4);
  *(_WORD *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_DWORD *)(v1 + 80) = 0;
  return result;
}

double virtual thunk to'CLMartyEstimatesAlgHighSpeedCrash::epochReset(CLMartyEstimatesAlgHighSpeedCrash *this)
{
  uint64_t v1 = *(void *)((char *)this + *(void *)(*(void *)this - 56) + 32);
  *(_WORD *)(v1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 68) = 0u;
  return result;
}

void sub_10002F4A0(CLKappaAlgBlock *this)
{
  *(void *)this = off_10039D0B8;
  *((void *)this + 9) = off_10039D368;
  *((void *)this + 10) = off_10039D4A8;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_10039D588;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_10039D5D8);
}

void sub_10002F590(CLKappaAlgBlock *this)
{
  *(void *)this = off_10039D0B8;
  *((void *)this + 9) = off_10039D368;
  *((void *)this + 10) = off_10039D4A8;
  *((void *)this + 11) = off_10039D588;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_10039D5D8);

  operator delete();
}

void sub_10002F66C(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039D0B8;
  *((void *)v1 + 9) = off_10039D368;
  *((void *)v1 + 10) = off_10039D4A8;
  *((void *)v1 + 11) = off_10039D588;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039D5D8);
}

void sub_10002F744(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039D0B8;
  *((void *)v1 + 9) = off_10039D368;
  *((void *)v1 + 10) = off_10039D4A8;
  *((void *)v1 + 11) = off_10039D588;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039D5D8);

  operator delete();
}

void sub_10002F830(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039D0B8;
  *((void *)v1 + 9) = off_10039D368;
  *((void *)v1 + 10) = off_10039D4A8;
  *((void *)v1 + 11) = off_10039D588;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039D5D8);
}

void sub_10002F908(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039D0B8;
  *((void *)v1 + 9) = off_10039D368;
  *((void *)v1 + 10) = off_10039D4A8;
  *((void *)v1 + 11) = off_10039D588;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039D5D8);

  operator delete();
}

void sub_10002F9F4(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039D0B8;
  *((void *)v1 + 9) = off_10039D368;
  *((void *)v1 + 10) = off_10039D4A8;
  *((void *)v1 + 11) = off_10039D588;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039D5D8);
}

void sub_10002FACC(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039D0B8;
  *((void *)v1 + 9) = off_10039D368;
  *((void *)v1 + 10) = off_10039D4A8;
  *((void *)v1 + 11) = off_10039D588;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039D5D8);

  operator delete();
}

void sub_10002FBB8(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_10002FBFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10039DC30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002FC1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10039DC30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10002FC70(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t CLKappaFeaturesAlgStepsResult::reset(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  *(void *)(this + 36) = 0;
  *(void *)(this + 41) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 64) = 0;
  *(void *)(this + 72) = 0;
  return this;
}

double CLKappaFeaturesAlgStepsResult::log(CLKappaFeaturesAlgStepsResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039E868);
  }
  uint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 3);
    int v5 = *((unsigned __int8 *)this + 32);
    double v6 = *((float *)this + 9);
    double v7 = *((float *)this + 10);
    double v8 = *((float *)this + 11);
    int v9 = *((unsigned __int8 *)this + 48);
    uint64_t v10 = *((void *)this + 7);
    uint64_t v11 = *((void *)this + 8);
    uint64_t v12 = *((void *)this + 9);
    int v13 = 134351104;
    uint64_t v14 = v4;
    __int16 v15 = 1026;
    int v16 = v5;
    __int16 v17 = 2050;
    double v18 = v6;
    __int16 v19 = 2050;
    double v20 = v7;
    __int16 v21 = 2050;
    double v22 = v8;
    __int16 v23 = 1026;
    int v24 = v9;
    __int16 v25 = 2050;
    uint64_t v26 = v10;
    __int16 v27 = 2050;
    uint64_t v28 = v11;
    __int16 v29 = 2050;
    uint64_t v30 = v12;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Steps] summary,A,%{public}llu,B,%{public}d,C,%{public}f,D,%{public}f,E,%{public}f,F,%{public}d,debug-1,%{public}llu,debug-2,%{public}llu,debug-3,%{public}llu\n", (uint8_t *)&v13, 0x54u);
  }
  return result;
}

void CLKappaFeaturesAlgSteps::CLKappaFeaturesAlgSteps(CLKappaFeaturesAlgSteps *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  uint64_t *v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  double v6 = (char *)operator new(0x68uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)double v6 = off_10039E898;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((void *)v6 + 3) = &off_1003A19C8;
  *(void *)(v6 + 65) = 0;
  *(void *)(v6 + 60) = 0;
  *((void *)v6 + 11) = 0;
  *((void *)v6 + 12) = 0;
  *((void *)v6 + 10) = 0;
  double v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v6 + 24;
  *((void *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    double v6 = (char *)*((void *)this + 2);
    uint64_t v10 = (char *)*((void *)this + 1);
    uint64_t v11 = (std::__shared_weak_count *)v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v10 = v6 + 24;
    uint64_t v11 = (std::__shared_weak_count *)v6;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_1000300F0((uint64_t)&v10, &v12);
  long long v8 = v12;
  long long v12 = 0uLL;
  int v9 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v12 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  if (v11) {
    sub_10000BB9C(v11);
  }
  (*(void (**)(CLKappaFeaturesAlgSteps *))(*(void *)this + 312))(this);
}

void sub_1000300B8(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v4) {
    sub_10000BB9C(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v5) {
    sub_10000BB9C(v5);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_1000300F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgSteps::CLKappaFeaturesAlgSteps(CLKappaFeaturesAlgSteps *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 9) = off_10039A008;
  *((void *)this + 10) = off_10039A0D0;
  *((void *)this + 11) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10039E240);
  *(void *)uint64_t v2 = off_10039DD20;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = off_10039DFD0;
  *(void *)(v2 + 80) = off_10039E110;
  *(void *)(v2 + 88) = off_10039E1F0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  float v3 = (char *)operator new(0x68uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)float v3 = off_10039E898;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((void *)v3 + 3) = &off_1003A19C8;
  *(void *)(v3 + 65) = 0;
  *(void *)(v3 + 60) = 0;
  *((void *)v3 + 11) = 0;
  *((void *)v3 + 12) = 0;
  *((void *)v3 + 10) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v3 + 24;
  *((void *)this + 2) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    float v3 = (char *)*((void *)this + 2);
    double v7 = (char *)*((void *)this + 1);
    long long v8 = (std::__shared_weak_count *)v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    double v7 = v3 + 24;
    long long v8 = (std::__shared_weak_count *)v3;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_1000300F0((uint64_t)&v7, &v9);
  long long v5 = v9;
  long long v9 = 0uLL;
  double v6 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v9 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  if (v8) {
    sub_10000BB9C(v8);
  }
  (*(void (**)(CLKappaFeaturesAlgSteps *))(*(void *)this + 312))(this);
}

void sub_1000303B8(_Unwind_Exception *a1)
{
  float v3 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v3) {
    sub_10000BB9C(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039E240);
  _Unwind_Resume(a1);
}

uint64_t CLKappaFeaturesAlgSteps::reset(CLKappaFeaturesAlgSteps *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4));
  *((void *)this + 8) = 0;
  return result;
}

uint64_t CLKappaFeaturesAlgSteps::setConfig(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(result + 32) + 16) = *a2;
  return result;
}

float CLKappaFeaturesAlgSteps::feedSteps(uint64_t a1, float *a2)
{
  uint64_t v2 = *(void *)a2;
  *(void *)(a1 + 64) = *(void *)a2;
  uint64_t v3 = *(void *)(a1 + 32);
  int32x2_t v4 = *(int32x2_t *)(a2 + 2);
  LODWORD(v5) = vcvt_f32_u32((uint32x2_t)v4).u32[0];
  HIDWORD(v5) = vcvt_f32_s32(v4).i32[1];
  *(void *)(v3 + 36) = v5;
  float result = a2[4] * 60.0;
  *(float *)(v3 + 44) = result;
  *(unsigned char *)(v3 + 48) = *((unsigned char *)a2 + 20);
  *(void *)(v3 + 56) = v2;
  return result;
}

float virtual thunk to'CLKappaFeaturesAlgSteps::feedSteps(void *a1, float *a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 104);
  uint64_t v3 = *(void *)a2;
  *((void *)v2 + 8) = *(void *)a2;
  uint64_t v4 = *((void *)v2 + 4);
  int32x2_t v5 = *(int32x2_t *)(a2 + 2);
  LODWORD(v6) = vcvt_f32_u32((uint32x2_t)v5).u32[0];
  HIDWORD(v6) = vcvt_f32_s32(v5).i32[1];
  *(void *)(v4 + 36) = v6;
  float result = a2[4] * 60.0;
  *(float *)(v4 + 44) = result;
  *(unsigned char *)(v4 + 48) = *((unsigned char *)a2 + 20);
  *(void *)(v4 + 56) = v3;
  return result;
}

uint64_t CLKappaFeaturesAlgSteps::epochFinalize(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 32);
  *(void *)(v2 + 24) = a2;
  uint64_t v3 = *(void *)(this + 64);
  *(unsigned char *)(v2 + 32) = v3 != 0;
  *(void *)(v2 + 64) = v3;
  *(void *)(v2 + 72) = v3;
  *(void *)(this + 64) = 0;
  return this;
}

void *virtual thunk to'CLKappaFeaturesAlgSteps::epochFinalize(void *this, uint64_t a2)
{
  uint64_t v2 = (char *)this + *(void *)(*this - 48);
  uint64_t v3 = *((void *)v2 + 4);
  *(void *)(v3 + 24) = a2;
  uint64_t v4 = *((void *)v2 + 8);
  *(unsigned char *)(v3 + 32) = v4 != 0;
  *(void *)(v3 + 64) = v4;
  *(void *)(v3 + 72) = v4;
  *((void *)v2 + 8) = 0;
  return this;
}

uint64_t CLKappaFeaturesAlgSteps::epochReset(CLKappaFeaturesAlgSteps *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4));
  *((void *)this + 8) = 0;
  return result;
}

uint64_t virtual thunk to'CLKappaFeaturesAlgSteps::epochReset(CLKappaFeaturesAlgSteps *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 56);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)v1 + 4) + 24))(*((void *)v1 + 4));
  *((void *)v1 + 8) = 0;
  return result;
}

void sub_100030600(CLKappaAlgBlock *this)
{
  *(void *)this = off_10039DD20;
  *((void *)this + 9) = off_10039DFD0;
  *((void *)this + 10) = off_10039E110;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_10039E1F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_10039E240);
}

void sub_1000306FC(CLKappaAlgBlock *this)
{
  *(void *)this = off_10039DD20;
  *((void *)this + 9) = off_10039DFD0;
  *((void *)this + 10) = off_10039E110;
  *((void *)this + 11) = off_10039E1F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_10039E240);

  operator delete();
}

void sub_1000307E4(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039DD20;
  *((void *)v1 + 9) = off_10039DFD0;
  *((void *)v1 + 10) = off_10039E110;
  *((void *)v1 + 11) = off_10039E1F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039E240);
}

void sub_1000308C8(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039DD20;
  *((void *)v1 + 9) = off_10039DFD0;
  *((void *)v1 + 10) = off_10039E110;
  *((void *)v1 + 11) = off_10039E1F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039E240);

  operator delete();
}

void sub_1000309C0(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039DD20;
  *((void *)v1 + 9) = off_10039DFD0;
  *((void *)v1 + 10) = off_10039E110;
  *((void *)v1 + 11) = off_10039E1F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039E240);
}

void sub_100030AA4(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039DD20;
  *((void *)v1 + 9) = off_10039DFD0;
  *((void *)v1 + 10) = off_10039E110;
  *((void *)v1 + 11) = off_10039E1F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039E240);

  operator delete();
}

void sub_100030B9C(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039DD20;
  *((void *)v1 + 9) = off_10039DFD0;
  *((void *)v1 + 10) = off_10039E110;
  *((void *)v1 + 11) = off_10039E1F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039E240);
}

void sub_100030C80(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039DD20;
  *((void *)v1 + 9) = off_10039DFD0;
  *((void *)v1 + 10) = off_10039E110;
  *((void *)v1 + 11) = off_10039E1F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039E240);

  operator delete();
}

void sub_100030D78(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_100030DBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10039E898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100030DDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10039E898;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100030E30(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

int32x2_t CLZgDetection::reset(int32x2_t *this)
{
  this[4] = (int32x2_t)-1;
  int32x2_t result = vdup_n_s32(0x7F7FFFFFu);
  this[5] = result;
  this[6].i32[0] = 2139095039;
  return result;
}

double CLZgDetection::setHardware(uint64_t a1, unint64_t a2)
{
  return sub_10000AF7C(a1 + 128, a2);
}

uint64_t CLZgDetection::getHardwareProperties(CLZgDetection *this)
{
  return (uint64_t)this + 128;
}

__n128 CLZgDetection::queryZgState(CLZgDetection *this, const CSSPUTriad_Struct *a2, CSSPUTriad_Struct *a3, CSSPUTriad_Struct *a4, const CSSPUTriad_Struct *a5, const CSSPUTriad_Struct *a6)
{
  CLZgDetection::calculateGyroAndAngAccel(this, a2, a3, a4, a5, a6);
  int v8 = CLZgDetection::checkZgCondition(this, a2);
  *((unsigned char *)this + 240) = v8;
  long long v9 = (__n128 *)((char *)this + 56);
  if (!v8) {
    long long v9 = (__n128 *)((char *)this + 104);
  }
  __n128 result = *v9;
  *((__n128 *)this + 2) = *v9;
  *((void *)this + 6) = v9[1].n128_u64[0];
  return result;
}

uint64_t CLZgDetection::calculateGyroAndAngAccel(CLZgDetection *this, const CSSPUTriad_Struct *a2, CSSPUTriad_Struct *a3, CSSPUTriad_Struct *a4, const CSSPUTriad_Struct *a5, const CSSPUTriad_Struct *a6)
{
  int v17 = 0;
  uint64_t result = CLZgDetection::checkIfOnlyOneGyroSat((uint64_t)this, (float *)a4, (float *)a3, &v17);
  float v13 = (float)(a2->timestamp - a4->timestamp) / (float)(a3->timestamp - a4->timestamp);
  float v14 = a4->z + (float)(v13 * (float)(a3->z - a4->z));
  *((void *)this + 7) = a2->timestamp;
  *((float32x2_t *)this + 8) = vmla_n_f32(*(float32x2_t *)&a4->x, vsub_f32(*(float32x2_t *)&a3->x, *(float32x2_t *)&a4->x), v13);
  *((float *)this + 18) = v14;
  float v15 = (float)(a2->timestamp - a6->timestamp) / (float)(a5->timestamp - a6->timestamp);
  float v16 = a6->z + (float)(v15 * (float)(a5->z - a6->z));
  *((void *)this + 10) = a2->timestamp;
  *((float32x2_t *)this + 11) = vmla_n_f32(*(float32x2_t *)&a6->x, vsub_f32(*(float32x2_t *)&a5->x, *(float32x2_t *)&a6->x), v15);
  *((float *)this + 24) = v16;
  *((void *)this + 15) = *((void *)this + 9);
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)this + 56);
  if (result) {
    return CLZgDetection::calculateSatGyroAndAngAccel((uint64_t)this, (uint64_t)a2, &v17);
  }
  return result;
}

uint64_t CLZgDetection::checkZgCondition(CLZgDetection *this, const CSSPUTriad_Struct *a2)
{
  float v2 = *((float *)this + 36);
  float v3 = *((float *)this + 37);
  float v5 = *((float *)this + 32);
  float v4 = *((float *)this + 33);
  float v6 = *((float *)this + 34);
  float v7 = *((float *)this + 35);
  float x = a2->x;
  float y = a2->y;
  float z = a2->z;
  float v11 = sqrtf((float)((float)(y * y) + (float)(x * x)) + (float)(z * z)) * 9.8067;
  float v12 = *((float *)this + 16);
  float v13 = *((float *)this + 17);
  float v14 = *((float *)this + 18);
  double v15 = v13 * v13;
  double v16 = v14 * v14;
  float v17 = *((float *)this + 24);
  double v18 = (float)(x * 9.8067) + (v15 + v16) * v7 + (float)(v2 * (float)(v17 - (float)(v12 * v13)));
  double v19 = v12 * v12;
  double v20 = (float)(y * 9.8067) + (v19 + v16) * v2;
  float v21 = *((float *)this + 22);
  LODWORD(v16) = *((_DWORD *)this + 23);
  *(float *)&double v18 = v18 + (float)(v3 * (float)-(float)(*(float *)&v16 + (float)(v12 * v14)));
  *(float *)&double v20 = v20
                 + (float)(v3 * (float)(v21 - (float)(v13 * v14)))
                 + (float)(v7 * (float)-(float)(v17 + (float)(v12 * v13)));
  float v22 = (float)(z * 9.8067)
      + (v19 + v15) * v3
      + (float)(v7 * (float)(*(float *)&v16 - (float)(v12 * v14)))
      + (float)(v2 * (float)-(float)(v21 + (float)(v13 * v14)));
  float v23 = sqrtf((float)((float)(*(float *)&v20 * *(float *)&v20) + (float)(*(float *)&v18 * *(float *)&v18))+ (float)(v22 * v22));
  float v24 = (float)((float)-(float)((float)(v4 - v6) * v13) * v14) + (float)(v5 * v21);
  float v25 = (float)((float)-(float)((float)(v6 - v5) * v12) * v14) + (float)(v4 * *(float *)&v16);
  float v26 = (float)((float)-(float)((float)(v5 - v4) * v12) * v13) + (float)(v6 * v17);
  float v27 = sqrtf((float)((float)(v25 * v25) + (float)(v24 * v24)) + (float)(v26 * v26));
  float v28 = *((float *)this + 3) * 9.8067;
  BOOL v29 = (float)(v23 / v11) <= *((float *)this + 4);
  if (v23 <= v28) {
    BOOL v29 = 0;
  }
  BOOL v30 = v27 <= *((float *)this + 5)
     && sqrtf((float)((float)(v13 * v13) + (float)(v12 * v12)) + (float)(v14 * v14)) >= *((float *)this + 6);
  if (v23 <= v28) {
    BOOL v29 = 1;
  }
  if (v29) {
    return 1;
  }
  BOOL v32 = v6 != 0.0;
  if (v4 == 0.0) {
    BOOL v32 = 0;
  }
  return v32 & v30;
}

BOOL CLZgDetection::checkIfOnlyOneGyroSat(uint64_t a1, float *a2, float *a3, _DWORD *a4)
{
  float v4 = *(float *)(a1 + 8);
  if (fabsf(a3[2]) >= v4 || fabsf(a2[2]) >= v4)
  {
    int v5 = 1;
    *a4 = 1;
  }
  else
  {
    int v5 = 0;
  }
  if (fabsf(a3[3]) >= v4 || fabsf(a2[3]) >= v4)
  {
    ++v5;
    *a4 = 2;
  }
  if (fabsf(a3[4]) >= v4 || fabsf(a2[4]) >= v4)
  {
    ++v5;
    *a4 = 3;
  }
  return v5 == 1;
}

float32_t CLZgDetection::calculateInterpolate@<S0>(const CSSPUTriad_Struct *a1@<X1>, const CSSPUTriad_Struct *a2@<X2>, float32x2_t a3@<X3>, float32x2_t *a4@<X8>)
{
  float v5 = (float)(*(void *)&a3 - a2->timestamp) / (float)(a1->timestamp - a2->timestamp);
  a4[1] = vmla_n_f32(*(float32x2_t *)&a2->x, vsub_f32(*(float32x2_t *)&a1->x, *(float32x2_t *)&a2->x), v5);
  float32_t result = a2->z + (float)(v5 * (float)(a1->z - a2->z));
  a4[2].f32[0] = result;
  *a4 = a3;
  return result;
}

uint64_t CLZgDetection::calculateSatGyroAndAngAccel(uint64_t result, uint64_t a2, int *a3)
{
  float v3 = *(float *)(result + 144);
  float v4 = *(float *)(result + 148);
  float v5 = *(float *)(result + 128);
  float v6 = *(float *)(result + 132);
  float v7 = *(float *)(result + 136);
  float v8 = *(float *)(result + 140);
  int v9 = *a3;
  if (*a3 == 3)
  {
    float v21 = *(float *)(result + 64);
    float v20 = *(float *)(result + 68);
    double v22 = (float)((float)(v3 * v20) + (float)(v21 * v8));
    float v23 = (float)(v7 * v20) - (float)(v6 * v20);
    float v24 = (float)((float)(v5 * v21) - (float)(v7 * v21)) * (float)((float)(v5 * v21) - (float)(v7 * v21))
        + v22 * v22
        + v23 * v23;
    if (v24 == 0.0)
    {
      float v28 = *(float *)(result + 72);
    }
    else
    {
      float v26 = *(float *)(result + 88);
      float v25 = *(float *)(result + 92);
      float v27 = ((float)(*(float *)(a2 + 16) * 9.8067) + (v21 * v21 + v20 * v20) * v4 + (float)(v8 * v25) - (float)(v3 * v26))
          * v22;
      float v28 = (float)((float)(v27 + (float)((float)-(float)(v5 * v26) * v23))
                  + (float)((float)(v25 * (float)-v6) * (float)((float)(v5 * v21) + (float)((float)-v7 * v21))))
          / v24;
    }
    *(float *)(result + 72) = v28;
    uint64_t v44 = *(void *)(result + 32);
    if (v44 == -1 || (float v45 = (float)(unint64_t)(*(void *)a2 - v44), v45 / 1000000.0 >= *(float *)result))
    {
      float v48 = (float)((float)(v5 - v6) * v21) * v20;
    }
    else
    {
      float v46 = *(float *)(result + 28);
      float v47 = v7 * (float)((float)((float)(v5 - v6) * v21) * v20);
      float v7 = v46 + (float)(v7 * v7);
      float v48 = v47 + (float)((float)(v28 - *(float *)(result + 48)) / v45) * 1000000.0 * v46;
    }
    if (v7 == 0.0) {
      float v49 = *(float *)(result + 96);
    }
    else {
      float v49 = v48 / v7;
    }
    *(float *)(result + 96) = v49;
  }
  else if (v9 == 2)
  {
    float v29 = *(float *)(result + 64);
    float v30 = *(float *)(result + 72);
    double v31 = (float)((float)(v4 * v30) + (float)(v29 * v8));
    float v32 = (float)(v7 * v30) - (float)(v6 * v30);
    float v33 = (float)((float)(v6 * v29) - (float)(v5 * v29)) * (float)((float)(v6 * v29) - (float)(v5 * v29))
        + v31 * v31
        + v32 * v32;
    if (v33 == 0.0)
    {
      float v37 = *(float *)(result + 68);
    }
    else
    {
      float v34 = *(float *)(result + 96);
      float v35 = *(float *)(result + 88);
      float v36 = ((float)(*(float *)(a2 + 12) * 9.8067) + (v29 * v29 + v30 * v30) * v3 + (float)(v4 * v35) - (float)(v8 * v34))
          * v31;
      float v37 = (float)((float)(v36 + (float)((float)(v35 * (float)-v5) * v32))
                  + (float)((float)-(float)(v7 * v34) * (float)((float)(v6 * v29) + (float)((float)-v5 * v29))))
          / v33;
    }
    *(float *)(result + 68) = v37;
    uint64_t v50 = *(void *)(result + 32);
    if (v50 == -1 || (float v51 = (float)(unint64_t)(*(void *)a2 - v50), v51 / 1000000.0 >= *(float *)result))
    {
      float v54 = (float)((float)(v7 - v5) * v29) * v30;
    }
    else
    {
      float v52 = *(float *)(result + 28);
      float v53 = v6 * (float)((float)((float)(v7 - v5) * v29) * v30);
      float v6 = v52 + (float)(v6 * v6);
      float v54 = v53 + (float)((float)(v37 - *(float *)(result + 44)) / v51) * 1000000.0 * v52;
    }
    if (v6 == 0.0) {
      float v55 = *(float *)(result + 92);
    }
    else {
      float v55 = v54 / v6;
    }
    *(float *)(result + 92) = v55;
  }
  else if (v9 == 1)
  {
    float v11 = *(float *)(result + 68);
    float v10 = *(float *)(result + 72);
    double v12 = (float)((float)(v4 * v10) + (float)(v11 * v3));
    float v13 = (float)(v6 * v11) - (float)(v5 * v11);
    float v14 = (float)(v5 * v10) - (float)(v7 * v10);
    float v15 = v14 * v14 + v13 * v13 + v12 * v12;
    if (v15 == 0.0)
    {
      float v19 = *(float *)(result + 64);
    }
    else
    {
      float v16 = *(float *)(result + 92);
      float v17 = *(float *)(result + 96);
      float v18 = ((float)(*(float *)(a2 + 8) * 9.8067) + (v11 * v11 + v10 * v10) * v8 + (float)(v3 * v17) - (float)(v4 * v16))
          * v12;
      float v19 = (float)((float)(v18 + (float)((float)(v17 * (float)-v7) * v13)) + (float)((float)-(float)(v6 * v16) * v14))
          / v15;
    }
    *(float *)(result + 64) = v19;
    uint64_t v38 = *(void *)(result + 32);
    if (v38 == -1 || (float v39 = (float)(unint64_t)(*(void *)a2 - v38), v39 / 1000000.0 >= *(float *)result))
    {
      float v42 = (float)((float)(v6 - v7) * v11) * v10;
    }
    else
    {
      float v40 = *(float *)(result + 28);
      float v41 = v5 * (float)((float)((float)(v6 - v7) * v11) * v10);
      float v5 = v40 + (float)(v5 * v5);
      float v42 = v41 + (float)((float)(v19 - *(float *)(result + 40)) / v39) * 1000000.0 * v40;
    }
    if (v5 == 0.0) {
      float v43 = *(float *)(result + 88);
    }
    else {
      float v43 = v42 / v5;
    }
    *(float *)(result + 88) = v43;
  }
  return result;
}

void sub_100031704(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void CLKappaFeaturesAlgPeakDetectorMAPResult::log(CLKappaFeaturesAlgPeakDetectorMAPResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039F4F0);
  }
  float v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 80);
    uint64_t v4 = *((void *)this + 11);
    double v5 = *((float *)this + 4);
    uint64_t v6 = *((void *)this + 3);
    int v7 = *((_DWORD *)this + 8);
    uint64_t v8 = *((void *)this + 5);
    double v9 = *((float *)this + 12);
    double v10 = *((float *)this + 13);
    double v11 = *((float *)this + 14);
    double v12 = *((float *)this + 15);
    uint64_t v13 = *((void *)this + 8);
    double v14 = *((float *)this + 18);
    int v15 = *((_DWORD *)this + 24);
    double v16 = *((float *)this + 32);
    uint64_t v17 = *((void *)this + 13);
    uint64_t v18 = *((void *)this + 14);
    uint64_t v19 = *((void *)this + 15);
    int v20 = *((unsigned __int8 *)this + 184);
    v21[0] = 67244544;
    v21[1] = v3;
    __int16 v22 = 2050;
    uint64_t v23 = v4;
    __int16 v24 = 2050;
    double v25 = v5;
    __int16 v26 = 2050;
    uint64_t v27 = v6;
    __int16 v28 = 1026;
    int v29 = v7;
    __int16 v30 = 2050;
    uint64_t v31 = v8;
    __int16 v32 = 2050;
    double v33 = v9;
    __int16 v34 = 2050;
    double v35 = v10;
    __int16 v36 = 2050;
    double v37 = v11;
    __int16 v38 = 2050;
    double v39 = v12;
    __int16 v40 = 2050;
    uint64_t v41 = v13;
    __int16 v42 = 2050;
    double v43 = v14;
    __int16 v44 = 1026;
    int v45 = v15;
    __int16 v46 = 2050;
    uint64_t v47 = v17;
    __int16 v48 = 2050;
    double v49 = v16;
    __int16 v50 = 2050;
    uint64_t v51 = v18;
    __int16 v52 = 2050;
    uint64_t v53 = v19;
    __int16 v54 = 1026;
    int v55 = v20;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MAP] summary,A,%{public}d,B,%{public}llu,config-1,%{public}f,config-2,%{public}llu,config-3,%{public}d,config-4,%{public}llu,config-5,%{public}f,config-6,%{public}f,config-7,%{public}f,config-8,%{public}f,config-9,%{public}llu,config-10,%{public}f,debug-1,%{public}d,debug-2,%{public}llu,debug-3,%{public}f,debug-4,%{public}llu,debug-5,%{public}llu,debug-6,%{public}d\n", (uint8_t *)v21, 0xA6u);
  }
}

void CLKappaFeaturesAlgPeakDetectorMAPResult::reset(CLKappaFeaturesAlgPeakDetectorMAPResult *this)
{
  int v3 = (void *)((char *)this + 136);
  float v2 = (void *)*((void *)this + 17);
  *((unsigned char *)v3 - 128) = 0;
  *((_DWORD *)v3 - 31) = 0;
  *((unsigned char *)v3 - 56) = 0;
  *(v3 - 6) = 0;
  *((_DWORD *)v3 - 10) = 0;
  *(v3 - 3) = 0;
  *(v3 - 2) = 0;
  *(v3 - 4) = 0;
  *((_DWORD *)v3 - 2) = 0;
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void *)*((void *)this + 20);
  *int v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  if (v4)
  {
    *((void *)this + 21) = v4;
    operator delete(v4);
  }
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((unsigned char *)this + 184) = 1;
}

void CLKappaFeaturesAlgPeakDetectorMAP::CLKappaFeaturesAlgPeakDetectorMAP(CLKappaFeaturesAlgPeakDetectorMAP *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  uint64_t *v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  sub_1000331D0(&v13);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  unint64_t v7 = v13;
  long long v13 = 0uLL;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = __PAIR128__((unint64_t)v6, v7);
  if (v8)
  {
    sub_10000BB9C(v8);
    if (*((void *)&v13 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v13 + 1));
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  }
  uint64_t v11 = *((void *)this + 1);
  double v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100031C2C((uint64_t)&v11, &v13);
  long long v9 = v13;
  long long v13 = 0uLL;
  double v10 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v9;
  if (v10)
  {
    sub_10000BB9C(v10);
    if (*((void *)&v13 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (v12) {
    sub_10000BB9C(v12);
  }
  (*(void (**)(CLKappaFeaturesAlgPeakDetectorMAP *))(*(void *)this + 312))(this);
}

void sub_100031BF8(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v4) {
    sub_10000BB9C(v4);
  }
  double v5 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v5) {
    sub_10000BB9C(v5);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_100031C2C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  float32_t result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgPeakDetectorMAP::CLKappaFeaturesAlgPeakDetectorMAP(CLKappaFeaturesAlgPeakDetectorMAP *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 8) = off_10039A008;
  *((void *)this + 9) = off_10039A0D0;
  *((void *)this + 10) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10039EEC8);
  *(void *)uint64_t v2 = off_10039E9A8;
  *(void *)(v2 + 64) = off_10039EC58;
  *(void *)(v2 + 72) = off_10039ED98;
  *(void *)(v2 + 80) = off_10039EE78;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  sub_1000331D0(&v10);
  int v3 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  unint64_t v4 = v10;
  long long v10 = 0uLL;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = __PAIR128__((unint64_t)v3, v4);
  if (v5)
  {
    sub_10000BB9C(v5);
    if (*((void *)&v10 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v10 + 1));
    }
    int v3 = (std::__shared_weak_count *)*((void *)this + 2);
  }
  uint64_t v8 = *((void *)this + 1);
  long long v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100031C2C((uint64_t)&v8, &v10);
  long long v6 = v10;
  long long v10 = 0uLL;
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    if (*((void *)&v10 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  if (v9) {
    sub_10000BB9C(v9);
  }
  (*(void (**)(CLKappaFeaturesAlgPeakDetectorMAP *))(*(void *)this + 312))(this);
}

void sub_100031EA8(_Unwind_Exception *a1)
{
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v3) {
    sub_10000BB9C(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039EEC8);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgPeakDetectorMAP::resetConfiguration(CLKappaFeaturesAlgPeakDetectorMAP *this)
{
  id v31 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgPeakDetectorMAPConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 1148846080;
  LODWORD(v4) = 1.0;
  LODWORD(v5) = 8.0;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v31 withMinValue:v4 maxValue:v3 defaultValue:v5];
  LODWORD(v32) = v6;

  unint64_t v7 = +[CSPersistentConfiguration sharedConfiguration];
  *((void *)&v32 + 1) = (int)[v7 algorithmIntegerNumber:1 inArrayForKey:v31 withMinValue:0 maxValue:10000000 defaultValue:100000];

  uint64_t v8 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned int v33 = [v8 algorithmIntegerNumber:2 inArrayForKey:v31 withMinValue:1 maxValue:100000 defaultValue:5];

  long long v9 = +[CSPersistentConfiguration sharedConfiguration];
  uint64_t v34 = (int)[v9 algorithmIntegerNumber:3 inArrayForKey:v31 withMinValue:0 maxValue:10000000 defaultValue:120000];

  long long v10 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v11) = 1.0;
  LODWORD(v12) = 1045220557;
  [v10 algorithmThresholdNumber:4 inArrayForKey:v31 withMinValue:0.0 maxValue:v11 defaultValue:v12];
  int v35 = v13;

  double v14 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v15) = 1061997773;
  LODWORD(v16) = 1.0;
  [v14 algorithmThresholdNumber:5 inArrayForKey:v31 withMinValue:0.0 maxValue:v16 defaultValue:v15];
  int v36 = v17;

  uint64_t v18 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v19) = 1.0;
  LODWORD(v20) = 1045220557;
  [v18 algorithmThresholdNumber:6 inArrayForKey:v31 withMinValue:0.0 maxValue:v19 defaultValue:v20];
  int v37 = v21;

  __int16 v22 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v23) = 1.0;
  LODWORD(v24) = 1.0;
  [v22 algorithmThresholdNumber:7 inArrayForKey:v31 withMinValue:0.0 maxValue:v23 defaultValue:v24];
  int v38 = v25;

  __int16 v26 = +[CSPersistentConfiguration sharedConfiguration];
  uint64_t v39 = (int)[v26 algorithmIntegerNumber:8 inArrayForKey:v31 withMinValue:0 maxValue:10000000 defaultValue:70000];

  uint64_t v27 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v28) = 1120403456;
  LODWORD(v29) = 15.0;
  [v27 algorithmThresholdNumber:9 inArrayForKey:v31 withMinValue:0.0 maxValue:v28 defaultValue:v29];
  int v40 = v30;

  CLKappaFeaturesAlgPeakDetectorMAP::setConfig((uint64_t)this, &v32);
}

void sub_1000321A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgPeakDetectorMAP::setConfig(uint64_t a1, long long *a2)
{
  double v3 = *(_OWORD **)(a1 + 32);
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(_OWORD *)((char *)v3 + 60) = *(long long *)((char *)a2 + 44);
  v3[2] = v5;
  v3[3] = v6;
  v3[1] = v4;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039F4F0);
  }
  unint64_t v7 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
  {
    double v9 = *(float *)a2;
    uint64_t v10 = *((void *)a2 + 1);
    int v11 = *((_DWORD *)a2 + 4);
    uint64_t v12 = *((void *)a2 + 3);
    double v13 = *((float *)a2 + 8);
    double v14 = *((float *)a2 + 9);
    double v15 = *((float *)a2 + 10);
    double v16 = *((float *)a2 + 11);
    uint64_t v17 = *((void *)a2 + 6);
    double v18 = *((float *)a2 + 14);
    int v19 = 134220288;
    double v20 = v9;
    __int16 v21 = 2048;
    uint64_t v22 = v10;
    __int16 v23 = 1024;
    int v24 = v11;
    __int16 v25 = 2048;
    uint64_t v26 = v12;
    __int16 v27 = 2048;
    double v28 = v13;
    __int16 v29 = 2048;
    double v30 = v14;
    __int16 v31 = 2048;
    double v32 = v15;
    __int16 v33 = 2048;
    double v34 = v16;
    __int16 v35 = 2048;
    uint64_t v36 = v17;
    __int16 v37 = 2048;
    double v38 = v18;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[MAP] config-1,%f,config-2,%llu,config-3,%d,config-4,%llu,config-5,%f,config-6,%f,config-7,%f,config-8,%f,config-9,%llu,config-10,%f", (uint8_t *)&v19, 0x62u);
  }
  return result;
}

void CLKappaFeaturesAlgPeakDetectorMAP::epochFinalize(CLKappaFeaturesAlgPeakDetectorMAP *this, uint64_t a2)
{
  id v4 = *(id *)(*((void *)this + 6) + 24);
  CSAccelPeakDetectorResult::detectPeaks(v4, (uint64_t)v45, *(float *)(*((void *)this + 4) + 16), (double)*(unint64_t *)(*((void *)this + 4) + 24) * 0.000001);
  __int16 v42 = 0;
  double v43 = 0;
  uint64_t v44 = 0;
  sub_100029BCC(&v42, v46, (uint64_t)v47, (v47 - (unsigned char *)v46) >> 2);
  __p = 0;
  int v40 = 0;
  unint64_t v41 = 0;
  unint64_t v5 = v47 - (unsigned char *)v46;
  uint64_t v6 = *((void *)this + 4);
  if (*(unsigned int *)(v6 + 32) <= (unint64_t)((v47 - (unsigned char *)v46) >> 2))
  {
    double v9 = v48;
    if ((unint64_t)(v49 - (unsigned char *)v48) < 9)
    {
      char v11 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      char v11 = 1;
      unint64_t v12 = 1;
      do
      {
        unint64_t v13 = v9[v12] - v9[v12 - 1];
        if ((unint64_t)v10 >= v41)
        {
          double v14 = __p;
          uint64_t v15 = (v10 - __p) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            sub_10000EE98();
          }
          uint64_t v17 = v41 - (void)__p;
          if ((uint64_t)(v41 - (void)__p) >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            unint64_t v18 = (unint64_t)sub_10000EEB0((uint64_t)&v41, v18);
            uint64_t v20 = v19;
            double v14 = __p;
            uint64_t v10 = v40;
          }
          else
          {
            uint64_t v20 = 0;
          }
          __int16 v21 = (char *)(v18 + 8 * v15);
          *(void *)__int16 v21 = v13;
          uint64_t v22 = v21 + 8;
          while (v10 != v14)
          {
            uint64_t v23 = *((void *)v10 - 1);
            v10 -= 8;
            *((void *)v21 - 1) = v23;
            v21 -= 8;
          }
          __p = v21;
          unint64_t v41 = v18 + 8 * v20;
          if (v14) {
            operator delete(v14);
          }
          uint64_t v10 = v22;
        }
        else
        {
          *(void *)uint64_t v10 = v13;
          v10 += 8;
        }
        int v40 = v10;
        if (v13 <= *(void *)(*((void *)this + 4) + 40)) {
          char v11 = 0;
        }
        ++v12;
        double v9 = v48;
      }
      while (v12 < (v49 - (unsigned char *)v48) >> 3);
    }
    std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
    std::__sort<std::__less<float,float> &,float *>();
    float v24 = (float)(unint64_t)((v40 - __p) >> 3);
    uint64_t v6 = *((void *)this + 4);
    int v25 = vcvtms_s32_f32(*(float *)(v6 + 48) * v24);
    int v26 = vcvtps_s32_f32(*(float *)(v6 + 52) * v24);
    float v27 = (float)(unint64_t)((v43 - (unsigned char *)v42) >> 2);
    int v28 = vcvtms_s32_f32(*(float *)(v6 + 56) * v27);
    if (v25 <= 1) {
      int v25 = 1;
    }
    unsigned int v29 = v25 - 1;
    if (v26 <= 1) {
      int v26 = 1;
    }
    unint64_t v30 = *(void *)&__p[8 * (v26 - 1)] - *(void *)&__p[8 * v29];
    if (v28 <= 1) {
      int v31 = 1;
    }
    else {
      int v31 = v28;
    }
    unsigned int v32 = v31 - 1;
    int v33 = vcvtps_s32_f32(*(float *)(v6 + 60) * v27);
    if (v33 <= 1) {
      int v33 = 1;
    }
    float v34 = *((float *)v42 + (v33 - 1)) - *((float *)v42 + v32);
    BOOL v7 = v30 <= *(void *)(v6 + 64) && v34 <= *(float *)(v6 + 72);
    *(void *)(v6 + 104) = v30;
    *(float *)(v6 + 128) = v34;
    char v8 = v11 & 1;
    unint64_t v5 = v47 - (unsigned char *)v46;
  }
  else
  {
    BOOL v7 = 0;
    *(void *)(v6 + 104) = 0;
    *(_DWORD *)(v6 + 128) = 0;
    char v8 = 1;
  }
  *(_DWORD *)(v6 + 96) = v5 >> 2;
  *(unsigned char *)(v6 + 184) = v8;
  *(void *)(v6 + 88) = a2;
  *(unsigned char *)(v6 + 80) = v7 & v8;
  if ((void **)(v6 + 136) != &v48)
  {
    sub_1000330C4((char *)(v6 + 136), (char *)v48, (uint64_t)v49, (v49 - (unsigned char *)v48) >> 3);
    uint64_t v6 = *((void *)this + 4);
  }
  if ((void **)(v6 + 160) != &v46) {
    sub_100024308((char *)(v6 + 160), (char *)v46, (uint64_t)v47, (v47 - (unsigned char *)v46) >> 2);
  }
  __int16 v35 = (char *)[v4 count:__p];
  if (v35)
  {
    uint64_t v36 = [v4 objectAtIndex:0];
    __int16 v37 = [v4 objectAtIndex:v35 - 1];
    *(void *)(*((void *)this + 4) + 112) = [v36 timestamp];
    *(void *)(*((void *)this + 4) + 120) = [v37 timestamp];
  }
  if (__pa) {
    operator delete(__pa);
  }
  if (v42)
  {
    double v43 = v42;
    operator delete(v42);
  }
  if (v48)
  {
    double v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
}

void sub_100032734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  sub_1000327E0(&a15);

  _Unwind_Resume(a1);
}

uint64_t CLKappaFeaturesAlgPeakDetectorMAP::getLowerPercentileIndex(CLKappaFeaturesAlgPeakDetectorMAP *this, unint64_t a2, float a3)
{
  int v3 = vcvtms_s32_f32((float)a2 * a3);
  if (v3 <= 1) {
    int v3 = 1;
  }
  return (v3 - 1);
}

uint64_t CLKappaFeaturesAlgPeakDetectorMAP::getUpperPercentileIndex(CLKappaFeaturesAlgPeakDetectorMAP *this, unint64_t a2, float a3)
{
  int v3 = vcvtps_s32_f32((float)a2 * a3);
  if (v3 <= 1) {
    int v3 = 1;
  }
  return (v3 - 1);
}

void *sub_1000327E0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void virtual thunk to'CLKappaFeaturesAlgPeakDetectorMAP::epochFinalize(CLKappaFeaturesAlgPeakDetectorMAP *this, uint64_t a2)
{
}

uint64_t CLKappaFeaturesAlgPeakDetectorMAP::epochReset(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 32);
  *(void *)(v1 + 144) = *(void *)(v1 + 136);
  *(void *)(v1 + 168) = *(void *)(v1 + 160);
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = 0;
  *(unsigned char *)(v1 + 184) = 1;
  return this;
}

void *virtual thunk to'CLKappaFeaturesAlgPeakDetectorMAP::epochReset(void *this)
{
  uint64_t v1 = *(void *)((char *)this + *(void *)(*this - 56) + 32);
  *(void *)(v1 + 144) = *(void *)(v1 + 136);
  *(void *)(v1 + 168) = *(void *)(v1 + 160);
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = 0;
  *(unsigned char *)(v1 + 184) = 1;
  return this;
}

void sub_1000328A0(CLKappaAlgBlock *this)
{
  *(void *)this = off_10039E9A8;
  *((void *)this + 8) = off_10039EC58;
  *((void *)this + 9) = off_10039ED98;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_10039EE78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_10039EEC8);
}

void sub_10003299C(CLKappaAlgBlock *this)
{
  *(void *)this = off_10039E9A8;
  *((void *)this + 8) = off_10039EC58;
  *((void *)this + 9) = off_10039ED98;
  *((void *)this + 10) = off_10039EE78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_10039EEC8);

  operator delete();
}

void sub_100032A80(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  id v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    sub_10000BB9C(v4);
  }
}

void sub_100032AAC(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039E9A8;
  *((void *)v1 + 8) = off_10039EC58;
  *((void *)v1 + 9) = off_10039ED98;
  *((void *)v1 + 10) = off_10039EE78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039EEC8);
}

void sub_100032B90(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039E9A8;
  *((void *)v1 + 8) = off_10039EC58;
  *((void *)v1 + 9) = off_10039ED98;
  *((void *)v1 + 10) = off_10039EE78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039EEC8);

  operator delete();
}

void sub_100032C88(void *a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 32);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 7);
  *((void *)v2 + 6) = v4;
  *((void *)v2 + 7) = v3;
  if (v5) {
    sub_10000BB9C(v5);
  }
}

void sub_100032CC8(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039E9A8;
  *((void *)v1 + 8) = off_10039EC58;
  *((void *)v1 + 9) = off_10039ED98;
  *((void *)v1 + 10) = off_10039EE78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039EEC8);
}

void sub_100032DAC(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039E9A8;
  *((void *)v1 + 8) = off_10039EC58;
  *((void *)v1 + 9) = off_10039ED98;
  *((void *)v1 + 10) = off_10039EE78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039EEC8);

  operator delete();
}

void sub_100032EA4(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039E9A8;
  *((void *)v1 + 8) = off_10039EC58;
  *((void *)v1 + 9) = off_10039ED98;
  *((void *)v1 + 10) = off_10039EE78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039EEC8);
}

void sub_100032F88(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_10039E9A8;
  *((void *)v1 + 8) = off_10039EC58;
  *((void *)v1 + 9) = off_10039ED98;
  *((void *)v1 + 10) = off_10039EE78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039EEC8);

  operator delete();
}

void sub_100033080(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

char *sub_1000330C4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  BOOL v7 = result;
  uint64_t v8 = *((void *)result + 2);
  double v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *BOOL v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_10000EE98();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = sub_100010F2C(v7, v11);
    unint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    double v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  double v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    double v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

double sub_1000331D0@<D0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0xD8uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = off_10039F520;
  double result = 0.0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((void *)v2 + 26) = 0;
  *((void *)v2 + 3) = off_1003A1AE8;
  *((_DWORD *)v2 + 10) = 1090519040;
  *((void *)v2 + 6) = 100000;
  *((_DWORD *)v2 + 14) = 5;
  *((void *)v2 + 8) = 120000;
  *(_OWORD *)(v2 + 72) = xmmword_100338B80;
  *((void *)v2 + 11) = 70000;
  *((_DWORD *)v2 + 24) = 1097859072;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  v2[208] = 1;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1000332B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10039F520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000332D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10039F520;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100033328(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10003354C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_100033594(uint64_t a1)
{
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  uint64_t v3 = [v2 objectForKey:@"CSKappaCoreAnalyticsDailyInfo"];

  [v3 getBytes:*(void *)(a1 + 32) + 16 length:84];
  [*(id *)(a1 + 32) updateUserInfoSettings];
  [*(id *)(a1 + 32) updateUserStats];
  id v4 = +[NSData dataWithBytes:*(void *)(a1 + 32) + 16 length:84];

  [*(id *)(*(void *)(a1 + 32) + 216) setObject:forKey:];
}

void sub_100033668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100033684(uint64_t a1)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x3032000000;
  uint64_t v10 = sub_1000337A8;
  unint64_t v11 = sub_1000337B8;
  id v12 = 0;
  if (WeakRetained)
  {
    id v4 = WeakRetained[28];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1000337C0;
    _DWORD v6[3] = &unk_10039F590;
    v6[4] = v3;
    v6[5] = &v7;
    dispatch_sync(v4, v6);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v5, 1, v8[5]);
  }
  _Block_object_dispose(&v7, 8);
}

void sub_100033784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000337A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000337B8(uint64_t a1)
{
}

void sub_1000337C0(uint64_t a1)
{
  if (qword_1003DB750 != -1) {
    dispatch_once(&qword_1003DB750, &stru_10039F678);
  }
  uint64_t v2 = qword_1003DB758;
  if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CoreAnalytics queryCompanion timeout", v11, 2u);
  }
  uint64_t v3 = +[CSPersistentConfiguration sharedConfiguration];
  id v4 = [v3 objectForKey:@"CSKappaCoreAnalyticsDailyInfo"];

  [v4 getBytes:*(void *)(a1 + 32) + 16 length:84];
  uint64_t v5 = [*(id *)(a1 + 32) sendUserInfoToCoreAnalytics];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  [*(id *)(a1 + 32) clearUserInfo];
  uint64_t v8 = +[CSPersistentConfiguration sharedConfiguration];
  uint64_t v9 = +[NSDate now];
  [v8 setObject:v9 forKey:@"CSKappaCoreAnalyticsLastSuccessfulUpload"];

  uint64_t v10 = +[NSData dataWithBytes:*(void *)(a1 + 32) + 16 length:84];

  [*(id *)(*(void *)(a1 + 32) + 216) setObject:v10 forKey:@"CSKappaCoreAnalyticsDailyInfo"];
}

void sub_100033944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100033978(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = WeakRetained;
  v12[0] = 0;
  v12[1] = v12;
  _DWORD v12[2] = 0x3032000000;
  v12[3] = sub_1000337A8;
  v12[4] = sub_1000337B8;
  id v13 = 0;
  if (WeakRetained)
  {
    uint64_t v6 = WeakRetained[28];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_100033AE4;
    v8[3] = &unk_10039F5E0;
    v8[4] = WeakRetained;
    id v9 = v3;
    unint64_t v11 = v12;
    id v10 = *(id *)(a1 + 32);
    dispatch_sync(v6, v8);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7) {
      (*(void (**)(uint64_t, uint64_t, void))(v7 + 16))(v7, 1, 0);
    }
  }
  _Block_object_dispose(v12, 8);
}

void sub_100033AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_100033AE4(uint64_t a1)
{
  if (qword_1003DB750 != -1) {
    dispatch_once(&qword_1003DB750, &stru_10039F678);
  }
  uint64_t v2 = qword_1003DB758;
  if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CoreAnalytics query completion kTypeCASettings", buf, 2u);
  }
  [*(id *)(a1 + 32) stopTimer];
  id v3 = +[CSPersistentConfiguration sharedConfiguration];
  id v4 = [v3 objectForKey:@"CSKappaCoreAnalyticsDailyInfo"];

  [v4 getBytes:*(void *)(a1 + 32) + 16 length:84];
  [*(id *)(a1 + 40) getBytes:v12 length:8];
  *(unsigned char *)(*(void *)(a1 + 32) + 18) = v12[4];
  *(unsigned char *)(*(void *)(a1 + 32) + 20) = v12[5];
  *(unsigned char *)(*(void *)(a1 + 32) + 30) = v12[6];
  *(unsigned char *)(*(void *)(a1 + 32) + 31) = v12[7];
  uint64_t v5 = [*(id *)(a1 + 32) sendUserInfoToCoreAnalytics];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  [*(id *)(a1 + 32) clearUserInfo];
  uint64_t v8 = +[CSPersistentConfiguration sharedConfiguration];
  id v9 = +[NSDate now];
  [v8 setObject:v9 forKey:@"CSKappaCoreAnalyticsLastSuccessfulUpload"];

  id v10 = +[NSData dataWithBytes:*(void *)(a1 + 32) + 16 length:84];

  [*(id *)(*(void *)(a1 + 32) + 216) setObject:v10 forKey:@"CSKappaCoreAnalyticsDailyInfo"];
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    (*(void (**)(uint64_t, uint64_t, void))(v11 + 16))(v11, 1, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  }
}

void sub_100033CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100033FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100034AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  _Unwind_Resume(a1);
}

id sub_100034D08(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10003502C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100035168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000359EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Unwind_Resume(a1);
}

id sub_100035C08(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100035C84(uint64_t a1)
{
  if (qword_1003DB750 != -1) {
    dispatch_once(&qword_1003DB750, &stru_10039F678);
  }
  uint64_t v1 = qword_1003DB758;
  if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "updatePersistedUserInfo", buf, 2u);
  }
  char v50 = 0;
  *(_DWORD *)long long buf = 0;
  int v51 = -1;
  long long v52 = 0u;
  long long v53 = 0u;
  int32x4_t v54 = 0u;
  long long v55 = 0u;
  uint64_t v56 = 0;
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  __int16 v48 = [v2 objectForKey:@"CSKappaCoreAnalyticsDailyInfo"];

  if (v48)
  {
    if (qword_1003DB750 != -1) {
      dispatch_once(&qword_1003DB750, &stru_10039F678);
    }
    id v3 = qword_1003DB758;
    if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)double v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Valid persisted UserInfo found", v59, 2u);
    }
    [v48 getBytes:buf length:84];
  }
  v61[0] = @"numKappaSessions";
  uint64_t v44 = +[NSNumber numberWithInt:DWORD2(v52)];
  v62[0] = v44;
  v61[1] = @"numKappaEvents";
  __int16 v42 = +[NSNumber numberWithInt:v53];
  v62[1] = v42;
  v61[2] = @"numTriggersAllSessions";
  int v40 = +[NSNumber numberWithInt:DWORD2(v53)];
  v62[2] = v40;
  v61[3] = @"numUISurfaced";
  double v38 = +[NSNumber numberWithInt:v54.u32[0]];
  v62[3] = v38;
  v61[4] = @"numCancelledUI";
  uint64_t v36 = +[NSNumber numberWithInt:v54.u32[2]];
  v62[4] = v36;
  v61[5] = @"numUserRequestedSOS";
  float v34 = +[NSNumber numberWithInt:v55];
  v62[5] = v34;
  v61[6] = @"numAutoRequestedSOS";
  unsigned int v32 = +[NSNumber numberWithInt:DWORD2(v55)];
  v62[6] = v32;
  v61[7] = @"numPlacedCalls";
  id v4 = +[NSNumber numberWithInt:v56];
  v62[7] = v4;
  v61[8] = @"numKappaSessions_companion";
  uint64_t v5 = +[NSNumber numberWithInt:HIDWORD(v52)];
  v62[8] = v5;
  v61[9] = @"numKappaEvents_companion";
  uint64_t v6 = +[NSNumber numberWithInt:DWORD1(v53)];
  v62[9] = v6;
  v61[10] = @"numTriggersAllSessions_companion";
  uint64_t v7 = +[NSNumber numberWithInt:HIDWORD(v53)];
  v62[10] = v7;
  v61[11] = @"numUISurfaced_companion";
  uint64_t v8 = +[NSNumber numberWithInt:v54.u32[1]];
  v62[11] = v8;
  v61[12] = @"numCancelledUI_companion";
  id v9 = +[NSNumber numberWithInt:v54.u32[3]];
  v62[12] = v9;
  v61[13] = @"numUserRequestedSOS_companion";
  id v10 = +[NSNumber numberWithInt:DWORD1(v55)];
  v62[13] = v10;
  v61[14] = @"numAutoRequestedSOS_companion";
  uint64_t v11 = +[NSNumber numberWithInt:HIDWORD(v55)];
  v62[14] = v11;
  v61[15] = @"numPlacedCalls_companion";
  id v12 = +[NSNumber numberWithInt:HIDWORD(v56)];
  v62[15] = v12;
  __int16 v46 = +[NSDictionary dictionaryWithObjects:v62 forKeys:v61 count:16];

  if (qword_1003DB750 != -1) {
    dispatch_once(&qword_1003DB750, &stru_10039F678);
  }
  id v13 = qword_1003DB758;
  if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)double v59 = 138412290;
    __int16 v60 = v46;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Persisted UserInfo:%@", v59, 0xCu);
  }
  uint64_t v14 = *(void *)(a1 + 32);
  int v15 = v53 + *(_DWORD *)(v14 + 44);
  DWORD2(v52) += *(_DWORD *)(v14 + 36);
  LODWORD(v53) = v15;
  DWORD2(v53) += *(_DWORD *)(v14 + 52);
  int v16 = *(_DWORD *)(v14 + 80);
  int v17 = *(_DWORD *)(v14 + 88);
  int v18 = DWORD2(v55) + *(_DWORD *)(v14 + 84);
  LODWORD(v55) = v55 + *(_DWORD *)(v14 + 76);
  DWORD2(v55) = v18;
  int v19 = *(_DWORD *)(v14 + 96);
  LODWORD(v56) = v56 + *(_DWORD *)(v14 + 92);
  int32x4_t v54 = vaddq_s32(v54, *(int32x4_t *)(v14 + 60));
  DWORD1(v55) += v16;
  HIDWORD(v55) += v17;
  HIDWORD(v56) += v19;
  v57[0] = @"numKappaSessions";
  v58[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  v57[1] = @"numKappaEvents";
  int v45 = (void *)v58[0];
  double v43 = +[NSNumber numberWithInt:v53];
  v58[1] = v43;
  v57[2] = @"numTriggersAllSessions";
  unint64_t v41 = +[NSNumber numberWithInt:DWORD2(v53)];
  v58[2] = v41;
  v57[3] = @"numUISurfaced";
  uint64_t v39 = +[NSNumber numberWithInt:v54.u32[0]];
  v58[3] = v39;
  v57[4] = @"numCancelledUI";
  __int16 v37 = +[NSNumber numberWithInt:v54.u32[2]];
  v58[4] = v37;
  v57[5] = @"numUserRequestedSOS";
  __int16 v35 = +[NSNumber numberWithInt:v55];
  v58[5] = v35;
  v57[6] = @"numAutoRequestedSOS";
  int v33 = +[NSNumber numberWithInt:DWORD2(v55)];
  v58[6] = v33;
  v57[7] = @"numPlacedCalls";
  uint64_t v20 = +[NSNumber numberWithInt:v56];
  v58[7] = v20;
  v57[8] = @"numKappaSessions_companion";
  __int16 v21 = +[NSNumber numberWithInt:HIDWORD(v52)];
  v58[8] = v21;
  v57[9] = @"numKappaEvents_companion";
  uint64_t v22 = +[NSNumber numberWithInt:DWORD1(v53)];
  v58[9] = v22;
  v57[10] = @"numTriggersAllSessions_companion";
  uint64_t v23 = +[NSNumber numberWithInt:HIDWORD(v53)];
  v58[10] = v23;
  v57[11] = @"numUISurfaced_companion";
  float v24 = +[NSNumber numberWithInt:v54.u32[1]];
  v58[11] = v24;
  v57[12] = @"numCancelledUI_companion";
  int v25 = +[NSNumber numberWithInt:v54.u32[3]];
  v58[12] = v25;
  v57[13] = @"numUserRequestedSOS_companion";
  int v26 = +[NSNumber numberWithInt:DWORD1(v55)];
  v58[13] = v26;
  v57[14] = @"numAutoRequestedSOS_companion";
  float v27 = +[NSNumber numberWithInt:HIDWORD(v55)];
  v58[14] = v27;
  v57[15] = @"numPlacedCalls_companion";
  int v28 = +[NSNumber numberWithInt:HIDWORD(v56)];
  v58[15] = v28;
  unsigned int v29 = +[NSDictionary dictionaryWithObjects:v58 forKeys:v57 count:16];

  if (qword_1003DB750 != -1) {
    dispatch_once(&qword_1003DB750, &stru_10039F678);
  }
  unint64_t v30 = qword_1003DB758;
  if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)double v59 = 138412290;
    __int16 v60 = v29;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Updated - UserInfo:%@", v59, 0xCu);
  }
  id v31 = [objc_alloc((Class)NSData) initWithBytes:buf length:84];
  [*(id *)(*(void *)(a1 + 32) + 216) setObject:v31 forKey:@"CSKappaCoreAnalyticsDailyInfo"];
  [*(id *)(a1 + 32) clearUserInfo];
}

void sub_10003658C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _Unwind_Exception *exception_object, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100036938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100036BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000370B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100037608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100037680(uint64_t a1)
{
  [*(id *)(a1 + 32) getBytes:&v6 length:12];
  if (qword_1003DB750 != -1) {
    dispatch_once(&qword_1003DB750, &stru_10039F678);
  }
  uint64_t v2 = qword_1003DB758;
  if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67110400;
    int v12 = v6;
    *(_WORD *)id v13 = 1024;
    *(_DWORD *)&int v13[2] = v7;
    *(_WORD *)&v13[6] = 1024;
    *(_DWORD *)&unsigned char v13[8] = v8;
    *(_WORD *)&v13[12] = 1024;
    *(_DWORD *)&v13[14] = HIBYTE(v8);
    *(_WORD *)&v13[18] = 1024;
    LODWORD(v14) = v9;
    WORD2(v14) = 1024;
    *(_DWORD *)((char *)&v14 + 6) = v10;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "receiveLocalKappaSessionInfo didEnableKappaDetection:%d isImproveSafetyEnabled:%d firstPartyEnabled:%d thirdPartyEnabled:%d didDetectKappaEvent:%d numTriggers:%d", buf, 0x26u);
  }
  LOBYTE(v12) = 0;
  *(_DWORD *)long long buf = 0;
  *(_DWORD *)id v13 = -1;
  *(_OWORD *)&v13[4] = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v17 = 0;
  id v3 = +[CSPersistentConfiguration sharedConfiguration];
  id v4 = [v3 objectForKey:@"CSKappaCoreAnalyticsDailyInfo"];

  [v4 getBytes:buf length:84];
  buf[2] = v6;
  LOBYTE(v12) = v7;
  *(_WORD *)&v13[6] = v8;
  ++*(_DWORD *)&v13[16];
  HIDWORD(v14) += v10;
  if (v9) {
    ++DWORD1(v14);
  }
  id v5 = [objc_alloc((Class)NSData) initWithBytes:buf length:84];
  [*(id *)(*(void *)(a1 + 40) + 216) setObject:v5 forKey:@"CSKappaCoreAnalyticsDailyInfo"];
}

void sub_10003788C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100037984(id a1)
{
  qword_1003DB758 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "CoreAnalytics");

  _objc_release_x1();
}

void CLKappaDeescalatorAutocorrelation::CLKappaDeescalatorAutocorrelation(CLKappaDeescalatorAutocorrelation *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  uint64_t v2 = (char *)sub_100007BC0((void *)this + 6, "none");
  *(void *)this = off_10039F6A8;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 76) = 0;
  *((void *)this + 10) = 0x1100000000;
  *((void *)this + 45) = 0x1100000000;
  *((void *)this + 49) = 0x1100000000;
  *((void *)this + 492) = 0x1100000000;
  *((_DWORD *)this + 991) = 0;
  *((_WORD *)this + 1984) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((void *)this + 7) = 5;
    uint64_t v2 = (char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 71) = 5;
  }
  strcpy(v2, "de-AC");
}

uint64_t CLKappaDeescalatorAutocorrelation::assertReady(CLKappaDeescalatorAutocorrelation *this, uint64_t a2, const char *a3)
{
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 76), (BOOL)"[de-AC] missing config", a3);
}

uint64_t CLKappaDeescalatorAutocorrelation::prepareForNextEpoch(uint64_t this)
{
  *(_DWORD *)(this + 3964) = 0;
  *(_WORD *)(this + 3968) = 0;
  return this;
}

uint64_t CLKappaDeescalatorAutocorrelation::setConfig(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (!*(unsigned char *)(result + 76)) {
    *(unsigned char *)(result + 76) = 1;
  }
  *(_DWORD *)(result + 72) = v2;
  return result;
}

void CLKappaDeescalatorAutocorrelation::resetConfiguration(CLKappaDeescalatorAutocorrelation *this)
{
  id v4 = +[CSPersistentConfiguration configBaseKey:"DeescalatorACConfig" forFeatureMode:*((unsigned __int8 *)this + 32)];
  int v2 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned int v3 = [v2 intThreshold:&CLKappaDeescalatorAutocorrelation::kConfigurationDefaults forKey:v4];
  if (!*((unsigned char *)this + 76)) {
    *((unsigned char *)this + 76) = 1;
  }
  *((_DWORD *)this + 18) = v3;
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceAutoCorr");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceAutoCorr");
}

void sub_100037BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLKappaDeescalatorAutocorrelation::log(CLKappaDeescalatorAutocorrelation *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 76)) {
    sub_100007D1C();
  }
  int v4 = *((_DWORD *)this + 991);
  int v5 = *((unsigned __int8 *)this + 3968);
  int v6 = *((unsigned __int8 *)this + 3969);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_10039F728);
  }
  unsigned __int8 v7 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *((_DWORD *)this + 6);
    int v9 = *((unsigned __int8 *)this + 32);
    int v10 = *((_DWORD *)this + 18);
    int v11 = 134350592;
    uint64_t v12 = a2;
    __int16 v13 = 1026;
    int v14 = v8;
    __int16 v15 = 1026;
    int v16 = v9;
    __int16 v17 = 1026;
    int v18 = v10;
    __int16 v19 = 1026;
    int v20 = v4;
    __int16 v21 = 1026;
    int v22 = v6;
    __int16 v23 = 1026;
    int v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[de-AC] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,config-1,%{public}d,debug-1a,%{public}d,debug-1b,%{public}d,debug-1c,%{public}d", (uint8_t *)&v11, 0x30u);
  }
}

uint64_t CLKappaDeescalatorAutocorrelation::updateWithAnyCrashDetected(uint64_t this, char a2)
{
  uint64_t v2 = *(unsigned __int16 *)(this + 362);
  unint64_t v3 = *(unsigned int *)(this + 364);
  uint64_t v4 = *(unsigned __int16 *)(this + 360);
  if (v4 + v2 >= v3) {
    uint64_t v5 = *(unsigned int *)(this + 364);
  }
  else {
    uint64_t v5 = 0;
  }
  *(unsigned char *)(this + 360 + v4 + v2 - v5 + 8) = a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    *(_WORD *)(this + 360) = v4 + 1 - v3;
  }
  else
  {
    *(_WORD *)(this + 362) = v2 + 1;
  }
  return this;
}

unsigned __int16 *CLKappaDeescalatorAutocorrelation::updateWithAutocorrelationFeatures(uint64_t a1, _OWORD *a2)
{
  return sub_100037D54((unsigned __int16 *)(a1 + 80), a2);
}

unsigned __int16 *sub_100037D54(unsigned __int16 *result, _OWORD *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  *(_OWORD *)&result[8 * (v3 - v2) + 4] = *a2;
  unsigned int v4 = result[1];
  unint64_t v5 = *((unsigned int *)result + 1);
  if (v5 <= v4)
  {
    unint64_t v6 = *result + 1;
    if (v6 < v5) {
      LOWORD(v5) = 0;
    }
    *double result = v6 - v5;
  }
  else
  {
    result[1] = v4 + 1;
  }
  return result;
}

unsigned __int16 *CLKappaDeescalatorAutocorrelation::updateWithBaroFeatures(uint64_t a1, _OWORD *a2)
{
  return sub_100037DBC((unsigned __int16 *)(a1 + 392), a2);
}

unsigned __int16 *sub_100037DBC(unsigned __int16 *result, _OWORD *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  unsigned int v4 = &result[104 * (v3 - v2)];
  *(_OWORD *)(v4 + 4) = *a2;
  long long v5 = a2[3];
  long long v6 = a2[4];
  long long v7 = a2[2];
  *(_OWORD *)(v4 + 12) = a2[1];
  *(_OWORD *)(v4 + 36) = v6;
  *(_OWORD *)(v4 + 28) = v5;
  *(_OWORD *)(v4 + 20) = v7;
  long long v8 = a2[7];
  long long v9 = a2[8];
  long long v10 = a2[6];
  *(_OWORD *)(v4 + 44) = a2[5];
  *(_OWORD *)(v4 + 68) = v9;
  *(_OWORD *)(v4 + 60) = v8;
  *(_OWORD *)(v4 + 52) = v10;
  long long v11 = a2[11];
  long long v12 = a2[12];
  long long v13 = a2[10];
  *(_OWORD *)(v4 + 76) = a2[9];
  *(_OWORD *)(v4 + 100) = v12;
  *(_OWORD *)(v4 + 92) = v11;
  *(_OWORD *)(v4 + 84) = v13;
  unsigned int v14 = result[1];
  unint64_t v15 = *((unsigned int *)result + 1);
  if (v15 <= v14)
  {
    unint64_t v16 = *result + 1;
    if (v16 < v15) {
      LOWORD(v15) = 0;
    }
    *double result = v16 - v15;
  }
  else
  {
    result[1] = v14 + 1;
  }
  return result;
}

uint64_t CLKappaDeescalatorAutocorrelation::updateWithHighSpeedCrash(uint64_t this, char a2)
{
  uint64_t v2 = *(unsigned __int16 *)(this + 3938);
  unint64_t v3 = *(unsigned int *)(this + 3940);
  uint64_t v4 = *(unsigned __int16 *)(this + 3936);
  if (v4 + v2 >= v3) {
    uint64_t v5 = *(unsigned int *)(this + 3940);
  }
  else {
    uint64_t v5 = 0;
  }
  *(unsigned char *)(this + 3936 + v4 + v2 - v5 + 8) = a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    *(_WORD *)(this + 3936) = v4 + 1 - v3;
  }
  else
  {
    *(_WORD *)(this + 3938) = v2 + 1;
  }
  return this;
}

uint64_t CLKappaDeescalatorAutocorrelation::getAutocorrelationStats(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (!a1[1]) {
    return 0;
  }
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    if (*(unsigned char *)(sub_100037F58(a1, v4) + 8)
      && (*(unsigned char *)(sub_100037F58(a1, v4) + 9) || !*(unsigned char *)sub_10002C20C(a2, v4)))
    {
      uint64_t v5 = (v5 + 1);
    }
    ++v4;
  }
  while (v4 < a1[1]);
  return v5;
}

uint64_t sub_100037F58(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      int v8 = *((_DWORD *)a1 + 1);
      int v9 = 134218754;
      CFAbsoluteTime v10 = Current;
      __int16 v11 = 2080;
      long long v12 = "const T &CMQueue<CLKappaFeaturesAlgGravityAutoCorrelationOutput>::operator[](const size_t) const [T = CLKapp"
            "aFeaturesAlgGravityAutoCorrelationOutput]";
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 1024;
      int v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  unint64_t v5 = *a1 + a2;
  if (v5 < v4) {
    unint64_t v4 = 0;
  }
  return (uint64_t)&a1[8 * (v5 - v4) + 4];
}

uint64_t CLKappaDeescalatorAutocorrelation::getAirbagDetectedStats(unsigned __int16 *a1)
{
  if (!a1[1]) {
    return 0;
  }
  unint64_t v2 = 0;
  char v3 = 0;
  do
  {
    if (*(unsigned char *)(sub_1000380EC(a1, v2) + 52)) {
      char v3 = 1;
    }
    ++v2;
  }
  while (v2 < a1[1]);
  return v3 & 1;
}

uint64_t sub_1000380EC(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      int v8 = *((_DWORD *)a1 + 1);
      int v9 = 134218754;
      CFAbsoluteTime v10 = Current;
      __int16 v11 = 2080;
      long long v12 = "const T &CMQueue<CLKappaFeaturesAlgBaroOutput>::operator[](const size_t) const [T = CLKappaFeaturesAlgBaroOutput]";
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 1024;
      int v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  unint64_t v5 = *a1 + a2;
  if (v5 < v4) {
    unint64_t v4 = 0;
  }
  return (uint64_t)&a1[104 * (v5 - v4) + 4];
}

uint64_t CLKappaDeescalatorAutocorrelation::onEvaluateAtSecondDeescalationOpportunity(CLKappaDeescalatorAutocorrelation *this)
{
  *((unsigned char *)this + 3968) = CLKappaDeescalatorAutocorrelation::getAirbagDetectedStats((unsigned __int16 *)this + 196);
  *((_DWORD *)this + 991) = CLKappaDeescalatorAutocorrelation::getAutocorrelationStats((unsigned __int16 *)this + 40, (unsigned __int16 *)this + 180);
  int HighSpeedDetectedStats = CLKappaDeescalator::getHighSpeedDetectedStats((unsigned __int16 *)this + 1968);
  *((unsigned char *)this + 3969) = HighSpeedDetectedStats;
  if (!*((unsigned char *)this + 76)) {
    sub_100007D1C();
  }
  if (*((_DWORD *)this + 991) < *((_DWORD *)this + 18)) {
    return 1;
  }
  int v3 = *((unsigned char *)this + 3968) ? 1 : HighSpeedDetectedStats;
  if (v3 == 1) {
    return 1;
  }
  else {
    return 4;
  }
}

_DWORD *CLKappaDeescalatorAutocorrelation::onPreviousEpochMadeDecision(_DWORD *this)
{
  this[20] = 0;
  this[90] = 0;
  this[98] = 0;
  this[984] = 0;
  return this;
}

void sub_1000382B0(void **this)
{
  *this = off_10039F6A8;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_1000382D0(void **a1)
{
  *a1 = off_10039F6A8;
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

void sub_100038324(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

double CLKappaInferencesAlgSevereCrashResult::reset(CLKappaInferencesAlgSevereCrashResult *this)
{
  *((void *)this + 7) = 0;
  uint64_t v1 = (char *)this + 56;
  *(v1 - 48) = 0;
  *((_DWORD *)v1 - 11) = 0;
  *((void *)v1 - 3) = 0;
  *((void *)v1 - 2) = 0;
  *(void *)(v1 - 10) = 0;
  *((void *)v1 + 1) = 0;
  *(void *)(v1 + 13) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(void *)(v1 + 85) = 0;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *(_OWORD *)(v1 + 121) = 0u;
  *((_WORD *)v1 + 88) = 0;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  v1[188] = 0;
  *(void *)(v1 + 180) = 0;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *(void *)(v1 + 222) = 0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 257) = 0u;
  *((_DWORD *)v1 + 69) = 0;
  return result;
}

void CLKappaInferencesAlgSevereCrashResult::log(CLKappaInferencesAlgSevereCrashResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
  }
  unint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *((void *)this + 5);
    int v5 = *((unsigned __int8 *)this + 48);
    int v6 = *((unsigned __int8 *)this + 49);
    int v7 = *((unsigned __int8 *)this + 51);
    int v8 = *((unsigned __int8 *)this + 52);
    int v9 = *((unsigned __int8 *)this + 53);
    double v10 = *((float *)this + 4);
    double v11 = *((float *)this + 5);
    double v12 = *((float *)this + 6);
    double v13 = *((float *)this + 7);
    int v14 = *((unsigned __int8 *)this + 56);
    int v15 = *((unsigned __int8 *)this + 57);
    int v16 = *((unsigned __int8 *)this + 58);
    int v17 = *((unsigned __int8 *)this + 62);
    int v18 = *((unsigned __int8 *)this + 63);
    int v19 = *((unsigned __int8 *)this + 64);
    int v20 = *((unsigned __int8 *)this + 65);
    int v21 = *((unsigned __int8 *)this + 66);
    int v22 = *((unsigned __int8 *)this + 67);
    int v23 = *((unsigned __int8 *)this + 68);
    int v24 = *((unsigned __int8 *)this + 69);
    int v25 = *((unsigned __int8 *)this + 70);
    int v26 = *((unsigned __int8 *)this + 71);
    int v27 = *((unsigned __int8 *)this + 72);
    int v28 = *((unsigned __int8 *)this + 73);
    int v29 = *((unsigned __int8 *)this + 74);
    int v30 = *((unsigned __int8 *)this + 75);
    int v31 = *((unsigned __int8 *)this + 76);
    int v32 = *((unsigned __int8 *)this + 148);
    int v33 = *((_DWORD *)this + 84);
    *(_DWORD *)long long buf = 134356736;
    uint64_t v35 = v3;
    __int16 v36 = 2050;
    uint64_t v37 = v4;
    __int16 v38 = 1026;
    int v39 = v5;
    __int16 v40 = 1026;
    int v41 = v6;
    __int16 v42 = 1026;
    int v43 = v7;
    __int16 v44 = 1026;
    int v45 = v8;
    __int16 v46 = 1026;
    int v47 = v9;
    __int16 v48 = 2050;
    double v49 = v10;
    __int16 v50 = 2050;
    double v51 = v11;
    __int16 v52 = 2050;
    double v53 = v12;
    __int16 v54 = 2050;
    double v55 = v13;
    __int16 v56 = 1026;
    int v57 = v14;
    __int16 v58 = 1026;
    int v59 = v15;
    __int16 v60 = 1026;
    int v61 = v16;
    __int16 v62 = 1026;
    int v63 = v17;
    __int16 v64 = 1026;
    int v65 = v18;
    __int16 v66 = 1026;
    int v67 = v19;
    __int16 v68 = 1026;
    int v69 = v20;
    __int16 v70 = 1026;
    int v71 = v21;
    __int16 v72 = 1026;
    int v73 = v22;
    __int16 v74 = 1026;
    int v75 = v23;
    __int16 v76 = 1026;
    int v77 = v24;
    __int16 v78 = 1026;
    int v79 = v25;
    __int16 v80 = 1026;
    int v81 = v26;
    __int16 v82 = 1026;
    int v83 = v27;
    __int16 v84 = 1026;
    int v85 = v28;
    __int16 v86 = 1026;
    int v87 = v29;
    __int16 v88 = 1026;
    int v89 = v30;
    __int16 v90 = 1026;
    int v91 = v31;
    __int16 v92 = 1026;
    int v93 = v32;
    __int16 v94 = 1026;
    int v95 = v33;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[SC] AlgBlock summary,A,%{public}llu,B,%{public}llu,C,%{public}d,D,%{public}d,E,%{public}d,F,%{public}d,G,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,debug-1a,%{public}u,debug-1b,%{public}u,debug-1c,%{public}u,debug-2a,%{public}u,debug-2b,%{public}u,debug-2c,%{public}u,debug-2d,%{public}u,debug-2e,%{public}u,debug-2f,%{public}u,debug-2g,%{public}u,debug-2h,%{public}u,debug-2i,%{public}u,debug-2j,%{public}u,debug-2k,%{public}u,debug-2l,%{public}u,debug-2m,%{public}u,debug-2n,%{public}u,debug-2o,%{public}u,debug-2p,%{public}u,debug-2o,%{public}u", buf, 0xD4u);
  }
}

void CLKappaInferencesAlgSevereCrash::CLKappaInferencesAlgSevereCrash(CLKappaInferencesAlgSevereCrash *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  uint64_t *v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *(_OWORD *)((char *)this + 28) = 0u;
  *((unsigned char *)this + 504) = 0;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 204) = 0u;
  *(_OWORD *)((char *)this + 220) = 0u;
  *(_OWORD *)((char *)this + 236) = 0u;
  *(_OWORD *)((char *)this + 252) = 0u;
  *(_OWORD *)((char *)this + 268) = 0u;
  *(_OWORD *)((char *)this + 284) = 0u;
  *(_OWORD *)((char *)this + 300) = 0u;
  *(_OWORD *)((char *)this + 316) = 0u;
  *(_OWORD *)((char *)this + 332) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *(_OWORD *)((char *)this + 396) = 0u;
  *(_OWORD *)((char *)this + 412) = 0u;
  *(_OWORD *)((char *)this + 428) = 0u;
  *(_OWORD *)((char *)this + 444) = 0u;
  *(_OWORD *)((char *)this + 460) = 0u;
  *(_OWORD *)((char *)this + 476) = 0u;
  *(void *)((char *)this + 489) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 65) = 0x500000000;
  *((unsigned char *)this + 536) = 0;
  *(void *)((char *)this + 540) = 0;
  *(_DWORD *)((char *)this + 547) = 0;
  sub_10003BC54(&v71);
  int v6 = (std::__shared_weak_count *)*((void *)&v71 + 1);
  unint64_t v7 = v71;
  long long v71 = 0uLL;
  int v8 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = __PAIR128__((unint64_t)v6, v7);
  if (v8)
  {
    sub_10000BB9C(v8);
    if (*((void *)&v71 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
    }
    int v6 = (std::__shared_weak_count *)*((void *)this + 2);
  }
  uint64_t v69 = *((void *)this + 1);
  __int16 v70 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100038EC8((uint64_t)&v69, &v71);
  long long v9 = v71;
  long long v71 = 0uLL;
  double v10 = (std::__shared_weak_count *)*((void *)this + 61);
  *((_OWORD *)this + 30) = v9;
  if (v10)
  {
    sub_10000BB9C(v10);
    if (*((void *)&v71 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
    }
  }
  if (v70) {
    sub_10000BB9C(v70);
  }
  sub_10003BDEC(&v71);
  unint64_t v11 = *((void *)&v71 + 1);
  unint64_t v12 = v71;
  long long v71 = 0uLL;
  double v13 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = __PAIR128__(v11, v12);
  if (v13)
  {
    sub_10000BB9C(v13);
    unint64_t v12 = *((void *)this + 4);
    unint64_t v11 = *((void *)this + 5);
  }
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  int v14 = (std::__shared_weak_count *)*((void *)this + 33);
  *((void *)this + 32) = v12;
  *((void *)this + 33) = v11;
  if (v14) {
    sub_10000BB9C(v14);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003BF30(&v71);
  unint64_t v15 = *((void *)&v71 + 1);
  unint64_t v16 = v71;
  long long v71 = 0uLL;
  int v17 = (std::__shared_weak_count *)*((void *)this + 7);
  *((_OWORD *)this + 3) = __PAIR128__(v15, v16);
  if (v17)
  {
    sub_10000BB9C(v17);
    unint64_t v16 = *((void *)this + 6);
    unint64_t v15 = *((void *)this + 7);
  }
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  int v18 = (std::__shared_weak_count *)*((void *)this + 35);
  *((void *)this + 34) = v16;
  *((void *)this + 35) = v15;
  if (v18) {
    sub_10000BB9C(v18);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003C074(&v71);
  unint64_t v19 = *((void *)&v71 + 1);
  unint64_t v20 = v71;
  long long v71 = 0uLL;
  int v21 = (std::__shared_weak_count *)*((void *)this + 9);
  *((_OWORD *)this + 4) = __PAIR128__(v19, v20);
  if (v21)
  {
    sub_10000BB9C(v21);
    unint64_t v20 = *((void *)this + 8);
    unint64_t v19 = *((void *)this + 9);
  }
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  int v22 = (std::__shared_weak_count *)*((void *)this + 37);
  *((void *)this + 36) = v20;
  *((void *)this + 37) = v19;
  if (v22) {
    sub_10000BB9C(v22);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003C1B8(&v71);
  unint64_t v23 = *((void *)&v71 + 1);
  unint64_t v24 = v71;
  long long v71 = 0uLL;
  int v25 = (std::__shared_weak_count *)*((void *)this + 11);
  *((_OWORD *)this + 5) = __PAIR128__(v23, v24);
  if (v25)
  {
    sub_10000BB9C(v25);
    unint64_t v24 = *((void *)this + 10);
    unint64_t v23 = *((void *)this + 11);
  }
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  int v26 = (std::__shared_weak_count *)*((void *)this + 39);
  *((void *)this + 38) = v24;
  *((void *)this + 39) = v23;
  if (v26) {
    sub_10000BB9C(v26);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003C2FC(&v71);
  unint64_t v27 = *((void *)&v71 + 1);
  unint64_t v28 = v71;
  long long v71 = 0uLL;
  int v29 = (std::__shared_weak_count *)*((void *)this + 13);
  *((_OWORD *)this + 6) = __PAIR128__(v27, v28);
  if (v29)
  {
    sub_10000BB9C(v29);
    unint64_t v28 = *((void *)this + 12);
    unint64_t v27 = *((void *)this + 13);
  }
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  int v30 = (std::__shared_weak_count *)*((void *)this + 41);
  *((void *)this + 40) = v28;
  *((void *)this + 41) = v27;
  if (v30) {
    sub_10000BB9C(v30);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003C440(&v71);
  unint64_t v31 = *((void *)&v71 + 1);
  unint64_t v32 = v71;
  long long v71 = 0uLL;
  int v33 = (std::__shared_weak_count *)*((void *)this + 15);
  *((_OWORD *)this + 7) = __PAIR128__(v31, v32);
  if (v33)
  {
    sub_10000BB9C(v33);
    unint64_t v32 = *((void *)this + 14);
    unint64_t v31 = *((void *)this + 15);
  }
  if (v31) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
  }
  float v34 = (std::__shared_weak_count *)*((void *)this + 43);
  *((void *)this + 42) = v32;
  *((void *)this + 43) = v31;
  if (v34) {
    sub_10000BB9C(v34);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003C584(&v71);
  unint64_t v35 = *((void *)&v71 + 1);
  unint64_t v36 = v71;
  long long v71 = 0uLL;
  uint64_t v37 = (std::__shared_weak_count *)*((void *)this + 17);
  *((_OWORD *)this + 8) = __PAIR128__(v35, v36);
  if (v37)
  {
    sub_10000BB9C(v37);
    unint64_t v36 = *((void *)this + 16);
    unint64_t v35 = *((void *)this + 17);
  }
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v38 = (std::__shared_weak_count *)*((void *)this + 45);
  *((void *)this + 44) = v36;
  *((void *)this + 45) = v35;
  if (v38) {
    sub_10000BB9C(v38);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003C6C8(&v71);
  unint64_t v39 = *((void *)&v71 + 1);
  unint64_t v40 = v71;
  long long v71 = 0uLL;
  int v41 = (std::__shared_weak_count *)*((void *)this + 19);
  *((_OWORD *)this + 9) = __PAIR128__(v39, v40);
  if (v41)
  {
    sub_10000BB9C(v41);
    unint64_t v40 = *((void *)this + 18);
    unint64_t v39 = *((void *)this + 19);
  }
  if (v39) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v42 = (std::__shared_weak_count *)*((void *)this + 47);
  *((void *)this + 46) = v40;
  *((void *)this + 47) = v39;
  if (v42) {
    sub_10000BB9C(v42);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003C80C(&v71);
  unint64_t v43 = *((void *)&v71 + 1);
  unint64_t v44 = v71;
  long long v71 = 0uLL;
  int v45 = (std::__shared_weak_count *)*((void *)this + 21);
  *((_OWORD *)this + 10) = __PAIR128__(v43, v44);
  if (v45)
  {
    sub_10000BB9C(v45);
    unint64_t v44 = *((void *)this + 20);
    unint64_t v43 = *((void *)this + 21);
  }
  if (v43) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v46 = (std::__shared_weak_count *)*((void *)this + 49);
  *((void *)this + 48) = v44;
  *((void *)this + 49) = v43;
  if (v46) {
    sub_10000BB9C(v46);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003C950(&v71);
  unint64_t v47 = *((void *)&v71 + 1);
  unint64_t v48 = v71;
  long long v71 = 0uLL;
  double v49 = (std::__shared_weak_count *)*((void *)this + 23);
  *((_OWORD *)this + 11) = __PAIR128__(v47, v48);
  if (v49)
  {
    sub_10000BB9C(v49);
    unint64_t v48 = *((void *)this + 22);
    unint64_t v47 = *((void *)this + 23);
  }
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v50 = (std::__shared_weak_count *)*((void *)this + 51);
  *((void *)this + 50) = v48;
  *((void *)this + 51) = v47;
  if (v50) {
    sub_10000BB9C(v50);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003CA94(&v71);
  unint64_t v51 = *((void *)&v71 + 1);
  unint64_t v52 = v71;
  long long v71 = 0uLL;
  double v53 = (std::__shared_weak_count *)*((void *)this + 25);
  *((_OWORD *)this + 12) = __PAIR128__(v51, v52);
  if (v53)
  {
    sub_10000BB9C(v53);
    unint64_t v52 = *((void *)this + 24);
    unint64_t v51 = *((void *)this + 25);
  }
  if (v51) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v54 = (std::__shared_weak_count *)*((void *)this + 53);
  *((void *)this + 52) = v52;
  *((void *)this + 53) = v51;
  if (v54) {
    sub_10000BB9C(v54);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003CBD8(&v71);
  unint64_t v55 = *((void *)&v71 + 1);
  unint64_t v56 = v71;
  long long v71 = 0uLL;
  int v57 = (std::__shared_weak_count *)*((void *)this + 27);
  *((_OWORD *)this + 13) = __PAIR128__(v55, v56);
  if (v57)
  {
    sub_10000BB9C(v57);
    unint64_t v56 = *((void *)this + 26);
    unint64_t v55 = *((void *)this + 27);
  }
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v58 = (std::__shared_weak_count *)*((void *)this + 55);
  *((void *)this + 54) = v56;
  *((void *)this + 55) = v55;
  if (v58) {
    sub_10000BB9C(v58);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003CD1C(&v71);
  unint64_t v59 = *((void *)&v71 + 1);
  unint64_t v60 = v71;
  long long v71 = 0uLL;
  int v61 = (std::__shared_weak_count *)*((void *)this + 29);
  *((_OWORD *)this + 14) = __PAIR128__(v59, v60);
  if (v61)
  {
    sub_10000BB9C(v61);
    unint64_t v60 = *((void *)this + 28);
    unint64_t v59 = *((void *)this + 29);
  }
  if (v59) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v62 = (std::__shared_weak_count *)*((void *)this + 57);
  *((void *)this + 56) = v60;
  *((void *)this + 57) = v59;
  if (v62) {
    sub_10000BB9C(v62);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  sub_10003CE60(&v71);
  unint64_t v63 = *((void *)&v71 + 1);
  unint64_t v64 = v71;
  long long v71 = 0uLL;
  int v65 = (std::__shared_weak_count *)*((void *)this + 31);
  *((_OWORD *)this + 15) = __PAIR128__(v63, v64);
  if (v65)
  {
    sub_10000BB9C(v65);
    unint64_t v64 = *((void *)this + 30);
    unint64_t v63 = *((void *)this + 31);
  }
  if (v63) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v66 = (std::__shared_weak_count *)*((void *)this + 59);
  *((void *)this + 58) = v64;
  *((void *)this + 59) = v63;
  if (v66) {
    sub_10000BB9C(v66);
  }
  if (*((void *)&v71 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v71 + 1));
  }
  char v67 = *((unsigned char *)this + 24);
  for (uint64_t i = 256; i != 480; i += 16)
    *(unsigned char *)(*(void *)((char *)this + i) + 32) = v67;
}

void sub_100038DA8(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 61);
  if (v4) {
    sub_10000BB9C(v4);
  }
  uint64_t v5 = 472;
  while (1)
  {
    int v6 = *(std::__shared_weak_count **)((char *)v1 + v5);
    if (v6) {
      sub_10000BB9C(v6);
    }
    v5 -= 16;
    if (v5 == 248)
    {
      unint64_t v7 = (std::__shared_weak_count *)*((void *)v1 + 31);
      if (v7) {
        sub_10000BB9C(v7);
      }
      int v8 = (std::__shared_weak_count *)*((void *)v1 + 29);
      if (v8) {
        sub_10000BB9C(v8);
      }
      long long v9 = (std::__shared_weak_count *)*((void *)v1 + 27);
      if (v9) {
        sub_10000BB9C(v9);
      }
      double v10 = (std::__shared_weak_count *)*((void *)v1 + 25);
      if (v10) {
        sub_10000BB9C(v10);
      }
      unint64_t v11 = (std::__shared_weak_count *)*((void *)v1 + 23);
      if (v11) {
        sub_10000BB9C(v11);
      }
      unint64_t v12 = (std::__shared_weak_count *)*((void *)v1 + 21);
      if (v12) {
        sub_10000BB9C(v12);
      }
      double v13 = (std::__shared_weak_count *)*((void *)v1 + 19);
      if (v13) {
        sub_10000BB9C(v13);
      }
      int v14 = (std::__shared_weak_count *)*((void *)v1 + 17);
      if (v14) {
        sub_10000BB9C(v14);
      }
      unint64_t v15 = (std::__shared_weak_count *)*((void *)v1 + 15);
      if (v15) {
        sub_10000BB9C(v15);
      }
      unint64_t v16 = (std::__shared_weak_count *)*((void *)v1 + 13);
      if (v16) {
        sub_10000BB9C(v16);
      }
      int v17 = (std::__shared_weak_count *)*((void *)v1 + 11);
      if (v17) {
        sub_10000BB9C(v17);
      }
      int v18 = (std::__shared_weak_count *)*((void *)v1 + 9);
      if (v18) {
        sub_10000BB9C(v18);
      }
      unint64_t v19 = (std::__shared_weak_count *)*((void *)v1 + 7);
      if (v19) {
        sub_10000BB9C(v19);
      }
      unint64_t v20 = (std::__shared_weak_count *)*((void *)v1 + 5);
      if (v20) {
        sub_10000BB9C(v20);
      }
      CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
      _Unwind_Resume(a1);
    }
  }
}

void *sub_100038EC8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t CLKappaInferencesAlgSevereCrash::setDeescalatorsMode(uint64_t this)
{
  uint64_t v1 = 0;
  char v2 = *(unsigned char *)(this + 24);
  do
  {
    *(unsigned char *)(*(void *)(this + 256 + v1) + 32) = v2;
    v1 += 16;
  }
  while (v1 != 224);
  return this;
}

void CLKappaInferencesAlgSevereCrash::CLKappaInferencesAlgSevereCrash(CLKappaInferencesAlgSevereCrash *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 69) = off_10039A008;
  *((void *)this + 70) = off_10039A0D0;
  *((void *)this + 71) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10039FD18);
  *(void *)uint64_t v2 = off_10039F7F8;
  *(void *)(v2 + 552) = off_10039FAA8;
  *(void *)(v2 + 560) = off_10039FBE8;
  *(void *)(v2 + 568) = off_10039FCC8;
  *(unsigned char *)(v2 + 504) = 0;
  *(_OWORD *)(v2 + 44) = 0u;
  *(_OWORD *)(v2 + 60) = 0u;
  *(_OWORD *)(v2 + 76) = 0u;
  *(_OWORD *)(v2 + 92) = 0u;
  *(_OWORD *)(v2 + 108) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  *(_OWORD *)(v2 + 140) = 0u;
  *(_OWORD *)(v2 + 156) = 0u;
  *(_OWORD *)(v2 + 172) = 0u;
  *(_OWORD *)(v2 + 188) = 0u;
  *(_OWORD *)(v2 + 204) = 0u;
  *(_OWORD *)(v2 + 220) = 0u;
  *(_OWORD *)(v2 + 236) = 0u;
  *(_OWORD *)(v2 + 252) = 0u;
  *(void *)(v2 + 489) = 0;
  *(_OWORD *)(v2 + 28) = 0u;
  *(_OWORD *)(v2 + 268) = 0u;
  *(_OWORD *)(v2 + 284) = 0u;
  *(_OWORD *)(v2 + 300) = 0u;
  *(_OWORD *)(v2 + 316) = 0u;
  *(_OWORD *)(v2 + 332) = 0u;
  *(_OWORD *)(v2 + 348) = 0u;
  *(_OWORD *)(v2 + 364) = 0u;
  *(_OWORD *)(v2 + 380) = 0u;
  *(_OWORD *)(v2 + 396) = 0u;
  *(_OWORD *)(v2 + 412) = 0u;
  *(_OWORD *)(v2 + 428) = 0u;
  *(_OWORD *)(v2 + 444) = 0u;
  *(_OWORD *)(v2 + 460) = 0u;
  *(_OWORD *)(v2 + 476) = 0u;
  *(void *)(v2 + 512) = 0;
  *(void *)(v2 + 520) = 0x500000000;
  *(unsigned char *)(v2 + 536) = 0;
  *(void *)(v2 + 540) = 0;
  *(_DWORD *)(v2 + 547) = 0;
  sub_10003BC54(&v68);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v68 + 1);
  unint64_t v4 = v68;
  long long v68 = 0uLL;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = __PAIR128__((unint64_t)v3, v4);
  if (v5)
  {
    sub_10000BB9C(v5);
    if (*((void *)&v68 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  }
  uint64_t v66 = *((void *)this + 1);
  char v67 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100038EC8((uint64_t)&v66, &v68);
  long long v6 = v68;
  long long v68 = 0uLL;
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 61);
  *((_OWORD *)this + 30) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    if (*((void *)&v68 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
    }
  }
  if (v67) {
    sub_10000BB9C(v67);
  }
  sub_10003BDEC(&v68);
  unint64_t v8 = *((void *)&v68 + 1);
  unint64_t v9 = v68;
  long long v68 = 0uLL;
  double v10 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = __PAIR128__(v8, v9);
  if (v10)
  {
    sub_10000BB9C(v10);
    unint64_t v9 = *((void *)this + 4);
    unint64_t v8 = *((void *)this + 5);
  }
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 33);
  *((void *)this + 32) = v9;
  *((void *)this + 33) = v8;
  if (v11) {
    sub_10000BB9C(v11);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003BF30(&v68);
  unint64_t v12 = *((void *)&v68 + 1);
  unint64_t v13 = v68;
  long long v68 = 0uLL;
  int v14 = (std::__shared_weak_count *)*((void *)this + 7);
  *((_OWORD *)this + 3) = __PAIR128__(v12, v13);
  if (v14)
  {
    sub_10000BB9C(v14);
    unint64_t v13 = *((void *)this + 6);
    unint64_t v12 = *((void *)this + 7);
  }
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v15 = (std::__shared_weak_count *)*((void *)this + 35);
  *((void *)this + 34) = v13;
  *((void *)this + 35) = v12;
  if (v15) {
    sub_10000BB9C(v15);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003C074(&v68);
  unint64_t v16 = *((void *)&v68 + 1);
  unint64_t v17 = v68;
  long long v68 = 0uLL;
  int v18 = (std::__shared_weak_count *)*((void *)this + 9);
  *((_OWORD *)this + 4) = __PAIR128__(v16, v17);
  if (v18)
  {
    sub_10000BB9C(v18);
    unint64_t v17 = *((void *)this + 8);
    unint64_t v16 = *((void *)this + 9);
  }
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = (std::__shared_weak_count *)*((void *)this + 37);
  *((void *)this + 36) = v17;
  *((void *)this + 37) = v16;
  if (v19) {
    sub_10000BB9C(v19);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003C1B8(&v68);
  unint64_t v20 = *((void *)&v68 + 1);
  unint64_t v21 = v68;
  long long v68 = 0uLL;
  int v22 = (std::__shared_weak_count *)*((void *)this + 11);
  *((_OWORD *)this + 5) = __PAIR128__(v20, v21);
  if (v22)
  {
    sub_10000BB9C(v22);
    unint64_t v21 = *((void *)this + 10);
    unint64_t v20 = *((void *)this + 11);
  }
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = (std::__shared_weak_count *)*((void *)this + 39);
  *((void *)this + 38) = v21;
  *((void *)this + 39) = v20;
  if (v23) {
    sub_10000BB9C(v23);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003C2FC(&v68);
  unint64_t v24 = *((void *)&v68 + 1);
  unint64_t v25 = v68;
  long long v68 = 0uLL;
  int v26 = (std::__shared_weak_count *)*((void *)this + 13);
  *((_OWORD *)this + 6) = __PAIR128__(v24, v25);
  if (v26)
  {
    sub_10000BB9C(v26);
    unint64_t v25 = *((void *)this + 12);
    unint64_t v24 = *((void *)this + 13);
  }
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v27 = (std::__shared_weak_count *)*((void *)this + 41);
  *((void *)this + 40) = v25;
  *((void *)this + 41) = v24;
  if (v27) {
    sub_10000BB9C(v27);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003C440(&v68);
  unint64_t v28 = *((void *)&v68 + 1);
  unint64_t v29 = v68;
  long long v68 = 0uLL;
  int v30 = (std::__shared_weak_count *)*((void *)this + 15);
  *((_OWORD *)this + 7) = __PAIR128__(v28, v29);
  if (v30)
  {
    sub_10000BB9C(v30);
    unint64_t v29 = *((void *)this + 14);
    unint64_t v28 = *((void *)this + 15);
  }
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v31 = (std::__shared_weak_count *)*((void *)this + 43);
  *((void *)this + 42) = v29;
  *((void *)this + 43) = v28;
  if (v31) {
    sub_10000BB9C(v31);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003C584(&v68);
  unint64_t v32 = *((void *)&v68 + 1);
  unint64_t v33 = v68;
  long long v68 = 0uLL;
  float v34 = (std::__shared_weak_count *)*((void *)this + 17);
  *((_OWORD *)this + 8) = __PAIR128__(v32, v33);
  if (v34)
  {
    sub_10000BB9C(v34);
    unint64_t v33 = *((void *)this + 16);
    unint64_t v32 = *((void *)this + 17);
  }
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v35 = (std::__shared_weak_count *)*((void *)this + 45);
  *((void *)this + 44) = v33;
  *((void *)this + 45) = v32;
  if (v35) {
    sub_10000BB9C(v35);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003C6C8(&v68);
  unint64_t v36 = *((void *)&v68 + 1);
  unint64_t v37 = v68;
  long long v68 = 0uLL;
  __int16 v38 = (std::__shared_weak_count *)*((void *)this + 19);
  *((_OWORD *)this + 9) = __PAIR128__(v36, v37);
  if (v38)
  {
    sub_10000BB9C(v38);
    unint64_t v37 = *((void *)this + 18);
    unint64_t v36 = *((void *)this + 19);
  }
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v39 = (std::__shared_weak_count *)*((void *)this + 47);
  *((void *)this + 46) = v37;
  *((void *)this + 47) = v36;
  if (v39) {
    sub_10000BB9C(v39);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003C80C(&v68);
  unint64_t v40 = *((void *)&v68 + 1);
  unint64_t v41 = v68;
  long long v68 = 0uLL;
  __int16 v42 = (std::__shared_weak_count *)*((void *)this + 21);
  *((_OWORD *)this + 10) = __PAIR128__(v40, v41);
  if (v42)
  {
    sub_10000BB9C(v42);
    unint64_t v41 = *((void *)this + 20);
    unint64_t v40 = *((void *)this + 21);
  }
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v43 = (std::__shared_weak_count *)*((void *)this + 49);
  *((void *)this + 48) = v41;
  *((void *)this + 49) = v40;
  if (v43) {
    sub_10000BB9C(v43);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003C950(&v68);
  unint64_t v44 = *((void *)&v68 + 1);
  unint64_t v45 = v68;
  long long v68 = 0uLL;
  __int16 v46 = (std::__shared_weak_count *)*((void *)this + 23);
  *((_OWORD *)this + 11) = __PAIR128__(v44, v45);
  if (v46)
  {
    sub_10000BB9C(v46);
    unint64_t v45 = *((void *)this + 22);
    unint64_t v44 = *((void *)this + 23);
  }
  if (v44) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v47 = (std::__shared_weak_count *)*((void *)this + 51);
  *((void *)this + 50) = v45;
  *((void *)this + 51) = v44;
  if (v47) {
    sub_10000BB9C(v47);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003CA94(&v68);
  unint64_t v48 = *((void *)&v68 + 1);
  unint64_t v49 = v68;
  long long v68 = 0uLL;
  __int16 v50 = (std::__shared_weak_count *)*((void *)this + 25);
  *((_OWORD *)this + 12) = __PAIR128__(v48, v49);
  if (v50)
  {
    sub_10000BB9C(v50);
    unint64_t v49 = *((void *)this + 24);
    unint64_t v48 = *((void *)this + 25);
  }
  if (v48) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v51 = (std::__shared_weak_count *)*((void *)this + 53);
  *((void *)this + 52) = v49;
  *((void *)this + 53) = v48;
  if (v51) {
    sub_10000BB9C(v51);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003CBD8(&v68);
  unint64_t v52 = *((void *)&v68 + 1);
  unint64_t v53 = v68;
  long long v68 = 0uLL;
  __int16 v54 = (std::__shared_weak_count *)*((void *)this + 27);
  *((_OWORD *)this + 13) = __PAIR128__(v52, v53);
  if (v54)
  {
    sub_10000BB9C(v54);
    unint64_t v53 = *((void *)this + 26);
    unint64_t v52 = *((void *)this + 27);
  }
  if (v52) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = (std::__shared_weak_count *)*((void *)this + 55);
  *((void *)this + 54) = v53;
  *((void *)this + 55) = v52;
  if (v55) {
    sub_10000BB9C(v55);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003CD1C(&v68);
  unint64_t v56 = *((void *)&v68 + 1);
  unint64_t v57 = v68;
  long long v68 = 0uLL;
  __int16 v58 = (std::__shared_weak_count *)*((void *)this + 29);
  *((_OWORD *)this + 14) = __PAIR128__(v56, v57);
  if (v58)
  {
    sub_10000BB9C(v58);
    unint64_t v57 = *((void *)this + 28);
    unint64_t v56 = *((void *)this + 29);
  }
  if (v56) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v59 = (std::__shared_weak_count *)*((void *)this + 57);
  *((void *)this + 56) = v57;
  *((void *)this + 57) = v56;
  if (v59) {
    sub_10000BB9C(v59);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  sub_10003CE60(&v68);
  unint64_t v60 = *((void *)&v68 + 1);
  unint64_t v61 = v68;
  long long v68 = 0uLL;
  __int16 v62 = (std::__shared_weak_count *)*((void *)this + 31);
  *((_OWORD *)this + 15) = __PAIR128__(v60, v61);
  if (v62)
  {
    sub_10000BB9C(v62);
    unint64_t v61 = *((void *)this + 30);
    unint64_t v60 = *((void *)this + 31);
  }
  if (v60) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v63 = (std::__shared_weak_count *)*((void *)this + 59);
  *((void *)this + 58) = v61;
  *((void *)this + 59) = v60;
  if (v63) {
    sub_10000BB9C(v63);
  }
  if (*((void *)&v68 + 1)) {
    sub_10000BB9C(*((std::__shared_weak_count **)&v68 + 1));
  }
  char v64 = *((unsigned char *)this + 24);
  for (uint64_t i = 256; i != 480; i += 16)
    *(unsigned char *)(*(void *)((char *)this + i) + 32) = v64;
}

void sub_100039670(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 61);
  if (v3) {
    sub_10000BB9C(v3);
  }
  uint64_t v4 = 472;
  while (1)
  {
    uint64_t v5 = *(std::__shared_weak_count **)((char *)v1 + v4);
    if (v5) {
      sub_10000BB9C(v5);
    }
    v4 -= 16;
    if (v4 == 248)
    {
      long long v6 = (std::__shared_weak_count *)*((void *)v1 + 31);
      if (v6) {
        sub_10000BB9C(v6);
      }
      unint64_t v7 = (std::__shared_weak_count *)*((void *)v1 + 29);
      if (v7) {
        sub_10000BB9C(v7);
      }
      unint64_t v8 = (std::__shared_weak_count *)*((void *)v1 + 27);
      if (v8) {
        sub_10000BB9C(v8);
      }
      unint64_t v9 = (std::__shared_weak_count *)*((void *)v1 + 25);
      if (v9) {
        sub_10000BB9C(v9);
      }
      double v10 = (std::__shared_weak_count *)*((void *)v1 + 23);
      if (v10) {
        sub_10000BB9C(v10);
      }
      unint64_t v11 = (std::__shared_weak_count *)*((void *)v1 + 21);
      if (v11) {
        sub_10000BB9C(v11);
      }
      unint64_t v12 = (std::__shared_weak_count *)*((void *)v1 + 19);
      if (v12) {
        sub_10000BB9C(v12);
      }
      unint64_t v13 = (std::__shared_weak_count *)*((void *)v1 + 17);
      if (v13) {
        sub_10000BB9C(v13);
      }
      int v14 = (std::__shared_weak_count *)*((void *)v1 + 15);
      if (v14) {
        sub_10000BB9C(v14);
      }
      unint64_t v15 = (std::__shared_weak_count *)*((void *)v1 + 13);
      if (v15) {
        sub_10000BB9C(v15);
      }
      unint64_t v16 = (std::__shared_weak_count *)*((void *)v1 + 11);
      if (v16) {
        sub_10000BB9C(v16);
      }
      unint64_t v17 = (std::__shared_weak_count *)*((void *)v1 + 9);
      if (v17) {
        sub_10000BB9C(v17);
      }
      int v18 = (std::__shared_weak_count *)*((void *)v1 + 7);
      if (v18) {
        sub_10000BB9C(v18);
      }
      unint64_t v19 = (std::__shared_weak_count *)*((void *)v1 + 5);
      if (v19) {
        sub_10000BB9C(v19);
      }
      CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10039FD18);
      _Unwind_Resume(a1);
    }
  }
}

void CLKappaInferencesAlgSevereCrash::resetConfiguration(CLKappaInferencesAlgSevereCrash *this)
{
  id v20 = +[CSPersistentConfiguration configBaseKey:"InferencesAlgSCConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 3.0;
  LODWORD(v4) = 15.0;
  LODWORD(v5) = 1142308864;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v20 withMinValue:v3 maxValue:v5 defaultValue:v4];
  LODWORD(v21) = v6;
  LODWORD(v7) = 1110704128;
  LODWORD(v8) = 3.0;
  LODWORD(v9) = 1142308864;
  [v2 algorithmThresholdNumber:1 inArrayForKey:v20 withMinValue:v8 maxValue:v9 defaultValue:v7];
  DWORD1(v21) = v10;
  LODWORD(v11) = 10.0;
  LODWORD(v12) = 1142308864;
  [v2 algorithmThresholdNumber:2 inArrayForKey:v20 withMinValue:0.0 maxValue:v12 defaultValue:v11];
  DWORD2(v21) = v13;
  LODWORD(v14) = 3.0;
  LODWORD(v15) = 25.0;
  LODWORD(v16) = 1142308864;
  [v2 algorithmThresholdNumber:3 inArrayForKey:v20 withMinValue:v14 maxValue:v16 defaultValue:v15];
  HIDWORD(v21) = v17;
  for (uint64_t i = 256; i != 480; i += 16)
    (*(void (**)(void))(**(void **)((char *)this + i) + 16))(*(void *)((char *)this + i));
  unint64_t v19 = [v2 objectForKey:@"ForceLowSenseDetected"];
  if (v19) {
    *((_WORD *)this + 259) = (unsigned __int16)[v2 BOOLForKey:@"ForceLowSenseDetected"] | 0x100;
  }
  CLKappaInferencesAlgSevereCrash::setConfig((uint64_t)this, &v21);
}

void sub_100039918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLKappaInferencesAlgSevereCrash::setConfig(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(*(void *)(a1 + 480) + 16) = *a2;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
  }
  double v3 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *(float **)(a1 + 480);
    double v6 = v5[4];
    double v7 = v5[5];
    double v8 = v5[6];
    double v9 = v5[7];
    int v10 = 134218752;
    double v11 = v6;
    __int16 v12 = 2048;
    double v13 = v7;
    __int16 v14 = 2048;
    double v15 = v8;
    __int16 v16 = 2048;
    double v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[SC] config, %f, %f, %f, %f", (uint8_t *)&v10, 0x2Au);
  }
  return result;
}

_DWORD *CLKappaInferencesAlgSevereCrash::reset(CLKappaInferencesAlgSevereCrash *this)
{
  (*(void (**)(void))(**((void **)this + 60) + 24))(*((void *)this + 60));
  if (*((unsigned char *)this + 504)) {
    *((unsigned char *)this + 504) = 0;
  }
  *((_DWORD *)this + 7) = 0;
  uint64_t v2 = (char *)this + 28;
  *((_DWORD *)v2 + 121) = 0;
  *((_WORD *)v2 + 244) = 0;
  double result = CLKappaDeescalationDecision::reset(v2);
  *((_DWORD *)v2 + 123) = 0;
  v2[508] = 0;
  return result;
}

void CLKappaInferencesAlgSevereCrash::epochFinalize(CLKappaInferencesAlgSevereCrash *this, uint64_t a2)
{
  double v4 = (int *)((char *)this + 28);
  int isDecidedForOption = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 7));
  if (isDecidedForOption)
  {
    for (uint64_t i = 0; i != 224; i += 16)
      CLKappaDeescalator::previousEpochMadeDecision(*(CLKappaDeescalator **)((char *)this + i + 256));
    if (*((unsigned char *)this + 504)) {
      *((unsigned char *)this + 504) = 0;
    }
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
  }
  double v7 = (id)qword_1003DB6A8;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v115 = isDecidedForOption;
    int v105 = *((unsigned __int8 *)this + 549);
    int v106 = *((unsigned __int8 *)this + 545);
    int v107 = *((unsigned __int8 *)this + 546);
    int v109 = *((unsigned __int8 *)this + 547);
    int v110 = *((unsigned __int8 *)this + 548);
    int v111 = *((unsigned __int8 *)this + 513);
    int v112 = *((unsigned __int8 *)this + 514);
    int v113 = *((unsigned __int8 *)this + 515);
    int v108 = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 7));
    BOOL shouldDeescalateForOption = CLKappaDeescalator::shouldDeescalateForOption(*v4);
    int v103 = CLKappaDeescalator::isDecidedForOption(*(_DWORD *)(*((void *)this + 18) + 24));
    int v8 = CLKappaDeescalator::isDecidedForOption(*(_DWORD *)(*((void *)this + 10) + 24));
    int v9 = CLKappaDeescalator::isDecidedForOption(*(_DWORD *)(*((void *)this + 6) + 24));
    int v10 = CLKappaDeescalator::isDecidedForOption(*(_DWORD *)(*((void *)this + 20) + 24));
    int v11 = CLKappaDeescalator::isDecidedForOption(*(_DWORD *)(*((void *)this + 24) + 24));
    int v12 = CLKappaDeescalator::isDecidedForOption(*(_DWORD *)(*((void *)this + 26) + 24));
    int v13 = CLKappaDeescalator::isDecidedForOption(*(_DWORD *)(*((void *)this + 28) + 24));
    int v14 = CLKappaDeescalator::isDecidedForOption(*(_DWORD *)(*((void *)this + 30) + 24));
    int v15 = *((unsigned __int8 *)this + 550);
    *(_DWORD *)long long buf = 67113728;
    BOOL v117 = v105;
    __int16 v118 = 1024;
    *(_DWORD *)int v119 = v106;
    *(_WORD *)&v119[4] = 1024;
    *(_DWORD *)&v119[6] = v107;
    __int16 v120 = 1024;
    int v121 = v109;
    __int16 v122 = 1024;
    int v123 = v110;
    __int16 v124 = 1024;
    int v125 = v111;
    __int16 v126 = 1024;
    int v127 = v112;
    __int16 v128 = 1024;
    int v129 = v113;
    __int16 v130 = 1024;
    int v131 = v108;
    __int16 v132 = 1024;
    BOOL v133 = shouldDeescalateForOption;
    __int16 v134 = 1024;
    int v135 = v103;
    __int16 v136 = 1024;
    int v137 = v8;
    __int16 v138 = 1024;
    int v139 = v9;
    __int16 v140 = 1024;
    int v141 = v10;
    __int16 v142 = 1024;
    int v143 = v11;
    __int16 v144 = 1024;
    int v145 = v12;
    __int16 v146 = 1024;
    int v147 = v13;
    __int16 v148 = 1024;
    int v149 = v14;
    __int16 v150 = 1024;
    int v151 = v15;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[SC] force %d %d %d %d %d is %d %d %d %d %d %d %d %d %d %d %d %d %d %d", buf, 0x74u);
    int isDecidedForOption = v115;
  }

  CLKappaDeescalationDecision::reset(v4);
  if (*((unsigned char *)this + 513)) {
    BOOL v16 = 1;
  }
  else {
    BOOL v16 = *((unsigned char *)this + 514) != 0;
  }
  double v17 = (_WORD *)((char *)this + 520);
  if (*((unsigned char *)this + 516)) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = *((unsigned char *)this + 517) != 0;
  }
  uint64_t v19 = *((unsigned __int16 *)this + 261);
  unint64_t v20 = *((unsigned int *)this + 131);
  uint64_t v21 = *((unsigned __int16 *)this + 260);
  if (v21 + v19 >= v20) {
    uint64_t v22 = *((unsigned int *)this + 131);
  }
  else {
    uint64_t v22 = 0;
  }
  *((unsigned char *)v17 + v21 + v19 - v22 + 8) = v18;
  if (v20 <= v19)
  {
    if (v21 + 1 < v20) {
      LOWORD(v20) = 0;
    }
    *double v17 = v21 + 1 - v20;
  }
  else
  {
    *((_WORD *)this + 261) = v19 + 1;
  }
  unint64_t v23 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned __int16 v24 = (unsigned __int16)[v23 getBooleanDefault:@"KappaForceEarlyCrashInSevereBlock"];
  if (v24 < 0x100u || !(_BYTE)v24 || *((unsigned char *)this + 504) || *((unsigned char *)this + 544))
  {
    if (!v16)
    {
      BOOL v27 = 0;
      goto LABEL_56;
    }
  }
  else
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
    }
    unint64_t v53 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "[SC] punch thru forcing early crash decision", buf, 2u);
    }

    *((void *)this + 62) = a2;
    *((unsigned char *)this + 504) = 1;
    *((unsigned char *)this + 544) = 1;
  }
  *((_DWORD *)this + 135) = 0;
  if (*((_WORD *)this + 261))
  {
    unint64_t v25 = 0;
    while (!*(unsigned char *)sub_10002C20C((unsigned __int16 *)this + 260, v25))
    {
      if (++v25 >= *((unsigned __int16 *)this + 261)) {
        goto LABEL_33;
      }
    }
    int v26 = 1;
  }
  else
  {
LABEL_33:
    int v26 = 0;
  }
  if (*((unsigned char *)this + 519))
  {
    if (*((unsigned char *)this + 518))
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
      }
      unint64_t v28 = (id)qword_1003DB6A8;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "[SC] force low sense high", buf, 2u);
      }
      int v26 = 1;
    }
    else
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
      }
      unint64_t v28 = (id)qword_1003DB6A8;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "[SC] force low sense low", buf, 2u);
      }
      int v26 = 0;
    }
  }
  BOOL v27 = v26 != 0;
  sub_100006DBC(*((void *)this + 22), v26);
  uint64_t v29 = 0;
  *((void *)this + 62) = a2;
  *((unsigned char *)this + 504) = 1;
  do
  {
    CLKappaDeescalator::earlyCrashDetected(*(CLKappaDeescalator **)((char *)this + v29 + 256), a2);
    v29 += 16;
  }
  while (v29 != 224);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
  }
  int v30 = (id)qword_1003DB6A8;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109376;
    BOOL v117 = v16;
    __int16 v118 = 2048;
    *(void *)int v119 = a2;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "[SC] anyCrashDetectorDecision:%d, crashTimestamp:%llu", buf, 0x12u);
  }

LABEL_56:
  CLKappaDeescalatorAutocorrelation::updateWithAnyCrashDetected(*((void *)this + 6), v16);
  if (isDecidedForOption)
  {
    *(_WORD *)((char *)this + 513) = 0;
    if (*((unsigned char *)this + 504)) {
      *((unsigned char *)this + 504) = 0;
    }
    char v31 = 0;
    char v32 = 0;
    unint64_t v33 = (uint64_t *)((char *)this + 496);
    goto LABEL_119;
  }
  char v31 = *((unsigned char *)this + 504);
  unint64_t v33 = (uint64_t *)((char *)this + 496);
  if (!v31) {
    goto LABEL_118;
  }
  uint64_t v34 = *((void *)this + 62);
  CLKappaDeescalatorStaticGps::updateCountTotal(*((void *)this + 16));
  float v35 = (double)(unint64_t)(a2 - v34) * 0.000001;
  unint64_t v36 = (float *)*((void *)this + 60);
  if (v36[6] < v35)
  {
    CLKappaDeescalatorMovingGps::updateCountTotal(*((void *)this + 8));
    unint64_t v36 = (float *)*((void *)this + 60);
  }
  if (v36[4] >= v35)
  {
    char v32 = 0;
    char v31 = 1;
    goto LABEL_119;
  }
  if (v36[5] <= v35)
  {
    __int16 v114 = v23;
    uint64_t v46 = 0;
    while (1)
    {
      int v47 = CLKappaDeescalator::evaluateAtBoundary(*(CLKappaDeescalator **)((char *)this + v46 + 256));
      CLKappaDeescalationDecision::update(v4, v47);
      if (v47 == 3) {
        break;
      }
      if (v47 == 2)
      {
        if (qword_1003DB6A0 != -1) {
          dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
        }
        unint64_t v48 = qword_1003DB6A8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "two-level feed is escalation candidate", buf, 2u);
        }
        char v49 = 1;
        *(unsigned char *)(*((void *)this + 60) + 148) = 1;
LABEL_99:
        sub_100006DC4(*((void *)this + 22), v49);
      }
      v46 += 16;
      if (v46 == 224)
      {
        unint64_t v23 = v114;
        unint64_t v33 = (uint64_t *)((char *)this + 496);
        if (*((unsigned char *)this + 544) && (CLKappaDeescalator::isDecidedForOption(*v4) & 1) == 0) {
          CLKappaDeescalationDecision::update(v4, 5);
        }
        uint64_t v51 = CLKappaDeescalator::isDecidedForOption(*v4);
        CLKappaDeescalator::raiseUnless(v51, (BOOL)"[SC] Reached boundary condition but made no decision", v52);
        char v32 = 1;
        goto LABEL_119;
      }
    }
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
    }
    __int16 v50 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "two-level feed is no longer escalation candidate", buf, 2u);
    }
    char v49 = 0;
    goto LABEL_99;
  }
  if (!*((_DWORD *)this + 135))
  {
    for (uint64_t j = 0; j != 224; j += 16)
    {
      int v38 = CLKappaDeescalator::evaluateAtMinHoldDuration(*(CLKappaDeescalator **)((char *)this + j + 256));
      CLKappaDeescalationDecision::update(v4, v38);
    }
    *((_DWORD *)this + 135) = 1;
  }
  BOOL v39 = v27;
  uint64_t v40 = 0;
  unint64_t v41 = (char *)this + 256;
  do
  {
    int v42 = CLKappaDeescalator::evaluateBetweenMinAndMaxHoldDuration(*(CLKappaDeescalator **)&v41[v40]);
    CLKappaDeescalationDecision::update(v4, v42);
    if (v42 == 3)
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
      }
      unint64_t v45 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "two-level feed is no longer escalation candidate", buf, 2u);
      }
      char v44 = 0;
    }
    else
    {
      if (v42 != 2) {
        goto LABEL_83;
      }
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
      }
      unint64_t v43 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "two-level feed is escalation candidate", buf, 2u);
      }
      char v44 = 1;
      *(unsigned char *)(*((void *)this + 60) + 148) = 1;
    }
    sub_100006DC4(*((void *)this + 22), v44);
LABEL_83:
    v40 += 16;
  }
  while (v40 != 224);
  uint64_t v54 = *((void *)this + 60);
  BOOL v27 = v39;
  unint64_t v33 = (uint64_t *)((char *)this + 496);
  if ((*(float *)(v54 + 28) < v35 || *(unsigned char *)(v54 + 148)) && *((_DWORD *)this + 135) == 1)
  {
    for (uint64_t k = 0; k != 224; k += 16)
    {
      int v56 = CLKappaDeescalator::evaluateAtSecondDeescalationOpportunity(*(CLKappaDeescalator **)&v41[k]);
      CLKappaDeescalationDecision::update(v4, v56);
    }
    *((_DWORD *)this + 135) = 2;
  }
  if (*((unsigned char *)this + 548))
  {
    CLKappaDeescalationDecision::update(v4, 4);
    char v32 = 0;
    *((unsigned char *)this + 548) = 0;
    goto LABEL_119;
  }
LABEL_118:
  char v32 = 0;
LABEL_119:
  if (CLKappaDeescalator::isDecidedForOption(*v4))
  {
    if (*((unsigned char *)this + 549))
    {
      CLKappaDeescalationDecision::update(v4, 5);
      *((unsigned char *)this + 549) = 0;
    }
    if (sub_10003AC7C((unsigned int *)v4))
    {
      for (uint64_t m = 0; m != 224; m += 16)
      {
        int v58 = CLKappaDeescalator::evaluateFollowingEscalation(*(CLKappaDeescalator **)((char *)this + m + 256));
        CLKappaDeescalationDecision::update(v4, v58);
      }
    }
    int v59 = sub_10003AC7C((unsigned int *)v4);
    BOOL v60 = (v59 & 1) == 0 && *(unsigned char *)(*((void *)this + 60) + 148) != 0;
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
    }
    unint64_t v61 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      BOOL v117 = v59;
      __int16 v118 = 1026;
      *(_DWORD *)int v119 = v60;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "[SC] de %{public}d suppress %{public}d", buf, 0xEu);
    }
  }
  else
  {
    LOBYTE(v59) = 0;
    LOBYTE(v60) = 0;
  }
  uint64_t v62 = *((void *)this + 60);
  *(void *)(v62 + 32) = a2;
  *(unsigned char *)(v62 + 48) = v59;
  if (*((unsigned char *)this + 504)) {
    uint64_t v63 = *v33;
  }
  else {
    uint64_t v63 = 0;
  }
  *(void *)(v62 + 40) = v63;
  *(unsigned char *)(v62 + 49) = v31;
  *(unsigned char *)(v62 + 50) = *((unsigned char *)this + 536);
  *(unsigned char *)(*((void *)this + 60) + 51) = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 7));
  BOOL v64 = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 7));
  uint64_t v65 = *((void *)this + 60);
  *(unsigned char *)(v65 + 52) = v64;
  *(_DWORD *)(v65 + 140) = CLKappaDeescalator::fFaultCounter;
  *(unsigned char *)(v65 + 76) = v32;
  *(unsigned char *)(v65 + 53) = v60;
  *(_DWORD *)(v65 + 56) = *(_DWORD *)((char *)this + 513);
  *(unsigned char *)(v65 + 60) = *((unsigned char *)this + 517);
  *(unsigned char *)(v65 + 61) = v27;
  *(_DWORD *)(*((void *)this + 60) + 144) = sub_100006DD4(*((unsigned char **)this + 22));
  *(unsigned char *)(*((void *)this + 60) + 62) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 4) + 24));
  *(unsigned char *)(*((void *)this + 60) + 63) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 6) + 24));
  *(unsigned char *)(*((void *)this + 60) + 64) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 8) + 24));
  *(unsigned char *)(*((void *)this + 60) + 65) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 10) + 24));
  *(unsigned char *)(*((void *)this + 60) + 66) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 12) + 24));
  *(unsigned char *)(*((void *)this + 60) + 67) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 14) + 24));
  *(unsigned char *)(*((void *)this + 60) + 68) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 16) + 24));
  *(unsigned char *)(*((void *)this + 60) + 69) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 18) + 24));
  *(unsigned char *)(*((void *)this + 60) + 70) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 20) + 24));
  *(unsigned char *)(*((void *)this + 60) + 71) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 22) + 24));
  *(unsigned char *)(*((void *)this + 60) + 72) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 24) + 24));
  *(unsigned char *)(*((void *)this + 60) + 73) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 26) + 24));
  *(unsigned char *)(*((void *)this + 60) + 74) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 28) + 24));
  BOOL v66 = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 30) + 24));
  uint64_t v67 = *((void *)this + 60);
  *(unsigned char *)(v67 + 75) = v66;
  *(_DWORD *)(v67 + 80) = *(_DWORD *)(*((void *)this + 4) + 28) != 0;
  *(_DWORD *)(v67 + 84) = *(_DWORD *)(*((void *)this + 6) + 28) != 0;
  *(_DWORD *)(v67 + 88) = *(_DWORD *)(*((void *)this + 8) + 28) != 0;
  *(_DWORD *)(v67 + 92) = *(_DWORD *)(*((void *)this + 10) + 28) != 0;
  *(_DWORD *)(v67 + 96) = *(_DWORD *)(*((void *)this + 12) + 28) != 0;
  *(_DWORD *)(v67 + 100) = *(_DWORD *)(*((void *)this + 14) + 28) != 0;
  *(_DWORD *)(v67 + 104) = *(_DWORD *)(*((void *)this + 16) + 28) != 0;
  *(_DWORD *)(v67 + 108) = *(_DWORD *)(*((void *)this + 18) + 28) != 0;
  *(_DWORD *)(v67 + 112) = *(_DWORD *)(*((void *)this + 20) + 28) != 0;
  *(_DWORD *)(v67 + 120) = *(_DWORD *)(*((void *)this + 24) + 28) != 0;
  *(_DWORD *)(v67 + 124) = *(_DWORD *)(*((void *)this + 26) + 28) != 0;
  *(_DWORD *)(v67 + 128) = *(_DWORD *)(*((void *)this + 28) + 28) != 0;
  *(_DWORD *)(v67 + 132) = *(_DWORD *)(*((void *)this + 30) + 28) != 0;
  uint64_t v68 = *((void *)this + 22);
  int v69 = *(_DWORD *)(v68 + 28);
  *(_DWORD *)(v67 + 116) = 0;
  *(_DWORD *)(v67 + 136) = 0;
  if (v69)
  {
    int v70 = sub_100007244(v68);
    if (v70 == 1)
    {
      *(_DWORD *)(*((void *)this + 60) + 116) = 1;
    }
    else if (v70 == 2)
    {
      *(_DWORD *)(*((void *)this + 60) + 136) = 1;
    }
  }
  uint64_t v71 = *((void *)this + 6);
  int v72 = *(_DWORD *)(v71 + 3964);
  __int16 v73 = *(_WORD *)(v71 + 3968);
  uint64_t v74 = *((void *)this + 60);
  *(_DWORD *)(v74 + 280) = v72;
  *(_WORD *)(v74 + 284) = v73;
  uint64_t v75 = *((void *)this + 8);
  int v76 = *(_DWORD *)(v75 + 76);
  LODWORD(v75) = *(_DWORD *)(v75 + 84);
  *(_DWORD *)(v74 + 160) = v76;
  *(_DWORD *)(v74 + 164) = v75;
  uint64_t v77 = *((void *)this + 10);
  *(int32x4_t *)(v74 + 264) = vzip2q_s32(*(int32x4_t *)(v77 + 164), (int32x4_t)vextq_s8(*(int8x16_t *)(v77 + 164), *(int8x16_t *)(v77 + 164), 8uLL));
  *(void *)(v74 + 256) = *(void *)(v77 + 180);
  uint64_t v78 = *((void *)this + 12);
  int v79 = *(unsigned __int8 *)(v78 + 152);
  LODWORD(v78) = *(unsigned __int8 *)(v78 + 153);
  *(_DWORD *)(v74 + 288) = v79;
  *(_DWORD *)(v74 + 292) = v78;
  *(void *)(v74 + 296) = *(void *)(*((void *)this + 14) + 72);
  uint64_t v80 = *((void *)this + 16);
  uint64_t v81 = *(void *)(v80 + 84);
  int v82 = *(_DWORD *)(v80 + 92);
  LODWORD(v80) = *(_DWORD *)(v80 + 100);
  *(void *)(v74 + 168) = v81;
  *(_DWORD *)(v74 + 152) = v82;
  *(_DWORD *)(v74 + 156) = v80;
  uint64_t v83 = *((void *)this + 18);
  unsigned int v84 = *(unsigned __int8 *)(v83 + 3120);
  if (*(unsigned char *)(v83 + 3120))
  {
    int v85 = *(_DWORD *)(v83 + 3100);
    unsigned int v84 = *(float *)(v83 + 3096);
    char v86 = *(unsigned char *)(v83 + 3088);
    char v87 = *(unsigned char *)(v83 + 3104);
    uint64_t v88 = *(void *)(v83 + 3112);
  }
  else
  {
    char v86 = 0;
    char v87 = 0;
    uint64_t v88 = 0;
    int v85 = 0;
  }
  int v89 = *(unsigned __int16 *)(v83 + 2634);
  int v90 = *(_DWORD *)(v83 + 3136);
  char v91 = *(unsigned char *)(v83 + 3140);
  *(_DWORD *)(v74 + 240) = v85;
  *(_DWORD *)(v74 + 236) = v84;
  *(unsigned char *)(v74 + 233) = v86;
  *(unsigned char *)(v74 + 244) = v87;
  *(void *)(v74 + 248) = v88;
  *(_DWORD *)(v74 + 216) = v89;
  *(int32x2_t *)(v74 + 220) = vrev64_s32(*(int32x2_t *)(v83 + 3128));
  *(_DWORD *)(v74 + 228) = v90;
  *(unsigned char *)(v74 + 232) = v91;
  uint64_t v92 = *((void *)this + 20);
  if (*(unsigned char *)(v92 + 88)) {
    uint64_t v93 = *(void *)(v92 + 80);
  }
  else {
    uint64_t v93 = 0;
  }
  *(void *)(v74 + 176) = v93;
  *(void *)(v74 + 184) = *(void *)(*((void *)this + 24) + 220);
  uint64_t v94 = *((void *)this + 28);
  *(unsigned char *)(v74 + 192) = *(unsigned char *)(v94 + 213);
  *(_OWORD *)(v74 + 200) = *(_OWORD *)(v94 + 216);
  int v95 = (int8x16_t *)*((void *)this + 30);
  if (v95[10].i8[0]) {
    uint64_t v96 = v95[9].i64[1];
  }
  else {
    uint64_t v96 = 0;
  }
  if (v95[8].i8[8]) {
    int8x16_t v97 = v95[7];
  }
  else {
    int8x16_t v97 = 0uLL;
  }
  __int8 v98 = v95[5].i8[4];
  if (v95[10].i8[12]) {
    __int32 v99 = v95[10].i32[2];
  }
  else {
    __int32 v99 = 0;
  }
  uint64_t v100 = 0;
  *(void *)(v74 + 304) = v96;
  *(int8x16_t *)(v74 + 312) = vextq_s8(v97, v97, 8uLL);
  *(unsigned char *)(v74 + 328) = v98;
  *(_DWORD *)(v74 + 332) = v99;
  int v101 = (char *)this + 256;
  do
  {
    (*(void (**)(void, uint64_t))(**(void **)&v101[v100] + 32))(*(void *)&v101[v100], a2);
    (*(void (**)(void))(**(void **)&v101[v100] + 24))(*(void *)&v101[v100]);
    v100 += 16;
  }
  while (v100 != 224);
  __int16 v102 = (_DWORD *)*((void *)this + 60);
  if (v102[26]) {
    v102[84] |= 1u;
  }
  if (v102[22]) {
    v102[84] |= 2u;
  }
  if (v102[27]) {
    v102[84] |= 4u;
  }
  if (v102[23]) {
    v102[84] |= 8u;
  }
  if (v102[21]) {
    v102[84] |= 0x10u;
  }
  if (v102[28]) {
    v102[84] |= 0x20u;
  }
  if (v102[24]) {
    v102[84] |= 0x40u;
  }
  if (v102[25]) {
    v102[84] |= 0x80u;
  }
  if (v102[30]) {
    v102[84] |= 0x100u;
  }
  if (v102[20]) {
    v102[84] |= 0x200u;
  }
  if (v102[32]) {
    v102[84] |= 0x1000u;
  }
  if (v102[34]) {
    v102[84] |= 0x800u;
  }
  if (v102[29]) {
    v102[84] |= 0x400u;
  }
  if (v102[33]) {
    v102[84] |= 0x2000u;
  }
  if (v102[31]) {
    v102[84] |= 0x4000u;
  }
}

void sub_10003AC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003AC7C(unsigned int *a1)
{
  uint64_t result = CLKappaDeescalator::isDecidedForOption(*a1);
  if (result) {
    return !CLKappaDeescalator::shouldDeescalateForOption(*a1);
  }
  return result;
}

void virtual thunk to'CLKappaInferencesAlgSevereCrash::epochFinalize(CLKappaInferencesAlgSevereCrash *this, uint64_t a2)
{
}

void CLKappaInferencesAlgSevereCrash::feedTrigger(CLKappaInferencesAlgSevereCrash *this, TriggerSample *a2)
{
  CLKappaDeescalatorAOI::updateWithTrigger(*((CLKappaDeescalatorAOI **)this + 4), a2);
  CLKappaDeescalatorSkiLift::updateWithTrigger(*((CLKappaDeescalatorSkiLift **)this + 14), a2);
  sub_1000075A8(*((void *)this + 22), (float16x4_t *)a2);
  double v4 = (CLKappaDeescalatorWaterProxy *)*((void *)this + 26);

  CLKappaDeescalatorWaterProxy::updateWithTrigger(v4, a2);
}

void virtual thunk to'CLKappaInferencesAlgSevereCrash::feedTrigger(CLKappaInferencesAlgSevereCrash *this, TriggerSample *a2)
{
}

void CLKappaInferencesAlgSevereCrash::feedGPS(CLKappaDeescalatorAOI **this, const CSSPUGps_Struct *a2)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
  }
  double v4 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double latitude = a2->latitude;
    double longitude = a2->longitude;
    int v7 = 134218240;
    double v8 = latitude;
    __int16 v9 = 2048;
    double v10 = longitude;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[SC] lat %f long %f", (uint8_t *)&v7, 0x16u);
  }
  CLKappaDeescalatorAOI::updateWithCurrentLocation(this[4], a2);
  CLKappaDeescalatorWaterProxy::updateWithCurrentLocation(this[26], a2);
}

void virtual thunk to'CLKappaInferencesAlgSevereCrash::feedGPS(CLKappaInferencesAlgSevereCrash *this, const CSSPUGps_Struct *a2)
{
}

void CLKappaInferencesAlgSevereCrash::feedRoads(uint64_t a1, uint64_t a2)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
  }
  double v4 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = 134217984;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[SC] feedRoads distanceToNearestRoad:%f", (uint8_t *)&v6, 0xCu);
  }
  sub_1000078BC(*(void *)(a1 + 176), a2);
  CLKappaDeescalatorWaterProxy::updateWithRoadInfo(*(void *)(a1 + 208), a2);
}

void virtual thunk to'CLKappaInferencesAlgSevereCrash::feedRoads(void *a1, uint64_t a2)
{
}

void CLKappaInferencesAlgSevereCrash::feedRemoteSample(CLSafetyDeescalatorJointDetection **this, const CSRemoteSample_Struct *a2)
{
}

void virtual thunk to'CLKappaInferencesAlgSevereCrash::feedRemoteSample(CLKappaInferencesAlgSevereCrash *this, const CSRemoteSample_Struct *a2)
{
}

uint64_t CLKappaInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  CLKappaDeescalatorStaticGps::updateWithFeatures(*(void *)(a1 + 128), a2);
  uint64_t v4 = *(void *)(a1 + 64);

  return CLKappaDeescalatorMovingGps::updateWithFeatures(v4, a2);
}

uint64_t virtual thunk to'CLKappaInferencesAlgSevereCrash::feedFeatures(void *a1, uint64_t a2)
{
  double v3 = (char *)a1 + *(void *)(*a1 - 48);
  CLKappaDeescalatorStaticGps::updateWithFeatures(*((void *)v3 + 16), a2);
  uint64_t v4 = *((void *)v3 + 8);

  return CLKappaDeescalatorMovingGps::updateWithFeatures(v4, a2);
}

unsigned __int16 *CLKappaInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  return CLKappaDeescalatorSteps::updateWithStepsFeatures(*(unsigned __int16 **)(a1 + 144), a2);
}

{
  uint64_t v4;
  uint64_t vars8;

  CLKappaDeescalatorQuiescence::updateWithSpinFeatures(*(void *)(a1 + 80), a2);
  uint64_t v4 = *(void *)(a1 + 192);

  return CLKappaDeescalatorUsha::updateWithCumulativeRotation(v4, a2);
}

{
  char v4;
  NSObject *v5;
  uint8_t v7[16];

  uint64_t v4 = *(unsigned char *)(a2 + 29) != 0;
  if (*(unsigned char *)(a1 + 550))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
    }
    uint64_t v5 = qword_1003DB6A8;
    uint64_t v4 = 1;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[SC] forcing au", v7, 2u);
    }
  }
  CLKappaDeescalatorSkiing::updateWithAudioTPQ(*(void *)(a1 + 96), v4);
  return CLKappaDeescalatorUsha::updateWithIsAudioRollover(*(void *)(a1 + 192), a2);
}

{
  return CLKappaDeescalatorMAP::updateWithIsMAP(*(void *)(a1 + 224), a2);
}

{
  return CLKappaDeescalatorMAP::updateWithFreeFall(*(void *)(a1 + 224), a2);
}

unsigned __int16 *virtual thunk to'CLKappaInferencesAlgSevereCrash::feedFeatures(void *a1, uint64_t a2)
{
  return CLKappaDeescalatorSteps::updateWithStepsFeatures(*(unsigned __int16 **)((char *)a1 + *(void *)(*a1 - 104) + 144), a2);
}

{
  char *v3;
  uint64_t v4;
  uint64_t vars8;

  double v3 = (char *)a1 + *(void *)(*a1 - 96);
  CLKappaDeescalatorQuiescence::updateWithSpinFeatures(*((void *)v3 + 10), a2);
  uint64_t v4 = *((void *)v3 + 24);

  return CLKappaDeescalatorUsha::updateWithCumulativeRotation(v4, a2);
}

{
  return CLKappaInferencesAlgSevereCrash::feedFeatures((uint64_t)a1 + *(void *)(*a1 - 88), a2);
}

{
  return CLKappaDeescalatorMAP::updateWithIsMAP(*(void *)((char *)a1 + *(void *)(*a1 - 136) + 224), a2);
}

{
  return CLKappaDeescalatorMAP::updateWithFreeFall(*(void *)((char *)a1 + *(void *)(*a1 - 112) + 224), a2);
}

float CLKappaInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  return CLKappaDeescalatorQuiescence::updateWithPulseFeatures(*(void *)(a1 + 80), a2);
}

{
  return CLKappaDeescalatorTriggerClusters::updateWithTriggerClustersFeatures(*(void *)(a1 + 160), a2);
}

float virtual thunk to'CLKappaInferencesAlgSevereCrash::feedFeatures(void *a1, uint64_t a2)
{
  return CLKappaDeescalatorQuiescence::updateWithPulseFeatures(*(void *)((char *)a1 + *(void *)(*a1 - 32) + 80), a2);
}

{
  return CLKappaDeescalatorTriggerClusters::updateWithTriggerClustersFeatures(*(void *)((char *)a1 + *(void *)(*a1 - 128) + 160), a2);
}

{
  return CLKappaInferencesAlgSevereCrash::feedFeatures((void *)((char *)a1 + *(void *)(*a1 - 56)), a2);
}

unsigned __int16 *CLKappaInferencesAlgSevereCrash::feedFeatures(uint64_t a1, _OWORD *a2)
{
  return CLKappaDeescalatorAutocorrelation::updateWithAutocorrelationFeatures(*(void *)(a1 + 48), a2);
}

unsigned __int16 *virtual thunk to'CLKappaInferencesAlgSevereCrash::feedFeatures(void *a1, _OWORD *a2)
{
  return CLKappaDeescalatorAutocorrelation::updateWithAutocorrelationFeatures(*(void *)((char *)a1 + *(void *)(*a1 - 80) + 48), a2);
}

float CLKappaInferencesAlgSevereCrash::feedFeatures(uint64_t *a1, uint64_t a2)
{
  CLKappaDeescalatorAutocorrelation::updateWithBaroFeatures(a1[6], (_OWORD *)a2);
  CLKappaDeescalatorSteps::updateWithBaroFeatures(a1[18], (_OWORD *)a2);
  CLKappaDeescalatorSkiing::updateWithPressureMedian(a1[12], *(float *)(a2 + 200));
  uint64_t v4 = a1[24];

  return CLKappaDeescalatorUsha::updateWithPeakPressure(v4, a2);
}

void CLKappaInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
}

void virtual thunk to'CLKappaInferencesAlgSevereCrash::feedFeatures(void *a1, uint64_t a2)
{
}

void CLKappaInferencesAlgSevereCrash::feedEstimates(unsigned char *a1, unsigned char *a2)
{
  a1[513] = *a2;
  char v2 = a2[1];
  a1[516] = v2;
  a1[536] |= v2;
  if (a1[545])
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
    }
    uint64_t v4 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[SC] forcing c", v5, 2u);
    }
    a1[513] = 1;
    a1[545] = 0;
  }
}

{
  char v3;
  NSObject *v5;
  uint8_t v6[16];

  a1[514] = *a2;
  double v3 = a2[1];
  a1[536] |= v3;
  if (a1[546])
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
    }
    uint64_t v5 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[SC] forcing ro", v6, 2u);
    }
    a1[514] = 1;
    a1[546] = 0;
    double v3 = a2[1];
  }
  a1[517] = v3;
}

void virtual thunk to'CLKappaInferencesAlgSevereCrash::feedEstimates(void *a1, unsigned char *a2)
{
}

{
  CLKappaInferencesAlgSevereCrash::feedEstimates((unsigned char *)a1 + *(void *)(*a1 - 48), a2);
}

uint64_t CLKappaInferencesAlgSevereCrash::feedEstimates(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  *(unsigned char *)(a1 + 515) = v3;
  if (*(unsigned char *)(a1 + 547))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003A0340);
    }
    uint64_t v4 = qword_1003DB6A8;
    int v3 = 1;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[SC] forcing hsc", v6, 2u);
    }
    *(unsigned char *)(a1 + 515) = 1;
    *(unsigned char *)(a1 + 547) = 0;
  }
  CLKappaDeescalatorAutocorrelation::updateWithHighSpeedCrash(*(void *)(a1 + 48), v3 != 0);
  return CLKappaDeescalatorSteps::updateWithHighSpeedCrash(*(void *)(a1 + 144), *(unsigned char *)(a1 + 515));
}

uint64_t virtual thunk to'CLKappaInferencesAlgSevereCrash::feedEstimates(void *a1, unsigned __int8 *a2)
{
  return CLKappaInferencesAlgSevereCrash::feedEstimates((uint64_t)a1 + *(void *)(*a1 - 56), a2);
}

double CLKappaInferencesAlgSevereCrash::epochReset(CLKappaInferencesAlgSevereCrash *this)
{
  uint64_t v1 = *((void *)this + 60);
  *(void *)(v1 + 56) = 0;
  v1 += 56;
  *(void *)(v1 - 24) = 0;
  *(void *)(v1 - 16) = 0;
  *(void *)(v1 - 10) = 0;
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 13) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(void *)(v1 + 85) = 0;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 121) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_WORD *)(v1 + 176) = 0;
  *(unsigned char *)(v1 + 188) = 0;
  *(void *)(v1 + 180) = 0;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(void *)(v1 + 222) = 0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 257) = 0u;
  *(_DWORD *)(v1 + 276) = 0;
  return result;
}

double virtual thunk to'CLKappaInferencesAlgSevereCrash::epochReset(CLKappaInferencesAlgSevereCrash *this)
{
  uint64_t v1 = *(void *)((char *)this + *(void *)(*(void *)this - 56) + 480);
  *(void *)(v1 + 56) = 0;
  v1 += 56;
  *(void *)(v1 - 24) = 0;
  *(void *)(v1 - 16) = 0;
  *(void *)(v1 - 10) = 0;
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 13) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(void *)(v1 + 85) = 0;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 121) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_WORD *)(v1 + 176) = 0;
  *(unsigned char *)(v1 + 188) = 0;
  *(void *)(v1 + 180) = 0;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(void *)(v1 + 222) = 0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 257) = 0u;
  *(_DWORD *)(v1 + 276) = 0;
  return result;
}

void sub_10003B6F0(CLKappaAlgBlock *a1)
{
}

void sub_10003B6FC(CLKappaAlgBlock *a1)
{
  operator delete();
}

BOOL sub_10003B73C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (unint64_t *)(a1 + 496);
  if (!*(unsigned char *)(a1 + 504)) {
    uint64_t v4 = (unint64_t *)&unk_100338DA8;
  }
  BOOL result = CLKappaAlgBlock::isActiveInferences((CLKappaAlgBlock *)a1, a2, *v4);
  if (result)
  {
    if (*(unsigned char *)(a1 + 504) && (CLKappaDeescalator::isDecidedForOption(*(_DWORD *)(a1 + 28)) & 1) == 0)
    {
      if (!*(unsigned char *)(a1 + 504)) {
        sub_100007D1C();
      }
      return *(void *)(a1 + 496) + (unint64_t)(float)(*(float *)(*(void *)(a1 + 480) + 20) * 1000000.0) > a2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10003B7D4(uint64_t result, char a2)
{
  uint64_t v2 = 0;
  *(unsigned char *)(result + 24) = a2;
  do
  {
    *(unsigned char *)(*(void *)(result + 256 + v2) + 32) = a2;
    v2 += 16;
  }
  while (v2 != 224);
  return result;
}

void sub_10003B80C(void *a1)
{
}

void sub_10003B830(void *a1)
{
  operator delete();
}

void sub_10003B888(void *a1)
{
}

void sub_10003B8AC(void *a1)
{
  operator delete();
}

void sub_10003B914(void *a1)
{
}

void sub_10003B938(void *a1)
{
  operator delete();
}

void sub_10003B994(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_10003B9D8(CLKappaAlgBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v5) {
    sub_10000BB9C(v5);
  }
  for (uint64_t i = 472; i != 248; i -= 16)
  {
    uint64_t v7 = *(std::__shared_weak_count **)((char *)this + i);
    if (v7) {
      sub_10000BB9C(v7);
    }
  }
  double v8 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v8) {
    sub_10000BB9C(v8);
  }
  __int16 v9 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v9) {
    sub_10000BB9C(v9);
  }
  double v10 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v10) {
    sub_10000BB9C(v10);
  }
  int v11 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v11) {
    sub_10000BB9C(v11);
  }
  int v12 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v12) {
    sub_10000BB9C(v12);
  }
  int v13 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v13) {
    sub_10000BB9C(v13);
  }
  int v14 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v14) {
    sub_10000BB9C(v14);
  }
  int v15 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v15) {
    sub_10000BB9C(v15);
  }
  BOOL v16 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v16) {
    sub_10000BB9C(v16);
  }
  double v17 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v17) {
    sub_10000BB9C(v17);
  }
  BOOL v18 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v18) {
    sub_10000BB9C(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v19) {
    sub_10000BB9C(v19);
  }
  unint64_t v20 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v20) {
    sub_10000BB9C(v20);
  }
  uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v21) {
    sub_10000BB9C(v21);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, a2 + 1);
}

double sub_10003BC54@<D0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x170uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = off_1003A0370;
  double result = 0.0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((void *)v2 + 3) = &off_1003A1E48;
  *(_OWORD *)(v2 + 40) = xmmword_100338D00;
  *((void *)v2 + 7) = 0;
  *((void *)v2 + 8) = 0;
  *(void *)(v2 + 70) = 0;
  *((void *)v2 + 10) = 0;
  *((void *)v2 + 11) = 0;
  *(void *)(v2 + 93) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(void *)(v2 + 165) = 0;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *(_OWORD *)(v2 + 201) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_WORD *)v2 + 128) = 0;
  v2[268] = 0;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *(void *)(v2 + 260) = 0;
  *(void *)(v2 + 302) = 0;
  *((_OWORD *)v2 + 18) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 337) = 0u;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_10003BD50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003BD70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0370;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003BDC4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003BDEC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x78uLL);
  double result = sub_10003BE38(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003BE24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003BE38(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A03C0;
  CLKappaDeescalatorAOI::CLKappaDeescalatorAOI((CLKappaDeescalatorAOI *)(a1 + 3));
  return a1;
}

void sub_10003BE80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003BE94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A03C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003BEB4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A03C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003BF08(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003BF30@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xFA0uLL);
  double result = sub_10003BF7C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003BF68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003BF7C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A0410;
  CLKappaDeescalatorAutocorrelation::CLKappaDeescalatorAutocorrelation((CLKappaDeescalatorAutocorrelation *)(a1 + 3));
  return a1;
}

void sub_10003BFC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003BFD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003BFF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0410;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003C04C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003C074@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x78uLL);
  double result = sub_10003C0C0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003C0AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003C0C0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A0460;
  CLKappaDeescalatorMovingGps::CLKappaDeescalatorMovingGps((CLKappaDeescalatorMovingGps *)(a1 + 3));
  return a1;
}

void sub_10003C108(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003C11C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003C13C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0460;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003C190(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003C1B8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xD8uLL);
  double result = sub_10003C204(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003C1F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003C204(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A04B0;
  CLKappaDeescalatorQuiescence::CLKappaDeescalatorQuiescence((CLKappaDeescalatorQuiescence *)(a1 + 3));
  return a1;
}

void sub_10003C24C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003C260(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A04B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003C280(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A04B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003C2D4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003C2FC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xB8uLL);
  double result = sub_10003C348(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003C334(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003C348(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A0500;
  CLKappaDeescalatorSkiing::CLKappaDeescalatorSkiing((CLKappaDeescalatorSkiing *)(a1 + 3));
  return a1;
}

void sub_10003C390(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003C3A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003C3C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0500;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003C418(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003C440@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x68uLL);
  double result = sub_10003C48C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003C478(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003C48C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A0550;
  CLKappaDeescalatorSkiLift::CLKappaDeescalatorSkiLift((CLKappaDeescalatorSkiLift *)(a1 + 3));
  return a1;
}

void sub_10003C4D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003C4E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003C508(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0550;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003C55C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003C584@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x88uLL);
  double result = sub_10003C5D0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003C5BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003C5D0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A05A0;
  CLKappaDeescalatorStaticGps::CLKappaDeescalatorStaticGps((CLKappaDeescalatorStaticGps *)(a1 + 3));
  return a1;
}

void sub_10003C618(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003C62C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A05A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003C64C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A05A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003C6A0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003C6C8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xC60uLL);
  double result = sub_10003C714(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003C700(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003C714(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A05F0;
  CLKappaDeescalatorSteps::CLKappaDeescalatorSteps((CLKappaDeescalatorSteps *)(a1 + 3));
  return a1;
}

void sub_10003C75C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003C770(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A05F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003C790(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A05F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003C7E4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003C80C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x78uLL);
  double result = sub_10003C858(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003C844(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003C858(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A0640;
  CLKappaDeescalatorTriggerClusters::CLKappaDeescalatorTriggerClusters((CLKappaDeescalatorTriggerClusters *)(a1 + 3));
  return a1;
}

void sub_10003C8A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003C8B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003C8D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0640;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003C928(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003C950@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xC0uLL);
  double result = sub_10003C99C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003C988(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003C99C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A0690;
  sub_1000067DC(a1 + 3);
  return a1;
}

void sub_10003C9E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003C9F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003CA18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0690;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003CA6C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003CA94@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x100uLL);
  double result = sub_10003CAE0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003CACC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003CAE0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A06E0;
  CLKappaDeescalatorUsha::CLKappaDeescalatorUsha((CLKappaDeescalatorUsha *)(a1 + 3));
  return a1;
}

void sub_10003CB28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003CB3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A06E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003CB5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A06E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003CBB0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003CBD8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x88uLL);
  double result = sub_10003CC24(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003CC10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003CC24(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A0730;
  CLKappaDeescalatorWaterProxy::CLKappaDeescalatorWaterProxy((CLKappaDeescalatorWaterProxy *)(a1 + 3));
  return a1;
}

void sub_10003CC6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003CC80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003CCA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0730;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003CCF4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003CD1C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x108uLL);
  double result = sub_10003CD68(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003CD54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003CD68(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A0780;
  CLKappaDeescalatorMAP::CLKappaDeescalatorMAP((CLKappaDeescalatorMAP *)(a1 + 3));
  return a1;
}

void sub_10003CDB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003CDC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003CDE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A0780;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003CE38(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10003CE60@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xC8uLL);
  double result = sub_10003CEAC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003CE98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10003CEAC(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A07D0;
  CLSafetyDeescalatorJointDetection::CLSafetyDeescalatorJointDetection((CLSafetyDeescalatorJointDetection *)(a1 + 3));
  return a1;
}

void sub_10003CEF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003CF08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A07D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003CF28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A07D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003CF7C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void CLSafetyDeescalatorProjectilePhone::CLSafetyDeescalatorProjectilePhone(CLSafetyDeescalatorProjectilePhone *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  uint64_t v2 = (char *)sub_100007BC0((void *)this + 6, "none");
  *(void *)this = off_1003A0820;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 88) = 0;
  *(void *)((char *)this + 92) = 0xB00000000;
  *((void *)this + 18) = 0xB00000000;
  *(void *)((char *)this + 196) = 0xB00000000;
  *((void *)this + 31) = 0xB00000000;
  *(void *)((char *)this + 300) = 0xB00000000;
  *((void *)this + 40) = 0xB00000000;
  *(void *)((char *)this + 348) = 0;
  *(void *)((char *)this + 340) = 0;
  *((_WORD *)this + 178) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((void *)this + 7) = 5;
    uint64_t v2 = (char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 71) = 5;
  }
  strcpy(v2, "de-PP");
}

uint64_t CLSafetyDeescalatorProjectilePhone::assertReady(CLSafetyDeescalatorProjectilePhone *this, uint64_t a2, const char *a3)
{
  unint64_t v3 = *((unsigned __int16 *)this + 47);
  uint64_t v4 = *((unsigned __int16 *)this + 73);
  unint64_t v17 = v3;
  uint64_t v18 = v4;
  uint64_t v5 = *((unsigned __int16 *)this + 125);
  uint64_t v6 = *((unsigned __int16 *)this + 99);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = 8;
  unint64_t v8 = v3;
  __int16 v9 = (uint64_t *)&v17;
  do
  {
    if (*(unint64_t *)((char *)&v17 + v7) < v8)
    {
      unint64_t v8 = *(unint64_t *)((char *)&v17 + v7);
      __int16 v9 = (uint64_t *)((char *)&v17 + v7);
    }
    v7 += 8;
  }
  while (v7 != 32);
  uint64_t v10 = *v9;
  unint64_t v17 = v3;
  uint64_t v18 = v4;
  uint64_t v11 = 8;
  int v12 = (uint64_t *)&v17;
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  do
  {
    unint64_t v13 = *(unint64_t *)((char *)&v17 + v11);
    BOOL v14 = v3 >= v13;
    if (v3 <= v13) {
      unint64_t v3 = *(unint64_t *)((char *)&v17 + v11);
    }
    if (!v14) {
      int v12 = (uint64_t *)((char *)&v17 + v11);
    }
    v11 += 8;
  }
  while (v11 != 32);
  BOOL v15 = v10 == *v12;

  return CLKappaDeescalator::raiseUnless(v15, (BOOL)"[de-PP] Buffer sizes are not the same", a3);
}

uint64_t CLSafetyDeescalatorProjectilePhone::setConfig(uint64_t result, _OWORD *a2)
{
  int v2 = *(unsigned __int8 *)(result + 88);
  *(_OWORD *)(result + 72) = *a2;
  if (!v2) {
    *(unsigned char *)(result + 88) = 1;
  }
  return result;
}

void CLSafetyDeescalatorProjectilePhone::resetConfiguration(CLSafetyDeescalatorProjectilePhone *this)
{
  id v11 = +[CSPersistentConfiguration configBaseKey:"DeescalatorPPConfig" forFeatureMode:*((unsigned __int8 *)this + 32)];
  int v2 = +[CSPersistentConfiguration sharedConfiguration];
  [v2 floatThreshold:&CLSafetyDeescalatorProjectilePhone::kConfigurationDefaults forKey:v11];
  int v4 = v3;
  [v2 floatThreshold:&unk_10033918C forKey:v11];
  int v6 = v5;
  [v2 floatThreshold:&unk_10033919C forKey:v11];
  int v8 = v7;
  [v2 floatThreshold:&unk_1003391AC forKey:v11];
  int v9 = *((unsigned __int8 *)this + 88);
  *((_DWORD *)this + 18) = v4;
  *((_DWORD *)this + 19) = v6;
  *((_DWORD *)this + 20) = v8;
  *((_DWORD *)this + 21) = v10;
  if (!v9) {
    *((unsigned char *)this + 88) = 1;
  }
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceProjectilePhone");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceProjectilePhone");
}

void sub_10003D2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLSafetyDeescalatorProjectilePhone::log(CLSafetyDeescalatorProjectilePhone *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 88)) {
    sub_100007D1C();
  }
  float v4 = *((float *)this + 85);
  float v5 = *((float *)this + 86);
  float v6 = *((float *)this + 87);
  float v7 = *((float *)this + 88);
  int v8 = *((unsigned __int8 *)this + 356);
  int v9 = *((unsigned __int8 *)this + 357);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A08A0);
  }
  int v10 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *((_DWORD *)this + 6);
    int v12 = *((unsigned __int8 *)this + 32);
    double v13 = *((float *)this + 18);
    double v14 = *((float *)this + 19);
    double v15 = *((float *)this + 20);
    double v16 = *((float *)this + 21);
    int v17 = 134352128;
    uint64_t v18 = a2;
    __int16 v19 = 1026;
    int v20 = v11;
    __int16 v21 = 1026;
    int v22 = v12;
    __int16 v23 = 2050;
    double v24 = v13;
    __int16 v25 = 2050;
    double v26 = v14;
    __int16 v27 = 2050;
    double v28 = v15;
    __int16 v29 = 2050;
    double v30 = v16;
    __int16 v31 = 2050;
    double v32 = v4;
    __int16 v33 = 2050;
    double v34 = v5;
    __int16 v35 = 2050;
    double v36 = v6;
    __int16 v37 = 2050;
    double v38 = v7;
    __int16 v39 = 1026;
    int v40 = v8;
    __int16 v41 = 1026;
    int v42 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[de-PP] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,debug-1a,%{public}f,debug-1b,%{public}f,debug-1c,%{public}f,debug-1d,%{public}f,debug-2a,%{public}d,debug-2b,%{public}d", (uint8_t *)&v17, 0x74u);
  }
}

uint64_t CLSafetyDeescalatorProjectilePhone::onEvaluateAtMinHoldDuration(CLSafetyDeescalatorProjectilePhone *this)
{
  if (!*((_WORD *)this + 47)) {
    return 0;
  }
  unint64_t v2 = 0;
  LOBYTE(v3) = 0;
  float v4 = (unsigned __int16 *)((char *)this + 300);
  float v5 = (unsigned __int16 *)((char *)this + 320);
  do
  {
    if (*(unsigned char *)sub_10002C20C(v4, v2) || *(unsigned char *)sub_10002C20C(v5, v2))
    {
      BOOL ProjectileInEpoch = CLSafetyDeescalatorProjectilePhone::getProjectileInEpoch(this, v2 - 1);
      BOOL v7 = CLSafetyDeescalatorProjectilePhone::getProjectileInEpoch(this, v2++);
      BOOL v8 = CLSafetyDeescalatorProjectilePhone::getProjectileInEpoch(this, v2);
      uint64_t v3 = 1;
      if (!ProjectileInEpoch && !v7 && !v8) {
        return v3;
      }
    }
    else
    {
      ++v2;
    }
  }
  while (v2 < *((unsigned __int16 *)this + 47));
  if (v3) {
    return 4;
  }
  else {
    return 0;
  }
}

BOOL CLSafetyDeescalatorProjectilePhone::getProjectileInEpoch(CLSafetyDeescalatorProjectilePhone *this, unsigned int a2)
{
  if (!*((unsigned char *)this + 88)) {
    sub_100007D1C();
  }
  if ((a2 & 0x80000000) != 0 || *((unsigned __int16 *)this + 47) <= a2) {
    return 0;
  }
  float v4 = 0.0;
  float v5 = 0.0;
  if (a2) {
    float v5 = *(float *)sub_10003D860((unsigned __int16 *)this + 124, a2 - 1);
  }
  if ((unint64_t)*((unsigned __int16 *)this + 125) - 1 > a2) {
    float v4 = *(float *)sub_10003D860((unsigned __int16 *)this + 124, a2 + 1);
  }
  float v6 = *(float *)sub_10003D860((unsigned __int16 *)this + 124, a2);
  if (v5 >= v6) {
    float v6 = v5;
  }
  if (v6 >= v4) {
    float v4 = v6;
  }
  return *(float *)sub_10003D860((unsigned __int16 *)this + 46, a2) >= *((float *)this + 18)
      && *(float *)sub_10003D860((unsigned __int16 *)this + 72, a2) >= *((float *)this + 19)
      && *(float *)sub_10003D860((unsigned __int16 *)this + 98, a2) >= *((float *)this + 20)
      && v4 <= *((float *)this + 21);
}

float CLSafetyDeescalatorProjectilePhone::updateWithSpinFeatures(uint64_t a1, uint64_t a2)
{
  sub_10003D6D8((unsigned __int16 *)(a1 + 144), (_DWORD *)(a2 + 12));
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 344) = result;
  return result;
}

unsigned __int16 *sub_10003D6D8(unsigned __int16 *result, _DWORD *a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = *((unsigned int *)result + 1);
  uint64_t v4 = *result;
  if (v4 + v2 >= v3) {
    uint64_t v5 = *((unsigned int *)result + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  *(_DWORD *)&result[2 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    *float result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

float CLSafetyDeescalatorProjectilePhone::updateWithPulseFeatures(uint64_t a1, uint64_t a2)
{
  sub_10003D6D8((unsigned __int16 *)(a1 + 196), (_DWORD *)(a2 + 248));
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a2 + 248);
  sub_10003D6D8((unsigned __int16 *)(a1 + 248), (_DWORD *)(a2 + 16));
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 352) = result;
  return result;
}

float CLSafetyDeescalatorProjectilePhone::updateWithFreeFallFeatures(uint64_t a1, uint64_t a2)
{
  sub_10003D6D8((unsigned __int16 *)(a1 + 92), (_DWORD *)(a2 + 28));
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 340) = result;
  return result;
}

uint64_t CLSafetyDeescalatorProjectilePhone::updateWithCoupledCrash(uint64_t this, char a2)
{
  uint64_t v2 = *(unsigned __int16 *)(this + 302);
  unint64_t v3 = *(unsigned int *)(this + 304);
  uint64_t v4 = *(unsigned __int16 *)(this + 300);
  if (v4 + v2 >= v3) {
    uint64_t v5 = *(unsigned int *)(this + 304);
  }
  else {
    uint64_t v5 = 0;
  }
  *(unsigned char *)(this + 300 + v4 + v2 - v5 + 8) = a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    *(_WORD *)(this + 300) = v4 + 1 - v3;
  }
  else
  {
    *(_WORD *)(this + 302) = v2 + 1;
  }
  *(unsigned char *)(this + 356) = a2;
  return this;
}

uint64_t CLSafetyDeescalatorProjectilePhone::updateWithUncoupledCrash(uint64_t this, char a2)
{
  uint64_t v2 = *(unsigned __int16 *)(this + 322);
  unint64_t v3 = *(unsigned int *)(this + 324);
  uint64_t v4 = *(unsigned __int16 *)(this + 320);
  if (v4 + v2 >= v3) {
    uint64_t v5 = *(unsigned int *)(this + 324);
  }
  else {
    uint64_t v5 = 0;
  }
  *(unsigned char *)(this + 320 + v4 + v2 - v5 + 8) = a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    *(_WORD *)(this + 320) = v4 + 1 - v3;
  }
  else
  {
    *(_WORD *)(this + 322) = v2 + 1;
  }
  *(unsigned char *)(this + 357) = a2;
  return this;
}

uint64_t sub_10003D860(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      int v8 = *((_DWORD *)a1 + 1);
      int v9 = 134218754;
      CFAbsoluteTime v10 = Current;
      __int16 v11 = 2080;
      int v12 = "const T &CMQueue<float>::operator[](const size_t) const [T = float]";
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 1024;
      int v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  unint64_t v5 = *a1 + a2;
  if (v5 < v4) {
    unint64_t v4 = 0;
  }
  return (uint64_t)&a1[2 * (v5 - v4) + 4];
}

void sub_10003D988(void **this)
{
  *this = off_1003A0820;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_10003D9A8(void **a1)
{
  *a1 = off_1003A0820;
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

void sub_10003D9FC(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

double CLKappaEstimatesAlgAirbagResult::reset(CLKappaEstimatesAlgAirbagResult *this)
{
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((unsigned char *)this + 36) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *((double *)this + 5) = result;
  *((_DWORD *)this + 12) = -1082130432;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0x7FFFFFFF;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 22) = -1082130432;
  return result;
}

double CLKappaEstimatesAlgAirbagResult::log(CLKappaEstimatesAlgAirbagResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A14B8);
  }
  uint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 3);
    int v5 = *((unsigned __int8 *)this + 36);
    double v6 = *((float *)this + 10);
    double v7 = *((float *)this + 11);
    double v8 = *((float *)this + 12);
    uint64_t v9 = *((void *)this + 7);
    int v10 = *((_DWORD *)this + 16);
    int v11 = *((_DWORD *)this + 8);
    uint64_t v12 = *((void *)this + 9);
    uint64_t v13 = *((void *)this + 10);
    double v14 = *((float *)this + 22);
    int v15 = 134351616;
    uint64_t v16 = v4;
    __int16 v17 = 1026;
    int v18 = v5;
    __int16 v19 = 2050;
    double v20 = v6;
    __int16 v21 = 2050;
    double v22 = v7;
    __int16 v23 = 2050;
    double v24 = v8;
    __int16 v25 = 2050;
    uint64_t v26 = v9;
    __int16 v27 = 1026;
    int v28 = v10;
    __int16 v29 = 1026;
    int v30 = v11;
    __int16 v31 = 2050;
    uint64_t v32 = v12;
    __int16 v33 = 2050;
    uint64_t v34 = v13;
    __int16 v35 = 2050;
    double v36 = v14;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[AB] summary,A,%{public}llu,B,%{public}d,C,%{public}f,D,%{public}f,E,%{public}f,F,%{public}llu,G,%{public}d,H,%{public}d,I,%{public}llu,J,%{public}llu,K,%{public}f\n", (uint8_t *)&v15, 0x64u);
  }
  return result;
}

void CLKappaEstimatesAlgAirbag::CLKappaEstimatesAlgAirbag(CLKappaEstimatesAlgAirbag *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  uint64_t *v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  double v6 = (std::__shared_weak_count *)operator new(0x80uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1003A14E8;
  *(_OWORD *)&v6[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[3].__shared_owners_ = 0u;
  v6[4].std::__shared_count = 0u;
  *(_OWORD *)&v6[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[1].__shared_owners_ = 0u;
  v6[2].std::__shared_count = 0u;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1003A1BA8;
  __asm { FMOV            V0.2S, #-1.0 }
  v6[2].__shared_weak_owners_ = _D0;
  LODWORD(v6[3].__vftable) = -1082130432;
  LODWORD(v6[3].__shared_weak_owners_) = 0x7FFFFFFF;
  v6[4].__vftable = 0;
  v6[4].__shared_owners_ = 0;
  LODWORD(v6[4].__shared_weak_owners_) = -1082130432;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v6 + 1;
  *((void *)this + 2) = v6;
  if (v12)
  {
    sub_10000BB9C(v12);
    double v6 = (std::__shared_weak_count *)*((void *)this + 2);
    int v15 = (std::__shared_weak_count *)*((void *)this + 1);
    uint64_t v16 = v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    int v15 = v6 + 1;
    uint64_t v16 = v6;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10003DE88((uint64_t)&v15, &v17);
  long long v13 = v17;
  long long v17 = 0uLL;
  double v14 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v13;
  if (v14)
  {
    sub_10000BB9C(v14);
    if (*((void *)&v17 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v17 + 1));
    }
  }
  if (v16) {
    sub_10000BB9C(v16);
  }
}

void sub_10003DE70(_Unwind_Exception *a1)
{
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10003DE88@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaEstimatesAlgAirbag::CLKappaEstimatesAlgAirbag(CLKappaEstimatesAlgAirbag *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 6) = off_10039A008;
  *((void *)this + 7) = off_10039A0D0;
  *((void *)this + 8) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003A0E90);
  void *v2 = off_1003A0970;
  v2[5] = 0;
  v2[6] = off_1003A0C20;
  v2[7] = off_1003A0D60;
  v2[8] = off_1003A0E40;
  v2[4] = 0;
  unint64_t v3 = (std::__shared_weak_count *)operator new(0x80uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1003A14E8;
  *(_OWORD *)&v3[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[3].__shared_owners_ = 0u;
  v3[4].std::__shared_count = 0u;
  *(_OWORD *)&v3[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[1].__shared_owners_ = 0u;
  v3[2].std::__shared_count = 0u;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1003A1BA8;
  __asm { FMOV            V0.2S, #-1.0 }
  v3[2].__shared_weak_owners_ = _D0;
  LODWORD(v3[3].__vftable) = -1082130432;
  LODWORD(v3[3].__shared_weak_owners_) = 0x7FFFFFFF;
  v3[4].__vftable = 0;
  v3[4].__shared_owners_ = 0;
  LODWORD(v3[4].__shared_weak_owners_) = -1082130432;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v3 + 1;
  *((void *)this + 2) = v3;
  if (v9)
  {
    sub_10000BB9C(v9);
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
    uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 1);
    long long v13 = v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v12 = v3 + 1;
    long long v13 = v3;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10003DE88((uint64_t)&v12, &v14);
  long long v10 = v14;
  long long v14 = 0uLL;
  int v11 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v10;
  if (v11)
  {
    sub_10000BB9C(v11);
    if (*((void *)&v14 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  if (v13) {
    sub_10000BB9C(v13);
  }
}

void sub_10003E130(_Unwind_Exception *a1)
{
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003A0E90);
  _Unwind_Resume(a1);
}

uint64_t CLKappaEstimatesAlgAirbag::reset(CLKappaEstimatesAlgAirbag *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

uint64_t CLKappaEstimatesAlgAirbag::setConfig(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(result + 32) + 16) = *a2;
  return result;
}

uint64_t CLKappaEstimatesAlgAirbag::epochFinalize(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 32) + 24) = a2;
  return this;
}

void *virtual thunk to'CLKappaEstimatesAlgAirbag::epochFinalize(void *this, uint64_t a2)
{
  *(void *)(*(void *)((char *)this + *(void *)(*this - 48) + 32) + 24) = a2;
  return this;
}

__n128 CLKappaEstimatesAlgAirbag::feedFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(v2 + 36) = *(unsigned char *)(a2 + 52) != 0;
  *(void *)(v2 + 40) = *(void *)(a2 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a2 + 40);
  *(void *)(v2 + 56) = *(void *)(a2 + 16);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(v2 + 88) = *(_DWORD *)(a2 + 64);
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v2 + 72) = result;
  return result;
}

double virtual thunk to'CLKappaEstimatesAlgAirbag::feedFeatures(void *a1, uint64_t a2)
{
  *(void *)&double result = CLKappaEstimatesAlgAirbag::feedFeatures((uint64_t)a1 + *(void *)(*a1 - 56), a2).n128_u64[0];
  return result;
}

void sub_10003E220(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003A0970;
  *((void *)this + 6) = off_1003A0C20;
  *((void *)this + 7) = off_1003A0D60;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_1003A0E40;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003A0E90);
}

void sub_10003E310(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003A0970;
  *((void *)this + 6) = off_1003A0C20;
  *((void *)this + 7) = off_1003A0D60;
  *((void *)this + 8) = off_1003A0E40;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003A0E90);

  operator delete();
}

void sub_10003E424(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003A0970;
  *((void *)v1 + 6) = off_1003A0C20;
  *((void *)v1 + 7) = off_1003A0D60;
  *((void *)v1 + 8) = off_1003A0E40;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003A0E90);
}

void sub_10003E4FC(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003A0970;
  *((void *)v1 + 6) = off_1003A0C20;
  *((void *)v1 + 7) = off_1003A0D60;
  *((void *)v1 + 8) = off_1003A0E40;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003A0E90);

  operator delete();
}

void sub_10003E5E8(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003A0970;
  *((void *)v1 + 6) = off_1003A0C20;
  *((void *)v1 + 7) = off_1003A0D60;
  *((void *)v1 + 8) = off_1003A0E40;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003A0E90);
}

void sub_10003E6C0(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003A0970;
  *((void *)v1 + 6) = off_1003A0C20;
  *((void *)v1 + 7) = off_1003A0D60;
  *((void *)v1 + 8) = off_1003A0E40;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003A0E90);

  operator delete();
}

void sub_10003E7E0(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003A0970;
  *((void *)v1 + 6) = off_1003A0C20;
  *((void *)v1 + 7) = off_1003A0D60;
  *((void *)v1 + 8) = off_1003A0E40;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003A0E90);
}

void sub_10003E8B8(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003A0970;
  *((void *)v1 + 6) = off_1003A0C20;
  *((void *)v1 + 7) = off_1003A0D60;
  *((void *)v1 + 8) = off_1003A0E40;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003A0E90);

  operator delete();
}

void sub_10003E9A4(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_10003E9E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A14E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003EA08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A14E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10003EA5C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

float sunElevationDeg(double a1, float a2, float a3)
{
  double v6 = +[NSCalendar calendarWithIdentifier:NSCalendarIdentifierGregorian];
  double v7 = +[NSTimeZone timeZoneForSecondsFromGMT:0];
  [v6 setTimeZone:v7];

  double v8 = +[NSDate dateWithTimeIntervalSinceReferenceDate:a1];
  uint64_t v9 = [v6 components:252 fromDate:v8];
  uint64_t v10 = (uint64_t)[v9 month];
  id v11 = [v9 day];
  uint64_t v12 = (char *)[v9 year];
  id v13 = [v9 hour];
  id v14 = [v9 minute];
  uint64_t v15 = (uint64_t)[v9 second];
  uint64_t v16 = v10 + 12;
  if (v10 >= 3) {
    uint64_t v16 = v10;
  }
  uint64_t v17 = (uint64_t)&v12[-(v10 < 3)];
  float v18 = (double)((int)((double)(v17 + 4716) * 365.25)
               + (int)((double)(v16 + 1) * 30.6001)
               + (int)((double)((uint64_t)v13 + ((uint64_t)v14 + v15 / 60) / 60) / 24.0 + (double)(uint64_t)v11))
      + -1524.5;
  float v44 = a2;
  if (v18 > 2299200.0) {
    float v18 = (float)((float)(v18 + 2.0) - (float)((uint64_t)&v12[-(v10 < 3)] / 100)) + (float)(v17 / 400);
  }
  double v19 = (float)((float)(v18 + -2451500.0) / 36525.0);
  float v20 = ((double)(uint64_t)v14 / 60.0 + (double)(uint64_t)v13 + (double)v15 / 3600.0) / 24.0;
  float v43 = v20;
  float v21 = v19 * (v19 * -0.0001537 + 35999.0503) + 357.52911;
  float v22 = 0.016708634 - v19 * (v19 * 0.0000001267 + 0.000042037);
  float v42 = v22;
  float v23 = sinf(v21 * 0.017453);
  double v41 = sinf(v21 * 0.034907);
  float v24 = (v19 * -0.000101 + 0.019993) * v41
      + v23 * (1.914602 - v19 * (v19 * 0.000014 + 0.004817))
      + sinf(v21 * 0.05236) * 0.000289;
  float v25 = (float)((int)(v19 * (v19 * 0.0003032 + 36000.7698) + 280.46646) % 360);
  double v26 = (float)(v25 + v24) + -0.00569;
  __double2 v27 = __sincos_stret((v19 * -1934.136 + 125.04) * 0.0174532924);
  *(float *)&double v26 = v26 + v27.__sinval * -0.00478;
  float v28 = ((21.448 - v19 * (v19 * (v19 * -0.001813 + 0.00059) + 46.815)) / 60.0 + 26.0) / 60.0 + 23.0;
  float v29 = v28 + v27.__cosval * 0.00256;
  *(float *)&double v19 = v29 * 0.017453;
  float v30 = sinf(v29 * 0.017453);
  float v31 = sinf(*(float *)&v26 * 0.017453);
  float v32 = asinf(v30 * v31);
  float v33 = tanf(*(float *)&v19 * 0.5);
  *(float *)&double v26 = v33 * v33;
  __float2 v34 = __sincosf_stret(v25 * 0.034907);
  float v35 = ((float)((float)((float)((float)(v42 * -2.0) * v23) + (float)(*(float *)&v26 * v34.__sinval))
               + (float)((float)((float)(*(float *)&v26 * (float)(v42 * 4.0)) * v23) * v34.__cosval))
       + *(float *)&v26 * -0.5 * *(float *)&v26 * sinf(v25 * 0.069813)
       + v42 * -1.25 * v42 * v41)
      * 229.183121;
  double v36 = (float)((int)(float)((float)(v35 + (float)(v43 * 1440.0)) + (float)(a3 * 4.0)) % 1440) * 0.25;
  *(float *)&double v19 = v36 + dbl_100339380[v36 < 0.0];
  __float2 v37 = __sincosf_stret(v44 * 0.017453);
  __float2 v38 = __sincosf_stret((float)(v32 * 57.296) * 0.017453);
  float v39 = cosf(*(float *)&v19 * 0.017453);
  *(float *)&double v26 = asinf((float)((float)(v37.__cosval * v38.__cosval) * v39) + (float)(v37.__sinval * v38.__sinval))
                 * 57.296;

  return *(float *)&v26;
}

void sub_10003F03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLSafetyDeescalatorGolf::CLSafetyDeescalatorGolf(CLSafetyDeescalatorGolf *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  uint64_t v2 = (char *)sub_100007BC0((void *)this + 6, "none");
  *(void *)this = off_1003A1538;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 76) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  if (*((char *)this + 71) < 0)
  {
    *((void *)this + 7) = 6;
    uint64_t v2 = (char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 71) = 6;
  }
  strcpy(v2, "de-GLF");
}

uint64_t CLSafetyDeescalatorGolf::assertReady(CLSafetyDeescalatorGolf *this, uint64_t a2, const char *a3)
{
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 76), (BOOL)"[de-GLF] missing config", a3);
}

void CLSafetyDeescalatorGolf::resetConfiguration(CLSafetyDeescalatorGolf *this)
{
  id v4 = +[CSPersistentConfiguration configBaseKey:"DeescalatorGLFConfig" forFeatureMode:*((unsigned __int8 *)this + 32)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  [v2 floatThreshold:&CLSafetyDeescalatorGolf::kConfigurationDefaults forKey:v4];
  if (!*((unsigned char *)this + 76)) {
    *((unsigned char *)this + 76) = 1;
  }
  *((_DWORD *)this + 18) = v3;
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceGolf");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceGolf");
}

void sub_10003F228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CLSafetyDeescalatorGolf::setConfig(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (!*(unsigned char *)(result + 76)) {
    *(unsigned char *)(result + 76) = 1;
  }
  *(_DWORD *)(result + 72) = v2;
  return result;
}

void CLSafetyDeescalatorGolf::log(CLSafetyDeescalatorGolf *this, uint64_t a2)
{
  sub_10003F404((uint64_t)this, &__p);
  if (!*((unsigned char *)this + 76)) {
    sub_100007D1C();
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A15B8);
  }
  id v4 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *((_DWORD *)this + 6);
    int v6 = *((unsigned __int8 *)this + 32);
    double v7 = (uint64_t *)((char *)this + 8);
    if (!*((unsigned char *)this + 16)) {
      double v7 = (uint64_t *)&unk_1003393E0;
    }
    uint64_t v8 = *v7;
    double v9 = *((float *)this + 18);
    *(_DWORD *)long long buf = 134350848;
    uint64_t v14 = a2;
    __int16 v15 = 1026;
    int v16 = v5;
    __int16 v17 = 1026;
    int v18 = v6;
    __int16 v19 = 2050;
    double v20 = v9;
    __int16 v21 = 2050;
    uint64_t v22 = v8;
    __int16 v23 = 2050;
    uint64_t v24 = (v11 - (unsigned char *)__p) >> 3;
    __int16 v25 = 2050;
    uint64_t v26 = v12[5];
    __int16 v27 = 2050;
    uint64_t v28 = v12[6];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[de-GLF] summary,A,%{public}llu,B,%{public}d,mode,%{public}u,config-1,%{public}f,debug-1a,%{public}llu,debug-1b,%{public}lu,debug-1c,%{public}lu,debug-1d,%{public}llu", buf, 0x4Au);
  }
  sub_100010C84(v12);
  if (__p)
  {
    id v11 = __p;
    operator delete(__p);
  }
}

void sub_10003F3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10003F404@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_100010EB0(a2, *(const void **)(a1 + 128), *(void *)(a1 + 136), (uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3);
  uint64_t result = sub_10003F6D8((uint64_t)(a2 + 3), (void *)(a1 + 80));
  a2[9] = *(void *)(a1 + 152);
  return result;
}

void sub_10003F458(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003F474(uint64_t a1)
{
  sub_100010C84((void *)(a1 + 24));
  int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t CLSafetyDeescalatorGolf::prepareForNextEpoch(uint64_t this)
{
  *(void *)(this + 136) = *(void *)(this + 128);
  return this;
}

char *CLSafetyDeescalatorGolf::updateWithGolfFeatures(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 76)) {
    sub_100007D1C();
  }
  if (*(unsigned char *)(a1 + 16)) {
    id v4 = (unint64_t *)(a1 + 8);
  }
  else {
    id v4 = (unint64_t *)&unk_1003393E0;
  }
  int v5 = (void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6)
  {
    unint64_t v7 = *v4;
    unint64_t v8 = (unint64_t)(float)(*(float *)(a1 + 72) * 1000000.0);
    do
    {
      unint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 88) + ((*(void *)(a1 + 112) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*(void *)(a1 + 112) & 0x1FFLL))
         + v8;
      if (v7)
      {
        if (v9 >= v7) {
          break;
        }
      }
      else if (v9 >= *(void *)a2)
      {
        break;
      }
      ++*(void *)(a1 + 112);
      *(void *)(a1 + 120) = v6 - 1;
      sub_1000125B8((uint64_t)v5, 1);
      uint64_t v6 = *(void *)(a1 + 120);
    }
    while (v6);
  }
  uint64_t v10 = *(uint64_t **)(a2 + 8);
  id v11 = *(uint64_t **)(a2 + 16);
  while (v10 != v11)
  {
    uint64_t v12 = *v10++;
    uint64_t v14 = v12;
    sub_10000DD3C(v5, &v14);
  }
  uint64_t result = (char *)(a1 + 128);
  if (a1 + 128 != a2 + 8) {
    return sub_1000330C4(result, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  return result;
}

uint64_t CLSafetyDeescalatorGolf::onEvaluateAtMinHoldDuration(CLSafetyDeescalatorGolf *this)
{
  return 1;
}

uint64_t CLSafetyDeescalatorGolf::onPreviousEpochMadeDecision(uint64_t this)
{
  *(void *)(this + 152) = 0;
  return this;
}

void sub_10003F5F4(uint64_t a1)
{
  *(void *)a1 = off_1003A1538;
  int v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  sub_100010C84((void *)(a1 + 80));

  CLKappaDeescalator::~CLKappaDeescalator((void **)a1);
}

void sub_10003F65C(uint64_t a1)
{
  *(void *)a1 = off_1003A1538;
  int v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  sub_100010C84((void *)(a1 + 80));
  CLKappaDeescalator::~CLKappaDeescalator((void **)a1);

  operator delete();
}

uint64_t sub_10003F6D8(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  unint64_t v7 = (char **)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    unint64_t v8 = 0;
    id v11 = 0;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    unint64_t v8 = &(*v7)[8 * (v4 & 0x1FF)];
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 9));
    id v11 = (char *)(*(void *)v10 + 8 * (v9 & 0x1FF));
  }
  sub_10003F784((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_10003F770(_Unwind_Exception *a1)
{
  sub_100010C34(v1);
  _Unwind_Resume(a1);
}

void *sub_10003F784(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = ((uint64_t)&a5[-*(void *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  }
  return sub_10003F7B8(a1, a2, a3, v5);
}

void *sub_10003F7B8(void *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 6) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_10003F8F0(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  id v13 = (void *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v11 & 0x1FF);
  }
  v24[0] = v8 + 8 * (v11 >> 9);
  v24[1] = v14;
  uint64_t result = sub_10003FE7C((uint64_t)v24, a4);
  if (v14 != v16)
  {
    uint64_t v17 = a1[5];
    do
    {
      if (v13 == result) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4096;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        __int16 v19 = *a2;
        double v20 = (void *)v14;
        do
        {
          uint64_t v21 = *(void *)a3;
          a3 += 8;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            uint64_t v22 = a2[1];
            ++a2;
            __int16 v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (void *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result) {
        break;
      }
      uint64_t v23 = v13[1];
      ++v13;
      uint64_t v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

void sub_10003F8F0(void *a1, unint64_t a2)
{
  int v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          float v29 = (char *)sub_10000EEB0((uint64_t)(a1 + 3), v28);
          float v31 = &v29[8 * (v28 >> 2)];
          float v32 = (uint64_t *)a1[1];
          int v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            int v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            float v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)float v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          __float2 v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            int v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          __int16 v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            int v3 = (char *)a1[1];
          }
          __int16 v27 = &v3[-8 * (v24 >> 1)];
          int v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)int v3 = v18;
      int v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100011630(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100011748((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        BOOL v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          uint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              int v79 = (char *)sub_10000EEB0((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              int v82 = (uint64_t *)a1[1];
              BOOL v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                BOOL v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                int v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)int v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              char v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                BOOL v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                BOOL v66 = (char *)a1[1];
              }
              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              BOOL v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)BOOL v66 = v69;
          BOOL v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      char v91 = a1 + 3;
      if (v13) {
        __int16 v15 = (char *)sub_10000EEB0((uint64_t)(a1 + 3), v13);
      }
      else {
        __int16 v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        uint64_t v88 = operator new(0x1000uLL);
        sub_100011868(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        float v39 = (void *)a1[1];
        int v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              char v49 = (char *)sub_10000EEB0((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              int v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                int v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              int v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                int v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              unint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                int v40 = (char *)__p[1];
              }
              int v47 = &v40[-8 * (v44 >> 1)];
              int v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)int v40 = *v39;
          int v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          float v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      unint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_100011980((uint64_t)__p, v57);
      }
      int v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_10003FE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10003FE7C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

void sub_10003FEE0(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

uint64_t CLKappaAlgFlowController::CLKappaAlgFlowController(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  *(void *)a1 = off_1003A15E8;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(unsigned char *)(a1 + 560) = a3;
  id v6 = v5;
  *(void *)(a1 + 568) = v6;
  sub_100046C8C(&qword_1003393F8, &qword_100339400, buf);
  long long v7 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 552);
  *(_OWORD *)(a1 + 544) = v7;
  if (v8)
  {
    sub_10000BB9C(v8);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 120;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  sub_100046E68(buf);
  long long v9 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v9;
  if (v10)
  {
    sub_10000BB9C(v10);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100046FAC(buf);
  long long v11 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  unint64_t v12 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v11;
  if (v12)
  {
    sub_10000BB9C(v12);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_1000470F0(buf);
  long long v13 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  unint64_t v14 = *(std::__shared_weak_count **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = v13;
  if (v14)
  {
    sub_10000BB9C(v14);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100047234(buf);
  long long v15 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = v15;
  if (v16)
  {
    sub_10000BB9C(v16);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100047378(buf);
  long long v17 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 120);
  *(_OWORD *)(a1 + 112) = v17;
  if (v18)
  {
    sub_10000BB9C(v18);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_1000474BC(buf);
  long long v19 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 136);
  *(_OWORD *)(a1 + 128) = v19;
  if (v20)
  {
    sub_10000BB9C(v20);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100047600(buf);
  long long v21 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  BOOL v22 = *(std::__shared_weak_count **)(a1 + 152);
  *(_OWORD *)(a1 + 144) = v21;
  if (v22)
  {
    sub_10000BB9C(v22);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100047744(buf);
  long long v23 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 168);
  *(_OWORD *)(a1 + 160) = v23;
  if (v24)
  {
    sub_10000BB9C(v24);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100047888(buf);
  long long v25 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  int64_t v26 = *(std::__shared_weak_count **)(a1 + 184);
  *(_OWORD *)(a1 + 176) = v25;
  if (v26)
  {
    sub_10000BB9C(v26);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_1000479CC(buf);
  long long v27 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  unint64_t v28 = *(std::__shared_weak_count **)(a1 + 200);
  *(_OWORD *)(a1 + 192) = v27;
  if (v28)
  {
    sub_10000BB9C(v28);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100047B10(buf);
  long long v29 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v30 = *(std::__shared_weak_count **)(a1 + 216);
  *(_OWORD *)(a1 + 208) = v29;
  if (v30)
  {
    sub_10000BB9C(v30);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100047C54(buf);
  long long v31 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  float v32 = *(std::__shared_weak_count **)(a1 + 232);
  *(_OWORD *)(a1 + 224) = v31;
  if (v32)
  {
    sub_10000BB9C(v32);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100047D98(buf);
  long long v33 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v34 = *(std::__shared_weak_count **)(a1 + 248);
  *(_OWORD *)(a1 + 240) = v33;
  if (v34)
  {
    sub_10000BB9C(v34);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100047EDC(buf);
  long long v35 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v36 = *(std::__shared_weak_count **)(a1 + 264);
  *(_OWORD *)(a1 + 256) = v35;
  if (v36)
  {
    sub_10000BB9C(v36);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100048020(buf);
  long long v37 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v38 = *(std::__shared_weak_count **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = v37;
  if (v38)
  {
    sub_10000BB9C(v38);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100048164(buf);
  long long v39 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  int v40 = *(std::__shared_weak_count **)(a1 + 296);
  *(_OWORD *)(a1 + 288) = v39;
  if (v40)
  {
    sub_10000BB9C(v40);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_1000482A8(buf);
  long long v41 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v42 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v41;
  if (v42)
  {
    sub_10000BB9C(v42);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_1000483EC(buf);
  long long v43 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v44 = *(std::__shared_weak_count **)(a1 + 328);
  *(_OWORD *)(a1 + 320) = v43;
  if (v44)
  {
    sub_10000BB9C(v44);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100048530(buf);
  long long v45 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  int64_t v46 = *(std::__shared_weak_count **)(a1 + 344);
  *(_OWORD *)(a1 + 336) = v45;
  if (v46)
  {
    sub_10000BB9C(v46);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100048674(buf);
  long long v47 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  unint64_t v48 = *(std::__shared_weak_count **)(a1 + 360);
  *(_OWORD *)(a1 + 352) = v47;
  if (v48)
  {
    sub_10000BB9C(v48);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_1000487B8(buf);
  long long v49 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v50 = *(std::__shared_weak_count **)(a1 + 376);
  *(_OWORD *)(a1 + 368) = v49;
  if (v50)
  {
    sub_10000BB9C(v50);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_1000488FC(buf);
  long long v51 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v52 = *(std::__shared_weak_count **)(a1 + 392);
  *(_OWORD *)(a1 + 384) = v51;
  if (v52)
  {
    sub_10000BB9C(v52);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100048A40(buf);
  long long v53 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v54 = *(std::__shared_weak_count **)(a1 + 408);
  *(_OWORD *)(a1 + 400) = v53;
  if (v54)
  {
    sub_10000BB9C(v54);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100048B84(buf);
  long long v55 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  int v56 = *(std::__shared_weak_count **)(a1 + 424);
  *(_OWORD *)(a1 + 416) = v55;
  if (v56)
  {
    sub_10000BB9C(v56);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100048CC8(buf);
  long long v57 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v58 = *(std::__shared_weak_count **)(a1 + 440);
  *(_OWORD *)(a1 + 432) = v57;
  if (v58)
  {
    sub_10000BB9C(v58);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  uint64_t v59 = *(void *)(a1 + 56);
  *(void *)long long buf = *(void *)(a1 + 48);
  *(void *)&uint8_t buf[8] = v59;
  if (v59) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v60 = *(void *)(a1 + 72);
  uint64_t v106 = *(void *)(a1 + 64);
  uint64_t v107 = v60;
  if (v60) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v61 = *(void *)(a1 + 88);
  uint64_t v108 = *(void *)(a1 + 80);
  uint64_t v109 = v61;
  if (v61) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v62 = *(void *)(a1 + 104);
  uint64_t v110 = *(void *)(a1 + 96);
  uint64_t v111 = v62;
  if (v62) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v63 = *(void *)(a1 + 120);
  uint64_t v112 = *(void *)(a1 + 112);
  uint64_t v113 = v63;
  if (v63) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v64 = *(void *)(a1 + 136);
  uint64_t v114 = *(void *)(a1 + 128);
  uint64_t v115 = v64;
  if (v64) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v65 = *(void *)(a1 + 152);
  uint64_t v116 = *(void *)(a1 + 144);
  uint64_t v117 = v65;
  if (v65) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v66 = *(void *)(a1 + 168);
  v118[0] = *(void *)(a1 + 160);
  v118[1] = v66;
  if (v66) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v66 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v67 = *(void *)(a1 + 184);
  v118[2] = *(void *)(a1 + 176);
  v118[3] = v67;
  if (v67) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v68 = *(void *)(a1 + 200);
  v118[4] = *(void *)(a1 + 192);
  v118[5] = v68;
  if (v68) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v69 = *(void *)(a1 + 216);
  v118[6] = *(void *)(a1 + 208);
  v118[7] = v69;
  if (v69) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v70 = *(void *)(a1 + 232);
  v118[8] = *(void *)(a1 + 224);
  v118[9] = v70;
  if (v70) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v71 = *(void *)(a1 + 248);
  v118[10] = *(void *)(a1 + 240);
  v118[11] = v71;
  if (v71) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v71 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v72 = *(void *)(a1 + 264);
  v118[12] = *(void *)(a1 + 256);
  v118[13] = v72;
  if (v72) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v73 = *(void *)(a1 + 280);
  v118[14] = *(void *)(a1 + 272);
  v118[15] = v73;
  if (v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000464A4(a1 + 448, (uint64_t *)buf, &v119, 0xFuLL);
  for (uint64_t i = 232; i != -8; i -= 16)
  {
    uint64_t v75 = *(std::__shared_weak_count **)&buf[i];
    if (v75) {
      sub_10000BB9C(v75);
    }
  }
  uint64_t v76 = *(void *)(a1 + 296);
  *(void *)long long buf = *(void *)(a1 + 288);
  *(void *)&uint8_t buf[8] = v76;
  if (v76) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v77 = *(void *)(a1 + 312);
  uint64_t v106 = *(void *)(a1 + 304);
  uint64_t v107 = v77;
  if (v77) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v77 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v78 = *(void *)(a1 + 328);
  uint64_t v108 = *(void *)(a1 + 320);
  uint64_t v109 = v78;
  if (v78) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v78 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v79 = *(void *)(a1 + 344);
  uint64_t v110 = *(void *)(a1 + 336);
  uint64_t v111 = v79;
  if (v79) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v79 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v80 = *(void *)(a1 + 360);
  uint64_t v112 = *(void *)(a1 + 352);
  uint64_t v113 = v80;
  if (v80) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v81 = *(void *)(a1 + 376);
  uint64_t v114 = *(void *)(a1 + 368);
  uint64_t v115 = v81;
  if (v81) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v82 = *(void *)(a1 + 392);
  uint64_t v116 = *(void *)(a1 + 384);
  uint64_t v117 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000464A4(a1 + 472, (uint64_t *)buf, v118, 7uLL);
  for (uint64_t j = 104; j != -8; j -= 16)
  {
    uint64_t v84 = *(std::__shared_weak_count **)&buf[j];
    if (v84) {
      sub_10000BB9C(v84);
    }
  }
  uint64_t v85 = *(void *)(a1 + 408);
  *(void *)long long buf = *(void *)(a1 + 400);
  *(void *)&uint8_t buf[8] = v85;
  if (v85) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v85 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v86 = *(void *)(a1 + 424);
  uint64_t v106 = *(void *)(a1 + 416);
  uint64_t v107 = v86;
  if (v86) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v87 = *(void *)(a1 + 440);
  uint64_t v108 = *(void *)(a1 + 432);
  uint64_t v109 = v87;
  if (v87) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000464A4(a1 + 496, (uint64_t *)buf, &v110, 3uLL);
  for (uint64_t k = 40; k != -8; k -= 16)
  {
    int v89 = *(std::__shared_weak_count **)&buf[k];
    if (v89) {
      sub_10000BB9C(v89);
    }
  }
  long long v90 = *(long long **)(a1 + 448);
  char v91 = *(long long **)(a1 + 456);
  while (v90 != v91)
    sub_100046884((uint64_t *)(a1 + 520), v90++);
  uint64_t v92 = *(long long **)(a1 + 472);
  uint64_t v93 = *(long long **)(a1 + 480);
  while (v92 != v93)
    sub_100046884((uint64_t *)(a1 + 520), v92++);
  uint64_t v94 = *(long long **)(a1 + 496);
  int v95 = *(long long **)(a1 + 504);
  while (v94 != v95)
    sub_100046884((uint64_t *)(a1 + 520), v94++);
  int v96 = *(unsigned __int8 *)(a1 + 560);
  if (v96 == 2)
  {
    if (qword_1003DB690 != -1) {
      dispatch_once(&qword_1003DB690, &stru_1003A1F08);
    }
    __int32 v99 = (id)qword_1003DB698;
    if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_INFO, "FC mode M", buf, 2u);
    }

    *(unsigned char *)(*(void *)(a1 + 48) + 25) = 0;
    *(unsigned char *)(*(void *)(a1 + 64) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 80) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 96) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 112) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 128) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 144) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 192) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 208) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 224) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 432) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 240) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 256) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 272) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 352) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 368) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 384) + 25) = 1;
    uint64_t v98 = *(void *)(a1 + 416);
    goto LABEL_162;
  }
  if (v96 == 1)
  {
    if (qword_1003DB690 != -1) {
      dispatch_once(&qword_1003DB690, &stru_1003A1F08);
    }
    int8x16_t v97 = (id)qword_1003DB698;
    if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_INFO, "FC mode K", buf, 2u);
    }

    *(unsigned char *)(*(void *)(a1 + 48) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 64) + 25) = 0;
    *(unsigned char *)(*(void *)(a1 + 80) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 96) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 112) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 128) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 144) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 160) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 176) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 192) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 208) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 224) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 432) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 240) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 256) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 272) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 288) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 304) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 320) + 25) = 1;
    *(unsigned char *)(*(void *)(a1 + 336) + 25) = 1;
    uint64_t v98 = *(void *)(a1 + 400);
LABEL_162:
    *(unsigned char *)(v98 + 25) = 1;
    goto LABEL_168;
  }
  if (qword_1003DB690 != -1) {
    dispatch_once(&qword_1003DB690, &stru_1003A1F08);
  }
  uint64_t v100 = (id)qword_1003DB698;
  if (os_log_type_enabled(v100, OS_LOG_TYPE_FAULT))
  {
    int v101 = *(unsigned __int8 *)(a1 + 560);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v101;
    _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_FAULT, "Unexpected mode %u - all algorithms will be disabled", buf, 8u);
  }

LABEL_168:
  __int16 v102 = *(void **)(a1 + 520);
  int v103 = *(void **)(a1 + 528);
  while (v102 != v103)
  {
    (*(void (**)(void, void))(*(void *)*v102 + 144))(*v102, *(unsigned __int8 *)(a1 + 560));
    v102 += 2;
  }
  CLKappaAlgFlowController::resetAlgConfigurations((CLKappaAlgFlowController *)a1);

  return a1;
}

void sub_100040B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11)
{
  long long v13 = *(std::__shared_weak_count **)(v11 + 552);
  if (v13) {
    sub_10000BB9C(v13);
  }
  sub_100046BF4((void ***)&a11);
  sub_100046BF4((void ***)&a11);
  sub_100046BF4((void ***)&a11);
  sub_100046BF4((void ***)&a11);
  unint64_t v14 = *(std::__shared_weak_count **)(v11 + 440);
  if (v14) {
    sub_10000BB9C(v14);
  }
  long long v15 = *(std::__shared_weak_count **)(v11 + 424);
  if (v15) {
    sub_10000BB9C(v15);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v11 + 408);
  if (v16) {
    sub_10000BB9C(v16);
  }
  long long v17 = *(std::__shared_weak_count **)(v11 + 392);
  if (v17) {
    sub_10000BB9C(v17);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v11 + 376);
  if (v18) {
    sub_10000BB9C(v18);
  }
  long long v19 = *(std::__shared_weak_count **)(v11 + 360);
  if (v19) {
    sub_10000BB9C(v19);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v11 + 344);
  if (v20) {
    sub_10000BB9C(v20);
  }
  long long v21 = *(std::__shared_weak_count **)(v11 + 328);
  if (v21) {
    sub_10000BB9C(v21);
  }
  BOOL v22 = *(std::__shared_weak_count **)(v11 + 312);
  if (v22) {
    sub_10000BB9C(v22);
  }
  long long v23 = *(std::__shared_weak_count **)(v11 + 296);
  if (v23) {
    sub_10000BB9C(v23);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v11 + 280);
  if (v24) {
    sub_10000BB9C(v24);
  }
  long long v25 = *(std::__shared_weak_count **)(v11 + 264);
  if (v25) {
    sub_10000BB9C(v25);
  }
  int64_t v26 = *(std::__shared_weak_count **)(v11 + 248);
  if (v26) {
    sub_10000BB9C(v26);
  }
  long long v27 = *(std::__shared_weak_count **)(v11 + 232);
  if (v27) {
    sub_10000BB9C(v27);
  }
  unint64_t v28 = *(std::__shared_weak_count **)(v11 + 216);
  if (v28) {
    sub_10000BB9C(v28);
  }
  long long v29 = *(std::__shared_weak_count **)(v11 + 200);
  if (v29) {
    sub_10000BB9C(v29);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v11 + 184);
  if (v30) {
    sub_10000BB9C(v30);
  }
  long long v31 = *(std::__shared_weak_count **)(v11 + 168);
  if (v31) {
    sub_10000BB9C(v31);
  }
  float v32 = *(std::__shared_weak_count **)(v11 + 152);
  if (v32) {
    sub_10000BB9C(v32);
  }
  long long v33 = *(std::__shared_weak_count **)(v11 + 136);
  if (v33) {
    sub_10000BB9C(v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v11 + 120);
  if (v34) {
    sub_10000BB9C(v34);
  }
  long long v35 = *(std::__shared_weak_count **)(v11 + 104);
  if (v35) {
    sub_10000BB9C(v35);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(v11 + 88);
  if (v36) {
    sub_10000BB9C(v36);
  }
  long long v37 = *(std::__shared_weak_count **)(v11 + 72);
  if (v37) {
    sub_10000BB9C(v37);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v11 + 56);
  if (v38) {
    sub_10000BB9C(v38);
  }

  _Unwind_Resume(a1);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::resetAlgConfigurations(CLKappaAlgFlowController *this)
{
  uint64_t v1 = (CLKappaAlgFlowController **)*((void *)this + 65);
  int v2 = (CLKappaAlgFlowController **)*((void *)this + 66);
  while (v1 != v2)
  {
    this = *v1;
    if (*((unsigned char *)*v1 + 25)) {
      this = (CLKappaAlgFlowController *)(*(uint64_t (**)(CLKappaAlgFlowController *))(*(void *)this + 312))(this);
    }
    v1 += 2;
  }
  return this;
}

CLKappaAlgFlowController *CLKappaAlgFlowController::setMaxTriggerSessionTime(CLKappaAlgFlowController *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 8)) {
    *((void *)this + 4) = a2;
  }
  return this;
}

void CLKappaAlgFlowController::feedFastAccel(CLKappaAlgFlowController *this, CSSPUAccel800 *a2)
{
  int v3 = a2;
  unint64_t v4 = *((void *)this + 3);
  if (v4 <= *(void *)[(CSSPUTriad *)v3 c_struct] + 30000000)
  {
    uint64_t v5 = *((void *)this + 68);
    unint64_t v6 = [(CSSPUTriad *)v3 timestamp];
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8 == -1 || *(void *)(v5 + 8) * v8 <= v6)
    {
      long long v9 = (void *)*((void *)this + 65);
      uint64_t v10 = (void *)*((void *)this + 66);
      while (v9 != v10)
      {
        if (*(unsigned char *)(*v9 + 25))
        {
          if (*((unsigned char *)this + 8)) {
            (*(void (**)(void, CSSPUTriad_Struct *))(*(void *)*v9 + 16))(*v9, [(CSSPUTriad *)v3 c_struct]);
          }
        }
        v9 += 2;
      }
      if (*((unsigned char *)this + 8))
      {
        *(void *)&long long v7 = 134217984;
        long long v20 = v7;
        while (1)
        {
          uint64_t v11 = (void *)*((void *)this + 68);
          unint64_t v12 = [(CSSPUTriad *)v3 timestamp];
          unint64_t v13 = v11[1];
          uint64_t v14 = v11[2];
          if (v14 == -1) {
            break;
          }
          if (*v11 + v13 * v14 > v12) {
            goto LABEL_24;
          }
          if (qword_1003DB690 != -1) {
            dispatch_once(&qword_1003DB690, &stru_1003A1F08);
          }
          long long v15 = (id)qword_1003DB698;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            unint64_t v16 = [(CSSPUTriad *)v3 timestamp];
            *(_DWORD *)long long buf = v20;
            unint64_t v22 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "closing epoch because of feedFastAccel t=%llu", buf, 0xCu);
          }

          long long v17 = (void *)*((void *)this + 68);
          uint64_t v18 = v17[2];
          if (v18 == -1) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = *v17 + v17[1] * v18;
          }
          if (!CLKappaAlgFlowController::closeEpoch(this, v19 - 1)) {
            goto LABEL_25;
          }
        }
        v11[2] = v12 / v13;
LABEL_24:
        CSKappaEpochBuffer::feedFastAccel(*((id **)this + 68), v3);
      }
    }
  }
LABEL_25:
}

void sub_1000410A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLKappaAlgFlowController::closeEpoch(CLKappaAlgFlowController *this, unint64_t a2)
{
  if (qword_1003DB690 != -1) {
    dispatch_once(&qword_1003DB690, &stru_1003A1F08);
  }
  unint64_t v4 = (id)qword_1003DB698;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134218240;
    *(void *)long long v57 = a2;
    *(_WORD *)&v57[8] = 2048;
    *(void *)&v57[10] = +[CSTimeManager SPU_estimate_current_timestamp];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%llu closeEpoch now %llu", buf, 0x16u);
  }

  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 69);
  uint64_t v49 = *((void *)this + 68);
  uint64_t v50 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CSKappaEpochBufferIterator::CSKappaEpochBufferIterator((uint64_t)buf, &v49);
  if (v50) {
    sub_10000BB9C(v50);
  }
  unint64_t v6 = 0;
  while (1)
  {
    long long v7 = CSKappaEpochBufferIterator::getNextSample((CSKappaEpochBufferIterator *)buf);

    if (!v7) {
      break;
    }
    unint64_t v6 = v7;
    CLKappaAlgFlowController::feedEpochFunctions((uint64_t)this, v7);
  }
  uint64_t v8 = (void *)*((void *)this + 56);
  for (uint64_t i = (void *)*((void *)this + 57); v8 != i; v8 += 2)
  {
    uint64_t v10 = *v8;
    if (*(unsigned char *)(*v8 + 25))
    {
      uint64_t v11 = *((void *)this + 69);
      *(void *)long long v53 = *((void *)this + 68);
      *(void *)&v53[8] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 152))(v10, v53);
      if (*(void *)&v53[8]) {
        sub_10000BB9C(*(std::__shared_weak_count **)&v53[8]);
      }
      (*(void (**)(void, unint64_t))(*(void *)*v8 + 168))(*v8, a2);
      (*(void (**)(unsigned char **__return_ptr))(*(void *)*v8 + 160))(&v51);
      uint64_t v12 = *((void *)this + 59);
      uint64_t v13 = *((void *)this + 60);
      while (v12 != v13)
      {
        if (*(unsigned char *)(*(void *)v12 + 25)) {
          (*(void (**)(unsigned char *))(*(void *)v51 + 16))(v51);
        }
        v12 += 16;
      }
      uint64_t v14 = *((void *)this + 62);
      uint64_t v15 = *((void *)this + 63);
      while (v14 != v15)
      {
        if (*(unsigned char *)(*(void *)v14 + 25)) {
          (*(void (**)(unsigned char *))(*(void *)v51 + 16))(v51);
        }
        v14 += 16;
      }
      (*(void (**)(unsigned char *))(*(void *)v51 + 32))(v51);
      if (v52) {
        sub_10000BB9C(v52);
      }
    }
  }
  unint64_t v16 = (void *)*((void *)this + 59);
  for (uint64_t j = (void *)*((void *)this + 60); v16 != j; v16 += 2)
  {
    uint64_t v18 = *v16;
    if (*(unsigned char *)(*v16 + 25))
    {
      uint64_t v19 = *((void *)this + 69);
      *(void *)long long v53 = *((void *)this + 68);
      *(void *)&v53[8] = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v18 + 152))(v18, v53);
      if (*(void *)&v53[8]) {
        sub_10000BB9C(*(std::__shared_weak_count **)&v53[8]);
      }
      (*(void (**)(void, unint64_t))(*(void *)*v16 + 168))(*v16, a2);
      (*(void (**)(unsigned char **__return_ptr))(*(void *)*v16 + 160))(&v51);
      uint64_t v20 = *((void *)this + 62);
      uint64_t v21 = *((void *)this + 63);
      while (v20 != v21)
      {
        if (*(unsigned char *)(*(void *)v20 + 25)) {
          (*(void (**)(unsigned char *))(*(void *)v51 + 16))(v51);
        }
        v20 += 16;
      }
      (*(void (**)(unsigned char *))(*(void *)v51 + 32))(v51);
      if (v52) {
        sub_10000BB9C(v52);
      }
    }
  }
  unint64_t v22 = (void *)*((void *)this + 62);
  for (uint64_t k = (void *)*((void *)this + 63); v22 != k; v22 += 2)
  {
    uint64_t v24 = *v22;
    if (*(unsigned char *)(*v22 + 25))
    {
      uint64_t v25 = *((void *)this + 69);
      *(void *)long long v53 = *((void *)this + 68);
      *(void *)&v53[8] = v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v24 + 152))(v24, v53);
      if (*(void *)&v53[8]) {
        sub_10000BB9C(*(std::__shared_weak_count **)&v53[8]);
      }
      (*(void (**)(void, unint64_t))(*(void *)*v22 + 168))(*v22, a2);
      (*(void (**)(unsigned char **__return_ptr))(*(void *)*v22 + 160))(&v51);
      (*(void (**)(unsigned char *))(*(void *)v51 + 32))(v51);
      if (v52) {
        sub_10000BB9C(v52);
      }
    }
  }
  if (!*((unsigned char *)this + 40) && *(unsigned char *)(*((void *)this + 42) + 25))
  {
    if (qword_1003DB690 != -1) {
      dispatch_once(&qword_1003DB690, &stru_1003A1F08);
    }
    uint64_t v36 = (id)qword_1003DB698;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "overriding SC de", v53, 2u);
    }

    uint64_t v38 = *((void *)this + 50);
    long long v37 = (std::__shared_weak_count *)*((void *)this + 51);
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v47 = v38;
    unint64_t v48 = v37;
    sub_100044E78((uint64_t)&v47, v53);
    if (v48) {
      sub_10000BB9C(v48);
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v53 + 160))(&v45);
    sub_100038EC8((uint64_t)&v45, &v51);
    if (v46) {
      sub_10000BB9C(v46);
    }
    long long v39 = v52;
    v51[48] = 0;
    if (v39) {
      sub_10000BB9C(v39);
    }
    if (*(void *)&v53[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&v53[8]);
    }
  }
  if (qword_1003DB690 != -1) {
    dispatch_once(&qword_1003DB690, &stru_1003A1F08);
  }
  int64_t v26 = (id)qword_1003DB698;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = *((_DWORD *)this + 3);
    uint64_t v28 = *((void *)this + 2);
    if (v28) {
      uint64_t v29 = a2 - v28;
    }
    else {
      uint64_t v29 = 0;
    }
    *(_DWORD *)long long v53 = 67240704;
    *(_DWORD *)&v53[4] = v27;
    *(_WORD *)&v53[8] = 2050;
    *(void *)&v53[10] = a2;
    __int16 v54 = 2050;
    uint64_t v55 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "close epoch cnt %{public}d, ts %{public}llu, delta microseconds %{public}llu", v53, 0x1Cu);
  }

  [*((id *)this + 71) onCloseEpoch:a2 epochNumber:(*((_DWORD *)this + 3))++];
  uint64_t v30 = *((void *)this + 2);
  if (v30)
  {
    long long v31 = (void *)*((void *)this + 65);
    float v32 = (void *)*((void *)this + 66);
    while (1)
    {
      if (v31 == v32)
      {
        if (qword_1003DB690 != -1) {
          dispatch_once(&qword_1003DB690, &stru_1003A1F08);
        }
        long long v33 = (id)qword_1003DB698;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v34 = a2 - *((void *)this + 2);
          *(_DWORD *)long long v53 = 134349056;
          *(void *)&v53[4] = v34;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "stopping %{public}llu microseconds after trigger", v53, 0xCu);
        }

        CLKappaAlgFlowController::stop(this, a2);
        goto LABEL_72;
      }
      if ((*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)*v31 + 136))(*v31, a2, v30)) {
        break;
      }
      v31 += 2;
    }
    if (*((void *)this + 2) + 1000000 * *((void *)this + 4) < a2)
    {
      if (qword_1003DB690 != -1) {
        dispatch_once(&qword_1003DB690, &stru_1003A1F08);
      }
      int v40 = qword_1003DB698;
      if (os_log_type_enabled((os_log_t)qword_1003DB698, OS_LOG_TYPE_FAULT))
      {
        unint64_t v41 = a2 - *((void *)this + 2);
        *(_DWORD *)long long v53 = 134217984;
        *(void *)&v53[4] = v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "forcing stop %llu microseconds after trigger", v53, 0xCu);
      }
      CLKappaAlgFlowController::stop(this, a2);
LABEL_72:
      uint64_t v35 = 0;
      goto LABEL_100;
    }
  }
  uint64_t v42 = (void *)*((void *)this + 65);
  long long v43 = (void *)*((void *)this + 66);
  while (v42 != v43)
  {
    if (*(unsigned char *)(*v42 + 25)) {
      (*(void (**)(void, unint64_t))(*(void *)*v42 + 176))(*v42, a2);
    }
    v42 += 2;
  }
  CSKappaEpochBuffer::advanceEpoch(*((CSKappaEpochBuffer **)this + 68));
  uint64_t v35 = 1;
LABEL_100:
  if (*(void *)&v57[4]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&v57[4]);
  }
  return v35;
}

void sub_1000419D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a18) {
    sub_10000BB9C(a18);
  }
  if (a22) {
    sub_10000BB9C(a22);
  }
  _Unwind_Resume(exception_object);
}

void CLKappaAlgFlowController::feedAccel(CLKappaAlgFlowController *this, CSSPUAccel *a2)
{
  int v3 = a2;
  unint64_t v4 = *((void *)this + 3);
  if (v4 <= *(void *)[(CSSPUTriad *)v3 c_struct] + 30000000)
  {
    uint64_t v5 = *((void *)this + 68);
    unint64_t v6 = [(CSSPUTriad *)v3 timestamp];
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8 == -1 || *(void *)(v5 + 8) * v8 <= v6)
    {
      long long v9 = (void *)*((void *)this + 65);
      uint64_t v10 = (void *)*((void *)this + 66);
      while (v9 != v10)
      {
        if (*(unsigned char *)(*v9 + 25))
        {
          if (*((unsigned char *)this + 8)) {
            (*(void (**)(void, CSSPUTriad_Struct *))(*(void *)*v9 + 24))(*v9, [(CSSPUTriad *)v3 c_struct]);
          }
        }
        v9 += 2;
      }
      if (*((unsigned char *)this + 8))
      {
        *(void *)&long long v7 = 134217984;
        long long v20 = v7;
        while (1)
        {
          uint64_t v11 = (void *)*((void *)this + 68);
          unint64_t v12 = [(CSSPUTriad *)v3 timestamp];
          unint64_t v13 = v11[1];
          uint64_t v14 = v11[2];
          if (v14 == -1) {
            break;
          }
          if (*v11 + v13 * v14 > v12) {
            goto LABEL_24;
          }
          if (qword_1003DB690 != -1) {
            dispatch_once(&qword_1003DB690, &stru_1003A1F08);
          }
          uint64_t v15 = (id)qword_1003DB698;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            unint64_t v16 = [(CSSPUTriad *)v3 timestamp];
            *(_DWORD *)long long buf = v20;
            unint64_t v22 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "closing epoch because of feedAccel t=%llu", buf, 0xCu);
          }

          long long v17 = (void *)*((void *)this + 68);
          uint64_t v18 = v17[2];
          if (v18 == -1) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = *v17 + v17[1] * v18;
          }
          if (!CLKappaAlgFlowController::closeEpoch(this, v19 - 1)) {
            goto LABEL_25;
          }
        }
        v11[2] = v12 / v13;
LABEL_24:
        CSKappaEpochBuffer::feedAccel(*((id **)this + 68), v3);
      }
    }
  }
LABEL_25:
}

void sub_100041CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedHgAccel(CLKappaAlgFlowController *this, CSSPUHgAccel *a2)
{
  int v3 = a2;
  unint64_t v4 = *((void *)this + 3);
  if (v4 <= *(void *)[(CSSPUTriad *)v3 c_struct] + 30000000)
  {
    uint64_t v5 = *((void *)this + 68);
    unint64_t v6 = [(CSSPUTriad *)v3 timestamp];
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8 == -1 || *(void *)(v5 + 8) * v8 <= v6)
    {
      long long v9 = (void *)*((void *)this + 65);
      uint64_t v10 = (void *)*((void *)this + 66);
      while (v9 != v10)
      {
        if (*(unsigned char *)(*v9 + 25))
        {
          if (*((unsigned char *)this + 8)) {
            (*(void (**)(void, CSSPUTriad_Struct *))(*(void *)*v9 + 32))(*v9, [(CSSPUTriad *)v3 c_struct]);
          }
        }
        v9 += 2;
      }
      if (*((unsigned char *)this + 8))
      {
        *(void *)&long long v7 = 134217984;
        long long v20 = v7;
        while (1)
        {
          uint64_t v11 = (void *)*((void *)this + 68);
          unint64_t v12 = [(CSSPUTriad *)v3 timestamp];
          unint64_t v13 = v11[1];
          uint64_t v14 = v11[2];
          if (v14 == -1) {
            break;
          }
          if (*v11 + v13 * v14 > v12) {
            goto LABEL_24;
          }
          if (qword_1003DB690 != -1) {
            dispatch_once(&qword_1003DB690, &stru_1003A1F08);
          }
          uint64_t v15 = (id)qword_1003DB698;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            unint64_t v16 = [(CSSPUTriad *)v3 timestamp];
            *(_DWORD *)long long buf = v20;
            unint64_t v22 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "closing epoch because of feedHgAccel t=%llu", buf, 0xCu);
          }

          long long v17 = (void *)*((void *)this + 68);
          uint64_t v18 = v17[2];
          if (v18 == -1) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = *v17 + v17[1] * v18;
          }
          if (!CLKappaAlgFlowController::closeEpoch(this, v19 - 1)) {
            goto LABEL_25;
          }
        }
        v11[2] = v12 / v13;
LABEL_24:
        CSKappaEpochBuffer::feedHgAccel(*((id **)this + 68), v3);
      }
    }
  }
LABEL_25:
}

void sub_100041F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedPressure(CLKappaAlgFlowController *this, CSSPUPressure *a2)
{
  int v3 = a2;
  unint64_t v4 = *((void *)this + 3);
  if (v4 <= *(void *)[(CSSPUPressure *)v3 c_struct] + 30000000)
  {
    uint64_t v5 = *((void *)this + 68);
    unint64_t v6 = [(CSSPUPressure *)v3 timestamp];
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8 == -1 || *(void *)(v5 + 8) * v8 <= v6)
    {
      long long v9 = (void *)*((void *)this + 65);
      uint64_t v10 = (void *)*((void *)this + 66);
      while (v9 != v10)
      {
        if (*(unsigned char *)(*v9 + 25))
        {
          if (*((unsigned char *)this + 8)) {
            (*(void (**)(void, FastUncompPressure *))(*(void *)*v9 + 40))(*v9, [(CSSPUPressure *)v3 c_struct]);
          }
        }
        v9 += 2;
      }
      if (*((unsigned char *)this + 8))
      {
        *(void *)&long long v7 = 134217984;
        long long v20 = v7;
        while (1)
        {
          uint64_t v11 = (void *)*((void *)this + 68);
          unint64_t v12 = [(CSSPUPressure *)v3 timestamp];
          unint64_t v13 = v11[1];
          uint64_t v14 = v11[2];
          if (v14 == -1) {
            break;
          }
          if (*v11 + v13 * v14 > v12) {
            goto LABEL_24;
          }
          if (qword_1003DB690 != -1) {
            dispatch_once(&qword_1003DB690, &stru_1003A1F08);
          }
          uint64_t v15 = (id)qword_1003DB698;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            unint64_t v16 = [(CSSPUPressure *)v3 timestamp];
            *(_DWORD *)long long buf = v20;
            unint64_t v22 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "closing epoch because of feedPressure t=%llu", buf, 0xCu);
          }

          long long v17 = (void *)*((void *)this + 68);
          uint64_t v18 = v17[2];
          if (v18 == -1) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = *v17 + v17[1] * v18;
          }
          if (!CLKappaAlgFlowController::closeEpoch(this, v19 - 1)) {
            goto LABEL_25;
          }
        }
        v11[2] = v12 / v13;
LABEL_24:
        CSKappaEpochBuffer::feedPressure(*((id **)this + 68), v3);
      }
    }
  }
LABEL_25:
}

void sub_100042188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedDM(CLKappaAlgFlowController *this, CSSPUDM *a2)
{
  int v3 = a2;
  unint64_t v4 = *((void *)this + 3);
  if (v4 <= *(void *)((char *)[(CSSPUDM *)v3 c_struct] + 42) + 3000000)
  {
    uint64_t v5 = *((void *)this + 68);
    unint64_t v6 = [(CSSPUDM *)v3 timestamp];
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8 == -1 || *(void *)(v5 + 8) * v8 <= v6)
    {
      long long v9 = (void *)*((void *)this + 65);
      uint64_t v10 = (void *)*((void *)this + 66);
      while (v9 != v10)
      {
        if (*(unsigned char *)(*v9 + 25))
        {
          if (*((unsigned char *)this + 8)) {
            (*(void (**)(void, DMSample *))(*(void *)*v9 + 48))(*v9, [(CSSPUDM *)v3 c_struct]);
          }
        }
        v9 += 2;
      }
      if (*((unsigned char *)this + 8))
      {
        *(void *)&long long v7 = 134217984;
        long long v20 = v7;
        while (1)
        {
          uint64_t v11 = (void *)*((void *)this + 68);
          unint64_t v12 = [(CSSPUDM *)v3 timestamp];
          unint64_t v13 = v11[1];
          uint64_t v14 = v11[2];
          if (v14 == -1) {
            break;
          }
          if (*v11 + v13 * v14 > v12) {
            goto LABEL_24;
          }
          if (qword_1003DB690 != -1) {
            dispatch_once(&qword_1003DB690, &stru_1003A1F08);
          }
          uint64_t v15 = (id)qword_1003DB698;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            unint64_t v16 = [(CSSPUDM *)v3 timestamp];
            *(_DWORD *)long long buf = v20;
            unint64_t v22 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "closing epoch because of feedDM t=%llu", buf, 0xCu);
          }

          long long v17 = (void *)*((void *)this + 68);
          uint64_t v18 = v17[2];
          if (v18 == -1) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = *v17 + v17[1] * v18;
          }
          if (!CLKappaAlgFlowController::closeEpoch(this, v19 - 1)) {
            goto LABEL_25;
          }
        }
        v11[2] = v12 / v13;
LABEL_24:
        CSKappaEpochBuffer::feedDM(*((id **)this + 68), v3);
      }
    }
  }
LABEL_25:
}

void sub_1000423F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedAudioRms(CLKappaAlgFlowController *this, CSSPUSpl *a2)
{
  int v3 = a2;
  unint64_t v4 = *((void *)this + 3);
  if (v4 <= *(void *)[(CSSPUSpl *)v3 c_struct] + 30000000)
  {
    uint64_t v5 = *((void *)this + 68);
    unint64_t v6 = [(CSSPUSpl *)v3 timestamp];
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8 == -1 || *(void *)(v5 + 8) * v8 <= v6)
    {
      long long v9 = (void *)*((void *)this + 65);
      uint64_t v10 = (void *)*((void *)this + 66);
      while (v9 != v10)
      {
        if (*(unsigned char *)(*v9 + 25))
        {
          if (*((unsigned char *)this + 8)) {
            (*(void (**)(void, CSSPUSpl_Struct *))(*(void *)*v9 + 56))(*v9, [(CSSPUSpl *)v3 c_struct]);
          }
        }
        v9 += 2;
      }
      if (*((unsigned char *)this + 8))
      {
        *(void *)&long long v7 = 134217984;
        long long v20 = v7;
        while (1)
        {
          uint64_t v11 = (void *)*((void *)this + 68);
          unint64_t v12 = [(CSSPUSpl *)v3 timestamp];
          unint64_t v13 = v11[1];
          uint64_t v14 = v11[2];
          if (v14 == -1) {
            break;
          }
          if (*v11 + v13 * v14 > v12) {
            goto LABEL_24;
          }
          if (qword_1003DB690 != -1) {
            dispatch_once(&qword_1003DB690, &stru_1003A1F08);
          }
          uint64_t v15 = (id)qword_1003DB698;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            unint64_t v16 = [(CSSPUSpl *)v3 timestamp];
            *(_DWORD *)long long buf = v20;
            unint64_t v22 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "closing epoch because of feedAudioRms t=%llu", buf, 0xCu);
          }

          long long v17 = (void *)*((void *)this + 68);
          uint64_t v18 = v17[2];
          if (v18 == -1) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = *v17 + v17[1] * v18;
          }
          if (!CLKappaAlgFlowController::closeEpoch(this, v19 - 1)) {
            goto LABEL_25;
          }
        }
        v11[2] = v12 / v13;
LABEL_24:
        CSKappaEpochBuffer::feedAudioRms(*((id **)this + 68), v3);
      }
    }
  }
LABEL_25:
}

void sub_10004265C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedTrustedAudioResult(CLKappaAlgFlowController *this, CSSPUTrustedAudioResult *a2)
{
  int v3 = a2;
  if (qword_1003DB690 != -1) {
    dispatch_once(&qword_1003DB690, &stru_1003A1F08);
  }
  unint64_t v4 = (id)qword_1003DB698;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = *(void *)[(CSSPUTrustedAudioResult *)v3 c_struct];
    *(_DWORD *)long long buf = 134218240;
    unint64_t v26 = v5;
    __int16 v27 = 2048;
    unint64_t v28 = +[CSTimeManager SPU_estimate_current_timestamp];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "feed ta timestamp %llu now %llu", buf, 0x16u);
  }

  unint64_t v6 = *((void *)this + 3);
  if (v6 <= *(void *)[(CSSPUTrustedAudioResult *)v3 c_struct] + 30000000)
  {
    uint64_t v9 = *((void *)this + 68);
    unint64_t v10 = [(CSSPUTrustedAudioResult *)v3 timestamp];
    uint64_t v12 = *(void *)(v9 + 16);
    if (v12 == -1 || *(void *)(v9 + 8) * v12 <= v10)
    {
      unint64_t v13 = (void *)*((void *)this + 65);
      uint64_t v14 = (void *)*((void *)this + 66);
      while (v13 != v14)
      {
        if (*(unsigned char *)(*v13 + 25) && *((unsigned char *)this + 8)) {
          (*(void (**)(void, CSSPUTrustedAudioResult_Struct *))(*(void *)*v13 + 64))(*v13, [(CSSPUTrustedAudioResult *)v3 c_struct]);
        }
        v13 += 2;
      }
      if (*((unsigned char *)this + 8))
      {
        *(void *)&long long v11 = 134217984;
        long long v24 = v11;
        while (1)
        {
          uint64_t v15 = (void *)*((void *)this + 68);
          unint64_t v16 = [(CSSPUTrustedAudioResult *)v3 timestamp];
          unint64_t v17 = v15[1];
          uint64_t v18 = v15[2];
          if (v18 == -1) {
            break;
          }
          if (*v15 + v17 * v18 > v16) {
            goto LABEL_37;
          }
          if (qword_1003DB690 != -1) {
            dispatch_once(&qword_1003DB690, &stru_1003A1F08);
          }
          uint64_t v19 = (id)qword_1003DB698;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            unint64_t v20 = [(CSSPUTrustedAudioResult *)v3 timestamp];
            *(_DWORD *)long long buf = v24;
            unint64_t v26 = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "closing epoch because of feedTrustedAudioResult t=%llu", buf, 0xCu);
          }

          uint64_t v21 = (void *)*((void *)this + 68);
          uint64_t v22 = v21[2];
          if (v22 == -1) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = *v21 + v21[1] * v22;
          }
          if (!CLKappaAlgFlowController::closeEpoch(this, v23 - 1)) {
            goto LABEL_38;
          }
        }
        void v15[2] = v16 / v17;
LABEL_37:
        CSKappaEpochBuffer::feedTrustedAudioResult(*((id **)this + 68), v3);
      }
    }
    else
    {
      if (qword_1003DB690 != -1) {
        dispatch_once(&qword_1003DB690, &stru_1003A1F08);
      }
      long long v7 = qword_1003DB698;
      if (os_log_type_enabled((os_log_t)qword_1003DB698, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v8 = "TrustedAudio is late!";
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (qword_1003DB690 != -1) {
      dispatch_once(&qword_1003DB690, &stru_1003A1F08);
    }
    long long v7 = qword_1003DB698;
    if (os_log_type_enabled((os_log_t)qword_1003DB698, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v8 = "TrustedAudio is before pre-trigger limit";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v8, buf, 2u);
    }
  }
LABEL_38:
}

void sub_100042A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedTrigger(CLKappaAlgFlowController *this, CSSPUKappaTrigger *a2)
{
  int v3 = a2;
  unint64_t v4 = *((void *)this + 3);
  if (v4 > *((void *)[(CSSPUKappaTrigger *)v3 c_struct] + 1) + 30000000) {
    goto LABEL_49;
  }
  uint64_t v5 = *((void *)this + 68);
  unint64_t v6 = [(CSSPUKappaTrigger *)v3 timestamp];
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7 != -1 && *(void *)(v5 + 8) * v7 > v6) {
    goto LABEL_49;
  }
  uint64_t v8 = [(CSSPUKappaTrigger *)v3 c_struct];
  int v9 = *((unsigned __int8 *)this + 560);
  if (v9 == 2)
  {
    if ((v8[1].rmsSN & 0xD0000) != 0)
    {
      BOOL v11 = (*((unsigned char *)[(CSSPUKappaTrigger *)v3 c_struct] + 46) & 0x10) == 0;
      int v13 = *((unsigned __int8 *)this + 560);
      if (v13 == 2)
      {
        if ((*((unsigned char *)[(CSSPUKappaTrigger *)v3 c_struct] + 46) & 0x10) != 0) {
          int v10 = (*((unsigned __int8 *)[(CSSPUKappaTrigger *)v3 c_struct] + 93) >> 1) & 1;
        }
        else {
          int v10 = 0;
        }
        int v13 = *((unsigned __int8 *)this + 560);
      }
      else
      {
        int v10 = 0;
      }
      if (v13 != 1) {
        goto LABEL_24;
      }
      goto LABEL_21;
    }
LABEL_12:
    if (qword_1003DB690 != -1) {
      dispatch_once(&qword_1003DB690, &stru_1003A1F08);
    }
    uint64_t v14 = (id)qword_1003DB698;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *((unsigned __int8 *)this + 560);
      int v16 = *((unsigned __int8 *)[(CSSPUKappaTrigger *)v3 c_struct] + 1);
      int v17 = *((unsigned __int8 *)[(CSSPUKappaTrigger *)v3 c_struct] + 46);
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)long long v31 = v15;
      *(_WORD *)&v31[4] = 1024;
      *(_DWORD *)&v31[6] = v16;
      __int16 v32 = 1024;
      int v33 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Ignoring at FC feedTrigger: [%u %u %u]", buf, 0x14u);
    }

    goto LABEL_49;
  }
  if (v9 != 1 || (v8->path & 0xF) == 0) {
    goto LABEL_12;
  }
  int v10 = 0;
  BOOL v11 = 0;
LABEL_21:
  if ((*((unsigned char *)[(CSSPUKappaTrigger *)v3 c_struct] + 1) & 0x10) == 0)
  {
    *((void *)this + 2) = *((void *)[(CSSPUKappaTrigger *)v3 c_struct] + 1);
    if ((*((unsigned char *)[(CSSPUKappaTrigger *)v3 c_struct] + 1) & 3) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_24:
  if (!v11 && !v10) {
    goto LABEL_28;
  }
  *((void *)this + 2) = *((void *)[(CSSPUKappaTrigger *)v3 c_struct] + 1);
  if ((*((unsigned char *)[(CSSPUKappaTrigger *)v3 c_struct] + 46) & 1) == 0) {
    goto LABEL_28;
  }
LABEL_27:
  *((unsigned char *)this + 40) = 1;
LABEL_28:
  uint64_t v18 = (void *)*((void *)this + 65);
  uint64_t v19 = (void *)*((void *)this + 66);
  while (v18 != v19)
  {
    if (*(unsigned char *)(*v18 + 25))
    {
      if (*((unsigned char *)this + 8)) {
        (*(void (**)(void, TriggerSample *))(*(void *)*v18 + 72))(*v18, [(CSSPUKappaTrigger *)v3 c_struct]);
      }
    }
    v18 += 2;
  }
  if (*((unsigned char *)this + 8))
  {
    *(void *)&long long v12 = 134217984;
    long long v29 = v12;
    while (1)
    {
      unint64_t v20 = (void *)*((void *)this + 68);
      unint64_t v21 = [(CSSPUKappaTrigger *)v3 timestamp];
      unint64_t v22 = v20[1];
      uint64_t v23 = v20[2];
      if (v23 == -1) {
        break;
      }
      if (*v20 + v22 * v23 > v21) {
        goto LABEL_48;
      }
      if (qword_1003DB690 != -1) {
        dispatch_once(&qword_1003DB690, &stru_1003A1F08);
      }
      long long v24 = (id)qword_1003DB698;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        unint64_t v25 = [(CSSPUKappaTrigger *)v3 timestamp];
        *(_DWORD *)long long buf = v29;
        *(void *)long long v31 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "closing epoch because of feedTrigger t=%llu", buf, 0xCu);
      }

      unint64_t v26 = (void *)*((void *)this + 68);
      uint64_t v27 = v26[2];
      if (v27 == -1) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = *v26 + v26[1] * v27;
      }
      if (!CLKappaAlgFlowController::closeEpoch(this, v28 - 1)) {
        goto LABEL_49;
      }
    }
    v20[2] = v21 / v22;
LABEL_48:
    CSKappaEpochBuffer::feedTrigger(*((id **)this + 68), v3);
  }
LABEL_49:
}

void sub_100042E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CLKappaAlgFlowController::isTriggerFor(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    unsigned int v2 = *(unsigned __int8 *)(a1 + 46);
    BOOL v3 = (v2 & 5) == 0;
  }
  else
  {
    if (a2 != 1) {
      return 0;
    }
    unsigned int v2 = *(unsigned __int8 *)(a1 + 1);
    BOOL v3 = (v2 & 7) == 0;
  }
  unsigned int v4 = (v2 >> 3) & 1;
  if (v3) {
    return v4;
  }
  else {
    return 1;
  }
}

void CLKappaAlgFlowController::feedGPS(CLKappaAlgFlowController *this, CSSPUGps *a2)
{
  BOOL v3 = a2;
  unint64_t v4 = *((void *)this + 3);
  if (v4 <= *((void *)[(CSSPUGps *)v3 c_struct] + 5) + 30000000)
  {
    uint64_t v5 = *((void *)this + 68);
    unint64_t v6 = [(CSSPUGps *)v3 timestamp];
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8 == -1 || *(void *)(v5 + 8) * v8 <= v6)
    {
      int v9 = (void *)*((void *)this + 65);
      int v10 = (void *)*((void *)this + 66);
      while (v9 != v10)
      {
        if (*(unsigned char *)(*v9 + 25))
        {
          if (*((unsigned char *)this + 8)) {
            (*(void (**)(void, CSSPUGps_Struct *))(*(void *)*v9 + 80))(*v9, [(CSSPUGps *)v3 c_struct]);
          }
        }
        v9 += 2;
      }
      if (*((unsigned char *)this + 8))
      {
        *(void *)&long long v7 = 134217984;
        long long v20 = v7;
        while (1)
        {
          BOOL v11 = (void *)*((void *)this + 68);
          unint64_t v12 = [(CSSPUGps *)v3 timestamp];
          unint64_t v13 = v11[1];
          uint64_t v14 = v11[2];
          if (v14 == -1) {
            break;
          }
          if (*v11 + v13 * v14 > v12) {
            goto LABEL_24;
          }
          if (qword_1003DB690 != -1) {
            dispatch_once(&qword_1003DB690, &stru_1003A1F08);
          }
          int v15 = (id)qword_1003DB698;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            unint64_t v16 = [(CSSPUGps *)v3 timestamp];
            *(_DWORD *)long long buf = v20;
            unint64_t v22 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "closing epoch because of feedGPS t=%llu", buf, 0xCu);
          }

          int v17 = (void *)*((void *)this + 68);
          uint64_t v18 = v17[2];
          if (v18 == -1) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = *v17 + v17[1] * v18;
          }
          if (!CLKappaAlgFlowController::closeEpoch(this, v19 - 1)) {
            goto LABEL_25;
          }
        }
        v11[2] = v12 / v13;
LABEL_24:
        CSKappaEpochBuffer::feedGPS(*((id **)this + 68), v3);
      }
    }
  }
LABEL_25:
}

void sub_100043110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedSteps(CLKappaAlgFlowController *this, CSSPUSteps *a2)
{
  BOOL v3 = a2;
  uint64_t v4 = *((void *)this + 68);
  unint64_t v5 = [(CSSPUSteps *)v3 timestamp];
  uint64_t v7 = *(void *)(v4 + 16);
  if (v7 == -1 || *(void *)(v4 + 8) * v7 <= v5)
  {
    uint64_t v8 = (void *)*((void *)this + 65);
    int v9 = (void *)*((void *)this + 66);
    while (v8 != v9)
    {
      if (*(unsigned char *)(*v8 + 25))
      {
        if (*((unsigned char *)this + 8)) {
          (*(void (**)(void, $E8645A448CE2A7E0C8EDB8E2381A0972 *))(*(void *)*v8 + 88))(*v8, [(CSSPUSteps *)v3 c_struct]);
        }
      }
      v8 += 2;
    }
    if (*((unsigned char *)this + 8))
    {
      *(void *)&long long v6 = 134217984;
      long long v19 = v6;
      while (1)
      {
        int v10 = (void *)*((void *)this + 68);
        unint64_t v11 = [(CSSPUSteps *)v3 timestamp];
        unint64_t v12 = v10[1];
        uint64_t v13 = v10[2];
        if (v13 == -1) {
          break;
        }
        if (*v10 + v12 * v13 > v11) {
          goto LABEL_23;
        }
        if (qword_1003DB690 != -1) {
          dispatch_once(&qword_1003DB690, &stru_1003A1F08);
        }
        uint64_t v14 = (id)qword_1003DB698;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          unint64_t v15 = [(CSSPUSteps *)v3 timestamp];
          *(_DWORD *)long long buf = v19;
          unint64_t v21 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "closing epoch because of feedSteps t=%llu", buf, 0xCu);
        }

        unint64_t v16 = (void *)*((void *)this + 68);
        uint64_t v17 = v16[2];
        if (v17 == -1) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = *v16 + v16[1] * v17;
        }
        if (!CLKappaAlgFlowController::closeEpoch(this, v18 - 1)) {
          goto LABEL_24;
        }
      }
      v10[2] = v11 / v12;
LABEL_23:
      CSKappaEpochBuffer::feedSteps(*((id **)this + 68), v3);
    }
  }
LABEL_24:
}

void sub_100043358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedRoads(CLKappaAlgFlowController *this, CSSPURoadInfo *a2)
{
  BOOL v3 = a2;
  uint64_t v4 = *((void *)this + 68);
  unint64_t v5 = [(CSSPURoadInfo *)v3 timestamp];
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6 == -1 || *(void *)(v4 + 8) * v6 <= v5)
  {
    if (qword_1003DB690 != -1) {
      dispatch_once(&qword_1003DB690, &stru_1003A1F08);
    }
    uint64_t v7 = (id)qword_1003DB698;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v8 = *(void *)[(CSSPURoadInfo *)v3 c_struct];
      uint64_t v9 = *((void *)[(CSSPURoadInfo *)v3 c_struct] + 1);
      float v10 = *((float *)[(CSSPURoadInfo *)v3 c_struct] + 5);
      int v11 = *((unsigned __int16 *)[(CSSPURoadInfo *)v3 c_struct] + 12);
      unint64_t v12 = [(CSSPURoadInfo *)v3 c_struct];
      uint64_t v13 = *((void *)[(CSSPURoadInfo *)v3 c_struct] + 12);
      *(_DWORD *)long long buf = 134219266;
      unint64_t v28 = v8;
      __int16 v29 = 2048;
      uint64_t v30 = v9;
      __int16 v31 = 2048;
      double v32 = v10;
      __int16 v33 = 1024;
      int v34 = v11;
      __int16 v35 = 2080;
      var5 = v12->var5;
      __int16 v37 = 2048;
      uint64_t v38 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%llu feedRoads [%f %f %d %s %ld]", buf, 0x3Au);
    }

    unint64_t v15 = (void *)*((void *)this + 65);
    unint64_t v16 = (void *)*((void *)this + 66);
    while (v15 != v16)
    {
      if (*(unsigned char *)(*v15 + 25))
      {
        if (*((unsigned char *)this + 8)) {
          (*(void (**)(void, $91562161B5B5ED3166D19FE68F9021FF *))(*(void *)*v15 + 96))(*v15, [(CSSPURoadInfo *)v3 c_struct]);
        }
      }
      v15 += 2;
    }
    if (*((unsigned char *)this + 8))
    {
      *(void *)&long long v14 = 134217984;
      long long v26 = v14;
      while (1)
      {
        uint64_t v17 = (void *)*((void *)this + 68);
        unint64_t v18 = [(CSSPURoadInfo *)v3 timestamp];
        unint64_t v19 = v17[1];
        uint64_t v20 = v17[2];
        if (v20 == -1) {
          break;
        }
        if (*v17 + v19 * v20 > v18) {
          goto LABEL_27;
        }
        if (qword_1003DB690 != -1) {
          dispatch_once(&qword_1003DB690, &stru_1003A1F08);
        }
        unint64_t v21 = (id)qword_1003DB698;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          unint64_t v22 = [(CSSPURoadInfo *)v3 timestamp];
          *(_DWORD *)long long buf = v26;
          unint64_t v28 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "closing epoch because of feedRoads t=%llu", buf, 0xCu);
        }

        uint64_t v23 = (void *)*((void *)this + 68);
        uint64_t v24 = v23[2];
        if (v24 == -1) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = *v23 + v23[1] * v24;
        }
        if (!CLKappaAlgFlowController::closeEpoch(this, v25 - 1)) {
          goto LABEL_28;
        }
      }
      v17[2] = v18 / v19;
LABEL_27:
      CSKappaEpochBuffer::feedRoads(*((id **)this + 68), v3);
    }
  }
LABEL_28:
}

void sub_1000436A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedHertzSample(CLKappaAlgFlowController *this, CSSPUHertzSample *a2)
{
  BOOL v3 = a2;
  unint64_t v4 = *((void *)this + 3);
  if (v4 <= [(CSSPUHertzSample *)v3 timestamp] + 30000000)
  {
    uint64_t v5 = *((void *)this + 68);
    unint64_t v6 = [(CSSPUHertzSample *)v3 timestamp];
    uint64_t v7 = *(void *)(v5 + 16);
    if (v7 == -1 || *(void *)(v5 + 8) * v7 <= v6)
    {
      if (qword_1003DB690 != -1) {
        dispatch_once(&qword_1003DB690, &stru_1003A1F08);
      }
      unint64_t v8 = (id)qword_1003DB698;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v9 = *(void *)[(CSSPUHertzSample *)v3 c_struct];
        int v10 = *((unsigned __int16 *)[(CSSPUHertzSample *)v3 c_struct] + 4);
        int v11 = *((unsigned __int8 *)[(CSSPUHertzSample *)v3 c_struct] + 10);
        *(_DWORD *)long long buf = 134218496;
        unint64_t v26 = v9;
        __int16 v27 = 1024;
        int v28 = v10;
        __int16 v29 = 1024;
        int v30 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%llu feedHertzSample [%d %d]", buf, 0x18u);
      }

      uint64_t v13 = (void *)*((void *)this + 65);
      long long v14 = (void *)*((void *)this + 66);
      while (v13 != v14)
      {
        if (*(unsigned char *)(*v13 + 25))
        {
          if (*((unsigned char *)this + 8)) {
            (*(void (**)(void, $E272AD5D86549EDF00629498E6BE4065 *))(*(void *)*v13 + 104))(*v13, [(CSSPUHertzSample *)v3 c_struct]);
          }
        }
        v13 += 2;
      }
      if (*((unsigned char *)this + 8))
      {
        *(void *)&long long v12 = 134217984;
        long long v24 = v12;
        while (1)
        {
          unint64_t v15 = (void *)*((void *)this + 68);
          unint64_t v16 = [(CSSPUHertzSample *)v3 timestamp];
          unint64_t v17 = v15[1];
          uint64_t v18 = v15[2];
          if (v18 == -1) {
            break;
          }
          if (*v15 + v17 * v18 > v16) {
            goto LABEL_28;
          }
          if (qword_1003DB690 != -1) {
            dispatch_once(&qword_1003DB690, &stru_1003A1F08);
          }
          unint64_t v19 = (id)qword_1003DB698;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            unint64_t v20 = [(CSSPUHertzSample *)v3 timestamp];
            *(_DWORD *)long long buf = v24;
            unint64_t v26 = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "closing epoch because of feedHertzSample t=%llu", buf, 0xCu);
          }

          unint64_t v21 = (void *)*((void *)this + 68);
          uint64_t v22 = v21[2];
          if (v22 == -1) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = *v21 + v21[1] * v22;
          }
          if (!CLKappaAlgFlowController::closeEpoch(this, v23 - 1)) {
            goto LABEL_29;
          }
        }
        void v15[2] = v16 / v17;
LABEL_28:
        CSKappaEpochBuffer::feedHertzSample(*((id **)this + 68), v3);
      }
    }
  }
LABEL_29:
}

void sub_1000439C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedMag(CLKappaAlgFlowController *this, CSSPUMag *a2)
{
  BOOL v3 = a2;
  unint64_t v4 = *((void *)this + 3);
  uint64_t v5 = v3;
  if (v4 <= *((void *)[(CSSPUMag *)v3 c_struct] + 2) + 30000000) {
    [(CSSPUMag *)v5 timestamp];
  }
}

void sub_100043A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedCompanionStatus(CLKappaAlgFlowController *this, CSCompanionStatus *a2)
{
  BOOL v3 = a2;
  unint64_t v4 = *((void *)this + 3);
  if (v4 <= *(void *)[(CSCompanionStatus *)v3 c_struct] + 30000000)
  {
    uint64_t v5 = *((void *)this + 68);
    unint64_t v6 = [(CSCompanionStatus *)v3 timestamp];
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8 == -1 || *(void *)(v5 + 8) * v8 <= v6)
    {
      unint64_t v9 = (void *)*((void *)this + 65);
      int v10 = (void *)*((void *)this + 66);
      while (v9 != v10)
      {
        if (*(unsigned char *)(*v9 + 25))
        {
          if (*((unsigned char *)this + 8)) {
            (*(void (**)(void, $2889772B1FD9C78F31F69BD8F09C608A *))(*(void *)*v9 + 112))(*v9, [(CSCompanionStatus *)v3 c_struct]);
          }
        }
        v9 += 2;
      }
      if (*((unsigned char *)this + 8))
      {
        *(void *)&long long v7 = 134217984;
        long long v20 = v7;
        while (1)
        {
          int v11 = (void *)*((void *)this + 68);
          unint64_t v12 = [(CSCompanionStatus *)v3 timestamp];
          unint64_t v13 = v11[1];
          uint64_t v14 = v11[2];
          if (v14 == -1) {
            break;
          }
          if (*v11 + v13 * v14 > v12) {
            goto LABEL_24;
          }
          if (qword_1003DB690 != -1) {
            dispatch_once(&qword_1003DB690, &stru_1003A1F08);
          }
          unint64_t v15 = (id)qword_1003DB698;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            unint64_t v16 = [(CSCompanionStatus *)v3 timestamp];
            *(_DWORD *)long long buf = v20;
            unint64_t v22 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "closing epoch because of feedCompanionStatus t=%llu", buf, 0xCu);
          }

          unint64_t v17 = (void *)*((void *)this + 68);
          uint64_t v18 = v17[2];
          if (v18 == -1) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = *v17 + v17[1] * v18;
          }
          if (!CLKappaAlgFlowController::closeEpoch(this, v19 - 1)) {
            goto LABEL_25;
          }
        }
        v11[2] = v12 / v13;
LABEL_24:
        CSKappaEpochBuffer::feedCompanionStatus(*((id **)this + 68), v3);
      }
    }
  }
LABEL_25:
}

void sub_100043CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedRemoteSample(CLKappaAlgFlowController *this, CSRemoteSample *a2)
{
  BOOL v3 = a2;
  unint64_t v4 = *((void *)this + 3);
  if (v4 <= [(CSRemoteSample *)v3 timestamp] + 30000000)
  {
    uint64_t v5 = *((void *)this + 68);
    unint64_t v6 = [(CSRemoteSample *)v3 timestamp];
    uint64_t v8 = *(void *)(v5 + 16);
    if (v8 == -1 || *(void *)(v5 + 8) * v8 <= v6)
    {
      unint64_t v9 = (void *)*((void *)this + 65);
      int v10 = (void *)*((void *)this + 66);
      while (v9 != v10)
      {
        if (*(unsigned char *)(*v9 + 25))
        {
          if (*((unsigned char *)this + 8)) {
            (*(void (**)(void, CSRemoteSample_Struct *))(*(void *)*v9 + 120))(*v9, [(CSRemoteSample *)v3 c_struct]);
          }
        }
        v9 += 2;
      }
      if (*((unsigned char *)this + 8))
      {
        *(void *)&long long v7 = 134217984;
        long long v20 = v7;
        while (1)
        {
          int v11 = (void *)*((void *)this + 68);
          unint64_t v12 = [(CSRemoteSample *)v3 timestamp];
          unint64_t v13 = v11[1];
          uint64_t v14 = v11[2];
          if (v14 == -1) {
            break;
          }
          if (*v11 + v13 * v14 > v12) {
            goto LABEL_24;
          }
          if (qword_1003DB690 != -1) {
            dispatch_once(&qword_1003DB690, &stru_1003A1F08);
          }
          unint64_t v15 = (id)qword_1003DB698;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            unint64_t v16 = [(CSRemoteSample *)v3 timestamp];
            *(_DWORD *)long long buf = v20;
            unint64_t v22 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "closing epoch because of feedRemoteSample t=%llu", buf, 0xCu);
          }

          unint64_t v17 = (void *)*((void *)this + 68);
          uint64_t v18 = v17[2];
          if (v18 == -1) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = *v17 + v17[1] * v18;
          }
          if (!CLKappaAlgFlowController::closeEpoch(this, v19 - 1)) {
            goto LABEL_25;
          }
        }
        v11[2] = v12 / v13;
LABEL_24:
        CSKappaEpochBuffer::feedRemoteSample(*((id **)this + 68), v3);
      }
    }
  }
LABEL_25:
}

void sub_100043F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::finalizeAlgBlocks(CLKappaAlgFlowController *this)
{
  uint64_t v1 = (CLKappaAlgFlowController **)*((void *)this + 65);
  unsigned int v2 = (CLKappaAlgFlowController **)*((void *)this + 66);
  while (v1 != v2)
  {
    this = *v1;
    if (*((unsigned char *)*v1 + 25)) {
      this = (CLKappaAlgFlowController *)(*(uint64_t (**)(CLKappaAlgFlowController *))(*(void *)this + 128))(this);
    }
    v1 += 2;
  }
  return this;
}

void CLKappaAlgFlowController::logAlgBlockResults(CLKappaAlgFlowController *this)
{
  uint64_t v1 = *((void *)this + 65);
  uint64_t v2 = *((void *)this + 66);
  while (v1 != v2)
  {
    if (*(unsigned char *)(*(void *)v1 + 25))
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)v1 + 160))(&v3);
      (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
      if (v4) {
        sub_10000BB9C(v4);
      }
    }
    v1 += 16;
  }
}

void sub_100044058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10000BB9C(a10);
  }
  _Unwind_Resume(exception_object);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::resetAlgBlocks(CLKappaAlgFlowController *this)
{
  uint64_t v1 = (CLKappaAlgFlowController **)*((void *)this + 65);
  uint64_t v2 = (CLKappaAlgFlowController **)*((void *)this + 66);
  while (v1 != v2)
  {
    this = *v1;
    if (*((unsigned char *)*v1 + 25)) {
      this = (CLKappaAlgFlowController *)(*(uint64_t (**)(CLKappaAlgFlowController *))(*(void *)this + 304))(this);
    }
    v1 += 2;
  }
  return this;
}

CLKappaAlgFlowController *CLKappaAlgFlowController::epochResetAlgBlocks(CLKappaAlgFlowController *this, uint64_t a2)
{
  uint64_t v2 = (CLKappaAlgFlowController **)*((void *)this + 65);
  for (uint64_t i = (CLKappaAlgFlowController **)*((void *)this + 66); v2 != i; v2 += 2)
  {
    this = *v2;
    if (*((unsigned char *)*v2 + 25)) {
      this = (CLKappaAlgFlowController *)(*(uint64_t (**)(CLKappaAlgFlowController *, uint64_t))(*(void *)this + 176))(this, a2);
    }
  }
  return this;
}

id CLKappaAlgFlowController::resetEpochBuffer(CLKappaAlgFlowController *this)
{
  id result = CSKappaEpochBuffer::reset(*((id **)this + 68));
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return result;
}

void CLKappaAlgFlowController::feedEpochFunctions(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    uint64_t v5 = *(void **)(a1 + 520);
    unint64_t v6 = *(void **)(a1 + 528);
    while (v5 != v6)
    {
      if (*(unsigned char *)(*v5 + 25))
      {
        if (*(unsigned char *)(a1 + 8)) {
          [v4 c_struct];
        }
      }
      v5 += 2;
    }
    goto LABEL_43;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    long long v7 = *(void **)(a1 + 520);
    uint64_t v8 = *(void **)(a1 + 528);
    while (v7 != v8)
    {
      if (*(unsigned char *)(*v7 + 25) && *(unsigned char *)(a1 + 8)) {
        (*(void (**)(void, id))(*(void *)*v7 + 200))(*v7, [v4 c_struct]);
      }
      v7 += 2;
    }
    goto LABEL_43;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    unint64_t v9 = *(void **)(a1 + 520);
    int v10 = *(void **)(a1 + 528);
    while (v9 != v10)
    {
      if (*(unsigned char *)(*v9 + 25) && *(unsigned char *)(a1 + 8)) {
        (*(void (**)(void, id))(*(void *)*v9 + 192))(*v9, [v4 c_struct]);
      }
      v9 += 2;
    }
    goto LABEL_43;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    int v11 = [v4 c_struct];
    int v12 = *(unsigned __int8 *)(a1 + 560);
    if (v12 == 2)
    {
      if ((v11[46] & 0xD) == 0)
      {
LABEL_43:

        goto LABEL_44;
      }
    }
    else if (v12 != 1 || (v11[1] & 0xF) == 0)
    {
      goto LABEL_43;
    }
    unint64_t v15 = *(void **)(a1 + 520);
    unint64_t v16 = *(void **)(a1 + 528);
    while (v15 != v16)
    {
      if (*(unsigned char *)(*v15 + 25) && *(unsigned char *)(a1 + 8)) {
        [v4 c_struct];
      }
      v15 += 2;
    }
    goto LABEL_43;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    unint64_t v13 = *(void **)(a1 + 520);
    uint64_t v14 = *(void **)(a1 + 528);
    while (v13 != v14)
    {
      if (*(unsigned char *)(*v13 + 25) && *(unsigned char *)(a1 + 8)) {
        (*(void (**)(void, id))(*(void *)*v13 + 216))(*v13, [v4 c_struct]);
      }
      v13 += 2;
    }
    goto LABEL_43;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    *(void *)uint64_t v18 = v3;
    sub_100044854(*(void **)(a1 + 520), *(void **)(a1 + 528), a1, (id *)v18);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      *(void *)uint64_t v18 = v3;
      sub_1000448F4(*(void **)(a1 + 520), *(void **)(a1 + 528), a1, (id *)v18);
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        *(void *)uint64_t v18 = v3;
        sub_100044994(*(void **)(a1 + 520), *(void **)(a1 + 528), a1, (id *)v18);
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          *(void *)uint64_t v18 = v3;
          sub_100044A34(*(void **)(a1 + 520), *(void **)(a1 + 528), a1, (id *)v18);
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            *(void *)uint64_t v18 = v3;
            sub_100044ADC(*(void **)(a1 + 520), *(void **)(a1 + 528), a1, (id *)v18);
          }
          else
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              *(void *)uint64_t v18 = v3;
              sub_100044B84(*(void **)(a1 + 520), *(void **)(a1 + 528), a1, (id *)v18);
            }
            else
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                *(void *)uint64_t v18 = v3;
                sub_100044C2C(*(void **)(a1 + 520), *(void **)(a1 + 528), a1, (id *)v18);
              }
              else
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  *(void *)uint64_t v18 = v3;
                  sub_100044CD4(*(void **)(a1 + 520), *(void **)(a1 + 528), a1, (id *)v18);
                }
                else
                {
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
                    *(void *)uint64_t v18 = v3;
                    sub_100044D7C(*(void **)(a1 + 520), *(void **)(a1 + 528), a1, (id *)v18);
                  }
                  else
                  {
                    unint64_t v17 = sub_100044E24();
                    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)uint64_t v18 = 138412290;
                      *(void *)&v18[4] = objc_opt_class();
                      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "problem! unknown / missing epochFeed for %@", v18, 0xCu);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_44:
}

void sub_100044788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100044854(void *a1, void *a2, uint64_t a3, id *a4)
{
  if (a1 != a2)
  {
    long long v7 = a1;
    do
    {
      if (*(unsigned char *)(*v7 + 25) && *(unsigned char *)(a3 + 8)) {
        (*(void (**)(void, id))(*(void *)*v7 + 248))(*v7, [*a4 c_struct]);
      }
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_1000448F4(void *a1, void *a2, uint64_t a3, id *a4)
{
  if (a1 != a2)
  {
    long long v7 = a1;
    do
    {
      if (*(unsigned char *)(*v7 + 25) && *(unsigned char *)(a3 + 8)) {
        [*a4 c_struct];
      }
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_100044994(void *a1, void *a2, uint64_t a3, id *a4)
{
  if (a1 != a2)
  {
    long long v7 = a1;
    do
    {
      if (*(unsigned char *)(*v7 + 25) && *(unsigned char *)(a3 + 8)) {
        (*(void (**)(void, id))(*(void *)*v7 + 208))(*v7, [*a4 c_struct]);
      }
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_100044A34(void *a1, void *a2, uint64_t a3, id *a4)
{
  if (a1 != a2)
  {
    long long v7 = a1;
    do
    {
      if (*(unsigned char *)(*v7 + 25) && *(unsigned char *)(a3 + 8)) {
        [*a4 c_struct];
      }
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_100044ADC(void *a1, void *a2, uint64_t a3, id *a4)
{
  if (a1 != a2)
  {
    long long v7 = a1;
    do
    {
      if (*(unsigned char *)(*v7 + 25) && *(unsigned char *)(a3 + 8)) {
        (*(void (**)(void, id))(*(void *)*v7 + 264))(*v7, [*a4 c_struct]);
      }
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_100044B84(void *a1, void *a2, uint64_t a3, id *a4)
{
  if (a1 != a2)
  {
    long long v7 = a1;
    do
    {
      if (*(unsigned char *)(*v7 + 25) && *(unsigned char *)(a3 + 8)) {
        (*(void (**)(void, id))(*(void *)*v7 + 272))(*v7, [a4 c_struct]);
      }
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_100044C2C(void *a1, void *a2, uint64_t a3, id *a4)
{
  if (a1 != a2)
  {
    long long v7 = a1;
    do
    {
      if (*(unsigned char *)(*v7 + 25) && *(unsigned char *)(a3 + 8)) {
        [*a4 c_struct];
      }
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_100044CD4(void *a1, void *a2, uint64_t a3, id *a4)
{
  if (a1 != a2)
  {
    long long v7 = a1;
    do
    {
      if (*(unsigned char *)(*v7 + 25) && *(unsigned char *)(a3 + 8)) {
        [*(id *)*a4 c_struct];
      }
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_100044D7C(void *a1, void *a2, uint64_t a3, id *a4)
{
  if (a1 != a2)
  {
    long long v7 = a1;
    do
    {
      if (*(unsigned char *)(*v7 + 25) && *(unsigned char *)(a3 + 8)) {
        [*a4 c_struct];
      }
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

id sub_100044E24()
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A1F28);
  }
  int v0 = (void *)qword_1003DB6A8;

  return v0;
}

void *sub_100044E78@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t CLKappaAlgFlowController::isActive(CLKappaAlgFlowController *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 65);
  uint64_t v4 = *((void *)this + 66);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v7 = v3 + 16;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 - 16) + 136))(*(void *)(v7 - 16), a2, a3);
    if (result) {
      break;
    }
    BOOL v9 = v7 == v4;
    v7 += 16;
  }
  while (!v9);
  return result;
}

void CLKappaAlgFlowController::stop(CLKappaAlgFlowController *this, uint64_t a2)
{
  if (qword_1003DB690 != -1) {
    dispatch_once(&qword_1003DB690, &stru_1003A1F08);
  }
  uint64_t v4 = qword_1003DB698;
  if (os_log_type_enabled((os_log_t)qword_1003DB698, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "stop", v5, 2u);
  }
  if (*((unsigned char *)this + 8)) {
    [*((id *)this + 71) stop:a2];
  }
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 3) = 0;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgBaroConfig(uint64_t a1, long long *a2)
{
  return sub_10000D158(*(void *)(a1 + 48), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgBaroConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 6) + 32) + 16;
}

void CLKappaAlgFlowController::setKappaFeaturesAlgGolfConfig(uint64_t a1, _OWORD *a2)
{
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgGolfConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 8) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgGPSConfig(uint64_t a1, _OWORD *a2)
{
  return CLKappaFeaturesAlgGPS::setConfig(*(void *)(a1 + 80), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgGPSConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 10) + 88) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgGravityAutoCorrelationConfig(uint64_t a1, _OWORD *a2)
{
  return CLKappaFeaturesAlgGravityAutoCorrelation::setConfig(*(void *)(a1 + 96), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgGravityAutoCorrelationConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 12) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgLackOfMotionConfig(uint64_t a1, _OWORD *a2)
{
  return CLKappaFeaturesAlgLackOfMotion::setConfig(*(void *)(a1 + 112), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgLackOfMotionConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 14) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgLocalAudioConfig(uint64_t a1, long long *a2)
{
  return CLKappaFeaturesAlgLocalAudio::setConfig(*(void *)(a1 + 128), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgLocalAudioConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 16) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgPulseConfig(uint64_t a1, float *a2)
{
  return sub_100021878(*(void *)(a1 + 144), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgPulseConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 18) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgRemoteAudioConfig(uint64_t a1, uint64_t *a2)
{
  return CLKappaFeaturesAlgRemoteAudio::setConfig(*(void *)(a1 + 160), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgRemoteAudioConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 20) + 32) + 16;
}

uint64_t CLKappaAlgFlowController::setKappaFeaturesAlgShortAudioConfig(uint64_t a1, unsigned char *a2)
{
  return CLKappaFeaturesAlgShortAudio::setConfig(*(void *)(a1 + 176), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgShortAudioConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 22) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgSpinConfig(uint64_t a1, void *a2)
{
  return CLKappaFeaturesAlgSpin::setConfig(*(void *)(a1 + 192), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgSpinConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 24) + 32) + 16;
}

uint64_t CLKappaAlgFlowController::setKappaFeaturesAlgStepsConfig(uint64_t a1, unsigned char *a2)
{
  return CLKappaFeaturesAlgSteps::setConfig(*(void *)(a1 + 208), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgStepsConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 26) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgZgConfig(uint64_t a1, int *a2)
{
  return sub_100009A1C(*(void *)(a1 + 224), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgZgConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 28) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgTriggerClustersConfig(uint64_t a1, uint64_t *a2)
{
  return CLKappaFeaturesAlgTriggerClusters::setConfig(*(void *)(a1 + 240), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgTriggerClustersConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 30) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgPeakDetectorMAPConfig(uint64_t a1, long long *a2)
{
  return CLKappaFeaturesAlgPeakDetectorMAP::setConfig(*(void *)(a1 + 256), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgPeakDetectorMAPConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 32) + 32) + 16;
}

uint64_t CLKappaAlgFlowController::setSafetyFeaturesAlgJointDetectionConfig(uint64_t a1)
{
  return CLSafetyFeaturesAlgJointDetection::setConfig(*(void *)(a1 + 272));
}

uint64_t CLKappaAlgFlowController::getSafetyFeaturesAlgJointDetectionConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 34) + 32) + 16;
}

uint64_t CLKappaAlgFlowController::setKappaEstimatesAlgAirbagConfig(uint64_t a1, unsigned char *a2)
{
  return CLKappaEstimatesAlgAirbag::setConfig(*(void *)(a1 + 288), a2);
}

uint64_t CLKappaAlgFlowController::getKappaEstimatesAlgAirbagConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 36) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaEstimatesAlgCrashConfig(uint64_t a1, _OWORD *a2)
{
  return CLKappaEstimatesAlgCrash::setConfig(*(void *)(a1 + 304), a2);
}

uint64_t CLKappaAlgFlowController::getKappaEstimatesAlgCrashConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 38) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaEstimatesAlgRolloverCrashConfig(uint64_t a1, long long *a2)
{
  return CLKappaEstimatesAlgRolloverCrash::setConfig(*(void *)(a1 + 320), a2);
}

uint64_t CLKappaAlgFlowController::getKappaEstimatesAlgRolloverCrashConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 40) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaEstimatesAlgHighSpeedCrashConfig(uint64_t a1, uint64_t *a2)
{
  return CLKappaEstimatesAlgHighSpeedCrash::setConfig(*(void *)(a1 + 336), a2);
}

uint64_t CLKappaAlgFlowController::getKappaEstimatesAlgHighSpeedCrashConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 42) + 32) + 16;
}

double CLKappaAlgFlowController::setMartyEstimatesAlgCoupledCrashConfig(uint64_t a1, long long *a2)
{
  return CLMartyEstimatesAlgCoupledCrash::setConfig(*(void *)(a1 + 352), a2);
}

uint64_t CLKappaAlgFlowController::getMartyEstimatesAlgCoupledCrashConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 44) + 32) + 16;
}

double CLKappaAlgFlowController::setMartyEstimatesAlgUncoupledCrashConfig(uint64_t a1, long long *a2)
{
  return CLMartyEstimatesAlgUncoupledCrash::setConfig(*(void *)(a1 + 368), a2);
}

uint64_t CLKappaAlgFlowController::getMartyEstimatesAlgUncoupledCrashConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 46) + 32) + 16;
}

double CLKappaAlgFlowController::setMartyEstimatesAlgHighSpeedCrashConfig(uint64_t a1, uint64_t *a2)
{
  return CLMartyEstimatesAlgHighSpeedCrash::setConfig(*(void *)(a1 + 384), a2);
}

uint64_t CLKappaAlgFlowController::getMartyEstimatesAlgHighSpeedCrashConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 48) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaInferencesAlgSevereCrashConfig(uint64_t a1, _OWORD *a2)
{
  return CLKappaInferencesAlgSevereCrash::setConfig(*(void *)(a1 + 400), a2);
}

uint64_t CLKappaAlgFlowController::getKappaInferencesAlgSevereCrashConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 50) + 480) + 16;
}

double CLKappaAlgFlowController::setMartyInferencesAlgSevereCrashConfig(uint64_t a1, _OWORD *a2)
{
  return CLMartyInferencesAlgSevereCrash::setConfig(*(void *)(a1 + 416), a2);
}

uint64_t CLKappaAlgFlowController::getMartyInferencesAlgSevereCrashConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 52) + 504) + 16;
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgDataIntegrityConfig(CLKappaAlgFlowController *this)
{
  return *(void *)(*((void *)this + 54) + 32) + 336;
}

CLKappaAlgFlowController *CLKappaAlgFlowController::disableAllAlgBlocks(CLKappaAlgFlowController *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 65);
  uint64_t v2 = (uint64_t *)*((void *)this + 66);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    v1 += 2;
    *(unsigned char *)(v3 + 25) = 0;
  }
  return this;
}

void CLKappaAlgFlowController::start(CLKappaAlgFlowController *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 8))
  {
    *((_DWORD *)this + 3) = 0;
    *((void *)this + 2) = 0;
    *((void *)this + 3) = a2;
  }
  if (qword_1003DB690 != -1) {
    dispatch_once(&qword_1003DB690, &stru_1003A1F08);
  }
  uint64_t v3 = qword_1003DB698;
  if (os_log_type_enabled((os_log_t)qword_1003DB698, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "trigger", v4, 2u);
  }
  *((unsigned char *)this + 8) = 1;
}

void CLKappaAlgFlowController::createRemoteSample(CLKappaAlgFlowController *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 8) && (uint64_t v4 = (unsigned char *)*((void *)this + 34), v4[25]))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 160))(&v8);
    sub_100045438((uint64_t)&v8, v10);
    if (v9) {
      sub_10000BB9C(v9);
    }
    *(unsigned char *)(a2 + 3) = 0;
    *(_WORD *)(a2 + 1) = 0;
    int v5 = *((_DWORD *)this + 3);
    *(unsigned char *)a2 = *((unsigned char *)this + 560);
    unint64_t v6 = (std::__shared_weak_count *)v10[1];
    uint64_t v7 = *(void *)(v10[0] + 32);
    *(_DWORD *)(a2 + 4) = 0;
    *(_DWORD *)(a2 + 8) = v5;
    *(void *)(a2 + 20) = 0;
    *(void *)(a2 + 12) = 0;
    *(_DWORD *)(a2 + 28) = 0;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = 0;
    *(unsigned char *)(a2 + 48) = 1;
    if (v6) {
      sub_10000BB9C(v6);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
  }
}

void *sub_100045438@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgBaro(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 6) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgBaroEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgGolf(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 8) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgGolfEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 8) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgGPS(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 10) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgGPSEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 10) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgGravityAutoCorrelation(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 12) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgGravityAutoCorrelationEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 12) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgLackOfMotion(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 14) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgLackOfMotionEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 14) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgLocalAudio(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 16) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgLocalAudioEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 16) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgPulse(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 18) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgPulseEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 18) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgRemoteAudio(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 20) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgRemoteAudioEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 20) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgShortAudio(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 22) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgShortAudioEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 22) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgSpin(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 24) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgSpinEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 24) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgSteps(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 26) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgStepsEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 26) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgZg(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 28) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgZgEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 28) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgTriggerClusters(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 30) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgTriggerClustersEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 30) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgPeakDetectorMAP(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 32) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgPeakDetectorMAPEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 32) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableSafetyFeaturesAlgJointDetection(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 34) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isSafetyFeaturesAlgJointDetectionEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 34) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaEstimatesAlgAirbag(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 36) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaEstimatesAlgAirbagEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 36) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaEstimatesAlgCrash(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 38) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaEstimatesAlgCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 38) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaEstimatesAlgRolloverCrash(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 40) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaEstimatesAlgRolloverCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 40) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaEstimatesAlgHighSpeedCrash(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 42) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaEstimatesAlgHighSpeedCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 42) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableMartyEstimatesAlgCoupledCrash(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 44) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isMartyEstimatesAlgCoupledCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 44) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableMartyEstimatesAlgUncoupledCrash(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 46) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isMartyEstimatesAlgUncoupledCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 46) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableMartyEstimatesAlgHighSpeedCrash(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 48) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isMartyEstimatesAlgHighSpeedCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 48) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaInferencesAlgSevereCrash(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 50) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaInferencesAlgSevereCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 50) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableMartyInferencesAlgSevereCrash(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 52) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isMartyInferencesAlgSevereCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 52) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgDataIntegrity(CLKappaAlgFlowController *this, char a2)
{
  *(unsigned char *)(*((void *)this + 54) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgDataIntegrityEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((void *)this + 54) + 25);
}

uint64_t CLKappaFeaturesAlgBaroResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 352))(a2, a1 + 48);
}

uint64_t CLKappaFeaturesAlgGolfResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 360))(a2, a1 + 112);
}

uint64_t CLKappaFeaturesAlgGPSResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 368))(a2, a1 + 32);
}

uint64_t CLKappaFeaturesAlgGravityAutoCorrelationResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 376))(a2, a1 + 32);
}

uint64_t CLKappaFeaturesAlgLackOfMotionResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 344))(a2, a1 + 32);
}

uint64_t CLKappaFeaturesAlgLocalAudioResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 384))(a2, a1 + 72);
}

uint64_t CLKappaFeaturesAlgPulseResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 328))(a2, a1 + 80);
}

uint64_t CLKappaFeaturesAlgRemoteAudioResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 384))(a2, a1 + 32);
}

uint64_t CLKappaFeaturesAlgShortAudioResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 440))(a2, a1 + 20);
}

uint64_t CLKappaFeaturesAlgSpinResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 392))(a2, a1 + 24);
}

uint64_t CLKappaFeaturesAlgStepsResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 400))(a2, a1 + 24);
}

uint64_t CLKappaFeaturesAlgZgResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 408))(a2, a1 + 24);
}

uint64_t CLKappaFeaturesAlgTriggerClustersResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 424))(a2, a1 + 32);
}

uint64_t CLKappaFeaturesAlgPeakDetectorMAPResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 432))(a2, a1 + 80);
}

uint64_t CLSafetyFeaturesAlgJointDetectionResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 448))(a2, a1 + 24);
}

uint64_t CLKappaEstimatesAlgAirbagResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 456))(a2, a1 + 24);
}

uint64_t CLKappaEstimatesAlgCrashResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 464))(a2, a1 + 176);
}

uint64_t CLKappaEstimatesAlgRolloverCrashResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 472))(a2, a1 + 272);
}

uint64_t CLKappaEstimatesAlgHighSpeedCrashResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 480))(a2, a1 + 32);
}

uint64_t CLMartyEstimatesAlgCoupledCrashResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 488))(a2, a1 + 48);
}

uint64_t CLMartyEstimatesAlgUncoupledCrashResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 496))(a2, a1 + 56);
}

uint64_t CLMartyEstimatesAlgHighSpeedCrashResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 504))(a2, a1 + 32);
}

void sub_100045C00(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

uint64_t sub_100045C38(uint64_t result)
{
  *(unsigned char *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_100045C44(CLKappaAlgBlockResult *this)
{
  *(void *)this = off_1003A1668;
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }

  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(this);
}

void sub_100045CA4(CLKappaAlgBlockResult *this)
{
  *(void *)this = off_1003A1668;
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(this);

  operator delete();
}

void sub_100045D24(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_100045D60(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_100045D9C(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_100045DD8(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_100045E14(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_100045E4C(id *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult((CLKappaAlgBlockResult *)a1);
}

void sub_100045E88(id *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult((CLKappaAlgBlockResult *)a1);

  operator delete();
}

void sub_100045EDC(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_100045F14(CLKappaAlgBlockResult *this)
{
  *(void *)this = off_1003A1968;
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 16);
  if (v5)
  {
    *((void *)this + 17) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 13);
  if (v6)
  {
    *((void *)this + 14) = v6;
    operator delete(v6);
  }

  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(this);
}

void sub_100045FB4(CLKappaAlgBlockResult *this)
{
  *(void *)this = off_1003A1968;
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 16);
  if (v5)
  {
    *((void *)this + 17) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 13);
  if (v6)
  {
    *((void *)this + 14) = v6;
    operator delete(v6);
  }
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(this);

  operator delete();
}

void sub_10004606C(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_1000460A8(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_1000460E4(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_10004611C(CLKappaAlgBlockResult *this)
{
  *(void *)this = off_1003A1AE8;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }

  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(this);
}

void sub_10004618C(CLKappaAlgBlockResult *this)
{
  *(void *)this = off_1003A1AE8;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    *((void *)this + 18) = v3;
    operator delete(v3);
  }
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(this);

  operator delete();
}

void sub_100046214(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_100046250(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_10004628C(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_1000462C8(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_100046304(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_100046340(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_10004637C(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_1000463B8(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_1000463F4(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_100046430(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);

  operator delete();
}

void sub_10004646C(uint64_t a1)
{
  sub_100048E0C(a1);

  operator delete();
}

void sub_1000464A4(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  BOOL v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_1000465F8((uint64_t *)a1);
    if (a4 >> 60) {
      sub_10000EE98();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_100046634((void *)a1, v12);
    unint64_t v13 = sub_100046678(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    unint64_t v15 = &a2[2 * v14];
    sub_100046784((uint64_t)&v20, a2, v15, v9);
    unint64_t v13 = sub_100046678(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_100046784((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        sub_10000BB9C(v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1000465E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1000465F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1000465F8(uint64_t *a1)
{
  if (*a1)
  {
    sub_100046800(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_100046634(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_10000EE98();
  }
  uint64_t result = (char *)sub_10004684C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_100046678(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  BOOL v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _DWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_100046708((uint64_t)v7);
  return v4;
}

uint64_t sub_100046708(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100046740(a1);
  }
  return a1;
}

void sub_100046740(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      sub_10000BB9C(v3);
    }
    v1 -= 16;
  }
}

uint64_t *sub_100046784(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  unint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      sub_10000BB9C(v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void sub_100046800(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_10000BB9C(v4);
    }
  }
  a1[1] = v2;
}

void *sub_10004684C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_10000B42C();
  }
  return operator new(16 * a2);
}

void **sub_100046884(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_10000EE98();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)sub_10004684C((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_1000469A0(a1, v18);
    BOOL v9 = (void *)a1[1];
    uint64_t result = sub_100046B28(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_10004698C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100046B28((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000469A0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100046A18((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100046A18(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _DWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100046AAC((uint64_t)v12);
  return v10;
}

uint64_t sub_100046AAC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100046AE4(a1);
  }
  return a1;
}

void sub_100046AE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_10000BB9C(v3);
    }
    v1 += 16;
  }
}

void **sub_100046B28(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100046B5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_10000BB9C(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void sub_100046BB0(id a1)
{
  qword_1003DB698 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Flow");

  _objc_release_x1();
}

void sub_100046BF4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100046800((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100046C48(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void *sub_100046C8C@<X0>(unint64_t *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xA0uLL);
  uint64_t result = sub_100046CF0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100046CDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100046CF0(void *a1, unint64_t *a2, unint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A1F58;
  CSKappaEpochBuffer::CSKappaEpochBuffer((CSKappaEpochBuffer *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_100046D40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100046D54(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A1F58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100046D74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A1F58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

id *sub_100046DC8(uint64_t a1)
{
  return sub_100046DD4((id *)(a1 + 24));
}

id *sub_100046DD4(id *a1)
{
  return a1;
}

void *sub_100046E68@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x200uLL);
  uint64_t result = sub_100046EB4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100046EA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100046EB4(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A1FA8;
  sub_10000CE48((uint64_t)(a1 + 3));
  return a1;
}

void sub_100046EFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100046F10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A1FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100046F30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A1FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100046F84(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100046FAC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = sub_100046FF8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100046FE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100046FF8(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A1FF8;
  CLKappaFeaturesAlgGolf::CLKappaFeaturesAlgGolf((CLKappaFeaturesAlgGolf *)(a1 + 3));
  return a1;
}

void sub_100047040(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100047054(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A1FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100047074(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A1FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000470C8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000470F0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xA8uLL);
  uint64_t result = sub_10004713C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100047128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10004713C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2048;
  CLKappaFeaturesAlgGPS::CLKappaFeaturesAlgGPS((CLKappaFeaturesAlgGPS *)(a1 + 3));
  return a1;
}

void sub_100047184(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100047198(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000471B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2048;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10004720C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100047234@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = sub_100047280(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10004726C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100047280(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2098;
  CLKappaFeaturesAlgGravityAutoCorrelation::CLKappaFeaturesAlgGravityAutoCorrelation((CLKappaFeaturesAlgGravityAutoCorrelation *)(a1 + 3));
  return a1;
}

void sub_1000472C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000472DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000472FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2098;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100047350(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100047378@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xE0uLL);
  uint64_t result = sub_1000473C4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000473B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000473C4(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A20E8;
  CLKappaFeaturesAlgLackOfMotion::CLKappaFeaturesAlgLackOfMotion((CLKappaFeaturesAlgLackOfMotion *)(a1 + 3));
  return a1;
}

void sub_10004740C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100047420(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A20E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100047440(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A20E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100047494(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000474BC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x198uLL);
  uint64_t result = sub_100047508(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000474F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100047508(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2138;
  CLKappaFeaturesAlgLocalAudio::CLKappaFeaturesAlgLocalAudio((CLKappaFeaturesAlgLocalAudio *)(a1 + 3));
  return a1;
}

void sub_100047550(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100047564(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100047584(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2138;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000475D8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100047600@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x320uLL);
  uint64_t result = sub_10004764C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100047638(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10004764C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2188;
  sub_100021194((uint64_t)(a1 + 3));
  return a1;
}

void sub_100047694(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000476A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000476C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2188;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10004771C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100047744@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x90uLL);
  uint64_t result = sub_100047790(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10004777C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100047790(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A21D8;
  CLKappaFeaturesAlgRemoteAudio::CLKappaFeaturesAlgRemoteAudio((CLKappaFeaturesAlgRemoteAudio *)(a1 + 3));
  return a1;
}

void sub_1000477D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000477EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A21D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10004780C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A21D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100047860(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100047888@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = sub_1000478D4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000478C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000478D4(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2228;
  CLKappaFeaturesAlgShortAudio::CLKappaFeaturesAlgShortAudio((CLKappaFeaturesAlgShortAudio *)(a1 + 3));
  return a1;
}

void sub_10004791C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100047930(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100047950(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2228;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000479A4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000479CC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x1228uLL);
  uint64_t result = sub_100047A18(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100047A04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100047A18(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2278;
  CLKappaFeaturesAlgSpin::CLKappaFeaturesAlgSpin((CLKappaFeaturesAlgSpin *)(a1 + 3));
  return a1;
}

void sub_100047A60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100047A74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100047A94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2278;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100047AE8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100047B10@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x78uLL);
  uint64_t result = sub_100047B5C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100047B48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100047B5C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A22C8;
  CLKappaFeaturesAlgSteps::CLKappaFeaturesAlgSteps((CLKappaFeaturesAlgSteps *)(a1 + 3));
  return a1;
}

void sub_100047BA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100047BB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A22C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100047BD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A22C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100047C2C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100047C54@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xAFC8uLL);
  uint64_t result = sub_100047CA0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100047C8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100047CA0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2318;
  sub_100009564((uint64_t)(a1 + 3));
  return a1;
}

void sub_100047CE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100047CFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100047D1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100047D70(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100047D98@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xC8uLL);
  uint64_t result = sub_100047DE4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100047DD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100047DE4(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2368;
  CLKappaFeaturesAlgTriggerClusters::CLKappaFeaturesAlgTriggerClusters((CLKappaFeaturesAlgTriggerClusters *)(a1 + 3));
  return a1;
}

void sub_100047E2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100047E40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100047E60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2368;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100047EB4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100047EDC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = sub_100047F28(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100047F14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100047F28(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A23B8;
  CLKappaFeaturesAlgPeakDetectorMAP::CLKappaFeaturesAlgPeakDetectorMAP((CLKappaFeaturesAlgPeakDetectorMAP *)(a1 + 3));
  return a1;
}

void sub_100047F70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100047F84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A23B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100047FA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A23B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100047FF8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100048020@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x80uLL);
  uint64_t result = sub_10004806C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100048058(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10004806C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2408;
  CLSafetyFeaturesAlgJointDetection::CLSafetyFeaturesAlgJointDetection((CLSafetyFeaturesAlgJointDetection *)(a1 + 3));
  return a1;
}

void sub_1000480B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000480C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000480E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2408;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10004813C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100048164@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = sub_1000481B0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10004819C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000481B0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2458;
  CLKappaEstimatesAlgAirbag::CLKappaEstimatesAlgAirbag((CLKappaEstimatesAlgAirbag *)(a1 + 3));
  return a1;
}

void sub_1000481F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10004820C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10004822C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2458;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100048280(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1000482A8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0xA0uLL);
  uint64_t result = sub_1000482F4((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1000482E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000482F4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1003A24A8;
  CLKappaEstimatesAlgCrash::CLKappaEstimatesAlgCrash((CLKappaEstimatesAlgCrash *)(a1 + 24));
  return a1;
}

void sub_10004833C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100048350(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A24A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100048370(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A24A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000483C4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000483EC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xA8uLL);
  uint64_t result = sub_100048438(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100048424(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100048438(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A24F8;
  CLKappaEstimatesAlgRolloverCrash::CLKappaEstimatesAlgRolloverCrash((CLKappaEstimatesAlgRolloverCrash *)(a1 + 3));
  return a1;
}

void sub_100048480(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100048494(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A24F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000484B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A24F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100048508(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100048530@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x88uLL);
  uint64_t result = sub_10004857C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100048568(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10004857C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2548;
  CLKappaEstimatesAlgHighSpeedCrash::CLKappaEstimatesAlgHighSpeedCrash((CLKappaEstimatesAlgHighSpeedCrash *)(a1 + 3));
  return a1;
}

void sub_1000485C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000485D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000485F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2548;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10004864C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100048674@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x98uLL);
  uint64_t result = sub_1000486C0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000486AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1000486C0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2598;
  CLMartyEstimatesAlgCoupledCrash::CLMartyEstimatesAlgCoupledCrash((CLMartyEstimatesAlgCoupledCrash *)(a1 + 3));
  return a1;
}

void sub_100048708(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10004871C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10004873C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2598;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100048790(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000487B8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xA0uLL);
  uint64_t result = sub_100048804(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000487F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100048804(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A25E8;
  CLMartyEstimatesAlgUncoupledCrash::CLMartyEstimatesAlgUncoupledCrash((CLMartyEstimatesAlgUncoupledCrash *)(a1 + 3));
  return a1;
}

void sub_10004884C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100048860(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A25E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100048880(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A25E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1000488D4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1000488FC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x78uLL);
  uint64_t result = sub_100048948(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100048934(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100048948(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2638;
  CLMartyEstimatesAlgHighSpeedCrash::CLMartyEstimatesAlgHighSpeedCrash((CLMartyEstimatesAlgHighSpeedCrash *)(a1 + 3));
  return a1;
}

void sub_100048990(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1000489A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000489C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2638;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100048A18(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100048A40@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x258uLL);
  uint64_t result = sub_100048A8C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100048A78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100048A8C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A2688;
  CLKappaInferencesAlgSevereCrash::CLKappaInferencesAlgSevereCrash((CLKappaInferencesAlgSevereCrash *)(a1 + 3));
  return a1;
}

void sub_100048AD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100048AE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100048B08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2688;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100048B5C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100048B84@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x258uLL);
  uint64_t result = sub_100048BD0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100048BBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100048BD0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003A26D8;
  CLMartyInferencesAlgSevereCrash::CLMartyInferencesAlgSevereCrash((CLMartyInferencesAlgSevereCrash *)(a1 + 3));
  return a1;
}

void sub_100048C18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100048C2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A26D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100048C4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A26D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100048CA0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100048CC8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0xD8uLL);
  uint64_t result = sub_100048D14((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_100048D00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100048D14(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1003A2728;
  CLKappaFeaturesAlgDataIntegrity::CLKappaFeaturesAlgDataIntegrity((CLKappaFeaturesAlgDataIntegrity *)(a1 + 24));
  return a1;
}

void sub_100048D5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100048D70(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100048D90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A2728;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100048DE4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100048E0C(uint64_t a1)
{
  *(void *)a1 = off_1003A15E8;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 552);
  if (v2) {
    sub_10000BB9C(v2);
  }
  __int16 v29 = (void **)(a1 + 520);
  sub_100046BF4(&v29);
  __int16 v29 = (void **)(a1 + 496);
  sub_100046BF4(&v29);
  __int16 v29 = (void **)(a1 + 472);
  sub_100046BF4(&v29);
  __int16 v29 = (void **)(a1 + 448);
  sub_100046BF4(&v29);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 440);
  if (v3) {
    sub_10000BB9C(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 424);
  if (v4) {
    sub_10000BB9C(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 408);
  if (v5) {
    sub_10000BB9C(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 392);
  if (v6) {
    sub_10000BB9C(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 376);
  if (v7) {
    sub_10000BB9C(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 360);
  if (v8) {
    sub_10000BB9C(v8);
  }
  long long v9 = *(std::__shared_weak_count **)(a1 + 344);
  if (v9) {
    sub_10000BB9C(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 328);
  if (v10) {
    sub_10000BB9C(v10);
  }
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 312);
  if (v11) {
    sub_10000BB9C(v11);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 296);
  if (v12) {
    sub_10000BB9C(v12);
  }
  char v13 = *(std::__shared_weak_count **)(a1 + 280);
  if (v13) {
    sub_10000BB9C(v13);
  }
  long long v14 = *(std::__shared_weak_count **)(a1 + 264);
  if (v14) {
    sub_10000BB9C(v14);
  }
  long long v15 = *(std::__shared_weak_count **)(a1 + 248);
  if (v15) {
    sub_10000BB9C(v15);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 232);
  if (v16) {
    sub_10000BB9C(v16);
  }
  long long v17 = *(std::__shared_weak_count **)(a1 + 216);
  if (v17) {
    sub_10000BB9C(v17);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 200);
  if (v18) {
    sub_10000BB9C(v18);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 184);
  if (v19) {
    sub_10000BB9C(v19);
  }
  char v20 = *(std::__shared_weak_count **)(a1 + 168);
  if (v20) {
    sub_10000BB9C(v20);
  }
  char v21 = *(std::__shared_weak_count **)(a1 + 152);
  if (v21) {
    sub_10000BB9C(v21);
  }
  unint64_t v22 = *(std::__shared_weak_count **)(a1 + 136);
  if (v22) {
    sub_10000BB9C(v22);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(a1 + 120);
  if (v23) {
    sub_10000BB9C(v23);
  }
  long long v24 = *(std::__shared_weak_count **)(a1 + 104);
  if (v24) {
    sub_10000BB9C(v24);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(a1 + 88);
  if (v25) {
    sub_10000BB9C(v25);
  }
  unint64_t v26 = *(std::__shared_weak_count **)(a1 + 72);
  if (v26) {
    sub_10000BB9C(v26);
  }
  __int16 v27 = *(std::__shared_weak_count **)(a1 + 56);
  if (v27) {
    sub_10000BB9C(v27);
  }
  return a1;
}

void CSKappaAOIGeoServices::CSKappaAOIGeoServices(CSKappaAOIGeoServices *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
}

void CSKappaAOIGeoServices::addAOI(char **a1, uint64_t *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 2);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555) {
      sub_10000EE98();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x1555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)sub_1000242C0(v4, v13);
    }
    else {
      long long v14 = 0;
    }
    long long v15 = &v14[12 * v10];
    uint64_t v16 = &v14[12 * v13];
    uint64_t v17 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    *(void *)long long v15 = v17;
    long long v9 = v15 + 12;
    uint64_t v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *(void *)(v18 - 12);
        v18 -= 12;
        int v21 = *((_DWORD *)v18 + 2);
        *(void *)(v15 - 12) = v20;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v21;
      }
      while (v18 != v19);
      uint64_t v18 = *a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    uint64_t v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v7 = v8;
    long long v9 = (char *)(v7 + 12);
  }
  a1[1] = v9;
}

BOOL CSKappaAOIGeoServices::isInAOI(CSKappaAOIGeoServices *this, float a2, float a3)
{
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  if (*(void *)this == v4) {
    return 0;
  }
  do
  {
    double v5 = *(float *)(v3 + 8);
    GEOCalculateDistanceHighPrecision();
    double v7 = fabs(v6);
    BOOL result = v7 < v5;
    v3 += 12;
  }
  while (v7 >= v5 && v3 != v4);
  return result;
}

void *CSKappaAOIBoost::CSKappaAOIBoostImpl::CSKappaAOIBoostImpl(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0x10000000000000;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0x10000000000000;
  return this;
}

void CSKappaAOIBoost::CSKappaAOIBoostImpl::addAOI(uint64_t a1, float *a2)
{
  float v5 = *a2;
  float v4 = a2[1];
  float v6 = a2[2];
  uint64_t v8 = a1 + 16;
  double v7 = *(void **)(a1 + 16);
  if (v7)
  {
    uint64_t v9 = *(void *)(a1 + 8);
  }
  else
  {
    double v7 = operator new(0x2B8uLL);
    uint64_t v9 = 0;
    v7[1] = 0;
    *(_DWORD *)double v7 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = v7;
    *(void *)a1 = 0;
  }
  v11[0] = v4;
  v11[1] = v5;
  v11[2] = v6;
  v12[0] = v11;
  void v12[5] = a1;
  v12[6] = a1;
  void v12[7] = 0;
  uint8_t v12[8] = v9;
  v12[9] = v8;
  v12[10] = a1 + 8;
  memset(&v12[11], 0, 24);
  v12[14] = a1;
  *(double *)&v12[1] = v4;
  *(double *)&_DWORD v12[2] = v5;
  *(double *)&void v12[3] = v4;
  *(double *)&v12[4] = v5;
  sub_10004A140(v7, (uint64_t)v12);
  ++*(void *)a1;
  double v10 = a2[2];
  if (*(double *)(a1 + 24) >= v10) {
    double v10 = *(double *)(a1 + 24);
  }
  *(double *)(a1 + 24) = v10;
}

void CSKappaAOIBoost::CSKappaAOIBoostImpl::isInAOI(CSKappaAOIBoost::CSKappaAOIBoostImpl *this, float a2, float a3)
{
  *(double *)&long long v6 = a3;
  *((double *)&v6 + 1) = a2;
  uint64_t v3 = *(void *)this;
  long long v4 = v6;
  uint64_t v5 = v3;
  sub_100049454((uint64_t)this, (uint64_t)&v4);
}

void sub_100049400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100049454(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16))
  {
    sub_10004F184((uint64_t)&v2, a1, a2);
  }
  else
  {
    uint64_t v2 = 0;
    long long v3 = *(_OWORD *)a2;
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    __p = 0;
    uint64_t v9 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v10 = 0;
  }
  sub_100053D10();
}

void sub_1000494E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10004F140((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000494FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a1)
  {
    uint64_t v4 = sub_10005418C(a1);
    uint64_t v5 = v4;
    if (v3)
    {
      uint64_t v6 = sub_1000541D0(a2);
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 48);
      return v7(v5, v6);
    }
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)v4 + 24);
  }
  else
  {
    if (!v3) {
      return 1;
    }
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)sub_10005418C(a2) + 24);
  }

  return v9();
}

void CSKappaAOIBoost::CSKappaAOIBoost(CSKappaAOIBoost *this)
{
}

{
  operator new();
}

void CSKappaAOIBoost::~CSKappaAOIBoost(CSKappaAOIBoost *this)
{
  uint64_t v1 = *(void **)this;
  *(void *)this = 0;
  if (v1) {
    sub_100054214((uint64_t)this, v1);
  }
}

{
  void *v1;

  uint64_t v1 = *(void **)this;
  *(void *)this = 0;
  if (v1) {
    sub_100054214((uint64_t)this, v1);
  }
}

void CSKappaAOIBoost::addAOI(uint64_t *a1, float *a2)
{
}

void CSKappaAOIBoost::isInAOI(CSKappaAOIBoost::CSKappaAOIBoostImpl **this, float a2, float a3)
{
}

uint64_t CSKappaAOIBoost::size(CSKappaAOIBoost *this)
{
  return **(void **)this;
}

uint64_t *sub_100049720(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_10004977C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

double sub_100049814(double *a1, double *a2, double *a3)
{
  double v4 = *a2;
  uint64_t v5 = (double *)&unk_1003DC000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    __int16 v27 = a2;
    __int16 v31 = a3;
    double v35 = v4;
    int v18 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v4 = v35;
    uint64_t v5 = (double *)&unk_1003DC000;
    a2 = v27;
    a3 = v31;
    if (v18)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v4 = v35;
      uint64_t v5 = (double *)&unk_1003DC000;
      a2 = v27;
      a3 = v31;
    }
  }
  double v6 = v5[375];
  double v7 = a2[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    double v32 = a3;
    double v36 = v4;
    double v24 = v6;
    double v28 = v7;
    int v19 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v6 = v24;
    double v7 = v28;
    double v4 = v36;
    uint64_t v5 = (double *)&unk_1003DC000;
    a3 = v32;
    if (v19)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v6 = v24;
      double v7 = v28;
      double v4 = v36;
      uint64_t v5 = (double *)&unk_1003DC000;
      a3 = v32;
    }
  }
  double v8 = v5[375];
  double v9 = *a3;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    __int16 v33 = a3;
    double v37 = v4;
    double v25 = v6;
    double v29 = v7;
    double v22 = v9;
    double v23 = v8;
    int v20 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v9 = v22;
    double v8 = v23;
    double v6 = v25;
    double v7 = v29;
    double v4 = v37;
    uint64_t v5 = (double *)&unk_1003DC000;
    a3 = v33;
    if (v20)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v9 = v22;
      double v8 = v23;
      double v6 = v25;
      double v7 = v29;
      double v4 = v37;
      uint64_t v5 = (double *)&unk_1003DC000;
      a3 = v33;
    }
  }
  double v10 = v4 * v6;
  double v11 = v7 * v8;
  double v12 = v9 * v5[375];
  double v13 = a3[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    double v30 = v11;
    double v34 = v10;
    double v38 = v12;
    double v26 = v13;
    int v21 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v13 = v26;
    double v11 = v30;
    uint64_t v5 = (double *)&unk_1003DC000;
    double v10 = v34;
    double v12 = v38;
    if (v21)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v13 = v26;
      double v11 = v30;
      uint64_t v5 = (double *)&unk_1003DC000;
      double v10 = v34;
      double v12 = v38;
    }
  }
  double v14 = v13 * v5[375];
  double v42 = v11;
  double v43 = v10;
  double v40 = v14;
  double v41 = v12;
  sub_100049A7C(a1, v10, v11, v12, v14);
  if (v16) {
    return v15;
  }
  sub_100049CDC(&v43, &v42, &v41, &v40, a1, (uint64_t)v39);
  return v39[0];
}

double sub_100049A7C(double *a1, double a2, double a3, double a4, double a5)
{
  double v8 = vabdd_f64(a4, a2);
  double v9 = 3.14159265;
  if (v8 == 3.14159265) {
    goto LABEL_2;
  }
  double v10 = a4 - a2;
  if (COERCE__INT64(fabs(a4 - a2)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v19 = fabs(v8 + -3.14159265);
    double v9 = 3.14159265;
    if (v8 < 3.14159265) {
      double v8 = 3.14159265;
    }
    double v20 = v8 >= 1.0 ? v8 * 2.22044605e-16 : 2.22044605e-16;
    if (v19 <= v20) {
      goto LABEL_2;
    }
  }
  double v9 = 3.14159265;
  if (v10 <= 3.14159265)
  {
    if (v10 >= -3.14159265) {
      goto LABEL_3;
    }
    double v9 = fmod(v10 + -3.14159265, 6.28318531) + 3.14159265;
LABEL_2:
    double v10 = v9;
    goto LABEL_3;
  }
  double v21 = fmod(v10 + 3.14159265, 6.28318531);
  double v10 = v21 + -3.14159265;
  if (v21 + -3.14159265 == -3.14159265) {
    goto LABEL_2;
  }
  unint64_t v22 = COERCE__INT64(fabs(v21 + -3.14159265)) - 1;
  BOOL v23 = (unint64_t)(COERCE__INT64(fabs(v21 + -3.14159265)) - 0x10000000000000) >> 53 > 0x3FE
     && v22 > 0xFFFFFFFFFFFFELL;
  if (!v23 || *(void *)&v10 == 0)
  {
    double v9 = 3.14159265;
    double v25 = fabs(v10 + 3.14159265);
    double v26 = fabs(v10);
    if (v26 < 3.14159265) {
      double v26 = 3.14159265;
    }
    double v27 = v26 >= 1.0 ? v26 * 2.22044605e-16 : 2.22044605e-16;
    if (v25 <= v27) {
      goto LABEL_2;
    }
  }
LABEL_3:
  if (a3 <= a5) {
    double v11 = a3;
  }
  else {
    double v11 = a5;
  }
  if (a3 > a5) {
    a5 = a3;
  }
  if (sub_100049F80(v11, a5, v10))
  {
    double v12 = (*a1 - a1[1]) / *a1;
    double v13 = v12 / (2.0 - v12);
    double v14 = *a1 / (v13 + 1.0);
    double v15 = v13 * 1.5;
    double v16 = v14 * (a5 - sin(a5 + a5) * (v13 * 1.5));
    return vabdd_f64(v16, v14 * (v11 - sin(v11 + v11) * v15));
  }
  else
  {
    double v18 = fabs(v10);
    if (v18 == 3.14159265) {
      return sub_10004A084(a1, v11, a5);
    }
    double result = 0.0;
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v28 = fabs(v18 + -3.14159265);
      if (v18 < 3.14159265) {
        double v18 = 3.14159265;
      }
      double v29 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
      if (v28 <= v29) {
        return sub_10004A084(a1, v11, a5);
      }
    }
  }
  return result;
}

void sub_100049CDC(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(void *)(a6 + 32) = 0x3FF0000000000000;
  double v9 = *a1;
  double v10 = *a3;
  if (*a1 != *a3)
  {
    if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_19;
    }
    double v43 = vabdd_f64(v9, v10);
    double v44 = fabs(v9);
    double v45 = fabs(v10);
    if (v44 < v45) {
      double v44 = v45;
    }
    double v46 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
    if (v43 > v46) {
      goto LABEL_19;
    }
  }
  double v11 = *a2;
  double v12 = *a4;
  if (*a2 != *a4)
  {
    BOOL v13 = (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
       && (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    if (!v13) {
      goto LABEL_19;
    }
    double v14 = vabdd_f64(v11, v12);
    double v15 = fabs(v11);
    double v16 = fabs(v12);
    if (v15 < v16) {
      double v15 = v16;
    }
    double v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 > v17)
    {
LABEL_19:
      double v19 = *a5;
      double v20 = *a5 - a5[1];
      double v21 = cos(v10 - v9);
      __double2 v22 = __sincos_stret(*a2);
      __double2 v23 = __sincos_stret(*a4);
      double v24 = v21 * (v22.__cosval * v23.__cosval) + v22.__sinval * v23.__sinval;
      if (v24 > 1.0) {
        double v25 = 1.0;
      }
      else {
        double v25 = v21 * (v22.__cosval * v23.__cosval) + v22.__sinval * v23.__sinval;
      }
      if (v24 >= -1.0) {
        double v26 = v25;
      }
      else {
        double v26 = -1.0;
      }
      long double v27 = acos(v26);
      double v28 = sin(v27) * 3.0;
      double v29 = 1.0 - v26;
      double v30 = v26 + 1.0;
      double v31 = 0.0;
      double v32 = 0.0;
      if (1.0 - v26 != 0.0)
      {
        unint64_t v33 = COERCE__INT64(fabs(1.0 - v26)) - 1;
        BOOL v34 = (unint64_t)(COERCE__INT64(fabs(1.0 - v26)) - 0x10000000000000) >> 53 > 0x3FE
           && v33 > 0xFFFFFFFFFFFFELL;
        if (v34 && *(void *)&v29 != 0) {
          goto LABEL_38;
        }
        double v36 = fabs(v29);
        double v37 = 2.22044605e-16;
        if (v36 >= 1.0) {
          double v37 = v36 * 2.22044605e-16;
        }
        BOOL v13 = v36 > v37;
        double v32 = 0.0;
        if (v13) {
LABEL_38:
        }
          double v32 = (v27 + v28) / v29;
      }
      if (v30 != 0.0)
      {
        unint64_t v38 = COERCE__INT64(fabs(v26 + 1.0)) - 1;
        BOOL v39 = (unint64_t)(COERCE__INT64(fabs(v26 + 1.0)) - 0x10000000000000) >> 53 > 0x3FE
           && v38 > 0xFFFFFFFFFFFFELL;
        if (v39 && *(void *)&v30 != 0) {
          goto LABEL_51;
        }
        double v41 = fabs(v30);
        double v42 = 2.22044605e-16;
        if (v41 >= 1.0) {
          double v42 = v41 * 2.22044605e-16;
        }
        if (v41 > v42) {
LABEL_51:
        }
          double v31 = (v27 - v28) / v30;
      }
      *(long double *)a6 = v19
                         * (v27
                          + v20
                          / v19
                          * -0.25
                          * ((v22.__sinval + v23.__sinval) * (v22.__sinval + v23.__sinval) * v31
                           + v32 * ((v22.__sinval - v23.__sinval) * (v22.__sinval - v23.__sinval))));
    }
  }
}

BOOL sub_100049F80(double a1, double a2, double a3)
{
  if (a3 == 0.0) {
    return 1;
  }
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v4 = fabs(a3);
    double v5 = 2.22044605e-16;
    if (v4 >= 1.0) {
      double v5 = v4 * 2.22044605e-16;
    }
    if (v4 <= v5) {
      return 1;
    }
  }
  if (a2 != 1.57079633)
  {
    if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      return 0;
    }
    double v9 = fabs(a2 + -1.57079633);
    double v10 = fabs(a2);
    if (v10 < 1.57079633) {
      double v10 = 1.57079633;
    }
    double v11 = v10 >= 1.0 ? v10 * 2.22044605e-16 : 2.22044605e-16;
    if (v9 > v11) {
      return 0;
    }
  }
  if (a1 == -1.57079633) {
    return 1;
  }
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  double v6 = fabs(a1 + 1.57079633);
  double v7 = fabs(a1);
  if (v7 < 1.57079633) {
    double v7 = 1.57079633;
  }
  if (v7 >= 1.0) {
    double v8 = v7 * 2.22044605e-16;
  }
  else {
    double v8 = 2.22044605e-16;
  }
  return v6 <= v8;
}

double sub_10004A084(double *a1, double a2, double a3)
{
  if (a2 + a3 >= 0.0) {
    double v5 = 2.0;
  }
  else {
    double v5 = -2.0;
  }
  double v6 = (*a1 - a1[1]) / *a1;
  double v7 = v6 / (2.0 - v6);
  double v8 = *a1 / (v7 + 1.0);
  double v9 = v7 * 1.5;
  double v10 = v5 * (v8 * (v7 * 1.5 * -1.2246468e-16 + 1.57079633)) - v8 * (a2 - sin(a2 + a2) * (v7 * 1.5));
  return vabdd_f64(v10, v8 * (a3 - sin(a3 + a3) * v9));
}

void sub_10004A140(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = (uint64_t *)(a1 + 2);
  int v3 = *a1;
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
      if (v3 < 0) {
        uint64_t v2 = (uint64_t *)*v2;
      }
      sub_10004A23C(&v4, v2);
      break;
    case 1:
      if (v3 < 0)
      {
        sub_10004CA9C(&v4, (uint64_t *)*v2);
      }
      else
      {
        sub_10004CB10(a2, v2);
      }
      break;
    default:
      sub_10004A824();
  }
}

void sub_10004A23C(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 104);
  if (v3 != **(void **)(*a1 + 80)) {
    sub_1000542DC();
  }
  uint64_t v4 = *(void *)(v2 + 64);
  if (v4 != v3 && v4 != -1) {
    sub_1000542B0();
  }
  sub_10004A2B0(a2, *(__n128 **)v2);

  sub_10004A2FC(v2, a2);
}

__n128 sub_10004A2B0(void *a1, __n128 *a2)
{
  if ((unint64_t)(*a1 - 17) <= 0xFFFFFFFFFFFFFFEDLL) {
    sub_100054308();
  }
  uint64_t v2 = &a1[3 * *a1];
  __n128 result = *a2;
  v2[3] = a2[1].n128_u64[0];
  *(__n128 *)(v2 + 1) = result;
  ++*a1;
  return result;
}

void sub_10004A2FC(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v4 = a1 + 88;
  if (v5)
  {
    uint64_t v6 = sub_10004A3AC(v4);
    double v7 = sub_10004A774(*(_DWORD **)(v6 + 32));
    if (!v7) {
      sub_10004A714();
    }
    if (v7 != a2) {
      sub_100054334();
    }
  }
  if (*a2 > 0x10uLL) {
    sub_10004A3EC(a1, a2);
  }
}

void sub_10004A394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
}

uint64_t sub_10004A3AC(uint64_t a1)
{
  uint64_t v1 = *(unint64_t **)a1;
  if (!*(void *)a1) {
    sub_100054360();
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (*v1 <= v2) {
    sub_10005438C();
  }
  return (uint64_t)&v1[5 * v2 + 1];
}

void sub_10004A3EC(uint64_t a1, void *a2)
{
  uint64_t v27 = 0;
  sub_10004AF30(&v27, a2, &v25);
  if (v27 != 1) {
    sub_1000543B8();
  }
  uint64_t v5 = (void **)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v23 = v28[4];
  uint64_t v24 = v6;
  if (v4)
  {
    double v7 = (_OWORD *)sub_10004A3AC(a1 + 88);
    long long v8 = v26;
    *double v7 = v25;
    v7[1] = v8;
    if (*v5)
    {
      if (v27)
      {
        sub_10004B0BC(*v5, (uint64_t)v28);
        return;
      }
      double v15 = "(i < v.size())&&(\"index out of bounds\")";
      int v16 = 94;
      double v17 = "varray.hpp";
      double v18 = "check_index";
    }
    else
    {
      double v15 = "(parent)&&(\"null pointer\")";
      int v16 = 253;
      double v17 = "insert.hpp";
      double v18 = "parent_elements";
    }
LABEL_17:
    __assert_rtn(v18, v17, v16, v15);
  }
  double v9 = sub_10004A774(**(_DWORD ***)(a1 + 72));
  if (!v9)
  {
    *(void *)&v19[0] = &off_1003A28C0;
    sub_10004A714();
  }
  if (v9 != a2)
  {
    double v15 = "(&n == &rtree::get<Node>(*m_root_node))&&(\"node should be the root\")";
    int v16 = 449;
    double v17 = "insert.hpp";
    double v18 = "split";
    goto LABEL_17;
  }
  double v10 = operator new(0x2B8uLL);
  *((void *)v10 + 1) = 0;
  *double v10 = 1;
  uint64_t v11 = *(void *)(a1 + 112);
  double v21 = v10;
  uint64_t v22 = v11;
  double v12 = sub_10004C99C(v10);
  if (!v12)
  {
    *(void *)&v19[0] = &off_1003A28C0;
    sub_10004A714();
  }
  uint64_t v13 = **(void **)(a1 + 72);
  v19[0] = v25;
  v19[1] = v26;
  uint64_t v20 = v13;
  sub_10004B0BC(v12, (uint64_t)v19);
  double v14 = sub_10004C99C(v10);
  if (!v14)
  {
    *(void *)&v19[0] = &off_1003A28C0;
    sub_10004A714();
  }
  if (!v27) {
    __assert_rtn("check_index", "varray.hpp", 94, "(i < v.size())&&(\"index out of bounds\")");
  }
  sub_10004B0BC(v14, (uint64_t)v28);
  **(void **)(a1 + 72) = v10;
  ++**(void **)(a1 + 80);
}

void sub_10004A674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14, uint64_t a15, char a16)
{
  if (a2)
  {
    std::exception::~exception((std::exception *)&a9);
    __cxa_begin_catch(exception_object);
    *sub_10004B10C(a14) = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_10004A6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  __cxa_end_catch();
  sub_10004B180((uint64_t)va);
  JUMPOUT(0x10004A704);
}

void sub_10004A6F8()
{
}

void sub_10004A714()
{
  exception = __cxa_allocate_exception(0x38uLL);
  sub_10004A850((uint64_t)exception);
}

void sub_10004A75C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_10004A774(_DWORD *a1)
{
  int v3 = *a1;
  uint64_t v1 = a1 + 2;
  int v2 = v3;
  uint64_t v4 = 0;
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
      if (v2 < 0) {
        uint64_t v4 = (void *)*v1;
      }
      else {
        uint64_t v4 = v1;
      }
      break;
    case 1:
      return v4;
    default:
      sub_10004A824();
  }
  return v4;
}

void sub_10004A824()
{
  __assert_rtn("forced_return", "forced_return.hpp", 38, "false");
}

uint64_t sub_10004A850(uint64_t result)
{
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(void *)__n128 result = &off_1003A2848;
  *(void *)(result + 8) = off_1003A2878;
  *(void *)(result + 16) = off_1003A28A0;
  return result;
}

uint64_t sub_10004A8C0(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_1003A27C8;
  sub_100049720((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void sub_10004A914()
{
}

void sub_10004AAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100049720(&a9);
  sub_100049720(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_10004AB4C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x38uLL);
  sub_10004AE00((uint64_t)exception, a1);
}

void sub_10004AB94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10004ABA8(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_1003A27C8;
  sub_100049720((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));

  operator delete();
}

void sub_10004AC1C(uint64_t a1)
{
  *(void *)(a1 + 8) = &off_1003A27C8;
  sub_100049720((uint64_t *)(a1 + 16));

  std::exception::~exception((std::exception *)a1);
}

void sub_10004AC78(uint64_t a1)
{
  *(void *)(a1 + 8) = &off_1003A27C8;
  sub_100049720((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);

  operator delete();
}

const char *sub_10004ACF0()
{
  return "boost::bad_get: failed value get using boost::get";
}

void sub_10004ACFC(void *a1)
{
  *a1 = &off_1003A27C8;
  sub_100049720(a1 + 1);

  std::exception::~exception((std::exception *)a1 - 1);
}

void sub_10004AD54(void *a1)
{
  *a1 = &off_1003A27C8;
  sub_100049720(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);

  operator delete();
}

void sub_10004ADC8(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_10004AE00(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1003A2798;
  *(void *)(a1 + 8) = &off_1003A28C0;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_1003A27C8;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &off_1003A2848;
  *(void *)(a1 + 8) = off_1003A2878;
  *(void *)(a1 + 16) = off_1003A28A0;
  return a1;
}

void sub_10004AF1C(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

double sub_10004AF30(void *a1, void *a2, long long *a3)
{
  uint64_t v6 = operator new(0x2B8uLL);
  v6[1] = 0;
  *(_DWORD *)uint64_t v6 = 0;
  double v7 = sub_10004A774(v6);
  if (!v7)
  {
    *(void *)&v11[0] = &off_1003A28C0;
    sub_10004A714();
  }
  sub_10004B1B0((uint64_t)a2, v7, a3, (double *)v13);
  if ((unint64_t)(*a2 - 17) < 0xFFFFFFFFFFFFFFF3)
  {
    double v9 = "(parameters.get_min_elements() <= rtree::elements(n).size() && rtree::elements(n).size() <= parameters.get_max_"
         "elements())&&(\"unexpected number of elements\")";
    int v10 = 193;
    goto LABEL_7;
  }
  if ((unint64_t)(*v7 - 17) <= 0xFFFFFFFFFFFFFFF2)
  {
    double v9 = "(parameters.get_min_elements() <= rtree::elements(n2).size() && rtree::elements(n2).size() <= parameters.get_ma"
         "x_elements())&&(\"unexpected number of elements\")";
    int v10 = 196;
LABEL_7:
    __assert_rtn("apply", "insert.hpp", v10, v9);
  }
  v11[0] = v13[0];
  v11[1] = v13[1];
  double v12 = v6;
  *(void *)&double result = sub_10004B654(a1, (uint64_t)v11).n128_u64[0];
  return result;
}

void sub_10004B060(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_begin_catch(a1);
  if (*v10 >= 0x11uLL) {
    --*v10;
  }
  sub_10004C590(v9, &a9);
  __cxa_rethrow();
}

void sub_10004B0A8()
{
}

__n128 sub_10004B0BC(void *a1, uint64_t a2)
{
  if ((unint64_t)(*a1 - 17) <= 0xFFFFFFFFFFFFFFEDLL) {
    sub_100054308();
  }
  int v2 = &a1[5 * *a1];
  __n128 result = *(__n128 *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  v2[5] = *(void *)(a2 + 32);
  *(_OWORD *)(v2 + 3) = v4;
  *(__n128 *)(v2 + 1) = result;
  ++*a1;
  return result;
}

void *sub_10004B10C(_DWORD *a1)
{
  __n128 result = sub_10004C99C(a1);
  if (!result) {
    sub_10004A714();
  }
  return result;
}

void sub_10004B168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
}

uint64_t sub_10004B180(uint64_t a1)
{
  return a1;
}

void sub_10004B1B0(uint64_t a1, void *a2, long long *a3, double *a4)
{
  if (*(void *)a1 != 17) {
    sub_10005443C();
  }
  unint64_t v50 = 0;
  sub_10004B6A4(&v50, a1 + 8, (long long *)(a1 + 416));
  if (v50 != 17) {
    sub_100054410();
  }
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  int v10 = (__n128 *)&v51;
  double v11 = v51;
  double v12 = (double *)&v53;
  uint64_t v13 = 1;
  double v14 = v51;
  do
  {
    double v15 = *v12;
    v12 += 3;
    double v16 = v15;
    if (v15 < v14)
    {
      double v14 = v16;
      unint64_t v9 = v13;
    }
    if (v11 < v16)
    {
      double v11 = v16;
      unint64_t v8 = v13;
    }
    ++v13;
  }
  while (v13 != 17);
  if (v9 == v8) {
    unint64_t v8 = (v9 + 1) % 0x11;
  }
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  double v19 = v11 - v14;
  double v20 = v52;
  double v21 = (double *)&v54;
  uint64_t v22 = 1;
  double v23 = v52;
  do
  {
    double v24 = *v21;
    v21 += 3;
    double v25 = v24;
    if (v24 < v23)
    {
      double v23 = v25;
      unint64_t v18 = v22;
    }
    if (v20 < v25)
    {
      double v20 = v25;
      unint64_t v17 = v22;
    }
    ++v22;
  }
  while (v22 != 17);
  double v26 = v20 - v23;
  if (v18 == v17) {
    unint64_t v17 = (v18 + 1) % 0x11;
  }
  if (v19 >= v26) {
    unint64_t v27 = v9;
  }
  else {
    unint64_t v27 = v18;
  }
  if (v19 >= v26) {
    unint64_t v28 = v8;
  }
  else {
    unint64_t v28 = v17;
  }
  *(void *)a1 = 0;
  if (*a2) {
    sub_1000543E4();
  }
  if (v27 > 0x10) {
    goto LABEL_53;
  }
  double v29 = (__n128 *)(&v51 + 3 * v27);
  sub_10004A2B0((void *)a1, v29);
  if (v50 <= v28) {
    goto LABEL_53;
  }
  double v30 = (__n128 *)(&v51 + 3 * v28);
  sub_10004A2B0(a2, v30);
  unint64_t v31 = v50;
  if (v50 <= v27
    || (unint64_t v32 = v29->n128_u64[0],
        unint64_t v33 = v29->n128_u64[1],
        *(void *)a3 = v29->n128_u64[0],
        *((void *)a3 + 1) = v33,
        *((void *)a3 + 2) = v32,
        *((void *)a3 + 3) = v33,
        v31 <= v28))
  {
LABEL_53:
    __assert_rtn("check_index", "varray.hpp", 94, "(i < v.size())&&(\"index out of bounds\")");
  }
  unint64_t v34 = 0;
  double v35 = v30->n128_f64[0];
  double v36 = v30->n128_f64[1];
  *a4 = v30->n128_f64[0];
  a4[1] = v36;
  a4[2] = v35;
  a4[3] = v36;
  double v37 = (*((double *)a3 + 2) - *(double *)a3) * (*((double *)a3 + 3) - *((double *)a3 + 1));
  double v38 = (v35 - v35) * (v36 - v36);
  uint64_t v39 = 15;
  do
  {
    if (v27 != v34 && v28 != v34)
    {
      if (v50 <= v34) {
        __assert_rtn("check_index", "varray.hpp", 94, "(i < v.size())&&(\"index out of bounds\")");
      }
      if ((unint64_t)(*(void *)a1 + v39) <= 4)
      {
        sub_10004A2B0((void *)a1, v10);
        sub_10004B78C((double *)a3, v10->n128_f64);
        double v37 = (*((double *)a3 + 2) - *(double *)a3) * (*((double *)a3 + 3) - *((double *)a3 + 1));
        if (!v39) {
          goto LABEL_52;
        }
      }
      else if ((unint64_t)(*a2 + v39) <= 4)
      {
        sub_10004A2B0(a2, v10);
        sub_10004B78C(a4, v10->n128_f64);
        double v38 = (a4[2] - *a4) * (a4[3] - a4[1]);
        if (!v39) {
          goto LABEL_52;
        }
      }
      else
      {
        long long v40 = a3[1];
        long long v48 = *a3;
        *(_OWORD *)uint64_t v49 = v40;
        long long v41 = *((_OWORD *)a4 + 1);
        long long v46 = *(_OWORD *)a4;
        long long v47 = v41;
        sub_10004B78C((double *)&v48, v10->n128_f64);
        sub_10004B78C((double *)&v46, v10->n128_f64);
        double v42 = (v49[0] - *(double *)&v48) * (v49[1] - *((double *)&v48 + 1));
        double v43 = (*(double *)&v47 - *(double *)&v46) * (*((double *)&v47 + 1) - *((double *)&v46 + 1));
        if (v42 - v37 < v43 - v38 || v42 - v37 == v43 - v38 && (v37 < v38 || v37 == v38 && *(void *)a1 <= *a2))
        {
          sub_10004A2B0((void *)a1, v10);
          long long v45 = *(_OWORD *)v49;
          *a3 = v48;
          a3[1] = v45;
          double v37 = v42;
          if (!v39) {
LABEL_52:
          }
            __assert_rtn("apply", "redistribute_elements.hpp", 450, "(0 < remaining)&&(\"unexpected value\")");
        }
        else
        {
          sub_10004A2B0(a2, v10);
          long long v44 = v47;
          *(_OWORD *)a4 = v46;
          *((_OWORD *)a4 + 1) = v44;
          double v38 = v43;
          if (!v39) {
            goto LABEL_52;
          }
        }
      }
      --v39;
    }
    ++v34;
    int v10 = (__n128 *)((char *)v10 + 24);
  }
  while (v34 != 17);
}

void sub_10004B5F4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    *int v3 = 0;
    void *v2 = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_10004B630(_Unwind_Exception *a1)
{
}

void sub_10004B63C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x10004B644);
  }
  sub_10000EE84(a1);
}

__n128 sub_10004B654(void *a1, uint64_t a2)
{
  if ((unint64_t)(*a1 - 1) <= 0xFFFFFFFFFFFFFFFDLL) {
    sub_100054308();
  }
  int v2 = &a1[5 * *a1];
  __n128 result = *(__n128 *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  v2[5] = *(void *)(a2 + 32);
  *(_OWORD *)(v2 + 3) = v4;
  *(__n128 *)(v2 + 1) = result;
  ++*a1;
  return result;
}

unint64_t *sub_10004B6A4(unint64_t *result, uint64_t a2, long long *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - a2) >> 3);
  if (v3 >= 0x12) {
    sub_100054308();
  }
  unint64_t v4 = *result;
  if (*result <= v3)
  {
    if (v4)
    {
      unint64_t v6 = 0;
      uint64_t v7 = a2 + 24 * v4;
      do
      {
        unint64_t v8 = &result[v6 / 8];
        uint64_t v9 = a2 + v6;
        *(_OWORD *)(v8 + 1) = *(_OWORD *)(a2 + v6);
        v8[3] = *(void *)(a2 + v6 + 16);
        v6 += 24;
      }
      while (v9 + 24 != v7);
      unint64_t v4 = *result;
    }
    int v10 = (long long *)(a2 + 24 * v4);
    if (v10 != a3)
    {
      uint64_t v11 = (uint64_t)&result[3 * v4 + 1];
      do
      {
        long long v12 = *v10;
        *(void *)(v11 + 16) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v11 = v12;
        v11 += 24;
        int v10 = (long long *)((char *)v10 + 24);
      }
      while (v10 != a3);
    }
  }
  else if ((long long *)a2 != a3)
  {
    long long v5 = result + 1;
    do
    {
      *(_OWORD *)long long v5 = *(_OWORD *)a2;
      v5[2] = *(void *)(a2 + 16);
      a2 += 24;
      v5 += 3;
    }
    while ((long long *)a2 != a3);
  }
  *__n128 result = v3;
  return result;
}

void sub_10004B78C(double *a1, double *a2)
{
  double v3 = *a2;
  double v85 = a2[1];
  double v86 = v3;
  sub_10004BFE4(&v86, &v85, 1);
  double v5 = v85;
  double v4 = v86;
  double v6 = *a1;
  double v7 = a1[2];
  double v8 = a1[3];
  if (*a1 == 1.79769313e308 && a1[1] == 1.79769313e308 && v7 == -1.79769313e308 && v8 == -1.79769313e308)
  {
    double v14 = (double *)&unk_1003DC000;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
    {
      int v75 = __cxa_guard_acquire(&qword_1003DCBC0);
      double v14 = (double *)&unk_1003DC000;
      if (v75)
      {
        qword_1003DCBB8 = 0x3F91DF46A2529D39;
        __cxa_guard_release(&qword_1003DCBC0);
        double v14 = (double *)&unk_1003DC000;
      }
    }
    double v15 = v4 * v14[375];
    double v16 = (double *)&unk_1003DC000;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBD0, memory_order_acquire) & 1) == 0)
    {
      int v76 = __cxa_guard_acquire(&qword_1003DCBD0);
      double v16 = (double *)&unk_1003DC000;
      double v14 = (double *)&unk_1003DC000;
      if (v76)
      {
        qword_1003DCBC8 = 0x404CA5DC1A63C1F8;
        __cxa_guard_release(&qword_1003DCBD0);
        double v16 = (double *)&unk_1003DC000;
        double v14 = (double *)&unk_1003DC000;
      }
    }
    *a1 = v15 * v16[377];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
    {
      int v77 = __cxa_guard_acquire(&qword_1003DCBC0);
      double v16 = (double *)&unk_1003DC000;
      double v14 = (double *)&unk_1003DC000;
      if (v77)
      {
        qword_1003DCBB8 = 0x3F91DF46A2529D39;
        __cxa_guard_release(&qword_1003DCBC0);
        double v16 = (double *)&unk_1003DC000;
        double v14 = (double *)&unk_1003DC000;
      }
    }
    double v17 = v5 * v14[375];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBD0, memory_order_acquire) & 1) == 0)
    {
      int v78 = __cxa_guard_acquire(&qword_1003DCBD0);
      double v16 = (double *)&unk_1003DC000;
      double v14 = (double *)&unk_1003DC000;
      if (v78)
      {
        qword_1003DCBC8 = 0x404CA5DC1A63C1F8;
        __cxa_guard_release(&qword_1003DCBD0);
        double v16 = (double *)&unk_1003DC000;
        double v14 = (double *)&unk_1003DC000;
      }
    }
    a1[1] = v17 * v16[377];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
    {
      int v79 = __cxa_guard_acquire(&qword_1003DCBC0);
      double v16 = (double *)&unk_1003DC000;
      double v14 = (double *)&unk_1003DC000;
      if (v79)
      {
        qword_1003DCBB8 = 0x3F91DF46A2529D39;
        __cxa_guard_release(&qword_1003DCBC0);
        double v16 = (double *)&unk_1003DC000;
        double v14 = (double *)&unk_1003DC000;
      }
    }
    double v18 = v4 * v14[375];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBD0, memory_order_acquire) & 1) == 0)
    {
      int v80 = __cxa_guard_acquire(&qword_1003DCBD0);
      double v16 = (double *)&unk_1003DC000;
      double v14 = (double *)&unk_1003DC000;
      if (v80)
      {
        qword_1003DCBC8 = 0x404CA5DC1A63C1F8;
        __cxa_guard_release(&qword_1003DCBD0);
        double v16 = (double *)&unk_1003DC000;
        double v14 = (double *)&unk_1003DC000;
      }
    }
    a1[2] = v18 * v16[377];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
    {
      int v81 = __cxa_guard_acquire(&qword_1003DCBC0);
      double v16 = (double *)&unk_1003DC000;
      double v14 = (double *)&unk_1003DC000;
      if (v81)
      {
        qword_1003DCBB8 = 0x3F91DF46A2529D39;
        __cxa_guard_release(&qword_1003DCBC0);
        double v16 = (double *)&unk_1003DC000;
        double v14 = (double *)&unk_1003DC000;
      }
    }
    double v19 = v5 * v14[375];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBD0, memory_order_acquire) & 1) == 0)
    {
      int v82 = __cxa_guard_acquire(&qword_1003DCBD0);
      double v16 = (double *)&unk_1003DC000;
      if (v82)
      {
        qword_1003DCBC8 = 0x404CA5DC1A63C1F8;
        __cxa_guard_release(&qword_1003DCBD0);
        double v16 = (double *)&unk_1003DC000;
      }
    }
    double v20 = v19 * v16[377];
  }
  else
  {
    double v85 = a1[1];
    double v86 = v6;
    double v83 = v8;
    double v84 = v7;
    double v12 = vabdd_f64(v6, v7);
    if (v12 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v6 - v7)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        BOOL v13 = 0;
      }
      else
      {
        double v21 = vabdd_f64(360.0, v12);
        double v22 = fmax(v12, 360.0);
        if (v22 >= 1.0) {
          double v23 = v22 * 2.22044605e-16;
        }
        else {
          double v23 = 2.22044605e-16;
        }
        BOOL v13 = v21 <= v23;
      }
    }
    else
    {
      BOOL v13 = 1;
    }
    sub_10004C254(&v86, &v85, &v84, &v83, v13);
    double v25 = v85;
    double v24 = v86;
    *a1 = v86;
    double v20 = v83;
    double v26 = v84;
    a1[2] = v84;
    double v27 = fabs(v5);
    double v28 = 90.0;
    if (v27 == 90.0) {
      goto LABEL_29;
    }
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_43;
    }
    double v30 = fabs(v27 + -90.0);
    if (v27 < 90.0) {
      double v27 = 90.0;
    }
    double v31 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
    if (v30 <= v31)
    {
LABEL_29:
      if (v25 >= v5) {
        double v29 = v5;
      }
      else {
        double v29 = v25;
      }
      a1[1] = v29;
    }
    else
    {
LABEL_43:
      if (v25 == v20)
      {
        double v32 = fabs(v25);
      }
      else
      {
        if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_66;
        }
        double v34 = vabdd_f64(v25, v20);
        double v32 = fabs(v25);
        double v35 = fabs(v20);
        if (v32 >= v35) {
          double v35 = v32;
        }
        double v36 = v35 >= 1.0 ? v35 * 2.22044605e-16 : 2.22044605e-16;
        if (v34 > v36)
        {
LABEL_66:
          if (v5 < v25) {
            double v25 = v5;
          }
          if (v20 < v5) {
            double v20 = v5;
          }
          if (v4 >= v24) {
            goto LABEL_79;
          }
          if ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_91;
          }
          double v45 = vabdd_f64(v24, v4);
          double v46 = fabs(v24);
          double v47 = fabs(v4);
          if (v46 < v47) {
            double v46 = v47;
          }
          double v48 = v46 >= 1.0 ? v46 * 2.22044605e-16 : 2.22044605e-16;
          if (v45 <= v48)
          {
LABEL_79:
            if (v26 < v4)
            {
              if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                || (*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              {
                goto LABEL_143;
              }
              double v39 = vabdd_f64(v4, v26);
              double v40 = fabs(v4);
              double v41 = fabs(v26);
              if (v40 < v41) {
                double v40 = v41;
              }
              double v42 = v40 >= 1.0 ? v40 * 2.22044605e-16 : 2.22044605e-16;
              if (v39 > v42)
              {
LABEL_143:
                if (v24 < 0.0)
                {
                  double v43 = v4 - v26;
                  double v44 = 360.0 - v4 + v24;
                  if (v44 < v4 - v26)
                  {
                    if (COERCE_UNSIGNED_INT64(fabs(v4 - v26)) > 0x7FEFFFFFFFFFFFFFLL) {
                      goto LABEL_144;
                    }
                    unint64_t v68 = COERCE__INT64(fabs(360.0 - v4 + v24)) - 1;
                    BOOL v69 = (unint64_t)(COERCE__INT64(fabs(360.0 - v4 + v24)) - 0x10000000000000) >> 53 > 0x3FE
                       && v68 > 0xFFFFFFFFFFFFELL;
                    if (v69 && *(void *)&v44 != 0) {
                      goto LABEL_144;
                    }
                    double v71 = vabdd_f64(v43, v44);
                    double v72 = fabs(v43);
                    double v73 = fabs(v44);
                    if (v72 < v73) {
                      double v72 = v73;
                    }
                    double v74 = v72 >= 1.0 ? v72 * 2.22044605e-16 : 2.22044605e-16;
                    if (v71 > v74)
                    {
LABEL_144:
                      double v26 = v26 + 360.0;
                      goto LABEL_110;
                    }
                  }
                }
                double v26 = v4;
              }
            }
          }
          else
          {
LABEL_91:
            double v49 = v4 + 360.0;
            if (v26 < v4 + 360.0)
            {
              unint64_t v50 = COERCE__INT64(fabs(v4 + 360.0)) - 1;
              BOOL v51 = (unint64_t)(COERCE__INT64(fabs(v4 + 360.0)) - 0x10000000000000) >> 53 > 0x3FE
                 && v50 > 0xFFFFFFFFFFFFELL;
              BOOL v52 = !v51 || *(void *)&v49 == 0;
              if (!v52 || (*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                goto LABEL_107;
              }
              double v53 = vabdd_f64(v49, v26);
              double v54 = fabs(v49);
              double v55 = fabs(v26);
              if (v54 < v55) {
                double v54 = v55;
              }
              double v56 = v54 >= 1.0 ? v54 * 2.22044605e-16 : 2.22044605e-16;
              if (v53 > v56)
              {
LABEL_107:
                double v57 = v24 - v4;
                double v58 = v49 - v26;
                if (v24 - v4 < v49 - v26)
                {
                  unint64_t v59 = COERCE__INT64(fabs(v49 - v26)) - 1;
                  BOOL v60 = (unint64_t)(COERCE__INT64(fabs(v49 - v26)) - 0x10000000000000) >> 53 > 0x3FE
                     && v59 > 0xFFFFFFFFFFFFELL;
                  BOOL v61 = !v60 || *(void *)&v58 == 0;
                  double v62 = fabs(v24 - v4);
                  if (!v61 || *(void *)&v62 > 0x7FEFFFFFFFFFFFFFLL) {
                    goto LABEL_110;
                  }
                  double v64 = vabdd_f64(v58, v57);
                  double v65 = fabs(v58);
                  double v66 = fabs(v57);
                  if (v65 >= v66) {
                    double v66 = v65;
                  }
                  double v67 = v66 >= 1.0 ? v66 * 2.22044605e-16 : 2.22044605e-16;
                  if (v64 > v67) {
                    goto LABEL_110;
                  }
                }
                double v26 = v4 + 360.0;
              }
            }
          }
          double v4 = v24;
LABEL_110:
          *a1 = v4;
          a1[1] = v25;
          a1[2] = v26;
          goto LABEL_35;
        }
      }
      if (v32 != 90.0)
      {
        if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_66;
        }
        double v37 = fabs(v32 + -90.0);
        if (v32 >= 90.0) {
          double v28 = v32;
        }
        double v38 = v28 >= 1.0 ? v28 * 2.22044605e-16 : 2.22044605e-16;
        if (v37 > v38) {
          goto LABEL_66;
        }
      }
      if (v25 >= v5) {
        double v33 = v5;
      }
      else {
        double v33 = v25;
      }
      *a1 = v4;
      a1[1] = v33;
      a1[2] = v4;
    }
    if (v5 >= v20) {
      double v20 = v5;
    }
  }
LABEL_35:
  a1[3] = v20;
}

void sub_10004BFE4(double *a1, double *a2, int a3)
{
  double v6 = *a1;
  double v7 = fabs(*a1);
  double v8 = 180.0;
  if (v7 == 180.0) {
    goto LABEL_2;
  }
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v10 = fabs(v7 + -180.0);
    double v8 = 180.0;
    if (v7 < 180.0) {
      double v7 = 180.0;
    }
    double v11 = v7 >= 1.0 ? v7 * 2.22044605e-16 : 2.22044605e-16;
    if (v10 <= v11) {
      goto LABEL_2;
    }
  }
  double v8 = 180.0;
  if (v6 <= 180.0)
  {
    if (v6 >= -180.0) {
      goto LABEL_3;
    }
    double v8 = fmod(v6 + -180.0, 360.0) + 180.0;
    goto LABEL_2;
  }
  double v6 = fmod(v6 + 180.0, 360.0) + -180.0;
  *a1 = v6;
  if (v6 == -180.0) {
    goto LABEL_2;
  }
  BOOL v12 = ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v12 || *(void *)&v6 == 0)
  {
    double v8 = 180.0;
    double v14 = fabs(v6 + 180.0);
    double v15 = fabs(v6);
    if (v15 < 180.0) {
      double v15 = 180.0;
    }
    double v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 <= v16)
    {
LABEL_2:
      *a1 = v8;
      double v6 = v8;
    }
  }
  if (!a3) {
    goto LABEL_37;
  }
LABEL_3:
  double v9 = fabs(*a2);
  if (v9 == 90.0) {
    goto LABEL_5;
  }
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_37;
  }
  double v17 = fabs(v9 + -90.0);
  if (v9 < 90.0) {
    double v9 = 90.0;
  }
  double v18 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
  if (v17 <= v18)
  {
LABEL_5:
    *a1 = 0.0;
    double v6 = 0.0;
  }
  else
  {
LABEL_37:
    if (v6 <= -180.0) {
      goto LABEL_52;
    }
    if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v6 <= 180.0) {
        return;
      }
LABEL_49:
      sub_100054468();
    }
  }
  double v19 = fabs(v6 + 180.0);
  double v20 = fabs(v6);
  if (v20 < 180.0) {
    double v20 = 180.0;
  }
  if (v20 >= 1.0) {
    double v21 = v20 * 2.22044605e-16;
  }
  else {
    double v21 = 2.22044605e-16;
  }
  if (v19 <= v21) {
LABEL_52:
  }
    sub_100054494();
  if (v6 > 180.0 && fabs(v6 + -180.0) > v21) {
    goto LABEL_49;
  }
}

double sub_10004C254(double *a1, double *a2, double *a3, double *a4, int a5)
{
  sub_10004BFE4(a1, a2, 0);
  sub_10004BFE4(a3, a4, 0);
  double v10 = *a2;
  if (*a2 == -90.0) {
    goto LABEL_9;
  }
  if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v15 = 90.0;
    double v16 = fabs(v10 + 90.0);
    double v17 = fabs(v10);
    if (v17 >= 90.0) {
      double v15 = v17;
    }
    double v18 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 <= v18)
    {
LABEL_9:
      double v11 = *a4;
      if (*a4 == -90.0) {
        goto LABEL_20;
      }
      if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v12 = fabs(v11 + 90.0);
        double v13 = fabs(v11);
        if (v13 < 90.0) {
          double v13 = 90.0;
        }
        double v14 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
        if (v12 <= v14) {
          goto LABEL_20;
        }
      }
    }
  }
  if (v10 != 90.0)
  {
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_60;
    }
    double v33 = fabs(v10 + -90.0);
    double v34 = fabs(v10);
    if (v34 < 90.0) {
      double v34 = 90.0;
    }
    double v35 = v34 >= 1.0 ? v34 * 2.22044605e-16 : 2.22044605e-16;
    if (v33 > v35) {
      goto LABEL_60;
    }
  }
  double v19 = *a4;
  if (*a4 == 90.0) {
    goto LABEL_20;
  }
  if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_60;
  }
  double v36 = fabs(v19 + -90.0);
  double v37 = fabs(v19);
  if (v37 < 90.0) {
    double v37 = 90.0;
  }
  double v38 = v37 >= 1.0 ? v37 * 2.22044605e-16 : 2.22044605e-16;
  if (v36 <= v38)
  {
LABEL_20:
    *a3 = 0.0;
    *a1 = 0.0;
    double v20 = 0.0;
  }
  else
  {
LABEL_60:
    if (a5)
    {
      *a1 = -180.0;
      double v39 = 180.0;
LABEL_64:
      *a3 = v39;
      double v20 = *a1;
      goto LABEL_21;
    }
    double v20 = *a1;
    if (*a1 > *a3)
    {
      double v39 = *a3 + 360.0;
      goto LABEL_64;
    }
  }
LABEL_21:
  double v21 = *a3;
  if (*a3 < v20)
  {
    if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_65;
    }
    double v22 = vabdd_f64(v20, v21);
    double v23 = fabs(v20);
    double v24 = fabs(v21);
    if (v23 < v24) {
      double v23 = v24;
    }
    double v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
    if (v22 > v25) {
LABEL_65:
    }
      sub_100054518();
  }
  if (v20 < -180.0)
  {
    if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((double v26 = vabdd_f64(-180.0, v20), v27 = fmax(fabs(v20), 180.0), v27 >= 1.0)
        ? (double v28 = v27 * 2.22044605e-16)
        : (double v28 = 2.22044605e-16),
          v26 > v28))
    {
      sub_1000544EC();
    }
  }
  double v29 = v21 - v20;
  double result = 360.0;
  if (v29 > 360.0)
  {
    if ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_67;
    }
    double v31 = fabs(v29 + -360.0);
    double v32 = fabs(v29);
    if (v32 >= 360.0) {
      double result = v32;
    }
    double result = result >= 1.0 ? result * 2.22044605e-16 : 2.22044605e-16;
    if (v31 > result) {
LABEL_67:
    }
      sub_1000544C0();
  }
  return result;
}

void sub_10004C590(_DWORD *a1, uint64_t *a2)
{
  double v4 = a2;
  int v2 = (void **)(a1 + 2);
  int v3 = *a1;
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
      if (v3 < 0) {
        int v2 = (void **)*v2;
      }
      sub_10004C68C(&v4, v2);
      break;
    case 1:
      if (v3 < 0)
      {
        sub_10004C7AC((void ***)&v4, *v2);
      }
      else
      {
        sub_10004C8A4((_DWORD **)a2, v2);
      }
      break;
    default:
      sub_10004A824();
  }
}

void sub_10004C68C(uint64_t **a1, void *a2)
{
  int v3 = *a1;
  double v4 = sub_10004A774((_DWORD *)**a1);
  if (!v4) {
    sub_10004A714();
  }
  if (v4 != a2) {
    sub_100054544();
  }
  double v5 = (void *)*v3;
  sub_10004C72C(*v3);
  operator delete(v5);
}

void sub_10004C714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
}

uint64_t sub_10004C72C(uint64_t result)
{
  int v1 = *(_DWORD *)result;
  int v2 = v1 ^ (v1 >> 31);
  if (v2 == 1)
  {
    if (v1 < 0)
    {
      double result = *(void *)(result + 8);
      if (result) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v2) {
      sub_10004A824();
    }
    if (v1 < 0)
    {
      double result = *(void *)(result + 8);
      if (result)
      {
LABEL_9:
        operator delete();
      }
    }
  }
  return result;
}

void sub_10004C7AC(void ***a1, void *a2)
{
  int v3 = *a1;
  double v4 = sub_10004C99C(**a1);
  if (!v4) {
    sub_10004A714();
  }
  if (v4 != a2) {
    sub_100054570();
  }
  double v5 = *v3;
  if (*a2)
  {
    double v6 = a2 + 5;
    double v7 = a2 + 5;
    do
    {
      double v8 = (void *)*v7;
      v7 += 5;
      *int v3 = v8;
      sub_10004C590();
      *double v6 = 0;
      BOOL v9 = v6 + 1 == &a2[5 * *a2 + 1];
      double v6 = v7;
    }
    while (!v9);
  }
  sub_10004C72C((uint64_t)v5);
  operator delete(v5);
}

void sub_10004C88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
}

void sub_10004C8A4(_DWORD **a1, void *a2)
{
  double v4 = sub_10004C99C(*a1);
  if (!v4) {
    sub_10004A714();
  }
  if (v4 != a2) {
    sub_100054570();
  }
  double v5 = *a1;
  if (*a2)
  {
    double v6 = a2 + 5;
    double v7 = a2 + 5;
    do
    {
      double v8 = (_DWORD *)*v7;
      v7 += 5;
      *a1 = v8;
      sub_10004C590();
      *double v6 = 0;
      BOOL v9 = v6 + 1 == &a2[5 * *a2 + 1];
      double v6 = v7;
    }
    while (!v9);
  }
  sub_10004C72C((uint64_t)v5);
  operator delete(v5);
}

void sub_10004C984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
}

void *sub_10004C99C(_DWORD *a1)
{
  int v3 = *a1;
  int v1 = a1 + 2;
  int v2 = v3;
  double v4 = 0;
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
      return v4;
    case 1:
      if (v2 < 0) {
        double v4 = (void *)*v1;
      }
      else {
        double v4 = v1;
      }
      break;
    default:
      sub_10004A824();
  }
  return v4;
}

void sub_10004CA4C(uint64_t a1, _DWORD *a2)
{
  double v4 = *(_DWORD **)a1;
  if (v4) {
    BOOL v5 = v4 == a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    v7[0] = (uint64_t)v4;
    v7[1] = v6;
    sub_10004C590(v4, v7);
  }
  *(void *)a1 = a2;
}

void sub_10004CA9C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *(void *)(*a1 + 104);
  if (v3 >= **(void **)(*a1 + 80)) {
    sub_1000545C8();
  }
  if (v3 >= *(void *)(v2 + 64)) {
    sub_10005459C();
  }
  sub_10004CCB4(*a1, v2, a2);

  sub_10004CE2C(v2, a2);
}

void sub_10004CB10(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = *(void *)(a1 + 104);
  if (v2 >= **(void **)(a1 + 80)) {
    sub_1000545C8();
  }
  if (v2 >= *(void *)(a1 + 64)) {
    sub_10005459C();
  }
  uint64_t v5 = *a2;
  if (!*a2) {
    sub_1000545F4();
  }
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  double v8 = *(double **)a1;
  BOOL v9 = a2 + 1;
  double v10 = a2 + 2;
  double v11 = 1.79769313e308;
  double v12 = 1.79769313e308;
  do
  {
    if (*a2 <= v6) {
      sub_10005438C();
    }
    long long v13 = *(_OWORD *)(v10 + 1);
    long long v19 = *(_OWORD *)(v10 - 1);
    long long v20 = v13;
    sub_10004B78C((double *)&v19, v8);
    double v14 = (*(double *)&v20 - *(double *)&v19) * (*((double *)&v20 + 1) - *((double *)&v19 + 1));
    double v15 = *((double *)v10 + 2) - *(double *)v10;
    double v16 = v14 - (*((double *)v10 + 1) - *((double *)v10 - 1)) * v15;
    if (v16 < v12 || (v16 == v12 ? (BOOL v17 = v14 < v11) : (BOOL v17 = 0), v17))
    {
      unint64_t v7 = v6;
      double v12 = v14 - (*((double *)v10 + 1) - *((double *)v10 - 1)) * v15;
      double v11 = (*(double *)&v20 - *(double *)&v19) * (*((double *)&v20 + 1) - *((double *)&v19 + 1));
    }
    ++v6;
    v10 += 5;
  }
  while (v5 != v6);
  if (*a2 <= v7) {
    sub_10005438C();
  }
  sub_10004CEDC((double *)&v9[5 * v7], (double *)(a1 + 8));
  long long v19 = *(_OWORD *)(a1 + 88);
  *(void *)&long long v20 = *(void *)(a1 + 104);
  uint64_t v18 = v20;
  *(void *)(a1 + 88) = a2;
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = v18 + 1;
  if (*a2 <= v7) {
    sub_10005438C();
  }
  sub_10004A140(v9[5 * v7 + 4], a1);
  *(_OWORD *)(a1 + 88) = v19;
  *(void *)(a1 + 104) = v20;
  sub_10004CE2C(a1, a2);
}

double sub_10004CCB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (!*a3) {
    sub_1000545F4();
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  BOOL v9 = *(double **)a1;
  double v10 = a3 + 1;
  double v11 = a3 + 2;
  double v12 = 1.79769313e308;
  double v13 = 1.79769313e308;
  do
  {
    if (*a3 <= v7) {
      sub_10005438C();
    }
    long long v14 = *(_OWORD *)(v11 + 1);
    long long v21 = *(_OWORD *)(v11 - 1);
    long long v22 = v14;
    sub_10004B78C((double *)&v21, v9);
    double v15 = (*(double *)&v22 - *(double *)&v21) * (*((double *)&v22 + 1) - *((double *)&v21 + 1));
    double v16 = *((double *)v11 + 2) - *(double *)v11;
    double v17 = v15 - (*((double *)v11 + 1) - *((double *)v11 - 1)) * v16;
    if (v17 < v13 || (v17 == v13 ? (BOOL v18 = v15 < v12) : (BOOL v18 = 0), v18))
    {
      unint64_t v8 = v7;
      double v13 = v15 - (*((double *)v11 + 1) - *((double *)v11 - 1)) * v16;
      double v12 = (*(double *)&v22 - *(double *)&v21) * (*((double *)&v22 + 1) - *((double *)&v21 + 1));
    }
    ++v7;
    v11 += 5;
  }
  while (v3 != v7);
  if (*a3 <= v8) {
    sub_10005438C();
  }
  sub_10004CEDC((double *)&v10[5 * v8], (double *)(a1 + 8));
  long long v21 = *(_OWORD *)(a1 + 88);
  *(void *)&long long v22 = *(void *)(a1 + 104);
  uint64_t v19 = v22;
  *(void *)(a1 + 88) = a3;
  *(void *)(a1 + 96) = v8;
  *(void *)(a1 + 104) = v19 + 1;
  if (*a3 <= v8) {
    sub_10005438C();
  }
  sub_10004A140(v10[5 * v8 + 4], a2);
  double result = *(double *)&v21;
  *(_OWORD *)(a1 + 88) = v21;
  *(void *)(a1 + 104) = v22;
  return result;
}

void sub_10004CE2C(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v4 = a1 + 88;
  if (v5)
  {
    uint64_t v6 = sub_10004A3AC(v4);
    unint64_t v7 = sub_10004C99C(*(_DWORD **)(v6 + 32));
    if (!v7) {
      sub_10004A714();
    }
    if (v7 != a2) {
      sub_100054334();
    }
  }
  if (*a2 > 0x10uLL) {
    sub_10004E5AC(a1, a2);
  }
}

void sub_10004CEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
}

void sub_10004CEDC(double *a1, double *a2)
{
  double v3 = *a2;
  double v4 = a2[2];
  double v5 = a2[3];
  double v6 = 1.79769313e308;
  if (*a2 == 1.79769313e308 && a2[1] == 1.79769313e308 && v4 == -1.79769313e308 && v5 == -1.79769313e308)
  {
    double v12 = -1.79769313e308;
    double v13 = -1.79769313e308;
    double v14 = 1.79769313e308;
  }
  else
  {
    double v36 = a2[1];
    v37[0] = v3;
    double v34 = v5;
    double v35 = v4;
    double v10 = vabdd_f64(v3, v4);
    if (v10 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v3 - v4)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        BOOL v11 = 0;
      }
      else
      {
        double v15 = vabdd_f64(360.0, v10);
        double v16 = fmax(v10, 360.0);
        if (v16 >= 1.0) {
          double v17 = v16 * 2.22044605e-16;
        }
        else {
          double v17 = 2.22044605e-16;
        }
        BOOL v11 = v15 <= v17;
      }
    }
    else
    {
      BOOL v11 = 1;
    }
    sub_10004C254(v37, &v36, &v35, &v34, v11);
    double v6 = v36;
    double v14 = v37[0];
    double v12 = v34;
    double v13 = v35;
  }
  v37[0] = v14;
  v37[1] = v6;
  v37[2] = v13;
  v37[3] = v12;
  double v18 = *a1;
  double v19 = a1[2];
  double v20 = a1[3];
  double v21 = 1.79769313e308;
  if (*a1 == 1.79769313e308 && a1[1] == 1.79769313e308 && v19 == -1.79769313e308 && v20 == -1.79769313e308)
  {
    double v27 = -1.79769313e308;
    double v28 = -1.79769313e308;
    double v29 = 1.79769313e308;
  }
  else
  {
    double v35 = a1[1];
    double v36 = v18;
    double v33 = v20;
    double v34 = v19;
    double v25 = vabdd_f64(v18, v19);
    if (v25 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v18 - v19)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        BOOL v26 = 0;
      }
      else
      {
        double v30 = vabdd_f64(360.0, v25);
        double v31 = fmax(v25, 360.0);
        if (v31 >= 1.0) {
          double v32 = v31 * 2.22044605e-16;
        }
        else {
          double v32 = 2.22044605e-16;
        }
        BOOL v26 = v30 <= v32;
      }
    }
    else
    {
      BOOL v26 = 1;
    }
    sub_10004C254(&v36, &v35, &v34, &v33, v26);
    double v21 = v35;
    double v29 = v36;
    double v27 = v33;
    double v28 = v34;
  }
  v37[4] = v29;
  v37[5] = v21;
  v37[6] = v28;
  v37[7] = v27;
  sub_10004D0D8((uint64_t)v37, a1);
}

void sub_10004D0D8(uint64_t a1, void *a2)
{
  uint64_t v46 = sub_10004DAAC(a1, a1 + 64);
  double v4 = *(double *)(a1 + 24);
  double v5 = *(double *)(a1 + 56);
  uint64_t v6 = a1;
  if (v4 < v5)
  {
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_6;
    }
    double v42 = vabdd_f64(v5, v4);
    double v43 = fabs(v5);
    double v44 = fabs(v4);
    if (v43 >= v44) {
      double v44 = v43;
    }
    double v45 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
    uint64_t v6 = a1;
    if (v42 > v45) {
LABEL_6:
    }
      uint64_t v6 = a1 + 32;
  }
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  __p = 0;
  double v54 = 0;
  v55[0] = 0;
  float64x2_t v49 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  do
  {
    double v10 = (float64x2_t *)(a1 + 32 * v9);
    float64x2_t v11 = *v10;
    float64x2_t v50 = v10[1];
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v10, v48), (int32x4_t)vceqq_f64(v50, v49))))))
    {
      float64x2_t v47 = *v10;
      if (v11.f64[1] != 90.0)
      {
        if ((*(void *)&v11.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_17;
        }
        v11.f64[0] = fabs(v11.f64[1] + -90.0);
        double v12 = fabs(v11.f64[1]);
        if (v12 < 90.0) {
          double v12 = 90.0;
        }
        double v13 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
        if (v11.f64[0] > v13)
        {
LABEL_17:
          if (v50.f64[1] != -90.0)
          {
            if ((*(void *)&v50.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
              goto LABEL_34;
            }
            double v14 = fabs(v50.f64[1] + 90.0);
            double v15 = fabs(v50.f64[1]);
            if (v15 < 90.0) {
              double v15 = 90.0;
            }
            double v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
            if (v14 > v16)
            {
LABEL_34:
              if (v50.f64[0] <= 180.0) {
                goto LABEL_26;
              }
              if ((*(void *)&v50.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                goto LABEL_35;
              }
              double v17 = fabs(v50.f64[0] + -180.0);
              double v18 = fabs(v50.f64[0]);
              if (v18 < 180.0) {
                double v18 = 180.0;
              }
              double v19 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
              if (v17 <= v19)
              {
LABEL_26:
                if ((unint64_t)v8 < v55[0])
                {
                  *unint64_t v8 = *(void *)&v47.f64[0];
                  v8[1] = *(void *)&v50.f64[0];
                  v8 += 2;
LABEL_79:
                  double v54 = (char *)v8;
                  goto LABEL_80;
                }
                uint64_t v21 = ((char *)v8 - (unsigned char *)__p) >> 4;
                if ((unint64_t)(v21 + 1) >> 60) {
                  sub_10000EE98();
                }
                unint64_t v22 = (uint64_t)(v55[0] - (void)__p) >> 3;
                if (v22 <= v21 + 1) {
                  unint64_t v22 = v21 + 1;
                }
                if (v55[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
                  unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v23 = v22;
                }
                if (v23) {
                  double v24 = (char *)sub_10004684C((uint64_t)v55, v23);
                }
                else {
                  double v24 = 0;
                }
                double v29 = &v24[16 * v21];
                *(float64_t *)double v29 = v47.f64[0];
                *((void *)v29 + 1) = *(void *)&v50.f64[0];
                double v31 = (char *)__p;
                double v30 = v54;
                double v32 = v29;
                if (v54 != __p)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v31);
LABEL_76:
                  double v30 = (char *)__p;
                }
              }
              else
              {
LABEL_35:
                if ((unint64_t)v8 >= v55[0])
                {
                  uint64_t v25 = ((char *)v8 - (unsigned char *)__p) >> 4;
                  if ((unint64_t)(v25 + 1) >> 60) {
                    sub_10000EE98();
                  }
                  unint64_t v26 = (uint64_t)(v55[0] - (void)__p) >> 3;
                  if (v26 <= v25 + 1) {
                    unint64_t v26 = v25 + 1;
                  }
                  if (v55[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
                    unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v27 = v26;
                  }
                  if (v27) {
                    double v28 = (char *)sub_10004684C((uint64_t)v55, v27);
                  }
                  else {
                    double v28 = 0;
                  }
                  double v33 = &v28[16 * v25];
                  *(float64_t *)double v33 = v47.f64[0];
                  *((void *)v33 + 1) = 0x4066800000000000;
                  double v35 = (char *)__p;
                  double v34 = v54;
                  double v36 = v33;
                  if (v54 != __p)
                  {
                    do
                    {
                      *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
                      v36 -= 16;
                      v34 -= 16;
                    }
                    while (v34 != v35);
                    double v34 = (char *)__p;
                  }
                  double v20 = v33 + 16;
                  __p = v36;
                  double v54 = v33 + 16;
                  v55[0] = &v28[16 * v27];
                  if (v34) {
                    operator delete(v34);
                  }
                }
                else
                {
                  *unint64_t v8 = *(void *)&v47.f64[0];
                  v8[1] = 0x4066800000000000;
                  double v20 = v8 + 2;
                }
                double v54 = (char *)v20;
                double v37 = v50.f64[0] + -360.0;
                if ((unint64_t)v20 < v55[0])
                {
                  *double v20 = 0xC066800000000000;
                  *((double *)v20 + 1) = v37;
                  unint64_t v8 = v20 + 2;
                  goto LABEL_79;
                }
                uint64_t v38 = ((char *)v20 - (unsigned char *)__p) >> 4;
                if ((unint64_t)(v38 + 1) >> 60) {
                  sub_10000EE98();
                }
                unint64_t v39 = (uint64_t)(v55[0] - (void)__p) >> 3;
                if (v39 <= v38 + 1) {
                  unint64_t v39 = v38 + 1;
                }
                if (v55[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
                  unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v23 = v39;
                }
                if (v23) {
                  double v24 = (char *)sub_10004684C((uint64_t)v55, v23);
                }
                else {
                  double v24 = 0;
                }
                double v29 = &v24[16 * v38];
                *(void *)double v29 = 0xC066800000000000;
                *((double *)v29 + 1) = v37;
                double v40 = (char *)__p;
                double v30 = v54;
                double v32 = v29;
                if (v54 != __p)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v40);
                  goto LABEL_76;
                }
              }
              unint64_t v8 = v29 + 16;
              __p = v32;
              double v54 = v29 + 16;
              v55[0] = &v24[16 * v23];
              if (v30) {
                operator delete(v30);
              }
              goto LABEL_79;
            }
          }
        }
      }
    }
LABEL_80:
    ++v9;
  }
  while (v9 != 2);
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  sub_10004D630((uint64_t *)&__p, (double *)&v52, (double *)&v51);
  uint64_t v41 = v51;
  *a2 = v52;
  a2[1] = *(void *)(v46 + 8);
  a2[2] = v41;
  a2[3] = *(void *)(v6 + 24);
  if (__p)
  {
    double v54 = (char *)__p;
    operator delete(__p);
  }
}

void sub_10004D5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004D630(uint64_t *a1, double *a2, double *a3)
{
  *a3 = 0.0;
  *a2 = 0.0;
  double v5 = (void *)*a1;
  uint64_t v6 = (void *)a1[1];
  if (v5 != v6)
  {
    *a2 = *(double *)sub_10004DC88(v5, v6);
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    uint64_t v10 = *a1 + 16;
    if (*a1 != v9 && v10 != v9)
    {
      do
      {
        double v49 = *(double *)(v8 + 8);
        double v50 = *(double *)(v10 + 8);
        if (v49 < v50)
        {
          if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_87;
          }
          double v52 = vabdd_f64(v50, v49);
          double v53 = fabs(v50);
          double v54 = fabs(v49);
          if (v53 >= v54) {
            double v54 = v53;
          }
          double v55 = v54 >= 1.0 ? v54 * 2.22044605e-16 : 2.22044605e-16;
          if (v52 > v55) {
LABEL_87:
          }
            uint64_t v8 = v10;
        }
        v10 += 16;
      }
      while (v10 != v9);
    }
    double v12 = *(double *)(v8 + 8);
    *a3 = v12;
    double v13 = v12 - *a2;
    if (v13 > 180.0)
    {
      if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_61;
      }
      double v14 = fabs(v13 + -180.0);
      double v15 = fabs(v13);
      if (v15 < 180.0) {
        double v15 = 180.0;
      }
      double v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
      if (v14 > v16)
      {
LABEL_61:
        double v56 = 0.0;
        double v57 = 0.0;
        double v17 = sub_10004DB40(a1, &v57, &v56);
        double v18 = *a3;
        double v19 = *a2;
        if (*a3 < *a2)
        {
          if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_100;
          }
          double v20 = vabdd_f64(v19, v18);
          double v21 = fabs(v19);
          double v22 = fabs(v18);
          if (v21 < v22) {
            double v21 = v22;
          }
          double v23 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
          if (v20 > v23) {
LABEL_100:
          }
            sub_1000546FC();
        }
        if (v18 > 180.0)
        {
          if ((*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
            goto LABEL_102;
          }
          double v24 = fabs(v18 + -180.0);
          double v25 = fabs(v18);
          if (v25 < 180.0) {
            double v25 = 180.0;
          }
          double v26 = v25 >= 1.0 ? v25 * 2.22044605e-16 : 2.22044605e-16;
          if (v24 > v26) {
LABEL_102:
          }
            sub_1000546D0();
        }
        if (v19 < -180.0)
        {
          if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((double v27 = vabdd_f64(-180.0, v19), v28 = fmax(fabs(v19), 180.0), v28 >= 1.0)
              ? (double v29 = v28 * 2.22044605e-16)
              : (double v29 = 2.22044605e-16),
                v27 > v29))
          {
            sub_1000546A4();
          }
        }
        double v30 = v57;
        if (v56 < v57)
        {
          if ((*(void *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v56 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_101;
          }
          double v31 = vabdd_f64(v57, v56);
          double v32 = fabs(v57);
          double v33 = fabs(v56);
          if (v32 < v33) {
            double v32 = v33;
          }
          double v34 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
          if (v31 > v34) {
LABEL_101:
          }
            sub_100054678();
        }
        if (v56 > 180.0)
        {
          if ((*(void *)&v56 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
            goto LABEL_104;
          }
          double v35 = fabs(v56 + -180.0);
          double v36 = fabs(v56);
          if (v36 < 180.0) {
            double v36 = 180.0;
          }
          double v37 = v36 >= 1.0 ? v36 * 2.22044605e-16 : 2.22044605e-16;
          if (v35 > v37) {
LABEL_104:
          }
            sub_10005464C();
        }
        if (v57 < -180.0)
        {
          if ((*(void *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((double v38 = vabdd_f64(-180.0, v57), v39 = fmax(fabs(v57), 180.0), v39 >= 1.0)
              ? (double v40 = v39 * 2.22044605e-16)
              : (double v40 = 2.22044605e-16),
                v38 > v40))
          {
            sub_100054620();
          }
        }
        if (v17 > 0.0)
        {
          if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            if (v19 + 360.0 - v18 >= v17) {
              return;
            }
          }
          else
          {
            double v41 = fabs(v17);
            double v42 = 2.22044605e-16;
            if (v41 >= 1.0) {
              double v42 = v41 * 2.22044605e-16;
            }
            if (v41 <= v42) {
              return;
            }
            double v43 = v19 + 360.0 - v18;
            if (v43 >= v17) {
              return;
            }
            BOOL v44 = ((*(void *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
               && (*(void *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (!v44 || *(void *)&v43 == 0)
            {
              double v46 = vabdd_f64(v17, v43);
              double v47 = fabs(v43);
              if (v41 >= v47) {
                double v47 = v41;
              }
              double v48 = v47 >= 1.0 ? v47 * 2.22044605e-16 : 2.22044605e-16;
              if (v46 <= v48) {
                return;
              }
            }
          }
          *a2 = v56;
          *a3 = v30 + 360.0;
        }
      }
    }
  }
}

uint64_t sub_10004DAAC(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    for (uint64_t i = result + 32; i != a2; i += 32)
    {
      double v3 = *(double *)(i + 8);
      double v4 = *(double *)(result + 8);
      if (v3 < v4)
      {
        if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_8;
        }
        double v6 = vabdd_f64(v4, v3);
        double v7 = fabs(v4);
        double v8 = fabs(v3);
        if (v7 >= v8) {
          double v8 = v7;
        }
        double v9 = v8 >= 1.0 ? v8 * 2.22044605e-16 : 2.22044605e-16;
        if (v6 > v9) {
LABEL_8:
        }
          double result = i;
      }
    }
  }
  return result;
}

double sub_10004DB40(uint64_t *a1, double *a2, double *a3)
{
  double v16 = 0;
  double v17 = 0;
  uint64_t v18 = 0;
  uint64_t v13 = 0;
  double v14 = 0.0;
  double v15 = 0.0;
  sub_10004DD1C(a1, (uint64_t *)&v16);
  while (1)
  {
    double v5 = v16;
    double v6 = v17;
    if (v16 == v17) {
      break;
    }
    long long v19 = *(_OWORD *)v16;
    if ((char *)v17 - (char *)v16 >= 17)
    {
      long long v21 = *(_OWORD *)v16;
      double v7 = sub_10004E314(v16, (uint64_t)&v20, (unint64_t)((char *)v17 - (char *)v16) >> 4);
      double v8 = v6 - 2;
      if (v6 - 2 == v7)
      {
        *double v7 = v21;
        *((unsigned char *)v7 + 8) = BYTE8(v21);
      }
      else
      {
        uint64_t v9 = *v8;
        *((unsigned char *)v7 + 8) = *((unsigned char *)v6 - 8);
        *double v7 = v9;
        *double v8 = v21;
        *((unsigned char *)v6 - 8) = BYTE8(v21);
        sub_10004E41C((uint64_t)v5, (uint64_t)(v7 + 2), (uint64_t)&v20, ((char *)(v7 + 2) - (char *)v5) >> 4);
      }
      double v6 = v17;
    }
    double v17 = v6 - 2;
    sub_10004DE0C((uint64_t)&v13, &v19, (uint64_t *)&v16);
  }
  double v10 = v14;
  double v11 = v15;
  *a2 = v14;
  *a3 = v11;
  if (v5)
  {
    double v17 = v5;
    operator delete(v5);
  }
  return v11 - v10;
}

void sub_10004DC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10004DC88(void *result, void *a2)
{
  if (result != a2)
  {
    for (uint64_t i = result + 2; i != a2; i += 2)
    {
      double v3 = *(double *)i;
      double v4 = *(double *)result;
      if (*(double *)i < *(double *)result)
      {
        if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_8;
        }
        double v6 = vabdd_f64(v4, v3);
        double v7 = fabs(v4);
        double v8 = fabs(v3);
        if (v7 >= v8) {
          double v8 = v7;
        }
        double v9 = v8 >= 1.0 ? v8 * 2.22044605e-16 : 2.22044605e-16;
        if (v6 > v9) {
LABEL_8:
        }
          double result = i;
      }
    }
  }
  return result;
}

void sub_10004DD1C(uint64_t *a1, uint64_t *a2)
{
  if (*a2 != a2[1]) {
    sub_100054728();
  }
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  double v17 = 0;
  uint64_t v18 = 0;
  double v16 = 0;
  sub_10004DF80((char *)&v16, v3, v4, v5);
  uint64_t v7 = (uint64_t)v16;
  double v6 = v17;
  uint64_t v8 = v17 - v16;
  if (v17 - v16 >= 17)
  {
    uint64_t v9 = v8 >> 4;
    unint64_t v10 = (unint64_t)((v8 >> 4) - 2) >> 1;
    unint64_t v11 = v10 + 1;
    double v12 = (uint64_t *)&v16[16 * v10];
    do
    {
      sub_10004E004(v7, (uint64_t)&v19, v9, v12);
      v12 -= 2;
      --v11;
    }
    while (v11);
    uint64_t v7 = (uint64_t)v16;
    double v6 = v17;
  }
  uint64_t v13 = (unsigned char *)*a2;
  *a2 = v7;
  a2[1] = (uint64_t)v6;
  uint64_t v14 = v18;
  uint64_t v15 = a2[2];
  double v16 = v13;
  uint64_t v18 = v15;
  a2[2] = v14;
  if (v13)
  {
    double v17 = v13;
    operator delete(v13);
  }
}

void sub_10004DDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004DE0C(uint64_t result, unsigned char *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  if (a2[8])
  {
    *(void *)double result = v4 + 1;
    uint64_t v5 = *(void *)a2;
    unint64_t v6 = a3[2];
    unint64_t v7 = a3[1];
    if (v7 >= v6)
    {
      uint64_t v13 = (uint64_t)(v7 - *a3) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v15 = v6 - *a3;
      if (v15 >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        double v17 = (char *)sub_10004684C((uint64_t)(a3 + 2), v16);
      }
      else {
        double v17 = 0;
      }
      uint64_t v18 = &v17[16 * v13];
      char v19 = &v17[16 * v16];
      *(void *)uint64_t v18 = v5;
      v18[8] = 0;
      uint64_t v8 = (uint64_t)(v18 + 16);
      long long v21 = (unsigned char *)*a3;
      char v20 = (unsigned char *)a3[1];
      if (v20 != (unsigned char *)*a3)
      {
        do
        {
          uint64_t v22 = *((void *)v20 - 2);
          v20 -= 16;
          char v23 = v20[8];
          *((void *)v18 - 2) = v22;
          v18 -= 16;
          v18[8] = v23;
        }
        while (v20 != v21);
        char v20 = (unsigned char *)*a3;
      }
      *a3 = (uint64_t)v18;
      a3[1] = v8;
      a3[2] = (uint64_t)v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(void *)unint64_t v7 = v5;
      *(unsigned char *)(v7 + 8) = 0;
      uint64_t v8 = v7 + 16;
    }
    a3[1] = v8;
    return sub_10004E41C(*a3, v8, (uint64_t)&v24, (v8 - *a3) >> 4);
  }
  else
  {
    uint64_t v9 = v4 - 1;
    *(void *)double result = v9;
    if (!v9)
    {
      uint64_t v10 = *a3;
      if (*a3 != a3[1])
      {
        if (!*(unsigned char *)(v10 + 8)) {
          sub_100054754();
        }
        double v11 = **(double **)v10;
        double v12 = *(double *)(*(void *)a2 + 8);
        if (v11 - v12 > *(double *)(result + 16) - *(double *)(result + 8))
        {
          *(double *)(result + 8) = v12;
          *(double *)(result + 16) = v11;
        }
      }
    }
  }
  return result;
}

char *sub_10004DF80(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = sub_100046634(result, a4);
    for (uint64_t i = *((void *)v6 + 1); a2 != a3; i += 16)
    {
      *(void *)uint64_t i = a2;
      *(unsigned char *)(i + 8) = 1;
      a2 += 16;
    }
    *((void *)v6 + 1) = i;
  }
  return result;
}

void sub_10004DFE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004E004(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 < 2) {
    return result;
  }
  uint64_t v4 = (uint64_t)a4 - result;
  int64_t v5 = (unint64_t)(a3 - 2) >> 1;
  if (v5 < ((uint64_t)a4 - result) >> 4) {
    return result;
  }
  uint64_t v6 = v4 >> 3;
  uint64_t v7 = (v4 >> 3) | 1;
  uint64_t v8 = (uint64_t *)(result + 16 * v7);
  uint64_t v9 = v6 + 2;
  if (v9 >= a3) {
    goto LABEL_11;
  }
  double v10 = *(double *)(v8[2] + 8 * (*((unsigned char *)v8 + 24) == 0));
  double v11 = *(double *)(*v8 + 8 * (*((unsigned char *)v8 + 8) == 0));
  if (v10 != v11)
  {
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_65;
    }
    double v45 = vabdd_f64(v10, v11);
    double v46 = fabs(v10);
    double v47 = fabs(v11);
    if (v46 < v47) {
      double v46 = v47;
    }
    double v48 = v46 >= 1.0 ? v46 * 2.22044605e-16 : 2.22044605e-16;
    if (v45 > v48)
    {
LABEL_65:
      if (v10 >= v11) {
        goto LABEL_11;
      }
LABEL_10:
      v8 += 2;
      uint64_t v7 = v9;
      goto LABEL_11;
    }
  }
  if (*((unsigned char *)v8 + 24)) {
    BOOL v12 = *((unsigned char *)v8 + 8) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12) {
    goto LABEL_10;
  }
LABEL_11:
  int v13 = *((unsigned __int8 *)a4 + 8);
  BOOL v14 = *((unsigned char *)a4 + 8) == 0;
  uint64_t v15 = *a4;
  double v16 = *(double *)(*a4 + 8 * (*((unsigned char *)a4 + 8) == 0));
  double v17 = *(double *)(*v8 + 8 * (*((unsigned char *)v8 + 8) == 0));
  if (v16 == v17) {
    goto LABEL_85;
  }
  if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_19;
  }
  double v41 = vabdd_f64(v16, v17);
  double v42 = fabs(v16);
  double v43 = fabs(v17);
  if (v42 < v43) {
    double v42 = v43;
  }
  double v44 = v42 >= 1.0 ? v42 * 2.22044605e-16 : 2.22044605e-16;
  if (v41 <= v44)
  {
LABEL_85:
    if (*((unsigned char *)a4 + 8) && !*((unsigned char *)v8 + 8)) {
      return result;
    }
  }
  else
  {
LABEL_19:
    if (v16 < v17) {
      return result;
    }
  }
  uint64_t v19 = *v8;
  *((unsigned char *)a4 + 8) = *((unsigned char *)v8 + 8);
  *a4 = v19;
  if (v5 < v7) {
    goto LABEL_68;
  }
  uint64_t v20 = 8 * v14;
  while (1)
  {
    long long v21 = v8;
    uint64_t v22 = 2 * v7;
    uint64_t v7 = (2 * v7) | 1;
    uint64_t v8 = (uint64_t *)(result + 16 * v7);
    uint64_t v23 = v22 + 2;
    if (v23 < a3)
    {
      double v24 = *(double *)(v8[2] + 8 * (*((unsigned char *)v8 + 24) == 0));
      double v25 = *(double *)(*v8 + 8 * (*((unsigned char *)v8 + 8) == 0));
      if (v24 == v25) {
        goto LABEL_86;
      }
      if ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_45;
      }
      double v36 = vabdd_f64(v24, v25);
      double v37 = fabs(v24);
      double v38 = fabs(v25);
      if (v37 < v38) {
        double v37 = v38;
      }
      double v39 = v37 >= 1.0 ? v37 * 2.22044605e-16 : 2.22044605e-16;
      if (v36 <= v39)
      {
LABEL_86:
        if (*((unsigned char *)v8 + 24)) {
          BOOL v26 = *((unsigned char *)v8 + 8) == 0;
        }
        else {
          BOOL v26 = 0;
        }
        if (!v26) {
          goto LABEL_30;
        }
      }
      else
      {
LABEL_45:
        if (v24 >= v25) {
          goto LABEL_30;
        }
      }
      v8 += 2;
      uint64_t v7 = v23;
    }
LABEL_30:
    double v27 = *(double *)(v15 + v20);
    double v28 = *(double *)(*v8 + 8 * (*((unsigned char *)v8 + 8) == 0));
    if (v27 == v28) {
      break;
    }
    if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v32 = vabdd_f64(v27, v28);
      double v33 = fabs(v27);
      double v34 = fabs(v28);
      if (v33 < v34) {
        double v33 = v34;
      }
      double v35 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
      if (v32 <= v35) {
        break;
      }
    }
    if (v27 < v28) {
      goto LABEL_67;
    }
LABEL_39:
    uint64_t v30 = *v8;
    *((unsigned char *)v21 + 8) = *((unsigned char *)v8 + 8);
    *long long v21 = v30;
    if (v5 < v7) {
      goto LABEL_68;
    }
  }
  if (!v13 || *((unsigned char *)v8 + 8)) {
    goto LABEL_39;
  }
LABEL_67:
  uint64_t v8 = v21;
LABEL_68:
  *uint64_t v8 = v15;
  *((unsigned char *)v8 + 8) = v13;
  return result;
}

uint64_t *sub_10004E314(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    result += 2 * v3 + 2;
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 >= a3) {
      goto LABEL_12;
    }
    double v9 = *(double *)(result[2] + 8 * (*((unsigned char *)result + 24) == 0));
    double v10 = *(double *)(*result + 8 * (*((unsigned char *)result + 8) == 0));
    if (v9 == v10) {
      goto LABEL_29;
    }
    if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_18;
    }
    double v14 = vabdd_f64(v9, v10);
    double v15 = fabs(v9);
    double v16 = fabs(v10);
    if (v15 < v16) {
      double v15 = v16;
    }
    double v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 <= v17)
    {
LABEL_29:
      if (*((unsigned char *)result + 24)) {
        BOOL v11 = *((unsigned char *)result + 8) == 0;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11)
      {
LABEL_11:
        result += 2;
        uint64_t v3 = v8;
      }
    }
    else
    {
LABEL_18:
      if (v9 < v10) {
        goto LABEL_11;
      }
    }
LABEL_12:
    uint64_t v12 = *result;
    *((unsigned char *)v6 + 8) = *((unsigned char *)result + 8);
    *uint64_t v6 = v12;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_10004E41C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (uint64_t *)(result + 16 * (v4 >> 1));
    uint64_t v9 = *(void *)(a2 - 16);
    uint64_t v7 = a2 - 16;
    uint64_t v8 = v9;
    int v10 = *(unsigned __int8 *)(v7 + 8);
    BOOL v11 = *(unsigned char *)(v7 + 8) == 0;
    double v12 = *(double *)(v9 + 8 * (*(unsigned char *)(v7 + 8) == 0));
    double v13 = *(double *)(*v6 + 8 * (*((unsigned char *)v6 + 8) == 0));
    if (v12 == v13) {
      goto LABEL_42;
    }
    if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_10;
    }
    double v27 = vabdd_f64(v12, v13);
    double v28 = fabs(v12);
    double v29 = fabs(v13);
    if (v28 < v29) {
      double v28 = v29;
    }
    double v30 = v28 >= 1.0 ? v28 * 2.22044605e-16 : 2.22044605e-16;
    if (v27 <= v30)
    {
LABEL_42:
      if (!*(unsigned char *)(v7 + 8) || *((unsigned char *)v6 + 8)) {
        return result;
      }
    }
    else
    {
LABEL_10:
      if (v12 >= v13) {
        return result;
      }
    }
    uint64_t v15 = *v6;
    *(unsigned char *)(v7 + 8) = *((unsigned char *)v6 + 8);
    *(void *)uint64_t v7 = v15;
    if (v4 >= 2)
    {
      uint64_t v17 = 8 * v11;
      while (1)
      {
        unint64_t v18 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        double v16 = (uint64_t *)(result + 16 * v5);
        double v19 = *(double *)(v8 + v17);
        double v20 = *(double *)(*v16 + 8 * (*((unsigned char *)v16 + 8) == 0));
        if (v19 == v20) {
          goto LABEL_43;
        }
        if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_23;
        }
        double v23 = vabdd_f64(v19, v20);
        double v24 = fabs(v19);
        double v25 = fabs(v20);
        if (v24 < v25) {
          double v24 = v25;
        }
        double v26 = v24 >= 1.0 ? v24 * 2.22044605e-16 : 2.22044605e-16;
        if (v23 <= v26)
        {
LABEL_43:
          if (!v10 || *((unsigned char *)v16 + 8)) {
            break;
          }
        }
        else
        {
LABEL_23:
          if (v19 >= v20) {
            break;
          }
        }
        uint64_t v22 = *v16;
        *((unsigned char *)v6 + 8) = *((unsigned char *)v16 + 8);
        *uint64_t v6 = v22;
        uint64_t v6 = (uint64_t *)(result + 16 * v5);
        if (v18 <= 1) {
          goto LABEL_13;
        }
      }
    }
    double v16 = v6;
LABEL_13:
    *double v16 = v8;
    *((unsigned char *)v16 + 8) = v10;
  }
  return result;
}

void sub_10004E5AC(uint64_t a1, void *a2)
{
  uint64_t v27 = 0;
  sub_10004E8D4(&v27, a2, (double *)&v25, *(void *)(a1 + 40), *(void *)(a1 + 48));
  if (v27 != 1) {
    sub_1000543B8();
  }
  unint64_t v5 = (void **)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v23 = v28[4];
  uint64_t v24 = v6;
  if (v4)
  {
    uint64_t v7 = (_OWORD *)sub_10004A3AC(a1 + 88);
    long long v8 = v26;
    *uint64_t v7 = v25;
    v7[1] = v8;
    if (*v5)
    {
      if (v27)
      {
        sub_10004B0BC(*v5, (uint64_t)v28);
        return;
      }
      uint64_t v15 = "(i < v.size())&&(\"index out of bounds\")";
      int v16 = 94;
      uint64_t v17 = "varray.hpp";
      unint64_t v18 = "check_index";
    }
    else
    {
      uint64_t v15 = "(parent)&&(\"null pointer\")";
      int v16 = 253;
      uint64_t v17 = "insert.hpp";
      unint64_t v18 = "parent_elements";
    }
LABEL_17:
    __assert_rtn(v18, v17, v16, v15);
  }
  uint64_t v9 = sub_10004C99C(**(_DWORD ***)(a1 + 72));
  if (!v9)
  {
    *(void *)&v19[0] = &off_1003A28C0;
    sub_10004A714();
  }
  if (v9 != a2)
  {
    uint64_t v15 = "(&n == &rtree::get<Node>(*m_root_node))&&(\"node should be the root\")";
    int v16 = 449;
    uint64_t v17 = "insert.hpp";
    unint64_t v18 = "split";
    goto LABEL_17;
  }
  int v10 = operator new(0x2B8uLL);
  *((void *)v10 + 1) = 0;
  *int v10 = 1;
  uint64_t v11 = *(void *)(a1 + 112);
  long long v21 = v10;
  uint64_t v22 = v11;
  double v12 = sub_10004C99C(v10);
  if (!v12)
  {
    *(void *)&v19[0] = &off_1003A28C0;
    sub_10004A714();
  }
  uint64_t v13 = **(void **)(a1 + 72);
  v19[0] = v25;
  v19[1] = v26;
  uint64_t v20 = v13;
  sub_10004B0BC(v12, (uint64_t)v19);
  double v14 = sub_10004C99C(v10);
  if (!v14)
  {
    *(void *)&v19[0] = &off_1003A28C0;
    sub_10004A714();
  }
  if (!v27) {
    __assert_rtn("check_index", "varray.hpp", 94, "(i < v.size())&&(\"index out of bounds\")");
  }
  sub_10004B0BC(v14, (uint64_t)v28);
  **(void **)(a1 + 72) = v10;
  ++**(void **)(a1 + 80);
}

void sub_10004E834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14, uint64_t a15, char a16)
{
  if (a2)
  {
    std::exception::~exception((std::exception *)&a9);
    __cxa_begin_catch(exception_object);
    *sub_10004B10C(a14) = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_10004E894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  __cxa_end_catch();
  sub_10004B180((uint64_t)va);
  JUMPOUT(0x10004E8C4);
}

void sub_10004E8B8()
{
}

double sub_10004E8D4(void *a1, void *a2, double *a3, uint64_t a4, uint64_t a5)
{
  int v10 = operator new(0x2B8uLL);
  v10[1] = 0;
  *(_DWORD *)int v10 = 1;
  uint64_t v11 = sub_10004C99C(v10);
  if (!v11)
  {
    *(void *)&v15[0] = &off_1003A28C0;
    sub_10004A714();
  }
  sub_10004EAA4((uint64_t)a2, v11, a3, (double *)v17, a4, a5);
  if ((unint64_t)(*a2 - 17) < 0xFFFFFFFFFFFFFFF3)
  {
    uint64_t v13 = "(parameters.get_min_elements() <= rtree::elements(n).size() && rtree::elements(n).size() <= parameters.get_max"
          "_elements())&&(\"unexpected number of elements\")";
    int v14 = 193;
    goto LABEL_7;
  }
  if ((unint64_t)(*v11 - 17) <= 0xFFFFFFFFFFFFFFF2)
  {
    uint64_t v13 = "(parameters.get_min_elements() <= rtree::elements(n2).size() && rtree::elements(n2).size() <= parameters.get_m"
          "ax_elements())&&(\"unexpected number of elements\")";
    int v14 = 196;
LABEL_7:
    __assert_rtn("apply", "insert.hpp", v14, v13);
  }
  v15[0] = v17[0];
  v15[1] = v17[1];
  int v16 = v10;
  *(void *)&double result = sub_10004B654(a1, (uint64_t)v15).n128_u64[0];
  return result;
}

void sub_10004EA08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  __cxa_begin_catch(a1);
  if (*v10 >= 0x11uLL)
  {
    a9 = (_DWORD *)v10[85];
    sub_10004C590(a9, (uint64_t *)&a9);
    v10[85] = 0;
    if (!*v10) {
      __assert_rtn("check_not_empty", "varray.hpp", 101, "(!v.empty())&&(\"the container is empty\")");
    }
    --*v10;
  }
  sub_10004C590(v9, (uint64_t *)&a9);
  __cxa_rethrow();
}

void sub_10004EA90()
{
}

void sub_10004EAA4(uint64_t a1, void *a2, double *a3, double *a4, uint64_t a5, uint64_t a6)
{
  if (*(void *)a1 != 17) {
    sub_10005443C();
  }
  unint64_t v35 = 0;
  sub_10004EEFC(&v35, (char *)(a1 + 8), a1 + 688);
  unint64_t v33 = 0;
  unint64_t v34 = 0;
  *(void *)&long long v31 = 0;
  sub_10004EF94((uint64_t)&v35, a5, a6, (double *)&v31, &v34, (uint64_t *)&v33);
  *(void *)a1 = 0;
  if (*a2) {
    sub_1000543E4();
  }
  if (v35 <= v34) {
    goto LABEL_32;
  }
  double v12 = (double *)v36;
  sub_10004B0BC((void *)a1, (uint64_t)&v36[5 * v34]);
  if (v35 <= v33
    || (sub_10004B0BC(a2, (uint64_t)&v36[5 * v33]), unint64_t v13 = v35, v35 <= v34)
    || (int v14 = &v36[5 * v34], v15 = v14[1], *(_OWORD *)a3 = *v14, *((_OWORD *)a3 + 1) = v15, v13 <= v33))
  {
LABEL_32:
    __assert_rtn("check_index", "varray.hpp", 94, "(i < v.size())&&(\"index out of bounds\")");
  }
  unint64_t v16 = 0;
  uint64_t v17 = &v36[5 * v33];
  long long v18 = v17[1];
  *(_OWORD *)a4 = *v17;
  *((_OWORD *)a4 + 1) = v18;
  double v19 = (a3[2] - *a3) * (a3[3] - a3[1]);
  double v20 = (a4[2] - *a4) * (a4[3] - a4[1]);
  uint64_t v21 = 15;
  do
  {
    if (v16 != v34 && v16 != v33)
    {
      if (v35 <= v16) {
        __assert_rtn("check_index", "varray.hpp", 94, "(i < v.size())&&(\"index out of bounds\")");
      }
      if ((unint64_t)(*(void *)a1 + v21) <= 4)
      {
        sub_10004B0BC((void *)a1, (uint64_t)v12);
        sub_10004CEDC(a3, v12);
        double v19 = (a3[2] - *a3) * (a3[3] - a3[1]);
        if (!v21) {
          goto LABEL_31;
        }
      }
      else if ((unint64_t)(*a2 + v21) <= 4)
      {
        sub_10004B0BC(a2, (uint64_t)v12);
        sub_10004CEDC(a4, v12);
        double v20 = (a4[2] - *a4) * (a4[3] - a4[1]);
        if (!v21) {
          goto LABEL_31;
        }
      }
      else
      {
        long long v23 = *((_OWORD *)a3 + 1);
        long long v31 = *(_OWORD *)a3;
        *(_OWORD *)double v32 = v23;
        long long v24 = *((_OWORD *)a4 + 1);
        long long v29 = *(_OWORD *)a4;
        long long v30 = v24;
        sub_10004CEDC((double *)&v31, v12);
        sub_10004CEDC((double *)&v29, v12);
        double v25 = (v32[0] - *(double *)&v31) * (v32[1] - *((double *)&v31 + 1));
        double v26 = (*(double *)&v30 - *(double *)&v29) * (*((double *)&v30 + 1) - *((double *)&v29 + 1));
        if (v25 - v19 < v26 - v20 || v25 - v19 == v26 - v20 && (v19 < v20 || v19 == v20 && *(void *)a1 <= *a2))
        {
          sub_10004B0BC((void *)a1, (uint64_t)v12);
          long long v28 = *(_OWORD *)v32;
          *(_OWORD *)a3 = v31;
          *((_OWORD *)a3 + 1) = v28;
          double v19 = v25;
          if (!v21) {
LABEL_31:
          }
            __assert_rtn("apply", "redistribute_elements.hpp", 450, "(0 < remaining)&&(\"unexpected value\")");
        }
        else
        {
          sub_10004B0BC(a2, (uint64_t)v12);
          long long v27 = v30;
          *(_OWORD *)a4 = v29;
          *((_OWORD *)a4 + 1) = v27;
          double v20 = v26;
          if (!v21) {
            goto LABEL_31;
          }
        }
      }
      --v21;
    }
    ++v16;
    v12 += 5;
  }
  while (v16 != 17);
}

void sub_10004EE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    *uint64_t v22 = 0;
    *uint64_t v21 = 0;
    sub_10004EE9C(&a20, v20);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_10004EE78(_Unwind_Exception *a1)
{
}

void sub_10004EE84(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x10004EE8CLL);
  }
  sub_10000EE84(a1);
}

void sub_10004EE9C(void *a1, _DWORD *a2)
{
  if (*a1)
  {
    uint64_t v3 = 40 * *a1;
    uint64_t v4 = (_DWORD **)(a1 + 5);
    do
    {
      v5[0] = *v4;
      v5[1] = a2;
      sub_10004C590(v5[0], (uint64_t *)v5);
      _DWORD *v4 = 0;
      v4 += 5;
      v3 -= 40;
    }
    while (v3);
  }
}

void *sub_10004EEFC(unint64_t *a1, char *a2, uint64_t a3)
{
  int64_t v4 = a3 - (void)a2;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
  if (v5 >= 0x12) {
    sub_100054308();
  }
  unint64_t v7 = *a1;
  if (*a1 <= v5)
  {
    uint64_t v9 = 5 * v7;
    int v10 = &a2[40 * v7];
    memmove(a1 + 1, a2, 40 * v7);
    double result = memcpy(&a1[v9 + 1], v10, a3 - (void)v10);
  }
  else
  {
    double result = memmove(a1 + 1, a2, v4);
  }
  *a1 = v5;
  return result;
}

uint64_t sub_10004EF94(uint64_t result, uint64_t a2, uint64_t a3, double *a4, void *a5, uint64_t *a6)
{
  if (*(void *)result != 17) {
    sub_100054780();
  }
  uint64_t v6 = 0;
  uint64_t v7 = result + 8;
  double v8 = *(double *)(result + 8);
  double v9 = *(double *)(result + 24);
  int v10 = (double *)(result + 64);
  uint64_t v11 = 1;
  double v12 = v9;
  do
  {
    double v13 = *(v10 - 2);
    double v14 = *v10;
    v10 += 5;
    double v15 = v14;
    if (v14 < v12)
    {
      double v12 = v15;
      uint64_t v6 = v11;
    }
    if (v13 < v8) {
      double v8 = v13;
    }
    if (v9 < v15) {
      double v9 = v15;
    }
    ++v11;
  }
  while (v11 != 17);
  uint64_t v16 = v6 == 0;
  uint64_t v17 = (8 * v16) | (32 * v16);
  double v18 = *(double *)(v7 + v17);
  uint64_t v19 = v17 + 8;
  uint64_t v20 = v16;
  do
  {
    if (v18 < *(double *)(result + v19) && v6 != v16)
    {
      double v18 = *(double *)(result + v19);
      uint64_t v20 = v16;
    }
    ++v16;
    v19 += 40;
  }
  while (v16 != 17);
  double v22 = v9 - v8;
  if (v22 <= 2.22044605e-16) {
    double v22 = 1.0;
  }
  double v23 = (v18 - v12) / v22;
  *a4 = v23;
  *a5 = v20;
  *a6 = v6;
  if (*(void *)result != 17) {
    sub_100054780();
  }
  uint64_t v24 = 0;
  double v25 = *(double *)(result + 16);
  double v26 = *(double *)(result + 32);
  long long v27 = (double *)(result + 72);
  uint64_t v28 = 1;
  double v29 = v26;
  do
  {
    double v30 = *(v27 - 2);
    double v31 = *v27;
    v27 += 5;
    double v32 = v31;
    if (v31 < v29)
    {
      double v29 = v32;
      uint64_t v24 = v28;
    }
    if (v30 < v25) {
      double v25 = v30;
    }
    if (v26 < v32) {
      double v26 = v32;
    }
    ++v28;
  }
  while (v28 != 17);
  uint64_t v33 = v24 == 0;
  uint64_t v34 = (8 * v33) | (32 * v33);
  double v35 = *(double *)(v7 + v34 + 8);
  double v36 = (double *)(v34 + result + 16);
  uint64_t v37 = v33;
  do
  {
    double v38 = *v36;
    v36 += 5;
    double v39 = v38;
    if (v35 < v38 && v24 != v33)
    {
      double v35 = v39;
      uint64_t v37 = v33;
    }
    ++v33;
  }
  while (v33 != 17);
  double v41 = v26 - v25;
  if (v41 <= 2.22044605e-16) {
    double v41 = 1.0;
  }
  double v42 = (v35 - v29) / v41;
  if (v23 < v42)
  {
    *a4 = v42;
    *a5 = v37;
    *a6 = v24;
  }
  return result;
}

void *sub_10004F140(void *a1)
{
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_10004F184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  uint64_t v4 = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_10004F1E4((void *)a1, a2);
  return a1;
}

void sub_10004F1D0(_Unwind_Exception *a1)
{
  sub_10004F140(v1);
  _Unwind_Resume(a1);
}

void *sub_10004F1E4(void *result, uint64_t a2)
{
  if (result[4])
  {
    unint64_t v2 = result;
    sub_10004F238((uint64_t)result, *(_DWORD **)(a2 + 16), *(void *)(a2 + 8));
    return sub_10004F564(v2);
  }
  return result;
}

uint64_t sub_10004F238(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t result = (uint64_t)sub_10004C99C(a2);
    if (!result)
    {
      *(void *)&long long v30 = &off_1003A28C0;
      sub_10004A714();
    }
    uint64_t v6 = result + 8;
    if (*(void *)result)
    {
      uint64_t v7 = v6 + 40 * *(void *)result;
      double v8 = (char **)(a1 + 40);
      uint64_t v9 = a3 - 1;
      do
      {
        *(void *)&long long v30 = 0;
        sub_10004F92C((double *)(a1 + 16), (double *)v6, 6378137.0, 6356752.31);
        *(void *)&long long v30 = v10;
        uint64_t result = sub_10004F714((void *)a1, (double *)&v30);
        if ((result & 1) == 0)
        {
          uint64_t v11 = v30;
          uint64_t v12 = *(void *)(v6 + 32);
          double v14 = *(char **)(a1 + 48);
          unint64_t v13 = *(void *)(a1 + 56);
          if ((unint64_t)v14 >= v13)
          {
            unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *v8) >> 3);
            unint64_t v17 = v16 + 1;
            if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_10000EE98();
            }
            unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)*v8) >> 3);
            if (2 * v18 > v17) {
              unint64_t v17 = 2 * v18;
            }
            if (v18 >= 0x555555555555555) {
              unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19) {
              uint64_t v20 = (char *)sub_100053560(a1 + 56, v19);
            }
            else {
              uint64_t v20 = 0;
            }
            uint64_t v21 = &v20[24 * v16];
            *(void *)uint64_t v21 = v11;
            *((void *)v21 + 1) = v9;
            *((void *)v21 + 2) = v12;
            double v23 = *(char **)(a1 + 40);
            double v22 = *(char **)(a1 + 48);
            uint64_t v24 = v21;
            if (v22 != v23)
            {
              do
              {
                long long v25 = *(_OWORD *)(v22 - 24);
                *((void *)v24 - 1) = *((void *)v22 - 1);
                *(_OWORD *)(v24 - 24) = v25;
                v24 -= 24;
                v22 -= 24;
              }
              while (v22 != v23);
              double v22 = *v8;
            }
            uint64_t v15 = (uint64_t)(v21 + 24);
            *(void *)(a1 + 40) = v24;
            *(void *)(a1 + 48) = v21 + 24;
            *(void *)(a1 + 56) = &v20[24 * v19];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *(void *)double v14 = v30;
            uint64_t v15 = (uint64_t)(v14 + 24);
            *((void *)v14 + 1) = v9;
            *((void *)v14 + 2) = v12;
          }
          *(void *)(a1 + 48) = v15;
          uint64_t result = sub_1000535A8(*(void *)(a1 + 40), v15, (uint64_t)&v29, 0xAAAAAAAAAAAAAAABLL * ((v15 - *(void *)(a1 + 40)) >> 3));
        }
        v6 += 40;
      }
      while (v6 != v7);
    }
  }
  else
  {
    uint64_t result = (uint64_t)sub_10004A774(a2);
    if (!result)
    {
      *(void *)&long long v30 = &off_1003A28C0;
      sub_10004A714();
    }
    double v26 = (double *)(result + 8);
    if (*(void *)result)
    {
      uint64_t v27 = 24 * *(void *)result;
      uint64_t v28 = result + 8;
      do
      {
        double v29 = 0.0;
        long long v30 = xmmword_10033A000;
        double v29 = sub_100049814((double *)&v30, (double *)(a1 + 16), v26);
        uint64_t result = sub_10004F714((void *)a1, &v29);
        if ((result & 1) == 0)
        {
          *(double *)&long long v30 = v29;
          *((void *)&v30 + 1) = v28;
          uint64_t result = sub_10004F780((uint64_t *)(a1 + 72), &v30);
          if ((unint64_t)(*(void *)(a1 + 104) + ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4)) > *(void *)(a1 + 32)) {
            uint64_t result = sub_10004F888((uint64_t *)(a1 + 72));
          }
        }
        v26 += 3;
        v28 += 24;
        v27 -= 24;
      }
      while (v27);
    }
  }
  return result;
}

void sub_10004F544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13)
{
}

void *sub_10004F564(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2 == a1[6])
  {
LABEL_14:
    uint64_t v14 = a1[9];
    uint64_t result = a1 + 9;
    if (v14 == a1[10])
    {
      a1[13] = a1[4];
      a1[14] = 0;
      return result;
    }
    uint64_t v15 = *(void *)(v14 + 8);
    ++a1[13];
    a1[14] = v15;
  }
  else
  {
    while (1)
    {
      uint64_t v3 = a1[9];
      uint64_t v4 = a1[10];
      if (v3 != v4 && *(double *)v3 <= *(double *)v2) {
        break;
      }
      if ((unint64_t)(a1[13] + ((v4 - v3) >> 4)) > a1[4]) {
        sub_1000547AC();
      }
      if (sub_10004F714(a1, (double *)v2))
      {
        a1[6] = a1[5];
        goto LABEL_14;
      }
      uint64_t v7 = v2 + 8;
      uint64_t v6 = *(void *)(v2 + 8);
      unint64_t v5 = *(_DWORD **)(v7 + 8);
      double v8 = (__n128 *)a1[5];
      uint64_t v9 = a1[6];
      if (v9 - (uint64_t)v8 >= 25)
      {
        __n128 v18 = *v8;
        unint64_t v19 = v8[1].n128_u64[0];
        sub_100053C80(v8, (uint64_t)&v17, (v9 - (uint64_t)v8) / 0x18uLL);
        uint64_t v11 = (__n128 *)(v9 - 24);
        if ((__n128 *)(v9 - 24) == v10)
        {
          *uint64_t v10 = v18;
          v10[1].n128_u64[0] = v19;
        }
        else
        {
          __n128 v12 = *v11;
          v10[1].n128_u64[0] = *(void *)(v9 - 8);
          *uint64_t v10 = v12;
          *uint64_t v11 = v18;
          *(void *)(v9 - 8) = v19;
          sub_1000535A8((uint64_t)v8, (uint64_t)&v10[1].n128_i64[1], (uint64_t)&v17, 0xAAAAAAAAAAAAAAABLL * ((&v10[1].n128_i8[8] - (__int8 *)v8) >> 3));
        }
        uint64_t v9 = a1[6];
      }
      a1[6] = v9 - 24;
      sub_10004F238((uint64_t)a1, v5, v6);
      uint64_t v2 = a1[5];
      if (v2 == a1[6]) {
        goto LABEL_14;
      }
    }
    uint64_t v16 = *(void *)(v3 + 8);
    ++a1[13];
    a1[14] = v16;
    uint64_t result = a1 + 9;
  }
  return sub_100053C1C((uint64_t)result);
}

BOOL sub_10004F714(void *a1, double *a2)
{
  uint64_t v2 = (double *)a1[9];
  uint64_t v3 = (double *)a1[10];
  uint64_t v4 = (char *)v3 - (char *)v2;
  if (a1[13] + (((char *)v3 - (char *)v2) >> 4) != a1[4]) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  BOOL v5 = v4 == 32;
  if (v4 >= 32)
  {
    uint64_t v6 = v2 + 2;
    if (v5 || (double v7 = v2[4], v2 += 4, v7 <= *(v2 - 2))) {
      uint64_t v2 = v6;
    }
  }
  return *v2 <= *a2;
}

uint64_t sub_10004F780(uint64_t *a1, _OWORD *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  double v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_10000EE98();
    }
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_10004684C(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v9];
    uint64_t v15 = &v13[16 * v12];
    *(_OWORD *)uint64_t v14 = *a2;
    uint64_t v8 = (uint64_t)(v14 + 16);
    char v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != (char *)*a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = v8;
    a1[2] = (uint64_t)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *double v7 = *a2;
    uint64_t v8 = (uint64_t)(v7 + 1);
  }
  a1[1] = v8;
  uint64_t v18 = *a1;

  return sub_100053670(v18, v8);
}

uint64_t sub_10004F888(uint64_t *a1)
{
  uint64_t result = *a1;
  uint64_t v3 = a1[1];
  if (v3 - result >= 32)
  {
    if (v3 - result == 32 || (uint64_t v4 = (void *)(result + 32), *(double *)(result + 32) <= *(double *)(result + 16))) {
      uint64_t v4 = (void *)(result + 16);
    }
    uint64_t v5 = *(void *)(v3 - 16);
    uint64_t v6 = *(void *)(v3 - 8);
    *(void *)(v3 - 16) = *v4;
    *(void *)(v3 - 8) = v4[1];
    uint64_t v7 = ((unint64_t)(v3 - result) >> 4) - 1;
    int64_t v8 = ((uint64_t)v4 - result) >> 4;
    if ((1 - __clz(v8 + 1))) {
      uint64_t result = sub_100053A10(result, v8, v7, v5, v6);
    }
    else {
      uint64_t result = sub_100053804(result, v8, v7, v5, v6);
    }
  }
  a1[1] -= 16;
  return result;
}

void sub_10004F92C(double *a1, double *a2, double a3, double a4)
{
  uint64_t v4 = a1;
  double v85 = a3;
  double v86 = a4;
  double v5 = a2[1];
  double v83 = *a2;
  double v84 = v5;
  double v6 = a2[3];
  *(double *)int v82 = a2[2];
  *(double *)&v82[1] = v5;
  *(double *)int v81 = v83;
  *(double *)&v81[1] = v6;
  double v79 = *(double *)v82;
  double v80 = v6;
  double v7 = *a1;
  int64_t v8 = (double *)&unk_1003DC000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    double v40 = v7;
    int v41 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v7 = v40;
    int64_t v8 = (double *)&unk_1003DC000;
    uint64_t v4 = a1;
    if (v41)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v7 = v40;
      int64_t v8 = (double *)&unk_1003DC000;
      uint64_t v4 = a1;
    }
  }
  double v9 = v8[375];
  double v10 = v4[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    double v74 = v4;
    double v42 = v10;
    double v43 = v7;
    double v44 = v9;
    int v45 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v9 = v44;
    double v7 = v43;
    double v10 = v42;
    int64_t v8 = (double *)&unk_1003DC000;
    uint64_t v4 = v74;
    if (v45)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v9 = v44;
      double v7 = v43;
      double v10 = v42;
      int64_t v8 = (double *)&unk_1003DC000;
      uint64_t v4 = v74;
    }
  }
  double v11 = v8[375];
  double v12 = v83;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    int v75 = v4;
    double v46 = v10;
    double v47 = v7;
    double v48 = v11;
    double v66 = v9;
    int v49 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v9 = v66;
    double v12 = v83;
    double v11 = v48;
    double v7 = v47;
    double v10 = v46;
    int64_t v8 = (double *)&unk_1003DC000;
    uint64_t v4 = v75;
    if (v49)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v9 = v66;
      double v12 = v83;
      double v11 = v48;
      double v7 = v47;
      double v10 = v46;
      int64_t v8 = (double *)&unk_1003DC000;
      uint64_t v4 = v75;
    }
  }
  double v13 = v8[375];
  double v14 = v84;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    int v76 = v4;
    double v50 = v10;
    double v59 = v7;
    double v51 = v11;
    double v67 = v9;
    double v70 = v12;
    int v52 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v9 = v67;
    double v12 = v70;
    double v14 = v84;
    double v11 = v51;
    double v7 = v59;
    double v10 = v50;
    int64_t v8 = (double *)&unk_1003DC000;
    uint64_t v4 = v76;
    if (v52)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v9 = v67;
      double v12 = v70;
      double v14 = v84;
      double v11 = v51;
      double v7 = v59;
      double v10 = v50;
      int64_t v8 = (double *)&unk_1003DC000;
      uint64_t v4 = v76;
    }
  }
  double v15 = v8[375];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    int v77 = v4;
    double v58 = v10;
    double v60 = v7;
    double v53 = v11;
    double v64 = v14;
    double v68 = v9;
    double v71 = v12;
    double v62 = v15;
    int v54 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v15 = v62;
    double v14 = v64;
    double v9 = v68;
    double v12 = v71;
    double v11 = v53;
    double v10 = v58;
    double v7 = v60;
    int64_t v8 = (double *)&unk_1003DC000;
    uint64_t v4 = v77;
    if (v54)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v15 = v62;
      double v14 = v64;
      double v9 = v68;
      double v12 = v71;
      double v11 = v53;
      double v10 = v58;
      double v7 = v60;
      int64_t v8 = (double *)&unk_1003DC000;
      uint64_t v4 = v77;
    }
  }
  double v16 = v7 * v9;
  double v17 = v12 * v13;
  double v18 = v79 * v8[375];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    int v78 = v4;
    double v61 = v16;
    double v63 = v15;
    double v55 = v10;
    double v69 = v11;
    double v72 = v18;
    double v56 = v17;
    double v65 = v14;
    int v57 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v15 = v63;
    double v14 = v65;
    double v11 = v69;
    double v18 = v72;
    double v17 = v56;
    double v10 = v55;
    double v16 = v61;
    int64_t v8 = (double *)&unk_1003DC000;
    uint64_t v4 = v78;
    if (v57)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v15 = v63;
      double v14 = v65;
      double v11 = v69;
      double v18 = v72;
      double v17 = v56;
      double v10 = v55;
      double v16 = v61;
      int64_t v8 = (double *)&unk_1003DC000;
      uint64_t v4 = v78;
    }
  }
  BOOL v19 = v16 > v18 || v16 < v17;
  double v20 = 6.28318531;
  if (v19 && v16 + 6.28318531 > v18)
  {
    if (v18 > 3.14159265)
    {
      double v28 = (v17 - v18) * 0.5 + 3.14159265;
      if (v28 < -3.14159265 || v28 > 3.14159265) {
        sub_1000547D8();
      }
      if (v16 <= v28) {
        goto LABEL_44;
      }
LABEL_25:
      double v35 = &v83;
      double v36 = (double *)v81;
LABEL_45:
      sub_10004FF28(&v85, v4, v35, v36);
      return;
    }
    double v34 = v17 + v18;
    if (v17 + v18 == 0.0) {
      goto LABEL_24;
    }
    if (COERCE_UNSIGNED_INT64(fabs(v17 + v18)) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v37 = fabs(v34);
      double v38 = 2.22044605e-16;
      if (v37 >= 1.0) {
        double v38 = v37 * 2.22044605e-16;
      }
      if (v37 <= v38)
      {
LABEL_24:
        if (v16 < v17) {
          goto LABEL_25;
        }
LABEL_44:
        double v35 = (double *)v82;
        double v36 = &v79;
        goto LABEL_45;
      }
    }
    double v39 = v34 * 0.5 + -3.14159265;
    if (v39 <= 3.14159265)
    {
      if (v39 >= -3.14159265)
      {
LABEL_36:
        if (v39 < -3.14159265 || v39 > 3.14159265) {
          sub_100054804();
        }
        if (v34 <= 0.0)
        {
          if (v16 <= v18 || v16 > v39) {
            goto LABEL_25;
          }
        }
        else if (v16 < v17 && v16 >= v39)
        {
          goto LABEL_25;
        }
        goto LABEL_44;
      }
    }
    else
    {
      double v20 = -6.28318531;
    }
    double v39 = v39 + v20;
    goto LABEL_36;
  }
  double v22 = v10 * v11;
  double v23 = v80 * v8[375];
  if (v10 * v11 <= v23)
  {
    double v29 = v14 * v15;
    if (v22 >= v14 * v15)
    {
      if (v22 > v23) {
        sub_100054830();
      }
    }
    else
    {
      double v30 = (v85 - v86) / v85 / (2.0 - (v85 - v86) / v85);
      double v31 = v85 / (v30 + 1.0);
      double v32 = v30 * 1.5;
      double v33 = v31 * (v22 - sin(v22 + v22) * (v30 * 1.5));
      vabdd_f64(v33, v31 * (v29 - sin(v29 + v29) * v32));
    }
  }
  else
  {
    double v24 = (v85 - v86) / v85 / (2.0 - (v85 - v86) / v85);
    double v25 = v85 / (v24 + 1.0);
    double v26 = v24 * 1.5;
    double v27 = v25 * (v23 - sin(v23 + v23) * (v24 * 1.5));
    vabdd_f64(v27, v25 * (v22 - sin(v22 + v22) * v26));
  }
}

double sub_10004FF28(double *a1, double *a2, double *a3, double *a4)
{
  uint64_t v4 = a1;
  double v5 = *a3;
  double v6 = (double *)&unk_1003DC000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    double v28 = a2;
    double v23 = a4;
    BOOL v19 = a3;
    double v20 = v5;
    int v13 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v5 = v20;
    double v6 = (double *)&unk_1003DC000;
    a3 = v19;
    a4 = v23;
    a2 = v28;
    uint64_t v4 = a1;
    if (v13)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v5 = v20;
      double v6 = (double *)&unk_1003DC000;
      a3 = v19;
      a4 = v23;
      a2 = v28;
      uint64_t v4 = a1;
    }
  }
  double v45 = v5 * v6[375];
  double v7 = a3[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    double v29 = a2;
    double v35 = v4;
    double v24 = a4;
    double v21 = v7;
    int v14 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v7 = v21;
    double v6 = (double *)&unk_1003DC000;
    a4 = v24;
    a2 = v29;
    uint64_t v4 = v35;
    if (v14)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v7 = v21;
      double v6 = (double *)&unk_1003DC000;
      a4 = v24;
      a2 = v29;
      uint64_t v4 = v35;
    }
  }
  double v44 = v7 * v6[375];
  double v8 = *a4;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    double v30 = a2;
    double v36 = v4;
    double v25 = a4;
    double v22 = v8;
    int v15 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v8 = v22;
    double v6 = (double *)&unk_1003DC000;
    a4 = v25;
    a2 = v30;
    uint64_t v4 = v36;
    if (v15)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v8 = v22;
      double v6 = (double *)&unk_1003DC000;
      a4 = v25;
      a2 = v30;
      uint64_t v4 = v36;
    }
  }
  double v43 = v8 * v6[375];
  double v9 = a4[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    double v31 = a2;
    double v37 = v4;
    double v26 = v9;
    int v16 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v9 = v26;
    double v6 = (double *)&unk_1003DC000;
    a2 = v31;
    uint64_t v4 = v37;
    if (v16)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v9 = v26;
      double v6 = (double *)&unk_1003DC000;
      a2 = v31;
      uint64_t v4 = v37;
    }
  }
  double v42 = v9 * v6[375];
  double v10 = *a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    double v32 = a2;
    double v38 = v4;
    double v27 = v10;
    int v17 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v10 = v27;
    double v6 = (double *)&unk_1003DC000;
    a2 = v32;
    uint64_t v4 = v38;
    if (v17)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v10 = v27;
      double v6 = (double *)&unk_1003DC000;
      a2 = v32;
      uint64_t v4 = v38;
    }
  }
  double v41 = v10 * v6[375];
  double v11 = a2[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DCBC0, memory_order_acquire) & 1) == 0)
  {
    double v39 = v4;
    double v33 = v11;
    int v18 = __cxa_guard_acquire(&qword_1003DCBC0);
    double v11 = v33;
    double v6 = (double *)&unk_1003DC000;
    uint64_t v4 = v39;
    if (v18)
    {
      qword_1003DCBB8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_1003DCBC0);
      double v11 = v33;
      double v6 = (double *)&unk_1003DC000;
      uint64_t v4 = v39;
    }
  }
  double v40 = v11 * v6[375];
  sub_100050278(&v45, &v44, &v43, &v42, &v41, &v40, v4);
  return result;
}

void sub_100050278(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  double v8 = *a7;
  double v9 = a7[1];
  memset(v113, 0, sizeof(v113));
  double v10 = *a1;
  double v11 = *a2;
  double v111 = *a2;
  double v112 = v10;
  double v110 = *a3;
  double v12 = v110;
  double v13 = *a4;
  double v14 = *a5;
  double v108 = *a5;
  double v109 = v13;
  double v15 = *a6;
  double v107 = *a6;
  double v92 = v9;
  double v94 = v8;
  if (v10 <= v110)
  {
    double v16 = v13;
    double v13 = v11;
    double v17 = v10;
    double v10 = v110;
  }
  else
  {
    double v111 = v13;
    double v112 = v110;
    double v110 = v10;
    double v16 = v11;
    double v17 = v12;
    double v109 = v11;
  }
  double v18 = vabdd_f64(v10, v17);
  double v19 = 3.14159265;
  if (v18 == 3.14159265) {
    goto LABEL_5;
  }
  double v20 = v10 - v17;
  if (COERCE__INT64(fabs(v10 - v17)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v25 = fabs(v18 + -3.14159265);
    double v19 = 3.14159265;
    if (v18 < 3.14159265) {
      double v18 = 3.14159265;
    }
    double v26 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
    if (v25 <= v26) {
      goto LABEL_5;
    }
  }
  double v19 = 3.14159265;
  if (v20 <= 3.14159265)
  {
    if (v20 >= -3.14159265) {
      goto LABEL_6;
    }
    double v19 = fmod(v20 + -3.14159265, 6.28318531) + 3.14159265;
LABEL_5:
    double v20 = v19;
    goto LABEL_6;
  }
  double v27 = fmod(v20 + 3.14159265, 6.28318531);
  double v20 = v27 + -3.14159265;
  if (v27 + -3.14159265 == -3.14159265) {
    goto LABEL_5;
  }
  unint64_t v28 = COERCE__INT64(fabs(v27 + -3.14159265)) - 1;
  BOOL v29 = (unint64_t)(COERCE__INT64(fabs(v27 + -3.14159265)) - 0x10000000000000) >> 53 > 0x3FE
     && v28 > 0xFFFFFFFFFFFFELL;
  if (!v29 || *(void *)&v20 == 0)
  {
    double v19 = 3.14159265;
    double v31 = fabs(v20 + 3.14159265);
    double v32 = fabs(v20);
    if (v32 < 3.14159265) {
      double v32 = 3.14159265;
    }
    double v33 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
    if (v31 <= v33) {
      goto LABEL_5;
    }
  }
LABEL_6:
  BOOL v21 = sub_100049F80(v13, v16, v20);
  BOOL v22 = v21;
  double v23 = fabs(v20);
  if (v23 == 3.14159265)
  {
    BOOL v24 = 1;
  }
  else if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    BOOL v24 = 0;
  }
  else
  {
    double v34 = fabs(v23 + -3.14159265);
    if (v23 < 3.14159265) {
      double v23 = 3.14159265;
    }
    if (v23 >= 1.0) {
      double v35 = v23 * 2.22044605e-16;
    }
    else {
      double v35 = 2.22044605e-16;
    }
    BOOL v24 = v34 <= v35;
  }
  if (v13 != 0.0)
  {
    if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_53;
    }
    double v37 = fabs(v13);
    double v38 = 2.22044605e-16;
    if (v37 >= 1.0) {
      double v38 = v37 * 2.22044605e-16;
    }
    if (v37 > v38)
    {
LABEL_53:
      if ((v21 || v24) && fabs(v13) > fabs(v16))
      {
        double v111 = v16;
        double v109 = v13;
      }
      if (v24)
      {
        v114[0] = dbl_10033A010[v15 >= 0.0];
        double v41 = v114[0];
        sub_100050B80(&v112, &v111, &v112, v114, &v108, &v107, a7);
        v114[0] = v41;
        sub_100050B80(&v110, &v109, &v110, v114, &v108, &v107, a7);
        return;
      }
      sub_100051488(&v112, &v111, &v110, &v109, a7, (uint64_t)&v105);
      sub_100051A44(&v112, &v111, &v108, &v107, a7, (uint64_t)&v103);
      double v42 = v105;
      if (v105 == 0.0) {
        goto LABEL_59;
      }
      if ((*(void *)&v105 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v45 = fabs(v105);
        double v46 = 2.22044605e-16;
        if (v45 >= 1.0) {
          double v46 = v45 * 2.22044605e-16;
        }
        if (v45 <= v46)
        {
LABEL_59:
          sub_100049A7C(a7, v112, v111, v108, v107);
          return;
        }
      }
      if (v104 - v106[0] == 0.0) {
        goto LABEL_88;
      }
      if (COERCE_UNSIGNED_INT64(fabs(v104 - v106[0])) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v52 = fabs(v104 - v106[0]);
        double v53 = 2.22044605e-16;
        if (v52 >= 1.0) {
          double v53 = v52 * 2.22044605e-16;
        }
        if (v52 <= v53)
        {
LABEL_88:
          if (v22)
          {
            double v54 = v111;
            if (v109 >= v111) {
              double v55 = v111;
            }
            else {
              double v55 = v109;
            }
            if (v109 >= v111) {
              double v54 = v109;
            }
            if (v107 >= v55 && v107 <= v54) {
              return;
            }
          }
        }
      }
      long double v56 = cos(v104 - v106[0]);
      if (v56 * v103 / v42 < 0.0)
      {
        v102[0] = v112;
        double v100 = v111;
        v99[0] = v108;
        double v97 = v107;
        sub_100049A7C(a7, v112, v111, v108, v107);
        if ((v57 & 1) == 0)
        {
          double v48 = v102;
          int v49 = &v100;
          double v50 = v99;
          double v51 = &v97;
          goto LABEL_76;
        }
        return;
      }
      sub_100051A44(&v110, &v109, &v108, &v107, a7, (uint64_t)v102);
      long double v58 = cos(v102[1] - v106[1] + 3.14159265);
      if (v102[0] * v58 / v105 < 0.0)
      {
        double v100 = v110;
        v99[0] = v109;
        double v97 = v108;
        double v118 = v107;
        sub_100049A7C(a7, v110, v109, v108, v107);
        if ((v59 & 1) == 0)
        {
          double v48 = &v100;
          int v49 = v99;
          double v50 = &v97;
          double v51 = &v118;
          goto LABEL_76;
        }
        return;
      }
      double v60 = (v92 + v94 * 2.0) / 3.0;
      double v100 = v112;
      double v101 = v111;
      v99[0] = v110;
      v99[1] = v109;
      double v97 = v108;
      double v98 = v107;
      v114[0] = v60;
      double v61 = sub_100052194((uint64_t)v114, &v97, &v100, v99);
      long double v62 = asin(sqrt(v61));
      long double v95 = v60 * (v62 + v62);
      double v64 = v100;
      long double v63 = v101;
      double v66 = v97;
      long double v65 = v98;
      long double v67 = sin((v98 - v101) * 0.5);
      long double v68 = v67 * v67;
      double v69 = cos(v63);
      long double v70 = v69 * cos(v65);
      long double v71 = sin((v66 - v64) * 0.5);
      long double v72 = asin(sqrt(v68 + v70 * (v71 * v71)));
      double v73 = cos(v60 * (v72 + v72) / v60);
      long double v74 = v73 / cos(v95 / v60);
      double v75 = 0.0;
      if (v74 < 1.0)
      {
        if (v74 <= -1.0) {
          double v75 = v60 * 3.14159265;
        }
        else {
          double v75 = v60 * acos(v74);
        }
      }
      double v93 = v112;
      __double2 v76 = __sincos_stret(v110 - v112);
      double v96 = v111;
      __double2 v77 = __sincos_stret(v111);
      __double2 v78 = __sincos_stret(v109);
      double v79 = atan2(v76.__sinval * v78.__cosval, v76.__cosval * -(v77.__sinval * v78.__cosval) + v77.__cosval * v78.__sinval);
      __double2 v80 = __sincos_stret(v79);
      double v81 = atan2(v77.__cosval * v80.__sinval, sqrt(v77.__sinval * (v77.__sinval * (v80.__sinval * v80.__sinval)) + v80.__cosval * v80.__cosval));
      double v82 = atan2(v77.__sinval, v77.__cosval * v80.__cosval);
      __double2 v83 = __sincos_stret(v75 / v60 + v82);
      __double2 v84 = __sincos_stret(v81);
      __double2 v85 = __sincos_stret(v82);
      double v86 = atan2(v84.__cosval * v83.__sinval, sqrt(v84.__sinval * v84.__sinval + v84.__cosval * v84.__cosval * v83.__cosval * v83.__cosval));
      double v87 = atan2(v84.__sinval * v85.__sinval, v85.__cosval);
      double v88 = v93 + atan2(v84.__sinval * v83.__sinval, v83.__cosval) - v87;
      if (v88 <= 3.14159265)
      {
        if (v88 > -3.14159265)
        {
LABEL_105:
          double v117 = v96;
          double v118 = v93;
          double v115 = v86;
          double v116 = v88;
          sub_100049A7C(a7, v93, v96, v88, v86);
          if ((v91 & 1) == 0)
          {
            sub_100049CDC(&v118, &v117, &v116, &v115, a7, (uint64_t)v114);
            double v90 = v114[0];
          }
          v114[0] = v90;
          sub_100051F60(&v112, &v111, &v110, &v109, &v108, &v107, a7, v114, v106, v113);
          return;
        }
        double v89 = 6.28318531;
      }
      else
      {
        double v89 = -6.28318531;
      }
      double v88 = v88 + v89;
      goto LABEL_105;
    }
  }
  if (v16 == 0.0)
  {
    BOOL v36 = 1;
  }
  else
  {
    if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_53;
    }
    double v39 = fabs(v16);
    double v40 = 2.22044605e-16;
    if (v39 >= 1.0) {
      double v40 = v39 * 2.22044605e-16;
    }
    BOOL v36 = v39 <= v40;
  }
  if (v24 || !v36) {
    goto LABEL_53;
  }
  if (v14 <= v17)
  {
    double v105 = v17;
    double v103 = v13;
    v102[0] = v14;
    double v100 = v15;
    double v43 = v17;
    goto LABEL_64;
  }
  if (v14 < v10)
  {
    double v105 = v14;
    double v103 = v13;
    v102[0] = v14;
    double v100 = v15;
    double v43 = v14;
LABEL_64:
    double v44 = v13;
    goto LABEL_74;
  }
  double v105 = v10;
  double v103 = v16;
  v102[0] = v14;
  double v100 = v15;
  double v43 = v10;
  double v44 = v16;
LABEL_74:
  sub_100049A7C(a7, v43, v44, v14, v15);
  if ((v47 & 1) == 0)
  {
    double v48 = &v105;
    int v49 = &v103;
    double v50 = v102;
    double v51 = &v100;
LABEL_76:
    sub_100049CDC(v48, v49, v50, v51, a7, (uint64_t)v114);
  }
}

void sub_100050B80(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  double v8 = *a7;
  double v9 = a7[1];
  memset(v113, 0, sizeof(v113));
  double v10 = *a1;
  double v11 = *a2;
  double v111 = *a2;
  double v112 = v10;
  double v110 = *a3;
  double v12 = v110;
  double v13 = *a4;
  double v14 = *a5;
  double v108 = *a5;
  double v109 = v13;
  double v15 = *a6;
  double v107 = *a6;
  double v92 = v9;
  double v94 = v8;
  if (v10 <= v110)
  {
    double v16 = v13;
    double v13 = v11;
    double v17 = v10;
    double v10 = v110;
  }
  else
  {
    double v111 = v13;
    double v112 = v110;
    double v110 = v10;
    double v16 = v11;
    double v17 = v12;
    double v109 = v11;
  }
  double v18 = vabdd_f64(v10, v17);
  double v19 = 3.14159265;
  if (v18 == 3.14159265) {
    goto LABEL_5;
  }
  double v20 = v10 - v17;
  if (COERCE__INT64(fabs(v10 - v17)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v25 = fabs(v18 + -3.14159265);
    double v19 = 3.14159265;
    if (v18 < 3.14159265) {
      double v18 = 3.14159265;
    }
    double v26 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
    if (v25 <= v26) {
      goto LABEL_5;
    }
  }
  double v19 = 3.14159265;
  if (v20 <= 3.14159265)
  {
    if (v20 >= -3.14159265) {
      goto LABEL_6;
    }
    double v19 = fmod(v20 + -3.14159265, 6.28318531) + 3.14159265;
LABEL_5:
    double v20 = v19;
    goto LABEL_6;
  }
  double v27 = fmod(v20 + 3.14159265, 6.28318531);
  double v20 = v27 + -3.14159265;
  if (v27 + -3.14159265 == -3.14159265) {
    goto LABEL_5;
  }
  unint64_t v28 = COERCE__INT64(fabs(v27 + -3.14159265)) - 1;
  BOOL v29 = (unint64_t)(COERCE__INT64(fabs(v27 + -3.14159265)) - 0x10000000000000) >> 53 > 0x3FE
     && v28 > 0xFFFFFFFFFFFFELL;
  if (!v29 || *(void *)&v20 == 0)
  {
    double v19 = 3.14159265;
    double v31 = fabs(v20 + 3.14159265);
    double v32 = fabs(v20);
    if (v32 < 3.14159265) {
      double v32 = 3.14159265;
    }
    double v33 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
    if (v31 <= v33) {
      goto LABEL_5;
    }
  }
LABEL_6:
  BOOL v21 = sub_100049F80(v13, v16, v20);
  BOOL v22 = v21;
  double v23 = fabs(v20);
  if (v23 == 3.14159265)
  {
    BOOL v24 = 1;
  }
  else if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    BOOL v24 = 0;
  }
  else
  {
    double v34 = fabs(v23 + -3.14159265);
    if (v23 < 3.14159265) {
      double v23 = 3.14159265;
    }
    if (v23 >= 1.0) {
      double v35 = v23 * 2.22044605e-16;
    }
    else {
      double v35 = 2.22044605e-16;
    }
    BOOL v24 = v34 <= v35;
  }
  if (v13 != 0.0)
  {
    if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_53;
    }
    double v37 = fabs(v13);
    double v38 = 2.22044605e-16;
    if (v37 >= 1.0) {
      double v38 = v37 * 2.22044605e-16;
    }
    if (v37 > v38)
    {
LABEL_53:
      if ((v21 || v24) && fabs(v13) > fabs(v16))
      {
        double v111 = v16;
        double v109 = v13;
      }
      if (v24)
      {
        v114[0] = dbl_10033A010[v15 >= 0.0];
        double v41 = v114[0];
        sub_100050B80(&v112, &v111, &v112, v114, &v108, &v107, a7);
        v114[0] = v41;
        sub_100050B80(&v110, &v109, &v110, v114, &v108, &v107, a7);
        return;
      }
      sub_100051488(&v112, &v111, &v110, &v109, a7, (uint64_t)&v105);
      sub_100051A44(&v112, &v111, &v108, &v107, a7, (uint64_t)&v103);
      double v42 = v105;
      if (v105 == 0.0) {
        goto LABEL_59;
      }
      if ((*(void *)&v105 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v45 = fabs(v105);
        double v46 = 2.22044605e-16;
        if (v45 >= 1.0) {
          double v46 = v45 * 2.22044605e-16;
        }
        if (v45 <= v46)
        {
LABEL_59:
          sub_100049A7C(a7, v112, v111, v108, v107);
          return;
        }
      }
      if (v104 - v106[0] == 0.0) {
        goto LABEL_88;
      }
      if (COERCE_UNSIGNED_INT64(fabs(v104 - v106[0])) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v52 = fabs(v104 - v106[0]);
        double v53 = 2.22044605e-16;
        if (v52 >= 1.0) {
          double v53 = v52 * 2.22044605e-16;
        }
        if (v52 <= v53)
        {
LABEL_88:
          if (v22)
          {
            double v54 = v111;
            if (v109 >= v111) {
              double v55 = v111;
            }
            else {
              double v55 = v109;
            }
            if (v109 >= v111) {
              double v54 = v109;
            }
            if (v107 >= v55 && v107 <= v54) {
              return;
            }
          }
        }
      }
      long double v56 = cos(v104 - v106[0]);
      if (v56 * v103 / v42 < 0.0)
      {
        v102[0] = v112;
        double v100 = v111;
        v99[0] = v108;
        double v97 = v107;
        sub_100049A7C(a7, v112, v111, v108, v107);
        if ((v57 & 1) == 0)
        {
          double v48 = v102;
          int v49 = &v100;
          double v50 = v99;
          double v51 = &v97;
          goto LABEL_76;
        }
        return;
      }
      sub_100051A44(&v110, &v109, &v108, &v107, a7, (uint64_t)v102);
      long double v58 = cos(v102[1] - v106[1] + 3.14159265);
      if (v102[0] * v58 / v105 < 0.0)
      {
        double v100 = v110;
        v99[0] = v109;
        double v97 = v108;
        double v118 = v107;
        sub_100049A7C(a7, v110, v109, v108, v107);
        if ((v59 & 1) == 0)
        {
          double v48 = &v100;
          int v49 = v99;
          double v50 = &v97;
          double v51 = &v118;
          goto LABEL_76;
        }
        return;
      }
      double v60 = (v92 + v94 * 2.0) / 3.0;
      double v100 = v112;
      double v101 = v111;
      v99[0] = v110;
      v99[1] = v109;
      double v97 = v108;
      double v98 = v107;
      v114[0] = v60;
      double v61 = sub_100052194((uint64_t)v114, &v97, &v100, v99);
      long double v62 = asin(sqrt(v61));
      long double v95 = v60 * (v62 + v62);
      double v64 = v100;
      long double v63 = v101;
      double v66 = v97;
      long double v65 = v98;
      long double v67 = sin((v98 - v101) * 0.5);
      long double v68 = v67 * v67;
      double v69 = cos(v63);
      long double v70 = v69 * cos(v65);
      long double v71 = sin((v66 - v64) * 0.5);
      long double v72 = asin(sqrt(v68 + v70 * (v71 * v71)));
      double v73 = cos(v60 * (v72 + v72) / v60);
      long double v74 = v73 / cos(v95 / v60);
      double v75 = 0.0;
      if (v74 < 1.0)
      {
        if (v74 <= -1.0) {
          double v75 = v60 * 3.14159265;
        }
        else {
          double v75 = v60 * acos(v74);
        }
      }
      double v93 = v112;
      __double2 v76 = __sincos_stret(v110 - v112);
      double v96 = v111;
      __double2 v77 = __sincos_stret(v111);
      __double2 v78 = __sincos_stret(v109);
      double v79 = atan2(v76.__sinval * v78.__cosval, v76.__cosval * -(v77.__sinval * v78.__cosval) + v77.__cosval * v78.__sinval);
      __double2 v80 = __sincos_stret(v79);
      double v81 = atan2(v77.__cosval * v80.__sinval, sqrt(v77.__sinval * (v77.__sinval * (v80.__sinval * v80.__sinval)) + v80.__cosval * v80.__cosval));
      double v82 = atan2(v77.__sinval, v77.__cosval * v80.__cosval);
      __double2 v83 = __sincos_stret(v75 / v60 + v82);
      __double2 v84 = __sincos_stret(v81);
      __double2 v85 = __sincos_stret(v82);
      double v86 = atan2(v84.__cosval * v83.__sinval, sqrt(v84.__sinval * v84.__sinval + v84.__cosval * v84.__cosval * v83.__cosval * v83.__cosval));
      double v87 = atan2(v84.__sinval * v85.__sinval, v85.__cosval);
      double v88 = v93 + atan2(v84.__sinval * v83.__sinval, v83.__cosval) - v87;
      if (v88 <= 3.14159265)
      {
        if (v88 > -3.14159265)
        {
LABEL_105:
          double v117 = v96;
          double v118 = v93;
          double v115 = v86;
          double v116 = v88;
          sub_100049A7C(a7, v93, v96, v88, v86);
          if ((v91 & 1) == 0)
          {
            sub_100049CDC(&v118, &v117, &v116, &v115, a7, (uint64_t)v114);
            double v90 = v114[0];
          }
          v114[0] = v90;
          sub_100051F60(&v112, &v111, &v110, &v109, &v108, &v107, a7, v114, v106, v113);
          return;
        }
        double v89 = 6.28318531;
      }
      else
      {
        double v89 = -6.28318531;
      }
      double v88 = v88 + v89;
      goto LABEL_105;
    }
  }
  if (v16 == 0.0)
  {
    BOOL v36 = 1;
  }
  else
  {
    if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_53;
    }
    double v39 = fabs(v16);
    double v40 = 2.22044605e-16;
    if (v39 >= 1.0) {
      double v40 = v39 * 2.22044605e-16;
    }
    BOOL v36 = v39 <= v40;
  }
  if (v24 || !v36) {
    goto LABEL_53;
  }
  if (v14 <= v17)
  {
    double v105 = v17;
    double v103 = v13;
    v102[0] = v14;
    double v100 = v15;
    double v43 = v17;
    goto LABEL_64;
  }
  if (v14 < v10)
  {
    double v105 = v14;
    double v103 = v13;
    v102[0] = v14;
    double v100 = v15;
    double v43 = v14;
LABEL_64:
    double v44 = v13;
    goto LABEL_74;
  }
  double v105 = v10;
  double v103 = v16;
  v102[0] = v14;
  double v100 = v15;
  double v43 = v10;
  double v44 = v16;
LABEL_74:
  sub_100049A7C(a7, v43, v44, v14, v15);
  if ((v47 & 1) == 0)
  {
    double v48 = &v105;
    int v49 = &v103;
    double v50 = v102;
    double v51 = &v100;
LABEL_76:
    sub_100049CDC(v48, v49, v50, v51, a7, (uint64_t)v114);
  }
}

void sub_100051488(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(void *)(a6 + 32) = 0x3FF0000000000000;
  double v9 = *a1;
  double v10 = *a3;
  if (*a1 != *a3)
  {
    if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_19;
    }
    double v49 = vabdd_f64(v9, v10);
    double v50 = fabs(v9);
    double v51 = fabs(v10);
    if (v50 < v51) {
      double v50 = v51;
    }
    double v52 = v50 >= 1.0 ? v50 * 2.22044605e-16 : 2.22044605e-16;
    if (v49 > v52) {
      goto LABEL_19;
    }
  }
  double v11 = *a2;
  double v12 = *a4;
  if (*a2 != *a4)
  {
    BOOL v13 = (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
       && (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    if (!v13) {
      goto LABEL_19;
    }
    double v14 = vabdd_f64(v11, v12);
    double v15 = fabs(v11);
    double v16 = fabs(v12);
    if (v15 < v16) {
      double v15 = v16;
    }
    double v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 > v17)
    {
LABEL_19:
      double v19 = *a5;
      double v20 = *a5 - a5[1];
      __double2 v21 = __sincos_stret(v10 - v9);
      __double2 v22 = __sincos_stret(*a2);
      __double2 v23 = __sincos_stret(*a4);
      double v24 = v21.__cosval * (v22.__cosval * v23.__cosval) + v22.__sinval * v23.__sinval;
      if (v24 > 1.0) {
        double v25 = 1.0;
      }
      else {
        double v25 = v21.__cosval * (v22.__cosval * v23.__cosval) + v22.__sinval * v23.__sinval;
      }
      if (v24 >= -1.0) {
        double v26 = v25;
      }
      else {
        double v26 = -1.0;
      }
      long double v27 = acos(v26);
      double v28 = sin(v27);
      double v29 = v28 * 3.0;
      double v30 = 1.0 - v26;
      double v31 = v26 + 1.0;
      double v32 = 0.0;
      double v33 = 0.0;
      if (1.0 - v26 != 0.0)
      {
        unint64_t v34 = COERCE__INT64(fabs(1.0 - v26)) - 1;
        BOOL v35 = (unint64_t)(COERCE__INT64(fabs(1.0 - v26)) - 0x10000000000000) >> 53 > 0x3FE
           && v34 > 0xFFFFFFFFFFFFELL;
        if (v35 && *(void *)&v30 != 0) {
          goto LABEL_38;
        }
        double v37 = fabs(v30);
        double v38 = 2.22044605e-16;
        if (v37 >= 1.0) {
          double v38 = v37 * 2.22044605e-16;
        }
        BOOL v13 = v37 > v38;
        double v33 = 0.0;
        if (v13) {
LABEL_38:
        }
          double v33 = (v27 + v29) / v30;
      }
      double v39 = v20 / v19;
      if (v31 != 0.0)
      {
        unint64_t v40 = COERCE__INT64(fabs(v26 + 1.0)) - 1;
        BOOL v41 = (unint64_t)(COERCE__INT64(fabs(v26 + 1.0)) - 0x10000000000000) >> 53 > 0x3FE
           && v40 > 0xFFFFFFFFFFFFELL;
        if (v41 && *(void *)&v31 != 0) {
          goto LABEL_51;
        }
        double v43 = fabs(v31);
        double v44 = 2.22044605e-16;
        if (v43 >= 1.0) {
          double v44 = v43 * 2.22044605e-16;
        }
        if (v43 > v44) {
LABEL_51:
        }
          double v32 = (v27 - v29) / v31;
      }
      *(long double *)a6 = v19
                         * (v27
                          + v39
                          * -0.25
                          * ((v22.__sinval + v23.__sinval) * (v22.__sinval + v23.__sinval) * v32
                           + v33 * ((v22.__sinval - v23.__sinval) * (v22.__sinval - v23.__sinval))));
      if (v28 == 0.0) {
        goto LABEL_53;
      }
      if ((*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v45 = fabs(v28);
        double v46 = 2.22044605e-16;
        if (v45 >= 1.0) {
          double v46 = v45 * 2.22044605e-16;
        }
        if (v45 <= v46)
        {
LABEL_53:
          if (v26 >= 0.0)
          {
            *(void *)(a6 + 8) = 0;
            *(void *)(a6 + 16) = 0;
          }
          else if (v22.__sinval == 1.0 {
                 || (*(void *)&v22.__sinval & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          }
                 && ((double v53 = fabs(v22.__sinval + -1.0), v54 = fabs(v22.__sinval), v54 >= 1.0)
                   ? (double v55 = v54 * 2.22044605e-16)
                   : (double v55 = 2.22044605e-16),
                     v53 <= v55))
          {
            *(void *)(a6 + 8) = 0x400921FB54442D18;
          }
          else
          {
            *(void *)(a6 + 16) = 0x400921FB54442D18;
          }
          return;
        }
      }
      if (v23.__cosval == 0.0) {
        goto LABEL_61;
      }
      if ((*(void *)&v23.__cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_81;
      }
      double v56 = fabs(v23.__cosval);
      double v57 = 2.22044605e-16;
      if (v56 >= 1.0) {
        double v57 = v56 * 2.22044605e-16;
      }
      if (v56 <= v57)
      {
LABEL_61:
        double v47 = 0.0;
        if (v23.__sinval >= 0.0) {
          double v48 = 0.0;
        }
        else {
          double v48 = 3.14159265;
        }
        double cosval = v22.__cosval;
      }
      else
      {
LABEL_81:
        double v48 = atan2(v21.__sinval, v22.__cosval * (v23.__sinval / v23.__cosval) - v22.__sinval * v21.__cosval);
        long double v58 = sin(v48 + v48);
        double cosval = v22.__cosval;
        double v47 = v39 * 0.5 * (cosval * cosval) * v58;
      }
      if (cosval == 0.0) {
        goto LABEL_85;
      }
      if ((*(void *)&cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_91;
      }
      double v62 = fabs(cosval);
      double v63 = 2.22044605e-16;
      if (v62 >= 1.0) {
        double v63 = v62 * 2.22044605e-16;
      }
      if (v62 <= v63)
      {
LABEL_85:
        double v60 = 0.0;
        if (v22.__sinval >= 0.0) {
          double v61 = 0.0;
        }
        else {
          double v61 = 3.14159265;
        }
      }
      else
      {
LABEL_91:
        double v61 = atan2(v21.__sinval, v23.__cosval * (v22.__sinval / cosval) - v23.__sinval * v21.__cosval);
        double v60 = v39 * 0.5 * (v23.__cosval * v23.__cosval) * sin(v61 + v61);
      }
      double v64 = -(v47 - v60 * (v27 / v28));
      double v65 = v48 - v64;
      *(double *)(a6 + 8) = v48 - v64;
      if (v48 >= 0.0)
      {
        if (v64 >= 0.0)
        {
          unint64_t v66 = 0;
          if (v65 >= 0.0) {
            goto LABEL_104;
          }
          goto LABEL_103;
        }
        unint64_t v66 = 0x400921FB54442D18;
        if (v65 > 3.14159265) {
LABEL_103:
        }
          *(void *)(a6 + 8) = v66;
      }
      else
      {
        if (v64 > 0.0)
        {
          unint64_t v66 = 0xC00921FB54442D18;
          if (v65 >= -3.14159265) {
            goto LABEL_104;
          }
          goto LABEL_103;
        }
        unint64_t v66 = 0;
        if (v65 > 0.0) {
          goto LABEL_103;
        }
      }
LABEL_104:
      double v67 = v60 + -v47 * (v27 / v28);
      if (v61 >= 0.0)
      {
        unint64_t v68 = 0x400921FB54442D18;
        double v70 = 3.14159265 - v61 - v67;
        *(double *)(a6 + 16) = v70;
        if (v67 >= 0.0)
        {
          unint64_t v68 = 0;
          if (v70 >= 0.0) {
            return;
          }
        }
        else if (v70 <= 3.14159265)
        {
          return;
        }
      }
      else
      {
        unint64_t v68 = 0xC00921FB54442D18;
        double v69 = -3.14159265 - v61 - v67;
        *(double *)(a6 + 16) = v69;
        if (v67 <= 0.0)
        {
          unint64_t v68 = 0;
          if (v69 <= 0.0) {
            return;
          }
        }
        else if (v69 >= -3.14159265)
        {
          return;
        }
      }
      *(void *)(a6 + 16) = v68;
    }
  }
}

void sub_100051A44(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(void *)(a6 + 32) = 0x3FF0000000000000;
  double v9 = *a1;
  double v10 = *a3;
  if (*a1 != *a3)
  {
    if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_19;
    }
    double v50 = vabdd_f64(v9, v10);
    double v51 = fabs(v9);
    double v52 = fabs(v10);
    if (v51 < v52) {
      double v51 = v52;
    }
    double v53 = v51 >= 1.0 ? v51 * 2.22044605e-16 : 2.22044605e-16;
    if (v50 > v53) {
      goto LABEL_19;
    }
  }
  double v11 = *a2;
  double v12 = *a4;
  if (*a2 != *a4)
  {
    BOOL v13 = (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
       && (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    if (!v13) {
      goto LABEL_19;
    }
    double v14 = vabdd_f64(v11, v12);
    double v15 = fabs(v11);
    double v16 = fabs(v12);
    if (v15 < v16) {
      double v15 = v16;
    }
    double v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 > v17)
    {
LABEL_19:
      double v19 = *a5;
      double v20 = *a5 - a5[1];
      __double2 v21 = __sincos_stret(v10 - v9);
      __double2 v22 = __sincos_stret(*a2);
      __double2 v23 = __sincos_stret(*a4);
      double v24 = v21.__cosval * (v22.__cosval * v23.__cosval) + v22.__sinval * v23.__sinval;
      if (v24 > 1.0) {
        double v25 = 1.0;
      }
      else {
        double v25 = v21.__cosval * (v22.__cosval * v23.__cosval) + v22.__sinval * v23.__sinval;
      }
      if (v24 >= -1.0) {
        double v26 = v25;
      }
      else {
        double v26 = -1.0;
      }
      long double v27 = acos(v26);
      double v28 = sin(v27);
      double v29 = v28 * 3.0;
      double v30 = 1.0 - v26;
      double v31 = v26 + 1.0;
      double v32 = 0.0;
      double v33 = 0.0;
      if (1.0 - v26 != 0.0)
      {
        unint64_t v34 = COERCE__INT64(fabs(1.0 - v26)) - 1;
        BOOL v35 = (unint64_t)(COERCE__INT64(fabs(1.0 - v26)) - 0x10000000000000) >> 53 > 0x3FE
           && v34 > 0xFFFFFFFFFFFFELL;
        if (v35 && *(void *)&v30 != 0) {
          goto LABEL_38;
        }
        double v37 = fabs(v30);
        double v38 = 2.22044605e-16;
        if (v37 >= 1.0) {
          double v38 = v37 * 2.22044605e-16;
        }
        BOOL v13 = v37 > v38;
        double v33 = 0.0;
        if (v13) {
LABEL_38:
        }
          double v33 = (v27 + v29) / v30;
      }
      double v39 = v20 / v19;
      if (v31 != 0.0)
      {
        unint64_t v40 = COERCE__INT64(fabs(v26 + 1.0)) - 1;
        BOOL v41 = (unint64_t)(COERCE__INT64(fabs(v26 + 1.0)) - 0x10000000000000) >> 53 > 0x3FE
           && v40 > 0xFFFFFFFFFFFFELL;
        if (v41 && *(void *)&v31 != 0) {
          goto LABEL_51;
        }
        double v43 = fabs(v31);
        double v44 = 2.22044605e-16;
        if (v43 >= 1.0) {
          double v44 = v43 * 2.22044605e-16;
        }
        if (v43 > v44) {
LABEL_51:
        }
          double v32 = (v27 - v29) / v31;
      }
      *(long double *)a6 = v19
                         * (v27
                          + v39
                          * -0.25
                          * ((v22.__sinval + v23.__sinval) * (v22.__sinval + v23.__sinval) * v32
                           + v33 * ((v22.__sinval - v23.__sinval) * (v22.__sinval - v23.__sinval))));
      if (v28 != 0.0)
      {
        if ((*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_80;
        }
        double v45 = fabs(v28);
        double v46 = 2.22044605e-16;
        if (v45 >= 1.0) {
          double v46 = v45 * 2.22044605e-16;
        }
        if (v45 > v46)
        {
LABEL_80:
          if (v23.__cosval == 0.0) {
            goto LABEL_61;
          }
          if ((*(void *)&v23.__cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
            goto LABEL_81;
          }
          double v57 = fabs(v23.__cosval);
          double v58 = 2.22044605e-16;
          if (v57 >= 1.0) {
            double v58 = v57 * 2.22044605e-16;
          }
          if (v57 <= v58)
          {
LABEL_61:
            double v47 = 0.0;
            double cosval = v22.__cosval;
            if (v23.__sinval >= 0.0) {
              double v49 = 0.0;
            }
            else {
              double v49 = 3.14159265;
            }
          }
          else
          {
LABEL_81:
            double v49 = atan2(v21.__sinval, v22.__cosval * (v23.__sinval / v23.__cosval) - v22.__sinval * v21.__cosval);
            long double v59 = sin(v49 + v49);
            double cosval = v22.__cosval;
            double v47 = v39 * 0.5 * (cosval * cosval) * v59;
          }
          double v60 = 0.0;
          if (cosval != 0.0)
          {
            if ((*(void *)&cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
              goto LABEL_88;
            }
            double v61 = fabs(cosval);
            double v62 = 2.22044605e-16;
            if (v61 >= 1.0) {
              double v62 = v61 * 2.22044605e-16;
            }
            if (v61 > v62)
            {
LABEL_88:
              long double v63 = atan2(v21.__sinval, v23.__cosval * (v22.__sinval / cosval) - v23.__sinval * v21.__cosval);
              double v60 = v39 * 0.5 * (v23.__cosval * v23.__cosval) * sin(v63 + v63);
            }
          }
          double v64 = -(v47 - v60 * (v27 / v28));
          double v65 = v49 - v64;
          *(double *)(a6 + 8) = v49 - v64;
          if (v49 >= 0.0)
          {
            if (v64 >= 0.0)
            {
              unint64_t v66 = 0;
              if (v65 >= 0.0) {
                return;
              }
            }
            else
            {
              unint64_t v66 = 0x400921FB54442D18;
              if (v65 <= 3.14159265) {
                return;
              }
            }
          }
          else if (v64 <= 0.0)
          {
            unint64_t v66 = 0;
            if (v65 <= 0.0) {
              return;
            }
          }
          else
          {
            unint64_t v66 = 0xC00921FB54442D18;
            if (v65 >= -3.14159265) {
              return;
            }
          }
          *(void *)(a6 + 8) = v66;
          return;
        }
      }
      if (v26 >= 0.0)
      {
        *(void *)(a6 + 8) = 0;
        *(void *)(a6 + 16) = 0;
      }
      else if (v22.__sinval == 1.0 {
             || (*(void *)&v22.__sinval & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      }
             && ((double v54 = fabs(v22.__sinval + -1.0), v55 = fabs(v22.__sinval), v55 >= 1.0)
               ? (double v56 = v55 * 2.22044605e-16)
               : (double v56 = 2.22044605e-16),
                 v54 <= v56))
      {
        *(void *)(a6 + 8) = 0x400921FB54442D18;
      }
      else
      {
        *(void *)(a6 + 16) = 0x400921FB54442D18;
      }
    }
  }
}

void sub_100051F60(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  unsigned int v16 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v37 = 0x3FF0000000000000;
  double v34 = *a8;
  double v17 = -1.0;
  double v18 = 0.0;
  do
  {
    sub_10005245C(a1, a2, &v34, a9, a7, (uint64_t)&v31);
    long long v35 = v31;
    long long v36 = v32;
    uint64_t v37 = *(void *)&v33;
    sub_10005286C((double *)&v35, (double *)&v35 + 1, a3, a4, a7, (uint64_t)&v31);
    double v19 = *((double *)&v31 + 1);
    sub_100052C84((double *)&v35, (double *)&v35 + 1, a5, a6, a7, (uint64_t)&v31);
    double v20 = *(double *)&v31;
    double v21 = *((double *)&v31 + 1) - v19;
    if (*((double *)&v32 + 1) != 0.0)
    {
      double v22 = v33 / *((double *)&v32 + 1);
      double v23 = sin(v21) * v22;
      if (v21 >= -3.92699082)
      {
        if (v21 <= 3.92699082)
        {
          if (v21 >= 0.0 || v21 <= -2.35619449)
          {
            double v18 = v21 + -1.57079633;
          }
          else
          {
            double v23 = -v23;
            double v18 = -1.57079633 - v21;
          }
        }
        else
        {
          double v23 = -v23;
          double v18 = 4.71238898 - v21;
        }
      }
      else
      {
        double v18 = v21 + 4.71238898;
      }
      double v24 = v18 / v23;
      BOOL v28 = v23 == 0.0;
      double v25 = 0.0;
      if (!v28) {
        double v25 = v24;
      }
      double v34 = v34 - v25;
    }
    BOOL v26 = v17 == -1.0;
    if (v17 > v20) {
      BOOL v26 = 1;
    }
    if (v26) {
      double v27 = v20;
    }
    else {
      double v27 = v17;
    }
    *a10 = v27;
    BOOL v28 = v21 == 1.57079633 || !v26;
    if (v28) {
      break;
    }
    if (v18 == 0.0) {
      break;
    }
    double v17 = v20;
  }
  while (v16++ < 0x64);
}

long double sub_100052194(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v5 = *a3;
  long double v6 = a3[1];
  double v7 = *a2;
  long double v8 = a2[1];
  long double v9 = sin((v8 - v6) * 0.5);
  long double v10 = v9 * v9;
  double v11 = cos(v6);
  long double v47 = v8;
  double v46 = cos(v8);
  double v49 = v7;
  double v45 = v7 - v5;
  long double v12 = sin((v7 - v5) * 0.5);
  double v51 = v10 + v11 * v46 * (v12 * v12);
  double v13 = *a4;
  long double v14 = a4[1];
  long double v15 = sin((v14 - v6) * 0.5);
  double v16 = v15 * v15;
  double v17 = cos(v14);
  double v18 = v13 - v5;
  double v19 = sin(v18 * 0.5);
  double v20 = v16 + v11 * v17 * (v19 * v19);
  if (v20 == 0.0) {
    return v51;
  }
  double v43 = v11;
  if (COERCE_UNSIGNED_INT64(fabs(v16 + v11 * v17 * (v19 * v19))) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_8;
  }
  double v23 = fabs(v20);
  double v24 = 2.22044605e-16;
  if (v23 >= 1.0) {
    double v24 = v23 * 2.22044605e-16;
  }
  if (v23 <= v24) {
    return v51;
  }
LABEL_8:
  double v41 = v20;
  long double v25 = sin((v8 - v14) * 0.5);
  long double v26 = v25 * v25;
  double v44 = v17;
  double v42 = v49 - v13;
  long double v27 = sin((v49 - v13) * 0.5);
  double v50 = v26 + v46 * v17 * (v27 * v27);
  __double2 v28 = __sincos_stret(v45);
  double v29 = sin(v6);
  double v30 = sin(v47);
  double v48 = atan2(v28.__sinval * v46, v28.__cosval * -(v29 * v46) + v43 * v30);
  __double2 v31 = __sincos_stret(v18);
  double v32 = sin(v14);
  double v33 = -(v29 * v17);
  double v34 = atan2(v31.__sinval * v44, v31.__cosval * v33 + v43 * v32);
  long double v35 = atan2(v43 * v31.__sinval, v33 + v43 * v32 * v31.__cosval) + -3.14159265;
  __double2 v36 = __sincos_stret(v42);
  long double v37 = atan2(v46 * v36.__sinval, v36.__cosval * -(v32 * v46) + v44 * v30) - v35;
  double v21 = v51;
  long double v38 = v51 * cos(v48 - v34) / v41;
  double v39 = cos(v37);
  if (v38 <= 0.0 || v50 * v39 / v41 <= 0.0)
  {
    if (v50 < v51) {
      return v50;
    }
  }
  else
  {
    long double v40 = sin(v48 - v34);
    return v51 * v40 * (v40 - v51 * v40) / (sqrt(0.25 - v51 * v40 * (v40 - v51 * v40)) + 0.5);
  }
  return v21;
}

void sub_10005245C(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(void *)(a6 + 32) = 0x3FF0000000000000;
  double v7 = *a4;
  if (*a4 < -3.14159265 || (double v8 = 3.14159265, v7 > 3.14159265)) {
    sub_10005485C();
  }
  double v10 = *a2;
  double v11 = *a5;
  double v12 = (*a5 - a5[1]) / *a5;
  double v13 = 1.57079633;
  double v48 = *a4;
  if (v7 <= 1.57079633 && (double v8 = -3.14159265, v7 >= -1.57079633))
  {
    int v14 = 0;
  }
  else
  {
    double v7 = v8 - v7;
    double v10 = -v10;
    int v14 = 1;
  }
  double v51 = *a1;
  if (v10 != 1.57079633)
  {
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v15 = fabs(v10);
      if (v15 < 1.57079633) {
        double v15 = 1.57079633;
      }
      if (v15 >= 1.0) {
        double v16 = v15 * 2.22044605e-16;
      }
      else {
        double v16 = 2.22044605e-16;
      }
      if (v10 == -1.57079633 || fabs(v10 + -1.57079633) <= v16 || fabs(v10 + 1.57079633) <= v16) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    double v13 = -1.57079633;
    if (v10 != -1.57079633)
    {
LABEL_19:
      long double v17 = tan(v10);
      double v10 = atan((1.0 - v12) * v17);
LABEL_20:
      double v13 = v10;
    }
  }
  double v52 = 1.0 - v12;
  __double2 v18 = __sincos_stret(v13);
  __double2 v19 = __sincos_stret(v7);
  double v20 = v19.__sinval * v18.__cosval;
  long double v21 = acos(v19.__sinval * v18.__cosval);
  double v22 = sin(v21);
  double v23 = v12 * (1.0 - v20 * v20) * 0.25;
  double v50 = v12 * (v19.__sinval * v18.__cosval);
  double v24 = v23 * -2.0 + 1.0 - v12 * v20 * v20;
  double v25 = v23 / v24;
  double v26 = 1.0;
  if (v22 != 0.0)
  {
    if ((*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_26;
    }
    double v27 = fabs(v22);
    double v28 = 2.22044605e-16;
    if (v27 >= 1.0) {
      double v28 = v27 * 2.22044605e-16;
    }
    if (v27 > v28)
    {
LABEL_26:
      double v29 = v18.__sinval / v22;
      double v30 = -1.0;
      if (v29 >= -1.0) {
        double v30 = v29;
      }
      if (v29 <= 1.0) {
        double v26 = v30;
      }
    }
  }
  long double v31 = acos(v26);
  double v32 = *a3 / (v11 * v24);
  double v49 = v31;
  double v33 = v31 - v32 + v31 - v32;
  __double2 v34 = __sincos_stret(v32);
  __double2 v35 = __sincos_stret(v33);
  double v36 = v32
      - v34.__sinval
      * ((1.0 - (v25 + v25) * v35.__cosval)
       * ((v25 + v25)
        * (v35.__cosval * v34.__cosval - v35.__sinval * v34.__sinval)));
  __double2 v37 = __sincos_stret(v36);
  double v38 = atan2(v20, v19.__cosval * v18.__cosval * v37.__cosval - v18.__sinval * v37.__sinval);
  double v39 = v38;
  *(double *)(a6 + 16) = v38;
  if (v14)
  {
    if (v38 == 0.0)
    {
      double v39 = dbl_10033A020[v48 >= 0.0];
    }
    else
    {
      if (v38 <= 0.0) {
        double v40 = -3.14159265;
      }
      else {
        double v40 = 3.14159265;
      }
      double v39 = v40 - v39;
    }
    *(double *)(a6 + 16) = v39;
  }
  double v41 = v51
      + atan2(v19.__sinval * v37.__sinval, v19.__cosval * -(v18.__sinval * v37.__sinval) + v18.__cosval * v37.__cosval)
      - v50 * v36;
  *(double *)a6 = v41;
  if (v20 == 0.0) {
    goto LABEL_39;
  }
  if (COERCE_UNSIGNED_INT64(fabs(v19.__sinval * v18.__cosval)) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_44;
  }
  double v44 = fabs(v20);
  double v45 = 2.22044605e-16;
  if (v44 >= 1.0) {
    double v45 = v44 * 2.22044605e-16;
  }
  if (v44 <= v45)
  {
LABEL_39:
    __double2 v42 = __sincos_stret(-(v36 - v49 * 2.0) - v49);
    double v43 = v42.__cosval / fabs(v42.__sinval);
  }
  else
  {
LABEL_44:
    double v43 = (v19.__cosval * v18.__cosval * v37.__sinval + v18.__sinval * v37.__cosval) * sin(v39) / v20;
  }
  double v46 = atan(v43 / v52);
  if (v14) {
    double v46 = -v46;
  }
  *(double *)(a6 + 8) = v46;
  if (v41 <= 3.14159265)
  {
    if (v41 > -3.14159265) {
      return;
    }
    double v47 = 6.28318531;
  }
  else
  {
    double v47 = -6.28318531;
  }
  *(double *)a6 = v41 + v47;
}

void sub_10005286C(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(void *)(a6 + 32) = 0x3FF0000000000000;
  double v9 = *a1;
  double v10 = *a3;
  if (*a1 != *a3)
  {
    if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_19;
    }
    double v33 = vabdd_f64(v9, v10);
    double v34 = fabs(v9);
    double v35 = fabs(v10);
    if (v34 < v35) {
      double v34 = v35;
    }
    double v36 = v34 >= 1.0 ? v34 * 2.22044605e-16 : 2.22044605e-16;
    if (v33 > v36) {
      goto LABEL_19;
    }
  }
  double v11 = *a2;
  double v12 = *a4;
  if (*a2 != *a4)
  {
    if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_19;
    }
    double v14 = vabdd_f64(v11, v12);
    double v15 = fabs(v11);
    double v16 = fabs(v12);
    if (v15 < v16) {
      double v15 = v16;
    }
    double v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 > v17)
    {
LABEL_19:
      double v19 = *a5;
      double v51 = a5[1];
      __double2 v20 = __sincos_stret(v10 - v9);
      __double2 v21 = __sincos_stret(*a2);
      __double2 v22 = __sincos_stret(*a4);
      double v23 = v20.__cosval * (v21.__cosval * v22.__cosval) + v21.__sinval * v22.__sinval;
      double v24 = -1.0;
      if (v23 >= -1.0)
      {
        double v24 = v20.__cosval * (v21.__cosval * v22.__cosval) + v21.__sinval * v22.__sinval;
        if (v23 > 1.0) {
          double v24 = 1.0;
        }
      }
      long double v25 = acos(v24);
      double v26 = sin(v25);
      if (v26 != 0.0)
      {
        double v27 = v26;
        if ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_30;
        }
        double v28 = fabs(v26);
        double v29 = 2.22044605e-16;
        if (v28 >= 1.0) {
          double v29 = v28 * 2.22044605e-16;
        }
        if (v28 > v29)
        {
LABEL_30:
          double v30 = (v19 - v51) / v19;
          if (v22.__cosval == 0.0) {
            goto LABEL_31;
          }
          if ((*(void *)&v22.__cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
            goto LABEL_51;
          }
          double v40 = fabs(v22.__cosval);
          double v41 = 2.22044605e-16;
          if (v40 >= 1.0) {
            double v41 = v40 * 2.22044605e-16;
          }
          if (v40 <= v41)
          {
LABEL_31:
            double v31 = 0.0;
            if (v22.__sinval >= 0.0) {
              double v32 = 0.0;
            }
            else {
              double v32 = 3.14159265;
            }
          }
          else
          {
LABEL_51:
            double v32 = atan2(v20.__sinval, v21.__cosval * (v22.__sinval / v22.__cosval) - v21.__sinval * v20.__cosval);
            long double v42 = sin(v32 + v32);
            double v30 = (v19 - v51) / v19;
            double v31 = v30 * 0.5 * (v21.__cosval * v21.__cosval) * v42;
          }
          double v43 = 0.0;
          if (v21.__cosval != 0.0)
          {
            if ((*(void *)&v21.__cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
              goto LABEL_58;
            }
            double v44 = fabs(v21.__cosval);
            double v45 = 2.22044605e-16;
            if (v44 >= 1.0) {
              double v45 = v44 * 2.22044605e-16;
            }
            if (v44 > v45)
            {
LABEL_58:
              double v46 = v30;
              long double v47 = atan2(v20.__sinval, v22.__cosval * (v21.__sinval / v21.__cosval) - v22.__sinval * v20.__cosval);
              double v43 = v46 * 0.5 * (v22.__cosval * v22.__cosval) * sin(v47 + v47);
            }
          }
          double v48 = -(v31 - v43 * (v25 / v27));
          double v49 = v32 - v48;
          *(double *)(a6 + 8) = v32 - v48;
          if (v32 >= 0.0)
          {
            if (v48 >= 0.0)
            {
              unint64_t v50 = 0;
              if (v49 >= 0.0) {
                return;
              }
            }
            else
            {
              unint64_t v50 = 0x400921FB54442D18;
              if (v49 <= 3.14159265) {
                return;
              }
            }
          }
          else if (v48 <= 0.0)
          {
            unint64_t v50 = 0;
            if (v49 <= 0.0) {
              return;
            }
          }
          else
          {
            unint64_t v50 = 0xC00921FB54442D18;
            if (v49 >= -3.14159265) {
              return;
            }
          }
          *(void *)(a6 + 8) = v50;
          return;
        }
      }
      if (v24 >= 0.0)
      {
        *(void *)(a6 + 8) = 0;
        *(void *)(a6 + 16) = 0;
      }
      else if (v21.__sinval == 1.0 {
             || (*(void *)&v21.__sinval & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      }
             && ((double v37 = fabs(v21.__sinval + -1.0), v38 = fabs(v21.__sinval), v38 >= 1.0)
               ? (double v39 = v38 * 2.22044605e-16)
               : (double v39 = 2.22044605e-16),
                 v37 <= v39))
      {
        *(void *)(a6 + 8) = 0x400921FB54442D18;
      }
      else
      {
        *(void *)(a6 + 16) = 0x400921FB54442D18;
      }
    }
  }
}

void sub_100052C84(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)(a6 + 32) = 0x3FF0000000000000;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  double v9 = *a1;
  double v10 = *a3;
  if (*a1 != *a3)
  {
    if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_19;
    }
    double v49 = vabdd_f64(v9, v10);
    double v50 = fabs(v9);
    double v51 = fabs(v10);
    if (v50 < v51) {
      double v50 = v51;
    }
    double v52 = v50 >= 1.0 ? v50 * 2.22044605e-16 : 2.22044605e-16;
    if (v49 > v52) {
      goto LABEL_19;
    }
  }
  double v11 = *a2;
  double v12 = *a4;
  if (*a2 != *a4)
  {
    BOOL v13 = (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
       && (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    if (!v13) {
      goto LABEL_19;
    }
    double v14 = vabdd_f64(v11, v12);
    double v15 = fabs(v11);
    double v16 = fabs(v12);
    if (v15 < v16) {
      double v15 = v16;
    }
    double v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 > v17)
    {
LABEL_19:
      double v19 = *a5;
      double v74 = a5[1];
      double v81 = (v19 - v74) / v19;
      double v80 = v10 - v9;
      __double2 v20 = __sincos_stret(v10 - v9);
      __double2 v21 = __sincos_stret(*a2);
      double cosval = v21.__cosval;
      double sinval = v21.__sinval;
      __double2 v22 = __sincos_stret(*a4);
      double v76 = v22.__cosval;
      double v77 = v22.__sinval;
      double v23 = v20.__cosval * (v21.__cosval * v22.__cosval) + v21.__sinval * v22.__sinval;
      if (v23 > 1.0) {
        double v24 = 1.0;
      }
      else {
        double v24 = v20.__cosval * (v21.__cosval * v22.__cosval) + v21.__sinval * v22.__sinval;
      }
      if (v23 >= -1.0) {
        double v25 = v24;
      }
      else {
        double v25 = -1.0;
      }
      long double v26 = acos(v25);
      double v27 = sin(v26);
      double v28 = v27 * 3.0;
      double v29 = 1.0 - v25;
      double v30 = v25 + 1.0;
      double v31 = 0.0;
      double v32 = 0.0;
      if (1.0 - v25 != 0.0)
      {
        unint64_t v33 = COERCE__INT64(fabs(1.0 - v25)) - 1;
        BOOL v34 = (unint64_t)(COERCE__INT64(fabs(1.0 - v25)) - 0x10000000000000) >> 53 > 0x3FE
           && v33 > 0xFFFFFFFFFFFFELL;
        if (v34 && *(void *)&v29 != 0) {
          goto LABEL_38;
        }
        double v36 = fabs(v29);
        double v37 = 2.22044605e-16;
        if (v36 >= 1.0) {
          double v37 = v36 * 2.22044605e-16;
        }
        BOOL v13 = v36 > v37;
        double v32 = 0.0;
        if (v13) {
LABEL_38:
        }
          double v32 = (v26 + v28) / v29;
      }
      if (v30 == 0.0)
      {
        double v38 = (v19 - v74) / v19;
      }
      else
      {
        unint64_t v39 = COERCE__INT64(fabs(v25 + 1.0)) - 1;
        BOOL v41 = (unint64_t)(COERCE__INT64(fabs(v25 + 1.0)) - 0x10000000000000) >> 53 <= 0x3FE
           || v39 <= 0xFFFFFFFFFFFFELL
           || *(void *)&v30 == 0;
        double v38 = (v19 - v74) / v19;
        if (!v41) {
          goto LABEL_52;
        }
        double v42 = fabs(v30);
        double v43 = 2.22044605e-16;
        if (v42 >= 1.0) {
          double v43 = v42 * 2.22044605e-16;
        }
        if (v42 > v43) {
LABEL_52:
        }
          double v31 = (v26 - v28) / v30;
      }
      *(long double *)a6 = v19
                         * (v26
                          + v38
                          * -0.25
                          * ((v21.__sinval + v22.__sinval) * (v21.__sinval + v22.__sinval) * v31
                           + v32 * ((v21.__sinval - v22.__sinval) * (v21.__sinval - v22.__sinval))));
      if (v27 == 0.0) {
        goto LABEL_54;
      }
      if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v45 = fabs(v27);
        double v46 = 2.22044605e-16;
        if (v45 >= 1.0) {
          double v46 = v45 * 2.22044605e-16;
        }
        if (v45 <= v46)
        {
LABEL_54:
          if (v25 >= 0.0)
          {
            *(void *)(a6 + 8) = 0;
            *(void *)(a6 + 16) = 0;
          }
          else
          {
            if (v21.__sinval == 1.0
              || (*(void *)&v21.__sinval & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && ((double v53 = fabs(v21.__sinval + -1.0), v54 = fabs(v21.__sinval), v54 >= 1.0)
                ? (double v55 = v54 * 2.22044605e-16)
                : (double v55 = 2.22044605e-16),
                  v53 <= v55))
            {
              long long v44 = xmmword_10033A040;
            }
            else
            {
              long long v44 = xmmword_10033A030;
            }
            *(_OWORD *)(a6 + 8) = v44;
          }
          double v56 = v74;
          goto LABEL_80;
        }
      }
      if (v22.__cosval == 0.0) {
        goto LABEL_62;
      }
      if ((*(void *)&v22.__cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_86;
      }
      double v57 = fabs(v22.__cosval);
      double v58 = 2.22044605e-16;
      if (v57 >= 1.0) {
        double v58 = v57 * 2.22044605e-16;
      }
      if (v57 <= v58)
      {
LABEL_62:
        double v47 = 0.0;
        if (v22.__sinval >= 0.0) {
          double v48 = 0.0;
        }
        else {
          double v48 = 3.14159265;
        }
        double v60 = v21.__cosval;
      }
      else
      {
LABEL_86:
        double v48 = atan2(v20.__sinval, v21.__cosval * (v22.__sinval / v22.__cosval) - v21.__sinval * v20.__cosval);
        long double v59 = sin(v48 + v48);
        double v60 = v21.__cosval;
        double v47 = v38 * 0.5 * (v60 * v60) * v59;
      }
      if (v60 == 0.0) {
        goto LABEL_90;
      }
      if ((*(void *)&v60 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_96;
      }
      double v63 = fabs(v60);
      double v64 = 2.22044605e-16;
      if (v63 >= 1.0) {
        double v64 = v63 * 2.22044605e-16;
      }
      if (v63 <= v64)
      {
LABEL_90:
        double v61 = 0.0;
        if (v21.__sinval >= 0.0) {
          double v62 = 0.0;
        }
        else {
          double v62 = 3.14159265;
        }
      }
      else
      {
LABEL_96:
        double v62 = atan2(v20.__sinval, v22.__cosval * (v21.__sinval / v60) - v22.__sinval * v20.__cosval);
        double v61 = v38 * 0.5 * (v22.__cosval * v22.__cosval) * sin(v62 + v62);
      }
      double v65 = -(v47 - v61 * (v26 / v27));
      double v66 = v48 - v65;
      *(double *)(a6 + 8) = v48 - v65;
      if (v48 >= 0.0)
      {
        if (v65 >= 0.0)
        {
          unint64_t v67 = 0;
          if (v66 >= 0.0) {
            goto LABEL_109;
          }
          goto LABEL_108;
        }
        unint64_t v67 = 0x400921FB54442D18;
        if (v66 > 3.14159265) {
LABEL_108:
        }
          *(void *)(a6 + 8) = v67;
      }
      else
      {
        if (v65 > 0.0)
        {
          unint64_t v67 = 0xC00921FB54442D18;
          if (v66 >= -3.14159265) {
            goto LABEL_109;
          }
          goto LABEL_108;
        }
        unint64_t v67 = 0;
        if (v66 > 0.0) {
          goto LABEL_108;
        }
      }
LABEL_109:
      double v68 = v61 + -v47 * (v26 / v27);
      if (v62 >= 0.0)
      {
        unint64_t v69 = 0x400921FB54442D18;
        double v72 = 3.14159265 - v62 - v68;
        *(double *)(a6 + 16) = v72;
        if (v68 >= 0.0)
        {
          unint64_t v69 = 0;
          BOOL v71 = v72 < 0.0;
LABEL_118:
          double v56 = v74;
          if (!v71) {
            goto LABEL_80;
          }
          goto LABEL_120;
        }
        BOOL v73 = v72 <= 3.14159265;
      }
      else
      {
        unint64_t v69 = 0xC00921FB54442D18;
        double v70 = -3.14159265 - v62 - v68;
        *(double *)(a6 + 16) = v70;
        if (v68 > 0.0)
        {
          BOOL v71 = v70 < -3.14159265;
          goto LABEL_118;
        }
        unint64_t v69 = 0;
        BOOL v73 = v70 <= 0.0;
      }
      double v56 = v74;
      if (v73)
      {
LABEL_80:
        double v75 = v56;
        sub_100053290(&v80, &sinval, &cosval, &v77, &v76, (double *)(a6 + 8), (long double *)(a6 + 16), &v75, &v81, (double *)(a6 + 24), (double *)(a6 + 32));
        return;
      }
LABEL_120:
      *(void *)(a6 + 16) = v69;
      goto LABEL_80;
    }
  }
}

void sub_100053290(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, long double *a7, double *a8, double *a9, double *a10, double *a11)
{
  double v15 = *a9;
  double v16 = 1.0 - *a9;
  double v17 = v16 * *a2;
  double v18 = v16 * *a4;
  if (v17 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(v16 * *a2)) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_17;
    }
    double v23 = fabs(v17);
    double v24 = 2.22044605e-16;
    if (v23 >= 1.0) {
      double v24 = v23 * 2.22044605e-16;
    }
    if (v23 > v24) {
      goto LABEL_17;
    }
  }
  if (v18 == 0.0) {
    goto LABEL_3;
  }
  if (COERCE_UNSIGNED_INT64(fabs(v16 * *a4)) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_17;
  }
  double v25 = fabs(v18);
  double v26 = 2.22044605e-16;
  if (v25 >= 1.0) {
    double v26 = v25 * 2.22044605e-16;
  }
  if (v25 <= v26)
  {
LABEL_3:
    double v19 = *a6;
    if (*a6 < -3.14159265 || v19 > 3.14159265) {
      sub_100054888();
    }
    __double2 v22 = __sincos_stret(*a1 / v16);
    double cosval = v22.__cosval;
    double sinval = v22.__sinval;
    if (v19 < 0.0) {
      double sinval = -v22.__sinval;
    }
    *a10 = *a8 * sinval;
  }
  else
  {
LABEL_17:
    double v48 = v15 * (2.0 - v15) / (v16 * v16);
    __double2 v27 = __sincos_stret(*a6);
    long double v28 = cos(*a7);
    double v29 = sqrt(v17 * v17 + *a3 * *a3);
    double v30 = v17 / v29;
    double v31 = *a3 / v29;
    double v32 = sqrt(v18 * v18 + *a5 * *a5);
    double v33 = v18 / v32;
    double v34 = *a5 / v32;
    long double v35 = v28 * v34;
    double v36 = sqrt(v30 * v30 + v27.__cosval * v31 * (v27.__cosval * v31));
    double v37 = v30 / v36;
    double v38 = v27.__cosval * v31 / v36;
    double v39 = v33 * v33;
    double v40 = sqrt(v33 * v33 + v35 * v35);
    double v41 = v33 / v40;
    long double v42 = v35 / v40;
    double v46 = v30 * v30;
    long double v47 = v30 / v36 * (v33 / v40) + v38 * (v35 / v40);
    long double v43 = v15
        * (1.0 - v27.__sinval * v31 * (v27.__sinval * v31))
        * (atan2(v38 * (v33 / v40) - v30 / v36 * (v35 / v40), v47)
         + (v33 / v40 * (v42 + v42) - v30 / v36 * (v38 + v38)) * -0.5);
    double v44 = sqrt(v48 * v46 + 1.0);
    double v45 = sqrt(v48 * v39 + 1.0);
    *a10 = *a8 * (v45 * (v38 * v41) - v44 * (v37 * v42) + -(v38 * v42) * v43);
    double cosval = v47 + v37 * ((v31 + v34) * (v48 * (v31 - v34)) / (v44 + v45) * v41 - v42 * v43) / v44;
  }
  *a11 = cosval;
}

void *sub_100053560(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_10000B42C();
  }
  return operator new(24 * a2);
}

uint64_t sub_1000535A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    long double v6 = (long long *)(result + 24 * (v4 >> 1));
    double v7 = *(double *)(a2 - 24);
    if (*(double *)v6 <= v7)
    {
      if (*(double *)v6 != v7) {
        return result;
      }
      unint64_t v8 = *(void *)(a2 - 16);
      if (*(void *)(result + 24 * v5 + 8) <= v8) {
        return result;
      }
    }
    else
    {
      unint64_t v8 = *(void *)(a2 - 16);
    }
    uint64_t v9 = *(void *)(a2 - 8);
    long long v10 = *v6;
    *(void *)(a2 - 8) = *((void *)v6 + 2);
    *(_OWORD *)(a2 - 24) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v12 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        double v11 = (long long *)(result + 24 * v5);
        if (*(double *)v11 <= v7 && (*(double *)v11 != v7 || *(void *)(result + 24 * v5 + 8) <= v8)) {
          break;
        }
        long long v13 = *v11;
        *((void *)v6 + 2) = *((void *)v11 + 2);
        *long double v6 = v13;
        long double v6 = (long long *)(result + 24 * v5);
        if (v12 <= 1) {
          goto LABEL_12;
        }
      }
    }
    double v11 = v6;
LABEL_12:
    *(double *)double v11 = v7;
    *((void *)v11 + 1) = v8;
    *((void *)v11 + 2) = v9;
  }
  return result;
}

uint64_t sub_100053670(uint64_t result, uint64_t a2)
{
  unint64_t v2 = a2 - result;
  if (a2 - result >= 32)
  {
    unint64_t v3 = v2 >> 4;
    unint64_t v4 = (v2 >> 4) - 1;
    unint64_t v5 = (double *)(result + 16 * v4);
    double v6 = *v5;
    uint64_t v7 = *((void *)v5 + 1);
    char v8 = __clz(v3);
    double v9 = *v5;
    unint64_t v10 = (v3 - 2) >> 1;
    double v11 = *(double *)(result + 16 * v10);
    if (v8)
    {
      if (v11 < *v5)
      {
        double *v5 = v11;
        *(void *)(result + 16 * v4 + 8) = *(void *)(result + 16 * v10 + 8);
        if (v4 >= 7)
        {
          while (1)
          {
            unint64_t v16 = v10 - 3;
            unint64_t v13 = (v10 - 3) >> 2;
            double v17 = *(double *)(result + 16 * v13);
            if (v17 >= v9) {
              break;
            }
            uint64_t v18 = result + 16 * v10;
            *(double *)uint64_t v18 = v17;
            *(void *)(v18 + 8) = *(void *)(result + 16 * v13 + 8);
            unint64_t v10 = v13;
            if (v16 <= 0xB) {
              goto LABEL_23;
            }
          }
        }
        goto LABEL_13;
      }
      if (v4 >= 3)
      {
        while (1)
        {
          unint64_t v22 = v4 - 3;
          unint64_t v13 = (v4 - 3) >> 2;
          double v23 = *(double *)(result + 16 * v13);
          if (v23 <= v9) {
            break;
          }
          uint64_t v24 = result + 16 * v4;
          *(double *)uint64_t v24 = v23;
          *(void *)(v24 + 8) = *(void *)(result + 16 * v13 + 8);
          unint64_t v4 = v13;
          if (v22 <= 0xB) {
            goto LABEL_23;
          }
        }
      }
    }
    else
    {
      if (v11 > *v5)
      {
        double *v5 = v11;
        *(void *)(result + 16 * v4 + 8) = *(void *)(result + 16 * v10 + 8);
        if (v4 >= 7)
        {
          while (1)
          {
            unint64_t v12 = v10 - 3;
            unint64_t v13 = (v10 - 3) >> 2;
            double v14 = *(double *)(result + 16 * v13);
            if (v14 <= v9) {
              break;
            }
            uint64_t v15 = result + 16 * v10;
            *(double *)uint64_t v15 = v14;
            *(void *)(v15 + 8) = *(void *)(result + 16 * v13 + 8);
            unint64_t v10 = v13;
            if (v12 <= 0xB) {
              goto LABEL_23;
            }
          }
        }
LABEL_13:
        unint64_t v13 = v10;
LABEL_23:
        double v25 = (double *)(result + 16 * v13);
        *double v25 = v6;
        *((void *)v25 + 1) = v7;
        return result;
      }
      if (v4 >= 3)
      {
        while (1)
        {
          unint64_t v19 = v4 - 3;
          unint64_t v13 = (v4 - 3) >> 2;
          double v20 = *(double *)(result + 16 * v13);
          if (v20 >= v9) {
            break;
          }
          uint64_t v21 = result + 16 * v4;
          *(double *)uint64_t v21 = v20;
          *(void *)(v21 + 8) = *(void *)(result + 16 * v13 + 8);
          unint64_t v4 = v13;
          if (v19 <= 0xB) {
            goto LABEL_23;
          }
        }
      }
    }
    unint64_t v13 = v4;
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_100053804(uint64_t result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 >= 7)
  {
    int64_t v6 = (unint64_t)(a3 - 3) >> 2;
    if (v6 <= a2)
    {
LABEL_19:
      if (a2 > (uint64_t)((unint64_t)(a3 - 2) >> 1)) {
        goto LABEL_34;
      }
      uint64_t v11 = (2 * a2) | 1;
      if ((unint64_t)a3 >= 3 && a2 <= (uint64_t)((unint64_t)(a3 - 3) >> 1))
      {
        uint64_t v17 = 2 * a2 + 2;
        if ((unint64_t)a3 >= 4 && a2 <= (uint64_t)((unint64_t)(a3 - 4) >> 2))
        {
          uint64_t v18 = (2 * v11) | 1;
          if ((unint64_t)a3 >= 5 && a2 <= (uint64_t)((unint64_t)(a3 - 5) >> 2))
          {
            uint64_t v24 = 2 * v11;
            double v25 = (double *)(result + 16 * v18);
            double v26 = v25[2];
            double v27 = *v25;
            uint64_t v11 = v24 + 2;
            if (v26 > v27) {
              uint64_t v11 = v18;
            }
            if ((unint64_t)a3 >= 6)
            {
              uint64_t v28 = v24 + 3;
              if (a2 <= (uint64_t)((unint64_t)(a3 - 6) >> 2)) {
                uint64_t v17 = v28;
              }
            }
          }
          else
          {
            uint64_t v11 = (2 * v11) | 1;
          }
        }
        if (*(double *)(result + 16 * v17) <= *(double *)(result + 16 * v11)) {
          uint64_t v11 = v17;
        }
      }
      double v19 = *(double *)(result + 16 * v11);
      if (*(double *)&a4 <= v19)
      {
LABEL_34:
        double v15 = *(double *)&a4;
        uint64_t v11 = a2;
      }
      else
      {
        uint64_t v20 = result + 16 * a2;
        *(double *)uint64_t v20 = v19;
        *(void *)(v20 + 8) = *(void *)(result + 16 * v11 + 8);
        if (v11 < 3
          || a2 > (uint64_t)((unint64_t)(v11 - 3) >> 2)
          || (uint64_t v21 = result + 16 * ((unint64_t)(v11 - 1) >> 1),
              double v15 = *(double *)v21,
              *(double *)&a4 <= *(double *)v21))
        {
          double v15 = *(double *)&a4;
        }
        else
        {
          *(double *)uint64_t v21 = *(double *)&a4;
          uint64_t v22 = *(void *)(v21 + 8);
          *(void *)(v21 + 8) = a5;
          a5 = v22;
        }
      }
      goto LABEL_36;
    }
    while (1)
    {
      uint64_t v7 = (4 * a2) | 3;
      char v8 = (double *)(result + 16 * v7);
      if (v8[2] > *v8) {
        uint64_t v9 = (4 * a2) | 3;
      }
      else {
        uint64_t v9 = v7 + 1;
      }
      if (v8[6] <= v8[4]) {
        uint64_t v10 = 3;
      }
      else {
        uint64_t v10 = 2;
      }
      uint64_t v11 = v10 + v7;
      if (*(double *)(result + 16 * v11) > *(double *)(result + 16 * v9)) {
        uint64_t v11 = v9;
      }
      double v12 = *(double *)(result + 16 * v11);
      if (*(double *)&a4 <= v12) {
        break;
      }
      uint64_t v13 = result + 16 * a2;
      *(double *)uint64_t v13 = v12;
      *(void *)(v13 + 8) = *(void *)(result + 16 * v11 + 8);
      double v14 = (double *)(result + 16 * ((v11 - 1) >> 1));
      double v15 = *v14;
      if (*(double *)&a4 <= *v14)
      {
        double v15 = *(double *)&a4;
      }
      else
      {
        *double v14 = *(double *)&a4;
        uint64_t v16 = *((void *)v14 + 1);
        *((void *)v14 + 1) = a5;
        a5 = v16;
        *(double *)&a4 = v15;
      }
      a2 = v11;
      if (v11 >= v6) {
        goto LABEL_18;
      }
    }
  }
  double v15 = *(double *)&a4;
  uint64_t v11 = a2;
LABEL_18:
  a2 = v11;
  *(double *)&a4 = v15;
  if (a3 >= 2) {
    goto LABEL_19;
  }
LABEL_36:
  double v23 = (double *)(result + 16 * v11);
  *double v23 = v15;
  *((void *)v23 + 1) = a5;
  return result;
}

uint64_t sub_100053A10(uint64_t result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 >= 7)
  {
    int64_t v6 = (unint64_t)(a3 - 3) >> 2;
    if (v6 <= a2)
    {
LABEL_19:
      if (a2 > (uint64_t)((unint64_t)(a3 - 2) >> 1)) {
        goto LABEL_34;
      }
      uint64_t v11 = (2 * a2) | 1;
      if ((unint64_t)a3 >= 3 && a2 <= (uint64_t)((unint64_t)(a3 - 3) >> 1))
      {
        uint64_t v17 = 2 * a2 + 2;
        if ((unint64_t)a3 >= 4 && a2 <= (uint64_t)((unint64_t)(a3 - 4) >> 2))
        {
          uint64_t v18 = (2 * v11) | 1;
          if ((unint64_t)a3 >= 5 && a2 <= (uint64_t)((unint64_t)(a3 - 5) >> 2))
          {
            uint64_t v24 = 2 * v11;
            double v25 = (double *)(result + 16 * v18);
            double v26 = *v25;
            double v27 = v25[2];
            uint64_t v11 = v24 + 2;
            if (v26 > v27) {
              uint64_t v11 = v18;
            }
            if ((unint64_t)a3 >= 6)
            {
              uint64_t v28 = v24 + 3;
              if (a2 <= (uint64_t)((unint64_t)(a3 - 6) >> 2)) {
                uint64_t v17 = v28;
              }
            }
          }
          else
          {
            uint64_t v11 = (2 * v11) | 1;
          }
        }
        if (*(double *)(result + 16 * v11) <= *(double *)(result + 16 * v17)) {
          uint64_t v11 = v17;
        }
      }
      double v19 = *(double *)(result + 16 * v11);
      if (v19 <= *(double *)&a4)
      {
LABEL_34:
        double v15 = *(double *)&a4;
        uint64_t v11 = a2;
      }
      else
      {
        uint64_t v20 = result + 16 * a2;
        *(double *)uint64_t v20 = v19;
        *(void *)(v20 + 8) = *(void *)(result + 16 * v11 + 8);
        if (v11 < 3
          || a2 > (uint64_t)((unint64_t)(v11 - 3) >> 2)
          || (uint64_t v21 = result + 16 * ((unint64_t)(v11 - 1) >> 1),
              double v15 = *(double *)v21,
              *(double *)v21 <= *(double *)&a4))
        {
          double v15 = *(double *)&a4;
        }
        else
        {
          *(double *)uint64_t v21 = *(double *)&a4;
          uint64_t v22 = *(void *)(v21 + 8);
          *(void *)(v21 + 8) = a5;
          a5 = v22;
        }
      }
      goto LABEL_36;
    }
    while (1)
    {
      uint64_t v7 = (4 * a2) | 3;
      char v8 = (double *)(result + 16 * v7);
      if (*v8 > v8[2]) {
        uint64_t v9 = (4 * a2) | 3;
      }
      else {
        uint64_t v9 = v7 + 1;
      }
      if (v8[4] <= v8[6]) {
        uint64_t v10 = 3;
      }
      else {
        uint64_t v10 = 2;
      }
      uint64_t v11 = v10 + v7;
      if (*(double *)(result + 16 * v9) > *(double *)(result + 16 * v11)) {
        uint64_t v11 = v9;
      }
      double v12 = *(double *)(result + 16 * v11);
      if (v12 <= *(double *)&a4) {
        break;
      }
      uint64_t v13 = result + 16 * a2;
      *(double *)uint64_t v13 = v12;
      *(void *)(v13 + 8) = *(void *)(result + 16 * v11 + 8);
      double v14 = (double *)(result + 16 * ((v11 - 1) >> 1));
      double v15 = *v14;
      if (*v14 <= *(double *)&a4)
      {
        double v15 = *(double *)&a4;
      }
      else
      {
        *double v14 = *(double *)&a4;
        uint64_t v16 = *((void *)v14 + 1);
        *((void *)v14 + 1) = a5;
        a5 = v16;
        *(double *)&a4 = v15;
      }
      a2 = v11;
      if (v11 >= v6) {
        goto LABEL_18;
      }
    }
  }
  double v15 = *(double *)&a4;
  uint64_t v11 = a2;
LABEL_18:
  a2 = v11;
  *(double *)&a4 = v15;
  if (a3 >= 2) {
    goto LABEL_19;
  }
LABEL_36:
  double v23 = (double *)(result + 16 * v11);
  *double v23 = v15;
  *((void *)v23 + 1) = a5;
  return result;
}

void *sub_100053C1C(uint64_t a1)
{
  double result = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 - (uint64_t)result >= 32)
  {
    uint64_t v4 = *(void *)(v3 - 16);
    uint64_t v5 = *(void *)(v3 - 8);
    *(void *)(v3 - 16) = *result;
    *(void *)(v3 - 8) = result[1];
    double result = (void *)sub_100053804((uint64_t)result, 0, ((unint64_t)(v3 - (void)result) >> 4) - 1, v4, v5);
    uint64_t v3 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v3 - 16;
  return result;
}

__n128 sub_100053C80(__n128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    int64_t v6 = a1;
    uint64_t v7 = v3 + 1;
    a1 = (__n128 *)((char *)a1 + 24 * v3 + 24);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      double v10 = a1[1].n128_f64[1];
      if (a1->n128_f64[0] > v10 || a1->n128_f64[0] == v10 && v6->n128_u64[3 * v7 + 1] > a1[2].n128_u64[0])
      {
        a1 = (__n128 *)((char *)a1 + 24);
        uint64_t v3 = v9;
      }
    }
    __n128 result = *a1;
    v6[1].n128_u64[0] = a1[1].n128_u64[0];
    *int64_t v6 = result;
  }
  while (v3 <= v5);
  return result;
}

void sub_100053D10()
{
}

void sub_100053D68()
{
}

uint64_t sub_100053D8C(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_1003A28E8;
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 40) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_100054048((void *)(a1 + 48), *((const void **)a2 + 5), *((void *)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_100054118((char *)(a1 + 80), *((long long **)a2 + 9), *((long long **)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 4);
  *(_OWORD *)(a1 + 112) = *(long long *)((char *)a2 + 104);
  return a1;
}

void sub_100053E40(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100053E5C(void *a1)
{
  *a1 = off_1003A28E8;
  unint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100053EBC(void *a1)
{
  *a1 = off_1003A28E8;
  unint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }

  operator delete();
}

void sub_100053F3C()
{
}

void sub_100053F84()
{
}

BOOL sub_100053FA8(uint64_t a1)
{
  return *(void *)(a1 + 120) == 0;
}

uint64_t sub_100053FB8(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

void *sub_100053FC0(uint64_t a1)
{
  return sub_10004F564((void *)(a1 + 8));
}

BOOL sub_100053FC8(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    sub_1000548B4();
  }
  return *(void *)(a1 + 112) == v3[14];
}

void *sub_100054048(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int64_t v6 = result;
    __n128 result = sub_1000540C4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000540A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1000540C4(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_10000EE98();
  }
  __n128 result = (char *)sub_100053560((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

char *sub_100054118(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    int64_t v6 = result;
    __n128 result = sub_100046634(result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_100054170(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005418C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator->", "scoped_ptr.hpp", 105, "px != 0");
  }
  return result;
}

uint64_t sub_1000541D0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result) {
    __assert_rtn("operator*", "scoped_ptr.hpp", 99, "px != 0");
  }
  return result;
}

void sub_100054214(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (_DWORD *)a2[2];
    if (v3)
    {
      v4[0] = a2[2];
      v4[1] = (uint64_t)a2;
      sub_10004C590(v3, v4);
      a2[2] = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    operator delete();
  }
}

uint64_t sub_100054278(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_1000542B0()
{
  __assert_rtn("operator()", "insert.hpp", 622, "(base::m_level == base::m_traverse_data.current_level || base::m_level == (std::numeric_limits<size_t>::max)())&&(\"unexpected level\")");
}

void sub_1000542DC()
{
  __assert_rtn("operator()", "insert.hpp", 620, "(base::m_traverse_data.current_level == base::m_leafs_level)&&(\"unexpected level\")");
}

void sub_100054308()
{
  __assert_rtn("check_capacity", "varray.hpp", 79, "(s <= v.capacity())&&(\"size too big\")");
}

void sub_100054334()
{
  __assert_rtn("post_traverse", "insert.hpp", 367, "(m_traverse_data.current_is_root() || &n == &rtree::get<Node>(*m_traverse_data.current_element().second))&&(\"if node isn't the root current_child_index should be valid\")");
}

void sub_100054360()
{
}

void sub_10005438C()
{
}

void sub_1000543B8()
{
  __assert_rtn("split", "insert.hpp", 407, "(additional_nodes.size() == 1)&&(\"unexpected number of additional nodes\")");
}

void sub_1000543E4()
{
}

void sub_100054410()
{
  __assert_rtn("apply", "redistribute_elements.hpp", 201, "(elements.size() == elements_count)&&(\"unexpected number of elements\")");
}

void sub_10005443C()
{
  __assert_rtn("apply", "redistribute_elements.hpp", 360, "(elements1.size() == elements1_count)&&(\"unexpected number of elements\")");
}

void sub_100054468()
{
}

void sub_100054494()
{
}

void sub_1000544C0()
{
}

void sub_1000544EC()
{
}

void sub_100054518()
{
}

void sub_100054544()
{
  __assert_rtn("operator()", "destroy.hpp", 62, "(&l == &rtree::get<leaf>(*m_current_node))&&(\"invalid pointers\")");
}

void sub_100054570()
{
  __assert_rtn("operator()", "destroy.hpp", 41, "(&n == &rtree::get<internal_node>(*m_current_node))&&(\"invalid pointers\")");
}

void sub_10005459C()
{
}

void sub_1000545C8()
{
}

void sub_1000545F4()
{
}

void sub_100054620()
{
}

void sub_10005464C()
{
}

void sub_100054678()
{
}

void sub_1000546A4()
{
}

void sub_1000546D0()
{
}

void sub_1000546FC()
{
}

void sub_100054728()
{
}

void sub_100054754()
{
}

void sub_100054780()
{
  __assert_rtn("apply", "redistribute_elements.hpp", 114, "(elements.size() == elements_count)&&(\"unexpected number of elements\")");
}

void sub_1000547AC()
{
  __assert_rtn("increment", "distance_query.hpp", 454, "(m_neighbors_count + m_neighbors.size() <= max_count())&&(\"unexpected neighbors count\")");
}

void sub_1000547D8()
{
  __assert_rtn("apply", "distance_cross_track_point_box.hpp", 138, "lon_midway >= -pi && lon_midway <= pi");
}

void sub_100054804()
{
  __assert_rtn("apply", "distance_cross_track_point_box.hpp", 168, "lon_midway >= -pi && lon_midway <= pi");
}

void sub_100054830()
{
  __assert_rtn("apply", "distance_cross_track_point_box.hpp", 117, "plat >= lat_min && plat <= lat_max");
}

void sub_10005485C()
{
  __assert_rtn("apply", "thomas_direct.hpp", 85, "-pi <= azimuth12 && azimuth12 <= pi");
}

void sub_100054888()
{
  __assert_rtn("apply", "differential_quantities.hpp", 77, "(-math::pi<CT>() <= azimuth && azimuth <= math::pi<CT>())");
}

void sub_1000548B4()
{
}

void CLKappaDeescalatorWaterProxy::CLKappaDeescalatorWaterProxy(CLKappaDeescalatorWaterProxy *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  unint64_t v2 = (char *)sub_100007BC0((void *)this + 6, "none");
  *(void *)this = &off_1003A2958;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 96) = 0;
  *((_DWORD *)this + 25) = 0;
  *((_WORD *)this + 52) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((void *)this + 7) = 5;
    unint64_t v2 = (char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 71) = 5;
  }
  strcpy(v2, "de-WP");
}

uint64_t CLKappaDeescalatorWaterProxy::assertReady(CLKappaDeescalatorWaterProxy *this, uint64_t a2, const char *a3)
{
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 96), (BOOL)"[de-WP] missing config", a3);
}

uint64_t CLKappaDeescalatorWaterProxy::setConfig(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 96);
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)(result + 72) = *(_OWORD *)a2;
  *(void *)(result + 88) = v3;
  if (!v2) {
    *(unsigned char *)(result + 96) = 1;
  }
  return result;
}

void CLKappaDeescalatorWaterProxy::resetConfiguration(CLKappaDeescalatorWaterProxy *this)
{
  id v13 = +[CSPersistentConfiguration configBaseKey:"DeescalatorWPConfig" forFeatureMode:*((unsigned __int8 *)this + 32)];
  int v2 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned __int8 v3 = [v2 BOOLThreshold:&CLKappaDeescalatorWaterProxy::kConfigurationDefaults forKey:v13];
  [v2 floatThreshold:&unk_10033A42C forKey:v13];
  int v5 = v4;
  [v2 floatThreshold:&unk_10033A43C forKey:v13];
  int v7 = v6;
  unsigned __int8 v8 = [v2 BOOLThreshold:&unk_10033A44C forKey:v13];
  unsigned __int8 v9 = [v2 BOOLThreshold:&unk_10033A45C forKey:v13];
  unsigned int v10 = [v2 intThreshold:&unk_10033A46C forKey:v13];
  [v2 floatThreshold:&unk_10033A47C forKey:v13];
  int v11 = *((unsigned __int8 *)this + 96);
  *((unsigned char *)this + 72) = v3;
  *((_DWORD *)this + 19) = v5;
  *((_DWORD *)this + 20) = v7;
  *((unsigned char *)this + 84) = v8;
  *((unsigned char *)this + 85) = v9;
  *((_DWORD *)this + 22) = v10;
  *((_DWORD *)this + 23) = v12;
  if (!v11) {
    *((unsigned char *)this + 96) = 1;
  }
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceWaterProxy");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceWaterProxy");
}

void sub_100054B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLKappaDeescalatorWaterProxy::log(CLKappaDeescalatorWaterProxy *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 96)) {
    sub_100007D1C();
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
  }
  int v4 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((_DWORD *)this + 6);
    int v7 = *((unsigned __int8 *)this + 32);
    int v8 = *((unsigned __int8 *)this + 72);
    double v9 = *((float *)this + 19);
    double v10 = *((float *)this + 20);
    int v11 = *((unsigned __int8 *)this + 84);
    int v12 = *((unsigned __int8 *)this + 85);
    int v13 = *((_DWORD *)this + 22);
    double v14 = *((float *)this + 23);
    int v15 = 134351360;
    uint64_t v16 = a2;
    __int16 v17 = 1026;
    int v18 = v6;
    __int16 v19 = 1026;
    int v20 = v7;
    __int16 v21 = 1026;
    int v22 = v8;
    __int16 v23 = 2050;
    double v24 = v9;
    __int16 v25 = 2050;
    double v26 = v10;
    __int16 v27 = 1026;
    int v28 = v11;
    __int16 v29 = 1026;
    int v30 = v12;
    __int16 v31 = 1026;
    int v32 = v13;
    __int16 v33 = 2050;
    double v34 = v14;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[de-WP] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,config-1,%{public}u,config-2,%{public}f,config-3,%{public}f,config-4,%{public}u,config-5,%{public}u,config-6,%{public}d,config-7,%{public}f", (uint8_t *)&v15, 0x4Eu);
  }
  return result;
}

id sub_100054CD0()
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
  }
  int v0 = (void *)qword_1003DB6A8;

  return v0;
}

void CLKappaDeescalatorWaterProxy::updateWithCurrentLocation(CLKappaDeescalatorWaterProxy *this, const CSSPUGps_Struct *a2)
{
  int demNumContiguousFlatPoints = a2->demNumContiguousFlatPoints;
  if (demNumContiguousFlatPoints < 0)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
    }
    int v6 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      int v7 = a2->demNumContiguousFlatPoints;
      int v16 = 67109120;
      LODWORD(v17) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[de-WP] rejecting DEM error = %d", (uint8_t *)&v16, 8u);
    }
  }
  else if (!*((unsigned char *)this + 105))
  {
    if (!*((unsigned char *)this + 96)) {
      sub_100007D1C();
    }
    if (a2->horizontalAccuracy < *((float *)this + 19))
    {
      if (demNumContiguousFlatPoints <= *((_DWORD *)this + 22) || a2->demConfidence <= *((float *)this + 23)) {
        __int16 v5 = 256;
      }
      else {
        __int16 v5 = 257;
      }
      *((_WORD *)this + 52) = v5;
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
      }
      int v8 = (id)qword_1003DB6A8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        if (!*((unsigned char *)this + 96) || !*((unsigned char *)this + 105)) {
          sub_100007D1C();
        }
        horizontalAccuracfloat y = a2->horizontalAccuracy;
        double demConfidence = a2->demConfidence;
        int v11 = *((_DWORD *)this + 22);
        int v12 = a2->demNumContiguousFlatPoints;
        double v13 = *((float *)this + 19);
        double v14 = *((float *)this + 23);
        int v15 = *((unsigned __int8 *)this + 104);
        int v16 = 134219520;
        double v17 = horizontalAccuracy;
        __int16 v18 = 2048;
        double v19 = v13;
        __int16 v20 = 1024;
        int v21 = v12;
        __int16 v22 = 1024;
        int v23 = v11;
        __int16 v24 = 2048;
        double v25 = demConfidence;
        __int16 v26 = 2048;
        double v27 = v14;
        __int16 v28 = 1024;
        int v29 = v15;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[de-WP] gps %f/%f flat %d/%d conf %f/%f %df", (uint8_t *)&v16, 0x3Cu);
      }
    }
  }
}

void sub_100054F50(_Unwind_Exception *exception_object)
{
}

void CLKappaDeescalatorWaterProxy::updateWithRoadInfo(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 96))
  {
    if (*(unsigned char *)(a1 + 101))
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
      }
      uint64_t v9 = qword_1003DB6A8;
      if (!os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO)) {
        return;
      }
      LOWORD(v14) = 0;
      __int16 v5 = "[de-WP] road info determined, exiting";
      goto LABEL_11;
    }
    if (*(_WORD *)(a2 + 24))
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (*(double *)(a2 + 8) <= *(float *)(a1 + 80))
        {
          if (qword_1003DB6A0 != -1) {
            dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
          }
          double v13 = qword_1003DB6A8;
          if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
          {
            LOWORD(v14) = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[de-WP] roads nearby", (uint8_t *)&v14, 2u);
          }
          __int16 v12 = 257;
          goto LABEL_33;
        }
        if (qword_1003DB6A0 != -1) {
          dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
        }
        double v10 = qword_1003DB6A8;
        if (!os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
        {
LABEL_27:
          __int16 v12 = 256;
LABEL_33:
          *(_WORD *)(a1 + 100) = v12;
          return;
        }
        LOWORD(v14) = 0;
        int v11 = "[de-WP] no roads nearby";
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v14, 2u);
        goto LABEL_27;
      }
    }
    else if (*(unsigned char *)(a1 + 96))
    {
      if (!*(unsigned char *)(a1 + 85))
      {
        if (qword_1003DB6A0 != -1) {
          dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
        }
        uint64_t v9 = qword_1003DB6A8;
        if (!os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO)) {
          return;
        }
        LOWORD(v14) = 0;
        __int16 v5 = "[de-WP] no road info, ambiguous";
LABEL_11:
        int v6 = v9;
        uint32_t v7 = 2;
        goto LABEL_12;
      }
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
      }
      double v10 = qword_1003DB6A8;
      if (!os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO)) {
        goto LABEL_27;
      }
      LOWORD(v14) = 0;
      int v11 = "[de-WP] empty road list, not near road";
      goto LABEL_26;
    }
    sub_100007D1C();
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
  }
  uint64_t v3 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a2 + 96);
    int v14 = 134217984;
    uint64_t v15 = v4;
    __int16 v5 = "[de-WP] rejecting road info with error = %ld";
    int v6 = v3;
    uint32_t v7 = 12;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v14, v7);
  }
}

void CLKappaDeescalatorWaterProxy::updateWithTrigger(CLKappaDeescalatorWaterProxy *this, const TriggerSample *a2)
{
  if (a2->btHint == 1)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
    }
    uint64_t v3 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[de-WP] btHint is set", v4, 2u);
    }
    *((_WORD *)this + 51) = 257;
  }
}

uint64_t CLKappaDeescalatorWaterProxy::onEvaluateFollowingEscalation(CLKappaDeescalatorWaterProxy *this)
{
  if (!*((unsigned char *)this + 96)) {
    sub_100007D1C();
  }
  if (!*((unsigned char *)this + 72))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
    }
    uint64_t v1 = qword_1003DB6A8;
    uint64_t v2 = 1;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      __int16 v15 = 0;
      uint64_t v3 = "[de-WP] water proxy disabled";
      uint64_t v4 = (uint8_t *)&v15;
      goto LABEL_25;
    }
    return v2;
  }
  if (*((unsigned char *)this + 103) && *((unsigned char *)this + 102))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
    }
    uint64_t v1 = qword_1003DB6A8;
    uint64_t v2 = 1;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = 0;
      uint64_t v3 = "[de-WP] bt hint set, nothing to do";
      uint64_t v4 = (uint8_t *)&v14;
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, v3, v4, 2u);
      return v2;
    }
    return v2;
  }
  if (!*((unsigned char *)this + 105) || !*((unsigned char *)this + 104))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
    }
    uint64_t v1 = qword_1003DB6A8;
    uint64_t v2 = 1;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v3 = "[de-WP] dem condition not met";
      uint64_t v4 = buf;
      goto LABEL_25;
    }
    return v2;
  }
  if (!*((unsigned char *)this + 101))
  {
    if (*((unsigned char *)this + 84))
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
      }
      uint64_t v1 = qword_1003DB6A8;
      uint64_t v2 = 1;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
      {
        __int16 v12 = 0;
        uint64_t v3 = "[de-WP] no road information available, confirmation required";
        uint64_t v4 = (uint8_t *)&v12;
        goto LABEL_25;
      }
      return v2;
    }
    int v6 = sub_100054CD0();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v11 = 0;
      uint32_t v7 = "[de-WP] no road information available, de-escalating";
      int v8 = v11;
      goto LABEL_36;
    }
LABEL_37:

    return 4;
  }
  if (!*((unsigned char *)this + 100))
  {
    int v6 = sub_100054CD0();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      __int16 v9 = 0;
      uint32_t v7 = "[de-WP] no roads nearby, deescalate";
      int v8 = (uint8_t *)&v9;
LABEL_36:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, v7, v8, 2u);
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A29D8);
  }
  uint64_t v1 = qword_1003DB6A8;
  uint64_t v2 = 1;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
  {
    __int16 v10 = 0;
    uint64_t v3 = "[de-WP] roads nearby, done";
    uint64_t v4 = (uint8_t *)&v10;
    goto LABEL_25;
  }
  return v2;
}

void sub_1000555EC(void **a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

void sub_100055624(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_100055958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100055990(id a1)
{
  qword_1003DB758 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "CoreAnalytics");

  _objc_release_x1();
}

void KappaCompanionDeviceInfo::KappaCompanionDeviceInfo(KappaCompanionDeviceInfo *this)
{
  *(void *)this = off_1003A2A30;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
}

{
  *(void *)this = off_1003A2A30;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
}

void KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo(KappaCompanionDeviceInfo *this)
{
  *(void *)this = off_1003A2A30;
  uint64_t v4 = *((void *)this + 1);
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo(this);

  operator delete();
}

void KappaCompanionDeviceInfo::KappaCompanionDeviceInfo(KappaCompanionDeviceInfo *this, const KappaCompanionDeviceInfo *a2)
{
  *(void *)this = off_1003A2A30;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    int v2 = *((_DWORD *)a2 + 4);
    *((unsigned char *)this + 48) = 1;
    *((_DWORD *)this + 4) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v3 = *((unsigned char *)a2 + 48);
  if ((v3 & 8) != 0)
  {
    int v5 = *((_DWORD *)a2 + 7);
    *((unsigned char *)this + 48) |= 8u;
    *((_DWORD *)this + 7) = v5;
    char v3 = *((unsigned char *)a2 + 48);
    if ((v3 & 0x40) == 0)
    {
LABEL_7:
      if ((v3 & 0x10) == 0) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }
  }
  else if ((*((unsigned char *)a2 + 48) & 0x40) == 0)
  {
    goto LABEL_7;
  }
  int v6 = *((_DWORD *)a2 + 10);
  *((unsigned char *)this + 48) |= 0x40u;
  *((_DWORD *)this + 10) = v6;
  char v3 = *((unsigned char *)a2 + 48);
  if ((v3 & 0x10) == 0)
  {
LABEL_8:
    if ((v3 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v7 = *((_DWORD *)a2 + 8);
  *((unsigned char *)this + 48) |= 0x10u;
  *((_DWORD *)this + 8) = v7;
  char v3 = *((unsigned char *)a2 + 48);
  if ((v3 & 0x80) == 0)
  {
LABEL_9:
    if ((v3 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  int v8 = *((_DWORD *)a2 + 11);
  *((unsigned char *)this + 48) |= 0x80u;
  *((_DWORD *)this + 11) = v8;
  char v3 = *((unsigned char *)a2 + 48);
  if ((v3 & 4) == 0)
  {
LABEL_10:
    if ((v3 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v9 = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 48) |= 4u;
  *((_DWORD *)this + 6) = v9;
  char v3 = *((unsigned char *)a2 + 48);
  if ((v3 & 0x20) == 0)
  {
LABEL_11:
    if ((v3 & 2) == 0) {
      return;
    }
    goto LABEL_12;
  }
LABEL_19:
  int v10 = *((_DWORD *)a2 + 9);
  *((unsigned char *)this + 48) |= 0x20u;
  *((_DWORD *)this + 9) = v10;
  if ((*((unsigned char *)a2 + 48) & 2) == 0) {
    return;
  }
LABEL_12:
  int v4 = *((_DWORD *)a2 + 5);
  *((unsigned char *)this + 48) |= 2u;
  *((_DWORD *)this + 5) = v4;
}

uint64_t KappaCompanionDeviceInfo::operator=(uint64_t a1, const KappaCompanionDeviceInfo *a2)
{
  if ((const KappaCompanionDeviceInfo *)a1 != a2)
  {
    KappaCompanionDeviceInfo::KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)v9, a2);
    long long v3 = v12;
    long long v5 = *(_OWORD *)(a1 + 16);
    long long v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v3;
    int v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    int v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    long long v12 = v4;
    long long v11 = v5;
    KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)v9);
  }
  return a1;
}

uint64_t swap(uint64_t result, KappaCompanionDeviceInfo *a2)
{
  int v2 = *(_DWORD *)(result + 48);
  *(_DWORD *)(result + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  uint64_t v4 = *(void *)(result + 8);
  *(void *)(result + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 44);
  *(_DWORD *)(result + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  return result;
}

uint64_t KappaCompanionDeviceInfo::KappaCompanionDeviceInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A2A30;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v6 = *v4;
  uint64_t *v4 = v5;
  if (v6) {
    sub_100012E84((uint64_t)v4, v6);
  }
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t KappaCompanionDeviceInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    KappaCompanionDeviceInfo::KappaCompanionDeviceInfo((uint64_t)v9, a2);
    long long v3 = v12;
    long long v5 = *(_OWORD *)(a1 + 16);
    long long v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v3;
    int v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    int v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    long long v12 = v4;
    long long v11 = v5;
    KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)v9);
  }
  return a1;
}

uint64_t KappaCompanionDeviceInfo::formatText(KappaCompanionDeviceInfo *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 48)) {
    PB::TextFormatter::format(a2, "deviceHardware", *((_DWORD *)this + 4));
  }
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "enableMode", *((_DWORD *)this + 5));
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_17;
    }
  }
  else if ((*((unsigned char *)this + 48) & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "kappaArmedSeconds", *((_DWORD *)this + 6));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "kappaDeviceType", *((_DWORD *)this + 7));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "kappaTokenCount", *((_DWORD *)this + 8));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
LABEL_20:
    PB::TextFormatter::format(a2, "martyDeviceType", *((_DWORD *)this + 10));
    if ((*((unsigned char *)this + 48) & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "martyArmedSeconds", *((_DWORD *)this + 9));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x40) != 0) {
    goto LABEL_20;
  }
LABEL_11:
  if ((v5 & 0x80) == 0) {
    goto LABEL_12;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "martyTokenCount", *((_DWORD *)this + 11));
LABEL_12:

  return PB::TextFormatter::endObject(a2);
}

uint64_t KappaCompanionDeviceInfo::readFrom(KappaCompanionDeviceInfo *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 48) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_140;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_87:
            LODWORD(v25) = 0;
            goto LABEL_140;
          }
          char v85 = 0;
          unsigned int v86 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v87 = v20 + 1;
              char v88 = *(unsigned char *)(v22 + v20);
              *((void *)a2 + 1) = v87;
              v25 |= (unint64_t)(v88 & 0x7F) << v85;
              if (v88 < 0)
              {
                v85 += 7;
                unint64_t v20 = v87;
                BOOL v14 = v86++ > 8;
                if (v14) {
                  goto LABEL_87;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v25) = 0;
              }
            }
            break;
          }
LABEL_140:
          *((_DWORD *)this + 4) = v25;
          goto LABEL_169;
        case 2u:
          operator new();
        case 3u:
          *((unsigned char *)this + 48) |= 8u;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_144;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_94:
            LODWORD(v34) = 0;
            goto LABEL_144;
          }
          char v89 = 0;
          unsigned int v90 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v91 = v29 + 1;
              char v92 = *(unsigned char *)(v31 + v29);
              *((void *)a2 + 1) = v91;
              v34 |= (unint64_t)(v92 & 0x7F) << v89;
              if (v92 < 0)
              {
                v89 += 7;
                unint64_t v29 = v91;
                BOOL v14 = v90++ > 8;
                if (v14) {
                  goto LABEL_94;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_144:
          *((_DWORD *)this + 7) = v34;
          goto LABEL_169;
        case 4u:
          *((unsigned char *)this + 48) |= 0x40u;
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          uint64_t v39 = *(void *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)a2 + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_148;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_101:
            LODWORD(v42) = 0;
            goto LABEL_148;
          }
          char v93 = 0;
          unsigned int v94 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v95 = v37 + 1;
              char v96 = *(unsigned char *)(v39 + v37);
              *((void *)a2 + 1) = v95;
              v42 |= (unint64_t)(v96 & 0x7F) << v93;
              if (v96 < 0)
              {
                v93 += 7;
                unint64_t v37 = v95;
                BOOL v14 = v94++ > 8;
                if (v14) {
                  goto LABEL_101;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v42) = 0;
              }
            }
            break;
          }
LABEL_148:
          *((_DWORD *)this + 10) = v42;
          goto LABEL_169;
        case 5u:
          *((unsigned char *)this + 48) |= 0x10u;
          unint64_t v45 = *((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
          uint64_t v47 = *(void *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)a2 + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_152;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v14 = v49++ > 8;
            }
            while (!v14);
LABEL_108:
            LODWORD(v50) = 0;
            goto LABEL_152;
          }
          char v97 = 0;
          unsigned int v98 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v99 = v45 + 1;
              char v100 = *(unsigned char *)(v47 + v45);
              *((void *)a2 + 1) = v99;
              v50 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                unint64_t v45 = v99;
                BOOL v14 = v98++ > 8;
                if (v14) {
                  goto LABEL_108;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v50) = 0;
              }
            }
            break;
          }
LABEL_152:
          *((_DWORD *)this + 8) = v50;
          goto LABEL_169;
        case 6u:
          *((unsigned char *)this + 48) |= 0x80u;
          unint64_t v53 = *((void *)a2 + 1);
          unint64_t v54 = *((void *)a2 + 2);
          uint64_t v55 = *(void *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)a2 + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_156;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v14 = v57++ > 8;
            }
            while (!v14);
LABEL_115:
            LODWORD(v58) = 0;
            goto LABEL_156;
          }
          char v101 = 0;
          unsigned int v102 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v103 = v53 + 1;
              char v104 = *(unsigned char *)(v55 + v53);
              *((void *)a2 + 1) = v103;
              v58 |= (unint64_t)(v104 & 0x7F) << v101;
              if (v104 < 0)
              {
                v101 += 7;
                unint64_t v53 = v103;
                BOOL v14 = v102++ > 8;
                if (v14) {
                  goto LABEL_115;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v58) = 0;
              }
            }
            break;
          }
LABEL_156:
          *((_DWORD *)this + 11) = v58;
          goto LABEL_169;
        case 7u:
          *((unsigned char *)this + 48) |= 4u;
          unint64_t v61 = *((void *)a2 + 1);
          unint64_t v62 = *((void *)a2 + 2);
          uint64_t v63 = *(void *)a2;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)a2 + 1) = v61 + 1;
              char v68 = *(unsigned char *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_160;
              }
              v64 += 7;
              unint64_t v61 = v67;
              BOOL v14 = v65++ > 8;
            }
            while (!v14);
LABEL_122:
            LODWORD(v66) = 0;
            goto LABEL_160;
          }
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v66 = 0;
          if (v62 <= v61) {
            unint64_t v62 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v107 = v61 + 1;
              char v108 = *(unsigned char *)(v63 + v61);
              *((void *)a2 + 1) = v107;
              v66 |= (unint64_t)(v108 & 0x7F) << v105;
              if (v108 < 0)
              {
                v105 += 7;
                unint64_t v61 = v107;
                BOOL v14 = v106++ > 8;
                if (v14) {
                  goto LABEL_122;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v66) = 0;
              }
            }
            break;
          }
LABEL_160:
          *((_DWORD *)this + 6) = v66;
          goto LABEL_169;
        case 8u:
          *((unsigned char *)this + 48) |= 0x20u;
          unint64_t v69 = *((void *)a2 + 1);
          unint64_t v70 = *((void *)a2 + 2);
          uint64_t v71 = *(void *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)a2 + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_164;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_129:
            LODWORD(v74) = 0;
            goto LABEL_164;
          }
          char v109 = 0;
          unsigned int v110 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v111 = v69 + 1;
              char v112 = *(unsigned char *)(v71 + v69);
              *((void *)a2 + 1) = v111;
              v74 |= (unint64_t)(v112 & 0x7F) << v109;
              if (v112 < 0)
              {
                v109 += 7;
                unint64_t v69 = v111;
                BOOL v14 = v110++ > 8;
                if (v14) {
                  goto LABEL_129;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_164:
          *((_DWORD *)this + 9) = v74;
          goto LABEL_169;
        case 9u:
          *((unsigned char *)this + 48) |= 2u;
          unint64_t v77 = *((void *)a2 + 1);
          unint64_t v78 = *((void *)a2 + 2);
          uint64_t v79 = *(void *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)a2 + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_168;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }
            while (!v14);
LABEL_136:
            LODWORD(v82) = 0;
            goto LABEL_168;
          }
          char v113 = 0;
          unsigned int v114 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)a2 + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_169;
      }
      while (1)
      {
        if (v78 == v77)
        {
          LODWORD(v82) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_168;
        }
        unint64_t v115 = v77 + 1;
        char v116 = *(unsigned char *)(v79 + v77);
        *((void *)a2 + 1) = v115;
        v82 |= (unint64_t)(v116 & 0x7F) << v113;
        if ((v116 & 0x80) == 0) {
          break;
        }
        v113 += 7;
        unint64_t v77 = v115;
        BOOL v14 = v114++ > 8;
        if (v14) {
          goto LABEL_136;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v82) = 0;
      }
LABEL_168:
      *((_DWORD *)this + 5) = v82;
LABEL_169:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t KappaCompanionDeviceInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 48)) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 16), 1u);
  }
  if (*(void *)(v3 + 8)) {
    this = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 3u);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 0x40) == 0)
    {
LABEL_7:
      if ((v4 & 0x10) == 0) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
  }
  else if ((*(unsigned char *)(v3 + 48) & 0x40) == 0)
  {
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 4u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 5u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 6u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_18:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 8u);
    if ((*(unsigned char *)(v3 + 48) & 2) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 7u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x20) != 0) {
    goto LABEL_18;
  }
LABEL_11:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_19:
  int v5 = *(_DWORD *)(v3 + 20);

  return PB::Writer::writeVarInt(a2, v5, 9u);
}

BOOL KappaCompanionDeviceInfo::operator==(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 48);
  int v5 = *(unsigned __int8 *)(a2 + 48);
  if (v4)
  {
    if ((v5 & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  int v6 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 8);
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    uint64_t v8 = v6[23];
    if ((v8 & 0x80u) == 0) {
      char v9 = (unsigned __int8 *)v6[23];
    }
    else {
      char v9 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    unsigned int v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      unsigned int v10 = v7[1];
    }
    if (v9 != v10) {
      return 0;
    }
    if (v11 >= 0) {
      unint64_t v12 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      unint64_t v12 = *v7;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((void *)v6 + 1))) {
        return 0;
      }
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8) {
          goto LABEL_23;
        }
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v4 & v5 & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if (((v4 | v5) & 0x80) != 0)
  {
    return 0;
  }
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  BOOL result = (v5 & 2) == 0;
  if ((v4 & 2) == 0) {
    return result;
  }
  return (v5 & 2) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

unint64_t KappaCompanionDeviceInfo::hash_value(KappaCompanionDeviceInfo *this)
{
  char v2 = *((unsigned char *)this + 48);
  if (v2) {
    uint64_t v3 = *((int *)this + 4);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    unint64_t v5 = sub_100012EE0((uint64_t)&v14, v4);
    char v2 = *((unsigned char *)this + 48);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v5 = 0;
    if ((v2 & 8) == 0)
    {
LABEL_6:
      uint64_t v6 = 0;
      if ((v2 & 0x40) != 0) {
        goto LABEL_7;
      }
      goto LABEL_15;
    }
  }
  uint64_t v6 = *((int *)this + 7);
  if ((v2 & 0x40) != 0)
  {
LABEL_7:
    uint64_t v7 = *((int *)this + 10);
    if ((v2 & 0x10) != 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v7 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_8:
    uint64_t v8 = *((int *)this + 8);
    if (v2 < 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v8 = 0;
  if (v2 < 0)
  {
LABEL_9:
    uint64_t v9 = *((int *)this + 11);
    if ((v2 & 4) != 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v9 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_10:
    uint64_t v10 = *((int *)this + 6);
    if ((v2 & 0x20) != 0) {
      goto LABEL_11;
    }
LABEL_19:
    uint64_t v11 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_12;
    }
LABEL_20:
    uint64_t v12 = 0;
    return v5 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12;
  }
LABEL_18:
  uint64_t v10 = 0;
  if ((v2 & 0x20) == 0) {
    goto LABEL_19;
  }
LABEL_11:
  uint64_t v11 = *((int *)this + 9);
  if ((v2 & 2) == 0) {
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v12 = *((int *)this + 5);
  return v5 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12;
}

void sub_100056DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100056E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000570B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100057214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000572D4(id a1)
{
  qword_1003DB6B8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "AOP");

  _objc_release_x1();
}

void CLKappaAlgBlock::CLKappaAlgBlock(CLKappaAlgBlock *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 152)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[4];
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_WORD *)this + 12) = 1;
}

void CLKappaAlgBlock::~CLKappaAlgBlock(CLKappaAlgBlock *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 152)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[4];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    sub_10000BB9C(v3);
  }
}

BOOL CLKappaAlgBlock::isActiveFeatures(CLKappaAlgBlock *this, unint64_t a2, unint64_t a3)
{
  return (float)((float)a3 + 15000000.0) > (float)a2 || a3 == 0;
}

BOOL CLKappaAlgBlock::isActiveEstimates(CLKappaAlgBlock *this, unint64_t a2, unint64_t a3)
{
  return (float)((float)a3 + 15000000.0) > (float)a2 || a3 == 0;
}

BOOL CLKappaAlgBlock::isActiveInferences(CLKappaAlgBlock *this, unint64_t a2, unint64_t a3)
{
  return (float)((float)a3 + 615000000.0) > (float)a2 && a3 != 0;
}

void CLKappaFeaturesAlgSpinResult::reset(CLKappaFeaturesAlgSpinResult *this)
{
  uint64_t v3 = (void *)((char *)this + 104);
  uint64_t v2 = (void *)*((void *)this + 13);
  *((unsigned char *)v3 - 96) = 0;
  *((_DWORD *)v3 - 23) = 0;
  *(v3 - 10) = 0;
  *((unsigned char *)v3 - 72) = 0;
  *((_DWORD *)v3 - 17) = 2143289344;
  *((unsigned char *)v3 - 64) = 0;
  *(v3 - 7) = 0;
  *(v3 - 6) = 0;
  *(v3 - 5) = 2143289344;
  *((_DWORD *)v3 - 8) = 0;
  *(v3 - 3) = 0;
  *(v3 - 2) = 0;
  *(v3 - 1) = 0x7FC0000000000000;
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void *)*((void *)this + 16);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 19);
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  if (v5)
  {
    *((void *)this + 20) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 22);
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  if (v6)
  {
    *((void *)this + 23) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 25);
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  if (v7)
  {
    *((void *)this + 26) = v7;
    operator delete(v7);
  }
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
}

double CLKappaFeaturesAlgSpinResult::log(CLKappaFeaturesAlgSpinResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A3D30);
  }
  uint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((unsigned __int8 *)this + 32);
    uint64_t v5 = *((void *)this + 3);
    double v6 = *((float *)this + 9);
    int v7 = *((unsigned __int8 *)this + 40);
    uint64_t v8 = *((void *)this + 6);
    uint64_t v9 = *((void *)this + 7);
    double v10 = *((float *)this + 16);
    double v11 = *((float *)this + 17);
    double v12 = *((float *)this + 18);
    uint64_t v13 = *((void *)this + 10);
    uint64_t v14 = *((void *)this + 11);
    int v15 = *((_DWORD *)this + 24);
    double v16 = *((float *)this + 25);
    double v17 = *((float *)this + 4);
    double v18 = *((float *)this + 5);
    v19[0] = 67243776;
    v19[1] = v4;
    __int16 v20 = 2050;
    uint64_t v21 = v5;
    __int16 v22 = 2050;
    double v23 = v6;
    __int16 v24 = 1026;
    int v25 = v7;
    __int16 v26 = 2050;
    uint64_t v27 = v8;
    __int16 v28 = 2050;
    uint64_t v29 = v9;
    __int16 v30 = 2050;
    double v31 = v10;
    __int16 v32 = 2050;
    double v33 = v11;
    __int16 v34 = 2050;
    double v35 = v12;
    __int16 v36 = 2050;
    uint64_t v37 = v13;
    __int16 v38 = 2050;
    uint64_t v39 = v14;
    __int16 v40 = 1026;
    int v41 = v15;
    __int16 v42 = 2050;
    double v43 = v16;
    __int16 v44 = 2050;
    double v45 = v17;
    __int16 v46 = 2050;
    double v47 = v18;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Spin] summary,%{public}d,A,%{public}llu,B,%{public}f,C,%{public}d,D,%{public}llu,E,%{public}llu,F,%{public}f,G,%{public}f,H,%{public}f,debug-1,%{public}llu,debug-2,%{public}llu,debug-3,%{public}d,debug-4,%{public}f,config-1,%{public}f,config-2,%{public}f\n", (uint8_t *)v19, 0x8Cu);
  }
  return result;
}

void CLKappaFeaturesAlgSpin::CLKappaFeaturesAlgSpin(CLKappaFeaturesAlgSpin *this, uint64_t *a2)
{
  int v4 = (char *)this + 4516;
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v5 = *a2;
  *double v6 = *a2;
  *(void *)((char *)this + *(void *)(v5 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 18) = 200;
  *((unsigned char *)this + 76) = 1;
  *(void *)((char *)this + 92) = 0xA00000000;
  *((_DWORD *)this + 22) = 1031798784;
  *((unsigned char *)this + 140) = 1;
  *(void *)((char *)this + 156) = 0xA00000000;
  *((_DWORD *)this + 38) = 1031798784;
  *((unsigned char *)this + 204) = 1;
  *(void *)((char *)this + 220) = 0xA00000000;
  *((_DWORD *)this + 54) = 1031798784;
  *((void *)this + 34) = 0;
  *((_DWORD *)this + 70) = 200;
  *((unsigned char *)this + 284) = 1;
  *((_DWORD *)this + 76) = 200;
  *((void *)this + 37) = 1031798784;
  *((unsigned char *)this + 1108) = 1;
  *((_DWORD *)this + 282) = 200;
  *((void *)this + 140) = 1031798784;
  *((unsigned char *)this + 1932) = 1;
  *((_DWORD *)this + 488) = 200;
  *((void *)this + 243) = 1031798784;
  *((unsigned char *)this + 2760) = 0;
  *((void *)this + 350) = 0;
  *(_OWORD *)((char *)this + 2764) = 0u;
  *(_OWORD *)((char *)this + 2780) = 0u;
  *((_DWORD *)this + 702) = 200;
  *((unsigned char *)this + 2812) = 1;
  *((_DWORD *)this + 708) = 20;
  *((void *)this + 353) = 1031798784;
  *((unsigned char *)this + 2916) = 1;
  *((_DWORD *)this + 734) = 20;
  *((void *)this + 366) = 1031798784;
  *((unsigned char *)this + 3020) = 1;
  *((_DWORD *)this + 760) = 20;
  *((void *)this + 379) = 1031798784;
  *((void *)this + 391) = 0;
  *((_DWORD *)this + 784) = 200;
  *((unsigned char *)this + 3140) = 1;
  *((_DWORD *)this + 790) = 100;
  *((void *)this + 394) = 1031798784;
  *((unsigned char *)this + 3564) = 1;
  *((_DWORD *)this + 896) = 100;
  *((void *)this + 447) = 1031798784;
  *((unsigned char *)this + 3988) = 1;
  *((_DWORD *)this + 1002) = 100;
  *((void *)this + 500) = 1031798784;
  *((void *)this + 552) = off_1003A3D60;
  *((_DWORD *)this + 1106) = 99;
  *((_OWORD *)this + 279) = 0u;
  *((_OWORD *)this + 278) = 0u;
  *((_OWORD *)this + 277) = 0u;
  *((void *)this + 562) = 0;
  *((void *)this + 561) = 0;
  *((void *)this + 560) = (char *)this + 4488;
  char *v4 = 0;
  v4[12] = 0;
  uint8_t v4[16] = 0;
  *(_OWORD *)((char *)this + 4568) = 0u;
  *(_OWORD *)((char *)this + 4584) = 0u;
  *(_OWORD *)((char *)this + 4536) = 0u;
  *(_OWORD *)((char *)this + 4552) = 0u;
  sub_10005A5C4(&v14);
  int v7 = (std::__shared_weak_count *)*((void *)&v14 + 1);
  unint64_t v8 = v14;
  long long v14 = 0uLL;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = __PAIR128__((unint64_t)v7, v8);
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v14 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v14 + 1));
    }
    int v7 = (std::__shared_weak_count *)*((void *)this + 2);
  }
  uint64_t v12 = *((void *)this + 1);
  uint64_t v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100057D7C((uint64_t)&v12, &v14);
  long long v10 = v14;
  long long v14 = 0uLL;
  double v11 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v10;
  if (v11)
  {
    sub_10000BB9C(v11);
    if (*((void *)&v14 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  if (v13) {
    sub_10000BB9C(v13);
  }
  (*(void (**)(CLKappaFeaturesAlgSpin *))(*(void *)this + 312))(this);
}

void sub_100057D34(_Unwind_Exception *a1)
{
  sub_10005A51C((void *)v1 + 569);
  sub_100057E0C(v3);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v5) {
    sub_10000BB9C(v5);
  }
  double v6 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v6) {
    sub_10000BB9C(v6);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_100057D7C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t sub_100057E0C(uint64_t a1)
{
  *(void *)a1 = off_1003A3D60;
  sub_10005A4C8(a1 + 64, *(void **)(a1 + 72));
  sub_100010C84((void *)(a1 + 16));
  return a1;
}

void CLKappaFeaturesAlgSpin::CLKappaFeaturesAlgSpin(CLKappaFeaturesAlgSpin *this)
{
  uint64_t v2 = (char *)this + 4516;
  *(void *)this = off_100399F60;
  *((void *)this + 575) = off_10039A008;
  *((void *)this + 576) = off_10039A0D0;
  *((void *)this + 577) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003A3708);
  *(void *)uint64_t v3 = off_1003A31E8;
  *(void *)(v3 + 4600) = off_1003A3498;
  *(void *)(v3 + 4608) = off_1003A35D8;
  *(void *)(v3 + 4616) = off_1003A36B8;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(void *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 72) = 200;
  *(unsigned char *)(v3 + 76) = 1;
  *(void *)(v3 + 92) = 0xA00000000;
  *(_DWORD *)(v3 + 88) = 1031798784;
  *(unsigned char *)(v3 + 140) = 1;
  *(void *)(v3 + 156) = 0xA00000000;
  *(_DWORD *)(v3 + 152) = 1031798784;
  *(unsigned char *)(v3 + 204) = 1;
  *(void *)(v3 + 220) = 0xA00000000;
  *(_DWORD *)(v3 + 216) = 1031798784;
  *(void *)(v3 + 272) = 0;
  *(_DWORD *)(v3 + 280) = 200;
  *(unsigned char *)(v3 + 284) = 1;
  *(_DWORD *)(v3 + 304) = 200;
  *(void *)(v3 + 296) = 1031798784;
  *(unsigned char *)(v3 + 1108) = 1;
  *(_DWORD *)(v3 + 1128) = 200;
  *(void *)(v3 + 1120) = 1031798784;
  *(unsigned char *)(v3 + 1932) = 1;
  *(_DWORD *)(v3 + 1952) = 200;
  *(void *)(v3 + 1944) = 1031798784;
  *(unsigned char *)(v3 + 2760) = 0;
  *(void *)(v3 + 2800) = 0;
  *(_OWORD *)(v3 + 2764) = 0u;
  *(_OWORD *)(v3 + 2780) = 0u;
  *(_DWORD *)(v3 + 2808) = 200;
  *(unsigned char *)(v3 + 2812) = 1;
  *(_DWORD *)(v3 + 2832) = 20;
  *(void *)(v3 + 2824) = 1031798784;
  *(unsigned char *)(v3 + 2916) = 1;
  *(void *)(v3 + 2932) = 0x1400000000;
  *(_DWORD *)(v3 + 2928) = 1031798784;
  *(unsigned char *)(v3 + 3020) = 1;
  *(_DWORD *)(v3 + 3040) = 20;
  *(void *)(v3 + 3032) = 1031798784;
  *(void *)(v3 + 3128) = 0;
  *(_DWORD *)(v3 + 3136) = 200;
  *(unsigned char *)(v3 + 3140) = 1;
  *(_DWORD *)(v3 + 3160) = 100;
  *(void *)(v3 + 3152) = 1031798784;
  *(unsigned char *)(v3 + 3564) = 1;
  *(_DWORD *)(v3 + 3584) = 100;
  *(void *)(v3 + 3576) = 1031798784;
  *(unsigned char *)(v3 + 3988) = 1;
  *(_DWORD *)(v3 + 4008) = 100;
  *(void *)(v3 + 4000) = 1031798784;
  *(void *)(v3 + 4416) = off_1003A3D60;
  *(_DWORD *)(v3 + 4424) = 99;
  *(_OWORD *)(v3 + 4432) = 0u;
  *(_OWORD *)(v3 + 4448) = 0u;
  *(_OWORD *)(v3 + 4464) = 0u;
  *(void *)(v3 + 4488) = 0;
  *(void *)(v3 + 4496) = 0;
  *(void *)(v3 + 4480) = v3 + 4488;
  char *v2 = 0;
  v2[12] = 0;
  uint8_t v2[16] = 0;
  *(_OWORD *)(v3 + 4568) = 0u;
  *(_OWORD *)(v3 + 4584) = 0u;
  *(_OWORD *)(v3 + 4536) = 0u;
  *(_OWORD *)(v3 + 4552) = 0u;
  sub_10005A5C4(&v11);
  int v4 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  unint64_t v5 = v11;
  long long v11 = 0uLL;
  double v6 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = __PAIR128__((unint64_t)v4, v5);
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v11 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v11 + 1));
    }
    int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  }
  uint64_t v9 = *((void *)this + 1);
  long long v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100057D7C((uint64_t)&v9, &v11);
  long long v7 = v11;
  long long v11 = 0uLL;
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v7;
  if (v8)
  {
    sub_10000BB9C(v8);
    if (*((void *)&v11 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  if (v10) {
    sub_10000BB9C(v10);
  }
  (*(void (**)(CLKappaFeaturesAlgSpin *))(*(void *)this + 312))(this);
}

void sub_1000581AC(_Unwind_Exception *a1)
{
  sub_10005A51C((void *)v1 + 569);
  sub_100057E0C(v2);
  int v4 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v4) {
    sub_10000BB9C(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v5) {
    sub_10000BB9C(v5);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003A3708);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgSpin::resetConfiguration(CLKappaFeaturesAlgSpin *this)
{
  id v12 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgSpinConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 1138819072;
  LODWORD(v4) = 1.0;
  LODWORD(v5) = 10.0;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v12 withMinValue:v4 maxValue:v3 defaultValue:v5];
  *(_DWORD *)(*((void *)this + 4) + 16) = v6;

  long long v7 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v8) = 1167867904;
  LODWORD(v9) = 1133903872;
  LODWORD(v10) = 25.0;
  [v7 algorithmThresholdNumber:1 inArrayForKey:v12 withMinValue:v10 maxValue:v8 defaultValue:v9];
  *(_DWORD *)(*((void *)this + 4) + 20) = v11;
}

void sub_1000582D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CLKappaFeaturesAlgSpin::reset(CLKappaFeaturesAlgSpin *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

double CLKappaFeaturesAlgSpin::setConfig(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(a1 + 32) + 16) = *a2;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003A3D30);
  }
  double v3 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    double v6 = *(float *)(v5 + 16);
    double v7 = *(float *)(v5 + 20);
    int v8 = 134218240;
    double v9 = v6;
    __int16 v10 = 2048;
    double v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[Spin] config, %f, %f", (uint8_t *)&v8, 0x16u);
  }
  return result;
}

void CLKappaFeaturesAlgSpin::epochFinalize(CLKappaFeaturesAlgSpin *this, unint64_t a2)
{
  uint64_t v4 = *((void *)this + 4);
  *(void *)(v4 + 24) = 0;
  *(unsigned char *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 36) = 2143289344;
  *(unsigned char *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 2143289344;
  *(_DWORD *)(v4 + 72) = 0;
  *(void *)(*((void *)this + 4) + 24) = a2;
  id v5 = *(id *)(*((void *)this + 6) + 72);
  double v6 = (char *)[v5 count];
  if (v6)
  {
    double v7 = [v5 objectAtIndex:0];
    int v8 = [v5 objectAtIndex:v6 - 1];
    *(void *)(*((void *)this + 4) + 80) = [v7 timestamp];
    *(void *)(*((void *)this + 4) + 88) = [v8 timestamp];
    double v9 = [v5 objectAtIndex:0];
    unsigned int v10 = *(_DWORD *)[v9 c_struct];
    unsigned int v11 = *((_DWORD *)[v9 c_struct] + 1);
    unsigned int v12 = *((_DWORD *)[v9 c_struct] + 2);
    v13.i32[0] = *((_DWORD *)[v9 c_struct] + 3);
    v49.i64[0] = __PAIR64__(v11, v10);
    v49.i64[1] = __PAIR64__(v13.u32[0], v12);
    CMOQuaternion::normalize(&v49, v13);
    float v14 = CMOQuaternion::gravity((CMOQuaternion *)&v49);
    float v46 = v15;
    float v47 = v14;
    float v45 = v16;
    [v9 timestamp];
    double v17 = &xmmword_10033A000;
    if ((unint64_t)v6 < 2)
    {
      int v19 = 0;
      id v18 = 0;
      float v39 = 0.0;
      float v40 = 0.0;
    }
    else
    {
      double v43 = v7;
      id v18 = 0;
      int v19 = 0;
      float v44 = 0.0;
      uint64_t v20 = 1;
      float v21 = 0.0;
      float v23 = v46;
      float v22 = v47;
      float v24 = v45;
      do
      {
        int v25 = v18;
        id v18 = v9;

        double v9 = [v5 objectAtIndex:v20];

        unsigned int v26 = *(_DWORD *)[v9 c_struct];
        unsigned int v27 = *((_DWORD *)[v9 c_struct] + 1);
        unsigned int v28 = *((_DWORD *)[v9 c_struct] + 2);
        v29.i32[0] = *((_DWORD *)[v9 c_struct] + 3);
        v48.i64[0] = __PAIR64__(v27, v26);
        v48.i64[1] = __PAIR64__(v29.u32[0], v28);
        CMOQuaternion::normalize(&v48, v29);
        float32x4_t v49 = v48;
        float v30 = CMOQuaternion::gravity((CMOQuaternion *)&v49);
        float v32 = v31;
        float v34 = v33;
        float v35 = (float)((float)(v24 * v33) + (float)(v31 * v23)) + (float)(v30 * v22);
        if (v35 < -1.0) {
          float v35 = -1.0;
        }
        if (v35 > 1.0) {
          float v35 = 1.0;
        }
        float v36 = acosf(v35);
        float v37 = (float)((float)(v45 * v34) + (float)(v32 * v46)) + (float)(v30 * v47);
        if (v37 < -1.0) {
          float v37 = -1.0;
        }
        if (v37 > 1.0) {
          float v37 = 1.0;
        }
        float v38 = acosf(v37);
        if (v38 * 57.2957795 > *(float *)(*((void *)this + 4) + 16))
        {
          [v9 timestamp];
          ++v19;
          float v44 = v44 + v38;
          float v46 = v32;
          float v47 = v30;
          float v45 = v34;
        }
        ++v20;
        float v21 = v21 + v36;
        float v22 = v30;
        float v23 = v32;
        float v24 = v34;
      }
      while (v6 != (char *)v20);
      float v39 = v21 * 57.2957795;
      double v7 = v43;
      double v17 = &xmmword_10033A000;
      float v40 = v44;
    }
    double v41 = v40 * *((double *)v17 + 167);
    uint64_t v42 = *((void *)this + 4);
    *(unsigned char *)(v42 + 32) = v41 > *(float *)(v42 + 20);
    *(float *)&double v41 = v41;
    *(_DWORD *)(v42 + 36) = LODWORD(v41);
    *(_DWORD *)(v42 + 96) = v19;
    *(float *)(v42 + 100) = v39;
    *(void *)(v42 + 68) = *(void *)((char *)this + 2788);
    *(void *)((char *)this + 2788) = 0;
    CLKappaFeaturesAlgSpin::calculateSlowRoll(this, a2);
  }
}

void sub_100058788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgSpin::calculateSlowRoll(CLKappaFeaturesAlgSpin *this, unint64_t a2)
{
  uint64_t v4 = *((void *)this + 4);
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 112) = *(void *)(v4 + 104);
  *(void *)(v4 + 136) = *(void *)(v4 + 128);
  *(unsigned char *)(v4 + 40) = 0;
  id v5 = *(id *)(*((void *)this + 6) + 72);
  id v6 = [v5 count];
  if (!v6) {
    goto LABEL_85;
  }
  char v96 = off_1003A3D60;
  int v97 = 100;
  memset(v98, 0, sizeof(v98));
  v100[0] = 0;
  v100[1] = 0;
  unint64_t v99 = v100;
  double v7 = [v5 objectAtIndex:0];
  unsigned int v8 = *(_DWORD *)[v7 c_struct];
  unsigned int v9 = *((_DWORD *)[v7 c_struct] + 1);
  unsigned int v10 = *((_DWORD *)[v7 c_struct] + 2);
  v11.i32[0] = *((_DWORD *)[v7 c_struct] + 3);
  v95.i64[0] = __PAIR64__(v9, v8);
  v95.i64[1] = __PAIR64__(v11.u32[0], v10);
  CMOQuaternion::normalize(&v95, v11);
  CMOQuaternion::gravity((CMOQuaternion *)&v95);
  float v12 = CMOQuaternion::gravity((CMOQuaternion *)&v95);
  float v14 = v13;
  float v16 = v15;
  CMOQuaternion::gravity((CMOQuaternion *)&v95);
  if (*((void *)this + 567) - 1 >= a2 || *((void *)this + 568))
  {
    int v90 = 0;
  }
  else
  {
    v94.i64[0] = *((void *)this + 567);
    v94.i64[1] = a2;
    sub_100059EA8((void *)this + 569, (__n128 *)&v94);
    int v90 = 1;
  }
  double v17 = (int64x2_t *)((char *)this + 4584);
  while (1)
  {
    if (!*((void *)this + 574)) {
      goto LABEL_60;
    }
    unint64_t v18 = *(void *)(*(void *)(*((void *)this + 570) + ((*((void *)this + 573) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * *((void *)this + 573)
                    + 8);
    if (v18 >= (unint64_t)[v7 timestamp]) {
      break;
    }
    *double v17 = vaddq_s64(*v17, (int64x2_t)xmmword_100338520);
    sub_10005B5DC((uint64_t)this + 4552, 1);
  }
  unint64_t v19 = *((void *)this + 574);
  if (!v19)
  {
LABEL_60:
    byte_1003DCBD8 ^= 1u;
    if (v90)
    {
      *((void *)this + 574) = -1;
      sub_10005B63C((void *)this + 569, 1);
    }
    goto LABEL_84;
  }
  uint64_t v20 = *((void *)this + 570);
  if (*((void *)this + 571) != v20)
  {
    float v21 = (void *)(v20 + 8 * ((unint64_t)v17->i64[0] >> 8));
    float v22 = (void *)(*v21 + 16 * v17->i64[0]);
    uint64_t v23 = *(void *)(v20 + (((v17->i64[0] + v19) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (v17->i8[0] + v19);
    if (v22 != (void *)v23)
    {
      id v91 = v5;
      do
      {
        float v24 = (void *)*((void *)this + 4);
        int v25 = (char *)v24[14];
        unint64_t v26 = v24[15];
        if ((unint64_t)v25 >= v26)
        {
          unsigned int v28 = (char *)v24[13];
          uint64_t v29 = (v25 - v28) >> 3;
          if ((unint64_t)(v29 + 1) >> 61) {
            goto LABEL_86;
          }
          unint64_t v30 = v26 - (void)v28;
          unint64_t v31 = (uint64_t)(v26 - (void)v28) >> 2;
          if (v31 <= v29 + 1) {
            unint64_t v31 = v29 + 1;
          }
          if (v30 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v31;
          }
          if (v32)
          {
            float v33 = (char *)sub_10000EEB0((uint64_t)(v24 + 15), v32);
            unsigned int v28 = (char *)v24[13];
            int v25 = (char *)v24[14];
          }
          else
          {
            float v33 = 0;
          }
          float v34 = &v33[8 * v29];
          *(void *)float v34 = *v22;
          unsigned int v27 = v34 + 8;
          while (v25 != v28)
          {
            uint64_t v35 = *((void *)v25 - 1);
            v25 -= 8;
            *((void *)v34 - 1) = v35;
            v34 -= 8;
          }
          v24[13] = v34;
          v24[14] = v27;
          v24[15] = &v33[8 * v32];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *(void *)int v25 = *v22;
          unsigned int v27 = v25 + 8;
        }
        v24[14] = v27;
        float v36 = (void *)*((void *)this + 4);
        float v37 = (char *)v36[17];
        unint64_t v38 = v36[18];
        if ((unint64_t)v37 >= v38)
        {
          float v40 = (char *)v36[16];
          uint64_t v41 = (v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61) {
LABEL_86:
          }
            sub_10000EE98();
          unint64_t v42 = v38 - (void)v40;
          unint64_t v43 = (uint64_t)(v38 - (void)v40) >> 2;
          if (v43 <= v41 + 1) {
            unint64_t v43 = v41 + 1;
          }
          if (v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            float v45 = (char *)sub_10000EEB0((uint64_t)(v36 + 18), v44);
            float v40 = (char *)v36[16];
            float v37 = (char *)v36[17];
          }
          else
          {
            float v45 = 0;
          }
          float v46 = &v45[8 * v41];
          *(void *)float v46 = v22[1];
          float v39 = v46 + 8;
          while (v37 != v40)
          {
            uint64_t v47 = *((void *)v37 - 1);
            v37 -= 8;
            *((void *)v46 - 1) = v47;
            v46 -= 8;
          }
          v36[16] = v46;
          v36[17] = v39;
          v36[18] = &v45[8 * v44];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)float v37 = v22[1];
          float v39 = v37 + 8;
        }
        v36[17] = v39;
        v22 += 2;
        if ((void *)((char *)v22 - *v21) == (void *)4096)
        {
          float32x4_t v48 = (void *)v21[1];
          ++v21;
          float v22 = v48;
        }
      }
      while (v22 != (void *)v23);
      unint64_t v19 = *((void *)this + 574);
      id v5 = v91;
      if (!v19) {
        goto LABEL_82;
      }
    }
  }
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  LODWORD(v53) = -1;
  do
  {
    uint64_t v51 = *((void *)this + 573);
    uint64_t v52 = *((void *)this + 570);
    if (*(void *)(*(void *)(v52 + (((unint64_t)(v51 + v49) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v51 + v49)
                   + 8)
       - *(void *)(*(void *)(v52 + (((unint64_t)(v51 + v49) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v51 + v49)) <= v50)
    {
      uint64_t v53 = v53;
    }
    else
    {
      unint64_t v50 = *(void *)(*(void *)(v52 + (((unint64_t)(v51 + v49) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (v51 + v49)
                      + 8)
          - *(void *)(*(void *)(v52 + (((unint64_t)(v51 + v49) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (v51 + v49));
      uint64_t v53 = v49;
    }
    ++v49;
  }
  while (v19 != v49);
  if ((v53 & 0x80000000) != 0) {
    goto LABEL_82;
  }
  uint64_t v54 = *((void *)this + 573);
  uint64_t v55 = *((void *)this + 570);
  char v56 = (char **)(*(void *)(v55 + (((v54 + (unint64_t)v53) >> 5) & 0x7FFFFFFFFFFFFF8))
                + 16 * (v54 + v53));
  uint64_t v58 = *v56;
  unint64_t v57 = (unint64_t)v56[1];
  if (v57 - (unint64_t)*v56 < 0x30D41) {
    goto LABEL_82;
  }
  for (unint64_t i = (v53 + 1); v19 > i; ++i)
  {
    uint64_t v60 = *(void *)(v55 + (((v54 + i) >> 5) & 0x7FFFFFFFFFFFFF8));
    uint64_t v61 = (v54 + i);
    if (*(void *)(v60 + 16 * v61) - v57 >= 0x493E0) {
      break;
    }
    unint64_t v57 = *(void *)(v60 + 16 * v61 + 8);
  }
  if ((int)v53 >= 1)
  {
    uint64_t v62 = v53 + 1;
    do
    {
      unint64_t v63 = v54 + (v62 - 2);
      uint64_t v64 = *(void *)(v55 + ((v63 >> 5) & 0x7FFFFFFFFFFFFF8));
      if ((unint64_t)&v58[-*(void *)(v64 + 16 * v63 + 8)] >= 0x493E0) {
        break;
      }
      uint64_t v58 = *(char **)(v64 + 16 * (v54 + v62-- - 2));
    }
    while (v62 > 1);
  }
  if (v58 < [v7 timestamp]) {
    uint64_t v58 = (char *)[v7 timestamp];
  }
  v93[0] = 0;
  if ((unint64_t)v6 < 2)
  {
    float v89 = NAN;
    goto LABEL_81;
  }
  id v65 = v6;
  float v92 = 0.0;
  float v89 = NAN;
  uint64_t v66 = 1;
  float v67 = 0.0;
  float v68 = 0.0;
  while (1)
  {
    unint64_t v69 = [v5 objectAtIndex:v66];
    if ([v69 timestamp] >= v58) {
      break;
    }
    unsigned int v70 = *(_DWORD *)[v69 c_struct];
    unsigned int v71 = *((_DWORD *)[v69 c_struct] + 1);
    unsigned int v72 = *((_DWORD *)[v69 c_struct] + 2);
    v73.i32[0] = *((_DWORD *)[v69 c_struct] + 3);
    v94.i64[0] = __PAIR64__(v71, v70);
    v94.i64[1] = __PAIR64__(v73.u32[0], v72);
    CMOQuaternion::normalize(&v94, v73);
    float32x4_t v95 = v94;
    float v74 = CMOQuaternion::gravity((CMOQuaternion *)&v95);
    float v76 = v75;
    float v78 = v77;
LABEL_77:

    ++v66;
    float v16 = v78;
    float v14 = v76;
    float v12 = v74;
    if ((id)v66 == v65) {
      goto LABEL_81;
    }
  }
  if ((unint64_t)[v69 timestamp] <= v57)
  {
    unsigned int v79 = *(_DWORD *)[v69 c_struct];
    unsigned int v80 = *((_DWORD *)[v69 c_struct] + 1);
    unsigned int v81 = *((_DWORD *)[v69 c_struct] + 2);
    v82.i32[0] = *((_DWORD *)[v69 c_struct] + 3);
    v94.i64[0] = __PAIR64__(v80, v79);
    v94.i64[1] = __PAIR64__(v82.u32[0], v81);
    CMOQuaternion::normalize(&v94, v82);
    float32x4_t v95 = v94;
    float v74 = CMOQuaternion::gravity((CMOQuaternion *)&v95);
    float v76 = v83;
    float v78 = v84;
    uint64_t v85 = 0;
    float v68 = (float)((float)(v14 * v84) - (float)(v16 * v83)) + v68;
    float v67 = (float)((float)(v16 * v74) - (float)(v12 * v84)) + v67;
    *(float *)char v93 = v68;
    *(float *)&v93[1] = v67;
    float v92 = (float)((float)(v12 * v83) - (float)(v14 * v74)) + v92;
    *(float *)&v93[2] = v92;
    float v86 = 0.0;
    do
    {
      float v86 = v86 + (float)(*(float *)&v93[v85] * *(float *)&v93[v85]);
      ++v85;
    }
    while (v85 != 3);
    float v87 = sqrtf(v86) * 57.2957795;
    float v89 = v87;
    goto LABEL_77;
  }

LABEL_81:
  uint64_t v88 = *((void *)this + 4);
  *(unsigned char *)(v88 + 40) = 1;
  *(void *)(v88 + 48) = v58;
  *(void *)(v88 + 56) = v57;
  *(float *)(v88 + 64) = v89;
LABEL_82:
  byte_1003DCBD8 ^= 1u;
  if (v90)
  {
    --*((void *)this + 574);
    sub_10005B63C((void *)this + 569, 1);
  }
LABEL_84:

  char v96 = off_1003A3D60;
  sub_10005A4C8((uint64_t)&v99, v100[0]);
  sub_100010C84(v98);
LABEL_85:
}

void sub_100058FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  sub_100057E0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'CLKappaFeaturesAlgSpin::epochFinalize(CLKappaFeaturesAlgSpin *this, unint64_t a2)
{
}

void CLKappaFeaturesAlgSpin::feedDM(CLKappaFeaturesAlgSpin *this, const DMSample *a2)
{
  float32x4_t v93 = *(float32x4_t *)a2->quaternion;
  CMOQuaternion::normalize(&v93, v93);
  float v3 = CMOQuaternion::gravity((CMOQuaternion *)&v93);
  unint64_t v91 = __PAIR64__(LODWORD(v4), LODWORD(v3));
  float v92 = v5;
  if (*((unsigned char *)this + 2760))
  {
    float v6 = *((float *)this + 1127);
    float v7 = *((float *)this + 1128);
    float v8 = *((float *)this + 1126);
  }
  else
  {
    *((float *)this + 1126) = v3;
    *((float *)this + 1127) = v4;
    *((float *)this + 1128) = v5;
    *((unsigned char *)this + 2760) = 1;
    float v8 = v3;
    float v7 = v5;
    float v6 = v4;
  }
  *(float *)int v90 = (float)(v6 * v5) - (float)(v7 * v4);
  *(float *)&v90[4] = (float)(v7 * v3) - (float)(v8 * v5);
  *(float *)&v90[8] = (float)(v8 * v4) - (float)(v6 * v3);
  if (*((_WORD *)this + 47) == 10)
  {
    *((float *)this + 691) = *((float *)this + 691) - sub_10005974C((unsigned __int16 *)this + 32);
    *((float *)this + 692) = *((float *)this + 692) - v9;
    *((float *)this + 693) = *((float *)this + 693) - v10;
  }
  if (*((_WORD *)this + 151) == 200)
  {
    *((float *)this + 694) = *((float *)this + 694) - sub_1000597D4((unsigned __int16 *)this + 136);
    *((float *)this + 695) = *((float *)this + 695) - v11;
    *((float *)this + 696) = *((float *)this + 696) - v12;
  }
  sub_10005985C((uint64_t)this + 64, v90);
  sub_100059974((uint64_t)this + 272, v90);
  uint64_t v13 = 0;
  float v14 = (char *)this + 2764;
  float v15 = (char *)this + 2776;
  float32x2_t v16 = *(float32x2_t *)&v90[4];
  int32x2_t v17 = vzip1_s32(*(int32x2_t *)v90, *(int32x2_t *)&v90[4]);
  *(int32x2_t *)v18.f32 = v17;
  v18.i64[1] = __PAIR64__(v17.u32[0], vdup_lane_s32(*(int32x2_t *)&v90[4], 1).u32[0]);
  *(float32x4_t *)((char *)this + 2764) = vaddq_f32(v18, *(float32x4_t *)((char *)this + 2764));
  *(float32x2_t *)((char *)this + 2780) = vadd_f32(v16, *(float32x2_t *)((char *)this + 2780));
  float v19 = 0.0;
  do
  {
    float v19 = v19 + (float)(*(float *)&v14[v13] * *(float *)&v14[v13]);
    v13 += 4;
  }
  while (v13 != 12);
  if (sqrtf(v19) * 57.2957795 > *((float *)this + 697))
  {
    uint64_t v20 = 0;
    float v21 = 0.0;
    do
    {
      float v21 = v21 + (float)(*(float *)&v14[v20] * *(float *)&v14[v20]);
      v20 += 4;
    }
    while (v20 != 12);
    float v22 = sqrtf(v21) * 57.2957795;
    *((float *)this + 697) = v22;
  }
  uint64_t v23 = 0;
  float v24 = 0.0;
  do
  {
    float v24 = v24 + (float)(*(float *)&v15[v23] * *(float *)&v15[v23]);
    v23 += 4;
  }
  while (v23 != 12);
  if (sqrtf(v24) * 57.2957795 > *((float *)this + 698))
  {
    uint64_t v25 = 0;
    float v26 = 0.0;
    do
    {
      float v26 = v26 + (float)(*(float *)&v15[v25] * *(float *)&v15[v25]);
      v25 += 4;
    }
    while (v25 != 12);
    float v27 = sqrtf(v26) * 57.2957795;
    *((float *)this + 698) = v27;
  }
  sub_100059A8C((uint64_t)this + 2800, &v91);
  float v28 = sub_100059BA4((uint64_t)this + 2800);
  float v85 = v29;
  float v86 = v28;
  float v84 = v30;
  if (*((unsigned char *)this + 4528))
  {
    float v31 = *((float *)this + 1130);
    float v32 = *((float *)this + 1131);
    float v33 = *((float *)this + 1129);
    float v35 = v85;
    float v34 = v28;
    float v36 = v84;
  }
  else
  {
    float v35 = v29;
    float v34 = v28;
    *((float *)this + 1129) = v28;
    *((float *)this + 1130) = v29;
    float v36 = v30;
    *((float *)this + 1131) = v30;
    *((unsigned char *)this + 4528) = 1;
    float v33 = v28;
    float v32 = v84;
    float v31 = v85;
  }
  uint64_t v37 = 0;
  float v38 = (float)(v31 * v36) - (float)(v32 * v35);
  float v39 = (float)(v32 * v34) - (float)(v33 * v36);
  float v40 = (float)(v33 * v35) - (float)(v31 * v34);
  float v87 = v38;
  float v88 = v39;
  float v89 = v40;
  float v41 = 0.0;
  do
  {
    float v41 = v41 + (float)(*(float *)((char *)&v87 + v37) * *(float *)((char *)&v87 + v37));
    v37 += 4;
  }
  while (v37 != 12);
  uint64_t v42 = 0;
  if (sqrtf(v41) < 0.0000001)
  {
    float v40 = v40 + 0.000001;
    float v39 = v39 + 0.000001;
    float v38 = v38 + 0.000001;
  }
  unint64_t v96 = __PAIR64__(LODWORD(v39), LODWORD(v38));
  float v97 = v40;
  float v43 = 0.0;
  do
  {
    float v43 = v43 + (float)(*(float *)((char *)&v96 + v42) * *(float *)((char *)&v96 + v42));
    v42 += 4;
  }
  while (v42 != 12);
  float v44 = sqrtf(v43);
  float v87 = v38 / v44;
  float v88 = v39 / v44;
  float v89 = v40 / v44;
  sub_100059C0C((uint64_t)this + 3128, &v87);
  float v45 = sub_10005A7E4((uint64_t)this + 3128);
  float v47 = v46;
  float v49 = v48;
  uint64_t v50 = 0;
  v95[0] = v45;
  v95[1] = v46;
  float v51 = 0.0;
  v95[2] = v48;
  do
  {
    float v51 = v51 + (float)(v95[v50] * v95[v50]);
    ++v50;
  }
  while (v50 != 3);
  if (sqrtf(v51) >= 0.0000001)
  {
    uint64_t v99 = 0x6400000000;
    int v98 = 1031798784;
    if (*((_WORD *)this + 1579))
    {
      unint64_t v53 = 0;
      unint64_t v54 = 0;
      unsigned __int16 v55 = 0;
      do
      {
        float v56 = sub_10005A84C((unsigned __int16 *)this + 1564, v53);
        sub_10005A84C((unsigned __int16 *)this + 1564, v53);
        float v58 = v57;
        sub_10005A84C((unsigned __int16 *)this + 1564, v53);
        float v60 = v59;
        uint64_t v61 = 0;
        float v62 = 0.0;
        do
        {
          float v62 = v62 + (float)(v95[v61] * v95[v61]);
          ++v61;
        }
        while (v61 != 3);
        float v63 = sub_10005A84C((unsigned __int16 *)this + 1564, v53);
        uint64_t v64 = 0;
        *(float *)float32x4_t v94 = v63;
        v94[1] = v65;
        float v66 = 0.0;
        v94[2] = v67;
        do
        {
          float v66 = v66 + (float)(*(float *)&v94[v64] * *(float *)&v94[v64]);
          ++v64;
        }
        while (v64 != 3);
        float v68 = acosf((float)((float)((float)(v47 * v58) + (float)(v45 * v56)) + (float)(v49 * v60))/ (float)(sqrtf(v62) * sqrtf(v66)));
        unint64_t v69 = v54 + v55;
        if (v69 >= 0x64) {
          uint64_t v70 = -100;
        }
        else {
          uint64_t v70 = 0;
        }
        *(float *)&v100[v70 + v69] = v68;
        if (v54 > 0x63)
        {
          if (v55 >= 0x63u) {
            __int16 v71 = -100;
          }
          else {
            __int16 v71 = 0;
          }
          v55 += v71 + 1;
        }
        else
        {
          ++v54;
        }
        ++v53;
      }
      while (v53 < *((unsigned __int16 *)this + 1579));
      WORD1(v99) = v54;
    }
    else
    {
      unsigned __int16 v55 = 0;
    }
    LOWORD(v99) = v55;
    LOBYTE(v96) = 1;
    sub_10005A714((uint64_t)&v96);
    float v52 = *((float *)&v96 + 1) * 57.2957795;
  }
  else
  {
    float v52 = 20626.0;
  }
  uint64_t v72 = 0;
  float v73 = a2->rotation[2];
  unint64_t v96 = *(void *)a2->rotation;
  float v97 = v73;
  float v74 = 0.0;
  do
  {
    float v74 = v74 + (float)(*(float *)((char *)&v96 + v72) * *(float *)((char *)&v96 + v72));
    v72 += 4;
  }
  while (v72 != 12);
  v95[0] = sqrtf(v74);
  sub_100059D24((uint64_t)this + 4416, v95);
  v95[0] = 0.0;
  sub_100059DD4((void *)this + 552, 2, v95);
  if (v52 >= 30.0 || (double v75 = v95[0] * 57.2957795, v75 <= 90.0))
  {
    BOOL v77 = 0;
    float v78 = (BOOL *)this + 4532;
    BOOL v76 = *((unsigned char *)this + 4532) == 0;
    float v80 = v86;
  }
  else
  {
    BOOL v76 = *((unsigned char *)this + 4532) == 0;
    BOOL v77 = v75 < 800.0;
    float v78 = (BOOL *)this + 4532;
    BOOL v79 = v75 < 800.0 && *((unsigned char *)this + 4532) == 0;
    float v80 = v86;
    if (v79)
    {
      *((void *)this + 567) = *(void *)(&a2->status + 1);
      BOOL v77 = 1;
LABEL_66:
      float v82 = v84;
      float v81 = v85;
      goto LABEL_67;
    }
  }
  float v82 = v84;
  float v81 = v85;
  if (!v77 && !v76)
  {
    *((void *)this + 568) = *(void *)(&a2->status + 1);
    sub_100059EA8((void *)this + 569, (__n128 *)((char *)this + 4536));
    *((void *)this + 567) = 0;
    *((void *)this + 568) = 0;
    float v80 = v86;
    goto LABEL_66;
  }
LABEL_67:
  if (!*((unsigned char *)this + 4528)) {
    *((unsigned char *)this + 4528) = 1;
  }
  *((float *)this + 1129) = v80;
  *((float *)this + 1130) = v81;
  *((float *)this + 1131) = v82;
  *float v78 = v77;
  *((void *)this + 563) = v91;
  *((float *)this + 1128) = v92;
}

float sub_10005974C(unsigned __int16 *a1)
{
  float v2 = 0.0;
  if (a1[15]) {
    float v2 = *(float *)sub_10003D860(a1 + 14, 0);
  }
  if (a1[47]) {
    sub_10003D860(a1 + 46, 0);
  }
  if (a1[79]) {
    sub_10003D860(a1 + 78, 0);
  }
  return v2;
}

float sub_1000597D4(unsigned __int16 *a1)
{
  float v2 = 0.0;
  if (a1[15]) {
    float v2 = *(float *)sub_10003D860(a1 + 14, 0);
  }
  if (a1[427]) {
    sub_10003D860(a1 + 426, 0);
  }
  if (a1[839]) {
    sub_10003D860(a1 + 838, 0);
  }
  return v2;
}

uint64_t sub_10005985C(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(unsigned __int16 *)(result + 28);
  uint64_t v3 = *(unsigned __int16 *)(result + 30);
  unint64_t v4 = *(unsigned int *)(result + 32);
  if (v2 + v3 >= v4) {
    uint64_t v5 = *(unsigned int *)(result + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(result + 28 + 4 * (v2 + v3 - v5) + 8) = *a2;
  if (v4 <= v3)
  {
    unint64_t v6 = v2 + 1;
    if (v6 < v4) {
      LOWORD(v4) = 0;
    }
    *(_WORD *)(result + 28) = v6 - v4;
  }
  else
  {
    *(_WORD *)(result + 30) = v3 + 1;
  }
  uint64_t v7 = *(unsigned __int16 *)(result + 92);
  *(unsigned char *)(result + 12) = 1;
  uint64_t v8 = *(unsigned __int16 *)(result + 94);
  unint64_t v9 = *(unsigned int *)(result + 96);
  if (v7 + v8 >= v9) {
    uint64_t v10 = *(unsigned int *)(result + 96);
  }
  else {
    uint64_t v10 = 0;
  }
  *(_DWORD *)(result + 92 + 4 * (v7 + v8 - v10) + 8) = a2[1];
  if (v9 <= v8)
  {
    unint64_t v11 = v7 + 1;
    if (v11 < v9) {
      LOWORD(v9) = 0;
    }
    *(_WORD *)(result + 92) = v11 - v9;
  }
  else
  {
    *(_WORD *)(result + 94) = v8 + 1;
  }
  uint64_t v12 = *(unsigned __int16 *)(result + 156);
  *(unsigned char *)(result + 76) = 1;
  uint64_t v13 = *(unsigned __int16 *)(result + 158);
  unint64_t v14 = *(unsigned int *)(result + 160);
  if (v12 + v13 >= v14) {
    uint64_t v15 = *(unsigned int *)(result + 160);
  }
  else {
    uint64_t v15 = 0;
  }
  *(_DWORD *)(result + 156 + 4 * (v12 + v13 - v15) + 8) = a2[2];
  if (v14 <= v13)
  {
    unint64_t v16 = v12 + 1;
    if (v16 < v14) {
      LOWORD(v14) = 0;
    }
    *(_WORD *)(result + 156) = v16 - v14;
  }
  else
  {
    *(_WORD *)(result + 158) = v13 + 1;
  }
  *(unsigned char *)(result + 140) = 1;
  return result;
}

uint64_t sub_100059974(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(unsigned __int16 *)(result + 28);
  uint64_t v3 = *(unsigned __int16 *)(result + 30);
  unint64_t v4 = *(unsigned int *)(result + 32);
  if (v2 + v3 >= v4) {
    uint64_t v5 = *(unsigned int *)(result + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(result + 28 + 4 * (v2 + v3 - v5) + 8) = *a2;
  if (v4 <= v3)
  {
    unint64_t v6 = v2 + 1;
    if (v6 < v4) {
      LOWORD(v4) = 0;
    }
    *(_WORD *)(result + 28) = v6 - v4;
  }
  else
  {
    *(_WORD *)(result + 30) = v3 + 1;
  }
  *(unsigned char *)(result + 12) = 1;
  uint64_t v7 = *(unsigned __int16 *)(result + 854);
  unint64_t v8 = *(unsigned int *)(result + 856);
  uint64_t v9 = *(unsigned __int16 *)(result + 852);
  if (v9 + v7 >= v8) {
    uint64_t v10 = *(unsigned int *)(result + 856);
  }
  else {
    uint64_t v10 = 0;
  }
  *(_DWORD *)(result + 852 + 4 * (v9 + v7 - v10) + 8) = a2[1];
  if (v8 <= v7)
  {
    if (v9 + 1 < v8) {
      LOWORD(v8) = 0;
    }
    *(_WORD *)(result + 852) = v9 + 1 - v8;
  }
  else
  {
    *(_WORD *)(result + 854) = v7 + 1;
  }
  *(unsigned char *)(result + 836) = 1;
  uint64_t v11 = *(unsigned __int16 *)(result + 1678);
  unint64_t v12 = *(unsigned int *)(result + 1680);
  uint64_t v13 = *(unsigned __int16 *)(result + 1676);
  if (v13 + v11 >= v12) {
    uint64_t v14 = *(unsigned int *)(result + 1680);
  }
  else {
    uint64_t v14 = 0;
  }
  *(_DWORD *)(result + 1676 + 4 * (v13 + v11 - v14) + 8) = a2[2];
  if (v12 <= v11)
  {
    if (v13 + 1 < v12) {
      LOWORD(v12) = 0;
    }
    *(_WORD *)(result + 1676) = v13 + 1 - v12;
  }
  else
  {
    *(_WORD *)(result + 1678) = v11 + 1;
  }
  *(unsigned char *)(result + 1660) = 1;
  return result;
}

uint64_t sub_100059A8C(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(unsigned __int16 *)(result + 28);
  uint64_t v3 = *(unsigned __int16 *)(result + 30);
  unint64_t v4 = *(unsigned int *)(result + 32);
  if (v2 + v3 >= v4) {
    uint64_t v5 = *(unsigned int *)(result + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(result + 28 + 4 * (v2 + v3 - v5) + 8) = *a2;
  if (v4 <= v3)
  {
    unint64_t v6 = v2 + 1;
    if (v6 < v4) {
      LOWORD(v4) = 0;
    }
    *(_WORD *)(result + 28) = v6 - v4;
  }
  else
  {
    *(_WORD *)(result + 30) = v3 + 1;
  }
  uint64_t v7 = *(unsigned __int16 *)(result + 132);
  *(unsigned char *)(result + 12) = 1;
  uint64_t v8 = *(unsigned __int16 *)(result + 134);
  unint64_t v9 = *(unsigned int *)(result + 136);
  if (v7 + v8 >= v9) {
    uint64_t v10 = *(unsigned int *)(result + 136);
  }
  else {
    uint64_t v10 = 0;
  }
  *(_DWORD *)(result + 132 + 4 * (v7 + v8 - v10) + 8) = a2[1];
  if (v9 <= v8)
  {
    unint64_t v11 = v7 + 1;
    if (v11 < v9) {
      LOWORD(v9) = 0;
    }
    *(_WORD *)(result + 132) = v11 - v9;
  }
  else
  {
    *(_WORD *)(result + 134) = v8 + 1;
  }
  uint64_t v12 = *(unsigned __int16 *)(result + 236);
  *(unsigned char *)(result + 116) = 1;
  uint64_t v13 = *(unsigned __int16 *)(result + 238);
  unint64_t v14 = *(unsigned int *)(result + 240);
  if (v12 + v13 >= v14) {
    uint64_t v15 = *(unsigned int *)(result + 240);
  }
  else {
    uint64_t v15 = 0;
  }
  *(_DWORD *)(result + 236 + 4 * (v12 + v13 - v15) + 8) = a2[2];
  if (v14 <= v13)
  {
    unint64_t v16 = v12 + 1;
    if (v16 < v14) {
      LOWORD(v14) = 0;
    }
    *(_WORD *)(result + 236) = v16 - v14;
  }
  else
  {
    *(_WORD *)(result + 238) = v13 + 1;
  }
  *(unsigned char *)(result + 220) = 1;
  return result;
}

float sub_100059BA4(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v2 = a1 + 12;
  if (v3) {
    sub_10005A714(v2);
  }
  float v4 = *(float *)(a1 + 16);
  if (*(unsigned char *)(a1 + 116)) {
    sub_10005A714(a1 + 116);
  }
  if (*(unsigned char *)(a1 + 220)) {
    sub_10005A714(a1 + 220);
  }
  return v4;
}

uint64_t sub_100059C0C(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(unsigned __int16 *)(result + 28);
  uint64_t v3 = *(unsigned __int16 *)(result + 30);
  unint64_t v4 = *(unsigned int *)(result + 32);
  if (v2 + v3 >= v4) {
    uint64_t v5 = *(unsigned int *)(result + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(result + 28 + 4 * (v2 + v3 - v5) + 8) = *a2;
  if (v4 <= v3)
  {
    unint64_t v6 = v2 + 1;
    if (v6 < v4) {
      LOWORD(v4) = 0;
    }
    *(_WORD *)(result + 28) = v6 - v4;
  }
  else
  {
    *(_WORD *)(result + 30) = v3 + 1;
  }
  *(unsigned char *)(result + 12) = 1;
  uint64_t v7 = *(unsigned __int16 *)(result + 454);
  unint64_t v8 = *(unsigned int *)(result + 456);
  uint64_t v9 = *(unsigned __int16 *)(result + 452);
  if (v9 + v7 >= v8) {
    uint64_t v10 = *(unsigned int *)(result + 456);
  }
  else {
    uint64_t v10 = 0;
  }
  *(_DWORD *)(result + 452 + 4 * (v9 + v7 - v10) + 8) = a2[1];
  if (v8 <= v7)
  {
    if (v9 + 1 < v8) {
      LOWORD(v8) = 0;
    }
    *(_WORD *)(result + 452) = v9 + 1 - v8;
  }
  else
  {
    *(_WORD *)(result + 454) = v7 + 1;
  }
  *(unsigned char *)(result + 436) = 1;
  uint64_t v11 = *(unsigned __int16 *)(result + 878);
  unint64_t v12 = *(unsigned int *)(result + 880);
  uint64_t v13 = *(unsigned __int16 *)(result + 876);
  if (v13 + v11 >= v12) {
    uint64_t v14 = *(unsigned int *)(result + 880);
  }
  else {
    uint64_t v14 = 0;
  }
  *(_DWORD *)(result + 876 + 4 * (v13 + v11 - v14) + 8) = a2[2];
  if (v12 <= v11)
  {
    if (v13 + 1 < v12) {
      LOWORD(v12) = 0;
    }
    *(_WORD *)(result + 876) = v13 + 1 - v12;
  }
  else
  {
    *(_WORD *)(result + 878) = v11 + 1;
  }
  *(unsigned char *)(result + 860) = 1;
  return result;
}

void sub_100059D24(uint64_t a1, float *a2)
{
  uint64_t v3 = (void *)(a1 + 16);
  unint64_t v4 = (uint64_t **)(a1 + 64);
  unint64_t v6 = sub_10005AC4C((uint64_t **)(a1 + 64), a2);
  sub_10005A8AC(v3, &v6);
  if (*(void *)(a1 + 56) > (unint64_t)*(unsigned int *)(a1 + 8))
  {
    uint64_t v5 = *(uint64_t **)(*(void *)(*(void *)(a1 + 24) + ((*(void *)(a1 + 48) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*(void *)(a1 + 48) & 0x1FFLL));
    sub_10005AECC(v4, v5);
    operator delete(v5);
    *(int64x2_t *)(a1 + 48) = vaddq_s64(*(int64x2_t *)(a1 + 48), (int64x2_t)xmmword_100338520);
    sub_1000125B8((uint64_t)v3, 1);
  }
}

uint64_t sub_100059DD4(void *a1, int a2, _DWORD *a3)
{
  unint64_t v3 = a1[10];
  if (!v3) {
    return 0;
  }
  if (a2 == 2)
  {
    float v10 = (double)v3 * 0.5;
    int v11 = vcvtms_s32_f32(v10);
    unint64_t v12 = (void *)a1[8];
    if (v11 < 1)
    {
      uint64_t v7 = (void *)a1[8];
    }
    else
    {
      for (int i = 0; i != v11; ++i)
      {
        uint64_t v14 = (void *)v12[1];
        if (v14)
        {
          do
          {
            uint64_t v7 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v7 = (void *)v12[2];
            BOOL v8 = *v7 == (void)v12;
            unint64_t v12 = v7;
          }
          while (!v8);
        }
        unint64_t v12 = v7;
      }
    }
    goto LABEL_22;
  }
  if (a2 != 1)
  {
    if (!a2)
    {
      unint64_t v6 = (void *)a1[9];
      unint64_t v4 = a1 + 9;
      uint64_t v5 = v6;
      if (v6)
      {
        do
        {
          uint64_t v7 = v5;
          uint64_t v5 = (void *)v5[1];
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          unint64_t v4 = v7;
        }
        while (v8);
      }
      goto LABEL_22;
    }
    return 0;
  }
  uint64_t v7 = (void *)a1[8];
LABEL_22:
  *a3 = *((_DWORD *)v7 + 7);
  return 1;
}

__n128 sub_100059EA8(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10005B2C4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void virtual thunk to'CLKappaFeaturesAlgSpin::feedDM(CLKappaFeaturesAlgSpin *this, const DMSample *a2)
{
}

void sub_100059F50(uint64_t a1)
{
}

void sub_100059F5C(uint64_t a1)
{
  operator delete();
}

void sub_100059FA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    sub_10000BB9C(v4);
  }
}

void sub_100059FCC(void *a1)
{
}

void sub_100059FF0(void *a1)
{
  operator delete();
}

void sub_10005A048(void *a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 32);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 7);
  *((void *)v2 + 6) = v4;
  *((void *)v2 + 7) = v3;
  if (v5) {
    sub_10000BB9C(v5);
  }
}

void sub_10005A088(void *a1)
{
}

void sub_10005A0AC(void *a1)
{
  operator delete();
}

void sub_10005A104(void *a1)
{
}

void sub_10005A128(void *a1)
{
  operator delete();
}

void sub_10005A180(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_10005A1C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v4 - 152)) = a2[6];
  *(void *)(a1 + *(void *)(*(void *)a1 - 160)) = a2[7];
  *(void *)(a1 + *(void *)(*(void *)a1 - 168)) = a2[8];
  *(void *)(a1 + *(void *)(*(void *)a1 - 176)) = a2[9];
  sub_10005A51C((void *)(a1 + 4552));
  *(void *)(a1 + 4416) = off_1003A3D60;
  sub_10005A4C8(a1 + 4480, *(void **)(a1 + 4488));
  sub_100010C84((void *)(a1 + 4432));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    sub_10000BB9C(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (v6) {
    sub_10000BB9C(v6);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock((CLKappaAlgBlock *)a1, a2 + 1);
}

void sub_10005A3CC(uint64_t a1)
{
  *(void *)a1 = off_1003A3D60;
  sub_10005A4C8(a1 + 64, *(void **)(a1 + 72));
  sub_100010C84((void *)(a1 + 16));

  operator delete();
}

void sub_10005A43C(void *a1)
{
  uint64_t v2 = (void **)a1[3];
  uint64_t v3 = a1[4];
  a1[7] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[4];
      uint64_t v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    a1[6] = v6;
  }
  BOOL v8 = (void *)a1[9];
  unint64_t v7 = a1 + 9;
  sub_10005A4C8((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *unint64_t v7 = 0;
  v7[1] = 0;
}

void sub_10005A4C8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10005A4C8(a1, *a2);
    sub_10005A4C8(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_10005A51C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_100010C34((uint64_t)a1);
}

double sub_10005A5C4@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xF8uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = off_1003A3DA0;
  double result = 0.0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  v2[3] = off_1003A1968;
  v2[5] = 0x4396000041200000;
  *((_DWORD *)v2 + 15) = 2143289344;
  v2[9] = 0;
  v2[10] = 0;
  *((_DWORD *)v2 + 22) = 2143289344;
  v2[12] = 0;
  v2[13] = 0;
  v2[14] = 0;
  v2[15] = 0x7FC0000000000000;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  v2[30] = 0;
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10005A678(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003A3DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005A698(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003A3DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10005A6EC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_10005A714(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_WORD *)(result + 18))
  {
    unint64_t v2 = 0;
    float v3 = 0.0;
    do
    {
      double result = sub_10003D860((unsigned __int16 *)(v1 + 16), v2);
      float v3 = v3 + *(float *)result;
      ++v2;
      unint64_t v4 = *(unsigned __int16 *)(v1 + 18);
    }
    while (v2 < v4);
    *(float *)(v1 + 4) = v3 / (float)v4;
    float v5 = 0.0;
    if (v4 >= 3)
    {
      unint64_t v6 = 0;
      float v7 = 0.0;
      do
      {
        double result = sub_10003D860((unsigned __int16 *)(v1 + 16), v6);
        float v7 = v7
           + (float)((float)(*(float *)result - *(float *)(v1 + 4)) * (float)(*(float *)result - *(float *)(v1 + 4)));
        ++v6;
        unint64_t v8 = *(unsigned __int16 *)(v1 + 18);
      }
      while (v6 < v8);
      float v5 = v7 / (float)v8;
    }
  }
  else
  {
    *(_DWORD *)(result + 4) = 0;
    float v5 = 0.0;
  }
  *(float *)(v1 + 8) = v5;
  *(unsigned char *)uint64_t v1 = 0;
  return result;
}

float sub_10005A7E4(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v2 = a1 + 12;
  if (v3) {
    sub_10005A714(v2);
  }
  float v4 = *(float *)(a1 + 16);
  if (*(unsigned char *)(a1 + 436)) {
    sub_10005A714(a1 + 436);
  }
  if (*(unsigned char *)(a1 + 860)) {
    sub_10005A714(a1 + 860);
  }
  return v4;
}

float sub_10005A84C(unsigned __int16 *a1, unint64_t a2)
{
  float v4 = *(float *)sub_10003D860(a1 + 14, a2);
  sub_10003D860(a1 + 226, a2);
  sub_10003D860(a1 + 438, a2);
  return v4;
}

void sub_10005A8AC(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10005A934(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_10005A934(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_10000EEB0(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    float v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100011630(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100011748((uint64_t)a1, &v54);
    float v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_10000EEB0((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      float v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      float v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float v56 = a1 + 3;
  *(void *)&long long v54 = sub_10000EEB0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  sub_100011868(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100011980((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10005AC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float *sub_10005AC4C(uint64_t **a1, float *a2)
{
  unint64_t v4 = (float *)operator new(0x20uLL);
  float v5 = *a2;
  v4[7] = *a2;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (v5 >= *((float *)v7 + 7)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        unint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    unint64_t v8 = v6 + 1;
  }
  else
  {
    unint64_t v8 = a1 + 1;
  }
LABEL_8:
  sub_10005ACDC(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v4;
}

uint64_t *sub_10005ACDC(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  float v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  double result = sub_10005AD34(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_10005AD34(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      BOOL v3 = (uint64_t *)v2[2];
      unint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              BOOL v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            char *v9 = v2;
            v2[2] = (uint64_t)v9;
            BOOL v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *BOOL v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            BOOL v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          BOOL v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *sub_10005AECC(uint64_t **a1, uint64_t *a2)
{
  unint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      BOOL v3 = v2;
      unint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    unint64_t v4 = a2;
    do
    {
      BOOL v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      unint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_10005AF40(v6, a2);
  return v3;
}

uint64_t *sub_10005AF40(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  BOOL v3 = a2;
  if (*a2)
  {
    unint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      BOOL v3 = a2;
      goto LABEL_7;
    }
    do
    {
      BOOL v3 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *int v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      double result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *BOOL v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      double result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      _OWORD v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        double result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        _OWORD v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        uint64_t v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        uint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      void v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    uint64_t v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      double result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  float v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  int64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    int64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *int64_t v20 = (uint64_t)v7;
    uint64_t v7[2] = (uint64_t)v20;
    float v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  void v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_10005B2C4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_10000EEB0(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    float v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100011630(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100011748((uint64_t)a1, &v54);
    float v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_10000EEB0((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      float v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      float v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float v56 = a1 + 3;
  *(void *)&long long v54 = sub_10000EEB0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  sub_100011868(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100011980((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10005B590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005B5DC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

uint64_t sub_10005B63C(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 32 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100) {
    a2 = 1;
  }
  if (v5 < 0x200) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t CMMsl::ALSData::ALSData(uint64_t this)
{
  *(void *)this = off_1003A3DF0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = off_1003A3DF0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::ALSData::~ALSData(CMMsl::ALSData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::ALSData::ALSData(CMMsl::ALSData *this, const CMMsl::ALSData *a2)
{
  *(void *)this = off_1003A3DF0;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

{
  float result;

  *(void *)this = off_1003A3DF0;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::ALSData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v7 = off_1003A3DF0;
    int v3 = *(_DWORD *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    int v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    int v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void (**v8)(CMMsl::ALSData *__hidden);
  int v9;
  int v10;

  if (a1 != a2)
  {
    int v8 = off_1003A3DF0;
    int v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(_DWORD *)(a2 + 8);
    int v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    uint64_t v10 = v5;
    int v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    int v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ALSData *a2, CMMsl::ALSData *a3)
{
  int v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float CMMsl::ALSData::ALSData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A3DF0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A3DF0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::ALSData::formatText(CMMsl::ALSData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "alsTrustedLux", *((float *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ALSData::readFrom(CMMsl::ALSData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(float *)(this + 8), 1u);
  }
  return this;
}

BOOL CMMsl::ALSData::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return result;
}

float CMMsl::ALSData::hash_value(CMMsl::ALSData *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((float *)this + 2);
  }
  return result;
}

uint64_t CMMsl::ALSPhone::ALSPhone(uint64_t this)
{
  *(void *)this = off_1003A3E28;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A3E28;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::ALSPhone::~ALSPhone(CMMsl::ALSPhone *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::ALSPhone::ALSPhone(CMMsl::ALSPhone *this, const CMMsl::ALSPhone *a2)
{
  *(void *)this = off_1003A3E28;
  *((_DWORD *)this + 5) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *((unsigned char *)this + 20) = 1;
    *((void *)this + 1) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 4);
    *((unsigned char *)this + 20) = v2;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t CMMsl::ALSPhone::operator=(uint64_t a1, const CMMsl::ALSPhone *a2)
{
  if ((const CMMsl::ALSPhone *)a1 != a2)
  {
    CMMsl::ALSPhone::ALSPhone((CMMsl::ALSPhone *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    int v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ALSPhone *a2, CMMsl::ALSPhone *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::ALSPhone::ALSPhone(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A3E28;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A3E28;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::ALSPhone::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v12 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[0] = off_1003A3E28;
    v10[1] = v7;
    int v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    int v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::ALSPhone::formatText(CMMsl::ALSPhone *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "lux", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ALSPhone::readFrom(CMMsl::ALSPhone *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((void *)this + 1) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ALSPhone::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::ALSPhone::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::ALSPhone::hash_value(CMMsl::ALSPhone *this)
{
  if ((*((unsigned char *)this + 20) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v3 ^ v1;
  }
  uint64_t v1 = *((void *)this + 1);
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v1;
}

void *CMMsl::APSleep::APSleep(void *this)
{
  *this = off_1003A3E60;
  return this;
}

{
  *this = off_1003A3E60;
  return this;
}

void CMMsl::APSleep::~APSleep(CMMsl::APSleep *this)
{
  PB::Base::~Base(this);

  operator delete();
}

void *CMMsl::APSleep::APSleep(void *this, const CMMsl::APSleep *a2)
{
  *this = off_1003A3E60;
  return this;
}

{
  *this = off_1003A3E60;
  return this;
}

uint64_t CMMsl::APSleep::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v4 = off_1003A3E60;
    PB::Base::~Base((PB::Base *)&v4);
  }
  return a1;
}

{
  void (**v4)(CMMsl::APSleep *__hidden);

  if (a1 != a2)
  {
    char v4 = off_1003A3E60;
    PB::Base::~Base((PB::Base *)&v4);
  }
  return a1;
}

void *CMMsl::APSleep::APSleep(void *result)
{
  *uint64_t result = off_1003A3E60;
  return result;
}

{
  *uint64_t result = off_1003A3E60;
  return result;
}

uint64_t CMMsl::APSleep::formatText(CMMsl::APSleep *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::APSleep::readFrom(CMMsl::APSleep *this, PB::Reader *a2)
{
  while (1)
  {
    unint64_t v3 = *((void *)a2 + 1);
    unint64_t v4 = *((void *)a2 + 2);
    int v5 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v4 || v5 != 0) {
      return v5 == 0;
    }
    uint64_t v7 = *(void *)a2;
    char v8 = 0;
    unsigned int v9 = 0;
    BOOL v10 = v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4;
    if (v10)
    {
      unint64_t v14 = 0;
      if (v3 > v4) {
        unint64_t v4 = *((void *)a2 + 1);
      }
      while (v4 != v3)
      {
        unint64_t v11 = v3 + 1;
        char v12 = *(unsigned char *)(v7 + v3);
        *((void *)a2 + 1) = v11;
        v14 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          goto LABEL_22;
        }
        v8 += 7;
        unint64_t v3 = v11;
        if (v9++ >= 9)
        {
LABEL_21:
          unint64_t v14 = 0;
          goto LABEL_22;
        }
      }
      int v5 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v5 == 0;
    }
    unint64_t v14 = 0;
    while (1)
    {
      unint64_t v15 = v3 + 1;
      *((void *)a2 + 1) = v3 + 1;
      char v16 = *(unsigned char *)(v7 + v3);
      v14 |= (unint64_t)(v16 & 0x7F) << v8;
      if ((v16 & 0x80) == 0) {
        break;
      }
      v8 += 7;
      unint64_t v3 = v15;
      BOOL v10 = v9++ > 8;
      if (v10) {
        goto LABEL_21;
      }
    }
LABEL_22:
    if ((v14 & 7) == 4)
    {
      int v5 = 0;
      return v5 == 0;
    }
    if ((PB::Reader::skip(a2, v14 >> 3, v14 & 7, 0) & 1) == 0) {
      return 0;
    }
  }
}

uint64_t CMMsl::APSleep::operator==()
{
  return 1;
}

uint64_t CMMsl::APSleep::hash_value(CMMsl::APSleep *this)
{
  return 0;
}

void *CMMsl::APWake::APWake(void *this)
{
  *this = off_1003A3E98;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A3E98;
  this[1] = 0;
  return this;
}

void CMMsl::APWake::~APWake(CMMsl::APWake *this)
{
  *(void *)this = off_1003A3E98;
  uint64_t v4 = *((void *)this + 1);
  float v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::APWake::~APWake(this);

  operator delete();
}

void *CMMsl::APWake::APWake(void *this, const CMMsl::APWake *a2)
{
  *this = off_1003A3E98;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::APWake *CMMsl::APWake::operator=(const CMMsl::APWake *a1, const CMMsl::APWake *a2)
{
  if (a1 != a2)
  {
    CMMsl::APWake::APWake(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::APWake::~APWake((CMMsl::APWake *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::APWake *a2, CMMsl::APWake *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::APWake::APWake(void *a1, uint64_t a2)
{
  *a1 = off_1003A3E98;
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *v3;
  *uint64_t v3 = v4;
  if (v5) {
    sub_100012E84((uint64_t)v3, v5);
  }
  return a1;
}

uint64_t CMMsl::APWake::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::APWake::APWake(&v5, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v6;
    uint64_t v6 = v3;
    CMMsl::APWake::~APWake((CMMsl::APWake *)&v5);
  }
  return a1;
}

uint64_t CMMsl::APWake::formatText(CMMsl::APWake *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::APWake::readFrom(CMMsl::APWake *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::APWake::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t CMMsl::APWake::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  unint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

BOOL sub_10005CB00(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

unint64_t CMMsl::APWake::hash_value(CMMsl::APWake *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return sub_100012EE0((uint64_t)&v3, v1);
  }
  else {
    return 0;
  }
}

uint64_t CMMsl::ARKitWorldPose::ARKitWorldPose(uint64_t this)
{
  *(void *)this = off_1003A3ED0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(void *)this = off_1003A3ED0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void CMMsl::ARKitWorldPose::~ARKitWorldPose(CMMsl::ARKitWorldPose *this)
{
  *(void *)this = off_1003A3ED0;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ARKitWorldPose::~ARKitWorldPose(this);

  operator delete();
}

CMMsl::ARKitWorldPose *CMMsl::ARKitWorldPose::ARKitWorldPose(CMMsl::ARKitWorldPose *this, const CMMsl::ARKitWorldPose *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (char *)this + 8;
  *(void *)this = off_1003A3ED0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  char v5 = *((unsigned char *)a2 + 56);
  if (v5)
  {
    uint64_t v7 = *((void *)a2 + 4);
    char v6 = 1;
    *((unsigned char *)this + 56) = 1;
    *((void *)this + 4) = v7;
    char v5 = *((unsigned char *)a2 + 56);
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if ((*((unsigned char *)a2 + 56) & 4) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 11);
    v6 |= 4u;
    *((unsigned char *)this + 56) = v6;
    *((_DWORD *)this + 11) = v8;
    char v5 = *((unsigned char *)a2 + 56);
  }
LABEL_6:
  if ((v5 & 8) == 0)
  {
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v12 = *((_DWORD *)a2 + 12);
  v6 |= 8u;
  *((unsigned char *)this + 56) = v6;
  *((_DWORD *)this + 12) = v12;
  if ((*((unsigned char *)a2 + 56) & 0x10) != 0)
  {
LABEL_8:
    int v9 = *((_DWORD *)a2 + 13);
    *((unsigned char *)this + 56) = v6 | 0x10;
    *((_DWORD *)this + 13) = v9;
  }
LABEL_9:
  if (this != a2) {
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  if ((*((unsigned char *)a2 + 56) & 2) != 0)
  {
    int v10 = *((_DWORD *)a2 + 10);
    *((unsigned char *)this + 56) |= 2u;
    *((_DWORD *)this + 10) = v10;
  }
  return this;
}

uint64_t CMMsl::ARKitWorldPose::operator=(uint64_t a1, const CMMsl::ARKitWorldPose *a2)
{
  if ((const CMMsl::ARKitWorldPose *)a1 != a2)
  {
    CMMsl::ARKitWorldPose::ARKitWorldPose((CMMsl::ARKitWorldPose *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v4;
    uint64_t v5 = *(void *)(a1 + 44);
    *(void *)(a1 + 44) = v14;
    uint64_t v14 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    int v15 = v4;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v7;
    CMMsl::ARKitWorldPose::~ARKitWorldPose((CMMsl::ARKitWorldPose *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ARKitWorldPose *a2, CMMsl::ARKitWorldPose *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  float result = *((float *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((float *)a2 + 13) = result;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  return result;
}

uint64_t CMMsl::ARKitWorldPose::ARKitWorldPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A3ED0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::ARKitWorldPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::ARKitWorldPose::ARKitWorldPose((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v4;
    uint64_t v5 = *(void *)(a1 + 44);
    *(void *)(a1 + 44) = v14;
    uint64_t v14 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    int v15 = v4;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v7;
    CMMsl::ARKitWorldPose::~ARKitWorldPose((CMMsl::ARKitWorldPose *)&v9);
  }
  return a1;
}

uint64_t CMMsl::ARKitWorldPose::formatText(CMMsl::ARKitWorldPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  char v8 = *((unsigned char *)this + 56);
  if ((v8 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 10));
    char v8 = *((unsigned char *)this + 56);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 56) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  char v8 = *((unsigned char *)this + 56);
  if ((v8 & 4) == 0)
  {
LABEL_6:
    if ((v8 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "x", *((float *)this + 11));
  char v8 = *((unsigned char *)this + 56);
  if ((v8 & 8) == 0)
  {
LABEL_7:
    if ((v8 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "y", *((float *)this + 12));
  if ((*((unsigned char *)this + 56) & 0x10) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 13));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::ARKitWorldPose::readFrom(CMMsl::ARKitWorldPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 56) |= 1u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v23);
          goto LABEL_102;
        case 2u:
          *((unsigned char *)this + 56) |= 4u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v24);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 56) |= 8u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v25);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 56) |= 0x10u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v26);
LABEL_37:
          uint64_t v27 = *((void *)a2 + 1) + 4;
          goto LABEL_103;
        case 5u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v28 = *((void *)a2 + 1);
            unint64_t v29 = *((void *)a2 + 2);
            while (v28 < v29 && !*((unsigned char *)a2 + 24))
            {
              char v31 = (char *)*((void *)this + 2);
              unint64_t v30 = *((void *)this + 3);
              if ((unint64_t)v31 >= v30)
              {
                unint64_t v33 = (char *)*v8;
                uint64_t v34 = (v31 - (unsigned char *)*v8) >> 3;
                unint64_t v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 61) {
                  goto LABEL_114;
                }
                uint64_t v36 = v30 - (void)v33;
                if (v36 >> 2 > v35) {
                  unint64_t v35 = v36 >> 2;
                }
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v37 = v35;
                }
                if (v37)
                {
                  float v38 = (char *)sub_10000EEB0((uint64_t)v9, v37);
                  unint64_t v33 = (char *)*((void *)this + 1);
                  char v31 = (char *)*((void *)this + 2);
                }
                else
                {
                  float v38 = 0;
                }
                uint64_t v39 = &v38[8 * v34];
                *(void *)uint64_t v39 = 0;
                long long v32 = v39 + 8;
                while (v31 != v33)
                {
                  uint64_t v40 = *((void *)v31 - 1);
                  v31 -= 8;
                  *((void *)v39 - 1) = v40;
                  v39 -= 8;
                }
                *((void *)this + 1) = v39;
                *((void *)this + 2) = v32;
                *((void *)this + 3) = &v38[8 * v37];
                if (v33) {
                  operator delete(v33);
                }
              }
              else
              {
                *(void *)char v31 = 0;
                long long v32 = v31 + 8;
              }
              *((void *)this + 2) = v32;
              unint64_t v41 = *((void *)a2 + 1);
              if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v32 - 1) = *(void *)(*(void *)a2 + v41);
              unint64_t v29 = *((void *)a2 + 2);
              unint64_t v28 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v28;
            }
            PB::Reader::recallMark();
          }
          else
          {
            float v51 = (char *)*((void *)this + 2);
            unint64_t v50 = *((void *)this + 3);
            if ((unint64_t)v51 >= v50)
            {
              float v57 = (char *)*v8;
              uint64_t v58 = (v51 - (unsigned char *)*v8) >> 3;
              unint64_t v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 61) {
LABEL_114:
              }
                sub_10000EE98();
              uint64_t v60 = v50 - (void)v57;
              if (v60 >> 2 > v59) {
                unint64_t v59 = v60 >> 2;
              }
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v61 = v59;
              }
              if (v61)
              {
                float v62 = (char *)sub_10000EEB0((uint64_t)v9, v61);
                float v57 = (char *)*((void *)this + 1);
                float v51 = (char *)*((void *)this + 2);
              }
              else
              {
                float v62 = 0;
              }
              float v63 = &v62[8 * v58];
              *(void *)float v63 = 0;
              uint64_t v52 = v63 + 8;
              while (v51 != v57)
              {
                uint64_t v64 = *((void *)v51 - 1);
                v51 -= 8;
                *((void *)v63 - 1) = v64;
                v63 -= 8;
              }
              *((void *)this + 1) = v63;
              *((void *)this + 2) = v52;
              *((void *)this + 3) = &v62[8 * v61];
              if (v57) {
                operator delete(v57);
              }
            }
            else
            {
              *(void *)float v51 = 0;
              uint64_t v52 = v51 + 8;
            }
            *((void *)this + 2) = v52;
            unint64_t v65 = *((void *)a2 + 1);
            if (v65 <= 0xFFFFFFFFFFFFFFF7 && v65 + 8 <= *((void *)a2 + 2))
            {
              *(v52 - 1) = *(void *)(*(void *)a2 + v65);
LABEL_102:
              uint64_t v27 = *((void *)a2 + 1) + 8;
LABEL_103:
              *((void *)a2 + 1) = v27;
            }
            else
            {
LABEL_100:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_104:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 6u:
          *((unsigned char *)this + 56) |= 2u;
          unint64_t v42 = *((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          uint64_t v44 = *(void *)a2;
          if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
          {
            char v45 = 0;
            unsigned int v46 = 0;
            uint64_t v47 = 0;
            do
            {
              unint64_t v48 = v42 + 1;
              *((void *)a2 + 1) = v42 + 1;
              char v49 = *(unsigned char *)(v44 + v42);
              v47 |= (unint64_t)(v49 & 0x7F) << v45;
              if ((v49 & 0x80) == 0) {
                goto LABEL_89;
              }
              v45 += 7;
              unint64_t v42 = v48;
              BOOL v16 = v46++ > 8;
            }
            while (!v16);
LABEL_77:
            LODWORD(v47) = 0;
            goto LABEL_89;
          }
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v47 = 0;
          if (v43 <= v42) {
            unint64_t v43 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v43 == v42)
            {
              LODWORD(v47) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v55 = v42 + 1;
              char v56 = *(unsigned char *)(v44 + v42);
              *((void *)a2 + 1) = v55;
              v47 |= (unint64_t)(v56 & 0x7F) << v53;
              if (v56 < 0)
              {
                v53 += 7;
                unint64_t v42 = v55;
                BOOL v16 = v54++ > 8;
                if (v16) {
                  goto LABEL_77;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v47) = 0;
              }
            }
            break;
          }
LABEL_89:
          *((_DWORD *)this + 10) = v47;
          goto LABEL_104;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_104;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ARKitWorldPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 56);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_13:
      this = PB::Writer::write(a2, *(float *)(v3 + 48), 3u);
      if ((*(unsigned char *)(v3 + 56) & 0x10) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(this + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 2u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 8) != 0) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v4 & 0x10) != 0) {
LABEL_5:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 52), 4u);
LABEL_6:
  uint64_t v5 = *(double **)(v3 + 8);
  long long v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 5u);
  }
  if ((*(unsigned char *)(v3 + 56) & 2) != 0)
  {
    int v8 = *(_DWORD *)(v3 + 40);
    return PB::Writer::writeVarInt(a2, v8, 6u);
  }
  return this;
}

BOOL CMMsl::ARKitWorldPose::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if ((*(unsigned char *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 56))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 4) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 8) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 0x10) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 8);
  unint64_t v2 = *(double **)(a1 + 16);
  char v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  BOOL v5 = (*(unsigned char *)(a2 + 56) & 2) == 0;
  if ((*(unsigned char *)(a1 + 56) & 2) != 0) {
    return (*(unsigned char *)(a2 + 56) & 2) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return v5;
}

uint64_t CMMsl::ARKitWorldPose::hash_value(CMMsl::ARKitWorldPose *this)
{
  if ((*((unsigned char *)this + 56) & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 56) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v4 = 0;
    if ((*((unsigned char *)this + 56) & 8) != 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  if (*((double *)this + 4) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 4);
  }
  if ((*((unsigned char *)this + 56) & 4) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  float v3 = *((float *)this + 11);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = LODWORD(v3);
  }
  if ((*((unsigned char *)this + 56) & 8) != 0)
  {
LABEL_7:
    float v5 = *((float *)this + 12);
    if (v5 == 0.0) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = LODWORD(v5);
    }
    if ((*((unsigned char *)this + 56) & 0x10) != 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 56) & 0x10) != 0)
  {
LABEL_11:
    float v7 = *((float *)this + 13);
    if (v7 == 0.0) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = LODWORD(v7);
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v8 = 0;
LABEL_21:
  uint64_t v9 = PBHashBytes();
  if ((*((unsigned char *)this + 56) & 2) != 0) {
    uint64_t v10 = *((int *)this + 10);
  }
  else {
    uint64_t v10 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v9;
}

void *CMMsl::ARSessionState::ARSessionState(void *this)
{
  *this = off_1003A3F08;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A3F08;
  this[1] = 0;
  return this;
}

void CMMsl::ARSessionState::~ARSessionState(CMMsl::ARSessionState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::ARSessionState::ARSessionState(uint64_t this, const CMMsl::ARSessionState *a2)
{
  *(void *)this = off_1003A3F08;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(void *)this = off_1003A3F08;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::ARSessionState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = off_1003A3F08;
    int v3 = *(unsigned __int8 *)(a2 + 12);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = off_1003A3F08;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ARSessionState *a2, CMMsl::ARSessionState *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::ARSessionState::ARSessionState(uint64_t result, uint64_t a2)
{
  *(void *)float result = off_1003A3F08;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)float result = off_1003A3F08;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::ARSessionState::formatText(CMMsl::ARSessionState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ARSessionState::readFrom(CMMsl::ARSessionState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ARSessionState::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  }
  return this;
}

BOOL CMMsl::ARSessionState::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::ARSessionState::hash_value(CMMsl::ARSessionState *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t CMMsl::Accel::Accel(uint64_t this)
{
  *(void *)this = off_1003A3F40;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A3F40;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::Accel::~Accel(CMMsl::Accel *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::Accel::Accel(uint64_t this, const CMMsl::Accel *a2)
{
  *(void *)this = off_1003A3F40;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 4);
      *(unsigned char *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 28) = v7;
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::Accel::operator=(uint64_t a1, const CMMsl::Accel *a2)
{
  if ((const CMMsl::Accel *)a1 != a2)
  {
    CMMsl::Accel::Accel((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 20);
    *(void *)(a1 + 20) = v11;
    uint64_t v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    int v12 = v4;
    int v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    int v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Accel *a2, CMMsl::Accel *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  float result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

float CMMsl::Accel::Accel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A3F40;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A3F40;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Accel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v12[0] = off_1003A3F40;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 28);
    int v6 = *(_DWORD *)(a2 + 16);
    int v16 = *(_DWORD *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v12[1] = v7;
    uint64_t v8 = *(void *)(a1 + 20);
    uint64_t v9 = *(void *)(a2 + 20);
    *(_DWORD *)(a1 + 32) = v3;
    *(void *)(a1 + 20) = v9;
    uint64_t v14 = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v5;
    int v15 = v8;
    int v10 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    int v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::Accel::formatText(CMMsl::Accel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "x", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "y", *((float *)this + 6));
  if ((*((unsigned char *)this + 32) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 7));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Accel::readFrom(CMMsl::Accel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_52;
            case 2u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 3u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 4u:
              *((unsigned char *)this + 32) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_51:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_52:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_35:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_58;
            case 5u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_57;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_56:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_57;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_56;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_57;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_57:
              *((_DWORD *)this + 4) = v25;
LABEL_58:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_58;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::Accel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_11:
  int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 5u);
}

BOOL CMMsl::Accel::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::Accel::hash_value(CMMsl::Accel *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  float v2 = *((float *)this + 5);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  float v4 = *((float *)this + 6);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 0x10) != 0)
  {
LABEL_9:
    float v6 = *((float *)this + 7);
    uint64_t v7 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v7 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v8 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v8;
  }
LABEL_18:
  uint64_t v7 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v8 = *((int *)this + 4);
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v8;
}

void *CMMsl::Accel800::Accel800(void *this)
{
  *this = off_1003A3F78;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A3F78;
  this[1] = 0;
  return this;
}

void CMMsl::Accel800::~Accel800(CMMsl::Accel800 *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A3F78;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::Accel800::~Accel800(this);

  operator delete();
}

void *CMMsl::Accel800::Accel800(void *this, const CMMsl::Accel800 *a2)
{
  *this = off_1003A3F78;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::Accel800 *CMMsl::Accel800::operator=(const CMMsl::Accel800 *a1, const CMMsl::Accel800 *a2)
{
  if (a1 != a2)
  {
    CMMsl::Accel800::Accel800(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::Accel800::~Accel800((CMMsl::Accel800 *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::Accel800 *a2, CMMsl::Accel800 *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::Accel800::Accel800(void *a1, uint64_t a2)
{
  *a1 = off_1003A3F78;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A3F78;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::Accel800::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A3F78;
    v6[1] = v4;
    CMMsl::Accel800::~Accel800((CMMsl::Accel800 *)v6);
  }
  return a1;
}

uint64_t CMMsl::Accel800::formatText(CMMsl::Accel800 *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Accel800::readFrom(CMMsl::Accel800 *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Accel800::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::Accel800::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Accel::operator==(v2, v3);
  }
  return result;
}

CMMsl::Accel *CMMsl::Accel800::hash_value(CMMsl::Accel800 *this)
{
  BOOL result = (CMMsl::Accel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::Accel800::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccelBatch::AccelBatch(uint64_t this)
{
  *(void *)this = off_1003A3FB0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A3FB0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccelBatch::~AccelBatch(CMMsl::AccelBatch *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::AccelBatch::AccelBatch(uint64_t this, const CMMsl::AccelBatch *a2)
{
  *(void *)this = off_1003A3FB0;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 4);
      *(unsigned char *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 28) = v7;
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::AccelBatch::operator=(uint64_t a1, const CMMsl::AccelBatch *a2)
{
  if ((const CMMsl::AccelBatch *)a1 != a2)
  {
    CMMsl::AccelBatch::AccelBatch((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 20);
    *(void *)(a1 + 20) = v11;
    uint64_t v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    int v12 = v4;
    int v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    int v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccelBatch *a2, CMMsl::AccelBatch *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  float result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

float CMMsl::AccelBatch::AccelBatch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A3FB0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A3FB0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::AccelBatch::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v12[0] = off_1003A3FB0;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 28);
    int v6 = *(_DWORD *)(a2 + 16);
    int v16 = *(_DWORD *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v12[1] = v7;
    uint64_t v8 = *(void *)(a1 + 20);
    uint64_t v9 = *(void *)(a2 + 20);
    *(_DWORD *)(a1 + 32) = v3;
    *(void *)(a1 + 20) = v9;
    uint64_t v14 = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v5;
    int v15 = v8;
    int v10 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    int v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::AccelBatch::formatText(CMMsl::AccelBatch *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "batch", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "x", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "y", *((float *)this + 6));
  if ((*((unsigned char *)this + 32) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 7));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelBatch::readFrom(CMMsl::AccelBatch *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_52;
            case 2u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 3u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 4u:
              *((unsigned char *)this + 32) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_51:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_52:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_35:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_58;
            case 5u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_57;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_56:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_57;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_56;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_57;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_57:
              *((_DWORD *)this + 4) = v25;
LABEL_58:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_58;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelBatch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_11:
  unsigned int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 5u);
}

BOOL CMMsl::AccelBatch::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::AccelBatch::hash_value(CMMsl::AccelBatch *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  float v2 = *((float *)this + 5);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  float v4 = *((float *)this + 6);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 0x10) != 0)
  {
LABEL_9:
    float v6 = *((float *)this + 7);
    uint64_t v7 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v7 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v8 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v8;
  }
LABEL_18:
  uint64_t v7 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v8 = *((unsigned int *)this + 4);
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v8;
}

void *CMMsl::AccelGesture::AccelGesture(void *this)
{
  *this = off_1003A3FE8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A3FE8;
  this[1] = 0;
  return this;
}

void CMMsl::AccelGesture::~AccelGesture(CMMsl::AccelGesture *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A3FE8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccelGesture::~AccelGesture(this);

  operator delete();
}

void *CMMsl::AccelGesture::AccelGesture(void *this, const CMMsl::AccelGesture *a2)
{
  *this = off_1003A3FE8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AccelGesture *CMMsl::AccelGesture::operator=(const CMMsl::AccelGesture *a1, const CMMsl::AccelGesture *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccelGesture::AccelGesture(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AccelGesture::~AccelGesture((CMMsl::AccelGesture *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccelGesture *a2, CMMsl::AccelGesture *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AccelGesture::AccelGesture(void *a1, uint64_t a2)
{
  *a1 = off_1003A3FE8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A3FE8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::AccelGesture::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A3FE8;
    v6[1] = v4;
    CMMsl::AccelGesture::~AccelGesture((CMMsl::AccelGesture *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccelGesture::formatText(CMMsl::AccelGesture *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelGesture::readFrom(CMMsl::AccelGesture *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelGesture::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::AccelGesture::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Accel::operator==(v2, v3);
  }
  return result;
}

CMMsl::Accel *CMMsl::AccelGesture::hash_value(CMMsl::AccelGesture *this)
{
  BOOL result = (CMMsl::Accel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::AccelGesture::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccelGps::AccelGps(uint64_t this)
{
  *(void *)this = off_1003A4020;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A4020;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::AccelGps::~AccelGps(CMMsl::AccelGps *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::AccelGps::AccelGps(CMMsl::AccelGps *this, const CMMsl::AccelGps *a2)
{
  *(void *)this = off_1003A4020;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((unsigned char *)a2 + 28) & 8) == 0) {
      return *(float *)&v4;
    }
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::AccelGps::operator=(uint64_t a1, const CMMsl::AccelGps *a2)
{
  if ((const CMMsl::AccelGps *)a1 != a2)
  {
    CMMsl::AccelGps::AccelGps((CMMsl::AccelGps *)&v9, a2);
    uint64_t v3 = v11;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v3;
    int v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v6;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccelGps *a2, CMMsl::AccelGps *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::AccelGps::AccelGps(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4020;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A4020;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::AccelGps::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v9[0] = off_1003A4020;
    int v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    v9[2] = v6;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::AccelGps::formatText(CMMsl::AccelGps *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "y", *((float *)this + 5));
  if ((*((unsigned char *)this + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 6));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelGps::readFrom(CMMsl::AccelGps *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 28) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 28) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 28) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 28) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_38:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelGps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(a2, v5, 4u);
}

BOOL CMMsl::AccelGps::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 8) == 0;
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
    return (*(unsigned char *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::AccelGps::hash_value(CMMsl::AccelGps *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 5);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 6);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7;
}

void *CMMsl::AccelOscarEmu::AccelOscarEmu(void *this)
{
  *this = off_1003A4058;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A4058;
  this[1] = 0;
  return this;
}

void CMMsl::AccelOscarEmu::~AccelOscarEmu(CMMsl::AccelOscarEmu *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A4058;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccelOscarEmu::~AccelOscarEmu(this);

  operator delete();
}

void *CMMsl::AccelOscarEmu::AccelOscarEmu(void *this, const CMMsl::AccelOscarEmu *a2)
{
  *this = off_1003A4058;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AccelOscarEmu *CMMsl::AccelOscarEmu::operator=(const CMMsl::AccelOscarEmu *a1, const CMMsl::AccelOscarEmu *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccelOscarEmu::AccelOscarEmu(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AccelOscarEmu::~AccelOscarEmu((CMMsl::AccelOscarEmu *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccelOscarEmu *a2, CMMsl::AccelOscarEmu *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AccelOscarEmu::AccelOscarEmu(void *a1, uint64_t a2)
{
  *a1 = off_1003A4058;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A4058;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::AccelOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A4058;
    v6[1] = v4;
    CMMsl::AccelOscarEmu::~AccelOscarEmu((CMMsl::AccelOscarEmu *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccelOscarEmu::formatText(CMMsl::AccelOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelOscarEmu::readFrom(CMMsl::AccelOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::AccelOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Accel::operator==(v2, v3);
  }
  return result;
}

CMMsl::Accel *CMMsl::AccelOscarEmu::hash_value(CMMsl::AccelOscarEmu *this)
{
  BOOL result = (CMMsl::Accel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::AccelOscarEmu::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

double CMMsl::AccelTNBFrame::AccelTNBFrame(CMMsl::AccelTNBFrame *this)
{
  *(void *)this = off_1003A4090;
  *((_DWORD *)this + 29) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A4090;
  *((_DWORD *)this + 29) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

void CMMsl::AccelTNBFrame::~AccelTNBFrame(CMMsl::AccelTNBFrame *this)
{
  *(void *)this = off_1003A4090;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccelTNBFrame::~AccelTNBFrame(this);

  operator delete();
}

CMMsl::AccelTNBFrame *CMMsl::AccelTNBFrame::AccelTNBFrame(CMMsl::AccelTNBFrame *this, const CMMsl::AccelTNBFrame *a2)
{
  *(void *)this = off_1003A4090;
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (char *)this + 8;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  if (this != a2)
  {
    sub_100024308((char *)this + 56, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  char v5 = *((unsigned char *)a2 + 116);
  if ((v5 & 2) != 0)
  {
    uint64_t v8 = *((void *)a2 + 11);
    *((unsigned char *)this + 116) |= 2u;
    *((void *)this + 11) = v8;
    char v5 = *((unsigned char *)a2 + 116);
    if ((v5 & 1) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)a2 + 116) & 1) == 0)
  {
    goto LABEL_5;
  }
  uint64_t v9 = *((void *)a2 + 10);
  *((unsigned char *)this + 116) |= 1u;
  *((void *)this + 10) = v9;
  char v5 = *((unsigned char *)a2 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    char v11 = *((unsigned char *)a2 + 112);
    *((unsigned char *)this + 116) |= 0x10u;
    *((unsigned char *)this + 112) = v11;
    if ((*((unsigned char *)a2 + 116) & 4) == 0) {
      return this;
    }
    goto LABEL_8;
  }
LABEL_12:
  uint64_t v10 = *((void *)a2 + 13);
  *((unsigned char *)this + 116) |= 8u;
  *((void *)this + 13) = v10;
  char v5 = *((unsigned char *)a2 + 116);
  if ((v5 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_7:
  if ((v5 & 4) != 0)
  {
LABEL_8:
    uint64_t v6 = *((void *)a2 + 12);
    *((unsigned char *)this + 116) |= 4u;
    *((void *)this + 12) = v6;
  }
  return this;
}

CMMsl *CMMsl::AccelTNBFrame::operator=(CMMsl *a1, const CMMsl::AccelTNBFrame *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccelTNBFrame::AccelTNBFrame((CMMsl::AccelTNBFrame *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccelTNBFrame *)v5, v3);
    CMMsl::AccelTNBFrame::~AccelTNBFrame((CMMsl::AccelTNBFrame *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccelTNBFrame *a2, CMMsl::AccelTNBFrame *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v5;
  uint64_t v6 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  uint64_t v11 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v11;
  uint64_t v12 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v12;
  uint64_t v13 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v14;
  uint64_t v15 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  LOBYTE(v12) = *((unsigned char *)this + 112);
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((unsigned char *)a2 + 112) = v12;
  double result = *((double *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((double *)a2 + 12) = result;
  return result;
}

uint64_t CMMsl::AccelTNBFrame::AccelTNBFrame(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4090;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  sub_100274A30(v5, (__n128 *)(a2 + 8));
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

CMMsl *CMMsl::AccelTNBFrame::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccelTNBFrame::AccelTNBFrame((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccelTNBFrame *)v5, v3);
    CMMsl::AccelTNBFrame::~AccelTNBFrame((CMMsl::AccelTNBFrame *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccelTNBFrame::formatText(CMMsl::AccelTNBFrame *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "B", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "N", v10);
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "T", v13);
  }
  char v14 = *((unsigned char *)this + 116);
  if (v14)
  {
    PB::TextFormatter::format(a2, "curvature", *((double *)this + 10));
    char v14 = *((unsigned char *)this + 116);
    if ((v14 & 0x10) == 0)
    {
LABEL_9:
      if ((v14 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }
  }
  else if ((*((unsigned char *)this + 116) & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "isValid", *((unsigned char *)this + 112));
  char v14 = *((unsigned char *)this + 116);
  if ((v14 & 2) == 0)
  {
LABEL_10:
    if ((v14 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "jerkNorm", *((double *)this + 11));
  char v14 = *((unsigned char *)this + 116);
  if ((v14 & 4) == 0)
  {
LABEL_11:
    if ((v14 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 12));
  if ((*((unsigned char *)this + 116) & 8) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "torsion", *((double *)this + 13));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccelTNBFrame::readFrom(CMMsl::AccelTNBFrame *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 8);
    uint64_t v9 = (void **)((char *)this + 32);
    char v109 = (char *)this + 48;
    unsigned int v110 = (char *)this + 24;
    float v10 = (void **)((char *)this + 56);
    uint64_t v11 = (char *)this + 72;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          if (v24 != 2)
          {
            BOOL v77 = (char *)*((void *)this + 8);
            unint64_t v76 = *((void *)this + 9);
            if ((unint64_t)v77 >= v76)
            {
              float v83 = (char *)*v10;
              uint64_t v84 = (v77 - (unsigned char *)*v10) >> 2;
              unint64_t v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 62) {
LABEL_180:
              }
                sub_10000EE98();
              uint64_t v86 = v76 - (void)v83;
              if (v86 >> 1 > v85) {
                unint64_t v85 = v86 >> 1;
              }
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v87 = v85;
              }
              if (v87)
              {
                float v88 = (char *)sub_100024458((uint64_t)v11, v87);
                float v83 = (char *)*((void *)this + 7);
                BOOL v77 = (char *)*((void *)this + 8);
              }
              else
              {
                float v88 = 0;
              }
              char v101 = &v88[4 * v84];
              *(_DWORD *)char v101 = 0;
              float v78 = v101 + 4;
              while (v77 != v83)
              {
                int v102 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *((_DWORD *)v101 - 1) = v102;
                v101 -= 4;
              }
              *((void *)this + 7) = v101;
              *((void *)this + 8) = v78;
              *((void *)this + 9) = &v88[4 * v87];
              if (v83) {
                operator delete(v83);
              }
            }
            else
            {
              *(_DWORD *)BOOL v77 = 0;
              float v78 = v77 + 4;
            }
            *((void *)this + 8) = v78;
            goto LABEL_167;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v25 = *((void *)a2 + 1);
          unint64_t v26 = *((void *)a2 + 2);
          while (v25 < v26 && !*((unsigned char *)a2 + 24))
          {
            unsigned int v28 = (char *)*((void *)this + 8);
            unint64_t v27 = *((void *)this + 9);
            if ((unint64_t)v28 >= v27)
            {
              char v30 = (char *)*v10;
              uint64_t v31 = (v28 - (unsigned char *)*v10) >> 2;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62) {
                goto LABEL_180;
              }
              uint64_t v33 = v27 - (void)v30;
              if (v33 >> 1 > v32) {
                unint64_t v32 = v33 >> 1;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34)
              {
                unint64_t v35 = (char *)sub_100024458((uint64_t)v11, v34);
                char v30 = (char *)*((void *)this + 7);
                unsigned int v28 = (char *)*((void *)this + 8);
              }
              else
              {
                unint64_t v35 = 0;
              }
              uint64_t v36 = &v35[4 * v31];
              *(_DWORD *)uint64_t v36 = 0;
              unint64_t v29 = v36 + 4;
              while (v28 != v30)
              {
                int v37 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *((_DWORD *)v36 - 1) = v37;
                v36 -= 4;
              }
              *((void *)this + 7) = v36;
              *((void *)this + 8) = v29;
              *((void *)this + 9) = &v35[4 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v28 = 0;
              unint64_t v29 = v28 + 4;
            }
            *((void *)this + 8) = v29;
            unint64_t v38 = *((void *)a2 + 1);
            if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
              goto LABEL_120;
            }
            *(v29 - 1) = *(_DWORD *)(*(void *)a2 + v38);
            unint64_t v26 = *((void *)a2 + 2);
            unint64_t v25 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v25;
          }
          goto LABEL_121;
        case 2u:
          if (v24 != 2)
          {
            float v80 = (char *)*((void *)this + 5);
            unint64_t v79 = *((void *)this + 6);
            if ((unint64_t)v80 >= v79)
            {
              float v89 = (char *)*v9;
              uint64_t v90 = (v80 - (unsigned char *)*v9) >> 2;
              unint64_t v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 62) {
LABEL_181:
              }
                sub_10000EE98();
              uint64_t v92 = v79 - (void)v89;
              if (v92 >> 1 > v91) {
                unint64_t v91 = v92 >> 1;
              }
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v93 = v91;
              }
              if (v93)
              {
                float32x4_t v94 = (char *)sub_100024458((uint64_t)v109, v93);
                float v89 = (char *)*((void *)this + 4);
                float v80 = (char *)*((void *)this + 5);
              }
              else
              {
                float32x4_t v94 = 0;
              }
              unint64_t v103 = &v94[4 * v90];
              *(_DWORD *)unint64_t v103 = 0;
              float v78 = v103 + 4;
              while (v80 != v89)
              {
                int v104 = *((_DWORD *)v80 - 1);
                v80 -= 4;
                *((_DWORD *)v103 - 1) = v104;
                v103 -= 4;
              }
              *((void *)this + 4) = v103;
              *((void *)this + 5) = v78;
              *((void *)this + 6) = &v94[4 * v93];
              if (v89) {
                operator delete(v89);
              }
            }
            else
            {
              *(_DWORD *)float v80 = 0;
              float v78 = v80 + 4;
            }
            *((void *)this + 5) = v78;
            goto LABEL_167;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v39 = *((void *)a2 + 1);
          unint64_t v40 = *((void *)a2 + 2);
          while (v39 < v40 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v42 = (char *)*((void *)this + 5);
            unint64_t v41 = *((void *)this + 6);
            if ((unint64_t)v42 >= v41)
            {
              uint64_t v44 = (char *)*v9;
              uint64_t v45 = (v42 - (unsigned char *)*v9) >> 2;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62) {
                goto LABEL_181;
              }
              uint64_t v47 = v41 - (void)v44;
              if (v47 >> 1 > v46) {
                unint64_t v46 = v47 >> 1;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                char v49 = (char *)sub_100024458((uint64_t)v109, v48);
                uint64_t v44 = (char *)*((void *)this + 4);
                unint64_t v42 = (char *)*((void *)this + 5);
              }
              else
              {
                char v49 = 0;
              }
              unint64_t v50 = &v49[4 * v45];
              *(_DWORD *)unint64_t v50 = 0;
              unint64_t v43 = v50 + 4;
              while (v42 != v44)
              {
                int v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *((void *)this + 4) = v50;
              *((void *)this + 5) = v43;
              *((void *)this + 6) = &v49[4 * v48];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v42 = 0;
              unint64_t v43 = v42 + 4;
            }
            *((void *)this + 5) = v43;
            unint64_t v52 = *((void *)a2 + 1);
            if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)a2 + 2)) {
              goto LABEL_120;
            }
            *(v43 - 1) = *(_DWORD *)(*(void *)a2 + v52);
            unint64_t v40 = *((void *)a2 + 2);
            unint64_t v39 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v39;
          }
          goto LABEL_121;
        case 3u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v53 = *((void *)a2 + 1);
            unint64_t v54 = *((void *)a2 + 2);
            while (v53 < v54 && !*((unsigned char *)a2 + 24))
            {
              char v56 = (char *)*((void *)this + 2);
              unint64_t v55 = *((void *)this + 3);
              if ((unint64_t)v56 >= v55)
              {
                uint64_t v58 = (char *)*v8;
                uint64_t v59 = (v56 - (unsigned char *)*v8) >> 2;
                unint64_t v60 = v59 + 1;
                if ((unint64_t)(v59 + 1) >> 62) {
                  goto LABEL_182;
                }
                uint64_t v61 = v55 - (void)v58;
                if (v61 >> 1 > v60) {
                  unint64_t v60 = v61 >> 1;
                }
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v62 = v60;
                }
                if (v62)
                {
                  float v63 = (char *)sub_100024458((uint64_t)v110, v62);
                  uint64_t v58 = (char *)*((void *)this + 1);
                  char v56 = (char *)*((void *)this + 2);
                }
                else
                {
                  float v63 = 0;
                }
                uint64_t v64 = &v63[4 * v59];
                *(_DWORD *)uint64_t v64 = 0;
                float v57 = v64 + 4;
                while (v56 != v58)
                {
                  int v65 = *((_DWORD *)v56 - 1);
                  v56 -= 4;
                  *((_DWORD *)v64 - 1) = v65;
                  v64 -= 4;
                }
                *((void *)this + 1) = v64;
                *((void *)this + 2) = v57;
                *((void *)this + 3) = &v63[4 * v62];
                if (v58) {
                  operator delete(v58);
                }
              }
              else
              {
                *(_DWORD *)char v56 = 0;
                float v57 = v56 + 4;
              }
              *((void *)this + 2) = v57;
              unint64_t v66 = *((void *)a2 + 1);
              if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)a2 + 2))
              {
LABEL_120:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v57 - 1) = *(_DWORD *)(*(void *)a2 + v66);
              unint64_t v54 = *((void *)a2 + 2);
              unint64_t v53 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v53;
            }
LABEL_121:
            PB::Reader::recallMark();
          }
          else
          {
            float v82 = (char *)*((void *)this + 2);
            unint64_t v81 = *((void *)this + 3);
            if ((unint64_t)v82 >= v81)
            {
              float32x4_t v95 = (char *)*v8;
              uint64_t v96 = (v82 - (unsigned char *)*v8) >> 2;
              unint64_t v97 = v96 + 1;
              if ((unint64_t)(v96 + 1) >> 62) {
LABEL_182:
              }
                sub_10000EE98();
              uint64_t v98 = v81 - (void)v95;
              if (v98 >> 1 > v97) {
                unint64_t v97 = v98 >> 1;
              }
              if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v99 = v97;
              }
              if (v99)
              {
                char v100 = (char *)sub_100024458((uint64_t)v110, v99);
                float32x4_t v95 = (char *)*((void *)this + 1);
                float v82 = (char *)*((void *)this + 2);
              }
              else
              {
                char v100 = 0;
              }
              char v105 = &v100[4 * v96];
              *(_DWORD *)char v105 = 0;
              float v78 = v105 + 4;
              while (v82 != v95)
              {
                int v106 = *((_DWORD *)v82 - 1);
                v82 -= 4;
                *((_DWORD *)v105 - 1) = v106;
                v105 -= 4;
              }
              *((void *)this + 1) = v105;
              *((void *)this + 2) = v78;
              *((void *)this + 3) = &v100[4 * v99];
              if (v95) {
                operator delete(v95);
              }
            }
            else
            {
              *(_DWORD *)float v82 = 0;
              float v78 = v82 + 4;
            }
            *((void *)this + 2) = v78;
LABEL_167:
            unint64_t v107 = *((void *)a2 + 1);
            if (v107 <= 0xFFFFFFFFFFFFFFFBLL && v107 + 4 <= *((void *)a2 + 2))
            {
              *(v78 - 1) = *(_DWORD *)(*(void *)a2 + v107);
              uint64_t v75 = *((void *)a2 + 1) + 4;
LABEL_171:
              *((void *)a2 + 1) = v75;
            }
            else
            {
LABEL_169:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_172:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 4u:
          *((unsigned char *)this + 116) |= 2u;
          unint64_t v67 = *((void *)a2 + 1);
          if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v67);
          goto LABEL_111;
        case 5u:
          *((unsigned char *)this + 116) |= 1u;
          unint64_t v68 = *((void *)a2 + 1);
          if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v68);
          goto LABEL_111;
        case 6u:
          *((unsigned char *)this + 116) |= 8u;
          unint64_t v69 = *((void *)a2 + 1);
          if (v69 > 0xFFFFFFFFFFFFFFF7 || v69 + 8 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v69);
          goto LABEL_111;
        case 7u:
          *((unsigned char *)this + 116) |= 0x10u;
          unint64_t v70 = *((void *)a2 + 1);
          if (v70 >= *((void *)a2 + 2))
          {
            BOOL v73 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v71 = v70 + 1;
            int v72 = *(unsigned __int8 *)(*(void *)a2 + v70);
            *((void *)a2 + 1) = v71;
            BOOL v73 = v72 != 0;
          }
          *((unsigned char *)this + 112) = v73;
          goto LABEL_172;
        case 8u:
          *((unsigned char *)this + 116) |= 4u;
          unint64_t v74 = *((void *)a2 + 1);
          if (v74 > 0xFFFFFFFFFFFFFFF7 || v74 + 8 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((void *)this + 12) = *(void *)(*(void *)a2 + v74);
LABEL_111:
          uint64_t v75 = *((void *)a2 + 1) + 8;
          goto LABEL_171;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_172;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelTNBFrame::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(float **)(this + 56);
  uint64_t v5 = *(float **)(this + 64);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  float v10 = *(float **)(v3 + 8);
  uint64_t v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12, 3u);
  }
  char v13 = *(unsigned char *)(v3 + 116);
  if ((v13 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 88), 4u);
    char v13 = *(unsigned char *)(v3 + 116);
    if ((v13 & 1) == 0)
    {
LABEL_12:
      if ((v13 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_18;
    }
  }
  else if ((*(unsigned char *)(v3 + 116) & 1) == 0)
  {
    goto LABEL_12;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 5u);
  char v13 = *(unsigned char *)(v3 + 116);
  if ((v13 & 8) == 0)
  {
LABEL_13:
    if ((v13 & 0x10) == 0) {
      goto LABEL_14;
    }
LABEL_19:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 112), 7u);
    if ((*(unsigned char *)(v3 + 116) & 4) == 0) {
      return this;
    }
    goto LABEL_20;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 6u);
  char v13 = *(unsigned char *)(v3 + 116);
  if ((v13 & 0x10) != 0) {
    goto LABEL_19;
  }
LABEL_14:
  if ((v13 & 4) == 0) {
    return this;
  }
LABEL_20:
  double v14 = *(double *)(v3 + 96);

  return PB::Writer::write(a2, v14, 8u);
}

BOOL CMMsl::AccelTNBFrame::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(float **)(a1 + 56);
  unint64_t v2 = *(float **)(a1 + 64);
  int v4 = *(float **)(a2 + 56);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 64) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  float v6 = *(float **)(a1 + 32);
  uint64_t v5 = *(float **)(a1 + 40);
  float v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  float v9 = *(float **)(a1 + 8);
  uint64_t v8 = *(float **)(a1 + 16);
  float v10 = *(float **)(a2 + 8);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 16) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  if ((*(unsigned char *)(a1 + 116) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 116) & 2) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 116) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 116))
  {
    if ((*(unsigned char *)(a2 + 116) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 116))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 116) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 116) & 8) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 116) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 116) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 116) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 116) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v11 = (*(unsigned char *)(a2 + 116) & 4) == 0;
  if ((*(unsigned char *)(a1 + 116) & 4) != 0) {
    return (*(unsigned char *)(a2 + 116) & 4) != 0 && *(double *)(a1 + 96) == *(double *)(a2 + 96);
  }
  return v11;
}

uint64_t CMMsl::AccelTNBFrame::hash_value(CMMsl::AccelTNBFrame *this)
{
  uint64_t v2 = PBHashBytes();
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 116) & 2) == 0)
  {
    double v5 = 0.0;
    if (*((unsigned char *)this + 116)) {
      goto LABEL_3;
    }
LABEL_16:
    double v6 = 0.0;
    if ((*((unsigned char *)this + 116) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    double v7 = 0.0;
    if ((*((unsigned char *)this + 116) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v5 = *((double *)this + 11);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((unsigned char *)this + 116) & 1) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  double v6 = *((double *)this + 10);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((unsigned char *)this + 116) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  double v7 = *((double *)this + 13);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((unsigned char *)this + 116) & 0x10) != 0)
  {
LABEL_9:
    uint64_t v8 = *((unsigned __int8 *)this + 112);
    if ((*((unsigned char *)this + 116) & 4) != 0) {
      goto LABEL_10;
    }
LABEL_19:
    double v9 = 0.0;
    return v3 ^ v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ *(void *)&v9;
  }
LABEL_18:
  uint64_t v8 = 0;
  if ((*((unsigned char *)this + 116) & 4) == 0) {
    goto LABEL_19;
  }
LABEL_10:
  double v9 = *((double *)this + 12);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ *(void *)&v9;
}

uint64_t CMMsl::AccelerometerPace::AccelerometerPace(uint64_t this)
{
  *(void *)this = off_1003A40C8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A40C8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccelerometerPace::~AccelerometerPace(CMMsl::AccelerometerPace *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::AccelerometerPace::AccelerometerPace(CMMsl::AccelerometerPace *this, const CMMsl::AccelerometerPace *a2)
{
  *(void *)this = off_1003A40C8;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 32) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    *((unsigned char *)this + 32) = v3 | 4;
    *((double *)this + 3) = result;
  }
  return result;
}

uint64_t CMMsl::AccelerometerPace::operator=(uint64_t a1, const CMMsl::AccelerometerPace *a2)
{
  if ((const CMMsl::AccelerometerPace *)a1 != a2)
  {
    CMMsl::AccelerometerPace::AccelerometerPace((CMMsl::AccelerometerPace *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccelerometerPace *a2, CMMsl::AccelerometerPace *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::AccelerometerPace::AccelerometerPace(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A40C8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A40C8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::AccelerometerPace::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A40C8;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    int v11 = *(_DWORD *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::AccelerometerPace::formatText(CMMsl::AccelerometerPace *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "calibrated", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "lowerBound", *((double *)this + 2));
  if ((*((unsigned char *)this + 32) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "upperBound", *((double *)this + 3));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelerometerPace::readFrom(CMMsl::AccelerometerPace *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_32;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_32;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_37;
        }
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_32:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_37;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_37:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelerometerPace::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 32) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
    if ((*(unsigned char *)(v3 + 32) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(a2, v5, 3u);
}

BOOL CMMsl::AccelerometerPace::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 4) == 0;
  if ((*(unsigned char *)(a1 + 32) & 4) != 0) {
    return (*(unsigned char *)(a2 + 32) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::AccelerometerPace::hash_value(CMMsl::AccelerometerPace *this)
{
  if (*((unsigned char *)this + 32))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 2);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 32) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_13:
      double v3 = 0.0;
      return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  double v3 = *((double *)this + 3);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3;
}

uint64_t CMMsl::AccessoryAccel::AccessoryAccel(uint64_t this)
{
  *(void *)this = off_1003A4100;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A4100;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessoryAccel::~AccessoryAccel(CMMsl::AccessoryAccel *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A4100;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryAccel::~AccessoryAccel(this);

  operator delete();
}

uint64_t CMMsl::AccessoryAccel::AccessoryAccel(uint64_t this, const CMMsl::AccessoryAccel *a2)
{
  *(void *)this = off_1003A4100;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 32) |= 2u;
    *(_DWORD *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 1) == 0) {
        return this;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)a2 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  int v5 = *((_DWORD *)a2 + 7);
  *(unsigned char *)(this + 32) |= 4u;
  *(_DWORD *)(this + 28) = v5;
  if ((*((unsigned char *)a2 + 32) & 1) == 0) {
    return this;
  }
LABEL_6:
  uint64_t v3 = *((void *)a2 + 2);
  *(unsigned char *)(this + 32) |= 1u;
  *(void *)(this + 16) = v3;
  return this;
}

uint64_t CMMsl::AccessoryAccel::operator=(uint64_t a1, const CMMsl::AccessoryAccel *a2)
{
  if ((const CMMsl::AccessoryAccel *)a1 != a2)
  {
    CMMsl::AccessoryAccel::AccessoryAccel((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = v11;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v7;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    CMMsl::AccessoryAccel::~AccessoryAccel((CMMsl::AccessoryAccel *)v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryAccel *a2, CMMsl::AccessoryAccel *a3)
{
  int v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v4 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  int v5 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  uint64_t v6 = *(void *)(this + 8);
  uint64_t v7 = *(void *)(this + 16);
  uint64_t v8 = *((void *)a2 + 2);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *(void *)(this + 16) = v8;
  *((_DWORD *)a2 + 7) = v5;
  *((void *)a2 + 1) = v6;
  *((void *)a2 + 2) = v7;
  return this;
}

uint64_t CMMsl::AccessoryAccel::AccessoryAccel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4100;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AccessoryAccel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryAccel::AccessoryAccel((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = v11;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v7;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    CMMsl::AccessoryAccel::~AccessoryAccel((CMMsl::AccessoryAccel *)v9);
  }
  return a1;
}

uint64_t CMMsl::AccessoryAccel::formatText(CMMsl::AccessoryAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "accel");
  }
  char v6 = *((unsigned char *)this + 32);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 6));
    char v6 = *((unsigned char *)this + 32);
    if ((v6 & 1) == 0)
    {
LABEL_5:
      if ((v6 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 2));
  if ((*((unsigned char *)this + 32) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 7));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryAccel::readFrom(CMMsl::AccessoryAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v21 = *((void *)a2 + 1);
          unint64_t v22 = *((void *)a2 + 2);
          uint64_t v23 = *(void *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            do
            {
              unint64_t v27 = v21 + 1;
              *((void *)a2 + 1) = v21 + 1;
              char v28 = *(unsigned char *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0) {
                goto LABEL_72;
              }
              v24 += 7;
              unint64_t v21 = v27;
              BOOL v14 = v25++ > 8;
            }
            while (!v14);
LABEL_52:
            LODWORD(v26) = 0;
            goto LABEL_72;
          }
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v47 = v21 + 1;
              char v48 = *(unsigned char *)(v23 + v21);
              *((void *)a2 + 1) = v47;
              v26 |= (unint64_t)(v48 & 0x7F) << v45;
              if (v48 < 0)
              {
                v45 += 7;
                unint64_t v21 = v47;
                BOOL v14 = v46++ > 8;
                if (v14) {
                  goto LABEL_52;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v26) = 0;
              }
            }
            break;
          }
LABEL_72:
          *((_DWORD *)this + 6) = v26;
          goto LABEL_79;
        case 3u:
          *((unsigned char *)this + 32) |= 4u;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_75;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_59:
            LODWORD(v34) = 0;
            goto LABEL_75;
          }
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v51 = v29 + 1;
              char v52 = *(unsigned char *)(v31 + v29);
              *((void *)a2 + 1) = v51;
              v34 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                unint64_t v29 = v51;
                BOOL v14 = v50++ > 8;
                if (v14) {
                  goto LABEL_59;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_75:
          *((_DWORD *)this + 7) = v34;
          goto LABEL_79;
        case 4u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          uint64_t v39 = *(void *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)a2 + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_78;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_66:
            uint64_t v42 = 0;
            goto LABEL_78;
          }
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)a2 + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_79;
      }
      while (1)
      {
        if (v38 == v37)
        {
          uint64_t v42 = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_78;
        }
        unint64_t v55 = v37 + 1;
        char v56 = *(unsigned char *)(v39 + v37);
        *((void *)a2 + 1) = v55;
        v42 |= (unint64_t)(v56 & 0x7F) << v53;
        if ((v56 & 0x80) == 0) {
          break;
        }
        v53 += 7;
        unint64_t v37 = v55;
        BOOL v14 = v54++ > 8;
        if (v14) {
          goto LABEL_66;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        uint64_t v42 = 0;
      }
LABEL_78:
      *((void *)this + 2) = v42;
LABEL_79:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  char v5 = *(unsigned char *)(v3 + 32);
  if ((v5 & 2) == 0)
  {
    if ((*(unsigned char *)(v3 + 32) & 4) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 3u);
    if ((*(unsigned char *)(v3 + 32) & 1) == 0) {
      return this;
    }
    goto LABEL_9;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
  char v5 = *(unsigned char *)(v3 + 32);
  if ((v5 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_5:
  if ((v5 & 1) == 0) {
    return this;
  }
LABEL_9:
  unint64_t v6 = *(void *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v6, 4u);
}

BOOL CMMsl::AccessoryAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::Accel::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 32) & 1) == 0;
  if ((*(unsigned char *)(a1 + 32) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 32) & 1) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

unint64_t CMMsl::AccessoryAccel::hash_value(CMMsl::AccessoryAccel *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::Accel::hash_value((CMMsl::Accel *)v2);
  }
  if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v4 = 0;
    if (*((unsigned char *)this + 32)) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v5 = 0;
    return v3 ^ v2 ^ v4 ^ v5;
  }
  uint64_t v3 = *((unsigned int *)this + 6);
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 7);
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v5 = *((void *)this + 2);
  return v3 ^ v2 ^ v4 ^ v5;
}

uint64_t CMMsl::AccessoryAccel::makeAccel(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(void *this)
{
  *this = off_1003A4138;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003A4138;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig(CMMsl::AccessoryAccelConfig *this)
{
  *(void *)this = off_1003A4138;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    sub_100012E84((uint64_t)this + 16, v3);
  }
  sub_100274BC4((void ***)this + 1, 0);

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig(this);

  operator delete();
}

void *CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(void *this, const CMMsl::AccessoryAccelConfig *a2)
{
  this[1] = 0;
  *this = off_1003A4138;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryAccelConfig::operator=(uint64_t a1, const CMMsl::AccessoryAccelConfig *a2)
{
  if ((const CMMsl::AccessoryAccelConfig *)a1 != a2)
  {
    CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig((CMMsl::AccessoryAccelConfig *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::AccessoryAccelConfig *a2, CMMsl::AccessoryAccelConfig *a3)
{
  uint64_t v3 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  return this;
}

void *CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(void *a1, void *a2)
{
  a1[1] = 0;
  uint64_t v4 = (void ***)(a1 + 1);
  a1[2] = 0;
  uint64_t v5 = a1 + 2;
  *a1 = off_1003A4138;
  a1[3] = 0;
  uint64_t v6 = a2[3];
  a2[3] = 0;
  uint64_t v7 = a1[3];
  a1[3] = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = (void **)a2[1];
  a2[1] = 0;
  sub_100274BC4(v4, v8);
  uint64_t v9 = a2[2];
  a2[2] = 0;
  uint64_t v10 = *v5;
  uint64_t *v5 = v9;
  if (v10) {
    sub_100012E84((uint64_t)v5, v10);
  }
  return a1;
}

uint64_t CMMsl::AccessoryAccelConfig::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig((CMMsl::AccessoryAccelConfig *)&v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryAccelConfig::formatText(CMMsl::AccessoryAccelConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "config");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryAccelConfig::readFrom(CMMsl::AccessoryAccelConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        operator new();
      }
      if (v19 == 2) {
        operator new();
      }
      if (v19 == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v19, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryConfig::AccessoryConfig(uint64_t this)
{
  *(void *)this = off_1003A41E0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A41E0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::AccessoryAccelConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 24);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  if (*(void *)(v3 + 8)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v3 + 16))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t CMMsl::AccessoryAccelConfig::operator==(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a2[3];
  if (v4)
  {
    if (!v5 || !CMMsl::AccessoryConfig::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = a2[1];
  if (a1[1])
  {
    if (!v6 || (PB::Data::operator==() & 1) == 0 && a1[1] | a2[1]) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  uint64_t v7 = (unsigned __int8 *)a1[2];
  char v8 = (unsigned __int8 **)a2[2];
  uint64_t result = v8 == 0;
  if (!v7) {
    return result;
  }
  if (!v8) {
    return 0;
  }
  uint64_t v10 = v7[23];
  if ((v10 & 0x80u) == 0) {
    unint64_t v11 = (unsigned __int8 *)v7[23];
  }
  else {
    unint64_t v11 = (unsigned __int8 *)*((void *)v7 + 1);
  }
  char v12 = (unsigned __int8 *)*((unsigned __int8 *)v8 + 23);
  int v13 = (char)v12;
  if ((char)v12 < 0) {
    char v12 = v8[1];
  }
  if (v11 != v12) {
    return 0;
  }
  if (v13 >= 0) {
    char v14 = (unsigned __int8 *)a2[2];
  }
  else {
    char v14 = *v8;
  }
  if ((v10 & 0x80) != 0) {
    return !memcmp(*(const void **)v7, v14, *((void *)v7 + 1));
  }
  if (!v7[23]) {
    return 1;
  }
  uint64_t v15 = v10 - 1;
  do
  {
    int v17 = *v7++;
    int v16 = v17;
    int v19 = *v14++;
    int v18 = v19;
    BOOL v21 = v15-- != 0;
    uint64_t result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

BOOL CMMsl::AccessoryConfig::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 32);
  char v5 = *(unsigned char *)(a2 + 32);
  if ((v4 & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  uint64_t v6 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 16);
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    uint64_t v8 = v6[23];
    if ((v8 & 0x80u) == 0) {
      unsigned int v9 = (unsigned __int8 *)v6[23];
    }
    else {
      unsigned int v9 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    uint64_t v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      uint64_t v10 = v7[1];
    }
    if (v9 != v10) {
      return 0;
    }
    if (v11 >= 0) {
      char v12 = *(unsigned __int8 **)(a2 + 16);
    }
    else {
      char v12 = *v7;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((void *)v6 + 1))) {
        return 0;
      }
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8) {
          goto LABEL_23;
        }
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  int v13 = *(unsigned __int8 **)(a1 + 8);
  char v14 = *(unsigned __int8 ***)(a2 + 8);
  if (v13)
  {
    if (!v14) {
      return 0;
    }
    uint64_t v15 = v13[23];
    if ((v15 & 0x80u) == 0) {
      int v16 = (unsigned __int8 *)v13[23];
    }
    else {
      int v16 = (unsigned __int8 *)*((void *)v13 + 1);
    }
    int v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    int v18 = (char)v17;
    if ((char)v17 < 0) {
      int v17 = v14[1];
    }
    if (v16 != v17) {
      return 0;
    }
    if (v18 >= 0) {
      int v19 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      int v19 = *v14;
    }
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *((void *)v13 + 1))) {
        return 0;
      }
    }
    else if (v13[23])
    {
      while (*v13 == *v19)
      {
        ++v13;
        ++v19;
        if (!--v15) {
          goto LABEL_40;
        }
      }
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
LABEL_40:
  BOOL result = (v5 & 1) == 0;
  if ((v4 & 1) == 0) {
    return result;
  }
  return (v5 & 1) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

unint64_t CMMsl::AccessoryAccelConfig::hash_value(CMMsl::AccessoryAccelConfig *this)
{
  unint64_t v2 = (CMMsl::AccessoryConfig *)*((void *)this + 3);
  if (v2) {
    unint64_t v3 = CMMsl::AccessoryConfig::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  if (*((void *)this + 1)) {
    uint64_t v4 = PBHashBytes();
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    unint64_t v6 = sub_100012EE0((uint64_t)&v8, v5);
  }
  else {
    unint64_t v6 = 0;
  }
  return v4 ^ v3 ^ v6;
}

uint64_t CMMsl::AccessoryAccelConfig::makeConfig(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(uint64_t this)
{
  *(void *)this = off_1003A4170;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A4170;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessoryActivityAlseepConfidenceEpoch::~AccessoryActivityAlseepConfidenceEpoch(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(uint64_t this, const CMMsl::AccessoryActivityAlseepConfidenceEpoch *a2)
{
  *(void *)this = off_1003A4170;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 28);
    v3 |= 0x10u;
    *(unsigned char *)(this + 32) = v3;
    *(unsigned char *)(this + 28) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 20) = v7;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_14:
    char v9 = *((unsigned char *)a2 + 29);
    *(unsigned char *)(this + 32) = v3 | 0x20;
    *(unsigned char *)(this + 29) = v9;
    return this;
  }
LABEL_13:
  int v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v8;
  if ((*((unsigned char *)a2 + 32) & 0x20) != 0) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator=(uint64_t a1, const CMMsl::AccessoryActivityAlseepConfidenceEpoch *a2)
{
  if ((const CMMsl::AccessoryActivityAlseepConfidenceEpoch *)a1 != a2)
  {
    CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v12;
    char v12 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v4;
    int v5 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 29);
    *(unsigned char *)(a1 + 29) = v13;
    char v13 = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryActivityAlseepConfidenceEpoch *a2, CMMsl::AccessoryActivityAlseepConfidenceEpoch *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 28);
  *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
  *((unsigned char *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 29);
  *((unsigned char *)this + 29) = *((unsigned char *)a2 + 29);
  *((unsigned char *)a2 + 29) = v4;
  return result;
}

float CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4170;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A4170;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  return result;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 28);
    int v6 = *(_DWORD *)(a2 + 16);
    int v7 = *(_DWORD *)(a2 + 20);
    int v8 = *(_DWORD *)(a2 + 24);
    char v9 = *(unsigned char *)(a2 + 29);
    int v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v3;
    int v20 = v10;
    uint64_t v11 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v14[0] = off_1003A4170;
    v14[1] = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v5;
    char v18 = v11;
    LODWORD(v11) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    int v15 = v11;
    int v12 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v7;
    int v16 = v12;
    LODWORD(v11) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v17 = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 29);
    *(unsigned char *)(a1 + 29) = v9;
    char v19 = v11;
    PB::Base::~Base((PB::Base *)v14);
  }
  return a1;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::formatText(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "asleep", *((unsigned char *)this + 28));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "averageConfidence", *((_DWORD *)this + 4));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "initialized", *((unsigned char *)this + 29));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "rawConfidence", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 1));
  if ((*((unsigned char *)this + 32) & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 6));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::readFrom(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_82;
                  }
                  unint64_t v45 = v20++;
                  char v46 = *(unsigned char *)(v21 + v45);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_81;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_81:
                unint64_t v2 = v45 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_82;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_82:
              *((void *)this + 1) = v24;
              goto LABEL_93;
            case 2u:
              *((unsigned char *)this + 32) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 28) = v28;
              goto LABEL_93;
            case 3u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v29 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v30 = *(void *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_87;
                  }
                  unint64_t v49 = v29++;
                  char v50 = *(unsigned char *)(v30 + v49);
                  *((void *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_86:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_86;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_87;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_87:
              *((_DWORD *)this + 4) = v33;
              goto LABEL_93;
            case 4u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_93;
            case 5u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_92;
                  }
                  unint64_t v53 = v35++;
                  char v54 = *(unsigned char *)(v36 + v53);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_91:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_91;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_92;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_92:
              *((_DWORD *)this + 6) = v39;
LABEL_93:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *((unsigned char *)this + 32) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v42 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v42 = v41 != 0;
              }
              *((unsigned char *)this + 29) = v42;
              goto LABEL_93;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_93;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 5u);
    if ((*(unsigned char *)(v3 + 32) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  char v5 = *(unsigned char *)(v3 + 29);

  return PB::Writer::write(a2, v5, 6u);
}

BOOL CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 32) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 32) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29);
  }
  return v2;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::hash_value(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 28);
      if ((*((unsigned char *)this + 32) & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 4);
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_13:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_8;
    }
LABEL_14:
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 32) & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v7 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_5:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  uint64_t v6 = *((unsigned int *)this + 6);
  if ((*((unsigned char *)this + 32) & 0x20) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v7 = *((unsigned __int8 *)this + 29);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(uint64_t this)
{
  *(void *)this = off_1003A41A8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A41A8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::AccessoryActivityStateUpdate::~AccessoryActivityStateUpdate(CMMsl::AccessoryActivityStateUpdate *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(uint64_t this, const CMMsl::AccessoryActivityStateUpdate *a2)
{
  *(void *)this = off_1003A41A8;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) = v3 | 8;
    *(_DWORD *)(this + 24) = v7;
    return this;
  }
  int v6 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 28) = v3;
  *(_DWORD *)(this + 20) = v6;
  if ((*((unsigned char *)a2 + 28) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::operator=(uint64_t a1, const CMMsl::AccessoryActivityStateUpdate *a2)
{
  if ((const CMMsl::AccessoryActivityStateUpdate *)a1 != a2)
  {
    CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate((uint64_t)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v8;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryActivityStateUpdate *a2, CMMsl::AccessoryActivityStateUpdate *a3)
{
  int v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return this;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A41A8;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  *(void *)uint64_t result = off_1003A41A8;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = off_1003A41A8;
    v8[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v4;
    long long v9 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::formatText(CMMsl::AccessoryActivityStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "activity", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidenceLevel", *((_DWORD *)this + 5));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 1));
  if ((*((unsigned char *)this + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 6));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryActivityStateUpdate::readFrom(CMMsl::AccessoryActivityStateUpdate *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)a2 + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 28) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  unint64_t v47 = v20++;
                  char v48 = *(unsigned char *)(v21 + v47);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_87:
                unint64_t v3 = v47 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v3 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  unint64_t v20 = v3;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_88:
              *((void *)this + 1) = v24;
              goto LABEL_104;
            case 2u:
              *((unsigned char *)this + 28) |= 2u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    unint64_t v3 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v3 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                unint64_t v27 = v3;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *((_DWORD *)this + 4) = v31;
              goto LABEL_104;
            case 3u:
              *((unsigned char *)this + 28) |= 4u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    unint64_t v3 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v3 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                unint64_t v33 = v3;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *((_DWORD *)this + 5) = v37;
              goto LABEL_104;
            case 4u:
              *((unsigned char *)this + 28) |= 8u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    unint64_t v3 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v3 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                unint64_t v39 = v3;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *((_DWORD *)this + 6) = v43;
LABEL_104:
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  unsigned int v5 = *(_DWORD *)(v3 + 24);

  return PB::Writer::writeVarInt(a2, v5, 4u);
}

BOOL CMMsl::AccessoryActivityStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 8) == 0;
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
    return (*(unsigned char *)(a2 + 28) & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::hash_value(CMMsl::AccessoryActivityStateUpdate *this)
{
  if (*((unsigned char *)this + 28))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 4);
      if ((*((unsigned char *)this + 28) & 4) != 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 28) & 8) != 0) {
        goto LABEL_5;
      }
LABEL_9:
      uint64_t v4 = 0;
      return v2 ^ v1 ^ v3 ^ v4;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 6);
  return v2 ^ v1 ^ v3 ^ v4;
}

void CMMsl::AccessoryConfig::~AccessoryConfig(CMMsl::AccessoryConfig *this)
{
  *(void *)this = off_1003A41E0;
  uint64_t v4 = *((void *)this + 2);
  uint64_t v2 = (void *)((char *)this + 16);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    sub_100012E84((uint64_t)this + 8, v5);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryConfig::~AccessoryConfig(this);

  operator delete();
}

uint64_t CMMsl::AccessoryConfig::AccessoryConfig(uint64_t this, const CMMsl::AccessoryConfig *a2)
{
  *(void *)this = off_1003A41E0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  if ((*((unsigned char *)a2 + 32) & 2) != 0)
  {
    int v2 = *((_DWORD *)a2 + 7);
    *(unsigned char *)(this + 32) = 2;
    *(_DWORD *)(this + 28) = v2;
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 32))
  {
    int v3 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 32) |= 1u;
    *(_DWORD *)(this + 24) = v3;
  }
  return this;
}

uint64_t CMMsl::AccessoryConfig::operator=(uint64_t a1, const CMMsl::AccessoryConfig *a2)
{
  if ((const CMMsl::AccessoryConfig *)a1 != a2)
  {
    CMMsl::AccessoryConfig::AccessoryConfig((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v9;
    int v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    CMMsl::AccessoryConfig::~AccessoryConfig((CMMsl::AccessoryConfig *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryConfig *a2, CMMsl::AccessoryConfig *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  double result = *((double *)a2 + 3);
  uint64_t v7 = *((void *)this + 3);
  *((double *)this + 3) = result;
  *((void *)a2 + 3) = v7;
  return result;
}

uint64_t CMMsl::AccessoryConfig::AccessoryConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A41E0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = *v5;
  uint64_t *v5 = v6;
  if (v7) {
    sub_100012E84((uint64_t)v5, v7);
  }
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v9 = *v4;
  uint64_t *v4 = v8;
  if (v9) {
    sub_100012E84((uint64_t)v4, v9);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t CMMsl::AccessoryConfig::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryConfig::AccessoryConfig((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v9;
    int v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    CMMsl::AccessoryConfig::~AccessoryConfig((CMMsl::AccessoryConfig *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryConfig::formatText(CMMsl::AccessoryConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((unsigned char *)this + 32)) {
    PB::TextFormatter::format(a2, "hardwareModel", *((_DWORD *)this + 6));
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  if ((*((unsigned char *)this + 32) & 2) != 0) {
    PB::TextFormatter::format(a2, "side", *((_DWORD *)this + 7));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryConfig::readFrom(CMMsl::AccessoryConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_57;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_46:
            LODWORD(v25) = 0;
            goto LABEL_57;
          }
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v39 = v20 + 1;
              char v40 = *(unsigned char *)(v22 + v20);
              *((void *)a2 + 1) = v39;
              v25 |= (unint64_t)(v40 & 0x7F) << v37;
              if (v40 < 0)
              {
                v37 += 7;
                unint64_t v20 = v39;
                BOOL v14 = v38++ > 8;
                if (v14) {
                  goto LABEL_46;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v25) = 0;
              }
            }
            break;
          }
LABEL_57:
          *((_DWORD *)this + 7) = v25;
          goto LABEL_62;
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_61;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_53:
            LODWORD(v34) = 0;
            goto LABEL_61;
          }
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_62;
      }
      while (1)
      {
        if (v30 == v29)
        {
          LODWORD(v34) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_61;
        }
        unint64_t v43 = v29 + 1;
        char v44 = *(unsigned char *)(v31 + v29);
        *((void *)a2 + 1) = v43;
        v34 |= (unint64_t)(v44 & 0x7F) << v41;
        if ((v44 & 0x80) == 0) {
          break;
        }
        v41 += 7;
        unint64_t v29 = v43;
        BOOL v14 = v42++ > 8;
        if (v14) {
          goto LABEL_53;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v34) = 0;
      }
LABEL_61:
      *((_DWORD *)this + 6) = v34;
LABEL_62:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 32) & 2) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 28), 1u);
  }
  if (*(void *)(v3 + 16)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v3 + 8)) {
    this = PB::Writer::write();
  }
  if (*(unsigned char *)(v3 + 32))
  {
    int v4 = *(_DWORD *)(v3 + 24);
    return PB::Writer::writeVarInt(a2, v4, 4u);
  }
  return this;
}

unint64_t CMMsl::AccessoryConfig::hash_value(CMMsl::AccessoryConfig *this)
{
  if ((*((unsigned char *)this + 32) & 2) != 0) {
    uint64_t v2 = *((int *)this + 7);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    unint64_t v4 = sub_100012EE0((uint64_t)&v9, v3);
  }
  else {
    unint64_t v4 = 0;
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    unint64_t v6 = sub_100012EE0((uint64_t)&v10, v5);
  }
  else {
    unint64_t v6 = 0;
  }
  if (*((unsigned char *)this + 32)) {
    uint64_t v7 = *((int *)this + 6);
  }
  else {
    uint64_t v7 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(uint64_t this)
{
  *(void *)this = off_1003A4218;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A4218;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::AccessoryDeviceMotion::~AccessoryDeviceMotion(CMMsl::AccessoryDeviceMotion *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A4218;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryDeviceMotion::~AccessoryDeviceMotion(this);

  operator delete();
}

uint64_t CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(uint64_t this, const CMMsl::AccessoryDeviceMotion *a2)
{
  *(void *)this = off_1003A4218;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    int v3 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 24) |= 1u;
    *(_DWORD *)(this + 16) = v3;
    char v2 = *((unsigned char *)a2 + 24);
  }
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 5);
    *(unsigned char *)(this + 24) |= 2u;
    *(_DWORD *)(this + 20) = v4;
  }
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotion::operator=(uint64_t a1, const CMMsl::AccessoryDeviceMotion *a2)
{
  if ((const CMMsl::AccessoryDeviceMotion *)a1 != a2)
  {
    CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::AccessoryDeviceMotion::~AccessoryDeviceMotion((CMMsl::AccessoryDeviceMotion *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryDeviceMotion *a2, CMMsl::AccessoryDeviceMotion *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4218;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::AccessoryDeviceMotion::~AccessoryDeviceMotion((CMMsl::AccessoryDeviceMotion *)&v7);
  }
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotion::formatText(CMMsl::AccessoryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "dm");
  }
  char v6 = *((unsigned char *)this + 24);
  if (v6)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 4));
    char v6 = *((unsigned char *)this + 24);
  }
  if ((v6 & 2) != 0) {
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 5));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryDeviceMotion::readFrom(CMMsl::AccessoryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_59;
            }
            unint64_t v40 = v21 + 1;
            char v41 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v40;
            v26 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            unint64_t v21 = v40;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
LABEL_47:
              LODWORD(v26) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
            if (v14) {
              goto LABEL_47;
            }
          }
        }
LABEL_59:
        *((_DWORD *)this + 5) = v26;
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v30)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v44 = v29 + 1;
            char v45 = *(unsigned char *)(v31 + v29);
            *((void *)a2 + 1) = v44;
            v34 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            unint64_t v29 = v44;
            BOOL v14 = v43++ > 8;
            if (v14)
            {
LABEL_54:
              LODWORD(v34) = 0;
              goto LABEL_62;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v34) = 0;
          }
        }
        else
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          while (1)
          {
            unint64_t v35 = v29 + 1;
            *((void *)a2 + 1) = v29 + 1;
            char v36 = *(unsigned char *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
            if (v14) {
              goto LABEL_54;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 4) = v34;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotion::DeviceMotion(uint64_t this)
{
  *(void *)this = off_1003A52F0;
  *(_DWORD *)(this + 124) = 0;
  return this;
}

{
  *(void *)this = off_1003A52F0;
  *(_DWORD *)(this + 124) = 0;
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  char v5 = *(unsigned char *)(v3 + 24);
  if (v5)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
    char v5 = *(unsigned char *)(v3 + 24);
  }
  if ((v5 & 2) != 0)
  {
    unsigned int v6 = *(_DWORD *)(v3 + 20);
    return PB::Writer::writeVarInt(a2, v6, 3u);
  }
  return this;
}

BOOL CMMsl::AccessoryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotion::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 24) & 2) == 0;
  if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

BOOL CMMsl::DeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 124);
  int v3 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x400000) == 0;
  if ((v2 & 0x400000) != 0) {
    return (v3 & 0x400000) != 0 && *(float *)(a1 + 116) == *(float *)(a2 + 116);
  }
  return v4;
}

unint64_t CMMsl::AccessoryDeviceMotion::hash_value(CMMsl::AccessoryDeviceMotion *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotion::hash_value((CMMsl::DeviceMotion *)v2);
  }
  if (*((unsigned char *)this + 24))
  {
    uint64_t v3 = *((unsigned int *)this + 4);
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v4 = 0;
    return v3 ^ v2 ^ v4;
  }
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 5);
  return v3 ^ v2 ^ v4;
}

uint64_t CMMsl::AccessoryDeviceMotion::makeDm(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

double CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(CMMsl::AccessoryDeviceMotionConfig *this)
{
  *(void *)this = off_1003A4250;
  *((_DWORD *)this + 11) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A4250;
  *((_DWORD *)this + 11) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig(CMMsl::AccessoryDeviceMotionConfig *this)
{
  *(void *)this = off_1003A4250;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig(this);

  operator delete();
}

CMMsl::AccessoryDeviceMotionConfig *CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(CMMsl::AccessoryDeviceMotionConfig *this, const CMMsl::AccessoryDeviceMotionConfig *a2)
{
  *(void *)this = off_1003A4250;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 44))
  {
    char v3 = *((unsigned char *)a2 + 40);
    *((unsigned char *)this + 44) |= 1u;
    *((unsigned char *)this + 40) = v3;
  }
  if (this != a2) {
    sub_100024308((char *)this + 8, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::operator=(uint64_t a1, const CMMsl::AccessoryDeviceMotionConfig *a2)
{
  if ((const CMMsl::AccessoryDeviceMotionConfig *)a1 != a2)
  {
    CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig((CMMsl::AccessoryDeviceMotionConfig *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    int v11 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v10;
    char v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig((CMMsl::AccessoryDeviceMotionConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryDeviceMotionConfig *a2, CMMsl::AccessoryDeviceMotionConfig *a3)
{
  int v3 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 40);
  *(unsigned char *)(this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4250;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  sub_100274A30(v4, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    int v11 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v10;
    char v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig((CMMsl::AccessoryDeviceMotionConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::formatText(CMMsl::AccessoryDeviceMotionConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "config");
  }
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "headToHeadsetTransformation", v8);
  }
  if (*((unsigned char *)this + 44)) {
    PB::TextFormatter::format(a2, "isH2HValid", *((unsigned char *)this + 40));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryDeviceMotionConfig::readFrom(CMMsl::AccessoryDeviceMotionConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 8);
    long long v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v23 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        if (v22 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v24 = *((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
          while (v24 < v25 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v27 = (char *)*((void *)this + 2);
            unint64_t v26 = *((void *)this + 3);
            if ((unint64_t)v27 >= v26)
            {
              unint64_t v29 = (char *)*v8;
              uint64_t v30 = (v27 - (unsigned char *)*v8) >> 2;
              unint64_t v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62) {
                goto LABEL_86;
              }
              uint64_t v32 = v26 - (void)v29;
              if (v32 >> 1 > v31) {
                unint64_t v31 = v32 >> 1;
              }
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33)
              {
                uint64_t v34 = (char *)sub_100024458((uint64_t)v9, v33);
                unint64_t v29 = (char *)*((void *)this + 1);
                unint64_t v27 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v34 = 0;
              }
              unint64_t v35 = &v34[4 * v30];
              *(_DWORD *)unint64_t v35 = 0;
              char v28 = v35 + 4;
              while (v27 != v29)
              {
                int v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              *((void *)this + 1) = v35;
              *((void *)this + 2) = v28;
              *((void *)this + 3) = &v34[4 * v33];
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v27 = 0;
              char v28 = v27 + 4;
            }
            *((void *)this + 2) = v28;
            unint64_t v37 = *((void *)a2 + 1);
            if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v28 - 1) = *(_DWORD *)(*(void *)a2 + v37);
            unint64_t v25 = *((void *)a2 + 2);
            unint64_t v24 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v24;
          }
          PB::Reader::recallMark();
        }
        else
        {
          unsigned int v43 = (char *)*((void *)this + 2);
          unint64_t v42 = *((void *)this + 3);
          if ((unint64_t)v43 >= v42)
          {
            char v45 = (char *)*v8;
            uint64_t v46 = (v43 - (unsigned char *)*v8) >> 2;
            unint64_t v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 62) {
LABEL_86:
            }
              sub_10000EE98();
            uint64_t v48 = v42 - (void)v45;
            if (v48 >> 1 > v47) {
              unint64_t v47 = v48 >> 1;
            }
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v49 = v47;
            }
            if (v49)
            {
              unsigned int v50 = (char *)sub_100024458((uint64_t)v9, v49);
              char v45 = (char *)*((void *)this + 1);
              unsigned int v43 = (char *)*((void *)this + 2);
            }
            else
            {
              unsigned int v50 = 0;
            }
            unint64_t v51 = &v50[4 * v46];
            *(_DWORD *)unint64_t v51 = 0;
            unint64_t v44 = v51 + 4;
            while (v43 != v45)
            {
              int v52 = *((_DWORD *)v43 - 1);
              v43 -= 4;
              *((_DWORD *)v51 - 1) = v52;
              v51 -= 4;
            }
            *((void *)this + 1) = v51;
            *((void *)this + 2) = v44;
            *((void *)this + 3) = &v50[4 * v49];
            if (v45) {
              operator delete(v45);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v43 = 0;
            unint64_t v44 = v43 + 4;
          }
          *((void *)this + 2) = v44;
          unint64_t v53 = *((void *)a2 + 1);
          if (v53 <= 0xFFFFFFFFFFFFFFFBLL && v53 + 4 <= *((void *)a2 + 2))
          {
            *(v44 - 1) = *(_DWORD *)(*(void *)a2 + v53);
            *((void *)a2 + 1) += 4;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
        }
      }
      else if (v23 == 2)
      {
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v38 = *((void *)a2 + 1);
        if (v38 >= *((void *)a2 + 2))
        {
          BOOL v41 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v39 = v38 + 1;
          int v40 = *(unsigned __int8 *)(*(void *)a2 + v38);
          *((void *)a2 + 1) = v39;
          BOOL v41 = v40 != 0;
        }
        *((unsigned char *)this + 40) = v41;
      }
      else
      {
        if (v23 == 1) {
          operator new();
        }
        if ((PB::Reader::skip(a2, v23, v22, 0) & 1) == 0) {
          return 0;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 44)) {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 40), 2u);
  }
  uint64_t v6 = *(float **)(v3 + 8);
  uint64_t v5 = *(float **)(v3 + 16);
  while (v6 != v5)
  {
    float v7 = *v6++;
    this = PB::Writer::write(a2, v7, 3u);
  }
  return this;
}

BOOL CMMsl::AccessoryDeviceMotionConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::AccessoryConfig::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  float v8 = *(float **)(a2 + 8);
  if (v6 - v7 != *(void *)(a2 + 16) - (void)v8) {
    return 0;
  }
  if (v7 == v6) {
    return 1;
  }
  uint64_t v9 = v7 + 4;
  do
  {
    float v10 = *v8++;
    BOOL result = *(float *)(v9 - 4) == v10;
    BOOL v12 = *(float *)(v9 - 4) != v10 || v9 == v6;
    v9 += 4;
  }
  while (!v12);
  return result;
}

unint64_t CMMsl::AccessoryDeviceMotionConfig::hash_value(CMMsl::AccessoryDeviceMotionConfig *this)
{
  unint64_t v2 = *((void *)this + 4);
  if (v2) {
    unint64_t v2 = CMMsl::AccessoryConfig::hash_value((CMMsl::AccessoryConfig *)v2);
  }
  if (*((unsigned char *)this + 44)) {
    uint64_t v3 = *((unsigned __int8 *)this + 40);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2 ^ PBHashBytes();
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::makeConfig(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryGyro::AccessoryGyro(uint64_t this)
{
  *(void *)this = off_1003A4288;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = off_1003A4288;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::AccessoryGyro::~AccessoryGyro(CMMsl::AccessoryGyro *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A4288;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryGyro::~AccessoryGyro(this);

  operator delete();
}

uint64_t CMMsl::AccessoryGyro::AccessoryGyro(uint64_t this, const CMMsl::AccessoryGyro *a2)
{
  *(void *)this = off_1003A4288;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 36) |= 2u;
    *(_DWORD *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)a2 + 36) & 4) == 0)
  {
    goto LABEL_5;
  }
  int v5 = *((_DWORD *)a2 + 7);
  *(unsigned char *)(this + 36) |= 4u;
  *(_DWORD *)(this + 28) = v5;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 8) == 0)
  {
LABEL_6:
    if ((v2 & 1) == 0) {
      return this;
    }
    goto LABEL_7;
  }
LABEL_11:
  int v6 = *((_DWORD *)a2 + 8);
  *(unsigned char *)(this + 36) |= 8u;
  *(_DWORD *)(this + 32) = v6;
  if ((*((unsigned char *)a2 + 36) & 1) == 0) {
    return this;
  }
LABEL_7:
  uint64_t v3 = *((void *)a2 + 2);
  *(unsigned char *)(this + 36) |= 1u;
  *(void *)(this + 16) = v3;
  return this;
}

uint64_t CMMsl::AccessoryGyro::operator=(uint64_t a1, const CMMsl::AccessoryGyro *a2)
{
  if ((const CMMsl::AccessoryGyro *)a1 != a2)
  {
    CMMsl::AccessoryGyro::AccessoryGyro((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v15;
    int v15 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = v12;
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v7;
    int v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    int v14 = v8;
    uint64_t v11 = v4;
    uint64_t v12 = v5;
    CMMsl::AccessoryGyro::~AccessoryGyro((CMMsl::AccessoryGyro *)v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryGyro *a2, CMMsl::AccessoryGyro *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  int v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = *((void *)a2 + 2);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 2) = v8;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  *((void *)a2 + 1) = v6;
  *((void *)a2 + 2) = v7;
  return result;
}

uint64_t CMMsl::AccessoryGyro::AccessoryGyro(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4288;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AccessoryGyro::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryGyro::AccessoryGyro((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v15;
    int v15 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = v12;
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v7;
    int v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    int v14 = v8;
    uint64_t v11 = v4;
    uint64_t v12 = v5;
    CMMsl::AccessoryGyro::~AccessoryGyro((CMMsl::AccessoryGyro *)v10);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyro::formatText(CMMsl::AccessoryGyro *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "gyro");
  }
  char v6 = *((unsigned char *)this + 36);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 6));
    char v6 = *((unsigned char *)this + 36);
    if ((v6 & 1) == 0)
    {
LABEL_5:
      if ((v6 & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 36) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 2));
  char v6 = *((unsigned char *)this + 36);
  if ((v6 & 4) == 0)
  {
LABEL_6:
    if ((v6 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 7));
  if ((*((unsigned char *)this + 36) & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "temp", *((float *)this + 8));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryGyro::readFrom(CMMsl::AccessoryGyro *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *((unsigned char *)this + 36) |= 2u;
          unint64_t v21 = *((void *)a2 + 1);
          unint64_t v22 = *((void *)a2 + 2);
          uint64_t v23 = *(void *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            do
            {
              unint64_t v27 = v21 + 1;
              *((void *)a2 + 1) = v21 + 1;
              char v28 = *(unsigned char *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0) {
                goto LABEL_76;
              }
              v24 += 7;
              unint64_t v21 = v27;
              BOOL v14 = v25++ > 8;
            }
            while (!v14);
LABEL_55:
            LODWORD(v26) = 0;
            goto LABEL_76;
          }
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v48 = v21 + 1;
              char v49 = *(unsigned char *)(v23 + v21);
              *((void *)a2 + 1) = v48;
              v26 |= (unint64_t)(v49 & 0x7F) << v46;
              if (v49 < 0)
              {
                v46 += 7;
                unint64_t v21 = v48;
                BOOL v14 = v47++ > 8;
                if (v14) {
                  goto LABEL_55;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v26) = 0;
              }
            }
            break;
          }
LABEL_76:
          *((_DWORD *)this + 6) = v26;
          goto LABEL_83;
        case 3u:
          *((unsigned char *)this + 36) |= 4u;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_79;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_62:
            LODWORD(v34) = 0;
            goto LABEL_79;
          }
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v52 = v29 + 1;
              char v53 = *(unsigned char *)(v31 + v29);
              *((void *)a2 + 1) = v52;
              v34 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                unint64_t v29 = v52;
                BOOL v14 = v51++ > 8;
                if (v14) {
                  goto LABEL_62;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_79:
          *((_DWORD *)this + 7) = v34;
          goto LABEL_83;
        case 4u:
          *((unsigned char *)this + 36) |= 8u;
          unint64_t v37 = *((void *)a2 + 1);
          if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v37);
            *((void *)a2 + 1) += 4;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_83;
        case 5u:
          *((unsigned char *)this + 36) |= 1u;
          unint64_t v38 = *((void *)a2 + 1);
          unint64_t v39 = *((void *)a2 + 2);
          uint64_t v40 = *(void *)a2;
          if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
          {
            char v41 = 0;
            unsigned int v42 = 0;
            uint64_t v43 = 0;
            do
            {
              unint64_t v44 = v38 + 1;
              *((void *)a2 + 1) = v38 + 1;
              char v45 = *(unsigned char *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0) {
                goto LABEL_82;
              }
              v41 += 7;
              unint64_t v38 = v44;
              BOOL v14 = v42++ > 8;
            }
            while (!v14);
LABEL_69:
            uint64_t v43 = 0;
            goto LABEL_82;
          }
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v43 = 0;
          if (v39 <= v38) {
            unint64_t v39 = *((void *)a2 + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_83;
      }
      while (1)
      {
        if (v39 == v38)
        {
          uint64_t v43 = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_82;
        }
        unint64_t v56 = v38 + 1;
        char v57 = *(unsigned char *)(v40 + v38);
        *((void *)a2 + 1) = v56;
        v43 |= (unint64_t)(v57 & 0x7F) << v54;
        if ((v57 & 0x80) == 0) {
          break;
        }
        v54 += 7;
        unint64_t v38 = v56;
        BOOL v14 = v55++ > 8;
        if (v14) {
          goto LABEL_69;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        uint64_t v43 = 0;
      }
LABEL_82:
      *((void *)this + 2) = v43;
LABEL_83:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Gyro::Gyro(uint64_t this)
{
  *(void *)this = off_1003A5EC0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A5EC0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::AccessoryGyro::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  char v5 = *(unsigned char *)(v3 + 36);
  if ((v5 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
    char v5 = *(unsigned char *)(v3 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      this = PB::Writer::write(a2, *(float *)(v3 + 32), 4u);
      if ((*(unsigned char *)(v3 + 36) & 1) == 0) {
        return this;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(v3 + 36) & 4) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 3u);
  char v5 = *(unsigned char *)(v3 + 36);
  if ((v5 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((v5 & 1) == 0) {
    return this;
  }
LABEL_11:
  unint64_t v6 = *(void *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v6, 5u);
}

BOOL CMMsl::AccessoryGyro::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::Gyro::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 36) & 1) == 0;
  if ((*(unsigned char *)(a1 + 36) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 36) & 1) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

BOOL CMMsl::Gyro::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 44);
  __int16 v3 = *(_WORD *)(a2 + 44);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 44) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 44) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 44) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v4;
}

unint64_t CMMsl::AccessoryGyro::hash_value(CMMsl::AccessoryGyro *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::Gyro::hash_value((CMMsl::Gyro *)v2);
  }
  if ((*((unsigned char *)this + 36) & 2) != 0)
  {
    uint64_t v3 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 36) & 4) != 0)
    {
LABEL_5:
      uint64_t v4 = *((unsigned int *)this + 7);
      if ((*((unsigned char *)this + 36) & 8) != 0) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 36) & 4) != 0) {
      goto LABEL_5;
    }
  }
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 36) & 8) != 0)
  {
LABEL_6:
    float v5 = *((float *)this + 8);
    uint64_t v6 = LODWORD(v5);
    if (v5 == 0.0) {
      uint64_t v6 = 0;
    }
    if (*((unsigned char *)this + 36)) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v7 = 0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v7;
  }
LABEL_12:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 36) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_9:
  uint64_t v7 = *((void *)this + 2);
  return v3 ^ v2 ^ v4 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessoryGyro::makeGyro(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(void *this)
{
  *this = off_1003A42C0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A42C0;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias(CMMsl::AccessoryGyroCachedBias *this)
{
  *(void *)this = off_1003A42C0;
  uint64_t v4 = *((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias(this);

  operator delete();
}

void *CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(void *this, const CMMsl::AccessoryGyroCachedBias *a2)
{
  *this = off_1003A42C0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AccessoryGyroCachedBias *CMMsl::AccessoryGyroCachedBias::operator=(const CMMsl::AccessoryGyroCachedBias *a1, const CMMsl::AccessoryGyroCachedBias *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias((CMMsl::AccessoryGyroCachedBias *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryGyroCachedBias *a2, CMMsl::AccessoryGyroCachedBias *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(void *a1, uint64_t a2)
{
  *a1 = off_1003A42C0;
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *v3;
  *uint64_t v3 = v4;
  if (v5) {
    sub_100012E84((uint64_t)v3, v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroCachedBias::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(&v5, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v6;
    uint64_t v6 = v3;
    CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias((CMMsl::AccessoryGyroCachedBias *)&v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroCachedBias::formatText(CMMsl::AccessoryGyroCachedBias *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryGyroCachedBias::readFrom(CMMsl::AccessoryGyroCachedBias *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryGyroCachedBias::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t CMMsl::AccessoryGyroCachedBias::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  unint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t CMMsl::AccessoryGyroCachedBias::hash_value(CMMsl::AccessoryGyroCachedBias *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return sub_100012EE0((uint64_t)&v3, v1);
  }
  else {
    return 0;
  }
}

void *CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(void *this)
{
  *this = off_1003A42F8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A42F8;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryGyroConfig::~AccessoryGyroConfig(CMMsl::AccessoryGyroConfig *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A42F8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryGyroConfig::~AccessoryGyroConfig(this);

  operator delete();
}

void *CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(void *this, const CMMsl::AccessoryGyroConfig *a2)
{
  *this = off_1003A42F8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AccessoryGyroConfig *CMMsl::AccessoryGyroConfig::operator=(const CMMsl::AccessoryGyroConfig *a1, const CMMsl::AccessoryGyroConfig *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AccessoryGyroConfig::~AccessoryGyroConfig((CMMsl::AccessoryGyroConfig *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryGyroConfig *a2, CMMsl::AccessoryGyroConfig *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(void *a1, uint64_t a2)
{
  *a1 = off_1003A42F8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A42F8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroConfig::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A42F8;
    v6[1] = v4;
    CMMsl::AccessoryGyroConfig::~AccessoryGyroConfig((CMMsl::AccessoryGyroConfig *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroConfig::formatText(CMMsl::AccessoryGyroConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "config");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryGyroConfig::readFrom(CMMsl::AccessoryGyroConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryGyroConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::AccessoryGyroConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::AccessoryConfig::operator==(v2, v3);
  }
  return result;
}

CMMsl::AccessoryConfig *CMMsl::AccessoryGyroConfig::hash_value(CMMsl::AccessoryGyroConfig *this)
{
  BOOL result = (CMMsl::AccessoryConfig *)*((void *)this + 1);
  if (result) {
    return (CMMsl::AccessoryConfig *)CMMsl::AccessoryConfig::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::AccessoryGyroConfig::makeConfig(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(void *this)
{
  *this = off_1003A4330;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A4330;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT(CMMsl::AccessoryGyroGYTT *this)
{
  *(void *)this = off_1003A4330;
  uint64_t v4 = *((void *)this + 1);
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT(this);

  operator delete();
}

void *CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(void *this, const CMMsl::AccessoryGyroGYTT *a2)
{
  *this = off_1003A4330;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AccessoryGyroGYTT *CMMsl::AccessoryGyroGYTT::operator=(const CMMsl::AccessoryGyroGYTT *a1, const CMMsl::AccessoryGyroGYTT *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT((CMMsl::AccessoryGyroGYTT *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryGyroGYTT *a2, CMMsl::AccessoryGyroGYTT *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(void *a1, uint64_t a2)
{
  *a1 = off_1003A4330;
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *v3;
  *uint64_t v3 = v4;
  if (v5) {
    sub_100012E84((uint64_t)v3, v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroGYTT::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(&v5, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v6;
    uint64_t v6 = v3;
    CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT((CMMsl::AccessoryGyroGYTT *)&v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroGYTT::formatText(CMMsl::AccessoryGyroGYTT *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryGyroGYTT::readFrom(CMMsl::AccessoryGyroGYTT *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryGyroGYTT::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t CMMsl::AccessoryGyroGYTT::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  unint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t CMMsl::AccessoryGyroGYTT::hash_value(CMMsl::AccessoryGyroGYTT *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return sub_100012EE0((uint64_t)&v3, v1);
  }
  else {
    return 0;
  }
}

uint64_t CMMsl::AccessoryHeartRate::AccessoryHeartRate(uint64_t this)
{
  *(void *)this = off_1003A4368;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = off_1003A4368;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::AccessoryHeartRate::~AccessoryHeartRate(CMMsl::AccessoryHeartRate *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::AccessoryHeartRate::AccessoryHeartRate(uint64_t this, const CMMsl::AccessoryHeartRate *a2)
{
  *(void *)this = off_1003A4368;
  *(_DWORD *)(this + 36) = 0;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 36) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 36) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 8u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 28) = v5;
    char v2 = *((unsigned char *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 8);
      *(unsigned char *)(this + 36) = v3 | 0x10;
      *(_DWORD *)(this + 32) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 36) = v3;
  *(void *)(this + 8) = v7;
  if ((*((unsigned char *)a2 + 36) & 0x10) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::AccessoryHeartRate::operator=(uint64_t a1, const CMMsl::AccessoryHeartRate *a2)
{
  if ((const CMMsl::AccessoryHeartRate *)a1 != a2)
  {
    CMMsl::AccessoryHeartRate::AccessoryHeartRate((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v11;
    int v11 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v10;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryHeartRate *a2, CMMsl::AccessoryHeartRate *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  return result;
}

double CMMsl::AccessoryHeartRate::AccessoryHeartRate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4368;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A4368;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::AccessoryHeartRate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v9 = off_1003A4368;
    int v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    int v13 = *(_DWORD *)(a1 + 36);
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v10 = v6;
    *(void *)&long long v6 = *(void *)(a1 + 28);
    uint64_t v7 = *(void *)(a2 + 28);
    *(_DWORD *)(a1 + 36) = v3;
    *(void *)(a1 + 28) = v7;
    uint64_t v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::AccessoryHeartRate::formatText(CMMsl::AccessoryHeartRate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "confidence", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "heartRate", *((_DWORD *)this + 7));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "sensorTime", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 8));
  if ((*((unsigned char *)this + 36) & 2) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryHeartRate::readFrom(CMMsl::AccessoryHeartRate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 36) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_39;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_62;
            case 2u:
              *((unsigned char *)this + 36) |= 8u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_68;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_67:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_68;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_67;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_68;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_68:
              *((_DWORD *)this + 7) = v25;
              goto LABEL_74;
            case 3u:
              *((unsigned char *)this + 36) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_39;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 4;
              goto LABEL_63;
            case 4u:
              *((unsigned char *)this + 36) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_62:
                unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_63:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_39:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_74;
            case 5u:
              *((unsigned char *)this + 36) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_73;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_72:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_73;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_72;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_73;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_73:
              *((_DWORD *)this + 8) = v31;
LABEL_74:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_74;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryHeartRate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 36);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
    if ((*(unsigned char *)(v3 + 36) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  char v4 = *(unsigned char *)(v3 + 36);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  unsigned int v5 = *(_DWORD *)(v3 + 32);

  return PB::Writer::writeVarInt(a2, v5, 5u);
}

BOOL CMMsl::AccessoryHeartRate::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 36) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 36) & 0x10) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return v2;
}

uint64_t CMMsl::AccessoryHeartRate::hash_value(CMMsl::AccessoryHeartRate *this)
{
  if ((*((unsigned char *)this + 36) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 36) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 7);
      if ((*((unsigned char *)this + 36) & 4) != 0) {
        goto LABEL_4;
      }
LABEL_15:
      uint64_t v4 = 0;
      if (*((unsigned char *)this + 36)) {
        goto LABEL_7;
      }
      goto LABEL_16;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 36) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 36) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_4:
  float v3 = *((float *)this + 6);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if (*((unsigned char *)this + 36))
  {
LABEL_7:
    double v5 = *((double *)this + 1);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if ((*((unsigned char *)this + 36) & 0x10) != 0) {
      goto LABEL_10;
    }
LABEL_17:
    uint64_t v6 = 0;
    return v2 ^ *(void *)&v1 ^ v4 ^ *(void *)&v5 ^ v6;
  }
LABEL_16:
  double v5 = 0.0;
  if ((*((unsigned char *)this + 36) & 0x10) == 0) {
    goto LABEL_17;
  }
LABEL_10:
  uint64_t v6 = *((unsigned int *)this + 8);
  return v2 ^ *(void *)&v1 ^ v4 ^ *(void *)&v5 ^ v6;
}

uint64_t CMMsl::AccessoryInEarStatus::AccessoryInEarStatus(uint64_t this)
{
  *(void *)this = off_1003A43A0;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = off_1003A43A0;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::AccessoryInEarStatus::~AccessoryInEarStatus(CMMsl::AccessoryInEarStatus *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::AccessoryInEarStatus::AccessoryInEarStatus(CMMsl::AccessoryInEarStatus *this, const CMMsl::AccessoryInEarStatus *a2)
{
  *(void *)this = off_1003A43A0;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    int v3 = *((_DWORD *)a2 + 2);
    *((unsigned char *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    *((unsigned char *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

const CMMsl::AccessoryInEarStatus *CMMsl::AccessoryInEarStatus::operator=(const CMMsl::AccessoryInEarStatus *a1, const CMMsl::AccessoryInEarStatus *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryInEarStatus::AccessoryInEarStatus((CMMsl::AccessoryInEarStatus *)v7, a2);
    int v3 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v10;
    int v10 = v3;
    int v4 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v8;
    int v8 = v4;
    int v5 = *((_DWORD *)a1 + 3);
    *((_DWORD *)a1 + 3) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryInEarStatus *a2, CMMsl::AccessoryInEarStatus *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::AccessoryInEarStatus::AccessoryInEarStatus(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A43A0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A43A0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

_DWORD *CMMsl::AccessoryInEarStatus::operator=(_DWORD *a1, _DWORD *a2)
{
  if (a1 != a2)
  {
    int v10 = off_1003A43A0;
    int v3 = a2[4];
    a2[4] = 0;
    int v4 = a2[2];
    int v5 = a2[3];
    int v6 = a1[4];
    a1[4] = v3;
    int v13 = v6;
    int v7 = a1[2];
    a1[2] = v4;
    int v11 = v7;
    int v8 = a1[3];
    a1[3] = v5;
    int v12 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::AccessoryInEarStatus::formatText(CMMsl::AccessoryInEarStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 2));
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((float *)this + 3));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryInEarStatus::readFrom(CMMsl::AccessoryInEarStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryInEarStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 12);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::AccessoryInEarStatus::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 2) == 0;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    return (*(unsigned char *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  }
  return v2;
}

uint64_t CMMsl::AccessoryInEarStatus::hash_value(CMMsl::AccessoryInEarStatus *this)
{
  if ((*((unsigned char *)this + 16) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 16) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v3 ^ v1;
  }
  uint64_t v1 = *((int *)this + 2);
  if ((*((unsigned char *)this + 16) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v1;
}

uint64_t CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(uint64_t this)
{
  *(void *)this = off_1003A43D8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A43D8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessoryMagnetometer::~AccessoryMagnetometer(CMMsl::AccessoryMagnetometer *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A43D8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryMagnetometer::~AccessoryMagnetometer(this);

  operator delete();
}

uint64_t CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(uint64_t this, const CMMsl::AccessoryMagnetometer *a2)
{
  *(void *)this = off_1003A43D8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 32) |= 2u;
    *(_DWORD *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 1) == 0) {
        return this;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)a2 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  int v5 = *((_DWORD *)a2 + 7);
  *(unsigned char *)(this + 32) |= 4u;
  *(_DWORD *)(this + 28) = v5;
  if ((*((unsigned char *)a2 + 32) & 1) == 0) {
    return this;
  }
LABEL_6:
  uint64_t v3 = *((void *)a2 + 2);
  *(unsigned char *)(this + 32) |= 1u;
  *(void *)(this + 16) = v3;
  return this;
}

uint64_t CMMsl::AccessoryMagnetometer::operator=(uint64_t a1, const CMMsl::AccessoryMagnetometer *a2)
{
  if ((const CMMsl::AccessoryMagnetometer *)a1 != a2)
  {
    CMMsl::AccessoryMagnetometer::AccessoryMagnetometer((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = v11;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v7;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    CMMsl::AccessoryMagnetometer::~AccessoryMagnetometer((CMMsl::AccessoryMagnetometer *)v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryMagnetometer *a2, CMMsl::AccessoryMagnetometer *a3)
{
  int v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v4 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  int v5 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  uint64_t v6 = *(void *)(this + 8);
  uint64_t v7 = *(void *)(this + 16);
  uint64_t v8 = *((void *)a2 + 2);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *(void *)(this + 16) = v8;
  *((_DWORD *)a2 + 7) = v5;
  *((void *)a2 + 1) = v6;
  *((void *)a2 + 2) = v7;
  return this;
}

uint64_t CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A43D8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometer::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryMagnetometer::AccessoryMagnetometer((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = v11;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v7;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    CMMsl::AccessoryMagnetometer::~AccessoryMagnetometer((CMMsl::AccessoryMagnetometer *)v9);
  }
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometer::formatText(CMMsl::AccessoryMagnetometer *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 32) & 2) != 0) {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 6));
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "magnetometer");
  }
  char v6 = *((unsigned char *)this + 32);
  if (v6)
  {
    PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 2));
    char v6 = *((unsigned char *)this + 32);
  }
  if ((v6 & 4) != 0) {
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 7));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryMagnetometer::readFrom(CMMsl::AccessoryMagnetometer *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v21 = *((void *)a2 + 1);
          unint64_t v22 = *((void *)a2 + 2);
          uint64_t v23 = *(void *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            do
            {
              unint64_t v27 = v21 + 1;
              *((void *)a2 + 1) = v21 + 1;
              char v28 = *(unsigned char *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0) {
                goto LABEL_72;
              }
              v24 += 7;
              unint64_t v21 = v27;
              BOOL v14 = v25++ > 8;
            }
            while (!v14);
LABEL_52:
            LODWORD(v26) = 0;
            goto LABEL_72;
          }
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v47 = v21 + 1;
              char v48 = *(unsigned char *)(v23 + v21);
              *((void *)a2 + 1) = v47;
              v26 |= (unint64_t)(v48 & 0x7F) << v45;
              if (v48 < 0)
              {
                v45 += 7;
                unint64_t v21 = v47;
                BOOL v14 = v46++ > 8;
                if (v14) {
                  goto LABEL_52;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v26) = 0;
              }
            }
            break;
          }
LABEL_72:
          *((_DWORD *)this + 6) = v26;
          goto LABEL_79;
        case 3u:
          *((unsigned char *)this + 32) |= 4u;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_75;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_59:
            LODWORD(v34) = 0;
            goto LABEL_75;
          }
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v51 = v29 + 1;
              char v52 = *(unsigned char *)(v31 + v29);
              *((void *)a2 + 1) = v51;
              v34 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                unint64_t v29 = v51;
                BOOL v14 = v50++ > 8;
                if (v14) {
                  goto LABEL_59;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_75:
          *((_DWORD *)this + 7) = v34;
          goto LABEL_79;
        case 4u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          uint64_t v39 = *(void *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)a2 + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_78;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_66:
            uint64_t v42 = 0;
            goto LABEL_78;
          }
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)a2 + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_79;
      }
      while (1)
      {
        if (v38 == v37)
        {
          uint64_t v42 = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_78;
        }
        unint64_t v55 = v37 + 1;
        char v56 = *(unsigned char *)(v39 + v37);
        *((void *)a2 + 1) = v55;
        v42 |= (unint64_t)(v56 & 0x7F) << v53;
        if ((v56 & 0x80) == 0) {
          break;
        }
        v53 += 7;
        unint64_t v37 = v55;
        BOOL v14 = v54++ > 8;
        if (v14) {
          goto LABEL_66;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        uint64_t v42 = 0;
      }
LABEL_78:
      *((void *)this + 2) = v42;
LABEL_79:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Magnetometer::Magnetometer(uint64_t this)
{
  *(void *)this = off_1003A7430;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = off_1003A7430;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CMMsl::AccessoryMagnetometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  char v5 = *(unsigned char *)(v3 + 32);
  if ((v5 & 2) == 0)
  {
    if ((*(unsigned char *)(v3 + 32) & 4) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 3u);
    if ((*(unsigned char *)(v3 + 32) & 1) == 0) {
      return this;
    }
    goto LABEL_9;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
  char v5 = *(unsigned char *)(v3 + 32);
  if ((v5 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_5:
  if ((v5 & 1) == 0) {
    return this;
  }
LABEL_9:
  unint64_t v6 = *(void *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v6, 4u);
}

BOOL CMMsl::AccessoryMagnetometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::Magnetometer::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 32) & 1) == 0;
  if ((*(unsigned char *)(a1 + 32) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 32) & 1) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

BOOL CMMsl::Magnetometer::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 2) == 0;
  if ((*(unsigned char *)(a1 + 36) & 2) != 0) {
    return (*(unsigned char *)(a2 + 36) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

unint64_t CMMsl::AccessoryMagnetometer::hash_value(CMMsl::AccessoryMagnetometer *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::Magnetometer::hash_value((CMMsl::Magnetometer *)v2);
  }
  if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v4 = 0;
    if (*((unsigned char *)this + 32)) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v5 = 0;
    return v3 ^ v2 ^ v4 ^ v5;
  }
  uint64_t v3 = *((unsigned int *)this + 6);
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 7);
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v5 = *((void *)this + 2);
  return v3 ^ v2 ^ v4 ^ v5;
}

uint64_t CMMsl::AccessoryMagnetometer::makeMagnetometer(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(void *this)
{
  *this = off_1003A4410;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A4410;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryMagnetometerConfig::~AccessoryMagnetometerConfig(CMMsl::AccessoryMagnetometerConfig *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A4410;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryMagnetometerConfig::~AccessoryMagnetometerConfig(this);

  operator delete();
}

void *CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(void *this, const CMMsl::AccessoryMagnetometerConfig *a2)
{
  *this = off_1003A4410;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AccessoryMagnetometerConfig *CMMsl::AccessoryMagnetometerConfig::operator=(const CMMsl::AccessoryMagnetometerConfig *a1, const CMMsl::AccessoryMagnetometerConfig *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AccessoryMagnetometerConfig::~AccessoryMagnetometerConfig((CMMsl::AccessoryMagnetometerConfig *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryMagnetometerConfig *a2, CMMsl::AccessoryMagnetometerConfig *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(void *a1, uint64_t a2)
{
  *a1 = off_1003A4410;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A4410;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A4410;
    v6[1] = v4;
    CMMsl::AccessoryMagnetometerConfig::~AccessoryMagnetometerConfig((CMMsl::AccessoryMagnetometerConfig *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::formatText(CMMsl::AccessoryMagnetometerConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "config");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryMagnetometerConfig::readFrom(CMMsl::AccessoryMagnetometerConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::AccessoryMagnetometerConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::AccessoryConfig::operator==(v2, v3);
  }
  return result;
}

CMMsl::AccessoryConfig *CMMsl::AccessoryMagnetometerConfig::hash_value(CMMsl::AccessoryMagnetometerConfig *this)
{
  BOOL result = (CMMsl::AccessoryConfig *)*((void *)this + 1);
  if (result) {
    return (CMMsl::AccessoryConfig *)CMMsl::AccessoryConfig::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::makeConfig(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

double CMMsl::AccessoryPPG::AccessoryPPG(CMMsl::AccessoryPPG *this)
{
  *(void *)this = off_1003A4448;
  *((_DWORD *)this + 56) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A4448;
  *((_DWORD *)this + 56) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  return result;
}

void CMMsl::AccessoryPPG::~AccessoryPPG(CMMsl::AccessoryPPG *this)
{
  *(void *)this = off_1003A4448;
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 14) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 10);
  if (v6)
  {
    *((void *)this + 11) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 8) = v7;
    operator delete(v7);
  }
  char v8 = (void *)*((void *)this + 4);
  if (v8)
  {
    *((void *)this + 5) = v8;
    operator delete(v8);
  }
  unsigned int v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    *((void *)this + 2) = v9;
    operator delete(v9);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryPPG::~AccessoryPPG(this);

  operator delete();
}

CMMsl::AccessoryPPG *CMMsl::AccessoryPPG::AccessoryPPG(CMMsl::AccessoryPPG *this, const CMMsl::AccessoryPPG *a2)
{
  *(void *)this = off_1003A4448;
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 56) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  char v5 = *((unsigned char *)a2 + 224);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 26);
    char v6 = 2;
    *((unsigned char *)this + 224) = 2;
    *((void *)this + 26) = v7;
    char v5 = *((unsigned char *)a2 + 224);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if (*((unsigned char *)a2 + 224))
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 25);
    v6 |= 1u;
    *((unsigned char *)this + 224) = v6;
    *((void *)this + 25) = v8;
    char v5 = *((unsigned char *)a2 + 224);
  }
LABEL_6:
  if ((v5 & 8) == 0)
  {
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v11 = *((_DWORD *)a2 + 55);
  v6 |= 8u;
  *((unsigned char *)this + 224) = v6;
  *((_DWORD *)this + 55) = v11;
  if ((*((unsigned char *)a2 + 224) & 4) != 0)
  {
LABEL_8:
    int v9 = *((_DWORD *)a2 + 54);
    *((unsigned char *)this + 224) = v6 | 4;
    *((_DWORD *)this + 54) = v9;
  }
LABEL_9:
  if (this != a2)
  {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308((char *)this + 56, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    sub_100024308((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_100024308((char *)this + 128, *((char **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
    sub_100024308((char *)this + 152, *((char **)a2 + 19), *((void *)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
    sub_100024308((char *)this + 176, *((char **)a2 + 22), *((void *)a2 + 23), (uint64_t)(*((void *)a2 + 23) - *((void *)a2 + 22)) >> 2);
    sub_100024308((char *)this + 104, *((char **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::AccessoryPPG::operator=(CMMsl *a1, const CMMsl::AccessoryPPG *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryPPG::AccessoryPPG((CMMsl::AccessoryPPG *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryPPG *)v5, v3);
    CMMsl::AccessoryPPG::~AccessoryPPG((CMMsl::AccessoryPPG *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryPPG *a2, CMMsl::AccessoryPPG *a3)
{
  int v3 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v3;
  int v4 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v4;
  int v5 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v12;
  uint64_t v13 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v13;
  uint64_t v14 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v14;
  uint64_t v15 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v15;
  uint64_t v16 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v16;
  uint64_t v17 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v17;
  uint64_t v18 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v18;
  uint64_t v19 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v19;
  uint64_t v20 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v20;
  uint64_t v21 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v21;
  uint64_t v22 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v22;
  uint64_t v23 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v23;
  uint64_t v24 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v24;
  uint64_t v25 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v25;
  uint64_t v27 = *((void *)this + 24);
  uint64_t v26 = *((void *)this + 25);
  uint64_t v28 = *((void *)a2 + 25);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)this + 25) = v28;
  double result = *((double *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((double *)a2 + 26) = result;
  *((void *)a2 + 24) = v27;
  *((void *)a2 + 25) = v26;
  uint64_t v30 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v30;
  uint64_t v31 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v31;
  uint64_t v32 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v32;
  return result;
}

uint64_t CMMsl::AccessoryPPG::AccessoryPPG(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4448;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  uint64_t v6 = a1 + 128;
  uint64_t v7 = a1 + 176;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v8 = a1 + 104;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v9 = a1 + 152;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v10 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a2 + 224) = 0;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  sub_100274A30(v10, (__n128 *)(a2 + 56));
  sub_100274A30(v5, (__n128 *)(a2 + 80));
  sub_100274A30(v6, (__n128 *)(a2 + 128));
  sub_100274A30(v9, (__n128 *)(a2 + 152));
  sub_100274A30(v7, (__n128 *)(a2 + 176));
  sub_100274A30(v8, (__n128 *)(a2 + 104));
  return a1;
}

CMMsl *CMMsl::AccessoryPPG::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccessoryPPG::AccessoryPPG((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryPPG *)v5, v3);
    CMMsl::AccessoryPPG::~AccessoryPPG((CMMsl::AccessoryPPG *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryPPG::formatText(CMMsl::AccessoryPPG *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (unsigned int *)*((void *)this + 1);
  uint64_t v6 = (unsigned int *)*((void *)this + 2);
  while (v5 != v6)
  {
    unsigned int v7 = *v5++;
    PB::TextFormatter::format(a2, "dark0", v7);
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 4);
  uint64_t v9 = (unsigned int *)*((void *)this + 5);
  while (v8 != v9)
  {
    unsigned int v10 = *v8++;
    PB::TextFormatter::format(a2, "dark1", v10);
  }
  uint64_t v11 = (unsigned int *)*((void *)this + 7);
  uint64_t v12 = (unsigned int *)*((void *)this + 8);
  while (v11 != v12)
  {
    unsigned int v13 = *v11++;
    PB::TextFormatter::format(a2, "dark2", v13);
  }
  uint64_t v14 = (unsigned int *)*((void *)this + 10);
  uint64_t v15 = (unsigned int *)*((void *)this + 11);
  while (v14 != v15)
  {
    unsigned int v16 = *v14++;
    PB::TextFormatter::format(a2, "dark3", v16);
  }
  char v17 = *((unsigned char *)this + 224);
  if ((v17 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "error", *((_DWORD *)this + 54));
    char v17 = *((unsigned char *)this + 224);
  }
  if ((v17 & 8) != 0) {
    PB::TextFormatter::format(a2, "frameNum", *((_DWORD *)this + 55));
  }
  uint64_t v18 = (unsigned int *)*((void *)this + 13);
  uint64_t v19 = (unsigned int *)*((void *)this + 14);
  while (v18 != v19)
  {
    unsigned int v20 = *v18++;
    PB::TextFormatter::format(a2, "ledCurrent", v20);
  }
  uint64_t v21 = (unsigned int *)*((void *)this + 16);
  uint64_t v22 = (unsigned int *)*((void *)this + 17);
  while (v21 != v22)
  {
    unsigned int v23 = *v21++;
    PB::TextFormatter::format(a2, "light0", v23);
  }
  uint64_t v24 = (unsigned int *)*((void *)this + 19);
  uint64_t v25 = (unsigned int *)*((void *)this + 20);
  while (v24 != v25)
  {
    unsigned int v26 = *v24++;
    PB::TextFormatter::format(a2, "light1", v26);
  }
  uint64_t v27 = (unsigned int *)*((void *)this + 22);
  uint64_t v28 = (unsigned int *)*((void *)this + 23);
  while (v27 != v28)
  {
    unsigned int v29 = *v27++;
    PB::TextFormatter::format(a2, "rxGain", v29);
  }
  char v30 = *((unsigned char *)this + 224);
  if (v30)
  {
    PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 25));
    char v30 = *((unsigned char *)this + 224);
  }
  if ((v30 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 26));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryPPG::readFrom(CMMsl::AccessoryPPG *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v420 = (void **)((char *)this + 104);
    v421 = (void *)((char *)this + 120);
    uint64_t v8 = (void *)((char *)this + 192);
    v418 = (void **)((char *)this + 152);
    v419 = (void **)((char *)this + 176);
    uint64_t v9 = (void *)((char *)this + 168);
    unsigned int v10 = (void *)((char *)this + 144);
    v416 = (void **)((char *)this + 80);
    v417 = (void **)((char *)this + 128);
    uint64_t v11 = (void *)((char *)this + 96);
    uint64_t v12 = (void *)((char *)this + 72);
    v414 = (void **)((char *)this + 32);
    v415 = (void **)((char *)this + 56);
    unsigned int v13 = (void *)((char *)this + 48);
    v413 = (void **)((char *)this + 8);
    uint64_t v14 = (void *)((char *)this + 24);
    while (1)
    {
      uint64_t v15 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0;
      while (1)
      {
        unint64_t v19 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v20 = *(unsigned char *)(v15 + v2);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v2 = v19;
        BOOL v65 = v17++ > 8;
        if (v65) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v26 = v18 & 7;
      if (v26 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v18 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 224) |= 2u;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 26) = *(void *)(*(void *)a2 + v27);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_706;
        case 2u:
          *((unsigned char *)this + 224) |= 1u;
          unint64_t v28 = *((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          uint64_t v30 = *(void *)a2;
          if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
          {
            char v31 = 0;
            unsigned int v32 = 0;
            uint64_t v33 = 0;
            do
            {
              unint64_t v34 = v28 + 1;
              *((void *)a2 + 1) = v28 + 1;
              char v35 = *(unsigned char *)(v30 + v28);
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0) {
                goto LABEL_518;
              }
              v31 += 7;
              unint64_t v28 = v34;
              BOOL v65 = v32++ > 8;
            }
            while (!v65);
LABEL_417:
            uint64_t v33 = 0;
            goto LABEL_518;
          }
          char v237 = 0;
          unsigned int v238 = 0;
          uint64_t v33 = 0;
          if (v29 <= v28) {
            unint64_t v29 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v29 == v28)
            {
              uint64_t v33 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v239 = v28 + 1;
              char v240 = *(unsigned char *)(v30 + v28);
              *((void *)a2 + 1) = v239;
              v33 |= (unint64_t)(v240 & 0x7F) << v237;
              if (v240 < 0)
              {
                v237 += 7;
                unint64_t v28 = v239;
                BOOL v65 = v238++ > 8;
                if (v65) {
                  goto LABEL_417;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v33 = 0;
              }
            }
            break;
          }
LABEL_518:
          *((void *)this + 25) = v33;
          goto LABEL_706;
        case 3u:
          *((unsigned char *)this + 224) |= 8u;
          unint64_t v36 = *((void *)a2 + 1);
          unint64_t v37 = *((void *)a2 + 2);
          uint64_t v38 = *(void *)a2;
          if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
          {
            char v39 = 0;
            unsigned int v40 = 0;
            uint64_t v41 = 0;
            do
            {
              unint64_t v42 = v36 + 1;
              *((void *)a2 + 1) = v36 + 1;
              char v43 = *(unsigned char *)(v38 + v36);
              v41 |= (unint64_t)(v43 & 0x7F) << v39;
              if ((v43 & 0x80) == 0) {
                goto LABEL_521;
              }
              v39 += 7;
              unint64_t v36 = v42;
              BOOL v65 = v40++ > 8;
            }
            while (!v65);
LABEL_424:
            LODWORD(v41) = 0;
            goto LABEL_521;
          }
          char v241 = 0;
          unsigned int v242 = 0;
          uint64_t v41 = 0;
          if (v37 <= v36) {
            unint64_t v37 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v37 == v36)
            {
              LODWORD(v41) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v243 = v36 + 1;
              char v244 = *(unsigned char *)(v38 + v36);
              *((void *)a2 + 1) = v243;
              v41 |= (unint64_t)(v244 & 0x7F) << v241;
              if (v244 < 0)
              {
                v241 += 7;
                unint64_t v36 = v243;
                BOOL v65 = v242++ > 8;
                if (v65) {
                  goto LABEL_424;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v41) = 0;
              }
            }
            break;
          }
LABEL_521:
          *((_DWORD *)this + 55) = v41;
          goto LABEL_706;
        case 4u:
          *((unsigned char *)this + 224) |= 4u;
          unint64_t v44 = *((void *)a2 + 1);
          unint64_t v45 = *((void *)a2 + 2);
          uint64_t v46 = *(void *)a2;
          if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
          {
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0;
            do
            {
              unint64_t v50 = v44 + 1;
              *((void *)a2 + 1) = v44 + 1;
              char v51 = *(unsigned char *)(v46 + v44);
              v49 |= (unint64_t)(v51 & 0x7F) << v47;
              if ((v51 & 0x80) == 0) {
                goto LABEL_524;
              }
              v47 += 7;
              unint64_t v44 = v50;
              BOOL v65 = v48++ > 8;
            }
            while (!v65);
LABEL_431:
            LODWORD(v49) = 0;
            goto LABEL_524;
          }
          char v245 = 0;
          unsigned int v246 = 0;
          uint64_t v49 = 0;
          if (v45 <= v44) {
            unint64_t v45 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v45 == v44)
            {
              LODWORD(v49) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v247 = v44 + 1;
              char v248 = *(unsigned char *)(v46 + v44);
              *((void *)a2 + 1) = v247;
              v49 |= (unint64_t)(v248 & 0x7F) << v245;
              if (v248 < 0)
              {
                v245 += 7;
                unint64_t v44 = v247;
                BOOL v65 = v246++ > 8;
                if (v65) {
                  goto LABEL_431;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v49) = 0;
              }
            }
            break;
          }
LABEL_524:
          *((_DWORD *)this + 54) = v49;
          goto LABEL_706;
        case 5u:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v52 = (char *)*((void *)this + 2);
              do
              {
                if ((unint64_t)v52 >= *v14)
                {
                  char v53 = (char *)*v413;
                  uint64_t v54 = (v52 - (unsigned char *)*v413) >> 2;
                  unint64_t v55 = v54 + 1;
                  if ((unint64_t)(v54 + 1) >> 62) {
                    goto LABEL_716;
                  }
                  uint64_t v56 = *v14 - (void)v53;
                  if (v56 >> 1 > v55) {
                    unint64_t v55 = v56 >> 1;
                  }
                  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v57 = v55;
                  }
                  if (v57)
                  {
                    unsigned int v58 = (char *)sub_100024458((uint64_t)v14, v57);
                    char v53 = (char *)*((void *)this + 1);
                    char v52 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    unsigned int v58 = 0;
                  }
                  unint64_t v59 = &v58[4 * v54];
                  *(_DWORD *)unint64_t v59 = 0;
                  char v60 = v59 + 4;
                  while (v52 != v53)
                  {
                    int v61 = *((_DWORD *)v52 - 1);
                    v52 -= 4;
                    *((_DWORD *)v59 - 1) = v61;
                    v59 -= 4;
                  }
                  *((void *)this + 1) = v59;
                  *((void *)this + 2) = v60;
                  *((void *)this + 3) = &v58[4 * v57];
                  if (v53) {
                    operator delete(v53);
                  }
                  char v52 = v60;
                }
                else
                {
                  *(_DWORD *)char v52 = 0;
                  v52 += 4;
                }
                *((void *)this + 2) = v52;
                unint64_t v63 = *((void *)a2 + 1);
                unint64_t v62 = *((void *)a2 + 2);
                uint64_t v64 = *(void *)a2;
                BOOL v65 = v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v62;
                if (v65)
                {
                  char v66 = 0;
                  unsigned int v67 = 0;
                  uint64_t v73 = 0;
                  if (v62 <= v63) {
                    uint64_t v68 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v68 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v68 == v63) {
                      goto LABEL_409;
                    }
                    unint64_t v69 = v63++;
                    char v70 = *(unsigned char *)(v64 + v69);
                    *((void *)a2 + 1) = v63;
                    v73 |= (unint64_t)(v70 & 0x7F) << v66;
                    if ((v70 & 0x80) == 0) {
                      break;
                    }
                    v66 += 7;
                    BOOL v65 = v67++ > 8;
                    if (v65)
                    {
                      LODWORD(v73) = 0;
                      goto LABEL_90;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v73) = 0;
                  }
LABEL_90:
                  unint64_t v74 = v69 + 1;
                }
                else
                {
                  char v71 = 0;
                  unsigned int v72 = 0;
                  uint64_t v73 = 0;
                  while (1)
                  {
                    unint64_t v74 = v63 + 1;
                    *((void *)a2 + 1) = v63 + 1;
                    char v75 = *(unsigned char *)(v64 + v63);
                    v73 |= (unint64_t)(v75 & 0x7F) << v71;
                    if ((v75 & 0x80) == 0) {
                      break;
                    }
                    v71 += 7;
                    unint64_t v63 = v74;
                    BOOL v65 = v72++ > 8;
                    if (v65)
                    {
                      LODWORD(v73) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v52 - 1) = v73;
              }
              while (v74 < v62 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_410;
          }
          v250 = (char *)*((void *)this + 2);
          unint64_t v249 = *((void *)this + 3);
          if ((unint64_t)v250 >= v249)
          {
            v266 = (char *)*v413;
            uint64_t v267 = (v250 - (unsigned char *)*v413) >> 2;
            unint64_t v268 = v267 + 1;
            if ((unint64_t)(v267 + 1) >> 62) {
LABEL_716:
            }
              sub_10000EE98();
            uint64_t v269 = v249 - (void)v266;
            if (v269 >> 1 > v268) {
              unint64_t v268 = v269 >> 1;
            }
            if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v270 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v270 = v268;
            }
            if (v270)
            {
              v271 = (char *)sub_100024458((uint64_t)v14, v270);
              v266 = (char *)*((void *)this + 1);
              v250 = (char *)*((void *)this + 2);
            }
            else
            {
              v271 = 0;
            }
            v314 = &v271[4 * v267];
            *(_DWORD *)v314 = 0;
            v251 = v314 + 4;
            while (v250 != v266)
            {
              int v315 = *((_DWORD *)v250 - 1);
              v250 -= 4;
              *((_DWORD *)v314 - 1) = v315;
              v314 -= 4;
            }
            *((void *)this + 1) = v314;
            *((void *)this + 2) = v251;
            *((void *)this + 3) = &v271[4 * v270];
            if (v266) {
              operator delete(v266);
            }
          }
          else
          {
            *(_DWORD *)v250 = 0;
            v251 = v250 + 4;
          }
          *((void *)this + 2) = v251;
          unint64_t v316 = *((void *)a2 + 1);
          unint64_t v317 = *((void *)a2 + 2);
          uint64_t v318 = *(void *)a2;
          char v319 = 0;
          unsigned int v320 = 0;
          if (v316 <= 0xFFFFFFFFFFFFFFF5 && v316 + 10 <= v317)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v325 = v316 + 1;
              *((void *)a2 + 1) = v316 + 1;
              char v326 = *(unsigned char *)(v318 + v316);
              v324 |= (unint64_t)(v326 & 0x7F) << v319;
              if ((v326 & 0x80) == 0) {
                goto LABEL_705;
              }
              v319 += 7;
              unint64_t v316 = v325;
              BOOL v65 = v320++ > 8;
              if (v65) {
                goto LABEL_704;
              }
            }
          }
          uint64_t v324 = 0;
          if (v317 <= v316) {
            unint64_t v317 = *((void *)a2 + 1);
          }
          while (v317 != v316)
          {
            unint64_t v322 = v316 + 1;
            char v323 = *(unsigned char *)(v318 + v316);
            *((void *)a2 + 1) = v322;
            v324 |= (unint64_t)(v323 & 0x7F) << v319;
            if ((v323 & 0x80) == 0) {
              goto LABEL_698;
            }
            v319 += 7;
            unint64_t v316 = v322;
            BOOL v65 = v320++ > 8;
            if (v65) {
              goto LABEL_704;
            }
          }
          goto LABEL_697;
        case 6u:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v52 = (char *)*((void *)this + 5);
              do
              {
                if ((unint64_t)v52 >= *v13)
                {
                  unint64_t v76 = (char *)*v414;
                  uint64_t v77 = (v52 - (unsigned char *)*v414) >> 2;
                  unint64_t v78 = v77 + 1;
                  if ((unint64_t)(v77 + 1) >> 62) {
                    goto LABEL_717;
                  }
                  uint64_t v79 = *v13 - (void)v76;
                  if (v79 >> 1 > v78) {
                    unint64_t v78 = v79 >> 1;
                  }
                  if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v80 = v78;
                  }
                  if (v80)
                  {
                    unint64_t v81 = (char *)sub_100024458((uint64_t)v13, v80);
                    unint64_t v76 = (char *)*((void *)this + 4);
                    char v52 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    unint64_t v81 = 0;
                  }
                  float v82 = &v81[4 * v77];
                  *(_DWORD *)float v82 = 0;
                  float v83 = v82 + 4;
                  while (v52 != v76)
                  {
                    int v84 = *((_DWORD *)v52 - 1);
                    v52 -= 4;
                    *((_DWORD *)v82 - 1) = v84;
                    v82 -= 4;
                  }
                  *((void *)this + 4) = v82;
                  *((void *)this + 5) = v83;
                  *((void *)this + 6) = &v81[4 * v80];
                  if (v76) {
                    operator delete(v76);
                  }
                  char v52 = v83;
                }
                else
                {
                  *(_DWORD *)char v52 = 0;
                  v52 += 4;
                }
                *((void *)this + 5) = v52;
                unint64_t v86 = *((void *)a2 + 1);
                unint64_t v85 = *((void *)a2 + 2);
                uint64_t v87 = *(void *)a2;
                if (v86 > 0xFFFFFFFFFFFFFFF5 || v86 + 10 > v85)
                {
                  char v89 = 0;
                  unsigned int v90 = 0;
                  uint64_t v96 = 0;
                  if (v85 <= v86) {
                    uint64_t v91 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v91 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v91 == v86) {
                      goto LABEL_409;
                    }
                    unint64_t v92 = v86++;
                    char v93 = *(unsigned char *)(v87 + v92);
                    *((void *)a2 + 1) = v86;
                    v96 |= (unint64_t)(v93 & 0x7F) << v89;
                    if ((v93 & 0x80) == 0) {
                      break;
                    }
                    v89 += 7;
                    BOOL v65 = v90++ > 8;
                    if (v65)
                    {
                      LODWORD(v96) = 0;
                      goto LABEL_135;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v96) = 0;
                  }
LABEL_135:
                  unint64_t v97 = v92 + 1;
                }
                else
                {
                  char v94 = 0;
                  unsigned int v95 = 0;
                  uint64_t v96 = 0;
                  while (1)
                  {
                    unint64_t v97 = v86 + 1;
                    *((void *)a2 + 1) = v86 + 1;
                    char v98 = *(unsigned char *)(v87 + v86);
                    v96 |= (unint64_t)(v98 & 0x7F) << v94;
                    if ((v98 & 0x80) == 0) {
                      break;
                    }
                    v94 += 7;
                    unint64_t v86 = v97;
                    BOOL v65 = v95++ > 8;
                    if (v65)
                    {
                      LODWORD(v96) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v52 - 1) = v96;
              }
              while (v97 < v85 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_410;
          }
          v253 = (char *)*((void *)this + 5);
          unint64_t v252 = *((void *)this + 6);
          if ((unint64_t)v253 >= v252)
          {
            v272 = (char *)*v414;
            uint64_t v273 = (v253 - (unsigned char *)*v414) >> 2;
            unint64_t v274 = v273 + 1;
            if ((unint64_t)(v273 + 1) >> 62) {
LABEL_717:
            }
              sub_10000EE98();
            uint64_t v275 = v252 - (void)v272;
            if (v275 >> 1 > v274) {
              unint64_t v274 = v275 >> 1;
            }
            if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v276 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v276 = v274;
            }
            if (v276)
            {
              v277 = (char *)sub_100024458((uint64_t)v13, v276);
              v272 = (char *)*((void *)this + 4);
              v253 = (char *)*((void *)this + 5);
            }
            else
            {
              v277 = 0;
            }
            v327 = &v277[4 * v273];
            *(_DWORD *)v327 = 0;
            v251 = v327 + 4;
            while (v253 != v272)
            {
              int v328 = *((_DWORD *)v253 - 1);
              v253 -= 4;
              *((_DWORD *)v327 - 1) = v328;
              v327 -= 4;
            }
            *((void *)this + 4) = v327;
            *((void *)this + 5) = v251;
            *((void *)this + 6) = &v277[4 * v276];
            if (v272) {
              operator delete(v272);
            }
          }
          else
          {
            *(_DWORD *)v253 = 0;
            v251 = v253 + 4;
          }
          *((void *)this + 5) = v251;
          unint64_t v329 = *((void *)a2 + 1);
          unint64_t v330 = *((void *)a2 + 2);
          uint64_t v331 = *(void *)a2;
          char v332 = 0;
          unsigned int v333 = 0;
          if (v329 <= 0xFFFFFFFFFFFFFFF5 && v329 + 10 <= v330)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v337 = v329 + 1;
              *((void *)a2 + 1) = v329 + 1;
              char v338 = *(unsigned char *)(v331 + v329);
              v324 |= (unint64_t)(v338 & 0x7F) << v332;
              if ((v338 & 0x80) == 0) {
                goto LABEL_705;
              }
              v332 += 7;
              unint64_t v329 = v337;
              BOOL v65 = v333++ > 8;
              if (v65) {
                goto LABEL_704;
              }
            }
          }
          uint64_t v324 = 0;
          if (v330 <= v329) {
            unint64_t v330 = *((void *)a2 + 1);
          }
          while (v330 != v329)
          {
            unint64_t v335 = v329 + 1;
            char v336 = *(unsigned char *)(v331 + v329);
            *((void *)a2 + 1) = v335;
            v324 |= (unint64_t)(v336 & 0x7F) << v332;
            if ((v336 & 0x80) == 0) {
              goto LABEL_698;
            }
            v332 += 7;
            unint64_t v329 = v335;
            BOOL v65 = v333++ > 8;
            if (v65) {
              goto LABEL_704;
            }
          }
          goto LABEL_697;
        case 7u:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v52 = (char *)*((void *)this + 8);
              do
              {
                if ((unint64_t)v52 >= *v12)
                {
                  unint64_t v99 = (char *)*v415;
                  uint64_t v100 = (v52 - (unsigned char *)*v415) >> 2;
                  unint64_t v101 = v100 + 1;
                  if ((unint64_t)(v100 + 1) >> 62) {
                    goto LABEL_718;
                  }
                  uint64_t v102 = *v12 - (void)v99;
                  if (v102 >> 1 > v101) {
                    unint64_t v101 = v102 >> 1;
                  }
                  if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v103 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v103 = v101;
                  }
                  if (v103)
                  {
                    int v104 = (char *)sub_100024458((uint64_t)v12, v103);
                    unint64_t v99 = (char *)*((void *)this + 7);
                    char v52 = (char *)*((void *)this + 8);
                  }
                  else
                  {
                    int v104 = 0;
                  }
                  char v105 = &v104[4 * v100];
                  *(_DWORD *)char v105 = 0;
                  int v106 = v105 + 4;
                  while (v52 != v99)
                  {
                    int v107 = *((_DWORD *)v52 - 1);
                    v52 -= 4;
                    *((_DWORD *)v105 - 1) = v107;
                    v105 -= 4;
                  }
                  *((void *)this + 7) = v105;
                  *((void *)this + 8) = v106;
                  *((void *)this + 9) = &v104[4 * v103];
                  if (v99) {
                    operator delete(v99);
                  }
                  char v52 = v106;
                }
                else
                {
                  *(_DWORD *)char v52 = 0;
                  v52 += 4;
                }
                *((void *)this + 8) = v52;
                unint64_t v109 = *((void *)a2 + 1);
                unint64_t v108 = *((void *)a2 + 2);
                uint64_t v110 = *(void *)a2;
                if (v109 > 0xFFFFFFFFFFFFFFF5 || v109 + 10 > v108)
                {
                  char v112 = 0;
                  unsigned int v113 = 0;
                  uint64_t v119 = 0;
                  if (v108 <= v109) {
                    uint64_t v114 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v114 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v114 == v109) {
                      goto LABEL_409;
                    }
                    unint64_t v115 = v109++;
                    char v116 = *(unsigned char *)(v110 + v115);
                    *((void *)a2 + 1) = v109;
                    v119 |= (unint64_t)(v116 & 0x7F) << v112;
                    if ((v116 & 0x80) == 0) {
                      break;
                    }
                    v112 += 7;
                    BOOL v65 = v113++ > 8;
                    if (v65)
                    {
                      LODWORD(v119) = 0;
                      goto LABEL_180;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v119) = 0;
                  }
LABEL_180:
                  unint64_t v120 = v115 + 1;
                }
                else
                {
                  char v117 = 0;
                  unsigned int v118 = 0;
                  uint64_t v119 = 0;
                  while (1)
                  {
                    unint64_t v120 = v109 + 1;
                    *((void *)a2 + 1) = v109 + 1;
                    char v121 = *(unsigned char *)(v110 + v109);
                    v119 |= (unint64_t)(v121 & 0x7F) << v117;
                    if ((v121 & 0x80) == 0) {
                      break;
                    }
                    v117 += 7;
                    unint64_t v109 = v120;
                    BOOL v65 = v118++ > 8;
                    if (v65)
                    {
                      LODWORD(v119) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v52 - 1) = v119;
              }
              while (v120 < v108 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_410;
          }
          v255 = (char *)*((void *)this + 8);
          unint64_t v254 = *((void *)this + 9);
          if ((unint64_t)v255 >= v254)
          {
            v278 = (char *)*v415;
            uint64_t v279 = (v255 - (unsigned char *)*v415) >> 2;
            unint64_t v280 = v279 + 1;
            if ((unint64_t)(v279 + 1) >> 62) {
LABEL_718:
            }
              sub_10000EE98();
            uint64_t v281 = v254 - (void)v278;
            if (v281 >> 1 > v280) {
              unint64_t v280 = v281 >> 1;
            }
            if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v282 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v282 = v280;
            }
            if (v282)
            {
              v283 = (char *)sub_100024458((uint64_t)v12, v282);
              v278 = (char *)*((void *)this + 7);
              v255 = (char *)*((void *)this + 8);
            }
            else
            {
              v283 = 0;
            }
            v339 = &v283[4 * v279];
            *(_DWORD *)v339 = 0;
            v251 = v339 + 4;
            while (v255 != v278)
            {
              int v340 = *((_DWORD *)v255 - 1);
              v255 -= 4;
              *((_DWORD *)v339 - 1) = v340;
              v339 -= 4;
            }
            *((void *)this + 7) = v339;
            *((void *)this + 8) = v251;
            *((void *)this + 9) = &v283[4 * v282];
            if (v278) {
              operator delete(v278);
            }
          }
          else
          {
            *(_DWORD *)v255 = 0;
            v251 = v255 + 4;
          }
          *((void *)this + 8) = v251;
          unint64_t v341 = *((void *)a2 + 1);
          unint64_t v342 = *((void *)a2 + 2);
          uint64_t v343 = *(void *)a2;
          char v344 = 0;
          unsigned int v345 = 0;
          if (v341 <= 0xFFFFFFFFFFFFFFF5 && v341 + 10 <= v342)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v349 = v341 + 1;
              *((void *)a2 + 1) = v341 + 1;
              char v350 = *(unsigned char *)(v343 + v341);
              v324 |= (unint64_t)(v350 & 0x7F) << v344;
              if ((v350 & 0x80) == 0) {
                goto LABEL_705;
              }
              v344 += 7;
              unint64_t v341 = v349;
              BOOL v65 = v345++ > 8;
              if (v65) {
                goto LABEL_704;
              }
            }
          }
          uint64_t v324 = 0;
          if (v342 <= v341) {
            unint64_t v342 = *((void *)a2 + 1);
          }
          while (v342 != v341)
          {
            unint64_t v347 = v341 + 1;
            char v348 = *(unsigned char *)(v343 + v341);
            *((void *)a2 + 1) = v347;
            v324 |= (unint64_t)(v348 & 0x7F) << v344;
            if ((v348 & 0x80) == 0) {
              goto LABEL_698;
            }
            v344 += 7;
            unint64_t v341 = v347;
            BOOL v65 = v345++ > 8;
            if (v65) {
              goto LABEL_704;
            }
          }
          goto LABEL_697;
        case 8u:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v52 = (char *)*((void *)this + 11);
              do
              {
                if ((unint64_t)v52 >= *v11)
                {
                  __int16 v122 = (char *)*v416;
                  uint64_t v123 = (v52 - (unsigned char *)*v416) >> 2;
                  unint64_t v124 = v123 + 1;
                  if ((unint64_t)(v123 + 1) >> 62) {
                    goto LABEL_719;
                  }
                  uint64_t v125 = *v11 - (void)v122;
                  if (v125 >> 1 > v124) {
                    unint64_t v124 = v125 >> 1;
                  }
                  if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v126 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v126 = v124;
                  }
                  if (v126)
                  {
                    int v127 = (char *)sub_100024458((uint64_t)v11, v126);
                    __int16 v122 = (char *)*((void *)this + 10);
                    char v52 = (char *)*((void *)this + 11);
                  }
                  else
                  {
                    int v127 = 0;
                  }
                  __int16 v128 = &v127[4 * v123];
                  *(_DWORD *)__int16 v128 = 0;
                  int v129 = v128 + 4;
                  while (v52 != v122)
                  {
                    int v130 = *((_DWORD *)v52 - 1);
                    v52 -= 4;
                    *((_DWORD *)v128 - 1) = v130;
                    v128 -= 4;
                  }
                  *((void *)this + 10) = v128;
                  *((void *)this + 11) = v129;
                  *((void *)this + 12) = &v127[4 * v126];
                  if (v122) {
                    operator delete(v122);
                  }
                  char v52 = v129;
                }
                else
                {
                  *(_DWORD *)char v52 = 0;
                  v52 += 4;
                }
                *((void *)this + 11) = v52;
                unint64_t v132 = *((void *)a2 + 1);
                unint64_t v131 = *((void *)a2 + 2);
                uint64_t v133 = *(void *)a2;
                if (v132 > 0xFFFFFFFFFFFFFFF5 || v132 + 10 > v131)
                {
                  char v135 = 0;
                  unsigned int v136 = 0;
                  uint64_t v142 = 0;
                  if (v131 <= v132) {
                    uint64_t v137 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v137 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v137 == v132) {
                      goto LABEL_409;
                    }
                    unint64_t v138 = v132++;
                    char v139 = *(unsigned char *)(v133 + v138);
                    *((void *)a2 + 1) = v132;
                    v142 |= (unint64_t)(v139 & 0x7F) << v135;
                    if ((v139 & 0x80) == 0) {
                      break;
                    }
                    v135 += 7;
                    BOOL v65 = v136++ > 8;
                    if (v65)
                    {
                      LODWORD(v142) = 0;
                      goto LABEL_225;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v142) = 0;
                  }
LABEL_225:
                  unint64_t v143 = v138 + 1;
                }
                else
                {
                  char v140 = 0;
                  unsigned int v141 = 0;
                  uint64_t v142 = 0;
                  while (1)
                  {
                    unint64_t v143 = v132 + 1;
                    *((void *)a2 + 1) = v132 + 1;
                    char v144 = *(unsigned char *)(v133 + v132);
                    v142 |= (unint64_t)(v144 & 0x7F) << v140;
                    if ((v144 & 0x80) == 0) {
                      break;
                    }
                    v140 += 7;
                    unint64_t v132 = v143;
                    BOOL v65 = v141++ > 8;
                    if (v65)
                    {
                      LODWORD(v142) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v52 - 1) = v142;
              }
              while (v143 < v131 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_410;
          }
          v257 = (char *)*((void *)this + 11);
          unint64_t v256 = *((void *)this + 12);
          if ((unint64_t)v257 >= v256)
          {
            v284 = (char *)*v416;
            uint64_t v285 = (v257 - (unsigned char *)*v416) >> 2;
            unint64_t v286 = v285 + 1;
            if ((unint64_t)(v285 + 1) >> 62) {
LABEL_719:
            }
              sub_10000EE98();
            uint64_t v287 = v256 - (void)v284;
            if (v287 >> 1 > v286) {
              unint64_t v286 = v287 >> 1;
            }
            if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v288 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v288 = v286;
            }
            if (v288)
            {
              v289 = (char *)sub_100024458((uint64_t)v11, v288);
              v284 = (char *)*((void *)this + 10);
              v257 = (char *)*((void *)this + 11);
            }
            else
            {
              v289 = 0;
            }
            v351 = &v289[4 * v285];
            *(_DWORD *)v351 = 0;
            v251 = v351 + 4;
            while (v257 != v284)
            {
              int v352 = *((_DWORD *)v257 - 1);
              v257 -= 4;
              *((_DWORD *)v351 - 1) = v352;
              v351 -= 4;
            }
            *((void *)this + 10) = v351;
            *((void *)this + 11) = v251;
            *((void *)this + 12) = &v289[4 * v288];
            if (v284) {
              operator delete(v284);
            }
          }
          else
          {
            *(_DWORD *)v257 = 0;
            v251 = v257 + 4;
          }
          *((void *)this + 11) = v251;
          unint64_t v353 = *((void *)a2 + 1);
          unint64_t v354 = *((void *)a2 + 2);
          uint64_t v355 = *(void *)a2;
          char v356 = 0;
          unsigned int v357 = 0;
          if (v353 <= 0xFFFFFFFFFFFFFFF5 && v353 + 10 <= v354)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v361 = v353 + 1;
              *((void *)a2 + 1) = v353 + 1;
              char v362 = *(unsigned char *)(v355 + v353);
              v324 |= (unint64_t)(v362 & 0x7F) << v356;
              if ((v362 & 0x80) == 0) {
                goto LABEL_705;
              }
              v356 += 7;
              unint64_t v353 = v361;
              BOOL v65 = v357++ > 8;
              if (v65) {
                goto LABEL_704;
              }
            }
          }
          uint64_t v324 = 0;
          if (v354 <= v353) {
            unint64_t v354 = *((void *)a2 + 1);
          }
          while (v354 != v353)
          {
            unint64_t v359 = v353 + 1;
            char v360 = *(unsigned char *)(v355 + v353);
            *((void *)a2 + 1) = v359;
            v324 |= (unint64_t)(v360 & 0x7F) << v356;
            if ((v360 & 0x80) == 0) {
              goto LABEL_698;
            }
            v356 += 7;
            unint64_t v353 = v359;
            BOOL v65 = v357++ > 8;
            if (v65) {
              goto LABEL_704;
            }
          }
          goto LABEL_697;
        case 9u:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v52 = (char *)*((void *)this + 17);
              do
              {
                if ((unint64_t)v52 >= *v10)
                {
                  int v145 = (char *)*v417;
                  uint64_t v146 = (v52 - (unsigned char *)*v417) >> 2;
                  unint64_t v147 = v146 + 1;
                  if ((unint64_t)(v146 + 1) >> 62) {
                    goto LABEL_720;
                  }
                  uint64_t v148 = *v10 - (void)v145;
                  if (v148 >> 1 > v147) {
                    unint64_t v147 = v148 >> 1;
                  }
                  if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v149 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v149 = v147;
                  }
                  if (v149)
                  {
                    __int16 v150 = (char *)sub_100024458((uint64_t)v10, v149);
                    int v145 = (char *)*((void *)this + 16);
                    char v52 = (char *)*((void *)this + 17);
                  }
                  else
                  {
                    __int16 v150 = 0;
                  }
                  int v151 = &v150[4 * v146];
                  *(_DWORD *)int v151 = 0;
                  v152 = v151 + 4;
                  while (v52 != v145)
                  {
                    int v153 = *((_DWORD *)v52 - 1);
                    v52 -= 4;
                    *((_DWORD *)v151 - 1) = v153;
                    v151 -= 4;
                  }
                  *((void *)this + 16) = v151;
                  *((void *)this + 17) = v152;
                  *((void *)this + 18) = &v150[4 * v149];
                  if (v145) {
                    operator delete(v145);
                  }
                  char v52 = v152;
                }
                else
                {
                  *(_DWORD *)char v52 = 0;
                  v52 += 4;
                }
                *((void *)this + 17) = v52;
                unint64_t v155 = *((void *)a2 + 1);
                unint64_t v154 = *((void *)a2 + 2);
                uint64_t v156 = *(void *)a2;
                if (v155 > 0xFFFFFFFFFFFFFFF5 || v155 + 10 > v154)
                {
                  char v158 = 0;
                  unsigned int v159 = 0;
                  uint64_t v165 = 0;
                  if (v154 <= v155) {
                    uint64_t v160 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v160 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v160 == v155) {
                      goto LABEL_409;
                    }
                    unint64_t v161 = v155++;
                    char v162 = *(unsigned char *)(v156 + v161);
                    *((void *)a2 + 1) = v155;
                    v165 |= (unint64_t)(v162 & 0x7F) << v158;
                    if ((v162 & 0x80) == 0) {
                      break;
                    }
                    v158 += 7;
                    BOOL v65 = v159++ > 8;
                    if (v65)
                    {
                      LODWORD(v165) = 0;
                      goto LABEL_270;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v165) = 0;
                  }
LABEL_270:
                  unint64_t v166 = v161 + 1;
                }
                else
                {
                  char v163 = 0;
                  unsigned int v164 = 0;
                  uint64_t v165 = 0;
                  while (1)
                  {
                    unint64_t v166 = v155 + 1;
                    *((void *)a2 + 1) = v155 + 1;
                    char v167 = *(unsigned char *)(v156 + v155);
                    v165 |= (unint64_t)(v167 & 0x7F) << v163;
                    if ((v167 & 0x80) == 0) {
                      break;
                    }
                    v163 += 7;
                    unint64_t v155 = v166;
                    BOOL v65 = v164++ > 8;
                    if (v65)
                    {
                      LODWORD(v165) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v52 - 1) = v165;
              }
              while (v166 < v154 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_410;
          }
          v259 = (char *)*((void *)this + 17);
          unint64_t v258 = *((void *)this + 18);
          if ((unint64_t)v259 >= v258)
          {
            v290 = (char *)*v417;
            uint64_t v291 = (v259 - (unsigned char *)*v417) >> 2;
            unint64_t v292 = v291 + 1;
            if ((unint64_t)(v291 + 1) >> 62) {
LABEL_720:
            }
              sub_10000EE98();
            uint64_t v293 = v258 - (void)v290;
            if (v293 >> 1 > v292) {
              unint64_t v292 = v293 >> 1;
            }
            if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v294 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v294 = v292;
            }
            if (v294)
            {
              v295 = (char *)sub_100024458((uint64_t)v10, v294);
              v290 = (char *)*((void *)this + 16);
              v259 = (char *)*((void *)this + 17);
            }
            else
            {
              v295 = 0;
            }
            v363 = &v295[4 * v291];
            *(_DWORD *)v363 = 0;
            v251 = v363 + 4;
            while (v259 != v290)
            {
              int v364 = *((_DWORD *)v259 - 1);
              v259 -= 4;
              *((_DWORD *)v363 - 1) = v364;
              v363 -= 4;
            }
            *((void *)this + 16) = v363;
            *((void *)this + 17) = v251;
            *((void *)this + 18) = &v295[4 * v294];
            if (v290) {
              operator delete(v290);
            }
          }
          else
          {
            *(_DWORD *)v259 = 0;
            v251 = v259 + 4;
          }
          *((void *)this + 17) = v251;
          unint64_t v365 = *((void *)a2 + 1);
          unint64_t v366 = *((void *)a2 + 2);
          uint64_t v367 = *(void *)a2;
          char v368 = 0;
          unsigned int v369 = 0;
          if (v365 <= 0xFFFFFFFFFFFFFFF5 && v365 + 10 <= v366)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v373 = v365 + 1;
              *((void *)a2 + 1) = v365 + 1;
              char v374 = *(unsigned char *)(v367 + v365);
              v324 |= (unint64_t)(v374 & 0x7F) << v368;
              if ((v374 & 0x80) == 0) {
                goto LABEL_705;
              }
              v368 += 7;
              unint64_t v365 = v373;
              BOOL v65 = v369++ > 8;
              if (v65) {
                goto LABEL_704;
              }
            }
          }
          uint64_t v324 = 0;
          if (v366 <= v365) {
            unint64_t v366 = *((void *)a2 + 1);
          }
          while (v366 != v365)
          {
            unint64_t v371 = v365 + 1;
            char v372 = *(unsigned char *)(v367 + v365);
            *((void *)a2 + 1) = v371;
            v324 |= (unint64_t)(v372 & 0x7F) << v368;
            if ((v372 & 0x80) == 0) {
              goto LABEL_698;
            }
            v368 += 7;
            unint64_t v365 = v371;
            BOOL v65 = v369++ > 8;
            if (v65) {
              goto LABEL_704;
            }
          }
          goto LABEL_697;
        case 0xAu:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v52 = (char *)*((void *)this + 20);
              do
              {
                if ((unint64_t)v52 >= *v9)
                {
                  v168 = (char *)*v418;
                  uint64_t v169 = (v52 - (unsigned char *)*v418) >> 2;
                  unint64_t v170 = v169 + 1;
                  if ((unint64_t)(v169 + 1) >> 62) {
                    goto LABEL_721;
                  }
                  uint64_t v171 = *v9 - (void)v168;
                  if (v171 >> 1 > v170) {
                    unint64_t v170 = v171 >> 1;
                  }
                  if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v172 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v172 = v170;
                  }
                  if (v172)
                  {
                    v173 = (char *)sub_100024458((uint64_t)v9, v172);
                    v168 = (char *)*((void *)this + 19);
                    char v52 = (char *)*((void *)this + 20);
                  }
                  else
                  {
                    v173 = 0;
                  }
                  v174 = &v173[4 * v169];
                  *(_DWORD *)v174 = 0;
                  v175 = v174 + 4;
                  while (v52 != v168)
                  {
                    int v176 = *((_DWORD *)v52 - 1);
                    v52 -= 4;
                    *((_DWORD *)v174 - 1) = v176;
                    v174 -= 4;
                  }
                  *((void *)this + 19) = v174;
                  *((void *)this + 20) = v175;
                  *((void *)this + 21) = &v173[4 * v172];
                  if (v168) {
                    operator delete(v168);
                  }
                  char v52 = v175;
                }
                else
                {
                  *(_DWORD *)char v52 = 0;
                  v52 += 4;
                }
                *((void *)this + 20) = v52;
                unint64_t v178 = *((void *)a2 + 1);
                unint64_t v177 = *((void *)a2 + 2);
                uint64_t v179 = *(void *)a2;
                if (v178 > 0xFFFFFFFFFFFFFFF5 || v178 + 10 > v177)
                {
                  char v181 = 0;
                  unsigned int v182 = 0;
                  uint64_t v188 = 0;
                  if (v177 <= v178) {
                    uint64_t v183 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v183 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v183 == v178) {
                      goto LABEL_409;
                    }
                    unint64_t v184 = v178++;
                    char v185 = *(unsigned char *)(v179 + v184);
                    *((void *)a2 + 1) = v178;
                    v188 |= (unint64_t)(v185 & 0x7F) << v181;
                    if ((v185 & 0x80) == 0) {
                      break;
                    }
                    v181 += 7;
                    BOOL v65 = v182++ > 8;
                    if (v65)
                    {
                      LODWORD(v188) = 0;
                      goto LABEL_315;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v188) = 0;
                  }
LABEL_315:
                  unint64_t v189 = v184 + 1;
                }
                else
                {
                  char v186 = 0;
                  unsigned int v187 = 0;
                  uint64_t v188 = 0;
                  while (1)
                  {
                    unint64_t v189 = v178 + 1;
                    *((void *)a2 + 1) = v178 + 1;
                    char v190 = *(unsigned char *)(v179 + v178);
                    v188 |= (unint64_t)(v190 & 0x7F) << v186;
                    if ((v190 & 0x80) == 0) {
                      break;
                    }
                    v186 += 7;
                    unint64_t v178 = v189;
                    BOOL v65 = v187++ > 8;
                    if (v65)
                    {
                      LODWORD(v188) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v52 - 1) = v188;
              }
              while (v189 < v177 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_410;
          }
          v261 = (char *)*((void *)this + 20);
          unint64_t v260 = *((void *)this + 21);
          if ((unint64_t)v261 >= v260)
          {
            v296 = (char *)*v418;
            uint64_t v297 = (v261 - (unsigned char *)*v418) >> 2;
            unint64_t v298 = v297 + 1;
            if ((unint64_t)(v297 + 1) >> 62) {
LABEL_721:
            }
              sub_10000EE98();
            uint64_t v299 = v260 - (void)v296;
            if (v299 >> 1 > v298) {
              unint64_t v298 = v299 >> 1;
            }
            if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v300 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v300 = v298;
            }
            if (v300)
            {
              v301 = (char *)sub_100024458((uint64_t)v9, v300);
              v296 = (char *)*((void *)this + 19);
              v261 = (char *)*((void *)this + 20);
            }
            else
            {
              v301 = 0;
            }
            v375 = &v301[4 * v297];
            *(_DWORD *)v375 = 0;
            v251 = v375 + 4;
            while (v261 != v296)
            {
              int v376 = *((_DWORD *)v261 - 1);
              v261 -= 4;
              *((_DWORD *)v375 - 1) = v376;
              v375 -= 4;
            }
            *((void *)this + 19) = v375;
            *((void *)this + 20) = v251;
            *((void *)this + 21) = &v301[4 * v300];
            if (v296) {
              operator delete(v296);
            }
          }
          else
          {
            *(_DWORD *)v261 = 0;
            v251 = v261 + 4;
          }
          *((void *)this + 20) = v251;
          unint64_t v377 = *((void *)a2 + 1);
          unint64_t v378 = *((void *)a2 + 2);
          uint64_t v379 = *(void *)a2;
          char v380 = 0;
          unsigned int v381 = 0;
          if (v377 <= 0xFFFFFFFFFFFFFFF5 && v377 + 10 <= v378)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v385 = v377 + 1;
              *((void *)a2 + 1) = v377 + 1;
              char v386 = *(unsigned char *)(v379 + v377);
              v324 |= (unint64_t)(v386 & 0x7F) << v380;
              if ((v386 & 0x80) == 0) {
                goto LABEL_705;
              }
              v380 += 7;
              unint64_t v377 = v385;
              BOOL v65 = v381++ > 8;
              if (v65) {
                goto LABEL_704;
              }
            }
          }
          uint64_t v324 = 0;
          if (v378 <= v377) {
            unint64_t v378 = *((void *)a2 + 1);
          }
          while (v378 != v377)
          {
            unint64_t v383 = v377 + 1;
            char v384 = *(unsigned char *)(v379 + v377);
            *((void *)a2 + 1) = v383;
            v324 |= (unint64_t)(v384 & 0x7F) << v380;
            if ((v384 & 0x80) == 0) {
              goto LABEL_698;
            }
            v380 += 7;
            unint64_t v377 = v383;
            BOOL v65 = v381++ > 8;
            if (v65) {
              goto LABEL_704;
            }
          }
          goto LABEL_697;
        case 0xBu:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v52 = (char *)*((void *)this + 23);
              do
              {
                if ((unint64_t)v52 >= *v8)
                {
                  v191 = (char *)*v419;
                  uint64_t v192 = (v52 - (unsigned char *)*v419) >> 2;
                  unint64_t v193 = v192 + 1;
                  if ((unint64_t)(v192 + 1) >> 62) {
                    goto LABEL_722;
                  }
                  uint64_t v194 = *v8 - (void)v191;
                  if (v194 >> 1 > v193) {
                    unint64_t v193 = v194 >> 1;
                  }
                  if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v195 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v195 = v193;
                  }
                  if (v195)
                  {
                    v196 = (char *)sub_100024458((uint64_t)v8, v195);
                    v191 = (char *)*((void *)this + 22);
                    char v52 = (char *)*((void *)this + 23);
                  }
                  else
                  {
                    v196 = 0;
                  }
                  v197 = &v196[4 * v192];
                  *(_DWORD *)v197 = 0;
                  v198 = v197 + 4;
                  while (v52 != v191)
                  {
                    int v199 = *((_DWORD *)v52 - 1);
                    v52 -= 4;
                    *((_DWORD *)v197 - 1) = v199;
                    v197 -= 4;
                  }
                  *((void *)this + 22) = v197;
                  *((void *)this + 23) = v198;
                  *((void *)this + 24) = &v196[4 * v195];
                  if (v191) {
                    operator delete(v191);
                  }
                  char v52 = v198;
                }
                else
                {
                  *(_DWORD *)char v52 = 0;
                  v52 += 4;
                }
                *((void *)this + 23) = v52;
                unint64_t v201 = *((void *)a2 + 1);
                unint64_t v200 = *((void *)a2 + 2);
                uint64_t v202 = *(void *)a2;
                if (v201 > 0xFFFFFFFFFFFFFFF5 || v201 + 10 > v200)
                {
                  char v204 = 0;
                  unsigned int v205 = 0;
                  uint64_t v211 = 0;
                  if (v200 <= v201) {
                    uint64_t v206 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v206 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v206 == v201) {
                      goto LABEL_409;
                    }
                    unint64_t v207 = v201++;
                    char v208 = *(unsigned char *)(v202 + v207);
                    *((void *)a2 + 1) = v201;
                    v211 |= (unint64_t)(v208 & 0x7F) << v204;
                    if ((v208 & 0x80) == 0) {
                      break;
                    }
                    v204 += 7;
                    BOOL v65 = v205++ > 8;
                    if (v65)
                    {
                      LODWORD(v211) = 0;
                      goto LABEL_360;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v211) = 0;
                  }
LABEL_360:
                  unint64_t v212 = v207 + 1;
                }
                else
                {
                  char v209 = 0;
                  unsigned int v210 = 0;
                  uint64_t v211 = 0;
                  while (1)
                  {
                    unint64_t v212 = v201 + 1;
                    *((void *)a2 + 1) = v201 + 1;
                    char v213 = *(unsigned char *)(v202 + v201);
                    v211 |= (unint64_t)(v213 & 0x7F) << v209;
                    if ((v213 & 0x80) == 0) {
                      break;
                    }
                    v209 += 7;
                    unint64_t v201 = v212;
                    BOOL v65 = v210++ > 8;
                    if (v65)
                    {
                      LODWORD(v211) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v52 - 1) = v211;
              }
              while (v212 < v200 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_410;
          }
          v263 = (char *)*((void *)this + 23);
          unint64_t v262 = *((void *)this + 24);
          if ((unint64_t)v263 >= v262)
          {
            v302 = (char *)*v419;
            uint64_t v303 = (v263 - (unsigned char *)*v419) >> 2;
            unint64_t v304 = v303 + 1;
            if ((unint64_t)(v303 + 1) >> 62) {
LABEL_722:
            }
              sub_10000EE98();
            uint64_t v305 = v262 - (void)v302;
            if (v305 >> 1 > v304) {
              unint64_t v304 = v305 >> 1;
            }
            if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v306 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v306 = v304;
            }
            if (v306)
            {
              v307 = (char *)sub_100024458((uint64_t)v8, v306);
              v302 = (char *)*((void *)this + 22);
              v263 = (char *)*((void *)this + 23);
            }
            else
            {
              v307 = 0;
            }
            v387 = &v307[4 * v303];
            *(_DWORD *)v387 = 0;
            v251 = v387 + 4;
            while (v263 != v302)
            {
              int v388 = *((_DWORD *)v263 - 1);
              v263 -= 4;
              *((_DWORD *)v387 - 1) = v388;
              v387 -= 4;
            }
            *((void *)this + 22) = v387;
            *((void *)this + 23) = v251;
            *((void *)this + 24) = &v307[4 * v306];
            if (v302) {
              operator delete(v302);
            }
          }
          else
          {
            *(_DWORD *)v263 = 0;
            v251 = v263 + 4;
          }
          *((void *)this + 23) = v251;
          unint64_t v389 = *((void *)a2 + 1);
          unint64_t v390 = *((void *)a2 + 2);
          uint64_t v391 = *(void *)a2;
          char v392 = 0;
          unsigned int v393 = 0;
          if (v389 <= 0xFFFFFFFFFFFFFFF5 && v389 + 10 <= v390)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v397 = v389 + 1;
              *((void *)a2 + 1) = v389 + 1;
              char v398 = *(unsigned char *)(v391 + v389);
              v324 |= (unint64_t)(v398 & 0x7F) << v392;
              if ((v398 & 0x80) == 0) {
                goto LABEL_705;
              }
              v392 += 7;
              unint64_t v389 = v397;
              BOOL v65 = v393++ > 8;
              if (v65) {
                goto LABEL_704;
              }
            }
          }
          uint64_t v324 = 0;
          if (v390 <= v389) {
            unint64_t v390 = *((void *)a2 + 1);
          }
          while (v390 != v389)
          {
            unint64_t v395 = v389 + 1;
            char v396 = *(unsigned char *)(v391 + v389);
            *((void *)a2 + 1) = v395;
            v324 |= (unint64_t)(v396 & 0x7F) << v392;
            if ((v396 & 0x80) == 0) {
              goto LABEL_698;
            }
            v392 += 7;
            unint64_t v389 = v395;
            BOOL v65 = v393++ > 8;
            if (v65) {
              goto LABEL_704;
            }
          }
          goto LABEL_697;
        case 0xCu:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v52 = (char *)*((void *)this + 14);
              do
              {
                if ((unint64_t)v52 >= *v421)
                {
                  v214 = (char *)*v420;
                  uint64_t v215 = (v52 - (unsigned char *)*v420) >> 2;
                  unint64_t v216 = v215 + 1;
                  if ((unint64_t)(v215 + 1) >> 62) {
                    goto LABEL_723;
                  }
                  uint64_t v217 = *v421 - (void)v214;
                  if (v217 >> 1 > v216) {
                    unint64_t v216 = v217 >> 1;
                  }
                  if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v218 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v218 = v216;
                  }
                  if (v218)
                  {
                    v219 = (char *)sub_100024458((uint64_t)v421, v218);
                    v214 = (char *)*((void *)this + 13);
                    char v52 = (char *)*((void *)this + 14);
                  }
                  else
                  {
                    v219 = 0;
                  }
                  v220 = &v219[4 * v215];
                  *(_DWORD *)v220 = 0;
                  v221 = v220 + 4;
                  while (v52 != v214)
                  {
                    int v222 = *((_DWORD *)v52 - 1);
                    v52 -= 4;
                    *((_DWORD *)v220 - 1) = v222;
                    v220 -= 4;
                  }
                  *((void *)this + 13) = v220;
                  *((void *)this + 14) = v221;
                  *((void *)this + 15) = &v219[4 * v218];
                  if (v214) {
                    operator delete(v214);
                  }
                  char v52 = v221;
                }
                else
                {
                  *(_DWORD *)char v52 = 0;
                  v52 += 4;
                }
                *((void *)this + 14) = v52;
                unint64_t v224 = *((void *)a2 + 1);
                unint64_t v223 = *((void *)a2 + 2);
                uint64_t v225 = *(void *)a2;
                if (v224 <= 0xFFFFFFFFFFFFFFF5 && v224 + 10 <= v223)
                {
                  char v232 = 0;
                  unsigned int v233 = 0;
                  uint64_t v234 = 0;
                  while (1)
                  {
                    unint64_t v235 = v224 + 1;
                    *((void *)a2 + 1) = v224 + 1;
                    char v236 = *(unsigned char *)(v225 + v224);
                    v234 |= (unint64_t)(v236 & 0x7F) << v232;
                    if ((v236 & 0x80) == 0) {
                      goto LABEL_406;
                    }
                    v232 += 7;
                    unint64_t v224 = v235;
                    BOOL v65 = v233++ > 8;
                    if (v65)
                    {
                      LODWORD(v234) = 0;
                      goto LABEL_406;
                    }
                  }
                }
                char v227 = 0;
                unsigned int v228 = 0;
                uint64_t v234 = 0;
                if (v223 <= v224) {
                  uint64_t v229 = *((void *)a2 + 1);
                }
                else {
                  uint64_t v229 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v229 == v224)
                  {
LABEL_409:
                    *((unsigned char *)a2 + 24) = 1;
                    *((_DWORD *)v52 - 1) = 0;
                    goto LABEL_410;
                  }
                  unint64_t v230 = v224++;
                  char v231 = *(unsigned char *)(v225 + v230);
                  *((void *)a2 + 1) = v224;
                  v234 |= (unint64_t)(v231 & 0x7F) << v227;
                  if ((v231 & 0x80) == 0) {
                    break;
                  }
                  v227 += 7;
                  BOOL v65 = v228++ > 8;
                  if (v65)
                  {
                    LODWORD(v234) = 0;
                    goto LABEL_405;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v234) = 0;
                }
LABEL_405:
                unint64_t v235 = v230 + 1;
LABEL_406:
                *((_DWORD *)v52 - 1) = v234;
              }
              while (v235 < v223 && !*((unsigned char *)a2 + 24));
            }
LABEL_410:
            PB::Reader::recallMark();
          }
          else
          {
            v265 = (char *)*((void *)this + 14);
            unint64_t v264 = *((void *)this + 15);
            if ((unint64_t)v265 >= v264)
            {
              v308 = (char *)*v420;
              uint64_t v309 = (v265 - (unsigned char *)*v420) >> 2;
              unint64_t v310 = v309 + 1;
              if ((unint64_t)(v309 + 1) >> 62) {
LABEL_723:
              }
                sub_10000EE98();
              uint64_t v311 = v264 - (void)v308;
              if (v311 >> 1 > v310) {
                unint64_t v310 = v311 >> 1;
              }
              if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v312 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v312 = v310;
              }
              if (v312)
              {
                v313 = (char *)sub_100024458((uint64_t)v421, v312);
                v308 = (char *)*((void *)this + 13);
                v265 = (char *)*((void *)this + 14);
              }
              else
              {
                v313 = 0;
              }
              v399 = &v313[4 * v309];
              *(_DWORD *)v399 = 0;
              v251 = v399 + 4;
              while (v265 != v308)
              {
                int v400 = *((_DWORD *)v265 - 1);
                v265 -= 4;
                *((_DWORD *)v399 - 1) = v400;
                v399 -= 4;
              }
              *((void *)this + 13) = v399;
              *((void *)this + 14) = v251;
              *((void *)this + 15) = &v313[4 * v312];
              if (v308) {
                operator delete(v308);
              }
            }
            else
            {
              *(_DWORD *)v265 = 0;
              v251 = v265 + 4;
            }
            *((void *)this + 14) = v251;
            unint64_t v401 = *((void *)a2 + 1);
            unint64_t v402 = *((void *)a2 + 2);
            uint64_t v403 = *(void *)a2;
            char v404 = 0;
            unsigned int v405 = 0;
            if (v401 > 0xFFFFFFFFFFFFFFF5 || v401 + 10 > v402)
            {
              uint64_t v324 = 0;
              if (v402 <= v401) {
                unint64_t v402 = *((void *)a2 + 1);
              }
              while (v402 != v401)
              {
                unint64_t v407 = v401 + 1;
                char v408 = *(unsigned char *)(v403 + v401);
                *((void *)a2 + 1) = v407;
                v324 |= (unint64_t)(v408 & 0x7F) << v404;
                if ((v408 & 0x80) == 0)
                {
LABEL_698:
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v324) = 0;
                  }
                  goto LABEL_705;
                }
                v404 += 7;
                unint64_t v401 = v407;
                BOOL v65 = v405++ > 8;
                if (v65)
                {
LABEL_704:
                  LODWORD(v324) = 0;
                  goto LABEL_705;
                }
              }
LABEL_697:
              LODWORD(v324) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              uint64_t v324 = 0;
              while (1)
              {
                unint64_t v409 = v401 + 1;
                *((void *)a2 + 1) = v401 + 1;
                char v410 = *(unsigned char *)(v403 + v401);
                v324 |= (unint64_t)(v410 & 0x7F) << v404;
                if ((v410 & 0x80) == 0) {
                  break;
                }
                v404 += 7;
                unint64_t v401 = v409;
                BOOL v65 = v405++ > 8;
                if (v65) {
                  goto LABEL_704;
                }
              }
            }
LABEL_705:
            *(v251 - 1) = v324;
          }
LABEL_706:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v18 >> 3, v26, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_706;
      }
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v18 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v23 = v2 + 1;
      char v24 = *(unsigned char *)(v15 + v2);
      *((void *)a2 + 1) = v23;
      v18 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v18 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryPPG::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 224);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 208), 1u);
    char v4 = *(unsigned char *)(v3 + 224);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_33:
      this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 220), 3u);
      if ((*(unsigned char *)(v3 + 224) & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(this + 224) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 200), 2u);
  char v4 = *(unsigned char *)(v3 + 224);
  if ((v4 & 8) != 0) {
    goto LABEL_33;
  }
LABEL_4:
  if ((v4 & 4) != 0) {
LABEL_5:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 216), 4u);
LABEL_6:
  uint64_t v5 = *(unsigned int **)(v3 + 8);
  uint64_t v6 = *(unsigned int **)(v3 + 16);
  while (v5 != v6)
  {
    unsigned int v7 = *v5++;
    this = PB::Writer::writeVarInt(a2, v7, 5u);
  }
  uint64_t v8 = *(unsigned int **)(v3 + 32);
  uint64_t v9 = *(unsigned int **)(v3 + 40);
  while (v8 != v9)
  {
    unsigned int v10 = *v8++;
    this = PB::Writer::writeVarInt(a2, v10, 6u);
  }
  uint64_t v11 = *(unsigned int **)(v3 + 56);
  uint64_t v12 = *(unsigned int **)(v3 + 64);
  while (v11 != v12)
  {
    unsigned int v13 = *v11++;
    this = PB::Writer::writeVarInt(a2, v13, 7u);
  }
  uint64_t v14 = *(unsigned int **)(v3 + 80);
  uint64_t v15 = *(unsigned int **)(v3 + 88);
  while (v14 != v15)
  {
    unsigned int v16 = *v14++;
    this = PB::Writer::writeVarInt(a2, v16, 8u);
  }
  unsigned int v17 = *(unsigned int **)(v3 + 128);
  unint64_t v18 = *(unsigned int **)(v3 + 136);
  while (v17 != v18)
  {
    unsigned int v19 = *v17++;
    this = PB::Writer::writeVarInt(a2, v19, 9u);
  }
  char v20 = *(unsigned int **)(v3 + 152);
  char v21 = *(unsigned int **)(v3 + 160);
  while (v20 != v21)
  {
    unsigned int v22 = *v20++;
    this = PB::Writer::writeVarInt(a2, v22, 0xAu);
  }
  unint64_t v23 = *(unsigned int **)(v3 + 176);
  char v24 = *(unsigned int **)(v3 + 184);
  while (v23 != v24)
  {
    unsigned int v25 = *v23++;
    this = PB::Writer::writeVarInt(a2, v25, 0xBu);
  }
  unint64_t v27 = *(unsigned int **)(v3 + 104);
  int v26 = *(unsigned int **)(v3 + 112);
  while (v27 != v26)
  {
    unsigned int v28 = *v27++;
    this = PB::Writer::writeVarInt(a2, v28, 0xCu);
  }
  return this;
}

BOOL CMMsl::AccessoryPPG::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 224) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 224) & 2) == 0 || *(double *)(a1 + 208) != *(double *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 224) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    if ((*(unsigned char *)(a2 + 224) & 1) == 0 || *(void *)(a1 + 200) != *(void *)(a2 + 200)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 224))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 224) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 224) & 8) == 0 || *(_DWORD *)(a1 + 220) != *(_DWORD *)(a2 + 220)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 224) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 224) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 224) & 4) == 0 || *(_DWORD *)(a1 + 216) != *(_DWORD *)(a2 + 216)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 224) & 4) != 0)
  {
    return 0;
  }
  if (!sub_10006EDA4(a1 + 8, a2 + 8)
    || !sub_10006EDA4(a1 + 32, a2 + 32)
    || !sub_10006EDA4(a1 + 56, a2 + 56)
    || !sub_10006EDA4(a1 + 80, a2 + 80)
    || !sub_10006EDA4(a1 + 128, a2 + 128)
    || !sub_10006EDA4(a1 + 152, a2 + 152)
    || !sub_10006EDA4(a1 + 176, a2 + 176))
  {
    return 0;
  }

  return sub_10006EDA4(a1 + 104, a2 + 104);
}

BOOL sub_10006EDA4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(const void **)a1;
  size_t v4 = *(void *)(a1 + 8) - (void)v2;
  uint64_t v5 = *(const void **)a2;
  return v4 == *(void *)(a2 + 8) - (void)v5 && memcmp(v2, v5, v4) == 0;
}

uint64_t CMMsl::AccessoryPPG::hash_value(CMMsl::AccessoryPPG *this)
{
  if ((*((unsigned char *)this + 224) & 2) != 0)
  {
    double v1 = *((double *)this + 26);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 224))
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 25);
      if ((*((unsigned char *)this + 224) & 8) != 0) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 224) & 4) != 0) {
        goto LABEL_5;
      }
LABEL_11:
      uint64_t v4 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 224)) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 224) & 8) == 0) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 55);
  if ((*((unsigned char *)this + 224) & 4) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 54);
LABEL_12:
  uint64_t v5 = v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ PBHashBytes();
  uint64_t v6 = PBHashBytes();
  uint64_t v7 = v5 ^ v6 ^ PBHashBytes();
  uint64_t v8 = PBHashBytes();
  uint64_t v9 = v8 ^ PBHashBytes();
  uint64_t v10 = v7 ^ v9 ^ PBHashBytes();
  uint64_t v11 = PBHashBytes();
  return v10 ^ v11 ^ PBHashBytes();
}

uint64_t CMMsl::AccessoryProx::AccessoryProx(uint64_t this)
{
  *(void *)this = off_1003A4480;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(void *)this = off_1003A4480;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void CMMsl::AccessoryProx::~AccessoryProx(CMMsl::AccessoryProx *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::AccessoryProx::AccessoryProx(uint64_t this, const CMMsl::AccessoryProx *a2)
{
  *(void *)this = off_1003A4480;
  *(_DWORD *)(this + 56) = 0;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    __int16 v3 = 4;
    *(_WORD *)(this + 56) = 4;
    *(_DWORD *)(this + 24) = v4;
    __int16 v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *(_WORD *)(this + 56) = v3;
    *(_DWORD *)(this + 36) = v5;
    __int16 v2 = *((_WORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    int v6 = *((_DWORD *)a2 + 13);
    v3 |= 0x200u;
    *(_WORD *)(this + 56) = v3;
    *(_DWORD *)(this + 52) = v6;
    __int16 v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 32) = v7;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v8 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 56) = v3;
  *(void *)(this + 16) = v8;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v9 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 48) = v9;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v10 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 44) = v10;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v11 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 40) = v11;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_22:
    int v13 = *((_DWORD *)a2 + 7);
    *(_WORD *)(this + 56) = v3 | 8;
    *(_DWORD *)(this + 28) = v13;
    return this;
  }
LABEL_21:
  uint64_t v12 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 56) = v3;
  *(void *)(this + 8) = v12;
  if ((*((_WORD *)a2 + 28) & 8) != 0) {
    goto LABEL_22;
  }
  return this;
}

uint64_t CMMsl::AccessoryProx::operator=(uint64_t a1, const CMMsl::AccessoryProx *a2)
{
  if ((const CMMsl::AccessoryProx *)a1 != a2)
  {
    CMMsl::AccessoryProx::AccessoryProx((uint64_t)&v13, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v22;
    int v22 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v16;
    int v16 = v4;
    int v5 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v18;
    int v18 = v5;
    int v6 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v21;
    int v21 = v6;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v15;
    uint64_t v15 = v7;
    int v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v20;
    int v20 = v8;
    uint64_t v9 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v19;
    uint64_t v19 = v9;
    uint64_t v10 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v14;
    uint64_t v14 = v10;
    uint64_t v11 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v17;
    uint64_t v17 = v11;
    PB::Base::~Base((PB::Base *)&v13);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryProx *a2, CMMsl::AccessoryProx *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  int v5 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  int v6 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  int v9 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  int v10 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v10;
  int v11 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  uint64_t v12 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v12;
  LODWORD(v12) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v12;
  return result;
}

double CMMsl::AccessoryProx::AccessoryProx(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4480;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::AccessoryProx::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryProx::AccessoryProx((uint64_t)&v13, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v22;
    int v22 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v16;
    int v16 = v4;
    int v5 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v18;
    int v18 = v5;
    int v6 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v21;
    int v21 = v6;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v15;
    uint64_t v15 = v7;
    int v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v20;
    int v20 = v8;
    uint64_t v9 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v19;
    uint64_t v19 = v9;
    uint64_t v10 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v14;
    uint64_t v14 = v10;
    uint64_t v11 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v17;
    uint64_t v17 = v11;
    PB::Base::~Base((PB::Base *)&v13);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProx::formatText(CMMsl::AccessoryProx *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "base", *((float *)this + 6));
    __int16 v5 = *((_WORD *)this + 28);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "broken", *((_DWORD *)this + 7));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 8));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "peak", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "sensor", *((_DWORD *)this + 10));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 1));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 11));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 12));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "temp", *((float *)this + 13));
  if ((*((_WORD *)this + 28) & 2) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_12:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryProx::readFrom(CMMsl::AccessoryProx *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 28) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_43;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_33;
            case 2u:
              *((_WORD *)this + 28) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_43;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_33;
            case 3u:
              *((_WORD *)this + 28) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_43;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_33:
              unint64_t v2 = *((void *)a2 + 1) + 4;
              goto LABEL_122;
            case 4u:
              *((_WORD *)this + 28) |= 8u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_127;
                  }
                  unint64_t v59 = v21++;
                  char v60 = *(unsigned char *)(v22 + v59);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_126:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_126;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_127;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_127:
              *((_DWORD *)this + 7) = v25;
              goto LABEL_153;
            case 5u:
              *((_WORD *)this + 28) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_122:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_43:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_153;
            case 6u:
              *((_WORD *)this + 28) |= 0x100u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_132;
                  }
                  unint64_t v63 = v27++;
                  char v64 = *(unsigned char *)(v28 + v63);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_131:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_131;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_132:
              *((_DWORD *)this + 12) = v31;
              goto LABEL_153;
            case 7u:
              *((_WORD *)this + 28) |= 0x80u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_137;
                  }
                  unint64_t v67 = v33++;
                  char v68 = *(unsigned char *)(v34 + v67);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_136:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_136;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_137;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_137:
              *((_DWORD *)this + 11) = v37;
              goto LABEL_153;
            case 8u:
              *((_WORD *)this + 28) |= 0x40u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_142;
                  }
                  unint64_t v71 = v39++;
                  char v72 = *(unsigned char *)(v40 + v71);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_141:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_141;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_142;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_142:
              *((_DWORD *)this + 10) = v43;
              goto LABEL_153;
            case 9u:
              *((_WORD *)this + 28) |= 0x10u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_147;
                  }
                  unint64_t v75 = v45++;
                  char v76 = *(unsigned char *)(v46 + v75);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_146:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_146;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_147:
              *((_DWORD *)this + 8) = v49;
              goto LABEL_153;
            case 0xAu:
              *((_WORD *)this + 28) |= 1u;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    uint64_t v55 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_152;
                  }
                  unint64_t v79 = v51++;
                  char v80 = *(unsigned char *)(v52 + v79);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    uint64_t v55 = 0;
LABEL_151:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v55 = 0;
                }
                goto LABEL_151;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              uint64_t v55 = 0;
LABEL_152:
              *((void *)this + 1) = v55;
LABEL_153:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_153;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryProx::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 56);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 2u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 3u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 4u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 5u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 6u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 7u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 9u);
    if ((*(_WORD *)(v3 + 56) & 1) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 8u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_21:
  unint64_t v5 = *(void *)(v3 + 8);

  return PB::Writer::writeVarInt(a2, v5, 0xAu);
}

BOOL CMMsl::AccessoryProx::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 56);
  __int16 v3 = *(_WORD *)(a2 + 56);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 56) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x100) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 56) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  BOOL v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0) {
    return (v3 & 8) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  }
  return v4;
}

uint64_t CMMsl::AccessoryProx::hash_value(CMMsl::AccessoryProx *this)
{
  __int16 v1 = *((_WORD *)this + 28);
  if ((v1 & 4) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v4 = 0;
    if ((*((_WORD *)this + 28) & 0x200) != 0) {
      goto LABEL_6;
    }
LABEL_22:
    uint64_t v6 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  float v14 = *((float *)this + 6);
  uint64_t v2 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_21;
  }
LABEL_3:
  float v3 = *((float *)this + 9);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((*((_WORD *)this + 28) & 0x200) == 0) {
    goto LABEL_22;
  }
LABEL_6:
  float v5 = *((float *)this + 13);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_9:
    uint64_t v7 = *((unsigned int *)this + 8);
    if ((v1 & 2) != 0) {
      goto LABEL_10;
    }
LABEL_24:
    double v8 = 0.0;
    if ((*((_WORD *)this + 28) & 0x100) != 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v7 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_24;
  }
LABEL_10:
  double v8 = *((double *)this + 2);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 28) & 0x100) != 0)
  {
LABEL_13:
    uint64_t v9 = *((unsigned int *)this + 12);
    if ((v1 & 0x80) != 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v9 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    uint64_t v10 = *((unsigned int *)this + 11);
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v10 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    uint64_t v11 = *((unsigned int *)this + 10);
    if (v1) {
      goto LABEL_16;
    }
LABEL_28:
    uint64_t v12 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_17;
    }
LABEL_29:
    uint64_t v13 = 0;
    return v4 ^ v2 ^ v6 ^ v7 ^ *(void *)&v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_27:
  uint64_t v11 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_16:
  uint64_t v12 = *((void *)this + 1);
  if ((v1 & 8) == 0) {
    goto LABEL_29;
  }
LABEL_17:
  uint64_t v13 = *((unsigned int *)this + 7);
  return v4 ^ v2 ^ v6 ^ v7 ^ *(void *)&v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
}

double CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(CMMsl::AccessoryProxSensorDrop *this)
{
  *(void *)this = off_1003A44B8;
  *((_DWORD *)this + 26) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A44B8;
  *((_DWORD *)this + 26) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

void CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop(CMMsl::AccessoryProxSensorDrop *this)
{
  *(void *)this = off_1003A44B8;
  uint64_t v4 = (void **)((char *)this + 56);
  sub_100274A84(&v4);
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop(this);

  operator delete();
}

CMMsl::AccessoryProxSensorDrop *CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(CMMsl::AccessoryProxSensorDrop *this, const CMMsl::AccessoryProxSensorDrop *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = off_1003A44B8;
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  if ((*((unsigned char *)a2 + 104) & 8) != 0)
  {
    int v5 = *((_DWORD *)a2 + 23);
    *((unsigned char *)this + 104) = 8;
    *((_DWORD *)this + 23) = v5;
    char v4 = 12;
    if ((*((unsigned char *)a2 + 104) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v4 = 4;
  if ((*((unsigned char *)a2 + 104) & 4) != 0)
  {
LABEL_5:
    int v6 = *((_DWORD *)a2 + 22);
    *((unsigned char *)this + 104) = v4;
    *((_DWORD *)this + 22) = v6;
  }
LABEL_6:
  if (*((void *)a2 + 7) != *((void *)a2 + 8)) {
    sub_1000703A4();
  }
  if (this != a2)
  {
    sub_100024308((char *)this + 8, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  char v7 = *((unsigned char *)a2 + 104);
  if (v7)
  {
    int v10 = *((_DWORD *)a2 + 20);
    *((unsigned char *)this + 104) |= 1u;
    *((_DWORD *)this + 20) = v10;
    char v7 = *((unsigned char *)a2 + 104);
    if ((v7 & 0x10) == 0)
    {
LABEL_12:
      if ((v7 & 2) == 0) {
        goto LABEL_13;
      }
LABEL_18:
      int v12 = *((_DWORD *)a2 + 21);
      *((unsigned char *)this + 104) |= 2u;
      *((_DWORD *)this + 21) = v12;
      if ((*((unsigned char *)a2 + 104) & 0x20) == 0) {
        return this;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)a2 + 104) & 0x10) == 0)
  {
    goto LABEL_12;
  }
  int v11 = *((_DWORD *)a2 + 24);
  *((unsigned char *)this + 104) |= 0x10u;
  *((_DWORD *)this + 24) = v11;
  char v7 = *((unsigned char *)a2 + 104);
  if ((v7 & 2) != 0) {
    goto LABEL_18;
  }
LABEL_13:
  if ((v7 & 0x20) != 0)
  {
LABEL_14:
    int v8 = *((_DWORD *)a2 + 25);
    *((unsigned char *)this + 104) |= 0x20u;
    *((_DWORD *)this + 25) = v8;
  }
  return this;
}

void sub_1000703A4()
{
}

void sub_1000704A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::AccessoryProxSensorDrop::operator=(uint64_t a1, const CMMsl::AccessoryProxSensorDrop *a2)
{
  if ((const CMMsl::AccessoryProxSensorDrop *)a1 != a2)
  {
    CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop((CMMsl::AccessoryProxSensorDrop *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryProxSensorDrop *)v5, v3);
    CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop((CMMsl::AccessoryProxSensorDrop *)v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryProxSensorDrop *a2, CMMsl::AccessoryProxSensorDrop *a3)
{
  int v3 = *(_DWORD *)(this + 104);
  *(_DWORD *)(this + 104) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  int v4 = *(_DWORD *)(this + 92);
  *(_DWORD *)(this + 92) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  int v5 = *(_DWORD *)(this + 88);
  *(_DWORD *)(this + 88) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v5;
  uint64_t v6 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v6;
  uint64_t v7 = *(void *)(this + 64);
  *(void *)(this + 64) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v7;
  uint64_t v8 = *(void *)(this + 72);
  *(void *)(this + 72) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v8;
  uint64_t v9 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  uint64_t v12 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v13;
  uint64_t v14 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 80);
  *(_DWORD *)(this + 80) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 96);
  *(_DWORD *)(this + 96) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 84);
  *(_DWORD *)(this + 84) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 100);
  *(_DWORD *)(this + 100) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v14;
  return this;
}

uint64_t CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A44B8;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v6 = (_OWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  sub_100274B44((void **)(a1 + 56));
  *uint64_t v6 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  sub_100274A30(v5, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

uint64_t CMMsl::AccessoryProxSensorDrop::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryProxSensorDrop *)v5, v3);
    CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop((CMMsl::AccessoryProxSensorDrop *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProxSensorDrop::formatText(CMMsl::AccessoryProxSensorDrop *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 104);
  if (v5)
  {
    PB::TextFormatter::format(a2, "conchaDropped", *((_DWORD *)this + 20));
    char v5 = *((unsigned char *)this + 104);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((*((unsigned char *)this + 104) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "conchaRecovered", *((_DWORD *)this + 21));
  char v5 = *((unsigned char *)this + 104);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "iedState", *((_DWORD *)this + 22));
  if ((*((unsigned char *)this + 104) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 23));
LABEL_6:
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "mean", v8);
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 7);
  uint64_t v10 = (uint64_t *)*((void *)this + 8);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "optical");
  }
  char v12 = *((unsigned char *)this + 104);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "tragusDropped", *((_DWORD *)this + 24));
    char v12 = *((unsigned char *)this + 104);
  }
  if ((v12 & 0x20) != 0) {
    PB::TextFormatter::format(a2, "tragusRecovered", *((_DWORD *)this + 25));
  }
  uint64_t v13 = (float *)*((void *)this + 4);
  uint64_t v14 = (float *)*((void *)this + 5);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(a2, "variance", v15);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryProxSensorDrop::readFrom(CMMsl::AccessoryProxSensorDrop *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 32);
    uint64_t v9 = (char *)this + 48;
    uint64_t v10 = (void **)((char *)this + 8);
    uint64_t v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 104) |= 8u;
          unint64_t v25 = *((void *)a2 + 1);
          unint64_t v26 = *((void *)a2 + 2);
          uint64_t v27 = *(void *)a2;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            do
            {
              unint64_t v31 = v25 + 1;
              *((void *)a2 + 1) = v25 + 1;
              char v32 = *(unsigned char *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                goto LABEL_188;
              }
              v28 += 7;
              unint64_t v25 = v31;
              BOOL v18 = v29++ > 8;
            }
            while (!v18);
LABEL_122:
            LODWORD(v30) = 0;
            goto LABEL_188;
          }
          char v101 = 0;
          unsigned int v102 = 0;
          uint64_t v30 = 0;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v103 = v25 + 1;
              char v104 = *(unsigned char *)(v27 + v25);
              *((void *)a2 + 1) = v103;
              v30 |= (unint64_t)(v104 & 0x7F) << v101;
              if (v104 < 0)
              {
                v101 += 7;
                unint64_t v25 = v103;
                BOOL v18 = v102++ > 8;
                if (v18) {
                  goto LABEL_122;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v30) = 0;
              }
            }
            break;
          }
LABEL_188:
          *((_DWORD *)this + 23) = v30;
          goto LABEL_222;
        case 2u:
          *((unsigned char *)this + 104) |= 4u;
          unint64_t v33 = *((void *)a2 + 1);
          unint64_t v34 = *((void *)a2 + 2);
          uint64_t v35 = *(void *)a2;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            char v36 = 0;
            unsigned int v37 = 0;
            uint64_t v38 = 0;
            do
            {
              unint64_t v39 = v33 + 1;
              *((void *)a2 + 1) = v33 + 1;
              char v40 = *(unsigned char *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0) {
                goto LABEL_191;
              }
              v36 += 7;
              unint64_t v33 = v39;
              BOOL v18 = v37++ > 8;
            }
            while (!v18);
LABEL_129:
            LODWORD(v38) = 0;
            goto LABEL_191;
          }
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v38 = 0;
          if (v34 <= v33) {
            unint64_t v34 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v107 = v33 + 1;
              char v108 = *(unsigned char *)(v35 + v33);
              *((void *)a2 + 1) = v107;
              v38 |= (unint64_t)(v108 & 0x7F) << v105;
              if (v108 < 0)
              {
                v105 += 7;
                unint64_t v33 = v107;
                BOOL v18 = v106++ > 8;
                if (v18) {
                  goto LABEL_129;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v38) = 0;
              }
            }
            break;
          }
LABEL_191:
          *((_DWORD *)this + 22) = v38;
          goto LABEL_222;
        case 3u:
          sub_100071474();
        case 4u:
          if (v24 != 2)
          {
            uint64_t v110 = (char *)*((void *)this + 2);
            unint64_t v109 = *((void *)this + 3);
            if ((unint64_t)v110 >= v109)
            {
              int v130 = (char *)*v10;
              uint64_t v131 = (v110 - (unsigned char *)*v10) >> 2;
              unint64_t v132 = v131 + 1;
              if ((unint64_t)(v131 + 1) >> 62) {
LABEL_232:
              }
                sub_10000EE98();
              uint64_t v133 = v109 - (void)v130;
              if (v133 >> 1 > v132) {
                unint64_t v132 = v133 >> 1;
              }
              if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v134 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v134 = v132;
              }
              if (v134)
              {
                char v135 = (char *)sub_100024458((uint64_t)v11, v134);
                int v130 = (char *)*((void *)this + 1);
                uint64_t v110 = (char *)*((void *)this + 2);
              }
              else
              {
                char v135 = 0;
              }
              uint64_t v142 = &v135[4 * v131];
              *(_DWORD *)uint64_t v142 = 0;
              unint64_t v111 = v142 + 4;
              while (v110 != v130)
              {
                int v143 = *((_DWORD *)v110 - 1);
                v110 -= 4;
                *((_DWORD *)v142 - 1) = v143;
                v142 -= 4;
              }
              *((void *)this + 1) = v142;
              *((void *)this + 2) = v111;
              *((void *)this + 3) = &v135[4 * v134];
              if (v130) {
                operator delete(v130);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v110 = 0;
              unint64_t v111 = v110 + 4;
            }
            *((void *)this + 2) = v111;
            goto LABEL_218;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          while (v41 < v42 && !*((unsigned char *)a2 + 24))
          {
            char v44 = (char *)*((void *)this + 2);
            unint64_t v43 = *((void *)this + 3);
            if ((unint64_t)v44 >= v43)
            {
              uint64_t v46 = (char *)*v10;
              uint64_t v47 = (v44 - (unsigned char *)*v10) >> 2;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62) {
                goto LABEL_232;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 1 > v48) {
                unint64_t v48 = v49 >> 1;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_100024458((uint64_t)v11, v50);
                uint64_t v46 = (char *)*((void *)this + 1);
                char v44 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v51 = 0;
              }
              uint64_t v52 = &v51[4 * v47];
              *(_DWORD *)uint64_t v52 = 0;
              unint64_t v45 = v52 + 4;
              while (v44 != v46)
              {
                int v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((void *)this + 1) = v52;
              *((void *)this + 2) = v45;
              *((void *)this + 3) = &v51[4 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(_DWORD *)char v44 = 0;
              unint64_t v45 = v44 + 4;
            }
            *((void *)this + 2) = v45;
            unint64_t v54 = *((void *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2)) {
              goto LABEL_162;
            }
            *(v45 - 1) = *(_DWORD *)(*(void *)a2 + v54);
            unint64_t v42 = *((void *)a2 + 2);
            unint64_t v41 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v41;
          }
          goto LABEL_163;
        case 5u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v55 = *((void *)a2 + 1);
            unint64_t v56 = *((void *)a2 + 2);
            while (v55 < v56 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v58 = (char *)*((void *)this + 5);
              unint64_t v57 = *((void *)this + 6);
              if ((unint64_t)v58 >= v57)
              {
                char v60 = (char *)*v8;
                uint64_t v61 = (v58 - (unsigned char *)*v8) >> 2;
                unint64_t v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62) {
                  goto LABEL_233;
                }
                uint64_t v63 = v57 - (void)v60;
                if (v63 >> 1 > v62) {
                  unint64_t v62 = v63 >> 1;
                }
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v64 = v62;
                }
                if (v64)
                {
                  char v65 = (char *)sub_100024458((uint64_t)v9, v64);
                  char v60 = (char *)*((void *)this + 4);
                  unsigned int v58 = (char *)*((void *)this + 5);
                }
                else
                {
                  char v65 = 0;
                }
                unsigned int v66 = &v65[4 * v61];
                *(_DWORD *)unsigned int v66 = 0;
                unint64_t v59 = v66 + 4;
                while (v58 != v60)
                {
                  int v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66 - 1) = v67;
                  v66 -= 4;
                }
                *((void *)this + 4) = v66;
                *((void *)this + 5) = v59;
                *((void *)this + 6) = &v65[4 * v64];
                if (v60) {
                  operator delete(v60);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v58 = 0;
                unint64_t v59 = v58 + 4;
              }
              *((void *)this + 5) = v59;
              unint64_t v68 = *((void *)a2 + 1);
              if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)a2 + 2))
              {
LABEL_162:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v59 - 1) = *(_DWORD *)(*(void *)a2 + v68);
              unint64_t v56 = *((void *)a2 + 2);
              unint64_t v55 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v55;
            }
LABEL_163:
            PB::Reader::recallMark();
          }
          else
          {
            unsigned int v113 = (char *)*((void *)this + 5);
            unint64_t v112 = *((void *)this + 6);
            if ((unint64_t)v113 >= v112)
            {
              unsigned int v136 = (char *)*v8;
              uint64_t v137 = (v113 - (unsigned char *)*v8) >> 2;
              unint64_t v138 = v137 + 1;
              if ((unint64_t)(v137 + 1) >> 62) {
LABEL_233:
              }
                sub_10000EE98();
              uint64_t v139 = v112 - (void)v136;
              if (v139 >> 1 > v138) {
                unint64_t v138 = v139 >> 1;
              }
              if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v140 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v140 = v138;
              }
              if (v140)
              {
                unsigned int v141 = (char *)sub_100024458((uint64_t)v9, v140);
                unsigned int v136 = (char *)*((void *)this + 4);
                unsigned int v113 = (char *)*((void *)this + 5);
              }
              else
              {
                unsigned int v141 = 0;
              }
              char v144 = &v141[4 * v137];
              *(_DWORD *)char v144 = 0;
              unint64_t v111 = v144 + 4;
              while (v113 != v136)
              {
                int v145 = *((_DWORD *)v113 - 1);
                v113 -= 4;
                *((_DWORD *)v144 - 1) = v145;
                v144 -= 4;
              }
              *((void *)this + 4) = v144;
              *((void *)this + 5) = v111;
              *((void *)this + 6) = &v141[4 * v140];
              if (v136) {
                operator delete(v136);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v113 = 0;
              unint64_t v111 = v113 + 4;
            }
            *((void *)this + 5) = v111;
LABEL_218:
            unint64_t v146 = *((void *)a2 + 1);
            if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((void *)a2 + 2))
            {
              *(v111 - 1) = *(_DWORD *)(*(void *)a2 + v146);
              *((void *)a2 + 1) += 4;
            }
            else
            {
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_222:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 6u:
          *((unsigned char *)this + 104) |= 1u;
          unint64_t v69 = *((void *)a2 + 1);
          unint64_t v70 = *((void *)a2 + 2);
          uint64_t v71 = *(void *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)a2 + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_194;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v18 = v73++ > 8;
            }
            while (!v18);
LABEL_140:
            LODWORD(v74) = 0;
            goto LABEL_194;
          }
          char v114 = 0;
          unsigned int v115 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v116 = v69 + 1;
              char v117 = *(unsigned char *)(v71 + v69);
              *((void *)a2 + 1) = v116;
              v74 |= (unint64_t)(v117 & 0x7F) << v114;
              if (v117 < 0)
              {
                v114 += 7;
                unint64_t v69 = v116;
                BOOL v18 = v115++ > 8;
                if (v18) {
                  goto LABEL_140;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_194:
          *((_DWORD *)this + 20) = v74;
          goto LABEL_222;
        case 7u:
          *((unsigned char *)this + 104) |= 0x10u;
          unint64_t v77 = *((void *)a2 + 1);
          unint64_t v78 = *((void *)a2 + 2);
          uint64_t v79 = *(void *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)a2 + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_197;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v18 = v81++ > 8;
            }
            while (!v18);
LABEL_147:
            LODWORD(v82) = 0;
            goto LABEL_197;
          }
          char v118 = 0;
          unsigned int v119 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v120 = v77 + 1;
              char v121 = *(unsigned char *)(v79 + v77);
              *((void *)a2 + 1) = v120;
              v82 |= (unint64_t)(v121 & 0x7F) << v118;
              if (v121 < 0)
              {
                v118 += 7;
                unint64_t v77 = v120;
                BOOL v18 = v119++ > 8;
                if (v18) {
                  goto LABEL_147;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v82) = 0;
              }
            }
            break;
          }
LABEL_197:
          *((_DWORD *)this + 24) = v82;
          goto LABEL_222;
        case 8u:
          *((unsigned char *)this + 104) |= 2u;
          unint64_t v85 = *((void *)a2 + 1);
          unint64_t v86 = *((void *)a2 + 2);
          uint64_t v87 = *(void *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)a2 + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_200;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v18 = v89++ > 8;
            }
            while (!v18);
LABEL_154:
            LODWORD(v90) = 0;
            goto LABEL_200;
          }
          char v122 = 0;
          unsigned int v123 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v124 = v85 + 1;
              char v125 = *(unsigned char *)(v87 + v85);
              *((void *)a2 + 1) = v124;
              v90 |= (unint64_t)(v125 & 0x7F) << v122;
              if (v125 < 0)
              {
                v122 += 7;
                unint64_t v85 = v124;
                BOOL v18 = v123++ > 8;
                if (v18) {
                  goto LABEL_154;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v90) = 0;
              }
            }
            break;
          }
LABEL_200:
          *((_DWORD *)this + 21) = v90;
          goto LABEL_222;
        case 9u:
          *((unsigned char *)this + 104) |= 0x20u;
          unint64_t v93 = *((void *)a2 + 1);
          unint64_t v94 = *((void *)a2 + 2);
          uint64_t v95 = *(void *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)a2 + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_203;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v18 = v97++ > 8;
            }
            while (!v18);
LABEL_161:
            LODWORD(v98) = 0;
            goto LABEL_203;
          }
          char v126 = 0;
          unsigned int v127 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v128 = v93 + 1;
              char v129 = *(unsigned char *)(v95 + v93);
              *((void *)a2 + 1) = v128;
              v98 |= (unint64_t)(v129 & 0x7F) << v126;
              if (v129 < 0)
              {
                v126 += 7;
                unint64_t v93 = v128;
                BOOL v18 = v127++ > 8;
                if (v18) {
                  goto LABEL_161;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v98) = 0;
              }
            }
            break;
          }
LABEL_203:
          *((_DWORD *)this + 25) = v98;
          goto LABEL_222;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_222;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_100071474()
{
}

void sub_10007158C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::AccessoryProxSensorDrop::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 104);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 92), 1u);
    char v4 = *(unsigned char *)(v3 + 104);
  }
  if ((v4 & 4) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 2u);
  }
  char v5 = *(const PB::Base ***)(v3 + 56);
  uint64_t v6 = *(const PB::Base ***)(v3 + 64);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7, 3u);
  }
  float v8 = *(float **)(v3 + 8);
  uint64_t v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10, 4u);
  }
  uint64_t v11 = *(float **)(v3 + 32);
  uint64_t v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    this = PB::Writer::write(a2, v13, 5u);
  }
  char v14 = *(unsigned char *)(v3 + 104);
  if (v14)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 6u);
    char v14 = *(unsigned char *)(v3 + 104);
    if ((v14 & 0x10) == 0)
    {
LABEL_16:
      if ((v14 & 2) == 0) {
        goto LABEL_17;
      }
LABEL_21:
      this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 8u);
      if ((*(unsigned char *)(v3 + 104) & 0x20) == 0) {
        return this;
      }
      goto LABEL_22;
    }
  }
  else if ((*(unsigned char *)(v3 + 104) & 0x10) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 7u);
  char v14 = *(unsigned char *)(v3 + 104);
  if ((v14 & 2) != 0) {
    goto LABEL_21;
  }
LABEL_17:
  if ((v14 & 0x20) == 0) {
    return this;
  }
LABEL_22:
  unsigned int v15 = *(_DWORD *)(v3 + 100);

  return PB::Writer::writeVarInt(a2, v15, 9u);
}

BOOL CMMsl::AccessoryProxSensorDrop::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 104) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 104) & 8) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 104) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 104) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 104) & 4) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 104) & 4) != 0)
  {
    return 0;
  }
  BOOL result = sub_10007189C((uint64_t *)(a1 + 56), a2 + 56);
  if (!result) {
    return result;
  }
  uint64_t v6 = *(float **)(a1 + 8);
  char v5 = *(float **)(a1 + 16);
  uint64_t v7 = *(float **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 16) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  uint64_t v9 = *(float **)(a1 + 32);
  float v8 = *(float **)(a1 + 40);
  float v10 = *(float **)(a2 + 32);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 40) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  if (*(unsigned char *)(a1 + 104))
  {
    if ((*(unsigned char *)(a2 + 104) & 1) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 104))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 104) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 104) & 0x10) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 104) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 104) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 104) & 2) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 104) & 2) != 0)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 104) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 104) & 0x20) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 104) & 0x20) != 0 && *(_DWORD *)(a1 + 100) == *(_DWORD *)(a2 + 100);
}

BOOL sub_10007189C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::ClefMeasurement::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::AccessoryProxSensorDrop::hash_value(CMMsl::AccessoryProxSensorDrop *this)
{
  if ((*((unsigned char *)this + 104) & 8) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 23);
    if ((*((unsigned char *)this + 104) & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 104) & 4) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 22);
      goto LABEL_6;
    }
  }
  uint64_t v3 = 0;
LABEL_6:
  uint64_t v4 = sub_1000719FC((uint64_t)&v12, (uint64_t **)this + 7);
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  if (*((unsigned char *)this + 104))
  {
    uint64_t v7 = *((unsigned int *)this + 20);
    if ((*((unsigned char *)this + 104) & 0x10) != 0)
    {
LABEL_8:
      uint64_t v8 = *((unsigned int *)this + 24);
      if ((*((unsigned char *)this + 104) & 2) != 0) {
        goto LABEL_9;
      }
LABEL_13:
      uint64_t v9 = 0;
      if ((*((unsigned char *)this + 104) & 0x20) != 0) {
        goto LABEL_10;
      }
LABEL_14:
      uint64_t v10 = 0;
      return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 104) & 0x10) != 0) {
      goto LABEL_8;
    }
  }
  uint64_t v8 = 0;
  if ((*((unsigned char *)this + 104) & 2) == 0) {
    goto LABEL_13;
  }
LABEL_9:
  uint64_t v9 = *((unsigned int *)this + 21);
  if ((*((unsigned char *)this + 104) & 0x20) == 0) {
    goto LABEL_14;
  }
LABEL_10:
  uint64_t v10 = *((unsigned int *)this + 25);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

uint64_t sub_1000719FC(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v5 = *v2++;
    float v6 = *(float *)(v5 + 8);
    float v7 = *(float *)(v5 + 12);
    uint64_t v8 = LODWORD(v6);
    char v9 = *(unsigned char *)(v5 + 16);
    if (v6 == 0.0 || (v9 & 1) == 0) {
      uint64_t v8 = 0;
    }
    int v11 = v9 & 2;
    BOOL v12 = v7 == 0.0 || v11 == 0;
    uint64_t v13 = LODWORD(v7);
    if (v12) {
      uint64_t v13 = 0;
    }
    result ^= v8 ^ v13;
  }
  while (v2 != v3);
  return result;
}

uint64_t CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(uint64_t this)
{
  *(void *)this = off_1003A44F0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A44F0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::AccessoryProxTempComp::~AccessoryProxTempComp(CMMsl::AccessoryProxTempComp *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(uint64_t this, const CMMsl::AccessoryProxTempComp *a2)
{
  *(void *)this = off_1003A44F0;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 44) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 44) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if (v2 < 0)
  {
    char v6 = *((unsigned char *)a2 + 40);
    v3 |= 0x80u;
    *(unsigned char *)(this + 44) = v3;
    *(unsigned char *)(this + 40) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 28) = v7;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  int v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 24) = v8;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 36) = v9;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_18:
    int v11 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(this + 44) = v3 | 0x20;
    *(_DWORD *)(this + 32) = v11;
    return this;
  }
LABEL_17:
  int v10 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 16) = v10;
  if ((*((unsigned char *)a2 + 44) & 0x20) != 0) {
    goto LABEL_18;
  }
  return this;
}

uint64_t CMMsl::AccessoryProxTempComp::operator=(uint64_t a1, const CMMsl::AccessoryProxTempComp *a2)
{
  if ((const CMMsl::AccessoryProxTempComp *)a1 != a2)
  {
    CMMsl::AccessoryProxTempComp::AccessoryProxTempComp((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v11;
    char v11 = v3;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryProxTempComp *a2, CMMsl::AccessoryProxTempComp *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v5;
  int v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  int v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  int v9 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v9;
  int v10 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v10;
  return result;
}

double CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A44F0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A44F0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::AccessoryProxTempComp::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v12[0] = off_1003A44F0;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 40);
    int v16 = *(_DWORD *)(a1 + 44);
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v12[1] = v6;
    char v7 = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v5;
    char v15 = v7;
    long long v8 = *(_OWORD *)(a2 + 16);
    long long v13 = *(_OWORD *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 16) = v8;
    *(void *)(a1 + 32) = v10;
    uint64_t v14 = v9;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProxTempComp::formatText(CMMsl::AccessoryProxTempComp *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "conchaTemp", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 5));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "prescalar", *((_DWORD *)this + 6));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "pwrState", *((_DWORD *)this + 7));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "tragusTemp", *((_DWORD *)this + 8));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "valid", *((unsigned char *)this + 40));
  if ((*((unsigned char *)this + 44) & 0x40) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "wdtPeriod", *((_DWORD *)this + 9));
LABEL_10:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryProxTempComp::readFrom(CMMsl::AccessoryProxTempComp *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 44) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_146;
            case 2u:
              *((unsigned char *)this + 44) |= 4u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_120;
                  }
                  unint64_t v61 = v21++;
                  char v62 = *(unsigned char *)(v22 + v61);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_119:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_119;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_120;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_120:
              *((_DWORD *)this + 5) = v25;
              goto LABEL_146;
            case 3u:
              *((unsigned char *)this + 44) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 40) = v28;
              goto LABEL_146;
            case 4u:
              *((unsigned char *)this + 44) |= 0x10u;
              unint64_t v29 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v30 = *(void *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_125;
                  }
                  unint64_t v65 = v29++;
                  char v66 = *(unsigned char *)(v30 + v65);
                  *((void *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_124:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_125;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_124;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_125;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_125:
              *((_DWORD *)this + 7) = v33;
              goto LABEL_146;
            case 5u:
              *((unsigned char *)this + 44) |= 8u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_130;
                  }
                  unint64_t v69 = v35++;
                  char v70 = *(unsigned char *)(v36 + v69);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_129:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_129;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_130;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_130:
              *((_DWORD *)this + 6) = v39;
              goto LABEL_146;
            case 6u:
              *((unsigned char *)this + 44) |= 0x40u;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_135;
                  }
                  unint64_t v73 = v41++;
                  char v74 = *(unsigned char *)(v42 + v73);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_134:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_134;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_135;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_135:
              *((_DWORD *)this + 9) = v45;
              goto LABEL_146;
            case 7u:
              *((unsigned char *)this + 44) |= 2u;
              unint64_t v47 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v48 = *(void *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_140;
                  }
                  unint64_t v77 = v47++;
                  char v78 = *(unsigned char *)(v48 + v77);
                  *((void *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_139:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v51) = 0;
                }
                goto LABEL_139;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)a2 + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_140;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_140:
              *((_DWORD *)this + 4) = v51;
              goto LABEL_146;
            case 8u:
              *((unsigned char *)this + 44) |= 0x20u;
              unint64_t v53 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v54 = *(void *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_145;
                  }
                  unint64_t v81 = v53++;
                  char v82 = *(unsigned char *)(v54 + v81);
                  *((void *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_144:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v57) = 0;
                }
                goto LABEL_144;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)a2 + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_145:
              *((_DWORD *)this + 8) = v57;
LABEL_146:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_146;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryProxTempComp::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 40), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 4u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 5u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 7u);
    if ((*(unsigned char *)(v3 + 44) & 0x20) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 6u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_17:
  int v5 = *(_DWORD *)(v3 + 32);

  return PB::Writer::writeVarInt(a2, v5, 8u);
}

BOOL CMMsl::AccessoryProxTempComp::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 44);
  int v3 = *(unsigned __int8 *)(a2 + 44);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
      return 0;
    }
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0) {
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return v4;
}

uint64_t CMMsl::AccessoryProxTempComp::hash_value(CMMsl::AccessoryProxTempComp *this)
{
  if (*((unsigned char *)this + 44))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 5);
      if ((*((unsigned char *)this + 44) & 0x80) != 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 44) & 0x80) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned __int8 *)this + 40);
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 44) & 0x10) != 0)
  {
LABEL_5:
    uint64_t v4 = *((unsigned int *)this + 7);
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 8) != 0)
  {
LABEL_6:
    uint64_t v5 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 44) & 0x40) != 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 44) & 0x40) != 0)
  {
LABEL_7:
    uint64_t v6 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_18:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_19:
    uint64_t v8 = 0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_17:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v7 = *((int *)this + 4);
  if ((*((unsigned char *)this + 44) & 0x20) == 0) {
    goto LABEL_19;
  }
LABEL_9:
  uint64_t v8 = *((int *)this + 8);
  return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

double CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(CMMsl::AccessoryProximityConfig *this)
{
  *(void *)this = off_1003A4528;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A4528;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

void CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig(CMMsl::AccessoryProximityConfig *this)
{
  *(void *)this = off_1003A4528;
  uint64_t v4 = *((void *)this + 5);
  uint64_t v2 = (void *)((char *)this + 40);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }
  sub_100274BC4((void ***)this + 4, 0);
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    sub_100012E84((uint64_t)this + 24, v5);
  }
  sub_100274BC4((void ***)this + 2, 0);
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig(this);

  operator delete();
}

uint64_t CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(uint64_t this, const CMMsl::AccessoryProximityConfig *a2)
{
  *(void *)this = off_1003A4528;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(void *)(this + 40) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryProximityConfig::operator=(uint64_t a1, const CMMsl::AccessoryProximityConfig *a2)
{
  if ((const CMMsl::AccessoryProximityConfig *)a1 != a2)
  {
    CMMsl::AccessoryProximityConfig::AccessoryProximityConfig((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig((CMMsl::AccessoryProximityConfig *)&v7);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::AccessoryProximityConfig *a2, CMMsl::AccessoryProximityConfig *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  return this;
}

uint64_t CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(uint64_t a1, void *a2)
{
  *(void *)a1 = off_1003A4528;
  uint64_t v4 = (void ***)(a1 + 16);
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = (uint64_t *)(a1 + 24);
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = (uint64_t *)(a1 + 40);
  uint64_t v7 = (void ***)(a1 + 32);
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v8 = a2[1];
  a2[1] = 0;
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = (void **)a2[2];
  a2[2] = 0;
  sub_100274BC4(v4, v10);
  unint64_t v11 = (void **)a2[4];
  a2[4] = 0;
  sub_100274BC4(v7, v11);
  uint64_t v12 = a2[3];
  a2[3] = 0;
  uint64_t v13 = *v5;
  uint64_t *v5 = v12;
  if (v13) {
    sub_100012E84((uint64_t)v5, v13);
  }
  uint64_t v14 = a2[5];
  a2[5] = 0;
  uint64_t v15 = *v6;
  *uint64_t v6 = v14;
  if (v15) {
    sub_100012E84((uint64_t)v6, v15);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProximityConfig::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    CMMsl::AccessoryProximityConfig::AccessoryProximityConfig((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig((CMMsl::AccessoryProximityConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProximityConfig::formatText(CMMsl::AccessoryProximityConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "config");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 3)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 4)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 5)) {
    PB::TextFormatter::format();
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryProximityConfig::readFrom(CMMsl::AccessoryProximityConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v14 = 0;
        unsigned int v15 = 0;
        unint64_t v10 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v16 = v2 + 1;
          char v17 = *(unsigned char *)(v7 + v2);
          *((void *)a2 + 1) = v16;
          v10 |= (unint64_t)(v17 & 0x7F) << v14;
          if ((v17 & 0x80) == 0) {
            goto LABEL_20;
          }
          v14 += 7;
          unint64_t v2 = v16;
          if (v15++ >= 9)
          {
LABEL_19:
            unint64_t v10 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          unint64_t v11 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v12 = *(unsigned char *)(v7 + v2);
          v10 |= (unint64_t)(v12 & 0x7F) << v8;
          if ((v12 & 0x80) == 0) {
            break;
          }
          v8 += 7;
          unint64_t v2 = v11;
          if (v9++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              operator new();
            case 2u:
              operator new();
            case 3u:
              operator new();
            case 4u:
              operator new();
            case 5u:
              operator new();
            default:
              uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryProximityConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  if (v3[2]) {
    this = PB::Writer::write();
  }
  if (v3[4]) {
    this = PB::Writer::write();
  }
  if (v3[3]) {
    this = PB::Writer::write();
  }
  if (v3[5])
  {
    return PB::Writer::write();
  }
  return this;
}

BOOL CMMsl::AccessoryProximityConfig::operator==(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (v4)
  {
    if (!v5 || !CMMsl::AccessoryConfig::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = a2[2];
  if (a1[2])
  {
    if (!v6 || (PB::Data::operator==() & 1) == 0 && a1[2] | a2[2]) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  uint64_t v7 = a2[4];
  if (a1[4])
  {
    if (!v7 || (PB::Data::operator==() & 1) == 0 && a1[4] | a2[4]) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  char v8 = (unsigned __int8 *)a1[3];
  unsigned int v9 = (unsigned __int8 *)a2[3];
  if (!v8)
  {
    if (!v9) {
      goto LABEL_24;
    }
    return 0;
  }
  if (!v9 || !sub_10005CB00(v8, v9) && a1[3] | a2[3]) {
    return 0;
  }
LABEL_24:
  unint64_t v10 = (unsigned __int8 *)a1[5];
  if (v10)
  {
    unint64_t v11 = (unsigned __int8 *)a2[5];
    if (!v11) {
      return 0;
    }
    if (sub_10005CB00(v10, v11)) {
      return 1;
    }
    if (a1[5]) {
      return 0;
    }
  }
  return a2[5] == 0;
}

unint64_t CMMsl::AccessoryProximityConfig::hash_value(CMMsl::AccessoryProximityConfig *this)
{
  unint64_t v2 = (CMMsl::AccessoryConfig *)*((void *)this + 1);
  if (v2) {
    unint64_t v3 = CMMsl::AccessoryConfig::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  if (*((void *)this + 2)) {
    uint64_t v4 = PBHashBytes();
  }
  else {
    uint64_t v4 = 0;
  }
  if (*((void *)this + 4)) {
    uint64_t v5 = PBHashBytes();
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    unint64_t v7 = sub_100012EE0((uint64_t)&v11, v6);
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8) {
    unint64_t v9 = sub_100012EE0((uint64_t)&v12, v8);
  }
  else {
    unint64_t v9 = 0;
  }
  return v4 ^ v3 ^ v5 ^ v7 ^ v9;
}

uint64_t CMMsl::AccessoryProximityConfig::makeConfig(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(uint64_t this)
{
  *(void *)this = off_1003A4560;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A4560;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessorySleepStateConfidenceEpoch::~AccessorySleepStateConfidenceEpoch(CMMsl::AccessorySleepStateConfidenceEpoch *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(uint64_t this, const CMMsl::AccessorySleepStateConfidenceEpoch *a2)
{
  *(void *)this = off_1003A4560;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 28);
    v3 |= 0x10u;
    *(unsigned char *)(this + 32) = v3;
    *(unsigned char *)(this + 28) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 20) = v7;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_14:
    char v9 = *((unsigned char *)a2 + 29);
    *(unsigned char *)(this + 32) = v3 | 0x20;
    *(unsigned char *)(this + 29) = v9;
    return this;
  }
LABEL_13:
  int v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v8;
  if ((*((unsigned char *)a2 + 32) & 0x20) != 0) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::operator=(uint64_t a1, const CMMsl::AccessorySleepStateConfidenceEpoch *a2)
{
  if ((const CMMsl::AccessorySleepStateConfidenceEpoch *)a1 != a2)
  {
    CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v12;
    char v12 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v4;
    int v5 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 29);
    *(unsigned char *)(a1 + 29) = v13;
    char v13 = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessorySleepStateConfidenceEpoch *a2, CMMsl::AccessorySleepStateConfidenceEpoch *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 28);
  *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
  *((unsigned char *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 29);
  *((unsigned char *)this + 29) = *((unsigned char *)a2 + 29);
  *((unsigned char *)a2 + 29) = v4;
  return result;
}

float CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4560;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A4560;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  return result;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 28);
    int v6 = *(_DWORD *)(a2 + 16);
    int v7 = *(_DWORD *)(a2 + 20);
    int v8 = *(_DWORD *)(a2 + 24);
    char v9 = *(unsigned char *)(a2 + 29);
    int v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v3;
    int v20 = v10;
    uint64_t v11 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v14[0] = off_1003A4560;
    v14[1] = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v5;
    char v18 = v11;
    LODWORD(v11) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    int v15 = v11;
    int v12 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v7;
    int v16 = v12;
    LODWORD(v11) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v17 = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 29);
    *(unsigned char *)(a1 + 29) = v9;
    char v19 = v11;
    PB::Base::~Base((PB::Base *)v14);
  }
  return a1;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::formatText(CMMsl::AccessorySleepStateConfidenceEpoch *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "asleep", *((unsigned char *)this + 28));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "averageConfidence", *((_DWORD *)this + 4));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "initialized", *((unsigned char *)this + 29));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "rawConfidence", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 1));
  if ((*((unsigned char *)this + 32) & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 6));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::readFrom(CMMsl::AccessorySleepStateConfidenceEpoch *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_82;
                  }
                  unint64_t v45 = v20++;
                  char v46 = *(unsigned char *)(v21 + v45);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_81;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_81:
                unint64_t v2 = v45 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_82;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_82:
              *((void *)this + 1) = v24;
              goto LABEL_93;
            case 2u:
              *((unsigned char *)this + 32) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 28) = v28;
              goto LABEL_93;
            case 3u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v29 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v30 = *(void *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_87;
                  }
                  unint64_t v49 = v29++;
                  char v50 = *(unsigned char *)(v30 + v49);
                  *((void *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_86:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_86;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_87;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_87:
              *((_DWORD *)this + 4) = v33;
              goto LABEL_93;
            case 4u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_93;
            case 5u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_92;
                  }
                  unint64_t v53 = v35++;
                  char v54 = *(unsigned char *)(v36 + v53);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_91:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_91;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_92;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_92:
              *((_DWORD *)this + 6) = v39;
LABEL_93:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *((unsigned char *)this + 32) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v42 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v42 = v41 != 0;
              }
              *((unsigned char *)this + 29) = v42;
              goto LABEL_93;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_93;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 5u);
    if ((*(unsigned char *)(v3 + 32) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  char v5 = *(unsigned char *)(v3 + 29);

  return PB::Writer::write(a2, v5, 6u);
}

BOOL CMMsl::AccessorySleepStateConfidenceEpoch::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 32) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 32) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29);
  }
  return v2;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::hash_value(CMMsl::AccessorySleepStateConfidenceEpoch *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 28);
      if ((*((unsigned char *)this + 32) & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 4);
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_13:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_8;
    }
LABEL_14:
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 32) & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v7 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_5:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  uint64_t v6 = *((unsigned int *)this + 6);
  if ((*((unsigned char *)this + 32) & 0x20) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v7 = *((unsigned __int8 *)this + 29);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(uint64_t this)
{
  *(void *)this = off_1003A4598;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A4598;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::AccessorySleepStateUpdate::~AccessorySleepStateUpdate(CMMsl::AccessorySleepStateUpdate *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(uint64_t this, const CMMsl::AccessorySleepStateUpdate *a2)
{
  *(void *)this = off_1003A4598;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) = v3 | 8;
    *(_DWORD *)(this + 24) = v7;
    return this;
  }
  int v6 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 28) = v3;
  *(_DWORD *)(this + 20) = v6;
  if ((*((unsigned char *)a2 + 28) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::AccessorySleepStateUpdate::operator=(uint64_t a1, const CMMsl::AccessorySleepStateUpdate *a2)
{
  if ((const CMMsl::AccessorySleepStateUpdate *)a1 != a2)
  {
    CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate((uint64_t)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v8;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessorySleepStateUpdate *a2, CMMsl::AccessorySleepStateUpdate *a3)
{
  int v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return this;
}

uint64_t CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A4598;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  *(void *)uint64_t result = off_1003A4598;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::AccessorySleepStateUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = off_1003A4598;
    v8[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v4;
    long long v9 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::AccessorySleepStateUpdate::formatText(CMMsl::AccessorySleepStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "activity", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidenceLevel", *((_DWORD *)this + 5));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "sensorTime", *((void *)this + 1));
  if ((*((unsigned char *)this + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 6));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessorySleepStateUpdate::readFrom(CMMsl::AccessorySleepStateUpdate *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)a2 + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 28) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  unint64_t v47 = v20++;
                  char v48 = *(unsigned char *)(v21 + v47);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_87:
                unint64_t v3 = v47 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v3 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  unint64_t v20 = v3;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_88:
              *((void *)this + 1) = v24;
              goto LABEL_104;
            case 2u:
              *((unsigned char *)this + 28) |= 2u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    unint64_t v3 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v3 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                unint64_t v27 = v3;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *((_DWORD *)this + 4) = v31;
              goto LABEL_104;
            case 3u:
              *((unsigned char *)this + 28) |= 4u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    unint64_t v3 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v3 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                unint64_t v33 = v3;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *((_DWORD *)this + 5) = v37;
              goto LABEL_104;
            case 4u:
              *((unsigned char *)this + 28) |= 8u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    unint64_t v3 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v3 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                unint64_t v39 = v3;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *((_DWORD *)this + 6) = v43;
LABEL_104:
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessorySleepStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  unsigned int v5 = *(_DWORD *)(v3 + 24);

  return PB::Writer::writeVarInt(a2, v5, 4u);
}

BOOL CMMsl::AccessorySleepStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 8) == 0;
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
    return (*(unsigned char *)(a2 + 28) & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::AccessorySleepStateUpdate::hash_value(CMMsl::AccessorySleepStateUpdate *this)
{
  if (*((unsigned char *)this + 28))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 4);
      if ((*((unsigned char *)this + 28) & 4) != 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 28) & 8) != 0) {
        goto LABEL_5;
      }
LABEL_9:
      uint64_t v4 = 0;
      return v2 ^ v1 ^ v3 ^ v4;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 6);
  return v2 ^ v1 ^ v3 ^ v4;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(uint64_t this)
{
  *(void *)this = off_1003A45D0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = off_1003A45D0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug(CMMsl::AccessoryStepDetectorDebug *this)
{
  *(void *)this = off_1003A45D0;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug(this);

  operator delete();
}

uint64_t CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(uint64_t this, const CMMsl::AccessoryStepDetectorDebug *a2)
{
  *(void *)this = off_1003A45D0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  char v2 = *((unsigned char *)a2 + 60);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 4);
    char v3 = 4;
    *(unsigned char *)(this + 60) = 4;
    *(void *)(this + 32) = v4;
    char v2 = *((unsigned char *)a2 + 60);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 60) & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 13);
    v3 |= 0x10u;
    *(unsigned char *)(this + 60) = v3;
    *(_DWORD *)(this + 52) = v5;
    char v2 = *((unsigned char *)a2 + 60);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v7 = *((_DWORD *)a2 + 12);
    v3 |= 8u;
    *(unsigned char *)(this + 60) = v3;
    *(_DWORD *)(this + 48) = v7;
    char v2 = *((unsigned char *)a2 + 60);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v8 = *((void *)a2 + 3);
  v3 |= 2u;
  *(unsigned char *)(this + 60) = v3;
  *(void *)(this + 24) = v8;
  char v2 = *((unsigned char *)a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_18:
  uint64_t v9 = *((void *)a2 + 2);
  v3 |= 1u;
  *(unsigned char *)(this + 60) = v3;
  *(void *)(this + 16) = v9;
  if ((*((unsigned char *)a2 + 60) & 0x20) != 0)
  {
LABEL_10:
    char v6 = *((unsigned char *)a2 + 56);
    *(unsigned char *)(this + 60) = v3 | 0x20;
    *(unsigned char *)(this + 56) = v6;
  }
LABEL_11:
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::operator=(uint64_t a1, const CMMsl::AccessoryStepDetectorDebug *a2)
{
  if ((const CMMsl::AccessoryStepDetectorDebug *)a1 != a2)
  {
    CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug((uint64_t)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v13;
    uint64_t v13 = v4;
    uint64_t v5 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v15;
    uint64_t v15 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v12;
    long long v12 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v16;
    char v16 = v3;
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v14;
    uint64_t v14 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v11;
    uint64_t v11 = v8;
    CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug((CMMsl::AccessoryStepDetectorDebug *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryStepDetectorDebug *a2, CMMsl::AccessoryStepDetectorDebug *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  int v5 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  int v6 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v6) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v6;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  return result;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A45D0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug((uint64_t)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v13;
    uint64_t v13 = v4;
    uint64_t v5 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v15;
    uint64_t v15 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v12;
    long long v12 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v16;
    char v16 = v3;
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v14;
    uint64_t v14 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v11;
    uint64_t v11 = v8;
    CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug((CMMsl::AccessoryStepDetectorDebug *)&v10);
  }
  return a1;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::formatText(CMMsl::AccessoryStepDetectorDebug *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 60) & 0x20) != 0) {
    PB::TextFormatter::format(a2, "detectedSteps", *((unsigned char *)this + 56));
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "firstStepFeatures");
  }
  char v6 = *((unsigned char *)this + 60);
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "fsmEndState", *((_DWORD *)this + 12));
    char v6 = *((unsigned char *)this + 60);
    if ((v6 & 0x10) == 0)
    {
LABEL_7:
      if ((v6 & 1) == 0) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }
  }
  else if ((*((unsigned char *)this + 60) & 0x10) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "fsmStartState", *((_DWORD *)this + 13));
  char v6 = *((unsigned char *)this + 60);
  if ((v6 & 1) == 0)
  {
LABEL_8:
    if ((v6 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "impulseEndTime", *((double *)this + 2));
  char v6 = *((unsigned char *)this + 60);
  if ((v6 & 2) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "impulseStartTime", *((double *)this + 3));
  if ((*((unsigned char *)this + 60) & 4) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "imuTimestamp", *((double *)this + 4));
LABEL_11:
  uint64_t v7 = *((void *)this + 5);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "stepLikelihoodFeatures");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryStepDetectorDebug::readFrom(CMMsl::AccessoryStepDetectorDebug *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 60) |= 4u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_46;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v20);
          goto LABEL_68;
        case 2u:
          *((unsigned char *)this + 60) |= 0x10u;
          unint64_t v22 = *((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
          uint64_t v24 = *(void *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v28 = v22 + 1;
              *((void *)a2 + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_72;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v14 = v26++ > 8;
            }
            while (!v14);
LABEL_57:
            LODWORD(v27) = 0;
            goto LABEL_72;
          }
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v46 = v22 + 1;
              char v47 = *(unsigned char *)(v24 + v22);
              *((void *)a2 + 1) = v46;
              v27 |= (unint64_t)(v47 & 0x7F) << v44;
              if (v47 < 0)
              {
                v44 += 7;
                unint64_t v22 = v46;
                BOOL v14 = v45++ > 8;
                if (v14) {
                  goto LABEL_57;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v27) = 0;
              }
            }
            break;
          }
LABEL_72:
          *((_DWORD *)this + 13) = v27;
          goto LABEL_77;
        case 3u:
          *((unsigned char *)this + 60) |= 8u;
          unint64_t v30 = *((void *)a2 + 1);
          unint64_t v31 = *((void *)a2 + 2);
          uint64_t v32 = *(void *)a2;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v35 = 0;
            do
            {
              unint64_t v36 = v30 + 1;
              *((void *)a2 + 1) = v30 + 1;
              char v37 = *(unsigned char *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0) {
                goto LABEL_76;
              }
              v33 += 7;
              unint64_t v30 = v36;
              BOOL v14 = v34++ > 8;
            }
            while (!v14);
LABEL_64:
            LODWORD(v35) = 0;
            goto LABEL_76;
          }
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v35 = 0;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)a2 + 1);
          }
          break;
        case 4u:
          *((unsigned char *)this + 60) |= 2u;
          unint64_t v38 = *((void *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)a2 + 2)) {
            goto LABEL_46;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v38);
          goto LABEL_68;
        case 5u:
          *((unsigned char *)this + 60) |= 1u;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v39);
LABEL_68:
            *((void *)a2 + 1) += 8;
          }
          else
          {
LABEL_46:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_77;
        case 6u:
          *((unsigned char *)this + 60) |= 0x20u;
          unint64_t v40 = *((void *)a2 + 1);
          if (v40 >= *((void *)a2 + 2))
          {
            BOOL v43 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v41 = v40 + 1;
            int v42 = *(unsigned __int8 *)(*(void *)a2 + v40);
            *((void *)a2 + 1) = v41;
            BOOL v43 = v42 != 0;
          }
          *((unsigned char *)this + 56) = v43;
          goto LABEL_77;
        case 7u:
          operator new();
        case 8u:
          operator new();
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_77;
      }
      while (1)
      {
        if (v31 == v30)
        {
          LODWORD(v35) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_76;
        }
        unint64_t v50 = v30 + 1;
        char v51 = *(unsigned char *)(v32 + v30);
        *((void *)a2 + 1) = v50;
        v35 |= (unint64_t)(v51 & 0x7F) << v48;
        if ((v51 & 0x80) == 0) {
          break;
        }
        v48 += 7;
        unint64_t v30 = v50;
        BOOL v14 = v49++ > 8;
        if (v14) {
          goto LABEL_64;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v35) = 0;
      }
LABEL_76:
      *((_DWORD *)this + 12) = v35;
LABEL_77:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(uint64_t this)
{
  *(void *)this = off_1003A95A8;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(void *)this = off_1003A95A8;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t CMMsl::FirstStepFeatures::FirstStepFeatures(uint64_t this)
{
  *(void *)this = off_1003A5B40;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A5B40;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 60);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(unsigned char *)(this + 60) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 2u);
  char v4 = *(unsigned char *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 3u);
  char v4 = *(unsigned char *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  char v4 = *(unsigned char *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 5u);
  if ((*(unsigned char *)(v3 + 60) & 0x20) != 0) {
LABEL_7:
  }
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 56), 6u);
LABEL_8:
  uint64_t v5 = *(const PB::Base **)(v3 + 40);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5, 7u);
  }
  char v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
  {
    return PB::Writer::writeSubmessage(a2, v6, 8u);
  }
  return this;
}

BOOL CMMsl::AccessoryStepDetectorDebug::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 60) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 4) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 0x10) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 8) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 2) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 60))
  {
    if ((*(unsigned char *)(a2 + 60) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 60))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 0x20) != 0)
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !CMMsl::StepLikelihoodFeatures::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  BOOL result = v6 == 0;
  if (!*(void *)(a1 + 8)) {
    return result;
  }
  return v6 && CMMsl::FirstStepFeatures::operator==(*(void *)(a1 + 8), v6);
}

BOOL CMMsl::StepLikelihoodFeatures::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 96);
  __int16 v3 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 96) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 96) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 96) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 1) == 0;
  if (v2) {
    return (v3 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v4;
}

BOOL CMMsl::FirstStepFeatures::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 44) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 44) & 0x10) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return v2;
}

unint64_t CMMsl::AccessoryStepDetectorDebug::hash_value(CMMsl::AccessoryStepDetectorDebug *this)
{
  if ((*((unsigned char *)this + 60) & 4) != 0)
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 4);
    }
    if ((*((unsigned char *)this + 60) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 13);
      if ((*((unsigned char *)this + 60) & 8) != 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 60) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 60) & 8) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned int *)this + 12);
    if ((*((unsigned char *)this + 60) & 2) != 0) {
      goto LABEL_5;
    }
LABEL_20:
    uint64_t v5 = 0;
    if (*((unsigned char *)this + 60)) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 60) & 2) == 0) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((double *)this + 3) == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 3);
  }
  if (*((unsigned char *)this + 60))
  {
LABEL_9:
    if (*((double *)this + 2) == 0.0) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = *((void *)this + 2);
    }
    if ((*((unsigned char *)this + 60) & 0x20) != 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 60) & 0x20) != 0)
  {
LABEL_13:
    uint64_t v7 = *((unsigned __int8 *)this + 56);
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v7 = 0;
LABEL_23:
  uint64_t v8 = (CMMsl::StepLikelihoodFeatures *)*((void *)this + 5);
  if (v8) {
    uint64_t v9 = CMMsl::StepLikelihoodFeatures::hash_value(v8);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = *((void *)this + 1);
  if (v10) {
    unint64_t v10 = CMMsl::FirstStepFeatures::hash_value((CMMsl::FirstStepFeatures *)v10);
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::makeStepLikelihoodFeatures(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::makeFirstStepFeatures(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryWake::AccessoryWake(uint64_t this)
{
  *(void *)this = off_1003A4608;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = off_1003A4608;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::AccessoryWake::~AccessoryWake(CMMsl::AccessoryWake *this)
{
  *(void *)this = off_1003A4608;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryWake::~AccessoryWake(this);

  operator delete();
}

CMMsl::AccessoryWake *CMMsl::AccessoryWake::AccessoryWake(CMMsl::AccessoryWake *this, const CMMsl::AccessoryWake *a2)
{
  *(void *)this = off_1003A4608;
  *((void *)this + 1) = 0;
  uint64_t v3 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  char v4 = *((unsigned char *)a2 + 52);
  if ((v4 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 11);
    char v5 = 4;
    *((unsigned char *)this + 52) = 4;
    *((_DWORD *)this + 11) = v6;
    char v4 = *((unsigned char *)a2 + 52);
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v5 = 0;
  if (*((unsigned char *)a2 + 52))
  {
LABEL_5:
    uint64_t v7 = *((void *)a2 + 4);
    v5 |= 1u;
    *((unsigned char *)this + 52) = v5;
    *((void *)this + 4) = v7;
    char v4 = *((unsigned char *)a2 + 52);
  }
LABEL_6:
  if ((v4 & 8) == 0)
  {
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v10 = *((_DWORD *)a2 + 12);
  v5 |= 8u;
  *((unsigned char *)this + 52) = v5;
  *((_DWORD *)this + 12) = v10;
  if ((*((unsigned char *)a2 + 52) & 2) != 0)
  {
LABEL_8:
    int v8 = *((_DWORD *)a2 + 10);
    *((unsigned char *)this + 52) = v5 | 2;
    *((_DWORD *)this + 10) = v8;
  }
LABEL_9:
  if (this != a2) {
    sub_100024308(v3, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::AccessoryWake::operator=(uint64_t a1, const CMMsl::AccessoryWake *a2)
{
  if ((const CMMsl::AccessoryWake *)a1 != a2)
  {
    CMMsl::AccessoryWake::AccessoryWake((CMMsl::AccessoryWake *)v8, a2);
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v6;
    CMMsl::AccessoryWake::~AccessoryWake((CMMsl::AccessoryWake *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryWake *a2, CMMsl::AccessoryWake *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  int v4 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  int v6 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  int v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  return result;
}

uint64_t CMMsl::AccessoryWake::AccessoryWake(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4608;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::AccessoryWake::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryWake::AccessoryWake((uint64_t)v8, a2);
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v6;
    CMMsl::AccessoryWake::~AccessoryWake((CMMsl::AccessoryWake *)v8);
  }
  return a1;
}

uint64_t CMMsl::AccessoryWake::formatText(CMMsl::AccessoryWake *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "hostState", *((_DWORD *)this + 10));
    char v5 = *((unsigned char *)this + 52);
  }
  if ((v5 & 4) != 0) {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 11));
  }
  uint64_t v6 = (int *)*((void *)this + 1);
  int v7 = (int *)*((void *)this + 2);
  while (v6 != v7)
  {
    int v8 = *v6++;
    PB::TextFormatter::format(a2, "s7q8", v8);
  }
  char v9 = *((unsigned char *)this + 52);
  if ((v9 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sensorState", *((_DWORD *)this + 12));
    char v9 = *((unsigned char *)this + 52);
  }
  if (v9) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryWake::readFrom(CMMsl::AccessoryWake *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    int v8 = (void **)((char *)this + 8);
    char v9 = (void *)((char *)this + 24);
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v60 = v12++ > 8;
        if (v60) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v21 = v13 & 7;
      if (v21 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 52) |= 4u;
          unint64_t v22 = *((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
          uint64_t v24 = *(void *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v28 = v22 + 1;
              *((void *)a2 + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_133;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v60 = v26++ > 8;
            }
            while (!v60);
LABEL_100:
            LODWORD(v27) = 0;
            goto LABEL_133;
          }
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v73 = v22 + 1;
              char v74 = *(unsigned char *)(v24 + v22);
              *((void *)a2 + 1) = v73;
              v27 |= (unint64_t)(v74 & 0x7F) << v71;
              if (v74 < 0)
              {
                v71 += 7;
                unint64_t v22 = v73;
                BOOL v60 = v72++ > 8;
                if (v60) {
                  goto LABEL_100;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v27) = 0;
              }
            }
            break;
          }
LABEL_133:
          *((_DWORD *)this + 11) = v27;
          goto LABEL_166;
        case 2u:
          *((unsigned char *)this + 52) |= 1u;
          unint64_t v30 = *((void *)a2 + 1);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 4) = *(void *)(*(void *)a2 + v30);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_166;
        case 3u:
          *((unsigned char *)this + 52) |= 8u;
          unint64_t v31 = *((void *)a2 + 1);
          unint64_t v32 = *((void *)a2 + 2);
          uint64_t v33 = *(void *)a2;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v36 = 0;
            do
            {
              unint64_t v37 = v31 + 1;
              *((void *)a2 + 1) = v31 + 1;
              char v38 = *(unsigned char *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0) {
                goto LABEL_136;
              }
              v34 += 7;
              unint64_t v31 = v37;
              BOOL v60 = v35++ > 8;
            }
            while (!v60);
LABEL_107:
            LODWORD(v36) = 0;
            goto LABEL_136;
          }
          char v75 = 0;
          unsigned int v76 = 0;
          uint64_t v36 = 0;
          if (v32 <= v31) {
            unint64_t v32 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v77 = v31 + 1;
              char v78 = *(unsigned char *)(v33 + v31);
              *((void *)a2 + 1) = v77;
              v36 |= (unint64_t)(v78 & 0x7F) << v75;
              if (v78 < 0)
              {
                v75 += 7;
                unint64_t v31 = v77;
                BOOL v60 = v76++ > 8;
                if (v60) {
                  goto LABEL_107;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v36) = 0;
              }
            }
            break;
          }
LABEL_136:
          *((_DWORD *)this + 12) = v36;
          goto LABEL_166;
        case 4u:
          *((unsigned char *)this + 52) |= 2u;
          unint64_t v39 = *((void *)a2 + 1);
          unint64_t v40 = *((void *)a2 + 2);
          uint64_t v41 = *(void *)a2;
          if (v39 <= 0xFFFFFFFFFFFFFFF5 && v39 + 10 <= v40)
          {
            char v42 = 0;
            unsigned int v43 = 0;
            uint64_t v44 = 0;
            do
            {
              unint64_t v45 = v39 + 1;
              *((void *)a2 + 1) = v39 + 1;
              char v46 = *(unsigned char *)(v41 + v39);
              v44 |= (unint64_t)(v46 & 0x7F) << v42;
              if ((v46 & 0x80) == 0) {
                goto LABEL_139;
              }
              v42 += 7;
              unint64_t v39 = v45;
              BOOL v60 = v43++ > 8;
            }
            while (!v60);
LABEL_114:
            LODWORD(v44) = 0;
            goto LABEL_139;
          }
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v44 = 0;
          if (v40 <= v39) {
            unint64_t v40 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v40 == v39)
            {
              LODWORD(v44) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v81 = v39 + 1;
              char v82 = *(unsigned char *)(v41 + v39);
              *((void *)a2 + 1) = v81;
              v44 |= (unint64_t)(v82 & 0x7F) << v79;
              if (v82 < 0)
              {
                v79 += 7;
                unint64_t v39 = v81;
                BOOL v60 = v80++ > 8;
                if (v60) {
                  goto LABEL_114;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v44) = 0;
              }
            }
            break;
          }
LABEL_139:
          *((_DWORD *)this + 10) = v44;
          goto LABEL_166;
        case 5u:
          if (v21 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v47 = (char *)*((void *)this + 2);
              do
              {
                if ((unint64_t)v47 >= *v9)
                {
                  char v48 = (char *)*v8;
                  uint64_t v49 = (v47 - (unsigned char *)*v8) >> 2;
                  unint64_t v50 = v49 + 1;
                  if ((unint64_t)(v49 + 1) >> 62) {
                    goto LABEL_176;
                  }
                  uint64_t v51 = *v9 - (void)v48;
                  if (v51 >> 1 > v50) {
                    unint64_t v50 = v51 >> 1;
                  }
                  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v52 = v50;
                  }
                  if (v52)
                  {
                    char v53 = (char *)sub_100024458((uint64_t)v9, v52);
                    char v48 = (char *)*((void *)this + 1);
                    char v47 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    char v53 = 0;
                  }
                  unsigned int v54 = &v53[4 * v49];
                  *(_DWORD *)unsigned int v54 = 0;
                  unint64_t v55 = v54 + 4;
                  while (v47 != v48)
                  {
                    int v56 = *((_DWORD *)v47 - 1);
                    v47 -= 4;
                    *((_DWORD *)v54 - 1) = v56;
                    v54 -= 4;
                  }
                  *((void *)this + 1) = v54;
                  *((void *)this + 2) = v55;
                  *((void *)this + 3) = &v53[4 * v52];
                  if (v48) {
                    operator delete(v48);
                  }
                  char v47 = v55;
                }
                else
                {
                  *(_DWORD *)char v47 = 0;
                  v47 += 4;
                }
                *((void *)this + 2) = v47;
                unint64_t v58 = *((void *)a2 + 1);
                unint64_t v57 = *((void *)a2 + 2);
                uint64_t v59 = *(void *)a2;
                BOOL v60 = v58 > 0xFFFFFFFFFFFFFFF5 || v58 + 10 > v57;
                if (!v60)
                {
                  char v66 = 0;
                  unsigned int v67 = 0;
                  uint64_t v68 = 0;
                  while (1)
                  {
                    unint64_t v69 = v58 + 1;
                    *((void *)a2 + 1) = v58 + 1;
                    char v70 = *(unsigned char *)(v59 + v58);
                    v68 |= (unint64_t)(v70 & 0x7F) << v66;
                    if ((v70 & 0x80) == 0) {
                      goto LABEL_91;
                    }
                    v66 += 7;
                    unint64_t v58 = v69;
                    BOOL v60 = v67++ > 8;
                    if (v60)
                    {
                      LODWORD(v68) = 0;
                      goto LABEL_91;
                    }
                  }
                }
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v68 = 0;
                if (v57 <= v58) {
                  uint64_t v63 = *((void *)a2 + 1);
                }
                else {
                  uint64_t v63 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v63 == v58)
                  {
                    *((unsigned char *)a2 + 24) = 1;
                    *((_DWORD *)v47 - 1) = 0;
                    goto LABEL_127;
                  }
                  unint64_t v64 = v58++;
                  char v65 = *(unsigned char *)(v59 + v64);
                  *((void *)a2 + 1) = v58;
                  v68 |= (unint64_t)(v65 & 0x7F) << v61;
                  if ((v65 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v60 = v62++ > 8;
                  if (v60)
                  {
                    LODWORD(v68) = 0;
                    goto LABEL_90;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v68) = 0;
                }
LABEL_90:
                unint64_t v69 = v64 + 1;
LABEL_91:
                *((_DWORD *)v47 - 1) = v68;
              }
              while (v69 < v57 && !*((unsigned char *)a2 + 24));
            }
LABEL_127:
            PB::Reader::recallMark();
          }
          else
          {
            char v84 = (char *)*((void *)this + 2);
            unint64_t v83 = *((void *)this + 3);
            if ((unint64_t)v84 >= v83)
            {
              unint64_t v86 = (char *)*v8;
              uint64_t v87 = (v84 - (unsigned char *)*v8) >> 2;
              unint64_t v88 = v87 + 1;
              if ((unint64_t)(v87 + 1) >> 62) {
LABEL_176:
              }
                sub_10000EE98();
              uint64_t v89 = v83 - (void)v86;
              if (v89 >> 1 > v88) {
                unint64_t v88 = v89 >> 1;
              }
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v90 = v88;
              }
              if (v90)
              {
                unint64_t v91 = (char *)sub_100024458((uint64_t)v9, v90);
                unint64_t v86 = (char *)*((void *)this + 1);
                char v84 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v91 = 0;
              }
              char v92 = &v91[4 * v87];
              *(_DWORD *)char v92 = 0;
              unint64_t v85 = v92 + 4;
              while (v84 != v86)
              {
                int v93 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v92 - 1) = v93;
                v92 -= 4;
              }
              *((void *)this + 1) = v92;
              *((void *)this + 2) = v85;
              *((void *)this + 3) = &v91[4 * v90];
              if (v86) {
                operator delete(v86);
              }
            }
            else
            {
              *(_DWORD *)char v84 = 0;
              unint64_t v85 = v84 + 4;
            }
            *((void *)this + 2) = v85;
            unint64_t v94 = *((void *)a2 + 1);
            unint64_t v95 = *((void *)a2 + 2);
            uint64_t v96 = *(void *)a2;
            char v97 = 0;
            unsigned int v98 = 0;
            if (v94 > 0xFFFFFFFFFFFFFFF5 || v94 + 10 > v95)
            {
              uint64_t v102 = 0;
              if (v95 <= v94) {
                unint64_t v95 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v95 == v94)
                {
                  LODWORD(v102) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_165;
                }
                unint64_t v100 = v94 + 1;
                char v101 = *(unsigned char *)(v96 + v94);
                *((void *)a2 + 1) = v100;
                v102 |= (unint64_t)(v101 & 0x7F) << v97;
                if ((v101 & 0x80) == 0) {
                  break;
                }
                v97 += 7;
                unint64_t v94 = v100;
                BOOL v60 = v98++ > 8;
                if (v60)
                {
LABEL_161:
                  LODWORD(v102) = 0;
                  goto LABEL_165;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v102) = 0;
              }
            }
            else
            {
              uint64_t v102 = 0;
              while (1)
              {
                unint64_t v103 = v94 + 1;
                *((void *)a2 + 1) = v94 + 1;
                char v104 = *(unsigned char *)(v96 + v94);
                v102 |= (unint64_t)(v104 & 0x7F) << v97;
                if ((v104 & 0x80) == 0) {
                  break;
                }
                v97 += 7;
                unint64_t v94 = v103;
                BOOL v60 = v98++ > 8;
                if (v60) {
                  goto LABEL_161;
                }
              }
            }
LABEL_165:
            *(v85 - 1) = v102;
          }
LABEL_166:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v21, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_166;
      }
    }
    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v18;
      v13 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryWake::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 52);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 44), 1u);
    char v4 = *(unsigned char *)(v3 + 52);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_12:
      this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 3u);
      if ((*(unsigned char *)(v3 + 52) & 2) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(this + 52) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 2u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 8) != 0) {
    goto LABEL_12;
  }
LABEL_4:
  if ((v4 & 2) != 0) {
LABEL_5:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 4u);
LABEL_6:
  uint64_t v6 = *(int **)(v3 + 8);
  char v5 = *(int **)(v3 + 16);
  while (v6 != v5)
  {
    int v7 = *v6++;
    this = PB::Writer::writeVarInt(a2, v7, 5u);
  }
  return this;
}

BOOL CMMsl::AccessoryWake::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 4) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
LABEL_6:
    if (*(unsigned char *)(a1 + 52))
    {
      if ((*(unsigned char *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a2 + 52))
    {
      return 0;
    }
    if ((*(unsigned char *)(a1 + 52) & 8) != 0)
    {
      if ((*(unsigned char *)(a2 + 52) & 8) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 52) & 8) != 0)
    {
      return 0;
    }
    if ((*(unsigned char *)(a1 + 52) & 2) != 0)
    {
      if ((*(unsigned char *)(a2 + 52) & 2) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 52) & 2) != 0)
    {
      return 0;
    }
    return sub_10006EDA4(a1 + 8, a2 + 8);
  }
  if ((*(unsigned char *)(a2 + 52) & 4) == 0) {
    goto LABEL_6;
  }
  return 0;
}

uint64_t CMMsl::AccessoryWake::hash_value(CMMsl::AccessoryWake *this)
{
  if ((*((unsigned char *)this + 52) & 4) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 52)) {
      goto LABEL_3;
    }
LABEL_9:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 52) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 52) & 2) != 0) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v4 = 0;
    return *(void *)&v2 ^ v1 ^ v3 ^ v4 ^ PBHashBytes();
  }
  uint64_t v1 = *((unsigned int *)this + 11);
  if ((*((unsigned char *)this + 52) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 52) & 8) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v3 = *((unsigned int *)this + 12);
  if ((*((unsigned char *)this + 52) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v4 = *((unsigned int *)this + 10);
  return *(void *)&v2 ^ v1 ^ v3 ^ v4 ^ PBHashBytes();
}

double CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(CMMsl::AccessoryWakeDebug *this)
{
  *(void *)this = off_1003A4640;
  *((_DWORD *)this + 48) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A4640;
  *((_DWORD *)this + 48) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

void CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug(CMMsl::AccessoryWakeDebug *this)
{
  *(void *)this = off_1003A4640;
  double v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug(this);

  operator delete();
}

CMMsl::AccessoryWakeDebug *CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(CMMsl::AccessoryWakeDebug *this, const CMMsl::AccessoryWakeDebug *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = off_1003A4640;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 48) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  if (*((_WORD *)a2 + 96))
  {
    uint64_t v5 = *((void *)a2 + 19);
    *((_WORD *)this + 96) = 1;
    *((void *)this + 19) = v5;
  }
  if (this != a2)
  {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_100024308((char *)this + 56, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x80) != 0)
  {
    int v9 = *((_DWORD *)a2 + 46);
    *((_WORD *)this + 96) |= 0x80u;
    *((_DWORD *)this + 46) = v9;
    __int16 v6 = *((_WORD *)a2 + 96);
    if ((v6 & 0x40) == 0)
    {
LABEL_7:
      if ((v6 & 0x100) == 0) {
        goto LABEL_8;
      }
      goto LABEL_19;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  int v10 = *((_DWORD *)a2 + 45);
  *((_WORD *)this + 96) |= 0x40u;
  *((_DWORD *)this + 45) = v10;
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_8:
    if ((v6 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v11 = *((_DWORD *)a2 + 47);
  *((_WORD *)this + 96) |= 0x100u;
  *((_DWORD *)this + 47) = v11;
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_9:
    if ((v6 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v12 = *((_DWORD *)a2 + 41);
  *((_WORD *)this + 96) |= 4u;
  *((_DWORD *)this + 41) = v12;
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_10:
    if ((v6 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v13 = *((_DWORD *)a2 + 42);
  *((_WORD *)this + 96) |= 8u;
  *((_DWORD *)this + 42) = v13;
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_11:
    if ((v6 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v14 = *((_DWORD *)a2 + 44);
  *((_WORD *)this + 96) |= 0x20u;
  *((_DWORD *)this + 44) = v14;
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_12:
    if ((v6 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_23:
  int v15 = *((_DWORD *)a2 + 43);
  *((_WORD *)this + 96) |= 0x10u;
  *((_DWORD *)this + 43) = v15;
  if ((*((_WORD *)a2 + 96) & 2) != 0)
  {
LABEL_13:
    int v7 = *((_DWORD *)a2 + 40);
    *((_WORD *)this + 96) |= 2u;
    *((_DWORD *)this + 40) = v7;
  }
LABEL_14:
  if (this != a2)
  {
    sub_100024308((char *)this + 104, *((char **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
    sub_100024308((char *)this + 128, *((char **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::AccessoryWakeDebug::operator=(CMMsl *a1, const CMMsl::AccessoryWakeDebug *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryWakeDebug::AccessoryWakeDebug((CMMsl::AccessoryWakeDebug *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryWakeDebug *)v5, v3);
    CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug((CMMsl::AccessoryWakeDebug *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryWakeDebug *a2, CMMsl::AccessoryWakeDebug *a3)
{
  int v3 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v3;
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v11;
  uint64_t v12 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v12;
  uint64_t v13 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v13;
  uint64_t v14 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v14;
  uint64_t v15 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v15;
  uint64_t v16 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v16;
  LODWORD(v4) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v4;
  LODWORD(v16) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v16;
  LODWORD(v16) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v16;
  LODWORD(v4) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v4;
  LODWORD(v4) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v4;
  LODWORD(v16) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v16;
  LODWORD(v4) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v4;
  float result = *((float *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((float *)a2 + 40) = result;
  uint64_t v18 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v18;
  uint64_t v19 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v19;
  uint64_t v20 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v20;
  uint64_t v21 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v21;
  uint64_t v22 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v22;
  uint64_t v23 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v23;
  return result;
}

uint64_t CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4640;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  uint64_t v6 = a1 + 128;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v7 = a1 + 104;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v8 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a2 + 192) = 0;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  sub_100274A30(v5, (__n128 *)(a2 + 80));
  sub_100274A30(v8, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  sub_100274A30(v7, (__n128 *)(a2 + 104));
  sub_100274A30(v6, (__n128 *)(a2 + 128));
  return a1;
}

CMMsl *CMMsl::AccessoryWakeDebug::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccessoryWakeDebug::AccessoryWakeDebug((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryWakeDebug *)v5, v3);
    CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug((CMMsl::AccessoryWakeDebug *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryWakeDebug::formatText(CMMsl::AccessoryWakeDebug *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "accelDecimated", v7);
  }
  if ((*((_WORD *)this + 96) & 2) != 0) {
    PB::TextFormatter::format(a2, "accelFrontVariance", *((float *)this + 40));
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "accelMean", v10);
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "accelNormAutocorr", v13);
  }
  __int16 v14 = *((_WORD *)this + 96);
  if ((v14 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "accelNormMean", *((float *)this + 41));
    __int16 v14 = *((_WORD *)this + 96);
  }
  if ((v14 & 8) != 0) {
    PB::TextFormatter::format(a2, "accelNormVariance", *((float *)this + 42));
  }
  uint64_t v15 = (float *)*((void *)this + 10);
  uint64_t v16 = (float *)*((void *)this + 11);
  while (v15 != v16)
  {
    float v17 = *v15++;
    PB::TextFormatter::format(a2, "accelVariance", v17);
  }
  __int16 v18 = *((_WORD *)this + 96);
  if ((v18 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "currentAngleDelta", *((float *)this + 43));
    __int16 v18 = *((_WORD *)this + 96);
    if ((v18 & 0x20) == 0)
    {
LABEL_17:
      if ((v18 & 0x40) == 0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_17;
  }
  PB::TextFormatter::format(a2, "currentMotionState", *((_DWORD *)this + 44));
  if ((*((_WORD *)this + 96) & 0x40) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(a2, "lagAtMaxAutocorr", *((_DWORD *)this + 45));
LABEL_19:
  uint64_t v19 = (float *)*((void *)this + 13);
  uint64_t v20 = (float *)*((void *)this + 14);
  while (v19 != v20)
  {
    float v21 = *v19++;
    PB::TextFormatter::format(a2, "lastBaseline", v21);
  }
  __int16 v22 = *((_WORD *)this + 96);
  if ((v22 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "maxAutocorr", *((float *)this + 46));
    __int16 v22 = *((_WORD *)this + 96);
  }
  if (v22) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 19));
  }
  uint64_t v23 = (float *)*((void *)this + 16);
  uint64_t v24 = (float *)*((void *)this + 17);
  while (v23 != v24)
  {
    float v25 = *v23++;
    PB::TextFormatter::format(a2, "walkingBaseline", v25);
  }
  if ((*((_WORD *)this + 96) & 0x100) != 0) {
    PB::TextFormatter::format(a2, "widthAtMaxAutocorr", *((_DWORD *)this + 47));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryWakeDebug::readFrom(CMMsl::AccessoryWakeDebug *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v221 = (char *)this + 144;
    int v222 = (void **)((char *)this + 104);
    unint64_t v223 = (void **)((char *)this + 128);
    uint64_t v8 = (void **)((char *)this + 56);
    v219 = (char *)this + 72;
    v220 = (char *)this + 120;
    uint64_t v9 = (void **)((char *)this + 80);
    float v10 = (void **)((char *)this + 32);
    uint64_t v217 = (char *)this + 48;
    unint64_t v218 = (char *)this + 96;
    uint64_t v11 = (void **)((char *)this + 8);
    unint64_t v216 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_WORD *)this + 96) |= 1u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_347;
          }
          *((void *)this + 19) = *(void *)(*(void *)a2 + v25);
          uint64_t v26 = *((void *)a2 + 1) + 8;
          goto LABEL_350;
        case 2u:
          if (v24 != 2)
          {
            unsigned int v141 = (char *)*((void *)this + 2);
            unint64_t v140 = *((void *)this + 3);
            if ((unint64_t)v141 >= v140)
            {
              uint64_t v165 = (char *)*v11;
              uint64_t v166 = (v141 - (unsigned char *)*v11) >> 2;
              unint64_t v167 = v166 + 1;
              if ((unint64_t)(v166 + 1) >> 62) {
LABEL_366:
              }
                sub_10000EE98();
              uint64_t v168 = v140 - (void)v165;
              if (v168 >> 1 > v167) {
                unint64_t v167 = v168 >> 1;
              }
              if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v169 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v169 = v167;
              }
              if (v169)
              {
                unint64_t v170 = (char *)sub_100024458((uint64_t)v216, v169);
                uint64_t v165 = (char *)*((void *)this + 1);
                unsigned int v141 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v170 = 0;
              }
              unint64_t v201 = &v170[4 * v166];
              *(_DWORD *)unint64_t v201 = 0;
              uint64_t v142 = v201 + 4;
              while (v141 != v165)
              {
                int v202 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v201 - 1) = v202;
                v201 -= 4;
              }
              *((void *)this + 1) = v201;
              *((void *)this + 2) = v142;
              *((void *)this + 3) = &v170[4 * v169];
              if (v165) {
                operator delete(v165);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v141 = 0;
              uint64_t v142 = v141 + 4;
            }
            *((void *)this + 2) = v142;
            goto LABEL_345;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v27 = *((void *)a2 + 1);
          unint64_t v28 = *((void *)a2 + 2);
          while (v27 < v28 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v30 = (char *)*((void *)this + 2);
            unint64_t v29 = *((void *)this + 3);
            if ((unint64_t)v30 >= v29)
            {
              unint64_t v32 = (char *)*v11;
              uint64_t v33 = (v30 - (unsigned char *)*v11) >> 2;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62) {
                goto LABEL_366;
              }
              uint64_t v35 = v29 - (void)v32;
              if (v35 >> 1 > v34) {
                unint64_t v34 = v35 >> 1;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                unint64_t v37 = (char *)sub_100024458((uint64_t)v216, v36);
                unint64_t v32 = (char *)*((void *)this + 1);
                unint64_t v30 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v37 = 0;
              }
              char v38 = &v37[4 * v33];
              *(_DWORD *)char v38 = 0;
              unint64_t v31 = v38 + 4;
              while (v30 != v32)
              {
                int v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *((void *)this + 1) = v38;
              *((void *)this + 2) = v31;
              *((void *)this + 3) = &v37[4 * v36];
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v30 = 0;
              unint64_t v31 = v30 + 4;
            }
            *((void *)this + 2) = v31;
            unint64_t v40 = *((void *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2)) {
              goto LABEL_208;
            }
            *(v31 - 1) = *(_DWORD *)(*(void *)a2 + v40);
            unint64_t v28 = *((void *)a2 + 2);
            unint64_t v27 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v27;
          }
          goto LABEL_209;
        case 3u:
          if (v24 != 2)
          {
            char v144 = (char *)*((void *)this + 5);
            unint64_t v143 = *((void *)this + 6);
            if ((unint64_t)v144 >= v143)
            {
              uint64_t v171 = (char *)*v10;
              uint64_t v172 = (v144 - (unsigned char *)*v10) >> 2;
              unint64_t v173 = v172 + 1;
              if ((unint64_t)(v172 + 1) >> 62) {
LABEL_361:
              }
                sub_10000EE98();
              uint64_t v174 = v143 - (void)v171;
              if (v174 >> 1 > v173) {
                unint64_t v173 = v174 >> 1;
              }
              if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v175 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v175 = v173;
              }
              if (v175)
              {
                int v176 = (char *)sub_100024458((uint64_t)v217, v175);
                uint64_t v171 = (char *)*((void *)this + 4);
                char v144 = (char *)*((void *)this + 5);
              }
              else
              {
                int v176 = 0;
              }
              v203 = &v176[4 * v172];
              *(_DWORD *)v203 = 0;
              uint64_t v142 = v203 + 4;
              while (v144 != v171)
              {
                int v204 = *((_DWORD *)v144 - 1);
                v144 -= 4;
                *((_DWORD *)v203 - 1) = v204;
                v203 -= 4;
              }
              *((void *)this + 4) = v203;
              *((void *)this + 5) = v142;
              *((void *)this + 6) = &v176[4 * v175];
              if (v171) {
                operator delete(v171);
              }
            }
            else
            {
              *(_DWORD *)char v144 = 0;
              uint64_t v142 = v144 + 4;
            }
            *((void *)this + 5) = v142;
            goto LABEL_345;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          while (v41 < v42 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v44 = (char *)*((void *)this + 5);
            unint64_t v43 = *((void *)this + 6);
            if ((unint64_t)v44 >= v43)
            {
              char v46 = (char *)*v10;
              uint64_t v47 = (v44 - (unsigned char *)*v10) >> 2;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62) {
                goto LABEL_361;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 1 > v48) {
                unint64_t v48 = v49 >> 1;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                uint64_t v51 = (char *)sub_100024458((uint64_t)v217, v50);
                char v46 = (char *)*((void *)this + 4);
                uint64_t v44 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v51 = 0;
              }
              unint64_t v52 = &v51[4 * v47];
              *(_DWORD *)unint64_t v52 = 0;
              unint64_t v45 = v52 + 4;
              while (v44 != v46)
              {
                int v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((void *)this + 4) = v52;
              *((void *)this + 5) = v45;
              *((void *)this + 6) = &v51[4 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v44 = 0;
              unint64_t v45 = v44 + 4;
            }
            *((void *)this + 5) = v45;
            unint64_t v54 = *((void *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2)) {
              goto LABEL_208;
            }
            *(v45 - 1) = *(_DWORD *)(*(void *)a2 + v54);
            unint64_t v42 = *((void *)a2 + 2);
            unint64_t v41 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v41;
          }
          goto LABEL_209;
        case 4u:
          if (v24 != 2)
          {
            unint64_t v146 = (char *)*((void *)this + 11);
            unint64_t v145 = *((void *)this + 12);
            if ((unint64_t)v146 >= v145)
            {
              unint64_t v177 = (char *)*v9;
              uint64_t v178 = (v146 - (unsigned char *)*v9) >> 2;
              unint64_t v179 = v178 + 1;
              if ((unint64_t)(v178 + 1) >> 62) {
LABEL_362:
              }
                sub_10000EE98();
              uint64_t v180 = v145 - (void)v177;
              if (v180 >> 1 > v179) {
                unint64_t v179 = v180 >> 1;
              }
              if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v181 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v181 = v179;
              }
              if (v181)
              {
                unsigned int v182 = (char *)sub_100024458((uint64_t)v218, v181);
                unint64_t v177 = (char *)*((void *)this + 10);
                unint64_t v146 = (char *)*((void *)this + 11);
              }
              else
              {
                unsigned int v182 = 0;
              }
              unsigned int v205 = &v182[4 * v178];
              *(_DWORD *)unsigned int v205 = 0;
              uint64_t v142 = v205 + 4;
              while (v146 != v177)
              {
                int v206 = *((_DWORD *)v146 - 1);
                v146 -= 4;
                *((_DWORD *)v205 - 1) = v206;
                v205 -= 4;
              }
              *((void *)this + 10) = v205;
              *((void *)this + 11) = v142;
              *((void *)this + 12) = &v182[4 * v181];
              if (v177) {
                operator delete(v177);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v146 = 0;
              uint64_t v142 = v146 + 4;
            }
            *((void *)this + 11) = v142;
            goto LABEL_345;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v55 = *((void *)a2 + 1);
          unint64_t v56 = *((void *)a2 + 2);
          while (v55 < v56 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v58 = (char *)*((void *)this + 11);
            unint64_t v57 = *((void *)this + 12);
            if ((unint64_t)v58 >= v57)
            {
              BOOL v60 = (char *)*v9;
              uint64_t v61 = (v58 - (unsigned char *)*v9) >> 2;
              unint64_t v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 62) {
                goto LABEL_362;
              }
              uint64_t v63 = v57 - (void)v60;
              if (v63 >> 1 > v62) {
                unint64_t v62 = v63 >> 1;
              }
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v62;
              }
              if (v64)
              {
                char v65 = (char *)sub_100024458((uint64_t)v218, v64);
                BOOL v60 = (char *)*((void *)this + 10);
                unint64_t v58 = (char *)*((void *)this + 11);
              }
              else
              {
                char v65 = 0;
              }
              char v66 = &v65[4 * v61];
              *(_DWORD *)char v66 = 0;
              uint64_t v59 = v66 + 4;
              while (v58 != v60)
              {
                int v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              *((void *)this + 10) = v66;
              *((void *)this + 11) = v59;
              *((void *)this + 12) = &v65[4 * v64];
              if (v60) {
                operator delete(v60);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v58 = 0;
              uint64_t v59 = v58 + 4;
            }
            *((void *)this + 11) = v59;
            unint64_t v68 = *((void *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)a2 + 2)) {
              goto LABEL_208;
            }
            *(v59 - 1) = *(_DWORD *)(*(void *)a2 + v68);
            unint64_t v56 = *((void *)a2 + 2);
            unint64_t v55 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v55;
          }
          goto LABEL_209;
        case 5u:
          if (v24 != 2)
          {
            uint64_t v148 = (char *)*((void *)this + 8);
            unint64_t v147 = *((void *)this + 9);
            if ((unint64_t)v148 >= v147)
            {
              uint64_t v183 = (char *)*v8;
              uint64_t v184 = (v148 - (unsigned char *)*v8) >> 2;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 62) {
LABEL_363:
              }
                sub_10000EE98();
              uint64_t v186 = v147 - (void)v183;
              if (v186 >> 1 > v185) {
                unint64_t v185 = v186 >> 1;
              }
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v187 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v187 = v185;
              }
              if (v187)
              {
                uint64_t v188 = (char *)sub_100024458((uint64_t)v219, v187);
                uint64_t v183 = (char *)*((void *)this + 7);
                uint64_t v148 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v188 = 0;
              }
              unint64_t v207 = &v188[4 * v184];
              *(_DWORD *)unint64_t v207 = 0;
              uint64_t v142 = v207 + 4;
              while (v148 != v183)
              {
                int v208 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *((_DWORD *)v207 - 1) = v208;
                v207 -= 4;
              }
              *((void *)this + 7) = v207;
              *((void *)this + 8) = v142;
              *((void *)this + 9) = &v188[4 * v187];
              if (v183) {
                operator delete(v183);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v148 = 0;
              uint64_t v142 = v148 + 4;
            }
            *((void *)this + 8) = v142;
            goto LABEL_345;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v69 = *((void *)a2 + 1);
          unint64_t v70 = *((void *)a2 + 2);
          while (v69 < v70 && !*((unsigned char *)a2 + 24))
          {
            unsigned int v72 = (char *)*((void *)this + 8);
            unint64_t v71 = *((void *)this + 9);
            if ((unint64_t)v72 >= v71)
            {
              char v74 = (char *)*v8;
              uint64_t v75 = (v72 - (unsigned char *)*v8) >> 2;
              unint64_t v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62) {
                goto LABEL_363;
              }
              uint64_t v77 = v71 - (void)v74;
              if (v77 >> 1 > v76) {
                unint64_t v76 = v77 >> 1;
              }
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v78 = v76;
              }
              if (v78)
              {
                char v79 = (char *)sub_100024458((uint64_t)v219, v78);
                char v74 = (char *)*((void *)this + 7);
                unsigned int v72 = (char *)*((void *)this + 8);
              }
              else
              {
                char v79 = 0;
              }
              unsigned int v80 = &v79[4 * v75];
              *(_DWORD *)unsigned int v80 = 0;
              unint64_t v73 = v80 + 4;
              while (v72 != v74)
              {
                int v81 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v80 - 1) = v81;
                v80 -= 4;
              }
              *((void *)this + 7) = v80;
              *((void *)this + 8) = v73;
              *((void *)this + 9) = &v79[4 * v78];
              if (v74) {
                operator delete(v74);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v72 = 0;
              unint64_t v73 = v72 + 4;
            }
            *((void *)this + 8) = v73;
            unint64_t v82 = *((void *)a2 + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)a2 + 2)) {
              goto LABEL_208;
            }
            *(v73 - 1) = *(_DWORD *)(*(void *)a2 + v82);
            unint64_t v70 = *((void *)a2 + 2);
            unint64_t v69 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v69;
          }
          goto LABEL_209;
        case 6u:
          *((_WORD *)this + 96) |= 0x80u;
          unint64_t v83 = *((void *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
            goto LABEL_347;
          }
          *((_DWORD *)this + 46) = *(_DWORD *)(*(void *)a2 + v83);
          goto LABEL_349;
        case 7u:
          *((_WORD *)this + 96) |= 0x40u;
          unint64_t v84 = *((void *)a2 + 1);
          unint64_t v85 = *((void *)a2 + 2);
          uint64_t v86 = *(void *)a2;
          if (v84 <= 0xFFFFFFFFFFFFFFF5 && v84 + 10 <= v85)
          {
            char v87 = 0;
            unsigned int v88 = 0;
            uint64_t v89 = 0;
            do
            {
              unint64_t v90 = v84 + 1;
              *((void *)a2 + 1) = v84 + 1;
              char v91 = *(unsigned char *)(v86 + v84);
              v89 |= (unint64_t)(v91 & 0x7F) << v87;
              if ((v91 & 0x80) == 0) {
                goto LABEL_296;
              }
              v87 += 7;
              unint64_t v84 = v90;
              BOOL v18 = v88++ > 8;
            }
            while (!v18);
LABEL_224:
            LODWORD(v89) = 0;
            goto LABEL_296;
          }
          char v149 = 0;
          unsigned int v150 = 0;
          uint64_t v89 = 0;
          if (v85 <= v84) {
            unint64_t v85 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v85 == v84)
            {
              LODWORD(v89) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v151 = v84 + 1;
              char v152 = *(unsigned char *)(v86 + v84);
              *((void *)a2 + 1) = v151;
              v89 |= (unint64_t)(v152 & 0x7F) << v149;
              if (v152 < 0)
              {
                v149 += 7;
                unint64_t v84 = v151;
                BOOL v18 = v150++ > 8;
                if (v18) {
                  goto LABEL_224;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v89) = 0;
              }
            }
            break;
          }
LABEL_296:
          *((_DWORD *)this + 45) = v89;
          goto LABEL_351;
        case 8u:
          *((_WORD *)this + 96) |= 0x100u;
          unint64_t v92 = *((void *)a2 + 1);
          unint64_t v93 = *((void *)a2 + 2);
          uint64_t v94 = *(void *)a2;
          if (v92 <= 0xFFFFFFFFFFFFFFF5 && v92 + 10 <= v93)
          {
            char v95 = 0;
            unsigned int v96 = 0;
            uint64_t v97 = 0;
            do
            {
              unint64_t v98 = v92 + 1;
              *((void *)a2 + 1) = v92 + 1;
              char v99 = *(unsigned char *)(v94 + v92);
              v97 |= (unint64_t)(v99 & 0x7F) << v95;
              if ((v99 & 0x80) == 0) {
                goto LABEL_299;
              }
              v95 += 7;
              unint64_t v92 = v98;
              BOOL v18 = v96++ > 8;
            }
            while (!v18);
LABEL_231:
            LODWORD(v97) = 0;
            goto LABEL_299;
          }
          char v153 = 0;
          unsigned int v154 = 0;
          uint64_t v97 = 0;
          if (v93 <= v92) {
            unint64_t v93 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v93 == v92)
            {
              LODWORD(v97) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v155 = v92 + 1;
              char v156 = *(unsigned char *)(v94 + v92);
              *((void *)a2 + 1) = v155;
              v97 |= (unint64_t)(v156 & 0x7F) << v153;
              if (v156 < 0)
              {
                v153 += 7;
                unint64_t v92 = v155;
                BOOL v18 = v154++ > 8;
                if (v18) {
                  goto LABEL_231;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v97) = 0;
              }
            }
            break;
          }
LABEL_299:
          *((_DWORD *)this + 47) = v97;
          goto LABEL_351;
        case 9u:
          *((_WORD *)this + 96) |= 4u;
          unint64_t v100 = *((void *)a2 + 1);
          if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((void *)a2 + 2)) {
            goto LABEL_347;
          }
          *((_DWORD *)this + 41) = *(_DWORD *)(*(void *)a2 + v100);
          goto LABEL_349;
        case 0xAu:
          *((_WORD *)this + 96) |= 8u;
          unint64_t v101 = *((void *)a2 + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((void *)a2 + 2)) {
            goto LABEL_347;
          }
          *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v101);
          goto LABEL_349;
        case 0xBu:
          *((_WORD *)this + 96) |= 0x20u;
          unint64_t v102 = *((void *)a2 + 1);
          unint64_t v103 = *((void *)a2 + 2);
          uint64_t v104 = *(void *)a2;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            char v105 = 0;
            unsigned int v106 = 0;
            uint64_t v107 = 0;
            do
            {
              unint64_t v108 = v102 + 1;
              *((void *)a2 + 1) = v102 + 1;
              char v109 = *(unsigned char *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0) {
                goto LABEL_302;
              }
              v105 += 7;
              unint64_t v102 = v108;
              BOOL v18 = v106++ > 8;
            }
            while (!v18);
LABEL_238:
            LODWORD(v107) = 0;
            goto LABEL_302;
          }
          char v157 = 0;
          unsigned int v158 = 0;
          uint64_t v107 = 0;
          if (v103 <= v102) {
            unint64_t v103 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v103 == v102)
            {
              LODWORD(v107) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v159 = v102 + 1;
              char v160 = *(unsigned char *)(v104 + v102);
              *((void *)a2 + 1) = v159;
              v107 |= (unint64_t)(v160 & 0x7F) << v157;
              if (v160 < 0)
              {
                v157 += 7;
                unint64_t v102 = v159;
                BOOL v18 = v158++ > 8;
                if (v18) {
                  goto LABEL_238;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v107) = 0;
              }
            }
            break;
          }
LABEL_302:
          *((_DWORD *)this + 44) = v107;
          goto LABEL_351;
        case 0xCu:
          *((_WORD *)this + 96) |= 0x10u;
          unint64_t v110 = *((void *)a2 + 1);
          if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((void *)a2 + 2)) {
            goto LABEL_347;
          }
          *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v110);
          goto LABEL_349;
        case 0xDu:
          *((_WORD *)this + 96) |= 2u;
          unint64_t v111 = *((void *)a2 + 1);
          if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)a2 + 2)) {
            goto LABEL_347;
          }
          *((_DWORD *)this + 40) = *(_DWORD *)(*(void *)a2 + v111);
          goto LABEL_349;
        case 0xEu:
          if (v24 != 2)
          {
            char v162 = (char *)*((void *)this + 14);
            unint64_t v161 = *((void *)this + 15);
            if ((unint64_t)v162 >= v161)
            {
              unint64_t v189 = (char *)*v222;
              uint64_t v190 = (v162 - (unsigned char *)*v222) >> 2;
              unint64_t v191 = v190 + 1;
              if ((unint64_t)(v190 + 1) >> 62) {
LABEL_364:
              }
                sub_10000EE98();
              uint64_t v192 = v161 - (void)v189;
              if (v192 >> 1 > v191) {
                unint64_t v191 = v192 >> 1;
              }
              if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v193 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v193 = v191;
              }
              if (v193)
              {
                uint64_t v194 = (char *)sub_100024458((uint64_t)v220, v193);
                unint64_t v189 = (char *)*((void *)this + 13);
                char v162 = (char *)*((void *)this + 14);
              }
              else
              {
                uint64_t v194 = 0;
              }
              char v209 = &v194[4 * v190];
              *(_DWORD *)char v209 = 0;
              uint64_t v142 = v209 + 4;
              while (v162 != v189)
              {
                int v210 = *((_DWORD *)v162 - 1);
                v162 -= 4;
                *((_DWORD *)v209 - 1) = v210;
                v209 -= 4;
              }
              *((void *)this + 13) = v209;
              *((void *)this + 14) = v142;
              *((void *)this + 15) = &v194[4 * v193];
              if (v189) {
                operator delete(v189);
              }
            }
            else
            {
              *(_DWORD *)char v162 = 0;
              uint64_t v142 = v162 + 4;
            }
            *((void *)this + 14) = v142;
            goto LABEL_345;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v112 = *((void *)a2 + 1);
          unint64_t v113 = *((void *)a2 + 2);
          while (v112 < v113 && !*((unsigned char *)a2 + 24))
          {
            unsigned int v115 = (char *)*((void *)this + 14);
            unint64_t v114 = *((void *)this + 15);
            if ((unint64_t)v115 >= v114)
            {
              char v117 = (char *)*v222;
              uint64_t v118 = (v115 - (unsigned char *)*v222) >> 2;
              unint64_t v119 = v118 + 1;
              if ((unint64_t)(v118 + 1) >> 62) {
                goto LABEL_364;
              }
              uint64_t v120 = v114 - (void)v117;
              if (v120 >> 1 > v119) {
                unint64_t v119 = v120 >> 1;
              }
              if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v121 = v119;
              }
              if (v121)
              {
                char v122 = (char *)sub_100024458((uint64_t)v220, v121);
                char v117 = (char *)*((void *)this + 13);
                unsigned int v115 = (char *)*((void *)this + 14);
              }
              else
              {
                char v122 = 0;
              }
              unsigned int v123 = &v122[4 * v118];
              *(_DWORD *)unsigned int v123 = 0;
              unint64_t v116 = v123 + 4;
              while (v115 != v117)
              {
                int v124 = *((_DWORD *)v115 - 1);
                v115 -= 4;
                *((_DWORD *)v123 - 1) = v124;
                v123 -= 4;
              }
              *((void *)this + 13) = v123;
              *((void *)this + 14) = v116;
              *((void *)this + 15) = &v122[4 * v121];
              if (v117) {
                operator delete(v117);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v115 = 0;
              unint64_t v116 = v115 + 4;
            }
            *((void *)this + 14) = v116;
            unint64_t v125 = *((void *)a2 + 1);
            if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((void *)a2 + 2)) {
              goto LABEL_208;
            }
            *(v116 - 1) = *(_DWORD *)(*(void *)a2 + v125);
            unint64_t v113 = *((void *)a2 + 2);
            unint64_t v112 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v112;
          }
          goto LABEL_209;
        case 0xFu:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v126 = *((void *)a2 + 1);
            unint64_t v127 = *((void *)a2 + 2);
            while (v126 < v127 && !*((unsigned char *)a2 + 24))
            {
              char v129 = (char *)*((void *)this + 17);
              unint64_t v128 = *((void *)this + 18);
              if ((unint64_t)v129 >= v128)
              {
                uint64_t v131 = (char *)*v223;
                uint64_t v132 = (v129 - (unsigned char *)*v223) >> 2;
                unint64_t v133 = v132 + 1;
                if ((unint64_t)(v132 + 1) >> 62) {
                  goto LABEL_365;
                }
                uint64_t v134 = v128 - (void)v131;
                if (v134 >> 1 > v133) {
                  unint64_t v133 = v134 >> 1;
                }
                if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v135 = v133;
                }
                if (v135)
                {
                  unsigned int v136 = (char *)sub_100024458((uint64_t)v221, v135);
                  uint64_t v131 = (char *)*((void *)this + 16);
                  char v129 = (char *)*((void *)this + 17);
                }
                else
                {
                  unsigned int v136 = 0;
                }
                uint64_t v137 = &v136[4 * v132];
                *(_DWORD *)uint64_t v137 = 0;
                int v130 = v137 + 4;
                while (v129 != v131)
                {
                  int v138 = *((_DWORD *)v129 - 1);
                  v129 -= 4;
                  *((_DWORD *)v137 - 1) = v138;
                  v137 -= 4;
                }
                *((void *)this + 16) = v137;
                *((void *)this + 17) = v130;
                *((void *)this + 18) = &v136[4 * v135];
                if (v131) {
                  operator delete(v131);
                }
              }
              else
              {
                *(_DWORD *)char v129 = 0;
                int v130 = v129 + 4;
              }
              *((void *)this + 17) = v130;
              unint64_t v139 = *((void *)a2 + 1);
              if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((void *)a2 + 2))
              {
LABEL_208:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v130 - 1) = *(_DWORD *)(*(void *)a2 + v139);
              unint64_t v127 = *((void *)a2 + 2);
              unint64_t v126 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v126;
            }
LABEL_209:
            PB::Reader::recallMark();
          }
          else
          {
            unsigned int v164 = (char *)*((void *)this + 17);
            unint64_t v163 = *((void *)this + 18);
            if ((unint64_t)v164 >= v163)
            {
              unint64_t v195 = (char *)*v223;
              uint64_t v196 = (v164 - (unsigned char *)*v223) >> 2;
              unint64_t v197 = v196 + 1;
              if ((unint64_t)(v196 + 1) >> 62) {
LABEL_365:
              }
                sub_10000EE98();
              uint64_t v198 = v163 - (void)v195;
              if (v198 >> 1 > v197) {
                unint64_t v197 = v198 >> 1;
              }
              if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v199 = v197;
              }
              if (v199)
              {
                unint64_t v200 = (char *)sub_100024458((uint64_t)v221, v199);
                unint64_t v195 = (char *)*((void *)this + 16);
                unsigned int v164 = (char *)*((void *)this + 17);
              }
              else
              {
                unint64_t v200 = 0;
              }
              uint64_t v211 = &v200[4 * v196];
              *(_DWORD *)uint64_t v211 = 0;
              uint64_t v142 = v211 + 4;
              while (v164 != v195)
              {
                int v212 = *((_DWORD *)v164 - 1);
                v164 -= 4;
                *((_DWORD *)v211 - 1) = v212;
                v211 -= 4;
              }
              *((void *)this + 16) = v211;
              *((void *)this + 17) = v142;
              *((void *)this + 18) = &v200[4 * v199];
              if (v195) {
                operator delete(v195);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v164 = 0;
              uint64_t v142 = v164 + 4;
            }
            *((void *)this + 17) = v142;
LABEL_345:
            unint64_t v213 = *((void *)a2 + 1);
            if (v213 <= 0xFFFFFFFFFFFFFFFBLL && v213 + 4 <= *((void *)a2 + 2))
            {
              *(v142 - 1) = *(_DWORD *)(*(void *)a2 + v213);
LABEL_349:
              uint64_t v26 = *((void *)a2 + 1) + 4;
LABEL_350:
              *((void *)a2 + 1) = v26;
            }
            else
            {
LABEL_347:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_351:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_351;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryWakeDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(_WORD *)(this + 192)) {
    this = PB::Writer::write(a2, *(double *)(this + 152), 1u);
  }
  int v4 = *(float **)(v3 + 8);
  uint64_t v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  float v10 = *(float **)(v3 + 80);
  uint64_t v11 = *(float **)(v3 + 88);
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  char v13 = *(float **)(v3 + 56);
  unsigned int v14 = *(float **)(v3 + 64);
  while (v13 != v14)
  {
    float v15 = *v13++;
    this = PB::Writer::write(a2, v15, 5u);
  }
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 184), 6u);
    __int16 v16 = *(_WORD *)(v3 + 192);
    if ((v16 & 0x40) == 0)
    {
LABEL_17:
      if ((v16 & 0x100) == 0) {
        goto LABEL_18;
      }
      goto LABEL_33;
    }
  }
  else if ((v16 & 0x40) == 0)
  {
    goto LABEL_17;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 180), 7u);
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x100) == 0)
  {
LABEL_18:
    if ((v16 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 188), 8u);
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 4) == 0)
  {
LABEL_19:
    if ((v16 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 9u);
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 8) == 0)
  {
LABEL_20:
    if ((v16 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0xAu);
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x20) == 0)
  {
LABEL_21:
    if ((v16 & 0x10) == 0) {
      goto LABEL_22;
    }
LABEL_37:
    this = PB::Writer::write(a2, *(float *)(v3 + 172), 0xCu);
    if ((*(_WORD *)(v3 + 192) & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_36:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 176), 0xBu);
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x10) != 0) {
    goto LABEL_37;
  }
LABEL_22:
  if ((v16 & 2) != 0) {
LABEL_23:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 160), 0xDu);
LABEL_24:
  char v17 = *(float **)(v3 + 104);
  BOOL v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    float v19 = *v17++;
    this = PB::Writer::write(a2, v19, 0xEu);
  }
  unint64_t v21 = *(float **)(v3 + 128);
  unsigned int v20 = *(float **)(v3 + 136);
  while (v21 != v20)
  {
    float v22 = *v21++;
    this = PB::Writer::write(a2, v22, 0xFu);
  }
  return this;
}

BOOL CMMsl::AccessoryWakeDebug::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 192);
  __int16 v3 = *(_WORD *)(a2 + 192);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  uint64_t v5 = *(float **)(a1 + 8);
  int v4 = *(float **)(a1 + 16);
  float v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 16) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  uint64_t v8 = *(float **)(a1 + 32);
  float v7 = *(float **)(a1 + 40);
  float v9 = *(float **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 40) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  uint64_t v11 = *(float **)(a1 + 80);
  float v10 = *(float **)(a1 + 88);
  float v12 = *(float **)(a2 + 80);
  if ((char *)v10 - (char *)v11 != *(void *)(a2 + 88) - (void)v12) {
    return 0;
  }
  while (v11 != v10)
  {
    if (*v11 != *v12) {
      return 0;
    }
    ++v11;
    ++v12;
  }
  unsigned int v14 = *(float **)(a1 + 56);
  char v13 = *(float **)(a1 + 64);
  float v15 = *(float **)(a2 + 56);
  if ((char *)v13 - (char *)v14 != *(void *)(a2 + 64) - (void)v15) {
    return 0;
  }
  while (v14 != v13)
  {
    if (*v14 != *v15) {
      return 0;
    }
    ++v14;
    ++v15;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x100) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 192) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  char v17 = *(float **)(a1 + 104);
  __int16 v16 = *(float **)(a1 + 112);
  BOOL v18 = *(float **)(a2 + 104);
  if ((char *)v16 - (char *)v17 != *(void *)(a2 + 112) - (void)v18) {
    return 0;
  }
  while (v17 != v16)
  {
    if (*v17 != *v18) {
      return 0;
    }
    ++v17;
    ++v18;
  }
  uint64_t v20 = *(void *)(a1 + 128);
  uint64_t v19 = *(void *)(a1 + 136);
  unint64_t v21 = *(float **)(a2 + 128);
  if (v19 - v20 != *(void *)(a2 + 136) - (void)v21) {
    return 0;
  }
  if (v20 == v19) {
    return 1;
  }
  uint64_t v22 = v20 + 4;
  do
  {
    float v23 = *v21++;
    BOOL result = *(float *)(v22 - 4) == v23;
    BOOL v25 = *(float *)(v22 - 4) != v23 || v22 == v19;
    v22 += 4;
  }
  while (!v25);
  return result;
}

uint64_t CMMsl::AccessoryWakeDebug::hash_value(CMMsl::AccessoryWakeDebug *this)
{
  if (*((_WORD *)this + 96))
  {
    if (*((double *)this + 19) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 19);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  __int16 v7 = *((_WORD *)this + 96);
  if ((v7 & 0x80) != 0)
  {
    float v20 = *((float *)this + 46);
    uint64_t v8 = LODWORD(v20);
    if (v20 == 0.0) {
      uint64_t v8 = 0;
    }
    if ((v7 & 0x40) != 0)
    {
LABEL_8:
      uint64_t v9 = *((int *)this + 45);
      if ((*((_WORD *)this + 96) & 0x100) != 0) {
        goto LABEL_9;
      }
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if ((v7 & 0x40) != 0) {
      goto LABEL_8;
    }
  }
  uint64_t v9 = 0;
  if ((*((_WORD *)this + 96) & 0x100) != 0)
  {
LABEL_9:
    uint64_t v10 = *((int *)this + 47);
    if ((v7 & 4) != 0) {
      goto LABEL_10;
    }
LABEL_28:
    uint64_t v12 = 0;
    if ((v7 & 8) != 0) {
      goto LABEL_13;
    }
LABEL_29:
    uint64_t v14 = 0;
    if ((v7 & 0x20) != 0) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
LABEL_27:
  uint64_t v10 = 0;
  if ((v7 & 4) == 0) {
    goto LABEL_28;
  }
LABEL_10:
  float v11 = *((float *)this + 41);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v7 & 8) == 0) {
    goto LABEL_29;
  }
LABEL_13:
  float v13 = *((float *)this + 42);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v7 & 0x20) != 0)
  {
LABEL_16:
    uint64_t v15 = *((int *)this + 44);
    if ((v7 & 0x10) != 0) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v15 = 0;
  if ((v7 & 0x10) != 0)
  {
LABEL_17:
    float v16 = *((float *)this + 43);
    uint64_t v17 = LODWORD(v16);
    if (v16 == 0.0) {
      uint64_t v17 = 0;
    }
    if ((v7 & 2) != 0) {
      goto LABEL_20;
    }
LABEL_32:
    uint64_t v19 = 0;
    goto LABEL_33;
  }
LABEL_31:
  uint64_t v17 = 0;
  if ((v7 & 2) == 0) {
    goto LABEL_32;
  }
LABEL_20:
  float v18 = *((float *)this + 40);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
LABEL_33:
  uint64_t v21 = v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v9;
  uint64_t v22 = v10 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ PBHashBytes();
  return v21 ^ v22 ^ PBHashBytes();
}

uint64_t CMMsl::AirpodEvent::AirpodEvent(uint64_t this)
{
  *(void *)this = off_1003A4678;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A4678;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::AirpodEvent::~AirpodEvent(CMMsl::AirpodEvent *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::AirpodEvent::AirpodEvent(uint64_t this, const CMMsl::AirpodEvent *a2)
{
  *(void *)this = off_1003A4678;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 24) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 24) = v3 | 2;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t CMMsl::AirpodEvent::operator=(uint64_t a1, const CMMsl::AirpodEvent *a2)
{
  if ((const CMMsl::AirpodEvent *)a1 != a2)
  {
    CMMsl::AirpodEvent::AirpodEvent((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v4 = v10;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v4;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AirpodEvent *a2, CMMsl::AirpodEvent *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)a2 + 2);
  uint64_t v6 = *((void *)this + 2);
  *((double *)this + 2) = result;
  *((void *)a2 + 2) = v6;
  return result;
}

double CMMsl::AirpodEvent::AirpodEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A4678;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A4678;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::AirpodEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v7[0] = off_1003A4678;
    int v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    uint64_t v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::AirpodEvent::formatText(CMMsl::AirpodEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "eventTag", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 5));
  if (*((unsigned char *)this + 24)) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AirpodEvent::readFrom(CMMsl::AirpodEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          unint64_t v2 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 4) = v25;
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_66:
          unint64_t v2 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v2 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v2;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 5) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AirpodEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 24) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 2u);
    if ((*(unsigned char *)(v3 + 24) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 3u);
}

BOOL CMMsl::AirpodEvent::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 2) == 0;
  if ((*(unsigned char *)(a1 + 24) & 2) != 0) {
    return (*(unsigned char *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::AirpodEvent::hash_value(CMMsl::AirpodEvent *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v2 ^ *(void *)&v1 ^ v3;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v3 = *((int *)this + 4);
  return v2 ^ *(void *)&v1 ^ v3;
}

uint64_t CMMsl::Altimeter::Altimeter(uint64_t this)
{
  *(void *)this = off_1003A46B0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A46B0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

void CMMsl::Altimeter::~Altimeter(CMMsl::Altimeter *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::Altimeter::Altimeter(CMMsl::Altimeter *this, const CMMsl::Altimeter *a2)
{
  *(void *)this = off_1003A46B0;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    char v3 = 8;
    *((unsigned char *)this + 40) = 8;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 40) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((unsigned char *)this + 40) = v3;
  *((double *)this + 2) = result;
  if (*((unsigned char *)a2 + 40)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::Altimeter::operator=(uint64_t a1, const CMMsl::Altimeter *a2)
{
  if ((const CMMsl::Altimeter *)a1 != a2)
  {
    CMMsl::Altimeter::Altimeter((CMMsl::Altimeter *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Altimeter *a2, CMMsl::Altimeter *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::Altimeter::Altimeter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A46B0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A46B0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::Altimeter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A46B0;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v11 = *(_DWORD *)(a1 + 40);
    long long v10 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    long long v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::Altimeter::formatText(CMMsl::Altimeter *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "machAbsTimestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "pressure", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "relativeAltitude", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Altimeter::readFrom(CMMsl::Altimeter *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 40) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((unsigned char *)this + 40) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 40) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Altimeter::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
      if ((*(unsigned char *)(v3 + 40) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 4u);
}

BOOL CMMsl::Altimeter::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 1) == 0;
  if (*(unsigned char *)(a1 + 40)) {
    return (*(unsigned char *)(a2 + 40) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::Altimeter::hash_value(CMMsl::Altimeter *this)
{
  if ((*((unsigned char *)this + 40) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 2) != 0)
  {
LABEL_6:
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if (*((unsigned char *)this + 40)) {
      goto LABEL_9;
    }
LABEL_17:
    double v4 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
  }
LABEL_16:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
}

uint64_t CMMsl::AltimeterKF::AltimeterKF(uint64_t this)
{
  *(void *)this = off_1003A46E8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = off_1003A46E8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void CMMsl::AltimeterKF::~AltimeterKF(CMMsl::AltimeterKF *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::AltimeterKF::AltimeterKF(uint64_t this, const CMMsl::AltimeterKF *a2)
{
  *(void *)this = off_1003A46E8;
  *(_DWORD *)(this + 64) = 0;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    int v4 = *((_DWORD *)a2 + 8);
    __int16 v3 = 16;
    *(_WORD *)(this + 64) = 16;
    *(_DWORD *)(this + 32) = v4;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 32) & 0x400) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 14);
    v3 |= 0x400u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 56) = v5;
    __int16 v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 7);
    v3 |= 8u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 28) = v6;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 24) = v7;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v8 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 44) = v8;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v9 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 16) = v9;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v10 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 8) = v10;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v11;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v12 = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v12;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v13 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 40) = v13;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      return this;
    }
LABEL_26:
    char v15 = *((unsigned char *)a2 + 60);
    *(_WORD *)(this + 64) = v3 | 0x800;
    *(unsigned char *)(this + 60) = v15;
    return this;
  }
LABEL_25:
  int v14 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 36) = v14;
  if ((*((_WORD *)a2 + 32) & 0x800) != 0) {
    goto LABEL_26;
  }
  return this;
}

CMMsl *CMMsl::AltimeterKF::operator=(CMMsl *a1, const CMMsl::AltimeterKF *a2)
{
  if (a1 != a2)
  {
    CMMsl::AltimeterKF::AltimeterKF((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AltimeterKF *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AltimeterKF *a2, CMMsl::AltimeterKF *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  int v4 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  int v5 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  int v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  int v8 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  int v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  int v12 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  int v13 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v13;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  LOBYTE(v10) = *((unsigned char *)this + 60);
  *((unsigned char *)this + 60) = *((unsigned char *)a2 + 60);
  *((unsigned char *)a2 + 60) = v10;
  return result;
}

float CMMsl::AltimeterKF::AltimeterKF(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A46E8;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  return result;
}

CMMsl *CMMsl::AltimeterKF::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AltimeterKF::AltimeterKF((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AltimeterKF *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::AltimeterKF::formatText(CMMsl::AltimeterKF *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "accelBiasZ", *((float *)this + 6));
    __int16 v5 = *((_WORD *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x800) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelZ", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "compensate", *((unsigned char *)this + 60));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "height", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "inertialCompOffset", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "inertialCompPressure", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "kfPressure", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "rawPressure", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "rawPressureTemperature", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "rawPressureTimestamp", *((void *)this + 1));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 2));
  if ((*((_WORD *)this + 32) & 0x400) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "verticalSpeed", *((float *)this + 14));
LABEL_14:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AltimeterKF::readFrom(CMMsl::AltimeterKF *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 32) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 2u:
              *((_WORD *)this + 32) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 3u:
              *((_WORD *)this + 32) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 4u:
              *((_WORD *)this + 32) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 5u:
              *((_WORD *)this + 32) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 6u:
              *((_WORD *)this + 32) |= 2u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v35 = 0;
                unsigned int v36 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_89;
                  }
                  unint64_t v37 = v21++;
                  char v38 = *(unsigned char *)(v22 + v37);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  BOOL v14 = v36++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_88:
                    unint64_t v2 = v37 + 1;
                    goto LABEL_89;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_88;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_89;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_89:
              *((void *)this + 2) = v25;
              goto LABEL_95;
            case 7u:
              *((_WORD *)this + 32) |= 1u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_94;
                  }
                  unint64_t v41 = v27++;
                  char v42 = *(unsigned char *)(v28 + v41);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_93:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_93;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_94;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_94:
              *((void *)this + 1) = v31;
LABEL_95:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 8u:
              *((_WORD *)this + 32) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 9u:
              *((_WORD *)this + 32) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 0xAu:
              *((_WORD *)this + 32) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 0xBu:
              *((_WORD *)this + 32) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_84:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_64:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_95;
            case 0xCu:
              *((_WORD *)this + 32) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 60) = v34;
              goto LABEL_95;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_95;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AltimeterKF::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 32), 1u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(this + 64) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 2u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 5u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 6u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 7u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 8u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 9u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xBu);
    if ((*(_WORD *)(v3 + 64) & 0x800) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 0x800) == 0) {
    return this;
  }
LABEL_25:
  char v5 = *(unsigned char *)(v3 + 60);

  return PB::Writer::write(a2, v5, 0xCu);
}

BOOL CMMsl::AltimeterKF::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 64);
  __int16 v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0) {
    return (*(_WORD *)(a2 + 64) & 0x800) != 0 && *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
  }
  return v4;
}

uint64_t CMMsl::AltimeterKF::hash_value(CMMsl::AltimeterKF *this)
{
  __int16 v1 = *((_WORD *)this + 32);
  if ((v1 & 0x10) == 0)
  {
    uint64_t v2 = 0;
    if ((*((_WORD *)this + 32) & 0x400) != 0) {
      goto LABEL_3;
    }
LABEL_33:
    uint64_t v4 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_6;
    }
LABEL_34:
    uint64_t v6 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_9;
    }
LABEL_35:
    uint64_t v8 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_12;
    }
LABEL_36:
    uint64_t v10 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
  float v22 = *((float *)this + 8);
  uint64_t v2 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v2 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x400) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  float v3 = *((float *)this + 14);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_34;
  }
LABEL_6:
  float v5 = *((float *)this + 7);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_35;
  }
LABEL_9:
  float v7 = *((float *)this + 6);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_36;
  }
LABEL_12:
  float v9 = *((float *)this + 11);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 2) != 0)
  {
LABEL_15:
    uint64_t v11 = *((void *)this + 2);
    if (v1) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v11 = 0;
  if (v1)
  {
LABEL_16:
    uint64_t v12 = *((void *)this + 1);
    if ((*((_WORD *)this + 32) & 0x100) != 0) {
      goto LABEL_17;
    }
LABEL_39:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0) {
      goto LABEL_20;
    }
LABEL_40:
    uint64_t v16 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_23;
    }
LABEL_41:
    uint64_t v18 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_26;
    }
    goto LABEL_42;
  }
LABEL_38:
  uint64_t v12 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0) {
    goto LABEL_39;
  }
LABEL_17:
  float v13 = *((float *)this + 12);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x200) == 0) {
    goto LABEL_40;
  }
LABEL_20:
  float v15 = *((float *)this + 13);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_41;
  }
LABEL_23:
  float v17 = *((float *)this + 10);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_26:
    float v19 = *((float *)this + 9);
    uint64_t v20 = LODWORD(v19);
    if (v19 == 0.0) {
      uint64_t v20 = 0;
    }
    if ((*((_WORD *)this + 32) & 0x800) != 0) {
      goto LABEL_29;
    }
LABEL_43:
    uint64_t v21 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21;
  }
LABEL_42:
  uint64_t v20 = 0;
  if ((*((_WORD *)this + 32) & 0x800) == 0) {
    goto LABEL_43;
  }
LABEL_29:
  uint64_t v21 = *((unsigned __int8 *)this + 60);
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21;
}