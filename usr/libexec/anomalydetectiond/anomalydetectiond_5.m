void CMMsl::PDRSpeedEstimatorStateDebug::~PDRSpeedEstimatorStateDebug(CMMsl::PDRSpeedEstimatorStateDebug *this)
{
  uint64_t vars8;

  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug(CMMsl::PDRSpeedEstimatorStateDebug *this, const CMMsl::PDRSpeedEstimatorStateDebug *a2)
{
  *(void *)this = off_1003A7E08;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::operator=(uint64_t a1, const CMMsl::PDRSpeedEstimatorStateDebug *a2)
{
  if ((const CMMsl::PDRSpeedEstimatorStateDebug *)a1 != a2)
  {
    CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug((CMMsl::PDRSpeedEstimatorStateDebug *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRSpeedEstimatorStateDebug *a2, CMMsl::PDRSpeedEstimatorStateDebug *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7E08;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7E08;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A7E08;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::formatText(CMMsl::PDRSpeedEstimatorStateDebug *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "speed", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "speedUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::readFrom(CMMsl::PDRSpeedEstimatorStateDebug *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 32) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((unsigned char *)this + 32) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_33:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_38:
            unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_39:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::hash_value(CMMsl::PDRSpeedEstimatorStateDebug *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRVelocityEstimatorState::~PDRVelocityEstimatorState(CMMsl::PDRVelocityEstimatorState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState(CMMsl::PDRVelocityEstimatorState *this, const CMMsl::PDRVelocityEstimatorState *a2)
{
  *(void *)this = off_1003A7E40;
  *((_DWORD *)this + 12) = 0;
  char v2 = *((unsigned char *)a2 + 48);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 48) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 48) & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *((unsigned char *)this + 48) = v3;
    *((_DWORD *)this + 9) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 10);
    v3 |= 0x40u;
    *((unsigned char *)this + 48) = v3;
    *((_DWORD *)this + 10) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((unsigned char *)this + 48) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(result) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((unsigned char *)this + 48) = v3;
  *((_DWORD *)this + 6) = LODWORD(result);
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 48) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_18:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 48) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_17:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((unsigned char *)this + 48) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  if ((*((unsigned char *)a2 + 48) & 2) != 0) {
    goto LABEL_18;
  }
  return result;
}

uint64_t CMMsl::PDRVelocityEstimatorState::operator=(uint64_t a1, const CMMsl::PDRVelocityEstimatorState *a2)
{
  if ((const CMMsl::PDRVelocityEstimatorState *)a1 != a2)
  {
    CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState((CMMsl::PDRVelocityEstimatorState *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v11;
    uint64_t v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v6;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRVelocityEstimatorState *a2, CMMsl::PDRVelocityEstimatorState *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7E40;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7E40;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRVelocityEstimatorState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = off_1003A7E40;
    int v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    int v13 = *(_DWORD *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 40);
    long long v4 = *(_OWORD *)(a1 + 24);
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 48) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    long long v10 = v6;
    long long v11 = v4;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PDRVelocityEstimatorState::formatText(CMMsl::PDRVelocityEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "velocityUncX", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "velocityUncY", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "velocityUncZ", *((float *)this + 8));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(a2, "velocityY", *((float *)this + 10));
    if ((*((unsigned char *)this + 48) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "velocityX", *((float *)this + 9));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "velocityZ", *((float *)this + 11));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRVelocityEstimatorState::readFrom(CMMsl::PDRVelocityEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 48) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_48;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 2u:
          *((unsigned char *)this + 48) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_48;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_50;
        case 3u:
          *((unsigned char *)this + 48) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_48;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_50;
        case 4u:
          *((unsigned char *)this + 48) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_48;
          }
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_50;
        case 5u:
          *((unsigned char *)this + 48) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_48;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_50;
        case 6u:
          *((unsigned char *)this + 48) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_48;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_50;
        case 7u:
          *((unsigned char *)this + 48) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_48;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_50:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          goto LABEL_51;
        case 8u:
          *((unsigned char *)this + 48) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
          {
LABEL_48:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_43:
            unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_51:
            *((void *)a2 + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRVelocityEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 48);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 48) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 2u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 3u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 4u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 32), 7u);
    if ((*(unsigned char *)(v3 + 48) & 2) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 6u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_17:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 8u);
}

uint64_t CMMsl::PDRVelocityEstimatorState::hash_value(CMMsl::PDRVelocityEstimatorState *this)
{
  if ((*((unsigned char *)this + 48) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 48) & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_27:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 48) & 0x40) != 0) {
      goto LABEL_6;
    }
LABEL_28:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 48) & 0x80) != 0) {
      goto LABEL_9;
    }
LABEL_29:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 48) & 4) != 0) {
      goto LABEL_12;
    }
LABEL_30:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 48) & 8) != 0) {
      goto LABEL_15;
    }
LABEL_31:
    uint64_t v11 = 0;
    if ((*((unsigned char *)this + 48) & 0x10) != 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 0x20) == 0) {
    goto LABEL_27;
  }
LABEL_3:
  float v2 = *((float *)this + 9);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 48) & 0x40) == 0) {
    goto LABEL_28;
  }
LABEL_6:
  float v4 = *((float *)this + 10);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 48) & 0x80) == 0) {
    goto LABEL_29;
  }
LABEL_9:
  float v6 = *((float *)this + 11);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 48) & 4) == 0) {
    goto LABEL_30;
  }
LABEL_12:
  float v8 = *((float *)this + 6);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 48) & 8) == 0) {
    goto LABEL_31;
  }
LABEL_15:
  float v10 = *((float *)this + 7);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((*((unsigned char *)this + 48) & 0x10) != 0)
  {
LABEL_18:
    float v12 = *((float *)this + 8);
    uint64_t v13 = LODWORD(v12);
    if (v12 == 0.0) {
      uint64_t v13 = 0;
    }
    if ((*((unsigned char *)this + 48) & 2) != 0) {
      goto LABEL_21;
    }
LABEL_33:
    double v14 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ *(void *)&v14;
  }
LABEL_32:
  uint64_t v13 = 0;
  if ((*((unsigned char *)this + 48) & 2) == 0) {
    goto LABEL_33;
  }
LABEL_21:
  double v14 = *((double *)this + 2);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ *(void *)&v14;
}

void CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS(CMMsl::PTSConsumedGNSS *this)
{
  *(void *)this = off_1003A7E78;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS(this);

  operator delete();
}

void *CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(void *this, const CMMsl::PTSConsumedGNSS *a2)
{
  *this = off_1003A7E78;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::PTSConsumedGNSS::operator=(uint64_t a1, const CMMsl::PTSConsumedGNSS *a2)
{
  if ((const CMMsl::PTSConsumedGNSS *)a1 != a2)
  {
    CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS((CMMsl::PTSConsumedGNSS *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PTSConsumedGNSS *a2, CMMsl::PTSConsumedGNSS *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = off_1003A7E78;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t CMMsl::PTSConsumedGNSS::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS((CMMsl::PTSConsumedGNSS *)&v5);
  }
  return a1;
}

uint64_t CMMsl::PTSConsumedGNSS::formatText(CMMsl::PTSConsumedGNSS *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "signalEnvironment");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PTSConsumedGNSS::readFrom(CMMsl::PTSConsumedGNSS *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if (v19 == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v19, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSConsumedGNSS::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5, 2u);
  }
  return this;
}

unint64_t CMMsl::PTSConsumedGNSS::hash_value(CMMsl::PTSConsumedGNSS *this)
{
  unint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v2 = CMMsl::LocationOscarEmu::hash_value((CMMsl::LocationOscarEmu *)v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    char v4 = *(unsigned char *)(v3 + 12);
    uint64_t v3 = *(int *)(v3 + 8);
    if ((v4 & 1) == 0) {
      uint64_t v3 = 0;
    }
  }
  return v3 ^ v2;
}

uint64_t CMMsl::PTSConsumedGNSS::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::PTSConsumedGNSS::makeSignalEnvironment(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PTSForwardPropagation::~PTSForwardPropagation(CMMsl::PTSForwardPropagation *this)
{
  *(void *)this = off_1003A7EB0;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PTSForwardPropagation::~PTSForwardPropagation(this);

  operator delete();
}

uint64_t CMMsl::PTSForwardPropagation::PTSForwardPropagation(uint64_t this, const CMMsl::PTSForwardPropagation *a2)
{
  *(void *)this = off_1003A7EB0;
  *(void *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *((void *)a2 + 7);
    char v3 = 32;
    *(unsigned char *)(this + 64) = 32;
    *(void *)(this + 56) = v4;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 64) & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 4);
    v3 |= 8u;
    *(unsigned char *)(this + 64) = v3;
    *(void *)(this + 32) = v5;
    char v2 = *((unsigned char *)a2 + 64);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    uint64_t v7 = *((void *)a2 + 5);
    v3 |= 0x10u;
    *(unsigned char *)(this + 64) = v3;
    *(void *)(this + 40) = v7;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v8 = *((void *)a2 + 3);
  v3 |= 4u;
  *(unsigned char *)(this + 64) = v3;
  *(void *)(this + 24) = v8;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_16:
  uint64_t v9 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 64) = v3;
  *(void *)(this + 8) = v9;
  if ((*((unsigned char *)a2 + 64) & 2) != 0)
  {
LABEL_10:
    uint64_t v6 = *((void *)a2 + 2);
    *(unsigned char *)(this + 64) = v3 | 2;
    *(void *)(this + 16) = v6;
  }
LABEL_11:
  if (*((void *)a2 + 6)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::PTSForwardPropagation::operator=(uint64_t a1, const CMMsl::PTSForwardPropagation *a2)
{
  if ((const CMMsl::PTSForwardPropagation *)a1 != a2)
  {
    CMMsl::PTSForwardPropagation::PTSForwardPropagation((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v15;
    uint64_t v15 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v7;
    long long v12 = v6;
    uint64_t v8 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v14;
    uint64_t v14 = v8;
    CMMsl::PTSForwardPropagation::~PTSForwardPropagation((CMMsl::PTSForwardPropagation *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PTSForwardPropagation *a2, CMMsl::PTSForwardPropagation *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::PTSForwardPropagation::PTSForwardPropagation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7EB0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PTSForwardPropagation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PTSForwardPropagation::PTSForwardPropagation((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v15;
    uint64_t v15 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v7;
    long long v12 = v6;
    uint64_t v8 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v14;
    uint64_t v14 = v8;
    CMMsl::PTSForwardPropagation::~PTSForwardPropagation((CMMsl::PTSForwardPropagation *)v10);
  }
  return a1;
}

uint64_t CMMsl::PTSForwardPropagation::formatText(CMMsl::PTSForwardPropagation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 64);
  if (v5)
  {
    PB::TextFormatter::format(a2, "course", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*((unsigned char *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 4));
  if ((*((unsigned char *)this + 64) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "longitude", *((double *)this + 5));
LABEL_7:
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "signalEnvironment");
  }
  if ((*((unsigned char *)this + 64) & 0x20) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PTSForwardPropagation::readFrom(CMMsl::PTSForwardPropagation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 64) |= 0x20u;
              unint64_t v20 = *((void *)a2 + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
                goto LABEL_41;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v20);
              goto LABEL_44;
            case 2u:
              *((unsigned char *)this + 64) |= 8u;
              unint64_t v22 = *((void *)a2 + 1);
              if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
                goto LABEL_41;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v22);
              goto LABEL_44;
            case 3u:
              *((unsigned char *)this + 64) |= 0x10u;
              unint64_t v23 = *((void *)a2 + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
                goto LABEL_41;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v23);
              goto LABEL_44;
            case 4u:
              *((unsigned char *)this + 64) |= 4u;
              unint64_t v24 = *((void *)a2 + 1);
              if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
                goto LABEL_41;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v24);
              goto LABEL_44;
            case 5u:
              *((unsigned char *)this + 64) |= 1u;
              unint64_t v25 = *((void *)a2 + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
                goto LABEL_41;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v25);
              goto LABEL_44;
            case 6u:
              *((unsigned char *)this + 64) |= 2u;
              unint64_t v26 = *((void *)a2 + 1);
              if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 2) = *(void *)(*(void *)a2 + v26);
LABEL_44:
                *((void *)a2 + 1) += 8;
              }
              else
              {
LABEL_41:
                *((unsigned char *)a2 + 24) = 1;
              }
LABEL_45:
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
            case 7u:
              operator new();
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              goto LABEL_45;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSForwardPropagation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 64);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(this + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 2u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 3u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  if ((*(unsigned char *)(v3 + 64) & 2) != 0) {
LABEL_7:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 6u);
LABEL_8:
  char v5 = *(const PB::Base **)(v3 + 48);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5, 7u);
  }
  return this;
}

uint64_t CMMsl::PTSForwardPropagation::hash_value(CMMsl::PTSForwardPropagation *this)
{
  if ((*((unsigned char *)this + 64) & 0x20) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 64) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_21:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 64) & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_22:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 64) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_23:
    double v4 = 0.0;
    if (*((unsigned char *)this + 64)) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
  double v1 = *((double *)this + 7);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 8) == 0) {
    goto LABEL_21;
  }
LABEL_3:
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 0x10) == 0) {
    goto LABEL_22;
  }
LABEL_6:
  double v3 = *((double *)this + 5);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 4) == 0) {
    goto LABEL_23;
  }
LABEL_9:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if (*((unsigned char *)this + 64))
  {
LABEL_12:
    double v5 = *((double *)this + 1);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if ((*((unsigned char *)this + 64) & 2) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    double v6 = 0.0;
    goto LABEL_26;
  }
LABEL_24:
  double v5 = 0.0;
  if ((*((unsigned char *)this + 64) & 2) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
LABEL_26:
  uint64_t v7 = *((void *)this + 6);
  if (v7)
  {
    char v8 = *(unsigned char *)(v7 + 12);
    uint64_t v7 = *(int *)(v7 + 8);
    if ((v8 & 1) == 0) {
      uint64_t v7 = 0;
    }
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7;
}

uint64_t CMMsl::PTSForwardPropagation::makeSignalEnvironment(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

void CMMsl::PTSMapMatchedRoute::~PTSMapMatchedRoute(CMMsl::PTSMapMatchedRoute *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A7EE8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PTSMapMatchedRoute::~PTSMapMatchedRoute(this);

  operator delete();
}

void *CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(void *this, const CMMsl::PTSMapMatchedRoute *a2)
{
  *this = off_1003A7EE8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::PTSMapMatchedRoute *CMMsl::PTSMapMatchedRoute::operator=(const CMMsl::PTSMapMatchedRoute *a1, const CMMsl::PTSMapMatchedRoute *a2)
{
  if (a1 != a2)
  {
    CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::PTSMapMatchedRoute::~PTSMapMatchedRoute((CMMsl::PTSMapMatchedRoute *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PTSMapMatchedRoute *a2, CMMsl::PTSMapMatchedRoute *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(void *a1, uint64_t a2)
{
  *a1 = off_1003A7EE8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A7EE8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PTSMapMatchedRoute::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A7EE8;
    v6[1] = v4;
    CMMsl::PTSMapMatchedRoute::~PTSMapMatchedRoute((CMMsl::PTSMapMatchedRoute *)v6);
  }
  return a1;
}

uint64_t CMMsl::PTSMapMatchedRoute::formatText(CMMsl::PTSMapMatchedRoute *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PTSMapMatchedRoute::readFrom(CMMsl::PTSMapMatchedRoute *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSMapMatchedRoute::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::PTSForwardPropagation *CMMsl::PTSMapMatchedRoute::hash_value(CMMsl::PTSMapMatchedRoute *this)
{
  uint64_t result = (CMMsl::PTSForwardPropagation *)*((void *)this + 1);
  if (result) {
    return (CMMsl::PTSForwardPropagation *)CMMsl::PTSForwardPropagation::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::PTSMapMatchedRoute::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PTSReconstructedRoute::~PTSReconstructedRoute(CMMsl::PTSReconstructedRoute *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A7F20;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PTSReconstructedRoute::~PTSReconstructedRoute(this);

  operator delete();
}

void *CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(void *this, const CMMsl::PTSReconstructedRoute *a2)
{
  *this = off_1003A7F20;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::PTSReconstructedRoute *CMMsl::PTSReconstructedRoute::operator=(const CMMsl::PTSReconstructedRoute *a1, const CMMsl::PTSReconstructedRoute *a2)
{
  if (a1 != a2)
  {
    CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::PTSReconstructedRoute::~PTSReconstructedRoute((CMMsl::PTSReconstructedRoute *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PTSReconstructedRoute *a2, CMMsl::PTSReconstructedRoute *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(void *a1, uint64_t a2)
{
  *a1 = off_1003A7F20;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A7F20;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PTSReconstructedRoute::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A7F20;
    v6[1] = v4;
    CMMsl::PTSReconstructedRoute::~PTSReconstructedRoute((CMMsl::PTSReconstructedRoute *)v6);
  }
  return a1;
}

uint64_t CMMsl::PTSReconstructedRoute::formatText(CMMsl::PTSReconstructedRoute *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PTSReconstructedRoute::readFrom(CMMsl::PTSReconstructedRoute *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSReconstructedRoute::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::PTSForwardPropagation *CMMsl::PTSReconstructedRoute::hash_value(CMMsl::PTSReconstructedRoute *this)
{
  uint64_t result = (CMMsl::PTSForwardPropagation *)*((void *)this + 1);
  if (result) {
    return (CMMsl::PTSForwardPropagation *)CMMsl::PTSForwardPropagation::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::PTSReconstructedRoute::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PdrMLModelOutput::~PdrMLModelOutput(CMMsl::PdrMLModelOutput *this)
{
  *(void *)this = off_1003A7F58;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PdrMLModelOutput::~PdrMLModelOutput(this);

  operator delete();
}

CMMsl::PdrMLModelOutput *CMMsl::PdrMLModelOutput::PdrMLModelOutput(CMMsl::PdrMLModelOutput *this, const CMMsl::PdrMLModelOutput *a2)
{
  *(void *)this = off_1003A7F58;
  *((void *)this + 1) = 0;
  unint64_t v3 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    uint64_t v4 = *((void *)a2 + 4);
    *((unsigned char *)this + 40) = 1;
    *((void *)this + 4) = v4;
  }
  if (this != a2) {
    sub_1000330C4(v3, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  return this;
}

uint64_t CMMsl::PdrMLModelOutput::operator=(uint64_t a1, const CMMsl::PdrMLModelOutput *a2)
{
  if ((const CMMsl::PdrMLModelOutput *)a1 != a2)
  {
    CMMsl::PdrMLModelOutput::PdrMLModelOutput((CMMsl::PdrMLModelOutput *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v6;
    CMMsl::PdrMLModelOutput::~PdrMLModelOutput((CMMsl::PdrMLModelOutput *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PdrMLModelOutput *a2, CMMsl::PdrMLModelOutput *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  return result;
}

uint64_t CMMsl::PdrMLModelOutput::PdrMLModelOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7F58;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(void *)a1 = off_1003A7F58;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::PdrMLModelOutput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v12 = off_1003A7F58;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 32);
    uint64_t v5 = *(void *)(a2 + 24);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v3;
    int v16 = v7;
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v4;
    uint64_t v15 = v8;
    long long v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v13 = v9;
    uint64_t v10 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v5;
    uint64_t v14 = v10;
    CMMsl::PdrMLModelOutput::~PdrMLModelOutput((CMMsl::PdrMLModelOutput *)&v12);
  }
  return a1;
}

uint64_t CMMsl::PdrMLModelOutput::formatText(CMMsl::PdrMLModelOutput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 40)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  }
  uint64_t v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "velocity", v7);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PdrMLModelOutput::readFrom(CMMsl::PdrMLModelOutput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 8);
    long long v9 = (char *)this + 24;
    do
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        unint64_t v13 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v19 = v2 + 1;
          char v20 = *(unsigned char *)(v10 + v2);
          *((void *)a2 + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0) {
            goto LABEL_21;
          }
          v17 += 7;
          unint64_t v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            unint64_t v13 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v23 = v13 >> 3;
      if ((v13 >> 3) == 2)
      {
        if (v22 != 2)
        {
          v40 = (char *)*((void *)this + 2);
          unint64_t v39 = *((void *)this + 3);
          if ((unint64_t)v40 >= v39)
          {
            v42 = (char *)*v8;
            uint64_t v43 = (v40 - (unsigned char *)*v8) >> 3;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61) {
LABEL_84:
            }
              sub_10000EE98();
            uint64_t v45 = v39 - (void)v42;
            if (v45 >> 2 > v44) {
              unint64_t v44 = v45 >> 2;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              v47 = (char *)sub_10000EEB0((uint64_t)v9, v46);
              v42 = (char *)*((void *)this + 1);
              v40 = (char *)*((void *)this + 2);
            }
            else
            {
              v47 = 0;
            }
            v48 = &v47[8 * v43];
            *(void *)v48 = 0;
            v41 = v48 + 8;
            while (v40 != v42)
            {
              uint64_t v49 = *((void *)v40 - 1);
              v40 -= 8;
              *((void *)v48 - 1) = v49;
              v48 -= 8;
            }
            *((void *)this + 1) = v48;
            *((void *)this + 2) = v41;
            *((void *)this + 3) = &v47[8 * v46];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            *(void *)v40 = 0;
            v41 = v40 + 8;
          }
          *((void *)this + 2) = v41;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)a2 + 2))
          {
LABEL_73:
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_76;
          }
          *(v41 - 1) = *(void *)(*(void *)a2 + v50);
          goto LABEL_75;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v25 = *((void *)a2 + 1);
        unint64_t v26 = *((void *)a2 + 2);
        while (v25 < v26 && !*((unsigned char *)a2 + 24))
        {
          v28 = (char *)*((void *)this + 2);
          unint64_t v27 = *((void *)this + 3);
          if ((unint64_t)v28 >= v27)
          {
            v30 = (char *)*v8;
            uint64_t v31 = (v28 - (unsigned char *)*v8) >> 3;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61) {
              goto LABEL_84;
            }
            uint64_t v33 = v27 - (void)v30;
            if (v33 >> 2 > v32) {
              unint64_t v32 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              v35 = (char *)sub_10000EEB0((uint64_t)v9, v34);
              v30 = (char *)*((void *)this + 1);
              v28 = (char *)*((void *)this + 2);
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[8 * v31];
            *(void *)v36 = 0;
            v29 = v36 + 8;
            while (v28 != v30)
            {
              uint64_t v37 = *((void *)v28 - 1);
              v28 -= 8;
              *((void *)v36 - 1) = v37;
              v36 -= 8;
            }
            *((void *)this + 1) = v36;
            *((void *)this + 2) = v29;
            *((void *)this + 3) = &v35[8 * v34];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)v28 = 0;
            v29 = v28 + 8;
          }
          *((void *)this + 2) = v29;
          unint64_t v38 = *((void *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)a2 + 2))
          {
            *((unsigned char *)a2 + 24) = 1;
            break;
          }
          *(v29 - 1) = *(void *)(*(void *)a2 + v38);
          unint64_t v26 = *((void *)a2 + 2);
          unint64_t v25 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v25;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if (v23 == 1)
        {
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
            goto LABEL_73;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v24);
LABEL_75:
          *((void *)a2 + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(a2, v23, v22, 0) & 1) == 0) {
          return 0;
        }
      }
LABEL_76:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PdrMLModelOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 40)) {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  int v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    double v6 = *v5++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  return this;
}

uint64_t CMMsl::PdrMLModelOutput::hash_value(CMMsl::PdrMLModelOutput *this)
{
  if (*((unsigned char *)this + 40))
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 4);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  return PBHashBytes() ^ v1;
}

void CMMsl::PearlAttitude::~PearlAttitude(CMMsl::PearlAttitude *this)
{
  *(void *)this = off_1003A7F90;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PearlAttitude::~PearlAttitude(this);

  operator delete();
}

CMMsl::PearlAttitude *CMMsl::PearlAttitude::PearlAttitude(CMMsl::PearlAttitude *this, const CMMsl::PearlAttitude *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = off_1003A7F90;
  *((_DWORD *)this + 31) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  __int16 v5 = *((_WORD *)a2 + 62);
  if (v5)
  {
    uint64_t v7 = *((void *)a2 + 10);
    __int16 v6 = 1;
    *((_WORD *)this + 62) = 1;
    *((void *)this + 10) = v7;
    __int16 v5 = *((_WORD *)a2 + 62);
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = 0;
  if ((v5 & 0x40) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 27);
    v6 |= 0x40u;
    *((_WORD *)this + 62) = v6;
    *((_DWORD *)this + 27) = v8;
    __int16 v5 = *((_WORD *)a2 + 62);
  }
LABEL_6:
  if ((v5 & 0x20) != 0)
  {
    int v13 = *((_DWORD *)a2 + 26);
    v6 |= 0x20u;
    *((_WORD *)this + 62) = v6;
    *((_DWORD *)this + 26) = v13;
    __int16 v5 = *((_WORD *)a2 + 62);
    if ((v5 & 0x200) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  int v14 = *((_DWORD *)a2 + 30);
  v6 |= 0x200u;
  *((_WORD *)this + 62) = v6;
  *((_DWORD *)this + 30) = v14;
  __int16 v5 = *((_WORD *)a2 + 62);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v15 = *((_DWORD *)a2 + 22);
  v6 |= 2u;
  *((_WORD *)this + 62) = v6;
  *((_DWORD *)this + 22) = v15;
  __int16 v5 = *((_WORD *)a2 + 62);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_24:
  int v16 = *((_DWORD *)a2 + 28);
  v6 |= 0x80u;
  *((_WORD *)this + 62) = v6;
  *((_DWORD *)this + 28) = v16;
  if ((*((_WORD *)a2 + 62) & 0x10) != 0)
  {
LABEL_11:
    int v9 = *((_DWORD *)a2 + 25);
    *((_WORD *)this + 62) = v6 | 0x10;
    *((_DWORD *)this + 25) = v9;
  }
LABEL_12:
  if (this != a2) {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v10 = *((_WORD *)a2 + 62);
  if ((v10 & 8) != 0)
  {
    int v17 = *((_DWORD *)a2 + 24);
    *((_WORD *)this + 62) |= 8u;
    *((_DWORD *)this + 24) = v17;
    __int16 v10 = *((_WORD *)a2 + 62);
    if ((v10 & 0x100) == 0)
    {
LABEL_16:
      if ((v10 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  else if ((*((_WORD *)a2 + 62) & 0x100) == 0)
  {
    goto LABEL_16;
  }
  int v18 = *((_DWORD *)a2 + 29);
  *((_WORD *)this + 62) |= 0x100u;
  *((_DWORD *)this + 29) = v18;
  if ((*((_WORD *)a2 + 62) & 4) != 0)
  {
LABEL_17:
    int v11 = *((_DWORD *)a2 + 23);
    *((_WORD *)this + 62) |= 4u;
    *((_DWORD *)this + 23) = v11;
  }
LABEL_18:
  if (this != a2)
  {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308((char *)this + 56, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::PearlAttitude::operator=(CMMsl *a1, const CMMsl::PearlAttitude *a2)
{
  if (a1 != a2)
  {
    CMMsl::PearlAttitude::PearlAttitude((CMMsl::PearlAttitude *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PearlAttitude *)v5, v3);
    CMMsl::PearlAttitude::~PearlAttitude((CMMsl::PearlAttitude *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PearlAttitude *a2, CMMsl::PearlAttitude *a3)
{
  int v3 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  int v5 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v5;
  int v6 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  float result = *((float *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((float *)a2 + 23) = result;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
  uint64_t v14 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v14;
  uint64_t v15 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v15;
  uint64_t v16 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v16;
  return result;
}

uint64_t CMMsl::PearlAttitude::PearlAttitude(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7F90;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  sub_100274A30(v5, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::PearlAttitude::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PearlAttitude::PearlAttitude((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PearlAttitude *)v5, v3);
    CMMsl::PearlAttitude::~PearlAttitude((CMMsl::PearlAttitude *)v5);
  }
  return a1;
}

uint64_t CMMsl::PearlAttitude::formatText(CMMsl::PearlAttitude *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 62);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "distance", *((float *)this + 22));
    __int16 v5 = *((_WORD *)this + 62);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "focalLength", *((float *)this + 23));
  __int16 v5 = *((_WORD *)this + 62);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "height", *((float *)this + 24));
  if ((*((_WORD *)this + 62) & 0x10) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "orientation", *((_DWORD *)this + 25));
LABEL_6:
  int v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "origin", v8);
  }
  if ((*((_WORD *)this + 62) & 0x20) != 0) {
    PB::TextFormatter::format(a2, "pitch", *((float *)this + 26));
  }
  uint64_t v9 = (float *)*((void *)this + 4);
  __int16 v10 = (float *)*((void *)this + 5);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(a2, "principlePoint", v11);
  }
  __int16 v12 = *((_WORD *)this + 62);
  if ((v12 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "roll", *((float *)this + 27));
    __int16 v12 = *((_WORD *)this + 62);
  }
  if (v12) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  }
  uint64_t v13 = (float *)*((void *)this + 7);
  uint64_t v14 = (float *)*((void *)this + 8);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(a2, "transform", v15);
  }
  __int16 v16 = *((_WORD *)this + 62);
  if ((v16 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 28));
    __int16 v16 = *((_WORD *)this + 62);
    if ((v16 & 0x100) == 0)
    {
LABEL_20:
      if ((v16 & 0x200) == 0) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }
  else if ((*((_WORD *)this + 62) & 0x100) == 0)
  {
    goto LABEL_20;
  }
  PB::TextFormatter::format(a2, "width", *((float *)this + 29));
  if ((*((_WORD *)this + 62) & 0x200) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(a2, "yaw", *((float *)this + 30));
LABEL_22:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PearlAttitude::readFrom(CMMsl::PearlAttitude *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 56);
    uint64_t v9 = (char *)this + 72;
    __int16 v10 = (void **)((char *)this + 32);
    float v11 = (char *)this + 48;
    __int16 v12 = (void **)((char *)this + 8);
    uint64_t v13 = (char *)this + 24;
    while (1)
    {
      uint64_t v14 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        unint64_t v18 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v19 = *(unsigned char *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v2 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v26 = v17 & 7;
      if (v26 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *((_WORD *)this + 62) |= 1u;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)a2 + 2)) {
            goto LABEL_212;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v27);
          uint64_t v28 = *((void *)a2 + 1) + 8;
          goto LABEL_215;
        case 2u:
          *((_WORD *)this + 62) |= 0x40u;
          unint64_t v29 = *((void *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)a2 + 2)) {
            goto LABEL_212;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v29);
          goto LABEL_214;
        case 3u:
          *((_WORD *)this + 62) |= 0x20u;
          unint64_t v30 = *((void *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)a2 + 2)) {
            goto LABEL_212;
          }
          *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v30);
          goto LABEL_214;
        case 4u:
          *((_WORD *)this + 62) |= 0x200u;
          unint64_t v31 = *((void *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)a2 + 2)) {
            goto LABEL_212;
          }
          *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v31);
          goto LABEL_214;
        case 5u:
          *((_WORD *)this + 62) |= 2u;
          unint64_t v32 = *((void *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)a2 + 2)) {
            goto LABEL_212;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v32);
          goto LABEL_214;
        case 6u:
          *((_WORD *)this + 62) |= 0x80u;
          unint64_t v33 = *((void *)a2 + 1);
          unint64_t v34 = *((void *)a2 + 2);
          uint64_t v35 = *(void *)a2;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            char v36 = 0;
            unsigned int v37 = 0;
            uint64_t v38 = 0;
            do
            {
              unint64_t v39 = v33 + 1;
              *((void *)a2 + 1) = v33 + 1;
              char v40 = *(unsigned char *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0) {
                goto LABEL_185;
              }
              v36 += 7;
              unint64_t v33 = v39;
              BOOL v20 = v37++ > 8;
            }
            while (!v20);
LABEL_141:
            LODWORD(v38) = 0;
            goto LABEL_185;
          }
          char v94 = 0;
          unsigned int v95 = 0;
          uint64_t v38 = 0;
          if (v34 <= v33) {
            unint64_t v34 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v96 = v33 + 1;
              char v97 = *(unsigned char *)(v35 + v33);
              *((void *)a2 + 1) = v96;
              v38 |= (unint64_t)(v97 & 0x7F) << v94;
              if (v97 < 0)
              {
                v94 += 7;
                unint64_t v33 = v96;
                BOOL v20 = v95++ > 8;
                if (v20) {
                  goto LABEL_141;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v38) = 0;
              }
            }
            break;
          }
LABEL_185:
          *((_DWORD *)this + 28) = v38;
          goto LABEL_216;
        case 7u:
          *((_WORD *)this + 62) |= 0x10u;
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          uint64_t v43 = *(void *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)a2 + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_188;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v20 = v45++ > 8;
            }
            while (!v20);
LABEL_148:
            LODWORD(v46) = 0;
            goto LABEL_188;
          }
          char v98 = 0;
          unsigned int v99 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v100 = v41 + 1;
              char v101 = *(unsigned char *)(v43 + v41);
              *((void *)a2 + 1) = v100;
              v46 |= (unint64_t)(v101 & 0x7F) << v98;
              if (v101 < 0)
              {
                v98 += 7;
                unint64_t v41 = v100;
                BOOL v20 = v99++ > 8;
                if (v20) {
                  goto LABEL_148;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v46) = 0;
              }
            }
            break;
          }
LABEL_188:
          *((_DWORD *)this + 25) = v46;
          goto LABEL_216;
        case 8u:
          if (v26 != 2)
          {
            v103 = (char *)*((void *)this + 2);
            unint64_t v102 = *((void *)this + 3);
            if ((unint64_t)v103 >= v102)
            {
              v109 = (char *)*v12;
              uint64_t v110 = (v103 - (unsigned char *)*v12) >> 2;
              unint64_t v111 = v110 + 1;
              if ((unint64_t)(v110 + 1) >> 62) {
LABEL_226:
              }
                sub_10000EE98();
              uint64_t v112 = v102 - (void)v109;
              if (v112 >> 1 > v111) {
                unint64_t v111 = v112 >> 1;
              }
              if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v113 = v111;
              }
              if (v113)
              {
                v114 = (char *)sub_100024458((uint64_t)v13, v113);
                v109 = (char *)*((void *)this + 1);
                v103 = (char *)*((void *)this + 2);
              }
              else
              {
                v114 = 0;
              }
              v127 = &v114[4 * v110];
              *(_DWORD *)v127 = 0;
              v104 = v127 + 4;
              while (v103 != v109)
              {
                int v128 = *((_DWORD *)v103 - 1);
                v103 -= 4;
                *((_DWORD *)v127 - 1) = v128;
                v127 -= 4;
              }
              *((void *)this + 1) = v127;
              *((void *)this + 2) = v104;
              *((void *)this + 3) = &v114[4 * v113];
              if (v109) {
                operator delete(v109);
              }
            }
            else
            {
              *(_DWORD *)v103 = 0;
              v104 = v103 + 4;
            }
            *((void *)this + 2) = v104;
            goto LABEL_210;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v49 = *((void *)a2 + 1);
          unint64_t v50 = *((void *)a2 + 2);
          while (v49 < v50 && !*((unsigned char *)a2 + 24))
          {
            v52 = (char *)*((void *)this + 2);
            unint64_t v51 = *((void *)this + 3);
            if ((unint64_t)v52 >= v51)
            {
              v54 = (char *)*v12;
              uint64_t v55 = (v52 - (unsigned char *)*v12) >> 2;
              unint64_t v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62) {
                goto LABEL_226;
              }
              uint64_t v57 = v51 - (void)v54;
              if (v57 >> 1 > v56) {
                unint64_t v56 = v57 >> 1;
              }
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v56;
              }
              if (v58)
              {
                v59 = (char *)sub_100024458((uint64_t)v13, v58);
                v54 = (char *)*((void *)this + 1);
                v52 = (char *)*((void *)this + 2);
              }
              else
              {
                v59 = 0;
              }
              v60 = &v59[4 * v55];
              *(_DWORD *)v60 = 0;
              v53 = v60 + 4;
              while (v52 != v54)
              {
                int v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *((void *)this + 1) = v60;
              *((void *)this + 2) = v53;
              *((void *)this + 3) = &v59[4 * v58];
              if (v54) {
                operator delete(v54);
              }
            }
            else
            {
              *(_DWORD *)v52 = 0;
              v53 = v52 + 4;
            }
            *((void *)this + 2) = v53;
            unint64_t v62 = *((void *)a2 + 1);
            if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((void *)a2 + 2)) {
              goto LABEL_155;
            }
            *(v53 - 1) = *(_DWORD *)(*(void *)a2 + v62);
            unint64_t v50 = *((void *)a2 + 2);
            unint64_t v49 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v49;
          }
          goto LABEL_156;
        case 9u:
          *((_WORD *)this + 62) |= 8u;
          unint64_t v63 = *((void *)a2 + 1);
          if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)a2 + 2)) {
            goto LABEL_212;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v63);
          goto LABEL_214;
        case 0xAu:
          *((_WORD *)this + 62) |= 0x100u;
          unint64_t v64 = *((void *)a2 + 1);
          if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((void *)a2 + 2)) {
            goto LABEL_212;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v64);
          goto LABEL_214;
        case 0xBu:
          *((_WORD *)this + 62) |= 4u;
          unint64_t v65 = *((void *)a2 + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)a2 + 2)) {
            goto LABEL_212;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v65);
          goto LABEL_214;
        case 0xCu:
          if (v26 != 2)
          {
            v106 = (char *)*((void *)this + 5);
            unint64_t v105 = *((void *)this + 6);
            if ((unint64_t)v106 >= v105)
            {
              v115 = (char *)*v10;
              uint64_t v116 = (v106 - (unsigned char *)*v10) >> 2;
              unint64_t v117 = v116 + 1;
              if ((unint64_t)(v116 + 1) >> 62) {
LABEL_227:
              }
                sub_10000EE98();
              uint64_t v118 = v105 - (void)v115;
              if (v118 >> 1 > v117) {
                unint64_t v117 = v118 >> 1;
              }
              if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v119 = v117;
              }
              if (v119)
              {
                v120 = (char *)sub_100024458((uint64_t)v11, v119);
                v115 = (char *)*((void *)this + 4);
                v106 = (char *)*((void *)this + 5);
              }
              else
              {
                v120 = 0;
              }
              v129 = &v120[4 * v116];
              *(_DWORD *)v129 = 0;
              v104 = v129 + 4;
              while (v106 != v115)
              {
                int v130 = *((_DWORD *)v106 - 1);
                v106 -= 4;
                *((_DWORD *)v129 - 1) = v130;
                v129 -= 4;
              }
              *((void *)this + 4) = v129;
              *((void *)this + 5) = v104;
              *((void *)this + 6) = &v120[4 * v119];
              if (v115) {
                operator delete(v115);
              }
            }
            else
            {
              *(_DWORD *)v106 = 0;
              v104 = v106 + 4;
            }
            *((void *)this + 5) = v104;
            goto LABEL_210;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v66 = *((void *)a2 + 1);
          unint64_t v67 = *((void *)a2 + 2);
          while (v66 < v67 && !*((unsigned char *)a2 + 24))
          {
            v69 = (char *)*((void *)this + 5);
            unint64_t v68 = *((void *)this + 6);
            if ((unint64_t)v69 >= v68)
            {
              v71 = (char *)*v10;
              uint64_t v72 = (v69 - (unsigned char *)*v10) >> 2;
              unint64_t v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62) {
                goto LABEL_227;
              }
              uint64_t v74 = v68 - (void)v71;
              if (v74 >> 1 > v73) {
                unint64_t v73 = v74 >> 1;
              }
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v73;
              }
              if (v75)
              {
                v76 = (char *)sub_100024458((uint64_t)v11, v75);
                v71 = (char *)*((void *)this + 4);
                v69 = (char *)*((void *)this + 5);
              }
              else
              {
                v76 = 0;
              }
              v77 = &v76[4 * v72];
              *(_DWORD *)v77 = 0;
              v70 = v77 + 4;
              while (v69 != v71)
              {
                int v78 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *((_DWORD *)v77 - 1) = v78;
                v77 -= 4;
              }
              *((void *)this + 4) = v77;
              *((void *)this + 5) = v70;
              *((void *)this + 6) = &v76[4 * v75];
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *(_DWORD *)v69 = 0;
              v70 = v69 + 4;
            }
            *((void *)this + 5) = v70;
            unint64_t v79 = *((void *)a2 + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)a2 + 2)) {
              goto LABEL_155;
            }
            *(v70 - 1) = *(_DWORD *)(*(void *)a2 + v79);
            unint64_t v67 = *((void *)a2 + 2);
            unint64_t v66 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v66;
          }
          goto LABEL_156;
        case 0xDu:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v80 = *((void *)a2 + 1);
            unint64_t v81 = *((void *)a2 + 2);
            while (v80 < v81 && !*((unsigned char *)a2 + 24))
            {
              v83 = (char *)*((void *)this + 8);
              unint64_t v82 = *((void *)this + 9);
              if ((unint64_t)v83 >= v82)
              {
                v85 = (char *)*v8;
                uint64_t v86 = (v83 - (unsigned char *)*v8) >> 2;
                unint64_t v87 = v86 + 1;
                if ((unint64_t)(v86 + 1) >> 62) {
                  goto LABEL_228;
                }
                uint64_t v88 = v82 - (void)v85;
                if (v88 >> 1 > v87) {
                  unint64_t v87 = v88 >> 1;
                }
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v89 = v87;
                }
                if (v89)
                {
                  v90 = (char *)sub_100024458((uint64_t)v9, v89);
                  v85 = (char *)*((void *)this + 7);
                  v83 = (char *)*((void *)this + 8);
                }
                else
                {
                  v90 = 0;
                }
                v91 = &v90[4 * v86];
                *(_DWORD *)v91 = 0;
                v84 = v91 + 4;
                while (v83 != v85)
                {
                  int v92 = *((_DWORD *)v83 - 1);
                  v83 -= 4;
                  *((_DWORD *)v91 - 1) = v92;
                  v91 -= 4;
                }
                *((void *)this + 7) = v91;
                *((void *)this + 8) = v84;
                *((void *)this + 9) = &v90[4 * v89];
                if (v85) {
                  operator delete(v85);
                }
              }
              else
              {
                *(_DWORD *)v83 = 0;
                v84 = v83 + 4;
              }
              *((void *)this + 8) = v84;
              unint64_t v93 = *((void *)a2 + 1);
              if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((void *)a2 + 2))
              {
LABEL_155:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v84 - 1) = *(_DWORD *)(*(void *)a2 + v93);
              unint64_t v81 = *((void *)a2 + 2);
              unint64_t v80 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v80;
            }
LABEL_156:
            PB::Reader::recallMark();
          }
          else
          {
            v108 = (char *)*((void *)this + 8);
            unint64_t v107 = *((void *)this + 9);
            if ((unint64_t)v108 >= v107)
            {
              v121 = (char *)*v8;
              uint64_t v122 = (v108 - (unsigned char *)*v8) >> 2;
              unint64_t v123 = v122 + 1;
              if ((unint64_t)(v122 + 1) >> 62) {
LABEL_228:
              }
                sub_10000EE98();
              uint64_t v124 = v107 - (void)v121;
              if (v124 >> 1 > v123) {
                unint64_t v123 = v124 >> 1;
              }
              if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v125 = v123;
              }
              if (v125)
              {
                v126 = (char *)sub_100024458((uint64_t)v9, v125);
                v121 = (char *)*((void *)this + 7);
                v108 = (char *)*((void *)this + 8);
              }
              else
              {
                v126 = 0;
              }
              v131 = &v126[4 * v122];
              *(_DWORD *)v131 = 0;
              v104 = v131 + 4;
              while (v108 != v121)
              {
                int v132 = *((_DWORD *)v108 - 1);
                v108 -= 4;
                *((_DWORD *)v131 - 1) = v132;
                v131 -= 4;
              }
              *((void *)this + 7) = v131;
              *((void *)this + 8) = v104;
              *((void *)this + 9) = &v126[4 * v125];
              if (v121) {
                operator delete(v121);
              }
            }
            else
            {
              *(_DWORD *)v108 = 0;
              v104 = v108 + 4;
            }
            *((void *)this + 8) = v104;
LABEL_210:
            unint64_t v133 = *((void *)a2 + 1);
            if (v133 <= 0xFFFFFFFFFFFFFFFBLL && v133 + 4 <= *((void *)a2 + 2))
            {
              *(v104 - 1) = *(_DWORD *)(*(void *)a2 + v133);
LABEL_214:
              uint64_t v28 = *((void *)a2 + 1) + 4;
LABEL_215:
              *((void *)a2 + 1) = v28;
            }
            else
            {
LABEL_212:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_216:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v17 >> 3, v26, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_216;
      }
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v17 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v23 = v2 + 1;
      char v24 = *(unsigned char *)(v14 + v2);
      *((void *)a2 + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PearlAttitude::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 124);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 80), 1u);
    __int16 v4 = *(_WORD *)(v3 + 124);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 2u);
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 3u);
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 4u);
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
LABEL_28:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 6u);
    if ((*(_WORD *)(v3 + 124) & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 5u);
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_7:
  if ((v4 & 0x10) != 0) {
LABEL_8:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 7u);
LABEL_9:
  __int16 v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 8u);
  }
  __int16 v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 8) == 0)
  {
    if ((*(_WORD *)(v3 + 124) & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_31:
    this = PB::Writer::write(a2, *(float *)(v3 + 116), 0xAu);
    if ((*(_WORD *)(v3 + 124) & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 9u);
  __int16 v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 0x100) != 0) {
    goto LABEL_31;
  }
LABEL_14:
  if ((v8 & 4) != 0) {
LABEL_15:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xBu);
LABEL_16:
  uint64_t v9 = *(float **)(v3 + 32);
  __int16 v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    this = PB::Writer::write(a2, v11, 0xCu);
  }
  uint64_t v13 = *(float **)(v3 + 56);
  __int16 v12 = *(float **)(v3 + 64);
  while (v13 != v12)
  {
    float v14 = *v13++;
    this = PB::Writer::write(a2, v14, 0xDu);
  }
  return this;
}

uint64_t CMMsl::PearlAttitude::hash_value(CMMsl::PearlAttitude *this)
{
  __int16 v2 = *((_WORD *)this + 62);
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v5 = 0;
    if ((v2 & 0x20) != 0) {
      goto LABEL_7;
    }
LABEL_26:
    uint64_t v7 = 0;
    if ((*((_WORD *)this + 62) & 0x200) != 0) {
      goto LABEL_11;
    }
LABEL_27:
    uint64_t v9 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_15;
    }
LABEL_28:
    uint64_t v11 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_19;
    }
LABEL_29:
    uint64_t v12 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_20;
    }
    goto LABEL_30;
  }
  if (*((double *)this + 10) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 10);
  }
  if ((v2 & 0x40) == 0) {
    goto LABEL_25;
  }
LABEL_3:
  float v4 = *((float *)this + 27);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = LODWORD(v4);
  }
  if ((v2 & 0x20) == 0) {
    goto LABEL_26;
  }
LABEL_7:
  float v6 = *((float *)this + 26);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = LODWORD(v6);
  }
  if ((*((_WORD *)this + 62) & 0x200) == 0) {
    goto LABEL_27;
  }
LABEL_11:
  float v8 = *((float *)this + 30);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = LODWORD(v8);
  }
  if ((v2 & 2) == 0) {
    goto LABEL_28;
  }
LABEL_15:
  float v10 = *((float *)this + 22);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = LODWORD(v10);
  }
  if ((v2 & 0x80) == 0) {
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v12 = *((unsigned int *)this + 28);
  if ((v2 & 0x10) != 0)
  {
LABEL_20:
    uint64_t v13 = *((unsigned int *)this + 25);
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v13 = 0;
LABEL_31:
  uint64_t v14 = PBHashBytes();
  __int16 v15 = *((_WORD *)this + 62);
  if ((v15 & 8) != 0)
  {
    float v21 = *((float *)this + 24);
    uint64_t v16 = LODWORD(v21);
    if (v21 == 0.0) {
      uint64_t v16 = 0;
    }
    if ((*((_WORD *)this + 62) & 0x100) != 0)
    {
LABEL_33:
      float v17 = *((float *)this + 29);
      uint64_t v18 = LODWORD(v17);
      if (v17 == 0.0) {
        uint64_t v18 = 0;
      }
      if ((v15 & 4) != 0) {
        goto LABEL_36;
      }
LABEL_43:
      uint64_t v20 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v16 = 0;
    if ((*((_WORD *)this + 62) & 0x100) != 0) {
      goto LABEL_33;
    }
  }
  uint64_t v18 = 0;
  if ((v15 & 4) == 0) {
    goto LABEL_43;
  }
LABEL_36:
  float v19 = *((float *)this + 23);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
LABEL_44:
  uint64_t v22 = v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v12 ^ v13 ^ v16 ^ v18 ^ v20 ^ v14;
  uint64_t v23 = PBHashBytes();
  return v22 ^ v23 ^ PBHashBytes();
}

void CMMsl::PedOdomFusionExtendedModeSegment::~PedOdomFusionExtendedModeSegment(CMMsl::PedOdomFusionExtendedModeSegment *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment(uint64_t this, const CMMsl::PedOdomFusionExtendedModeSegment *a2)
{
  *(void *)this = off_1003A7FC8;
  *(_DWORD *)(this + 56) = 0;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    char v3 = 4;
    *(unsigned char *)(this + 56) = 4;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 56) & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 4);
    v3 |= 8u;
    *(unsigned char *)(this + 56) = v3;
    *(void *)(this + 32) = v5;
    char v2 = *((unsigned char *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 56) = v3;
    *(void *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 56) = v3;
  *(void *)(this + 8) = v7;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(unsigned char *)(this + 56) = v3;
  *(void *)(this + 40) = v8;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_16:
    int v10 = *((_DWORD *)a2 + 12);
    *(unsigned char *)(this + 56) = v3 | 0x20;
    *(_DWORD *)(this + 48) = v10;
    return this;
  }
LABEL_15:
  char v9 = *((unsigned char *)a2 + 52);
  v3 |= 0x40u;
  *(unsigned char *)(this + 56) = v3;
  *(unsigned char *)(this + 52) = v9;
  if ((*((unsigned char *)a2 + 56) & 0x20) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::operator=(uint64_t a1, const CMMsl::PedOdomFusionExtendedModeSegment *a2)
{
  if ((const CMMsl::PedOdomFusionExtendedModeSegment *)a1 != a2)
  {
    CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12;
    uint64_t v12 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 52);
    *(unsigned char *)(a1 + 52) = v14;
    char v14 = v3;
    int v7 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    int v13 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PedOdomFusionExtendedModeSegment *a2, CMMsl::PedOdomFusionExtendedModeSegment *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  LOBYTE(v3) = *((unsigned char *)this + 52);
  *((unsigned char *)this + 52) = *((unsigned char *)a2 + 52);
  *((unsigned char *)a2 + 52) = v3;
  int v9 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  return result;
}

double CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7FC8;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7FC8;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v12 = off_1003A7FC8;
    int v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    uint64_t v4 = *(void *)(a2 + 40);
    char v5 = *(unsigned char *)(a2 + 52);
    int v6 = *(_DWORD *)(a2 + 48);
    int v18 = *(_DWORD *)(a1 + 56);
    long long v14 = *(_OWORD *)(a1 + 24);
    long long v7 = *(_OWORD *)(a1 + 8);
    long long v8 = *(_OWORD *)(a2 + 8);
    long long v9 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 8) = v8;
    long long v13 = v7;
    *(void *)&long long v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v4;
    uint64_t v15 = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 52);
    *(unsigned char *)(a1 + 52) = v5;
    char v17 = v3;
    int v10 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v6;
    int v16 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::formatText(CMMsl::PedOdomFusionExtendedModeSegment *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "batchedLocationFixType", *((_DWORD *)this + 12));
    char v5 = *((unsigned char *)this + 56);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 56) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "distOdom", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "distPed", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "isValid", *((unsigned char *)this + 52));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "timeStart", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timeStop", *((double *)this + 4));
  if ((*((unsigned char *)this + 56) & 0x10) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "uncOdom", *((double *)this + 5));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::readFrom(CMMsl::PedOdomFusionExtendedModeSegment *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 56) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_38;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_58;
            case 2u:
              *((unsigned char *)this + 56) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_38;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_58;
            case 3u:
              *((unsigned char *)this + 56) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_38;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_58;
            case 4u:
              *((unsigned char *)this + 56) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_38;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_58;
            case 5u:
              *((unsigned char *)this + 56) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
LABEL_58:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_38:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_64;
            case 6u:
              *((unsigned char *)this + 56) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 52) = v22;
              goto LABEL_64;
            case 7u:
              *((unsigned char *)this + 56) |= 0x20u;
              unint64_t v23 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v24 = *(void *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_63;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_62:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_63;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_62;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)a2 + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_63;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_63:
              *((_DWORD *)this + 12) = v27;
LABEL_64:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_64;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 56);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 2u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 52), 6u);
    if ((*(unsigned char *)(v3 + 56) & 0x20) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x40) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_15:
  int v5 = *(_DWORD *)(v3 + 48);

  return PB::Writer::writeVarInt(a2, v5, 7u);
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::hash_value(CMMsl::PedOdomFusionExtendedModeSegment *this)
{
  if ((*((unsigned char *)this + 56) & 4) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 56) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_20:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 56) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_21:
    double v3 = 0.0;
    if (*((unsigned char *)this + 56)) {
      goto LABEL_9;
    }
LABEL_22:
    double v4 = 0.0;
    if ((*((unsigned char *)this + 56) & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_23:
    double v5 = 0.0;
    if ((*((unsigned char *)this + 56) & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_24:
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 56) & 0x20) != 0) {
      goto LABEL_16;
    }
LABEL_25:
    uint64_t v7 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ v6 ^ v7;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 8) == 0) {
    goto LABEL_20;
  }
LABEL_3:
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 2) == 0) {
    goto LABEL_21;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 1) == 0) {
    goto LABEL_22;
  }
LABEL_9:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 0x10) == 0) {
    goto LABEL_23;
  }
LABEL_12:
  double v5 = *((double *)this + 5);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 0x40) == 0) {
    goto LABEL_24;
  }
LABEL_15:
  uint64_t v6 = *((unsigned __int8 *)this + 52);
  if ((*((unsigned char *)this + 56) & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_16:
  uint64_t v7 = *((int *)this + 12);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ v6 ^ v7;
}

void CMMsl::PedestrianCalorieModelDebugging::~PedestrianCalorieModelDebugging(CMMsl::PedestrianCalorieModelDebugging *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging(uint64_t this, const CMMsl::PedestrianCalorieModelDebugging *a2)
{
  *(void *)this = off_1003A8000;
  *(_DWORD *)(this + 116) = 0;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 8);
    __int16 v3 = 128;
    *(_WORD *)(this + 116) = 128;
    *(void *)(this + 64) = v4;
    __int16 v2 = *((_WORD *)a2 + 58);
    if ((v2 & 0x2000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 58) & 0x2000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 27);
    v3 |= 0x2000u;
    *(_WORD *)(this + 116) = v3;
    *(_DWORD *)(this + 108) = v5;
    __int16 v2 = *((_WORD *)a2 + 58);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 116) = v3;
    *(void *)(this + 24) = v6;
    __int16 v2 = *((_WORD *)a2 + 58);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 56) = v7;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v9 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 8) = v9;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 16) = v10;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v11 = *((void *)a2 + 12);
  v3 |= 0x800u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 96) = v11;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v12 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 32) = v12;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v13 = *((void *)a2 + 9);
  v3 |= 0x100u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 72) = v13;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v14 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 48) = v14;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v15 = *((void *)a2 + 11);
  v3 |= 0x400u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 88) = v15;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v16 = *((void *)a2 + 10);
  v3 |= 0x200u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 80) = v16;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_33;
  }
LABEL_32:
  char v17 = *((unsigned char *)a2 + 113);
  v3 |= 0x8000u;
  *(_WORD *)(this + 116) = v3;
  *(unsigned char *)(this + 113) = v17;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0) {
      return this;
    }
LABEL_34:
    int v19 = *((_DWORD *)a2 + 26);
    *(_WORD *)(this + 116) = v3 | 0x1000;
    *(_DWORD *)(this + 104) = v19;
    return this;
  }
LABEL_33:
  char v18 = *((unsigned char *)a2 + 112);
  v3 |= 0x4000u;
  *(_WORD *)(this + 116) = v3;
  *(unsigned char *)(this + 112) = v18;
  if ((*((_WORD *)a2 + 58) & 0x1000) != 0) {
    goto LABEL_34;
  }
  return this;
}

CMMsl *CMMsl::PedestrianCalorieModelDebugging::operator=(CMMsl *a1, const CMMsl::PedestrianCalorieModelDebugging *a2)
{
  if (a1 != a2)
  {
    CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PedestrianCalorieModelDebugging *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PedestrianCalorieModelDebugging *a2, CMMsl::PedestrianCalorieModelDebugging *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  int v5 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
  uint64_t v14 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v14;
  uint64_t v15 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v15;
  double result = *((double *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((double *)a2 + 10) = result;
  LOBYTE(v5) = *((unsigned char *)this + 113);
  *((unsigned char *)this + 113) = *((unsigned char *)a2 + 113);
  *((unsigned char *)a2 + 113) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 112);
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((unsigned char *)a2 + 112) = v5;
  int v17 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v17;
  return result;
}

double CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8000;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  double result = *(double *)(a2 + 80);
  *(double *)(a1 + 80) = result;
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return result;
}

CMMsl *CMMsl::PedestrianCalorieModelDebugging::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PedestrianCalorieModelDebugging *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::formatText(CMMsl::PedestrianCalorieModelDebugging *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 58);
  if (v5)
  {
    PB::TextFormatter::format(a2, "activeTime", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 58);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "currentPace", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "distance", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "duration", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "firstStepTime", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "gradeType", *((_DWORD *)this + 26));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isIndoor", *((unsigned char *)this + 112));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "isMotionOverrideSet", *((unsigned char *)this + 113));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "metsWR", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "rawDistance", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "steps", *((_DWORD *)this + 27));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "stepsDuration", *((double *)this + 9));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "truthMetsGradeCorrected", *((double *)this + 10));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x400) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "truthMetsStrollerCorrected", *((double *)this + 11));
  if ((*((_WORD *)this + 58) & 0x800) != 0) {
LABEL_17:
  }
    PB::TextFormatter::format(a2, "verticalSpeed", *((double *)this + 12));
LABEL_18:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::readFrom(CMMsl::PedestrianCalorieModelDebugging *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 58) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 2u:
              *((_WORD *)this + 58) |= 0x2000u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_102;
                  }
                  unint64_t v39 = v21++;
                  char v40 = *(unsigned char *)(v22 + v39);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_101;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_102;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *((_DWORD *)this + 27) = v25;
              goto LABEL_108;
            case 3u:
              *((_WORD *)this + 58) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 4u:
              *((_WORD *)this + 58) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 5u:
              *((_WORD *)this + 58) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 6u:
              *((_WORD *)this + 58) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 7u:
              *((_WORD *)this + 58) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 8u:
              *((_WORD *)this + 58) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 9u:
              *((_WORD *)this + 58) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 0xAu:
              *((_WORD *)this + 58) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 0xBu:
              *((_WORD *)this + 58) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 0xCu:
              *((_WORD *)this + 58) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 0xDu:
              *((_WORD *)this + 58) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
LABEL_97:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_66:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_108;
            case 0xEu:
              *((_WORD *)this + 58) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 113) = v28;
              goto LABEL_108;
            case 0xFu:
              *((_WORD *)this + 58) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 112) = v30;
              goto LABEL_108;
            case 0x10u:
              *((_WORD *)this + 58) |= 0x1000u;
              unint64_t v31 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v32 = *(void *)a2;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v35 = 0;
                if (v2 <= v31) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_107;
                  }
                  unint64_t v43 = v31++;
                  char v44 = *(unsigned char *)(v32 + v43);
                  *((void *)a2 + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  BOOL v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_106:
                    unint64_t v2 = v43 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_106;
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              do
              {
                unint64_t v2 = v31 + 1;
                *((void *)a2 + 1) = v31 + 1;
                char v36 = *(unsigned char *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_107;
                }
                v33 += 7;
                unint64_t v31 = v2;
                BOOL v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_107:
              *((_DWORD *)this + 26) = v35;
LABEL_108:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_108;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 116);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
    __int16 v4 = *(_WORD *)(v3 + 116);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(this + 116) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 2u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 4u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 6u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 7u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 8u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 9u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0xDu);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
LABEL_32:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 112), 0xFu);
    if ((*(_WORD *)(v3 + 116) & 0x1000) == 0) {
      return this;
    }
    goto LABEL_33;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 113), 0xEu);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x4000) != 0) {
    goto LABEL_32;
  }
LABEL_16:
  if ((v4 & 0x1000) == 0) {
    return this;
  }
LABEL_33:
  unsigned int v5 = *(_DWORD *)(v3 + 104);

  return PB::Writer::writeVarInt(a2, v5, 0x10u);
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::hash_value(CMMsl::PedestrianCalorieModelDebugging *this)
{
  __int16 v1 = *((_WORD *)this + 58);
  if ((v1 & 0x80) != 0)
  {
    double v2 = *((double *)this + 8);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((*((_WORD *)this + 58) & 0x2000) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 27);
      if ((v1 & 4) != 0) {
        goto LABEL_4;
      }
LABEL_44:
      double v4 = 0.0;
      if ((v1 & 0x40) != 0) {
        goto LABEL_7;
      }
LABEL_45:
      double v5 = 0.0;
      if ((v1 & 0x10) != 0) {
        goto LABEL_10;
      }
LABEL_46:
      double v6 = 0.0;
      if (v1) {
        goto LABEL_13;
      }
LABEL_47:
      double v7 = 0.0;
      if ((v1 & 2) != 0) {
        goto LABEL_16;
      }
LABEL_48:
      double v8 = 0.0;
      if ((*((_WORD *)this + 58) & 0x800) != 0) {
        goto LABEL_19;
      }
LABEL_49:
      double v9 = 0.0;
      if ((v1 & 8) != 0) {
        goto LABEL_22;
      }
LABEL_50:
      double v10 = 0.0;
      if ((*((_WORD *)this + 58) & 0x100) != 0) {
        goto LABEL_25;
      }
LABEL_51:
      double v11 = 0.0;
      if ((v1 & 0x20) != 0) {
        goto LABEL_28;
      }
LABEL_52:
      double v12 = 0.0;
      if ((*((_WORD *)this + 58) & 0x400) != 0) {
        goto LABEL_31;
      }
LABEL_53:
      double v13 = 0.0;
      if ((*((_WORD *)this + 58) & 0x200) != 0) {
        goto LABEL_34;
      }
LABEL_54:
      double v14 = 0.0;
      if ((*((_WORD *)this + 58) & 0x8000) != 0) {
        goto LABEL_37;
      }
      goto LABEL_55;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 58) & 0x2000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_44;
  }
LABEL_4:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_45;
  }
LABEL_7:
  double v5 = *((double *)this + 7);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_46;
  }
LABEL_10:
  double v6 = *((double *)this + 5);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_47;
  }
LABEL_13:
  double v7 = *((double *)this + 1);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_48;
  }
LABEL_16:
  double v8 = *((double *)this + 2);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 58) & 0x800) == 0) {
    goto LABEL_49;
  }
LABEL_19:
  double v9 = *((double *)this + 12);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_50;
  }
LABEL_22:
  double v10 = *((double *)this + 4);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((*((_WORD *)this + 58) & 0x100) == 0) {
    goto LABEL_51;
  }
LABEL_25:
  double v11 = *((double *)this + 9);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_52;
  }
LABEL_28:
  double v12 = *((double *)this + 6);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((*((_WORD *)this + 58) & 0x400) == 0) {
    goto LABEL_53;
  }
LABEL_31:
  double v13 = *((double *)this + 11);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((*((_WORD *)this + 58) & 0x200) == 0) {
    goto LABEL_54;
  }
LABEL_34:
  double v14 = *((double *)this + 10);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((*((_WORD *)this + 58) & 0x8000) != 0)
  {
LABEL_37:
    uint64_t v15 = *((unsigned __int8 *)this + 113);
    if ((*((_WORD *)this + 58) & 0x4000) != 0) {
      goto LABEL_38;
    }
LABEL_56:
    uint64_t v16 = 0;
    if ((*((_WORD *)this + 58) & 0x1000) != 0) {
      goto LABEL_39;
    }
LABEL_57:
    uint64_t v17 = 0;
    return v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ v15 ^ v16 ^ v17;
  }
LABEL_55:
  uint64_t v15 = 0;
  if ((*((_WORD *)this + 58) & 0x4000) == 0) {
    goto LABEL_56;
  }
LABEL_38:
  uint64_t v16 = *((unsigned __int8 *)this + 112);
  if ((*((_WORD *)this + 58) & 0x1000) == 0) {
    goto LABEL_57;
  }
LABEL_39:
  uint64_t v17 = *((unsigned int *)this + 26);
  return v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ v15 ^ v16 ^ v17;
}

void CMMsl::PedestrianFenceExit::~PedestrianFenceExit(CMMsl::PedestrianFenceExit *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PedestrianFenceExit::PedestrianFenceExit(uint64_t this, const CMMsl::PedestrianFenceExit *a2)
{
  *(void *)this = off_1003A8038;
  *(void *)(this + 28) = 0xFFFFFFFFLL;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 32) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 32))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 32) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 7);
    *(unsigned char *)(this + 32) = v3 | 8;
    *(_DWORD *)(this + 28) = v7;
    return this;
  }
  int v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v6;
  if ((*((unsigned char *)a2 + 32) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::PedestrianFenceExit::operator=(uint64_t a1, const CMMsl::PedestrianFenceExit *a2)
{
  if ((const CMMsl::PedestrianFenceExit *)a1 != a2)
  {
    CMMsl::PedestrianFenceExit::PedestrianFenceExit((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v4;
    *(void *)&long long v3 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v9;
    uint64_t v9 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PedestrianFenceExit *a2, CMMsl::PedestrianFenceExit *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  int v7 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  return result;
}

float CMMsl::PedestrianFenceExit::PedestrianFenceExit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8038;
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A8038;
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::PedestrianFenceExit::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v8 = off_1003A8038;
    int v3 = *(_DWORD *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 28);
    *(_DWORD *)(a2 + 32) = 0;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v9 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    int v10 = v5;
    uint64_t v6 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v4;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PedestrianFenceExit::formatText(CMMsl::PedestrianFenceExit *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "radius", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestampExit", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestampSet", *((double *)this + 2));
  if ((*((unsigned char *)this + 32) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "userResponse", *((_DWORD *)this + 7));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PedestrianFenceExit::readFrom(CMMsl::PedestrianFenceExit *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_33;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_30;
            case 2u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_33;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_30:
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_49;
            case 3u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_49:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_33:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_55;
            case 4u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_54;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_53:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_53;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_54;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_54:
              *((_DWORD *)this + 7) = v25;
LABEL_55:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_55;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PedestrianFenceExit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
      if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  int v5 = *(_DWORD *)(v3 + 28);

  return PB::Writer::writeVarInt(a2, v5, 4u);
}

uint64_t CMMsl::PedestrianFenceExit::hash_value(CMMsl::PedestrianFenceExit *this)
{
  if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 32)) {
      goto LABEL_3;
    }
LABEL_13:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
  double v1 = *((double *)this + 2);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_6:
    float v3 = *((float *)this + 6);
    uint64_t v4 = LODWORD(v3);
    if (v3 == 0.0) {
      uint64_t v4 = 0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v5 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ v4 ^ v5;
  }
LABEL_14:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v5 = *((int *)this + 7);
  return *(void *)&v2 ^ *(void *)&v1 ^ v4 ^ v5;
}

void CMMsl::PedometerPathStraightness::~PedometerPathStraightness(CMMsl::PedometerPathStraightness *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PedometerPathStraightness::PedometerPathStraightness(CMMsl::PedometerPathStraightness *this, const CMMsl::PedometerPathStraightness *a2)
{
  *(void *)this = off_1003A8070;
  *((_DWORD *)this + 14) = 0;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    char v3 = 8;
    *((unsigned char *)this + 56) = 8;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 56) & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 56) = v3;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    double result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((unsigned char *)this + 56) = v3;
    *((double *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((unsigned char *)this + 56) = v3;
  *((double *)this + 2) = result;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_14:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 56) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_13:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((unsigned char *)this + 56) = v3;
  *((double *)this + 6) = result;
  if (*((unsigned char *)a2 + 56)) {
    goto LABEL_14;
  }
  return result;
}

uint64_t CMMsl::PedometerPathStraightness::operator=(uint64_t a1, const CMMsl::PedometerPathStraightness *a2)
{
  if ((const CMMsl::PedometerPathStraightness *)a1 != a2)
  {
    CMMsl::PedometerPathStraightness::PedometerPathStraightness((CMMsl::PedometerPathStraightness *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PedometerPathStraightness *a2, CMMsl::PedometerPathStraightness *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::PedometerPathStraightness::PedometerPathStraightness(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8070;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8070;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PedometerPathStraightness::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = off_1003A8070;
    int v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    int v13 = *(_DWORD *)(a1 + 56);
    long long v11 = *(_OWORD *)(a1 + 24);
    long long v12 = *(_OWORD *)(a1 + 40);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 24);
    long long v7 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v4;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PedometerPathStraightness::formatText(CMMsl::PedometerPathStraightness *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 56);
  if (v5)
  {
    PB::TextFormatter::format(a2, "complexHandMotionPercentage", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "straightnessMetric", *((double *)this + 5));
  if ((*((unsigned char *)this + 56) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "walkPercentage", *((double *)this + 6));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PedometerPathStraightness::readFrom(CMMsl::PedometerPathStraightness *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 56) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 2u:
          *((unsigned char *)this + 56) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 3u:
          *((unsigned char *)this + 56) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 4u:
          *((unsigned char *)this + 56) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 5u:
          *((unsigned char *)this + 56) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 6u:
          *((unsigned char *)this + 56) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_43:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_41:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PedometerPathStraightness::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 56);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 3u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(double *)(v3 + 48), 5u);
    if ((*(unsigned char *)(v3 + 56) & 1) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x20) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 6u);
}

uint64_t CMMsl::PedometerPathStraightness::hash_value(CMMsl::PedometerPathStraightness *this)
{
  if ((*((unsigned char *)this + 56) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 56) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_21:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 56) & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_22:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 56) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_23:
    double v4 = 0.0;
    if ((*((unsigned char *)this + 56) & 0x20) != 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 4) == 0) {
    goto LABEL_21;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 0x10) == 0) {
    goto LABEL_22;
  }
LABEL_6:
  double v3 = *((double *)this + 5);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 2) == 0) {
    goto LABEL_23;
  }
LABEL_9:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 0x20) != 0)
  {
LABEL_12:
    double v5 = *((double *)this + 6);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if (*((unsigned char *)this + 56)) {
      goto LABEL_15;
    }
LABEL_25:
    double v6 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6;
  }
LABEL_24:
  double v5 = 0.0;
  if ((*((unsigned char *)this + 56) & 1) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6;
}

void CMMsl::PeerState::~PeerState(CMMsl::PeerState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PeerState::PeerState(uint64_t this, const CMMsl::PeerState *a2)
{
  *(void *)this = off_1003A80A8;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::PeerState *CMMsl::PeerState::operator=(const CMMsl::PeerState *a1, const CMMsl::PeerState *a2)
{
  if (a1 != a2)
  {
    CMMsl::PeerState::PeerState((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PeerState *a2, CMMsl::PeerState *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::PeerState::PeerState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A80A8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A80A8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::PeerState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A80A8;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::PeerState::formatText(CMMsl::PeerState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "motionState", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PeerState::readFrom(CMMsl::PeerState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PeerState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::PeerState::hash_value(CMMsl::PeerState *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

void CMMsl::PencilDeviceMotion::~PencilDeviceMotion(CMMsl::PencilDeviceMotion *this)
{
  *(void *)this = off_1003A80E0;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PencilDeviceMotion::~PencilDeviceMotion(this);

  operator delete();
}

CMMsl::PencilDeviceMotion *CMMsl::PencilDeviceMotion::PencilDeviceMotion(CMMsl::PencilDeviceMotion *this, const CMMsl::PencilDeviceMotion *a2)
{
  *(void *)this = off_1003A80E0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (this != a2) {
    sub_100024308((char *)this + 8, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  char v4 = *((unsigned char *)a2 + 48);
  if ((v4 & 2) != 0)
  {
    int v5 = *((_DWORD *)a2 + 11);
    *((unsigned char *)this + 48) |= 2u;
    *((_DWORD *)this + 11) = v5;
    char v4 = *((unsigned char *)a2 + 48);
  }
  if (v4)
  {
    int v6 = *((_DWORD *)a2 + 10);
    *((unsigned char *)this + 48) |= 1u;
    *((_DWORD *)this + 10) = v6;
  }
  return this;
}

uint64_t CMMsl::PencilDeviceMotion::operator=(uint64_t a1, const CMMsl::PencilDeviceMotion *a2)
{
  if ((const CMMsl::PencilDeviceMotion *)a1 != a2)
  {
    CMMsl::PencilDeviceMotion::PencilDeviceMotion((CMMsl::PencilDeviceMotion *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v11;
    int v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v8 = v4;
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    CMMsl::PencilDeviceMotion::~PencilDeviceMotion((CMMsl::PencilDeviceMotion *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PencilDeviceMotion *a2, CMMsl::PencilDeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  int v8 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  float result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  return result;
}

uint64_t CMMsl::PencilDeviceMotion::PencilDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A80E0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100274A30(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PencilDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PencilDeviceMotion::PencilDeviceMotion((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v11;
    int v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v8 = v4;
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    CMMsl::PencilDeviceMotion::~PencilDeviceMotion((CMMsl::PencilDeviceMotion *)v7);
  }
  return a1;
}

uint64_t CMMsl::PencilDeviceMotion::formatText(CMMsl::PencilDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "gyroBias", v7);
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "super");
  }
  char v9 = *((unsigned char *)this + 48);
  if (v9)
  {
    PB::TextFormatter::format(a2, "temperatureGyro", *((float *)this + 10));
    char v9 = *((unsigned char *)this + 48);
  }
  if ((v9 & 2) != 0) {
    PB::TextFormatter::format(a2, "temperatureGyroBias", *((float *)this + 11));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PencilDeviceMotion::readFrom(CMMsl::PencilDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 8);
    char v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v23 = *((void *)a2 + 1);
            unint64_t v24 = *((void *)a2 + 2);
            while (v23 < v24 && !*((unsigned char *)a2 + 24))
            {
              char v26 = (char *)*((void *)this + 2);
              unint64_t v25 = *((void *)this + 3);
              if ((unint64_t)v26 >= v25)
              {
                char v28 = (char *)*v8;
                uint64_t v29 = (v26 - (unsigned char *)*v8) >> 2;
                unint64_t v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 62) {
                  goto LABEL_87;
                }
                uint64_t v31 = v25 - (void)v28;
                if (v31 >> 1 > v30) {
                  unint64_t v30 = v31 >> 1;
                }
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v32 = v30;
                }
                if (v32)
                {
                  char v33 = (char *)sub_100024458((uint64_t)v9, v32);
                  char v28 = (char *)*((void *)this + 1);
                  char v26 = (char *)*((void *)this + 2);
                }
                else
                {
                  char v33 = 0;
                }
                unsigned int v34 = &v33[4 * v29];
                *(_DWORD *)unsigned int v34 = 0;
                char v27 = v34 + 4;
                while (v26 != v28)
                {
                  int v35 = *((_DWORD *)v26 - 1);
                  v26 -= 4;
                  *((_DWORD *)v34 - 1) = v35;
                  v34 -= 4;
                }
                *((void *)this + 1) = v34;
                *((void *)this + 2) = v27;
                *((void *)this + 3) = &v33[4 * v32];
                if (v28) {
                  operator delete(v28);
                }
              }
              else
              {
                *(_DWORD *)char v26 = 0;
                char v27 = v26 + 4;
              }
              *((void *)this + 2) = v27;
              unint64_t v36 = *((void *)a2 + 1);
              if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v27 - 1) = *(_DWORD *)(*(void *)a2 + v36);
              unint64_t v24 = *((void *)a2 + 2);
              unint64_t v23 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v23;
            }
            PB::Reader::recallMark();
          }
          else
          {
            char v40 = (char *)*((void *)this + 2);
            unint64_t v39 = *((void *)this + 3);
            if ((unint64_t)v40 >= v39)
            {
              unsigned int v42 = (char *)*v8;
              uint64_t v43 = (v40 - (unsigned char *)*v8) >> 2;
              unint64_t v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62) {
LABEL_87:
              }
                sub_10000EE98();
              uint64_t v45 = v39 - (void)v42;
              if (v45 >> 1 > v44) {
                unint64_t v44 = v45 >> 1;
              }
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v44;
              }
              if (v46)
              {
                unint64_t v47 = (char *)sub_100024458((uint64_t)v9, v46);
                unsigned int v42 = (char *)*((void *)this + 1);
                char v40 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v47 = 0;
              }
              char v48 = &v47[4 * v43];
              *(_DWORD *)char v48 = 0;
              char v41 = v48 + 4;
              while (v40 != v42)
              {
                int v49 = *((_DWORD *)v40 - 1);
                v40 -= 4;
                *((_DWORD *)v48 - 1) = v49;
                v48 -= 4;
              }
              *((void *)this + 1) = v48;
              *((void *)this + 2) = v41;
              *((void *)this + 3) = &v47[4 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *(_DWORD *)char v40 = 0;
              char v41 = v40 + 4;
            }
            *((void *)this + 2) = v41;
            unint64_t v50 = *((void *)a2 + 1);
            if (v50 <= 0xFFFFFFFFFFFFFFFBLL && v50 + 4 <= *((void *)a2 + 2))
            {
              *(v41 - 1) = *(_DWORD *)(*(void *)a2 + v50);
LABEL_78:
              *((void *)a2 + 1) += 4;
            }
            else
            {
LABEL_76:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_79:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 3u:
          *((unsigned char *)this + 48) |= 2u;
          unint64_t v37 = *((void *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)a2 + 2)) {
            goto LABEL_76;
          }
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v37);
          goto LABEL_78;
        case 4u:
          *((unsigned char *)this + 48) |= 1u;
          unint64_t v38 = *((void *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
            goto LABEL_76;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v38);
          goto LABEL_78;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_79;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  long long v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 2u);
  }
  char v8 = *(unsigned char *)(v3 + 48);
  if ((v8 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 44), 3u);
    char v8 = *(unsigned char *)(v3 + 48);
  }
  if (v8)
  {
    float v9 = *(float *)(v3 + 40);
    return PB::Writer::write(a2, v9, 4u);
  }
  return this;
}

uint64_t CMMsl::PencilDeviceMotion::hash_value(CMMsl::PencilDeviceMotion *this)
{
  unint64_t v2 = (CMMsl::AuxiliaryDeviceMotion *)*((void *)this + 4);
  if (v2) {
    uint64_t v3 = CMMsl::AuxiliaryDeviceMotion::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
    float v8 = *((float *)this + 11);
    uint64_t v5 = LODWORD(v8);
    if (v8 == 0.0) {
      uint64_t v5 = 0;
    }
    if (*((unsigned char *)this + 48)) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v7 = 0;
    return v4 ^ v3 ^ v5 ^ v7;
  }
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  float v6 = *((float *)this + 10);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v4 ^ v3 ^ v5 ^ v7;
}

uint64_t CMMsl::PencilDeviceMotion::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

void CMMsl::PencilFusionDMYawAlignmentUpdate::~PencilFusionDMYawAlignmentUpdate(CMMsl::PencilFusionDMYawAlignmentUpdate *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate(uint64_t this, const CMMsl::PencilFusionDMYawAlignmentUpdate *a2)
{
  *(void *)this = off_1003A8118;
  *(_DWORD *)(this + 64) = 0;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *((void *)a2 + 6);
    char v3 = 32;
    *(unsigned char *)(this + 64) = 32;
    *(void *)(this + 48) = v4;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 64) & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4u;
    *(unsigned char *)(this + 64) = v3;
    *(void *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 64);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *((void *)a2 + 4);
    v3 |= 8u;
    *(unsigned char *)(this + 64) = v3;
    *(void *)(this + 32) = v6;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 14);
  v3 |= 0x40u;
  *(unsigned char *)(this + 64) = v3;
  *(_DWORD *)(this + 56) = v7;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(unsigned char *)(this + 64) = v3;
  *(void *)(this + 40) = v8;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v9 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 64) = v3;
  *(void *)(this + 8) = v9;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_18:
    int v11 = *((_DWORD *)a2 + 15);
    *(unsigned char *)(this + 64) = v3 | 0x80;
    *(_DWORD *)(this + 60) = v11;
    return this;
  }
LABEL_17:
  uint64_t v10 = *((void *)a2 + 2);
  v3 |= 2u;
  *(unsigned char *)(this + 64) = v3;
  *(void *)(this + 16) = v10;
  if ((*((unsigned char *)a2 + 64) & 0x80) != 0) {
    goto LABEL_18;
  }
  return this;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::operator=(uint64_t a1, const CMMsl::PencilFusionDMYawAlignmentUpdate *a2)
{
  if ((const CMMsl::PencilFusionDMYawAlignmentUpdate *)a1 != a2)
  {
    CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate((uint64_t)v9, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    long long v11 = v3;
    *(void *)&long long v4 = v14;
    *(void *)&long long v3 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v4;
    int v6 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    int v15 = v6;
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12;
    uint64_t v12 = v7;
    uint64_t v13 = v3;
    uint64_t v14 = v5;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilFusionDMYawAlignmentUpdate *a2, CMMsl::PencilFusionDMYawAlignmentUpdate *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  int v7 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  LODWORD(v10) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  return result;
}

double CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8118;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8118;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return result;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    uint64_t v4 = *(void *)(a2 + 40);
    long long v5 = *(_OWORD *)(a2 + 24);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    long long v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    long long v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v11 = off_1003A8118;
    int v17 = *(_DWORD *)(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v4;
    long long v12 = v9;
    long long v13 = v8;
    *(void *)&long long v9 = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = v3;
    *(void *)(a1 + 56) = v9;
    uint64_t v15 = v6;
    uint64_t v16 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::formatText(CMMsl::PencilFusionDMYawAlignmentUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 64);
  if (v5)
  {
    PB::TextFormatter::format(a2, "firstRingSensorTimeStampMicroSeconds", *((void *)this + 1));
    char v5 = *((unsigned char *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "lastRingSensorTimeStampMicroSeconds", *((void *)this + 2));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "medianBufferNumSamples", *((_DWORD *)this + 14));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "medianNorthAlignmentEstimateRad", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "newNorthAlignmentEstimateRad", *((double *)this + 4));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "numRingSensorSamples", *((_DWORD *)this + 15));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "timeElapsedSinceLastUpdateMicroSeconds", *((void *)this + 5));
  if ((*((unsigned char *)this + 64) & 0x20) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 6));
LABEL_10:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::readFrom(CMMsl::PencilFusionDMYawAlignmentUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 64) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_32;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 2u:
              *((unsigned char *)this + 64) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_32;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 3u:
              *((unsigned char *)this + 64) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_104:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_32:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_130;
            case 4u:
              *((unsigned char *)this + 64) |= 0x40u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_109;
                  }
                  unint64_t v53 = v21++;
                  char v54 = *(unsigned char *)(v22 + v53);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_108;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *((_DWORD *)this + 14) = v25;
              goto LABEL_130;
            case 5u:
              *((unsigned char *)this + 64) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_114;
                  }
                  unint64_t v57 = v27++;
                  char v58 = *(unsigned char *)(v28 + v57);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_113:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_113;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_114:
              *((void *)this + 5) = v31;
              goto LABEL_130;
            case 6u:
              *((unsigned char *)this + 64) |= 1u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_119;
                  }
                  unint64_t v61 = v33++;
                  char v62 = *(unsigned char *)(v34 + v61);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_118:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_118;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_119:
              *((void *)this + 1) = v37;
              goto LABEL_130;
            case 7u:
              *((unsigned char *)this + 64) |= 2u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    uint64_t v43 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_124;
                  }
                  unint64_t v65 = v39++;
                  char v66 = *(unsigned char *)(v40 + v65);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v43 = 0;
LABEL_123:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v43 = 0;
                }
                goto LABEL_123;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_124;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              uint64_t v43 = 0;
LABEL_124:
              *((void *)this + 2) = v43;
              goto LABEL_130;
            case 8u:
              *((unsigned char *)this + 64) |= 0x80u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_129;
                  }
                  unint64_t v69 = v45++;
                  char v70 = *(unsigned char *)(v46 + v69);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_128;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_129;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *((_DWORD *)this + 15) = v49;
LABEL_130:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_130;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 64);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48), 1u);
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 64) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 4u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 5u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 7u);
    if ((*(unsigned char *)(v3 + 64) & 0x80) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 6u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_17:
  unsigned int v5 = *(_DWORD *)(v3 + 60);

  return PB::Writer::writeVarInt(a2, v5, 8u);
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::hash_value(CMMsl::PencilFusionDMYawAlignmentUpdate *this)
{
  if ((*((unsigned char *)this + 64) & 0x20) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 64) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_17:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 64) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_18:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 64) & 0x40) != 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
  double v1 = *((double *)this + 6);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 8) == 0) {
    goto LABEL_18;
  }
LABEL_6:
  double v3 = *((double *)this + 4);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 0x40) != 0)
  {
LABEL_9:
    uint64_t v4 = *((unsigned int *)this + 14);
    if ((*((unsigned char *)this + 64) & 0x10) != 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 64) & 0x10) != 0)
  {
LABEL_10:
    uint64_t v5 = *((void *)this + 5);
    if (*((unsigned char *)this + 64)) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v5 = 0;
  if (*((unsigned char *)this + 64))
  {
LABEL_11:
    uint64_t v6 = *((void *)this + 1);
    if ((*((unsigned char *)this + 64) & 2) != 0) {
      goto LABEL_12;
    }
LABEL_22:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 64) & 0x80) != 0) {
      goto LABEL_13;
    }
LABEL_23:
    uint64_t v8 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_21:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 64) & 2) == 0) {
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v7 = *((void *)this + 2);
  if ((*((unsigned char *)this + 64) & 0x80) == 0) {
    goto LABEL_23;
  }
LABEL_13:
  uint64_t v8 = *((unsigned int *)this + 15);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult(CMMsl::PencilFusionReplayResult *this)
{
  *(void *)this = off_1003A8150;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  double v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult(this);

  operator delete();
}

CMMsl::PencilFusionReplayResult *CMMsl::PencilFusionReplayResult::PencilFusionReplayResult(CMMsl::PencilFusionReplayResult *this, const CMMsl::PencilFusionReplayResult *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = off_1003A8150;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if ((*((unsigned char *)a2 + 64) & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 7);
    *((unsigned char *)this + 64) |= 4u;
    *((void *)this + 7) = v4;
  }
  if (this != a2) {
    sub_1000330C4((char *)this + 8, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  char v5 = *((unsigned char *)a2 + 64);
  if (v5)
  {
    uint64_t v6 = *((void *)a2 + 4);
    *((unsigned char *)this + 64) |= 1u;
    *((void *)this + 4) = v6;
    char v5 = *((unsigned char *)a2 + 64);
  }
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 5);
    *((unsigned char *)this + 64) |= 2u;
    *((void *)this + 5) = v7;
  }
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::operator=(uint64_t a1, const CMMsl::PencilFusionReplayResult *a2)
{
  if ((const CMMsl::PencilFusionReplayResult *)a1 != a2)
  {
    CMMsl::PencilFusionReplayResult::PencilFusionReplayResult((CMMsl::PencilFusionReplayResult *)v11, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = v16;
    *(void *)(a1 + 48) = v15;
    *(void *)(a1 + 56) = v6;
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v7;
    uint64_t v8 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v8;
    long long v9 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v14;
    long long v14 = v9;
    CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult((CMMsl::PencilFusionReplayResult *)v11);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PencilFusionReplayResult *a2, CMMsl::PencilFusionReplayResult *a3)
{
  int v3 = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *(void *)(this + 48);
  uint64_t v5 = *(void *)(this + 56);
  uint64_t v6 = *((void *)a2 + 7);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *(void *)(this + 56) = v6;
  *((void *)a2 + 6) = v4;
  *((void *)a2 + 7) = v5;
  uint64_t v7 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *(void *)(this + 24);
  uint64_t v10 = *(void *)(this + 32);
  uint64_t v11 = *((void *)a2 + 4);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *(void *)(this + 32) = v11;
  *((void *)a2 + 3) = v9;
  *((void *)a2 + 4) = v10;
  uint64_t v12 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::PencilFusionReplayResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8150;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_100274A30(v4, (__n128 *)(a2 + 8));
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PencilFusionReplayResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PencilFusionReplayResult::PencilFusionReplayResult((uint64_t)v11, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = v16;
    *(void *)(a1 + 48) = v15;
    *(void *)(a1 + 56) = v6;
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v7;
    uint64_t v8 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v8;
    long long v9 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v14;
    long long v14 = v9;
    CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult((CMMsl::PencilFusionReplayResult *)v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionReplayResult::formatText(CMMsl::PencilFusionReplayResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 64);
  if (v5)
  {
    PB::TextFormatter::format(a2, "lastAuxTimeStampMicroSeconds", *((void *)this + 4));
    char v5 = *((unsigned char *)this + 64);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "lastRingSensorTimeStampMicroSeconds", *((void *)this + 5));
  }
  uint64_t v6 = (double *)*((void *)this + 1);
  long long v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "qSP", v8);
  }
  uint64_t v9 = *((void *)this + 6);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "super");
  }
  if ((*((unsigned char *)this + 64) & 4) != 0) {
    PB::TextFormatter::format(a2, "timeStampMicroSeconds", *((void *)this + 7));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PencilFusionReplayResult::readFrom(CMMsl::PencilFusionReplayResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *((unsigned char *)this + 64) |= 4u;
          unint64_t v23 = *((void *)a2 + 1);
          unint64_t v24 = *((void *)a2 + 2);
          uint64_t v25 = *(void *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v28 = 0;
            do
            {
              unint64_t v29 = v23 + 1;
              *((void *)a2 + 1) = v23 + 1;
              char v30 = *(unsigned char *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0) {
                goto LABEL_108;
              }
              v26 += 7;
              unint64_t v23 = v29;
              BOOL v16 = v27++ > 8;
            }
            while (!v16);
LABEL_78:
            uint64_t v28 = 0;
            goto LABEL_108;
          }
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v28 = 0;
          if (v24 <= v23) {
            unint64_t v24 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v24 == v23)
            {
              uint64_t v28 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v63 = v23 + 1;
              char v64 = *(unsigned char *)(v25 + v23);
              *((void *)a2 + 1) = v63;
              v28 |= (unint64_t)(v64 & 0x7F) << v61;
              if (v64 < 0)
              {
                v61 += 7;
                unint64_t v23 = v63;
                BOOL v16 = v62++ > 8;
                if (v16) {
                  goto LABEL_78;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v28 = 0;
              }
            }
            break;
          }
LABEL_108:
          *((void *)this + 7) = v28;
          goto LABEL_126;
        case 3u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v31 = *((void *)a2 + 1);
            unint64_t v32 = *((void *)a2 + 2);
            while (v31 < v32 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v34 = (char *)*((void *)this + 2);
              unint64_t v33 = *((void *)this + 3);
              if ((unint64_t)v34 >= v33)
              {
                unsigned int v36 = (char *)*v8;
                uint64_t v37 = (v34 - (unsigned char *)*v8) >> 3;
                unint64_t v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 61) {
                  goto LABEL_136;
                }
                uint64_t v39 = v33 - (void)v36;
                if (v39 >> 2 > v38) {
                  unint64_t v38 = v39 >> 2;
                }
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v40 = v38;
                }
                if (v40)
                {
                  char v41 = (char *)sub_10000EEB0((uint64_t)v9, v40);
                  unsigned int v36 = (char *)*((void *)this + 1);
                  uint64_t v34 = (char *)*((void *)this + 2);
                }
                else
                {
                  char v41 = 0;
                }
                unsigned int v42 = &v41[8 * v37];
                *(void *)unsigned int v42 = 0;
                char v35 = v42 + 8;
                while (v34 != v36)
                {
                  uint64_t v43 = *((void *)v34 - 1);
                  v34 -= 8;
                  *((void *)v42 - 1) = v43;
                  v42 -= 8;
                }
                *((void *)this + 1) = v42;
                *((void *)this + 2) = v35;
                *((void *)this + 3) = &v41[8 * v40];
                if (v36) {
                  operator delete(v36);
                }
              }
              else
              {
                *(void *)uint64_t v34 = 0;
                char v35 = v34 + 8;
              }
              *((void *)this + 2) = v35;
              unint64_t v44 = *((void *)a2 + 1);
              if (v44 > 0xFFFFFFFFFFFFFFF7 || v44 + 8 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v35 - 1) = *(void *)(*(void *)a2 + v44);
              unint64_t v32 = *((void *)a2 + 2);
              unint64_t v31 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v31;
            }
            PB::Reader::recallMark();
          }
          else
          {
            char v66 = (char *)*((void *)this + 2);
            unint64_t v65 = *((void *)this + 3);
            if ((unint64_t)v66 >= v65)
            {
              v76 = (char *)*v8;
              uint64_t v77 = (v66 - (unsigned char *)*v8) >> 3;
              unint64_t v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 61) {
LABEL_136:
              }
                sub_10000EE98();
              uint64_t v79 = v65 - (void)v76;
              if (v79 >> 2 > v78) {
                unint64_t v78 = v79 >> 2;
              }
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v78;
              }
              if (v80)
              {
                unint64_t v81 = (char *)sub_10000EEB0((uint64_t)v9, v80);
                v76 = (char *)*((void *)this + 1);
                char v66 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v81 = 0;
              }
              unint64_t v82 = &v81[8 * v77];
              *(void *)unint64_t v82 = 0;
              char v67 = v82 + 8;
              while (v66 != v76)
              {
                uint64_t v83 = *((void *)v66 - 1);
                v66 -= 8;
                *((void *)v82 - 1) = v83;
                v82 -= 8;
              }
              *((void *)this + 1) = v82;
              *((void *)this + 2) = v67;
              *((void *)this + 3) = &v81[8 * v80];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(void *)char v66 = 0;
              char v67 = v66 + 8;
            }
            *((void *)this + 2) = v67;
            unint64_t v84 = *((void *)a2 + 1);
            if (v84 <= 0xFFFFFFFFFFFFFFF7 && v84 + 8 <= *((void *)a2 + 2))
            {
              *(v67 - 1) = *(void *)(*(void *)a2 + v84);
              *((void *)a2 + 1) += 8;
            }
            else
            {
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_126:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 4u:
          *((unsigned char *)this + 64) |= 1u;
          unint64_t v45 = *((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
          uint64_t v47 = *(void *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)a2 + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_111;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v16 = v49++ > 8;
            }
            while (!v16);
LABEL_87:
            uint64_t v50 = 0;
            goto LABEL_111;
          }
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              uint64_t v50 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v70 = v45 + 1;
              char v71 = *(unsigned char *)(v47 + v45);
              *((void *)a2 + 1) = v70;
              v50 |= (unint64_t)(v71 & 0x7F) << v68;
              if (v71 < 0)
              {
                v68 += 7;
                unint64_t v45 = v70;
                BOOL v16 = v69++ > 8;
                if (v16) {
                  goto LABEL_87;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v50 = 0;
              }
            }
            break;
          }
LABEL_111:
          *((void *)this + 4) = v50;
          goto LABEL_126;
        case 5u:
          *((unsigned char *)this + 64) |= 2u;
          unint64_t v53 = *((void *)a2 + 1);
          unint64_t v54 = *((void *)a2 + 2);
          uint64_t v55 = *(void *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)a2 + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_114;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v16 = v57++ > 8;
            }
            while (!v16);
LABEL_94:
            uint64_t v58 = 0;
            goto LABEL_114;
          }
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              uint64_t v58 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v74 = v53 + 1;
              char v75 = *(unsigned char *)(v55 + v53);
              *((void *)a2 + 1) = v74;
              v58 |= (unint64_t)(v75 & 0x7F) << v72;
              if (v75 < 0)
              {
                v72 += 7;
                unint64_t v53 = v74;
                BOOL v16 = v73++ > 8;
                if (v16) {
                  goto LABEL_94;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v58 = 0;
              }
            }
            break;
          }
LABEL_114:
          *((void *)this + 5) = v58;
          goto LABEL_126;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_126;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionReplayResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 48);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  if ((*(unsigned char *)(v3 + 64) & 4) != 0) {
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 56), 2u);
  }
  char v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 3u);
  }
  char v8 = *(unsigned char *)(v3 + 64);
  if (v8)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 4u);
    char v8 = *(unsigned char *)(v3 + 64);
  }
  if ((v8 & 2) != 0)
  {
    unint64_t v9 = *(void *)(v3 + 40);
    return PB::Writer::writeVarInt(a2, v9, 5u);
  }
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::hash_value(CMMsl::PencilFusionReplayResult *this)
{
  unint64_t v2 = (CMMsl::PencilFusionResult *)*((void *)this + 6);
  if (v2) {
    uint64_t v3 = CMMsl::PencilFusionResult::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 64) & 4) != 0) {
    uint64_t v4 = *((void *)this + 7);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = PBHashBytes();
  if (*((unsigned char *)this + 64))
  {
    uint64_t v6 = *((void *)this + 4);
    if ((*((unsigned char *)this + 64) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v7 = 0;
    return v4 ^ v3 ^ v6 ^ v7 ^ v5;
  }
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 64) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v7 = *((void *)this + 5);
  return v4 ^ v3 ^ v6 ^ v7 ^ v5;
}

uint64_t CMMsl::PencilFusionReplayResult::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

void CMMsl::PencilFusionResult::~PencilFusionResult(CMMsl::PencilFusionResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PencilFusionResult::PencilFusionResult(uint64_t this, const CMMsl::PencilFusionResult *a2)
{
  *(void *)this = off_1003A8188;
  *(_DWORD *)(this + 76) = 0;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    __int16 v3 = 16;
    *(_WORD *)(this + 76) = 16;
    *(void *)(this + 40) = v4;
    __int16 v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 6);
    v3 |= 0x20u;
    *(_WORD *)(this + 76) = v3;
    *(void *)(this + 48) = v5;
    __int16 v2 = *((_WORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    uint64_t v6 = *((void *)a2 + 7);
    v3 |= 0x40u;
    *(_WORD *)(this + 76) = v3;
    *(void *)(this + 56) = v6;
    __int16 v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 76) = v3;
  *(void *)(this + 64) = v7;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v8 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 76) = v3;
  *(void *)(this + 8) = v8;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v9 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 76) = v3;
  *(void *)(this + 16) = v9;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v10 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 76) = v3;
  *(void *)(this + 32) = v10;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      return this;
    }
LABEL_20:
    char v12 = *((unsigned char *)a2 + 72);
    *(_WORD *)(this + 76) = v3 | 0x100;
    *(unsigned char *)(this + 72) = v12;
    return this;
  }
LABEL_19:
  uint64_t v11 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 76) = v3;
  *(void *)(this + 24) = v11;
  if ((*((_WORD *)a2 + 38) & 0x100) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::PencilFusionResult::operator=(uint64_t a1, const CMMsl::PencilFusionResult *a2)
{
  if ((const CMMsl::PencilFusionResult *)a1 != a2)
  {
    CMMsl::PencilFusionResult::PencilFusionResult((uint64_t)&v11, a2);
    uint64_t v3 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v16;
    uint64_t v16 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v4;
    long long v5 = v15;
    long long v7 = *(_OWORD *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v5;
    int v8 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v18;
    int v18 = v8;
    long long v14 = v7;
    long long v15 = v6;
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v9;
    LOBYTE(v9) = *(unsigned char *)(a1 + 72);
    *(unsigned char *)(a1 + 72) = v17;
    char v17 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilFusionResult *a2, CMMsl::PencilFusionResult *a3)
{
  int v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v6;
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  LOBYTE(v11) = *((unsigned char *)this + 72);
  *((unsigned char *)this + 72) = *((unsigned char *)a2 + 72);
  *((unsigned char *)a2 + 72) = v11;
  return result;
}

double CMMsl::PencilFusionResult::PencilFusionResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8188;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return result;
}

uint64_t CMMsl::PencilFusionResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PencilFusionResult::PencilFusionResult((uint64_t)&v11, a2);
    uint64_t v3 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v16;
    uint64_t v16 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v4;
    long long v5 = v15;
    long long v7 = *(_OWORD *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v5;
    int v8 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v18;
    int v18 = v8;
    long long v14 = v7;
    long long v15 = v6;
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v9;
    LOBYTE(v9) = *(unsigned char *)(a1 + 72);
    *(unsigned char *)(a1 + 72) = v17;
    char v17 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionResult::formatText(CMMsl::PencilFusionResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 38);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitudeAngle", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 38);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "azimuthAngle", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "estimated", *((unsigned char *)this + 72));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "estimationUpdateIndex", *((void *)this + 3));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "rollAngle", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "x", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "y", *((double *)this + 7));
  if ((*((_WORD *)this + 38) & 0x80) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "z", *((double *)this + 8));
LABEL_11:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilFusionResult::readFrom(CMMsl::PencilFusionResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 38) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_44;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_64;
            case 2u:
              *((_WORD *)this + 38) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_44;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_64;
            case 3u:
              *((_WORD *)this + 38) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_44;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_64;
            case 4u:
              *((_WORD *)this + 38) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_44;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_64;
            case 5u:
              *((_WORD *)this + 38) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_44;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_64;
            case 6u:
              *((_WORD *)this + 38) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_44;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_64;
            case 7u:
              *((_WORD *)this + 38) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_64:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_44:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_70;
            case 8u:
              *((_WORD *)this + 38) |= 4u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_69;
                  }
                  unint64_t v31 = v21++;
                  char v32 = *(unsigned char *)(v22 + v31);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_68:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_68;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_69:
              *((void *)this + 3) = v25;
LABEL_70:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *((_WORD *)this + 38) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 72) = v28;
              goto LABEL_70;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_70;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 76);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 3u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 4u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 6u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 8u);
    if ((*(_WORD *)(v3 + 76) & 0x100) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 7u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 0x100) == 0) {
    return this;
  }
LABEL_19:
  char v5 = *(unsigned char *)(v3 + 72);

  return PB::Writer::write(a2, v5, 9u);
}

uint64_t CMMsl::PencilFusionResult::hash_value(CMMsl::PencilFusionResult *this)
{
  __int16 v1 = *((_WORD *)this + 38);
  if ((v1 & 0x10) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_26:
    double v3 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_6;
    }
LABEL_27:
    double v4 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_9;
    }
LABEL_28:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_29:
    double v6 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_15;
    }
LABEL_30:
    double v7 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_18;
    }
LABEL_31:
    double v8 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_21;
    }
LABEL_32:
    uint64_t v9 = 0;
    if ((*((_WORD *)this + 38) & 0x100) != 0) {
      goto LABEL_22;
    }
LABEL_33:
    uint64_t v10 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ v9 ^ v10;
  }
  double v2 = *((double *)this + 5);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_26;
  }
LABEL_3:
  double v3 = *((double *)this + 6);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_27;
  }
LABEL_6:
  double v4 = *((double *)this + 7);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_28;
  }
LABEL_9:
  double v5 = *((double *)this + 8);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_30;
  }
LABEL_15:
  double v7 = *((double *)this + 2);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_31;
  }
LABEL_18:
  double v8 = *((double *)this + 4);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v9 = *((void *)this + 3);
  if ((*((_WORD *)this + 38) & 0x100) == 0) {
    goto LABEL_33;
  }
LABEL_22:
  uint64_t v10 = *((unsigned __int8 *)this + 72);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ v9 ^ v10;
}

void CMMsl::PencilFusionRingSensorTrustModelUpdate::~PencilFusionRingSensorTrustModelUpdate(CMMsl::PencilFusionRingSensorTrustModelUpdate *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate(CMMsl::PencilFusionRingSensorTrustModelUpdate *this, const CMMsl::PencilFusionRingSensorTrustModelUpdate *a2)
{
  *(void *)this = off_1003A81C0;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    char v3 = 2;
    *((unsigned char *)this + 32) = 2;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 28);
    v3 |= 8u;
    *((unsigned char *)this + 32) = v3;
    *((unsigned char *)this + 28) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 32) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  int v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 6) = v6;
  if (*((unsigned char *)a2 + 32)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::operator=(uint64_t a1, const CMMsl::PencilFusionRingSensorTrustModelUpdate *a2)
{
  if ((const CMMsl::PencilFusionRingSensorTrustModelUpdate *)a1 != a2)
  {
    CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate((CMMsl::PencilFusionRingSensorTrustModelUpdate *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    int v11 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v10;
    char v10 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilFusionRingSensorTrustModelUpdate *a2, CMMsl::PencilFusionRingSensorTrustModelUpdate *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 28);
  *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
  *((unsigned char *)a2 + 28) = v3;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A81C0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A81C0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v11 = off_1003A81C0;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    char v4 = *(unsigned char *)(a2 + 28);
    int v5 = *(_DWORD *)(a2 + 24);
    int v15 = *(_DWORD *)(a1 + 32);
    char v6 = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v4;
    char v14 = v6;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v5;
    int v13 = v7;
    long long v8 = *(_OWORD *)(a1 + 8);
    long long v9 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v9;
    long long v12 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::formatText(CMMsl::PencilFusionRingSensorTrustModelUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "avgRelOmegaRps", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "ringSensorTrustModelMode", *((_DWORD *)this + 6));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  if ((*((unsigned char *)this + 32) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "trustPencilRingSensorBool", *((unsigned char *)this + 28));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::readFrom(CMMsl::PencilFusionRingSensorTrustModelUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_38;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_49;
            case 2u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 28) = v22;
              goto LABEL_55;
            case 3u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v23 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v24 = *(void *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_54;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_53:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_53;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)a2 + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_54;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_54:
              *((_DWORD *)this + 6) = v27;
LABEL_55:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_49:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_38:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_55;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_55;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
      if ((*(unsigned char *)(v3 + 32) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::hash_value(CMMsl::PencilFusionRingSensorTrustModelUpdate *this)
{
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 28);
      if ((*((unsigned char *)this + 32) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 6);
    if (*((unsigned char *)this + 32)) {
      goto LABEL_5;
    }
LABEL_13:
    double v4 = 0.0;
    return v2 ^ *(void *)&v1 ^ v3 ^ *(void *)&v4;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_5:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return v2 ^ *(void *)&v1 ^ v3 ^ *(void *)&v4;
}

void CMMsl::PencilTipForce::~PencilTipForce(CMMsl::PencilTipForce *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PencilTipForce::PencilTipForce(CMMsl::PencilTipForce *this, const CMMsl::PencilTipForce *a2)
{
  *(void *)this = off_1003A81F8;
  *((_DWORD *)this + 6) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 24) = 1;
    *((double *)this + 1) = result;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 24) = v2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::PencilTipForce::operator=(uint64_t a1, const CMMsl::PencilTipForce *a2)
{
  if ((const CMMsl::PencilTipForce *)a1 != a2)
  {
    CMMsl::PencilTipForce::PencilTipForce((CMMsl::PencilTipForce *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilTipForce *a2, CMMsl::PencilTipForce *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PencilTipForce::PencilTipForce(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A81F8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A81F8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PencilTipForce::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = off_1003A81F8;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PencilTipForce::formatText(CMMsl::PencilTipForce *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "tipForce", *((double *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilTipForce::readFrom(CMMsl::PencilTipForce *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_28;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_28:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilTipForce::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
  {
    double v5 = *(double *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::PencilTipForce::hash_value(CMMsl::PencilTipForce *this)
{
  if (*((unsigned char *)this + 24))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    double v2 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1;
}

void CMMsl::PencilTouch::~PencilTouch(CMMsl::PencilTouch *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PencilTouch::PencilTouch(CMMsl::PencilTouch *this, const CMMsl::PencilTouch *a2)
{
  *(void *)this = off_1003A8230;
  *((_DWORD *)this + 22) = 0;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x20) != 0)
  {
    double result = *((double *)a2 + 6);
    __int16 v3 = 32;
    *((_WORD *)this + 44) = 32;
    *((double *)this + 6) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 7);
    v3 |= 0x40u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 7) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    double result = *((double *)a2 + 8);
    v3 |= 0x80u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 8) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x100) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v5 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 21) = v5;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v6 = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 20) = v6;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 2) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_24:
    double result = *((double *)a2 + 5);
    *((_WORD *)this + 44) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_23:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  if ((*((_WORD *)a2 + 44) & 0x10) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::PencilTouch::operator=(CMMsl *a1, const CMMsl::PencilTouch *a2)
{
  if (a1 != a2)
  {
    CMMsl::PencilTouch::PencilTouch((CMMsl::PencilTouch *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PencilTouch *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilTouch *a2, CMMsl::PencilTouch *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  uint64_t v6 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v6;
  uint64_t v7 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  int v10 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v10;
  int v11 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v11;
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v13;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::PencilTouch::PencilTouch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8230;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::PencilTouch::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PencilTouch::PencilTouch((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PencilTouch *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PencilTouch::formatText(CMMsl::PencilTouch *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitudeAngle", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "altitudeAngleConfidence", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "azimuthAngle", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "azimuthAngleConfidence", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "pathFlags", *((_DWORD *)this + 20));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "pathStage", *((_DWORD *)this + 21));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "positionConfidence", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "x", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "y", *((double *)this + 8));
  if ((*((_WORD *)this + 44) & 0x100) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "z", *((double *)this + 9));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilTouch::readFrom(CMMsl::PencilTouch *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 44) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_80;
            case 2u:
              *((_WORD *)this + 44) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_80;
            case 3u:
              *((_WORD *)this + 44) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_80;
            case 4u:
              *((_WORD *)this + 44) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_80;
            case 5u:
              *((_WORD *)this + 44) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_80;
            case 6u:
              *((_WORD *)this + 44) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_80;
            case 7u:
              *((_WORD *)this + 44) |= 0x400u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_85;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_84:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_85;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_84;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_85;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_85:
              *((_DWORD *)this + 21) = v25;
              goto LABEL_91;
            case 8u:
              *((_WORD *)this + 44) |= 0x200u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_90;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_89:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_90;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_89;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_90;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_90:
              *((_DWORD *)this + 20) = v31;
LABEL_91:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *((_WORD *)this + 44) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_80;
            case 0xAu:
              *((_WORD *)this + 44) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_80;
            case 0xBu:
              *((_WORD *)this + 44) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
LABEL_80:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_64:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_91;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_91;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilTouch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 88);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48), 1u);
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 2u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 3u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 4u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 6u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 7u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 8u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xAu);
    if ((*(_WORD *)(v3 + 88) & 0x10) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 9u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 40);

  return PB::Writer::write(a2, v5, 0xBu);
}

uint64_t CMMsl::PencilTouch::hash_value(CMMsl::PencilTouch *this)
{
  __int16 v1 = *((_WORD *)this + 44);
  if ((v1 & 0x20) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_32:
    double v3 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_6;
    }
LABEL_33:
    double v4 = 0.0;
    if ((*((_WORD *)this + 44) & 0x100) != 0) {
      goto LABEL_9;
    }
LABEL_34:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_35:
    double v6 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_15;
    }
LABEL_36:
    double v7 = 0.0;
    if ((*((_WORD *)this + 44) & 0x400) != 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
  double v2 = *((double *)this + 6);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_32;
  }
LABEL_3:
  double v3 = *((double *)this + 7);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_33;
  }
LABEL_6:
  double v4 = *((double *)this + 8);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x100) == 0) {
    goto LABEL_34;
  }
LABEL_9:
  double v5 = *((double *)this + 9);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_36;
  }
LABEL_15:
  double v7 = *((double *)this + 3);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x400) != 0)
  {
LABEL_18:
    uint64_t v8 = *((unsigned int *)this + 21);
    if ((*((_WORD *)this + 44) & 0x200) != 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v8 = 0;
  if ((*((_WORD *)this + 44) & 0x200) != 0)
  {
LABEL_19:
    uint64_t v9 = *((unsigned int *)this + 20);
    if ((v1 & 2) != 0) {
      goto LABEL_20;
    }
LABEL_39:
    double v10 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_23;
    }
    goto LABEL_40;
  }
LABEL_38:
  uint64_t v9 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_39;
  }
LABEL_20:
  double v10 = *((double *)this + 2);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 8) != 0)
  {
LABEL_23:
    double v11 = *((double *)this + 4);
    if (v11 == 0.0) {
      double v11 = 0.0;
    }
    if ((v1 & 0x10) != 0) {
      goto LABEL_26;
    }
LABEL_41:
    double v12 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12;
  }
LABEL_40:
  double v11 = 0.0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_41;
  }
LABEL_26:
  double v12 = *((double *)this + 5);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12;
}

void CMMsl::PhysicalEffortInput::~PhysicalEffortInput(CMMsl::PhysicalEffortInput *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PhysicalEffortInput::PhysicalEffortInput(uint64_t this, const CMMsl::PhysicalEffortInput *a2)
{
  *(void *)this = off_1003A8268;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 28) = v3;
    *(void *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) = v3 | 4;
    *(_DWORD *)(this + 24) = v6;
  }
  return this;
}

uint64_t CMMsl::PhysicalEffortInput::operator=(uint64_t a1, const CMMsl::PhysicalEffortInput *a2)
{
  if ((const CMMsl::PhysicalEffortInput *)a1 != a2)
  {
    CMMsl::PhysicalEffortInput::PhysicalEffortInput((uint64_t)&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    *(void *)&long long v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v7;
    uint64_t v7 = v3;
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PhysicalEffortInput *a2, CMMsl::PhysicalEffortInput *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  return result;
}

double CMMsl::PhysicalEffortInput::PhysicalEffortInput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8268;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8268;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::PhysicalEffortInput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v6 = off_1003A8268;
    uint64_t v3 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v7 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    uint64_t v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::PhysicalEffortInput::formatText(CMMsl::PhysicalEffortInput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "activityType", *((_DWORD *)this + 6));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sampleTime", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "wrMets", *((double *)this + 2));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PhysicalEffortInput::readFrom(CMMsl::PhysicalEffortInput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0;
          goto LABEL_20;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((unsigned char *)this + 28) |= 4u;
      unint64_t v21 = *((void *)a2 + 1);
      unint64_t v2 = *((void *)a2 + 2);
      uint64_t v22 = *(void *)a2;
      if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
      {
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v25 = 0;
        if (v2 <= v21) {
          unint64_t v2 = *((void *)a2 + 1);
        }
        while (1)
        {
          if (v2 == v21)
          {
            LODWORD(v25) = 0;
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_52;
          }
          unint64_t v30 = v21++;
          char v31 = *(unsigned char *)(v22 + v30);
          *((void *)a2 + 1) = v21;
          v25 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            break;
          }
          v28 += 7;
          BOOL v14 = v29++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_51;
          }
        }
        if (*((unsigned char *)a2 + 24)) {
          LODWORD(v25) = 0;
        }
LABEL_51:
        unint64_t v2 = v30 + 1;
      }
      else
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        while (1)
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            break;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            break;
          }
        }
      }
LABEL_52:
      *((_DWORD *)this + 6) = v25;
      goto LABEL_53;
    }
    if (v20 == 2)
    {
      *((unsigned char *)this + 28) |= 2u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        goto LABEL_53;
      }
      *((unsigned char *)this + 28) |= 1u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_47:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    *((unsigned char *)a2 + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::PhysicalEffortInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  unsigned int v5 = *(_DWORD *)(v3 + 24);

  return PB::Writer::writeVarInt(a2, v5, 3u);
}

uint64_t CMMsl::PhysicalEffortInput::hash_value(CMMsl::PhysicalEffortInput *this)
{
  if (*((unsigned char *)this + 28))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 2);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 28) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_11:
      uint64_t v3 = 0;
      return *(void *)&v2 ^ *(void *)&v1 ^ v3;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v3 = *((unsigned int *)this + 6);
  return *(void *)&v2 ^ *(void *)&v1 ^ v3;
}

void CMMsl::PhysicalEffortSample::~PhysicalEffortSample(CMMsl::PhysicalEffortSample *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PhysicalEffortSample::PhysicalEffortSample(uint64_t this, const CMMsl::PhysicalEffortSample *a2)
{
  *(void *)this = off_1003A82A0;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    char v3 = 4;
    *(unsigned char *)(this + 44) = 4;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 44))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 32) = v7;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_14:
    int v9 = *((_DWORD *)a2 + 10);
    *(unsigned char *)(this + 44) = v3 | 0x20;
    *(_DWORD *)(this + 40) = v9;
    return this;
  }
LABEL_13:
  int v8 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 36) = v8;
  if ((*((unsigned char *)a2 + 44) & 0x20) != 0) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::PhysicalEffortSample::operator=(uint64_t a1, const CMMsl::PhysicalEffortSample *a2)
{
  if ((const CMMsl::PhysicalEffortSample *)a1 != a2)
  {
    CMMsl::PhysicalEffortSample::PhysicalEffortSample((uint64_t)&v7, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v10;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PhysicalEffortSample *a2, CMMsl::PhysicalEffortSample *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  int v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  int v9 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v9;
  return result;
}

double CMMsl::PhysicalEffortSample::PhysicalEffortSample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A82A0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A82A0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::PhysicalEffortSample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v9 = off_1003A82A0;
    uint64_t v3 = *(void *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v11 = *(void *)(a1 + 24);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v10 = v5;
    long long v7 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v4;
    long long v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PhysicalEffortSample::formatText(CMMsl::PhysicalEffortSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "activityType", *((_DWORD *)this + 8));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "algorithmVersion", *((_DWORD *)this + 9));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "endDate", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "mets", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "sampleStopReason", *((_DWORD *)this + 10));
  if ((*((unsigned char *)this + 44) & 4) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 3));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PhysicalEffortSample::readFrom(CMMsl::PhysicalEffortSample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 44) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_32;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_76;
            case 2u:
              *((unsigned char *)this + 44) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_32;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_76;
            case 3u:
              *((unsigned char *)this + 44) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_76:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_32:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_92;
            case 4u:
              *((unsigned char *)this + 44) |= 8u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_81;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_80:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_81;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_80;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_81;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_81:
              *((_DWORD *)this + 8) = v25;
              goto LABEL_92;
            case 5u:
              *((unsigned char *)this + 44) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_86;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_85:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_85;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_86:
              *((_DWORD *)this + 9) = v31;
              goto LABEL_92;
            case 6u:
              *((unsigned char *)this + 44) |= 0x20u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_91;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_90:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_90;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_91:
              *((_DWORD *)this + 10) = v37;
LABEL_92:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_92;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PhysicalEffortSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 5u);
    if ((*(unsigned char *)(v3 + 44) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  unsigned int v5 = *(_DWORD *)(v3 + 40);

  return PB::Writer::writeVarInt(a2, v5, 6u);
}

uint64_t CMMsl::PhysicalEffortSample::hash_value(CMMsl::PhysicalEffortSample *this)
{
  if ((*((unsigned char *)this + 44) & 4) == 0)
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 44)) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_16:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 1) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_16;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 8) != 0)
  {
LABEL_9:
    uint64_t v4 = *((unsigned int *)this + 8);
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_10;
    }
LABEL_18:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_11;
    }
LABEL_19:
    uint64_t v6 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_17:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_18;
  }
LABEL_10:
  uint64_t v5 = *((unsigned int *)this + 9);
  if ((*((unsigned char *)this + 44) & 0x20) == 0) {
    goto LABEL_19;
  }
LABEL_11:
  uint64_t v6 = *((unsigned int *)this + 10);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6;
}

void CMMsl::PocketDetectionPacket::~PocketDetectionPacket(CMMsl::PocketDetectionPacket *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PocketDetectionPacket::PocketDetectionPacket(CMMsl::PocketDetectionPacket *this, const CMMsl::PocketDetectionPacket *a2)
{
  *(void *)this = off_1003A82D8;
  *((_DWORD *)this + 21) = 0;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x200) != 0)
  {
    int v4 = *((_DWORD *)a2 + 19);
    __int16 v3 = 512;
    *((_WORD *)this + 42) = 512;
    *((_DWORD *)this + 19) = v4;
    __int16 v2 = *((_WORD *)a2 + 42);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 8);
    v3 |= 0x80u;
    *((_WORD *)this + 42) = v3;
    *((double *)this + 8) = result;
    __int16 v2 = *((_WORD *)a2 + 42);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 42) = v3;
    *((double *)this + 2) = result;
    __int16 v2 = *((_WORD *)a2 + 42);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 5) = result;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  char v6 = *((unsigned char *)a2 + 80);
  v3 |= 0x400u;
  *((_WORD *)this + 42) = v3;
  *((unsigned char *)this + 80) = v6;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 6) = result;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_24:
    double result = *((double *)a2 + 7);
    *((_WORD *)this + 42) = v3 | 0x40;
    *((double *)this + 7) = result;
    return result;
  }
LABEL_23:
  LODWORD(result) = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *((_WORD *)this + 42) = v3;
  *((_DWORD *)this + 18) = LODWORD(result);
  if ((*((_WORD *)a2 + 42) & 0x40) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::PocketDetectionPacket::operator=(CMMsl *a1, const CMMsl::PocketDetectionPacket *a2)
{
  if (a1 != a2)
  {
    CMMsl::PocketDetectionPacket::PocketDetectionPacket((CMMsl::PocketDetectionPacket *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PocketDetectionPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PocketDetectionPacket *a2, CMMsl::PocketDetectionPacket *a3)
{
  int v3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  int v4 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  LOBYTE(v4) = *((unsigned char *)this + 80);
  *((unsigned char *)this + 80) = *((unsigned char *)a2 + 80);
  *((unsigned char *)a2 + 80) = v4;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  LODWORD(v11) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v11;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

double CMMsl::PocketDetectionPacket::PocketDetectionPacket(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A82D8;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  return result;
}

CMMsl *CMMsl::PocketDetectionPacket::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PocketDetectionPacket::PocketDetectionPacket((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PocketDetectionPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PocketDetectionPacket::formatText(CMMsl::PocketDetectionPacket *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 42);
  if (v5)
  {
    PB::TextFormatter::format(a2, "ambient", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 42);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((*((_WORD *)this + 42) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "baselineAccuracy", *((float *)this + 18));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "flags", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "header", *((_DWORD *)this + 19));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "intensity", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "intensityBaselineDelta", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "intensityCalDelta", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "pocketFlag", *((unsigned char *)this + 80));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "pocketProbability", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "temperature", *((double *)this + 7));
  if ((*((_WORD *)this + 42) & 0x80) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "ts", *((double *)this + 8));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PocketDetectionPacket::readFrom(CMMsl::PocketDetectionPacket *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 42) |= 0x200u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_76;
                  }
                  unint64_t v31 = v20++;
                  char v32 = *(unsigned char *)(v21 + v31);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_75;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_75:
                unint64_t v2 = v31 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_76;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_76:
              *((_DWORD *)this + 19) = v24;
              goto LABEL_77;
            case 2u:
              *((_WORD *)this + 42) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_70;
            case 3u:
              *((_WORD *)this + 42) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_70;
            case 4u:
              *((_WORD *)this + 42) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_70;
            case 5u:
              *((_WORD *)this + 42) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_70;
            case 6u:
              *((_WORD *)this + 42) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_70;
            case 7u:
              *((_WORD *)this + 42) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_70;
            case 8u:
              *((_WORD *)this + 42) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 80) = v28;
              goto LABEL_77;
            case 9u:
              *((_WORD *)this + 42) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_70;
            case 0xAu:
              *((_WORD *)this + 42) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 4;
              goto LABEL_71;
            case 0xBu:
              *((_WORD *)this + 42) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
LABEL_70:
                unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_71:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_59:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_77;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
LABEL_77:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PocketDetectionPacket::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 84);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 76), 1u);
    __int16 v4 = *(_WORD *)(v3 + 84);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 2u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 6u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 7u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 80), 8u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xAu);
    if ((*(_WORD *)(v3 + 84) & 0x40) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 9u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x100) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 56);

  return PB::Writer::write(a2, v5, 0xBu);
}

uint64_t CMMsl::PocketDetectionPacket::hash_value(CMMsl::PocketDetectionPacket *this)
{
  __int16 v1 = *((_WORD *)this + 42);
  if ((v1 & 0x200) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_32:
    double v3 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
LABEL_33:
    double v4 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_9;
    }
LABEL_34:
    double v5 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_35:
    double v6 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_15;
    }
LABEL_36:
    double v7 = 0.0;
    if (v1) {
      goto LABEL_18;
    }
LABEL_37:
    double v8 = 0.0;
    if ((*((_WORD *)this + 42) & 0x400) != 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
  uint64_t v2 = *((unsigned int *)this + 19);
  if ((v1 & 0x80) == 0) {
    goto LABEL_32;
  }
LABEL_3:
  double v3 = *((double *)this + 8);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_33;
  }
LABEL_6:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_34;
  }
LABEL_9:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_35;
  }
LABEL_12:
  double v6 = *((double *)this + 5);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_36;
  }
LABEL_15:
  double v7 = *((double *)this + 4);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_18:
  double v8 = *((double *)this + 1);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 42) & 0x400) != 0)
  {
LABEL_21:
    uint64_t v9 = *((unsigned __int8 *)this + 80);
    if ((v1 & 0x20) != 0) {
      goto LABEL_22;
    }
LABEL_39:
    double v10 = 0.0;
    if ((*((_WORD *)this + 42) & 0x100) != 0) {
      goto LABEL_25;
    }
    goto LABEL_40;
  }
LABEL_38:
  uint64_t v9 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_39;
  }
LABEL_22:
  double v10 = *((double *)this + 6);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((*((_WORD *)this + 42) & 0x100) != 0)
  {
LABEL_25:
    float v11 = *((float *)this + 18);
    uint64_t v12 = LODWORD(v11);
    if (v11 == 0.0) {
      uint64_t v12 = 0;
    }
    if ((v1 & 0x40) != 0) {
      goto LABEL_28;
    }
LABEL_41:
    double v13 = 0.0;
    return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ v9 ^ *(void *)&v10 ^ v12 ^ *(void *)&v13;
  }
LABEL_40:
  uint64_t v12 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_41;
  }
LABEL_28:
  double v13 = *((double *)this + 7);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ v9 ^ *(void *)&v10 ^ v12 ^ *(void *)&v13;
}

void CMMsl::Pose::~Pose(CMMsl::Pose *this)
{
  *(void *)this = off_1003A8310;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  double v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::Pose::~Pose(this);

  operator delete();
}

CMMsl::Pose *CMMsl::Pose::Pose(CMMsl::Pose *this, const CMMsl::Pose *a2)
{
  *(void *)this = off_1003A8310;
  *(_OWORD *)((char *)this + 8) = 0u;
  double v4 = (char *)this + 8;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((unsigned char *)a2 + 64))
  {
    uint64_t v5 = *((void *)a2 + 7);
    *((unsigned char *)this + 64) = 1;
    *((void *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  }
  return this;
}

uint64_t CMMsl::Pose::operator=(uint64_t a1, const CMMsl::Pose *a2)
{
  if ((const CMMsl::Pose *)a1 != a2)
  {
    CMMsl::Pose::Pose((CMMsl::Pose *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    CMMsl::Pose::~Pose((CMMsl::Pose *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Pose *a2, CMMsl::Pose *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::Pose::Pose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8310;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::Pose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::Pose::Pose((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    CMMsl::Pose::~Pose((CMMsl::Pose *)v9);
  }
  return a1;
}

uint64_t CMMsl::Pose::formatText(CMMsl::Pose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  uint64_t v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "position", v10);
  }
  if (*((unsigned char *)this + 64)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::Pose::readFrom(CMMsl::Pose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 32);
    uint64_t v9 = (char *)this + 48;
    double v10 = (void **)((char *)this + 8);
    long long v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          while (v41 < v42 && !*((unsigned char *)a2 + 24))
          {
            unsigned int v44 = (char *)*((void *)this + 2);
            unint64_t v43 = *((void *)this + 3);
            if ((unint64_t)v44 >= v43)
            {
              char v46 = (char *)*v10;
              uint64_t v47 = (v44 - (unsigned char *)*v10) >> 3;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61) {
                goto LABEL_128;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 2 > v48) {
                unint64_t v48 = v49 >> 2;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_10000EEB0((uint64_t)v11, v50);
                char v46 = (char *)*((void *)this + 1);
                unsigned int v44 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v51 = 0;
              }
              char v52 = &v51[8 * v47];
              *(void *)char v52 = 0;
              unint64_t v45 = v52 + 8;
              while (v44 != v46)
              {
                uint64_t v53 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v52 - 1) = v53;
                v52 -= 8;
              }
              *((void *)this + 1) = v52;
              *((void *)this + 2) = v45;
              *((void *)this + 3) = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(void *)unsigned int v44 = 0;
              unint64_t v45 = v44 + 8;
            }
            *((void *)this + 2) = v45;
            unint64_t v54 = *((void *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)a2 + 2)) {
              goto LABEL_82;
            }
            *(v45 - 1) = *(void *)(*(void *)a2 + v54);
            unint64_t v42 = *((void *)a2 + 2);
            unint64_t v41 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v41;
          }
          goto LABEL_83;
        }
        unint64_t v59 = (char *)*((void *)this + 2);
        unint64_t v58 = *((void *)this + 3);
        if ((unint64_t)v59 >= v58)
        {
          char v66 = (char *)*v10;
          uint64_t v67 = (v59 - (unsigned char *)*v10) >> 3;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61) {
LABEL_128:
          }
            sub_10000EE98();
          uint64_t v69 = v58 - (void)v66;
          if (v69 >> 2 > v68) {
            unint64_t v68 = v69 >> 2;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v68;
          }
          if (v70)
          {
            char v71 = (char *)sub_10000EEB0((uint64_t)v11, v70);
            char v66 = (char *)*((void *)this + 1);
            unint64_t v59 = (char *)*((void *)this + 2);
          }
          else
          {
            char v71 = 0;
          }
          unint64_t v74 = &v71[8 * v67];
          *(void *)unint64_t v74 = 0;
          unsigned int v57 = v74 + 8;
          while (v59 != v66)
          {
            uint64_t v75 = *((void *)v59 - 1);
            v59 -= 8;
            *((void *)v74 - 1) = v75;
            v74 -= 8;
          }
          *((void *)this + 1) = v74;
          *((void *)this + 2) = v57;
          *((void *)this + 3) = &v71[8 * v70];
          if (v66) {
            operator delete(v66);
          }
        }
        else
        {
          *(void *)unint64_t v59 = 0;
          unsigned int v57 = v59 + 8;
        }
        *((void *)this + 2) = v57;
LABEL_114:
        unint64_t v76 = *((void *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((void *)a2 + 2))
        {
LABEL_116:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_119;
        }
        *(v57 - 1) = *(void *)(*(void *)a2 + v76);
        goto LABEL_118;
      }
      if (v25 == 1)
      {
        *((unsigned char *)this + 64) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
          goto LABEL_116;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v26);
LABEL_118:
        *((void *)a2 + 1) += 8;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0) {
        return 0;
      }
LABEL_119:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    if (v24 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v27 = *((void *)a2 + 1);
      unint64_t v28 = *((void *)a2 + 2);
      while (v27 < v28 && !*((unsigned char *)a2 + 24))
      {
        unsigned int v30 = (char *)*((void *)this + 5);
        unint64_t v29 = *((void *)this + 6);
        if ((unint64_t)v30 >= v29)
        {
          char v32 = (char *)*v8;
          uint64_t v33 = (v30 - (unsigned char *)*v8) >> 3;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61) {
            goto LABEL_127;
          }
          uint64_t v35 = v29 - (void)v32;
          if (v35 >> 2 > v34) {
            unint64_t v34 = v35 >> 2;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            uint64_t v37 = (char *)sub_10000EEB0((uint64_t)v9, v36);
            char v32 = (char *)*((void *)this + 4);
            unsigned int v30 = (char *)*((void *)this + 5);
          }
          else
          {
            uint64_t v37 = 0;
          }
          char v38 = &v37[8 * v33];
          *(void *)char v38 = 0;
          unint64_t v31 = v38 + 8;
          while (v30 != v32)
          {
            uint64_t v39 = *((void *)v30 - 1);
            v30 -= 8;
            *((void *)v38 - 1) = v39;
            v38 -= 8;
          }
          *((void *)this + 4) = v38;
          *((void *)this + 5) = v31;
          *((void *)this + 6) = &v37[8 * v36];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *(void *)unsigned int v30 = 0;
          unint64_t v31 = v30 + 8;
        }
        *((void *)this + 5) = v31;
        unint64_t v40 = *((void *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((void *)a2 + 2))
        {
LABEL_82:
          *((unsigned char *)a2 + 24) = 1;
          break;
        }
        *(v31 - 1) = *(void *)(*(void *)a2 + v40);
        unint64_t v28 = *((void *)a2 + 2);
        unint64_t v27 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v27;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    char v56 = (char *)*((void *)this + 5);
    unint64_t v55 = *((void *)this + 6);
    if ((unint64_t)v56 >= v55)
    {
      char v60 = (char *)*v8;
      uint64_t v61 = (v56 - (unsigned char *)*v8) >> 3;
      unint64_t v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61) {
LABEL_127:
      }
        sub_10000EE98();
      uint64_t v63 = v55 - (void)v60;
      if (v63 >> 2 > v62) {
        unint64_t v62 = v63 >> 2;
      }
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v62;
      }
      if (v64)
      {
        unint64_t v65 = (char *)sub_10000EEB0((uint64_t)v9, v64);
        char v60 = (char *)*((void *)this + 4);
        char v56 = (char *)*((void *)this + 5);
      }
      else
      {
        unint64_t v65 = 0;
      }
      char v72 = &v65[8 * v61];
      *(void *)char v72 = 0;
      unsigned int v57 = v72 + 8;
      while (v56 != v60)
      {
        uint64_t v73 = *((void *)v56 - 1);
        v56 -= 8;
        *((void *)v72 - 1) = v73;
        v72 -= 8;
      }
      *((void *)this + 4) = v72;
      *((void *)this + 5) = v57;
      *((void *)this + 6) = &v65[8 * v64];
      if (v60) {
        operator delete(v60);
      }
    }
    else
    {
      *(void *)char v56 = 0;
      unsigned int v57 = v56 + 8;
    }
    *((void *)this + 5) = v57;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t CMMsl::Pose::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 64)) {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
  }
  int v4 = (double *)v3[1];
  long long v5 = (double *)v3[2];
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  uint64_t v8 = (double *)v3[4];
  double v7 = (double *)v3[5];
  while (v8 != v7)
  {
    double v9 = *v8++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  return this;
}

uint64_t CMMsl::Pose::hash_value(CMMsl::Pose *this)
{
  if (*((unsigned char *)this + 64))
  {
    if (*((double *)this + 7) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 7);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

void CMMsl::PoseState::~PoseState(CMMsl::PoseState *this)
{
  *(void *)this = off_1003A8348;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PoseState::~PoseState(this);

  operator delete();
}

CMMsl::PoseState *CMMsl::PoseState::PoseState(CMMsl::PoseState *this, const CMMsl::PoseState *a2)
{
  *(void *)this = off_1003A8348;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (this != a2) {
    sub_1000330C4((char *)this + 8, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  if (*((unsigned char *)a2 + 44))
  {
    char v4 = *((unsigned char *)a2 + 40);
    *((unsigned char *)this + 44) |= 1u;
    *((unsigned char *)this + 40) = v4;
  }
  return this;
}

uint64_t CMMsl::PoseState::operator=(uint64_t a1, const CMMsl::PoseState *a2)
{
  if ((const CMMsl::PoseState *)a1 != a2)
  {
    CMMsl::PoseState::PoseState((CMMsl::PoseState *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    int v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v10;
    char v10 = v3;
    CMMsl::PoseState::~PoseState((CMMsl::PoseState *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PoseState *a2, CMMsl::PoseState *a3)
{
  int v3 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  LOBYTE(v7) = *(unsigned char *)(this + 40);
  *(unsigned char *)(this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v7;
  return this;
}

uint64_t CMMsl::PoseState::PoseState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8348;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100274A30(v4, (__n128 *)(a2 + 8));
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PoseState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PoseState::PoseState((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    int v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v10;
    char v10 = v3;
    CMMsl::PoseState::~PoseState((CMMsl::PoseState *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PoseState::formatText(CMMsl::PoseState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "pose");
  }
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "velocity", v8);
  }
  if (*((unsigned char *)this + 44)) {
    PB::TextFormatter::format(a2, "wasCorrected", *((unsigned char *)this + 40));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PoseState::readFrom(CMMsl::PoseState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)((char *)this + 8);
    long long v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v23 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v24 = *((void *)a2 + 1);
        if (v24 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v25 = v24 + 1;
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v24);
          *((void *)a2 + 1) = v25;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 40) = v27;
      }
      else if (v23 == 2)
      {
        if (v22 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          while (v28 < v29 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v31 = (char *)*((void *)this + 2);
            unint64_t v30 = *((void *)this + 3);
            if ((unint64_t)v31 >= v30)
            {
              uint64_t v33 = (char *)*v8;
              uint64_t v34 = (v31 - (unsigned char *)*v8) >> 3;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 61) {
                goto LABEL_86;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 2 > v35) {
                unint64_t v35 = v36 >> 2;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                char v38 = (char *)sub_10000EEB0((uint64_t)v9, v37);
                uint64_t v33 = (char *)*((void *)this + 1);
                unint64_t v31 = (char *)*((void *)this + 2);
              }
              else
              {
                char v38 = 0;
              }
              uint64_t v39 = &v38[8 * v34];
              *(void *)uint64_t v39 = 0;
              char v32 = v39 + 8;
              while (v31 != v33)
              {
                uint64_t v40 = *((void *)v31 - 1);
                v31 -= 8;
                *((void *)v39 - 1) = v40;
                v39 -= 8;
              }
              *((void *)this + 1) = v39;
              *((void *)this + 2) = v32;
              *((void *)this + 3) = &v38[8 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(void *)unint64_t v31 = 0;
              char v32 = v31 + 8;
            }
            *((void *)this + 2) = v32;
            unint64_t v41 = *((void *)a2 + 1);
            if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v32 - 1) = *(void *)(*(void *)a2 + v41);
            unint64_t v29 = *((void *)a2 + 2);
            unint64_t v28 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v28;
          }
          PB::Reader::recallMark();
        }
        else
        {
          unint64_t v43 = (char *)*((void *)this + 2);
          unint64_t v42 = *((void *)this + 3);
          if ((unint64_t)v43 >= v42)
          {
            unint64_t v45 = (char *)*v8;
            uint64_t v46 = (v43 - (unsigned char *)*v8) >> 3;
            unint64_t v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 61) {
LABEL_86:
            }
              sub_10000EE98();
            uint64_t v48 = v42 - (void)v45;
            if (v48 >> 2 > v47) {
              unint64_t v47 = v48 >> 2;
            }
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v49 = v47;
            }
            if (v49)
            {
              unint64_t v50 = (char *)sub_10000EEB0((uint64_t)v9, v49);
              unint64_t v45 = (char *)*((void *)this + 1);
              unint64_t v43 = (char *)*((void *)this + 2);
            }
            else
            {
              unint64_t v50 = 0;
            }
            unint64_t v51 = &v50[8 * v46];
            *(void *)unint64_t v51 = 0;
            unsigned int v44 = v51 + 8;
            while (v43 != v45)
            {
              uint64_t v52 = *((void *)v43 - 1);
              v43 -= 8;
              *((void *)v51 - 1) = v52;
              v51 -= 8;
            }
            *((void *)this + 1) = v51;
            *((void *)this + 2) = v44;
            *((void *)this + 3) = &v50[8 * v49];
            if (v45) {
              operator delete(v45);
            }
          }
          else
          {
            *(void *)unint64_t v43 = 0;
            unsigned int v44 = v43 + 8;
          }
          *((void *)this + 2) = v44;
          unint64_t v53 = *((void *)a2 + 1);
          if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *((void *)a2 + 2))
          {
            *(v44 - 1) = *(void *)(*(void *)a2 + v53);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
        }
      }
      else
      {
        if (v23 == 1) {
          operator new();
        }
        if ((PB::Reader::skip(a2, v23, v22, 0) & 1) == 0) {
          return 0;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PoseState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 2u);
  }
  if (*(unsigned char *)(v3 + 44))
  {
    char v8 = *(unsigned char *)(v3 + 40);
    return PB::Writer::write(a2, v8, 3u);
  }
  return this;
}

uint64_t CMMsl::PoseState::hash_value(CMMsl::PoseState *this)
{
  unint64_t v2 = (CMMsl::Pose *)*((void *)this + 4);
  if (v2) {
    uint64_t v3 = CMMsl::Pose::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = PBHashBytes();
  if (*((unsigned char *)this + 44)) {
    uint64_t v5 = *((unsigned __int8 *)this + 40);
  }
  else {
    uint64_t v5 = 0;
  }
  return v4 ^ v3 ^ v5;
}

uint64_t CMMsl::PoseState::makePose(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

void CMMsl::PostureJoint::~PostureJoint(CMMsl::PostureJoint *this)
{
  *(void *)this = off_1003A8380;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PostureJoint::~PostureJoint(this);

  operator delete();
}

CMMsl::PostureJoint *CMMsl::PostureJoint::PostureJoint(CMMsl::PostureJoint *this, const CMMsl::PostureJoint *a2)
{
  *(void *)this = off_1003A8380;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  if (this != a2)
  {
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  }
  if (*((unsigned char *)a2 + 60))
  {
    int v5 = *((_DWORD *)a2 + 14);
    *((unsigned char *)this + 60) |= 1u;
    *((_DWORD *)this + 14) = v5;
  }
  return this;
}

uint64_t CMMsl::PostureJoint::operator=(uint64_t a1, const CMMsl::PostureJoint *a2)
{
  if ((const CMMsl::PostureJoint *)a1 != a2)
  {
    CMMsl::PostureJoint::PostureJoint((CMMsl::PostureJoint *)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v10 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v11;
    uint64_t v11 = v5;
    CMMsl::PostureJoint::~PostureJoint((CMMsl::PostureJoint *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PostureJoint *a2, CMMsl::PostureJoint *a3)
{
  int v3 = *(_DWORD *)(this + 60);
  *(_DWORD *)(this + 60) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  LODWORD(v9) = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  return this;
}

uint64_t CMMsl::PostureJoint::PostureJoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8380;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::PostureJoint::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PostureJoint::PostureJoint((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v10 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v11;
    uint64_t v11 = v5;
    CMMsl::PostureJoint::~PostureJoint((CMMsl::PostureJoint *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PostureJoint::formatText(CMMsl::PostureJoint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 60)) {
    PB::TextFormatter::format(a2, "jointName", *((_DWORD *)this + 14));
  }
  long long v5 = (double *)*((void *)this + 1);
  uint64_t v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "rotation", v7);
  }
  long long v8 = (double *)*((void *)this + 4);
  long long v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "translation", v10);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PostureJoint::readFrom(CMMsl::PostureJoint *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    long long v8 = (void **)((char *)this + 32);
    long long v9 = (char *)this + 48;
    double v10 = (void **)((char *)this + 8);
    uint64_t v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
      {
        *((unsigned char *)this + 60) |= 1u;
        unint64_t v40 = *((void *)a2 + 1);
        unint64_t v41 = *((void *)a2 + 2);
        uint64_t v42 = *(void *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v41)
        {
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v45 = 0;
          if (v41 <= v40) {
            unint64_t v41 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_114;
            }
            unint64_t v67 = v40 + 1;
            char v68 = *(unsigned char *)(v42 + v40);
            *((void *)a2 + 1) = v67;
            v45 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0) {
              break;
            }
            v65 += 7;
            unint64_t v40 = v67;
            BOOL v18 = v66++ > 8;
            if (v18)
            {
LABEL_90:
              LODWORD(v45) = 0;
              goto LABEL_114;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v45) = 0;
          }
        }
        else
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v45 = 0;
          while (1)
          {
            unint64_t v46 = v40 + 1;
            *((void *)a2 + 1) = v40 + 1;
            char v47 = *(unsigned char *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v43 += 7;
            unint64_t v40 = v46;
            BOOL v18 = v44++ > 8;
            if (v18) {
              goto LABEL_90;
            }
          }
        }
LABEL_114:
        *((_DWORD *)this + 14) = v45;
        goto LABEL_133;
      }
      if (v25 == 2) {
        break;
      }
      if (v25 == 1)
      {
        if (v24 != 2)
        {
          uint64_t v63 = (char *)*((void *)this + 2);
          unint64_t v62 = *((void *)this + 3);
          if ((unint64_t)v63 >= v62)
          {
            char v71 = (char *)*v10;
            uint64_t v72 = (v63 - (unsigned char *)*v10) >> 3;
            unint64_t v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 61) {
LABEL_143:
            }
              sub_10000EE98();
            uint64_t v74 = v62 - (void)v71;
            if (v74 >> 2 > v73) {
              unint64_t v73 = v74 >> 2;
            }
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v75 = v73;
            }
            if (v75)
            {
              unint64_t v76 = (char *)sub_10000EEB0((uint64_t)v11, v75);
              char v71 = (char *)*((void *)this + 1);
              uint64_t v63 = (char *)*((void *)this + 2);
            }
            else
            {
              unint64_t v76 = 0;
            }
            uint64_t v83 = &v76[8 * v72];
            *(void *)uint64_t v83 = 0;
            unint64_t v64 = v83 + 8;
            while (v63 != v71)
            {
              uint64_t v84 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v83 - 1) = v84;
              v83 -= 8;
            }
            *((void *)this + 1) = v83;
            *((void *)this + 2) = v64;
            *((void *)this + 3) = &v76[8 * v75];
            if (v71) {
              operator delete(v71);
            }
          }
          else
          {
            *(void *)uint64_t v63 = 0;
            unint64_t v64 = v63 + 8;
          }
          *((void *)this + 2) = v64;
LABEL_129:
          unint64_t v87 = *((void *)a2 + 1);
          if (v87 <= 0xFFFFFFFFFFFFFFF7 && v87 + 8 <= *((void *)a2 + 2))
          {
            *(v64 - 1) = *(void *)(*(void *)a2 + v87);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_133;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        while (v26 < v27 && !*((unsigned char *)a2 + 24))
        {
          unint64_t v29 = (char *)*((void *)this + 2);
          unint64_t v28 = *((void *)this + 3);
          if ((unint64_t)v29 >= v28)
          {
            unint64_t v31 = (char *)*v10;
            uint64_t v32 = (v29 - (unsigned char *)*v10) >> 3;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61) {
              goto LABEL_143;
            }
            uint64_t v34 = v28 - (void)v31;
            if (v34 >> 2 > v33) {
              unint64_t v33 = v34 >> 2;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              uint64_t v36 = (char *)sub_10000EEB0((uint64_t)v11, v35);
              unint64_t v31 = (char *)*((void *)this + 1);
              unint64_t v29 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v36 = 0;
            }
            unint64_t v37 = &v36[8 * v32];
            *(void *)unint64_t v37 = 0;
            unint64_t v30 = v37 + 8;
            while (v29 != v31)
            {
              uint64_t v38 = *((void *)v29 - 1);
              v29 -= 8;
              *((void *)v37 - 1) = v38;
              v37 -= 8;
            }
            *((void *)this + 1) = v37;
            *((void *)this + 2) = v30;
            *((void *)this + 3) = &v36[8 * v35];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(void *)unint64_t v29 = 0;
            unint64_t v30 = v29 + 8;
          }
          *((void *)this + 2) = v30;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *(v30 - 1) = *(void *)(*(void *)a2 + v39);
          unint64_t v27 = *((void *)a2 + 2);
          unint64_t v26 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v26;
        }
LABEL_94:
        PB::Reader::recallMark();
        goto LABEL_133;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0) {
        return 0;
      }
LABEL_133:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    if (v24 != 2)
    {
      unint64_t v70 = (char *)*((void *)this + 5);
      unint64_t v69 = *((void *)this + 6);
      if ((unint64_t)v70 >= v69)
      {
        uint64_t v77 = (char *)*v8;
        uint64_t v78 = (v70 - (unsigned char *)*v8) >> 3;
        unint64_t v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 61) {
LABEL_144:
        }
          sub_10000EE98();
        uint64_t v80 = v69 - (void)v77;
        if (v80 >> 2 > v79) {
          unint64_t v79 = v80 >> 2;
        }
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v81 = v79;
        }
        if (v81)
        {
          unint64_t v82 = (char *)sub_10000EEB0((uint64_t)v9, v81);
          uint64_t v77 = (char *)*((void *)this + 4);
          unint64_t v70 = (char *)*((void *)this + 5);
        }
        else
        {
          unint64_t v82 = 0;
        }
        v85 = &v82[8 * v78];
        *(void *)v85 = 0;
        unint64_t v64 = v85 + 8;
        while (v70 != v77)
        {
          uint64_t v86 = *((void *)v70 - 1);
          v70 -= 8;
          *((void *)v85 - 1) = v86;
          v85 -= 8;
        }
        *((void *)this + 4) = v85;
        *((void *)this + 5) = v64;
        *((void *)this + 6) = &v82[8 * v81];
        if (v77) {
          operator delete(v77);
        }
      }
      else
      {
        *(void *)unint64_t v70 = 0;
        unint64_t v64 = v70 + 8;
      }
      *((void *)this + 5) = v64;
      goto LABEL_129;
    }
    if (PB::Reader::placeMark()) {
      return 0;
    }
    unint64_t v48 = *((void *)a2 + 1);
    unint64_t v49 = *((void *)a2 + 2);
    while (v48 < v49 && !*((unsigned char *)a2 + 24))
    {
      unint64_t v51 = (char *)*((void *)this + 5);
      unint64_t v50 = *((void *)this + 6);
      if ((unint64_t)v51 >= v50)
      {
        unint64_t v53 = (char *)*v8;
        uint64_t v54 = (v51 - (unsigned char *)*v8) >> 3;
        unint64_t v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61) {
          goto LABEL_144;
        }
        uint64_t v56 = v50 - (void)v53;
        if (v56 >> 2 > v55) {
          unint64_t v55 = v56 >> 2;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v55;
        }
        if (v57)
        {
          unint64_t v58 = (char *)sub_10000EEB0((uint64_t)v9, v57);
          unint64_t v53 = (char *)*((void *)this + 4);
          unint64_t v51 = (char *)*((void *)this + 5);
        }
        else
        {
          unint64_t v58 = 0;
        }
        unint64_t v59 = &v58[8 * v54];
        *(void *)unint64_t v59 = 0;
        uint64_t v52 = v59 + 8;
        while (v51 != v53)
        {
          uint64_t v60 = *((void *)v51 - 1);
          v51 -= 8;
          *((void *)v59 - 1) = v60;
          v59 -= 8;
        }
        *((void *)this + 4) = v59;
        *((void *)this + 5) = v52;
        *((void *)this + 6) = &v58[8 * v57];
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)unint64_t v51 = 0;
        uint64_t v52 = v51 + 8;
      }
      *((void *)this + 5) = v52;
      unint64_t v61 = *((void *)a2 + 1);
      if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((void *)a2 + 2))
      {
LABEL_93:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_94;
      }
      *(v52 - 1) = *(void *)(*(void *)a2 + v61);
      unint64_t v49 = *((void *)a2 + 2);
      unint64_t v48 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v48;
    }
    goto LABEL_94;
  }
  return v4 == 0;
}

uint64_t CMMsl::PostureJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(double **)(this + 8);
  long long v5 = *(double **)(this + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  double v7 = *(double **)(v3 + 32);
  long long v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  if (*(unsigned char *)(v3 + 60))
  {
    int v10 = *(_DWORD *)(v3 + 56);
    return PB::Writer::writeVarInt(a2, v10, 3u);
  }
  return this;
}

uint64_t CMMsl::PostureJoint::hash_value(CMMsl::PostureJoint *this)
{
  uint64_t v2 = PBHashBytes();
  uint64_t v3 = PBHashBytes();
  if (*((unsigned char *)this + 60)) {
    uint64_t v4 = *((int *)this + 14);
  }
  else {
    uint64_t v4 = 0;
  }
  return v3 ^ v2 ^ v4;
}

void CMMsl::PostureSkeleton::~PostureSkeleton(CMMsl::PostureSkeleton *this)
{
  *(void *)this = off_1003A83B8;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A83B8;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A83B8;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

void *CMMsl::PostureSkeleton::PostureSkeleton(void *this, const CMMsl::PostureSkeleton *a2)
{
  this[1] = 0;
  *this = off_1003A83B8;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_1001FB724();
  }
  return this;
}

void sub_1001FB724()
{
}

void sub_1001FB828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::PostureSkeleton::operator=(uint64_t a1, const CMMsl::PostureSkeleton *a2)
{
  if ((const CMMsl::PostureSkeleton *)a1 != a2)
  {
    CMMsl::PostureSkeleton::PostureSkeleton(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    double v6 = off_1003A83B8;
    double v9 = (void **)&v7;
    sub_100274A84(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::PostureSkeleton *a2, CMMsl::PostureSkeleton *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::PostureSkeleton::PostureSkeleton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A83B8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = off_1003A83B8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::PostureSkeleton::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    double v9 = off_1003A83B8;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_100274B44((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    uint64_t v12 = (void **)&v10;
    double v9 = off_1003A83B8;
    sub_100274A84(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PostureSkeleton::formatText(CMMsl::PostureSkeleton *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "joint");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PostureSkeleton::readFrom(CMMsl::PostureSkeleton *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_1001FBD28();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1001FBD28()
{
}

void sub_1001FBE50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::PostureSkeleton::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (int i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    long long v5 = *v2++;
  return this;
}

BOOL sub_1001FBEE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::PostureJoint::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::PostureSkeleton::hash_value(CMMsl::PostureSkeleton *this)
{
  uint64_t v1 = (CMMsl::PostureJoint **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::PostureJoint **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::PostureJoint::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::PowerManagementUserActivity::~PowerManagementUserActivity(CMMsl::PowerManagementUserActivity *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PowerManagementUserActivity::PowerManagementUserActivity(uint64_t this, const CMMsl::PowerManagementUserActivity *a2)
{
  *(void *)this = off_1003A83F0;
  *(_DWORD *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v2 = *((void *)a2 + 1);
    *(unsigned char *)(this + 16) = 1;
    *(void *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(unsigned char *)(a2 + 16) & 1;
    int v8 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v7[0] = off_1003A83F0;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void v8[2];
  int v9;

  if (a1 != a2)
  {
    uint64_t v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    unsigned int v9 = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v8[0] = off_1003A83F0;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PowerManagementUserActivity *a2, CMMsl::PowerManagementUserActivity *a3)
{
  int v3 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::formatText(CMMsl::PowerManagementUserActivity *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 16)) {
    PB::TextFormatter::format(a2, "userActivity", *((void *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PowerManagementUserActivity::readFrom(CMMsl::PowerManagementUserActivity *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_43:
        *((void *)this + 1) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PowerManagementUserActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 16)) {
    return PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
  }
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::hash_value(CMMsl::PowerManagementUserActivity *this)
{
  if (*((unsigned char *)this + 16)) {
    return *((void *)this + 1);
  }
  else {
    return 0;
  }
}

void CMMsl::PrecisionFindingDOTEstimate::~PrecisionFindingDOTEstimate(CMMsl::PrecisionFindingDOTEstimate *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate(CMMsl::PrecisionFindingDOTEstimate *this, const CMMsl::PrecisionFindingDOTEstimate *a2)
{
  *(void *)this = off_1003A8428;
  *((_DWORD *)this + 6) = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 24) = 2;
    *((double *)this + 2) = result;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 24))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::operator=(uint64_t a1, const CMMsl::PrecisionFindingDOTEstimate *a2)
{
  if ((const CMMsl::PrecisionFindingDOTEstimate *)a1 != a2)
  {
    CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate((CMMsl::PrecisionFindingDOTEstimate *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingDOTEstimate *a2, CMMsl::PrecisionFindingDOTEstimate *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8428;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8428;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = off_1003A8428;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::formatText(CMMsl::PrecisionFindingDOTEstimate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "dot", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::readFrom(CMMsl::PrecisionFindingDOTEstimate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_28;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_28:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::hash_value(CMMsl::PrecisionFindingDOTEstimate *this)
{
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 24)) {
      goto LABEL_3;
    }
LABEL_9:
    double v2 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1;
}

void CMMsl::PrecisionFindingRangeFilter::~PrecisionFindingRangeFilter(CMMsl::PrecisionFindingRangeFilter *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter(uint64_t this, const CMMsl::PrecisionFindingRangeFilter *a2)
{
  *(void *)this = off_1003A8460;
  *(_DWORD *)(this + 40) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 40) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 40))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 40) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(unsigned char *)(this + 40) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(unsigned char *)(this + 40) = v3;
  *(_DWORD *)(this + 32) = v7;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v8 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(unsigned char *)(this + 40) = v3;
  *(_DWORD *)(this + 28) = v8;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return this;
    }
LABEL_16:
    char v10 = *((unsigned char *)a2 + 37);
    *(unsigned char *)(this + 40) = v3 | 0x40;
    *(unsigned char *)(this + 37) = v10;
    return this;
  }
LABEL_15:
  char v9 = *((unsigned char *)a2 + 36);
  v3 |= 0x20u;
  *(unsigned char *)(this + 40) = v3;
  *(unsigned char *)(this + 36) = v9;
  if ((*((unsigned char *)a2 + 40) & 0x40) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::operator=(uint64_t a1, const CMMsl::PrecisionFindingRangeFilter *a2)
{
  if ((const CMMsl::PrecisionFindingRangeFilter *)a1 != a2)
  {
    CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v5;
    *(void *)&long long v4 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v10;
    uint64_t v10 = v4;
    LOBYTE(v5) = *(unsigned char *)(a1 + 36);
    *(unsigned char *)(a1 + 36) = v11;
    char v11 = v5;
    LOBYTE(v5) = *(unsigned char *)(a1 + 37);
    *(unsigned char *)(a1 + 37) = v12;
    char v12 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingRangeFilter *a2, CMMsl::PrecisionFindingRangeFilter *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  float result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  LOBYTE(v6) = *((unsigned char *)this + 36);
  *((unsigned char *)this + 36) = *((unsigned char *)a2 + 36);
  *((unsigned char *)a2 + 36) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 37);
  *((unsigned char *)this + 37) = *((unsigned char *)a2 + 37);
  *((unsigned char *)a2 + 37) = v6;
  return result;
}

float CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8460;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A8460;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  return result;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v11 = off_1003A8460;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    char v5 = *(unsigned char *)(a2 + 36);
    char v6 = *(unsigned char *)(a2 + 37);
    int v17 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v12 = v7;
    int v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v13 = v8;
    *(void *)&long long v7 = *(void *)(a1 + 28);
    uint64_t v9 = *(void *)(a2 + 28);
    *(_DWORD *)(a1 + 40) = v3;
    *(void *)(a1 + 28) = v9;
    uint64_t v14 = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 36);
    *(unsigned char *)(a1 + 36) = v5;
    char v15 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 37);
    *(unsigned char *)(a1 + 37) = v6;
    char v16 = v3;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::formatText(CMMsl::PrecisionFindingRangeFilter *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "inlierCount", *((_DWORD *)this + 6));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isOutlierCurrentSample", *((unsigned char *)this + 36));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "isValidMeasurement", *((unsigned char *)this + 37));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "range", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "rangeFrequency", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "rangeShift", *((float *)this + 8));
  if ((*((unsigned char *)this + 40) & 2) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingRangeFilter::readFrom(CMMsl::PrecisionFindingRangeFilter *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 40) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_43;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_30;
            case 2u:
              *((unsigned char *)this + 40) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_43;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_30:
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_61;
            case 3u:
              *((unsigned char *)this + 40) |= 4u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_66;
                  }
                  unint64_t v33 = v21++;
                  char v34 = *(unsigned char *)(v22 + v33);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  BOOL v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_65:
                    unint64_t v2 = v33 + 1;
                    goto LABEL_66;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_65;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_66;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_66:
              *((_DWORD *)this + 6) = v25;
LABEL_67:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *((unsigned char *)this + 40) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_43;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_60;
            case 5u:
              *((unsigned char *)this + 40) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_60:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_61:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_43:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_67;
            case 6u:
              *((unsigned char *)this + 40) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 36) = v28;
              goto LABEL_67;
            case 7u:
              *((unsigned char *)this + 40) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 37) = v30;
              goto LABEL_67;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_67;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 4u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 36), 6u);
    if ((*(unsigned char *)(v3 + 40) & 0x40) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 5u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_15:
  char v5 = *(unsigned char *)(v3 + 37);

  return PB::Writer::write(a2, v5, 7u);
}

uint64_t CMMsl::PrecisionFindingRangeFilter::hash_value(CMMsl::PrecisionFindingRangeFilter *this)
{
  if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 40)) {
      goto LABEL_3;
    }
LABEL_18:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
  double v1 = *((double *)this + 2);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 4) != 0)
  {
LABEL_6:
    uint64_t v3 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_7;
    }
LABEL_20:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_10;
    }
LABEL_21:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_13;
    }
LABEL_22:
    uint64_t v8 = 0;
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_14;
    }
LABEL_23:
    uint64_t v9 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ v3 ^ v5 ^ v7 ^ v8 ^ v9;
  }
LABEL_19:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 40) & 0x10) == 0) {
    goto LABEL_20;
  }
LABEL_7:
  float v4 = *((float *)this + 8);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_21;
  }
LABEL_10:
  float v6 = *((float *)this + 7);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x20) == 0) {
    goto LABEL_22;
  }
LABEL_13:
  uint64_t v8 = *((unsigned __int8 *)this + 36);
  if ((*((unsigned char *)this + 40) & 0x40) == 0) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v9 = *((unsigned __int8 *)this + 37);
  return *(void *)&v2 ^ *(void *)&v1 ^ v3 ^ v5 ^ v7 ^ v8 ^ v9;
}

void CMMsl::PrecisionFindingSessionStartStop::~PrecisionFindingSessionStartStop(CMMsl::PrecisionFindingSessionStartStop *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t this, const CMMsl::PrecisionFindingSessionStartStop *a2)
{
  *(void *)this = off_1003A8498;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::operator=(uint64_t a1, const CMMsl::PrecisionFindingSessionStartStop *a2)
{
  if ((const CMMsl::PrecisionFindingSessionStartStop *)a1 != a2)
  {
    CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingSessionStartStop *a2, CMMsl::PrecisionFindingSessionStartStop *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8498;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8498;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A8498;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::formatText(CMMsl::PrecisionFindingSessionStartStop *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "isStart", *((unsigned char *)this + 16));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::readFrom(CMMsl::PrecisionFindingSessionStartStop *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v22 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v22 = v21 != 0;
        }
        *((unsigned char *)this + 16) = v22;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::hash_value(CMMsl::PrecisionFindingSessionStartStop *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

void CMMsl::PrecisionFindingState::~PrecisionFindingState(CMMsl::PrecisionFindingState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PrecisionFindingState::PrecisionFindingState(CMMsl::PrecisionFindingState *this, const CMMsl::PrecisionFindingState *a2)
{
  *(void *)this = off_1003A84D0;
  *((_DWORD *)this + 23) = 0;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x40) != 0)
  {
    double result = *((double *)a2 + 7);
    __int16 v3 = 64;
    *((_WORD *)this + 46) = 64;
    *((double *)this + 7) = result;
    __int16 v2 = *((_WORD *)a2 + 46);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if (v2)
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_WORD *)this + 46) = v3;
    *((double *)this + 1) = result;
    __int16 v2 = *((_WORD *)a2 + 46);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 46) = v3;
    *((double *)this + 2) = result;
    __int16 v2 = *((_WORD *)a2 + 46);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 5) = result;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  char v5 = *((unsigned char *)a2 + 88);
  v3 |= 0x800u;
  *((_WORD *)this + 46) = v3;
  *((unsigned char *)this + 88) = v5;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v6 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *((_WORD *)this + 46) = v3;
  *((_DWORD *)this + 21) = v6;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *((_WORD *)this + 46) = v3;
  *((_DWORD *)this + 20) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_28:
    double result = *((double *)a2 + 6);
    *((_WORD *)this + 46) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_27:
  char v7 = *((unsigned char *)a2 + 89);
  v3 |= 0x1000u;
  *((_WORD *)this + 46) = v3;
  *((unsigned char *)this + 89) = v7;
  if ((*((_WORD *)a2 + 46) & 0x20) != 0) {
    goto LABEL_28;
  }
  return result;
}

CMMsl *CMMsl::PrecisionFindingState::operator=(CMMsl *a1, const CMMsl::PrecisionFindingState *a2)
{
  if (a1 != a2)
  {
    CMMsl::PrecisionFindingState::PrecisionFindingState((CMMsl::PrecisionFindingState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PrecisionFindingState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingState *a2, CMMsl::PrecisionFindingState *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  LOBYTE(v3) = *((unsigned char *)this + 88);
  *((unsigned char *)this + 88) = *((unsigned char *)a2 + 88);
  *((unsigned char *)a2 + 88) = v3;
  int v12 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v12;
  LODWORD(v11) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v11;
  LOBYTE(v12) = *((unsigned char *)this + 89);
  *((unsigned char *)this + 89) = *((unsigned char *)a2 + 89);
  *((unsigned char *)a2 + 89) = v12;
  double result = *((double *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::PrecisionFindingState::PrecisionFindingState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A84D0;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::PrecisionFindingState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PrecisionFindingState::PrecisionFindingState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PrecisionFindingState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingState::formatText(CMMsl::PrecisionFindingState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "distanceFromParticleFilter", *((float *)this + 20));
    __int16 v5 = *((_WORD *)this + 46);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "horizontalAngle", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "horizontalAngleUncertainty", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "horizontalAngleUncertaintyUnfiltered", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isConverged", *((unsigned char *)this + 88));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "isDistanceValid", *((unsigned char *)this + 89));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "positionX", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "positionY", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "positionZ", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "revokeReason", *((_DWORD *)this + 21));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x80) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "velocityX", *((double *)this + 8));
  if ((*((_WORD *)this + 46) & 0x100) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "velocityY", *((double *)this + 9));
LABEL_15:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingState::readFrom(CMMsl::PrecisionFindingState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 46) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 2u:
              *((_WORD *)this + 46) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 3u:
              *((_WORD *)this + 46) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 4u:
              *((_WORD *)this + 46) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 5u:
              *((_WORD *)this + 46) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 6u:
              *((_WORD *)this + 46) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 7u:
              *((_WORD *)this + 46) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 8u:
              *((_WORD *)this + 46) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 9u:
              *((_WORD *)this + 46) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 88) = v22;
              goto LABEL_84;
            case 0xAu:
              *((_WORD *)this + 46) |= 0x400u;
              unint64_t v23 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v24 = *(void *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_83;
                  }
                  unint64_t v33 = v23++;
                  char v34 = *(unsigned char *)(v24 + v33);
                  *((void *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  BOOL v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    unint64_t v2 = v33 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_82;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)a2 + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_83;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *((_DWORD *)this + 21) = v27;
LABEL_84:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *((_WORD *)this + 46) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 4;
              goto LABEL_78;
            case 0xCu:
              *((_WORD *)this + 46) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 89) = v30;
              goto LABEL_84;
            case 0xDu:
              *((_WORD *)this + 46) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
LABEL_77:
                unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_78:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_64:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_84;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_84;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 92);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 5u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 6u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 7u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 8u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 88), 9u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 89), 0xCu);
    if ((*(_WORD *)(v3 + 92) & 0x20) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x1000) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_27:
  double v5 = *(double *)(v3 + 48);

  return PB::Writer::write(a2, v5, 0xDu);
}

uint64_t CMMsl::PrecisionFindingState::hash_value(CMMsl::PrecisionFindingState *this)
{
  __int16 v1 = *((_WORD *)this + 46);
  if ((v1 & 0x40) == 0)
  {
    double v2 = 0.0;
    if (v1) {
      goto LABEL_3;
    }
LABEL_36:
    double v3 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
LABEL_37:
    double v4 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_9;
    }
LABEL_38:
    double v5 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_12;
    }
LABEL_39:
    double v6 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_15;
    }
LABEL_40:
    double v7 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_18;
    }
LABEL_41:
    double v8 = 0.0;
    if ((*((_WORD *)this + 46) & 0x100) != 0) {
      goto LABEL_21;
    }
LABEL_42:
    double v9 = 0.0;
    if ((*((_WORD *)this + 46) & 0x800) != 0) {
      goto LABEL_24;
    }
    goto LABEL_43;
  }
  double v2 = *((double *)this + 7);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_3:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_37;
  }
LABEL_6:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_38;
  }
LABEL_9:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_39;
  }
LABEL_12:
  double v6 = *((double *)this + 4);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_40;
  }
LABEL_15:
  double v7 = *((double *)this + 5);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_41;
  }
LABEL_18:
  double v8 = *((double *)this + 8);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 46) & 0x100) == 0) {
    goto LABEL_42;
  }
LABEL_21:
  double v9 = *((double *)this + 9);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((*((_WORD *)this + 46) & 0x800) != 0)
  {
LABEL_24:
    uint64_t v10 = *((unsigned __int8 *)this + 88);
    if ((*((_WORD *)this + 46) & 0x400) != 0) {
      goto LABEL_25;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v10 = 0;
  if ((*((_WORD *)this + 46) & 0x400) != 0)
  {
LABEL_25:
    uint64_t v11 = *((unsigned int *)this + 21);
    if ((*((_WORD *)this + 46) & 0x200) != 0) {
      goto LABEL_26;
    }
LABEL_45:
    uint64_t v13 = 0;
    if ((*((_WORD *)this + 46) & 0x1000) != 0) {
      goto LABEL_29;
    }
    goto LABEL_46;
  }
LABEL_44:
  uint64_t v11 = 0;
  if ((*((_WORD *)this + 46) & 0x200) == 0) {
    goto LABEL_45;
  }
LABEL_26:
  float v12 = *((float *)this + 20);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((*((_WORD *)this + 46) & 0x1000) != 0)
  {
LABEL_29:
    uint64_t v14 = *((unsigned __int8 *)this + 89);
    if ((v1 & 0x20) != 0) {
      goto LABEL_30;
    }
LABEL_47:
    double v15 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ v11 ^ v13 ^ v14 ^ *(void *)&v15;
  }
LABEL_46:
  uint64_t v14 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_47;
  }
LABEL_30:
  double v15 = *((double *)this + 6);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ v11 ^ v13 ^ v14 ^ *(void *)&v15;
}

void CMMsl::PrecisionFindingVelocityEstimate::~PrecisionFindingVelocityEstimate(CMMsl::PrecisionFindingVelocityEstimate *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate(CMMsl::PrecisionFindingVelocityEstimate *this, const CMMsl::PrecisionFindingVelocityEstimate *a2)
{
  *(void *)this = off_1003A8508;
  *((_DWORD *)this + 11) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 44) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((unsigned char *)this + 44) = v3;
    *((_DWORD *)this + 7) = v4;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((unsigned char *)this + 44) = v3;
    *((_DWORD *)this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 4) = v4;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 9) = v4;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 10) = v4;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 5) = v4;
  if ((*((unsigned char *)a2 + 44) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_18:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 44) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::operator=(uint64_t a1, const CMMsl::PrecisionFindingVelocityEstimate *a2)
{
  if ((const CMMsl::PrecisionFindingVelocityEstimate *)a1 != a2)
  {
    CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate((CMMsl::PrecisionFindingVelocityEstimate *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v4;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingVelocityEstimate *a2, CMMsl::PrecisionFindingVelocityEstimate *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8508;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A8508;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v11[0] = off_1003A8508;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 40);
    int v15 = *(_DWORD *)(a1 + 44);
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v11[1] = v6;
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 16);
    long long v8 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(void *)(a1 + 32) = v9;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v8;
    long long v12 = v7;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::formatText(CMMsl::PrecisionFindingVelocityEstimate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "noiseVelocityX", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "noiseVelocityY", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "speed", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "speedUncertainty", *((float *)this + 8));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(a2, "velocityX", *((float *)this + 9));
    if ((*((unsigned char *)this + 44) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "velocityY", *((float *)this + 10));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::readFrom(CMMsl::PrecisionFindingVelocityEstimate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 44) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_50;
        case 2u:
          *((unsigned char *)this + 44) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_49;
        case 3u:
          *((unsigned char *)this + 44) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_49;
        case 4u:
          *((unsigned char *)this + 44) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_49;
        case 5u:
          *((unsigned char *)this + 44) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_49;
        case 6u:
          *((unsigned char *)this + 44) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_49;
        case 7u:
          *((unsigned char *)this + 44) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_49;
        case 8u:
          *((unsigned char *)this + 44) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
          {
LABEL_47:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_49:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_50:
            *((void *)a2 + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 5u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 20), 7u);
    if ((*(unsigned char *)(v3 + 44) & 8) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 6u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_17:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(a2, v5, 8u);
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::hash_value(CMMsl::PrecisionFindingVelocityEstimate *this)
{
  if ((*((unsigned char *)this + 44) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_27:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_28:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_29:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 44) & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_30:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 44) & 0x80) != 0) {
      goto LABEL_15;
    }
LABEL_31:
    uint64_t v11 = 0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_27;
  }
LABEL_3:
  float v2 = *((float *)this + 7);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x20) == 0) {
    goto LABEL_28;
  }
LABEL_6:
  float v4 = *((float *)this + 8);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_29;
  }
LABEL_9:
  float v6 = *((float *)this + 4);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x40) == 0) {
    goto LABEL_30;
  }
LABEL_12:
  float v8 = *((float *)this + 9);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_15:
  float v10 = *((float *)this + 10);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((*((unsigned char *)this + 44) & 4) != 0)
  {
LABEL_18:
    float v12 = *((float *)this + 5);
    uint64_t v13 = LODWORD(v12);
    if (v12 == 0.0) {
      uint64_t v13 = 0;
    }
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_21;
    }
LABEL_33:
    uint64_t v15 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_32:
  uint64_t v13 = 0;
  if ((*((unsigned char *)this + 44) & 8) == 0) {
    goto LABEL_33;
  }
LABEL_21:
  float v14 = *((float *)this + 6);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
}

void CMMsl::PrecisionFindingVerticalState::~PrecisionFindingVerticalState(CMMsl::PrecisionFindingVerticalState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState(uint64_t this, const CMMsl::PrecisionFindingVerticalState *a2)
{
  *(void *)this = off_1003A8540;
  *(_DWORD *)(this + 60) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    __int16 v3 = 16;
    *(_WORD *)(this + 60) = 16;
    *(void *)(this + 40) = v4;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 60) = v3;
    *(void *)(this + 16) = v5;
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    uint64_t v6 = *((void *)a2 + 6);
    v3 |= 0x20u;
    *(_WORD *)(this + 60) = v3;
    *(void *)(this + 48) = v6;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 60) = v3;
  *(void *)(this + 32) = v7;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v8 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 60) = v3;
  *(void *)(this + 8) = v8;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v9 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(void *)(this + 24) = v9;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v10 = *((unsigned char *)a2 + 58);
  v3 |= 0x100u;
  *(_WORD *)(this + 60) = v3;
  *(unsigned char *)(this + 58) = v10;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_20:
    char v12 = *((unsigned char *)a2 + 57);
    *(_WORD *)(this + 60) = v3 | 0x80;
    *(unsigned char *)(this + 57) = v12;
    return this;
  }
LABEL_19:
  char v11 = *((unsigned char *)a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(unsigned char *)(this + 56) = v11;
  if ((*((_WORD *)a2 + 30) & 0x80) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingVerticalState::operator=(uint64_t a1, const CMMsl::PrecisionFindingVerticalState *a2)
{
  if ((const CMMsl::PrecisionFindingVerticalState *)a1 != a2)
  {
    CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 58);
    *(unsigned char *)(a1 + 58) = v14;
    char v14 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v12;
    char v12 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 57);
    *(unsigned char *)(a1 + 57) = v13;
    char v13 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingVerticalState *a2, CMMsl::PrecisionFindingVerticalState *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  LOBYTE(v3) = *((unsigned char *)this + 58);
  *((unsigned char *)this + 58) = *((unsigned char *)a2 + 58);
  *((unsigned char *)a2 + 58) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 57);
  *((unsigned char *)this + 57) = *((unsigned char *)a2 + 57);
  *((unsigned char *)a2 + 57) = v3;
  return result;
}

double CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8540;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return result;
}

uint64_t CMMsl::PrecisionFindingVerticalState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 58);
    *(unsigned char *)(a1 + 58) = v14;
    char v14 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v12;
    char v12 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 57);
    *(unsigned char *)(a1 + 57) = v13;
    char v13 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingVerticalState::formatText(CMMsl::PrecisionFindingVerticalState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if (v5)
  {
    PB::TextFormatter::format(a2, "fractionAboveThreshold", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "horizontalDistance", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isAboveBelow", *((unsigned char *)this + 56));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "isAboveBelowMessageShowing", *((unsigned char *)this + 57));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "isConverged", *((unsigned char *)this + 58));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "likelihoodAboveThreshold", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "relativeAltitude", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  if ((*((_WORD *)this + 30) & 0x20) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "verticalDistance", *((double *)this + 6));
LABEL_11:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingVerticalState::readFrom(CMMsl::PrecisionFindingVerticalState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 30) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_43;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 2u:
          *((_WORD *)this + 30) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_43;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 3u:
          *((_WORD *)this + 30) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_43;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 4u:
          *((_WORD *)this + 30) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_43;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 5u:
          *((_WORD *)this + 30) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_43;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 6u:
          *((_WORD *)this + 30) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_55:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_43:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        case 7u:
          *((_WORD *)this + 30) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v24 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v24 = v23 != 0;
          }
          *((unsigned char *)this + 58) = v24;
          break;
        case 8u:
          *((_WORD *)this + 30) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *((unsigned char *)this + 56) = v21;
          break;
        case 9u:
          *((_WORD *)this + 30) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v26 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v25 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v26 = v25 != 0;
          }
          *((unsigned char *)this + 57) = v26;
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingVerticalState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 3u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 6u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 56), 8u);
    if ((*(_WORD *)(v3 + 60) & 0x80) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 58), 7u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_19:
  char v5 = *(unsigned char *)(v3 + 57);

  return PB::Writer::write(a2, v5, 9u);
}

uint64_t CMMsl::PrecisionFindingVerticalState::hash_value(CMMsl::PrecisionFindingVerticalState *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 0x10) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_24:
    double v3 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_25:
    double v4 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_26:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_27:
    double v6 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_15;
    }
LABEL_28:
    double v7 = 0.0;
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_18;
    }
    goto LABEL_29;
  }
  double v2 = *((double *)this + 5);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_24;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_6:
  double v4 = *((double *)this + 6);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_26;
  }
LABEL_9:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_28;
  }
LABEL_15:
  double v7 = *((double *)this + 3);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((_WORD *)this + 30) & 0x100) != 0)
  {
LABEL_18:
    uint64_t v8 = *((unsigned __int8 *)this + 58);
    if ((v1 & 0x40) != 0) {
      goto LABEL_19;
    }
LABEL_30:
    uint64_t v9 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_20;
    }
LABEL_31:
    uint64_t v10 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ v10;
  }
LABEL_29:
  uint64_t v8 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_30;
  }
LABEL_19:
  uint64_t v9 = *((unsigned __int8 *)this + 56);
  if ((v1 & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_20:
  uint64_t v10 = *((unsigned __int8 *)this + 57);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ v10;
}

void CMMsl::PredictedRelativeDeviceMotion::~PredictedRelativeDeviceMotion(CMMsl::PredictedRelativeDeviceMotion *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion(CMMsl::PredictedRelativeDeviceMotion *this, const CMMsl::PredictedRelativeDeviceMotion *a2)
{
  *(void *)this = off_1003A8578;
  *((_DWORD *)this + 20) = 0;
  __int16 v2 = *((_WORD *)a2 + 40);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 40) = 1;
    *((double *)this + 1) = result;
    __int16 v2 = *((_WORD *)a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_WORD *)this + 40) = v3;
    *((double *)this + 3) = result;
    __int16 v2 = *((_WORD *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *((_WORD *)this + 40) = v3;
    *((_DWORD *)this + 9) = LODWORD(result);
    __int16 v2 = *((_WORD *)a2 + 40);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 10) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 13) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *((_DWORD *)a2 + 15);
  v3 |= 0x400u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 15) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 12) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(result) = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 16) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(result) = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 17) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 18) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_32:
    double result = *((double *)a2 + 2);
    *((_WORD *)this + 40) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_31:
  char v5 = *((unsigned char *)a2 + 76);
  v3 |= 0x4000u;
  *((_WORD *)this + 40) = v3;
  *((unsigned char *)this + 76) = v5;
  if ((*((_WORD *)a2 + 40) & 2) != 0) {
    goto LABEL_32;
  }
  return result;
}

CMMsl *CMMsl::PredictedRelativeDeviceMotion::operator=(CMMsl *a1, const CMMsl::PredictedRelativeDeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion((CMMsl::PredictedRelativeDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PredictedRelativeDeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PredictedRelativeDeviceMotion *a2, CMMsl::PredictedRelativeDeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  LODWORD(v5) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v5) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  LODWORD(v5) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  LODWORD(v5) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v5;
  LODWORD(v5) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v5;
  LODWORD(v5) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v5;
  LOBYTE(v3) = *((unsigned char *)this + 76);
  *((unsigned char *)this + 76) = *((unsigned char *)a2 + 76);
  *((unsigned char *)a2 + 76) = v3;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8578;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::PredictedRelativeDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PredictedRelativeDeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::formatText(CMMsl::PredictedRelativeDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "lastStateTimestamp", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "qStartW", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "qStartX", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "qStartY", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "qStartZ", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "qStopW", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "qStopX", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "qStopY", *((float *)this + 14));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "qStopZ", *((float *)this + 15));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "rBoresightX", *((float *)this + 16));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "rBoresightY", *((float *)this + 17));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "rBoresightZ", *((float *)this + 18));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "srcTimestamp", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 3));
  if ((*((_WORD *)this + 40) & 0x4000) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(a2, "useForwardPrediction", *((unsigned char *)this + 76));
LABEL_17:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::readFrom(CMMsl::PredictedRelativeDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 40) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_65;
        case 2u:
          *((_WORD *)this + 40) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_65;
        case 3u:
          *((_WORD *)this + 40) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_72;
        case 4u:
          *((_WORD *)this + 40) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_72;
        case 5u:
          *((_WORD *)this + 40) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_72;
        case 6u:
          *((_WORD *)this + 40) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_72;
        case 7u:
          *((_WORD *)this + 40) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_72;
        case 8u:
          *((_WORD *)this + 40) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_72;
        case 9u:
          *((_WORD *)this + 40) |= 0x400u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_72;
        case 0xAu:
          *((_WORD *)this + 40) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_72;
        case 0xBu:
          *((_WORD *)this + 40) |= 0x800u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_72;
        case 0xCu:
          *((_WORD *)this + 40) |= 0x1000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_72;
        case 0xDu:
          *((_WORD *)this + 40) |= 0x2000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_72:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          goto LABEL_73;
        case 0xEu:
          *((_WORD *)this + 40) |= 0x4000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v22 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v22 = v21 != 0;
          }
          *((unsigned char *)this + 76) = v22;
          break;
        case 0xFu:
          *((_WORD *)this + 40) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
          {
LABEL_68:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_65:
            unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_73:
            *((void *)a2 + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 80);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 3u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 4u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 5u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 6u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 7u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 8u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 9u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
LABEL_30:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 76), 0xEu);
    if ((*(_WORD *)(v3 + 80) & 2) == 0) {
      return this;
    }
    goto LABEL_31;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xDu);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x4000) != 0) {
    goto LABEL_30;
  }
LABEL_15:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_31:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 0xFu);
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::hash_value(CMMsl::PredictedRelativeDeviceMotion *this)
{
  __int16 v1 = *((_WORD *)this + 40);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_3;
    }
LABEL_46:
    double v3 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_47:
    uint64_t v5 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_48:
    uint64_t v7 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_49:
    uint64_t v9 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_15;
    }
LABEL_50:
    uint64_t v11 = 0;
    if ((*((_WORD *)this + 40) & 0x100) != 0) {
      goto LABEL_18;
    }
LABEL_51:
    uint64_t v13 = 0;
    if ((*((_WORD *)this + 40) & 0x200) != 0) {
      goto LABEL_21;
    }
LABEL_52:
    uint64_t v15 = 0;
    if ((*((_WORD *)this + 40) & 0x400) != 0) {
      goto LABEL_24;
    }
LABEL_53:
    uint64_t v17 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_27;
    }
LABEL_54:
    uint64_t v19 = 0;
    if ((*((_WORD *)this + 40) & 0x800) != 0) {
      goto LABEL_30;
    }
LABEL_55:
    uint64_t v21 = 0;
    if ((*((_WORD *)this + 40) & 0x1000) != 0) {
      goto LABEL_33;
    }
LABEL_56:
    uint64_t v23 = 0;
    if ((*((_WORD *)this + 40) & 0x2000) != 0) {
      goto LABEL_36;
    }
LABEL_57:
    uint64_t v25 = 0;
    if ((*((_WORD *)this + 40) & 0x4000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_58;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_46;
  }
LABEL_3:
  double v3 = *((double *)this + 3);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_47;
  }
LABEL_6:
  float v4 = *((float *)this + 9);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_48;
  }
LABEL_9:
  float v6 = *((float *)this + 10);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_49;
  }
LABEL_12:
  float v8 = *((float *)this + 11);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_50;
  }
LABEL_15:
  float v10 = *((float *)this + 8);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x100) == 0) {
    goto LABEL_51;
  }
LABEL_18:
  float v12 = *((float *)this + 13);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x200) == 0) {
    goto LABEL_52;
  }
LABEL_21:
  float v14 = *((float *)this + 14);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x400) == 0) {
    goto LABEL_53;
  }
LABEL_24:
  float v16 = *((float *)this + 15);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_54;
  }
LABEL_27:
  float v18 = *((float *)this + 12);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x800) == 0) {
    goto LABEL_55;
  }
LABEL_30:
  float v20 = *((float *)this + 16);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x1000) == 0) {
    goto LABEL_56;
  }
LABEL_33:
  float v22 = *((float *)this + 17);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x2000) == 0) {
    goto LABEL_57;
  }
LABEL_36:
  float v24 = *((float *)this + 18);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x4000) != 0)
  {
LABEL_39:
    uint64_t v26 = *((unsigned __int8 *)this + 76);
    if ((v1 & 2) != 0) {
      goto LABEL_40;
    }
LABEL_59:
    double v27 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ *(void *)&v27;
  }
LABEL_58:
  uint64_t v26 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_59;
  }
LABEL_40:
  double v27 = *((double *)this + 2);
  if (v27 == 0.0) {
    double v27 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ *(void *)&v27;
}

void CMMsl::Pressure::~Pressure(CMMsl::Pressure *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::Pressure::Pressure(CMMsl::Pressure *this, const CMMsl::Pressure *a2)
{
  *(void *)this = off_1003A85B0;
  *((_DWORD *)this + 6) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 24) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 24) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    *((unsigned char *)this + 24) = v3 | 4;
    *((_DWORD *)this + 5) = v4;
  }
  return *(float *)&v4;
}

uint64_t CMMsl::Pressure::operator=(uint64_t a1, const CMMsl::Pressure *a2)
{
  if ((const CMMsl::Pressure *)a1 != a2)
  {
    CMMsl::Pressure::Pressure((CMMsl::Pressure *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v4 = v10;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v4;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Pressure *a2, CMMsl::Pressure *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::Pressure::Pressure(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A85B0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A85B0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::Pressure::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v7[0] = off_1003A85B0;
    int v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    void v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::Pressure::formatText(CMMsl::Pressure *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "pressure", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "temperature", *((float *)this + 5));
  if (*((unsigned char *)this + 24)) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Pressure::readFrom(CMMsl::Pressure *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_32;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_36:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_37;
      }
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        goto LABEL_38;
      }
      *((unsigned char *)this + 24) |= 1u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
      {
LABEL_32:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_37:
      *((void *)a2 + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 24) |= 4u;
    unint64_t v2 = *((void *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
      goto LABEL_32;
    }
    *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::Pressure::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 24) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
    if ((*(unsigned char *)(v3 + 24) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(a2, v5, 3u);
}

uint64_t CMMsl::Pressure::hash_value(CMMsl::Pressure *this)
{
  if (*((unsigned char *)this + 24))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 24) & 2) != 0)
    {
LABEL_3:
      float v2 = *((float *)this + 4);
      uint64_t v3 = LODWORD(v2);
      if (v2 == 0.0) {
        uint64_t v3 = 0;
      }
      if ((*((unsigned char *)this + 24) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t v5 = 0;
      return v3 ^ *(void *)&v1 ^ v5;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5;
}

void CMMsl::PressureCalibration::~PressureCalibration(CMMsl::PressureCalibration *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::PressureCalibration::PressureCalibration(CMMsl::PressureCalibration *this, const CMMsl::PressureCalibration *a2)
{
  *(void *)this = off_1003A85E8;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 0x20) != 0)
  {
    float result = *((float *)a2 + 7);
    char v3 = 32;
    *((unsigned char *)this + 32) = 32;
    *((float *)this + 7) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 6);
    v3 |= 0x10u;
    *((unsigned char *)this + 32) = v3;
    *((float *)this + 6) = result;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    float result = *((float *)a2 + 5);
    v3 |= 8u;
    *((unsigned char *)this + 32) = v3;
    *((float *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 2);
  v3 |= 1u;
  *((unsigned char *)this + 32) = v3;
  *((float *)this + 2) = result;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_14:
    float result = *((float *)a2 + 4);
    *((unsigned char *)this + 32) = v3 | 4;
    *((float *)this + 4) = result;
    return result;
  }
LABEL_13:
  float result = *((float *)a2 + 3);
  v3 |= 2u;
  *((unsigned char *)this + 32) = v3;
  *((float *)this + 3) = result;
  if ((*((unsigned char *)a2 + 32) & 4) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t CMMsl::PressureCalibration::operator=(uint64_t a1, const CMMsl::PressureCalibration *a2)
{
  if ((const CMMsl::PressureCalibration *)a1 != a2)
  {
    CMMsl::PressureCalibration::PressureCalibration((CMMsl::PressureCalibration *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PressureCalibration *a2, CMMsl::PressureCalibration *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  int v7 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v7;
  int v8 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v8;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::PressureCalibration::PressureCalibration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A85E8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A85E8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PressureCalibration::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v8 = off_1003A85E8;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    uint64_t v6 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    *(void *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    long long v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PressureCalibration::formatText(CMMsl::PressureCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "inertialX", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "inertialY", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "inertialZ", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "maxTemp", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "medTocFactoryTemp", *((float *)this + 6));
  if ((*((unsigned char *)this + 32) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "medianToc", *((float *)this + 7));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureCalibration::readFrom(CMMsl::PressureCalibration *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 32) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 2u:
          *((unsigned char *)this + 32) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 3u:
          *((unsigned char *)this + 32) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 4u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 5u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 6u:
          *((unsigned char *)this + 32) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_43:
            unint64_t v2 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_41:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(float *)(v3 + 12), 5u);
    if ((*(unsigned char *)(v3 + 32) & 4) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 8), 4u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_13:
  float v5 = *(float *)(v3 + 16);

  return PB::Writer::write(a2, v5, 6u);
}

uint64_t CMMsl::PressureCalibration::hash_value(CMMsl::PressureCalibration *this)
{
  if ((*((unsigned char *)this + 32) & 0x20) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_22:
    uint64_t v5 = 0;
    if (*((unsigned char *)this + 32)) {
      goto LABEL_9;
    }
LABEL_23:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
  float v12 = *((float *)this + 7);
  uint64_t v1 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 32) & 0x10) == 0) {
    goto LABEL_21;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_22;
  }
LABEL_6:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_23;
  }
LABEL_9:
  float v6 = *((float *)this + 2);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_12:
    float v8 = *((float *)this + 3);
    uint64_t v9 = LODWORD(v8);
    if (v8 == 0.0) {
      uint64_t v9 = 0;
    }
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v11 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
  }
LABEL_24:
  uint64_t v9 = 0;
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  float v10 = *((float *)this + 4);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
}

void CMMsl::PressureCompensated::~PressureCompensated(CMMsl::PressureCompensated *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A8620;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PressureCompensated::~PressureCompensated(this);

  operator delete();
}

void *CMMsl::PressureCompensated::PressureCompensated(void *this, const CMMsl::PressureCompensated *a2)
{
  *this = off_1003A8620;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::PressureCompensated *CMMsl::PressureCompensated::operator=(const CMMsl::PressureCompensated *a1, const CMMsl::PressureCompensated *a2)
{
  if (a1 != a2)
  {
    CMMsl::PressureCompensated::PressureCompensated(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::PressureCompensated::~PressureCompensated((CMMsl::PressureCompensated *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureCompensated *a2, CMMsl::PressureCompensated *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::PressureCompensated::PressureCompensated(void *a1, uint64_t a2)
{
  *a1 = off_1003A8620;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A8620;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PressureCompensated::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A8620;
    v6[1] = v4;
    CMMsl::PressureCompensated::~PressureCompensated((CMMsl::PressureCompensated *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureCompensated::formatText(CMMsl::PressureCompensated *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureCompensated::readFrom(CMMsl::PressureCompensated *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureCompensated::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::Pressure *CMMsl::PressureCompensated::hash_value(CMMsl::PressureCompensated *this)
{
  uint64_t result = (CMMsl::Pressure *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::PressureCompensated::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PressureFiltered::~PressureFiltered(CMMsl::PressureFiltered *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A8658;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PressureFiltered::~PressureFiltered(this);

  operator delete();
}

void *CMMsl::PressureFiltered::PressureFiltered(void *this, const CMMsl::PressureFiltered *a2)
{
  *this = off_1003A8658;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::PressureFiltered *CMMsl::PressureFiltered::operator=(const CMMsl::PressureFiltered *a1, const CMMsl::PressureFiltered *a2)
{
  if (a1 != a2)
  {
    CMMsl::PressureFiltered::PressureFiltered(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::PressureFiltered::~PressureFiltered((CMMsl::PressureFiltered *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureFiltered *a2, CMMsl::PressureFiltered *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::PressureFiltered::PressureFiltered(void *a1, uint64_t a2)
{
  *a1 = off_1003A8658;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A8658;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PressureFiltered::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A8658;
    v6[1] = v4;
    CMMsl::PressureFiltered::~PressureFiltered((CMMsl::PressureFiltered *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureFiltered::formatText(CMMsl::PressureFiltered *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureFiltered::readFrom(CMMsl::PressureFiltered *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureFiltered::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::Pressure *CMMsl::PressureFiltered::hash_value(CMMsl::PressureFiltered *this)
{
  uint64_t result = (CMMsl::Pressure *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::PressureFiltered::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PressureFiltered1HzLowPass::~PressureFiltered1HzLowPass(CMMsl::PressureFiltered1HzLowPass *this)
{
  *(void *)this = off_1003A8690;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PressureFiltered1HzLowPass::~PressureFiltered1HzLowPass(this);

  operator delete();
}

uint64_t CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass(uint64_t this, const CMMsl::PressureFiltered1HzLowPass *a2)
{
  *(void *)this = off_1003A8690;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 1);
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 8) = v2;
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::operator=(uint64_t a1, const CMMsl::PressureFiltered1HzLowPass *a2)
{
  if ((const CMMsl::PressureFiltered1HzLowPass *)a1 != a2)
  {
    CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::PressureFiltered1HzLowPass::~PressureFiltered1HzLowPass((CMMsl::PressureFiltered1HzLowPass *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PressureFiltered1HzLowPass *a2, CMMsl::PressureFiltered1HzLowPass *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  return result;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8690;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::PressureFiltered1HzLowPass::~PressureFiltered1HzLowPass((CMMsl::PressureFiltered1HzLowPass *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::formatText(CMMsl::PressureFiltered1HzLowPass *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "iostime", *((double *)this + 1));
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureFiltered1HzLowPass::readFrom(CMMsl::PressureFiltered1HzLowPass *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2) {
        operator new();
      }
      if (v20 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v21);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 24)) {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
  }
  int v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
  {
    return PB::Writer::writeSubmessage(a2, v4, 2u);
  }
  return this;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::hash_value(CMMsl::PressureFiltered1HzLowPass *this)
{
  if (*((unsigned char *)this + 24))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
  }
  else
  {
    double v1 = 0.0;
  }
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if ((*(unsigned char *)(v2 + 20) & 1) == 0) {
      uint64_t v3 = 0;
    }
    float v4 = *(float *)(v2 + 16);
    BOOL v5 = v4 == 0.0 || (*(unsigned char *)(v2 + 20) & 2) == 0;
    uint64_t v6 = LODWORD(v4);
    if (v5) {
      uint64_t v6 = 0;
    }
    uint64_t v2 = v6 ^ v3;
  }
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

void CMMsl::PressureFilteredNoTemperature::~PressureFilteredNoTemperature(CMMsl::PressureFilteredNoTemperature *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature(CMMsl::PressureFilteredNoTemperature *this, const CMMsl::PressureFilteredNoTemperature *a2)
{
  *(void *)this = off_1003A86C8;
  *((_DWORD *)this + 5) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *((unsigned char *)this + 20) = 1;
    *((void *)this + 1) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 4);
    *((unsigned char *)this + 20) = v2;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t CMMsl::PressureFilteredNoTemperature::operator=(uint64_t a1, const CMMsl::PressureFilteredNoTemperature *a2)
{
  if ((const CMMsl::PressureFilteredNoTemperature *)a1 != a2)
  {
    CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature((CMMsl::PressureFilteredNoTemperature *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    int v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PressureFilteredNoTemperature *a2, CMMsl::PressureFilteredNoTemperature *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A86C8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A86C8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PressureFilteredNoTemperature::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v12 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[0] = off_1003A86C8;
    v10[1] = v7;
    int v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    int v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::PressureFilteredNoTemperature::formatText(CMMsl::PressureFilteredNoTemperature *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "pressure", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureFilteredNoTemperature::readFrom(CMMsl::PressureFilteredNoTemperature *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((void *)this + 1) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureFilteredNoTemperature::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::PressureFilteredNoTemperature::hash_value(CMMsl::PressureFilteredNoTemperature *this)
{
  if ((*((unsigned char *)this + 20) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v3 ^ v1;
  }
  uint64_t v1 = *((void *)this + 1);
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v1;
}

void CMMsl::PressureGps::~PressureGps(CMMsl::PressureGps *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A8700;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PressureGps::~PressureGps(this);

  operator delete();
}

void *CMMsl::PressureGps::PressureGps(void *this, const CMMsl::PressureGps *a2)
{
  *this = off_1003A8700;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::PressureGps *CMMsl::PressureGps::operator=(const CMMsl::PressureGps *a1, const CMMsl::PressureGps *a2)
{
  if (a1 != a2)
  {
    CMMsl::PressureGps::PressureGps(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::PressureGps::~PressureGps((CMMsl::PressureGps *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureGps *a2, CMMsl::PressureGps *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::PressureGps::PressureGps(void *a1, uint64_t a2)
{
  *a1 = off_1003A8700;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A8700;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PressureGps::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A8700;
    v6[1] = v4;
    CMMsl::PressureGps::~PressureGps((CMMsl::PressureGps *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureGps::formatText(CMMsl::PressureGps *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureGps::readFrom(CMMsl::PressureGps *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureGps::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::Pressure *CMMsl::PressureGps::hash_value(CMMsl::PressureGps *this)
{
  uint64_t result = (CMMsl::Pressure *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::PressureGps::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PressureOscarEmu::~PressureOscarEmu(CMMsl::PressureOscarEmu *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A8738;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PressureOscarEmu::~PressureOscarEmu(this);

  operator delete();
}

void *CMMsl::PressureOscarEmu::PressureOscarEmu(void *this, const CMMsl::PressureOscarEmu *a2)
{
  *this = off_1003A8738;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::PressureOscarEmu *CMMsl::PressureOscarEmu::operator=(const CMMsl::PressureOscarEmu *a1, const CMMsl::PressureOscarEmu *a2)
{
  if (a1 != a2)
  {
    CMMsl::PressureOscarEmu::PressureOscarEmu(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::PressureOscarEmu::~PressureOscarEmu((CMMsl::PressureOscarEmu *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureOscarEmu *a2, CMMsl::PressureOscarEmu *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::PressureOscarEmu::PressureOscarEmu(void *a1, uint64_t a2)
{
  *a1 = off_1003A8738;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A8738;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PressureOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A8738;
    v6[1] = v4;
    CMMsl::PressureOscarEmu::~PressureOscarEmu((CMMsl::PressureOscarEmu *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureOscarEmu::formatText(CMMsl::PressureOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureOscarEmu::readFrom(CMMsl::PressureOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::Pressure *CMMsl::PressureOscarEmu::hash_value(CMMsl::PressureOscarEmu *this)
{
  uint64_t result = (CMMsl::Pressure *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::PressureOscarEmu::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PropagatedAnchor::~PropagatedAnchor(CMMsl::PropagatedAnchor *this)
{
  *(void *)this = off_1003A8770;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PropagatedAnchor::~PropagatedAnchor(this);

  operator delete();
}

CMMsl::PropagatedAnchor *CMMsl::PropagatedAnchor::PropagatedAnchor(CMMsl::PropagatedAnchor *this, const CMMsl::PropagatedAnchor *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = off_1003A8770;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (this != a2) {
    sub_1000330C4((char *)this + 8, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  if (*((unsigned char *)a2 + 48))
  {
    uint64_t v4 = *((void *)a2 + 4);
    *((unsigned char *)this + 48) |= 1u;
    *((void *)this + 4) = v4;
  }
  return this;
}

uint64_t CMMsl::PropagatedAnchor::operator=(uint64_t a1, const CMMsl::PropagatedAnchor *a2)
{
  if ((const CMMsl::PropagatedAnchor *)a1 != a2)
  {
    CMMsl::PropagatedAnchor::PropagatedAnchor((CMMsl::PropagatedAnchor *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v6;
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v7;
    CMMsl::PropagatedAnchor::~PropagatedAnchor((CMMsl::PropagatedAnchor *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PropagatedAnchor *a2, CMMsl::PropagatedAnchor *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

uint64_t CMMsl::PropagatedAnchor::PropagatedAnchor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8770;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100274A30(v4, (__n128 *)(a2 + 8));
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t CMMsl::PropagatedAnchor::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PropagatedAnchor::PropagatedAnchor((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v6;
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v7;
    CMMsl::PropagatedAnchor::~PropagatedAnchor((CMMsl::PropagatedAnchor *)v9);
  }
  return a1;
}

uint64_t CMMsl::PropagatedAnchor::formatText(CMMsl::PropagatedAnchor *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 48)) {
    PB::TextFormatter::format(a2, "originalTimestamp", *((double *)this + 4));
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "pose");
  }
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "velocity", v8);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PropagatedAnchor::readFrom(CMMsl::PropagatedAnchor *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)((char *)this + 8);
    unsigned int v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        unint64_t v13 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v19 = v2 + 1;
          char v20 = *(unsigned char *)(v10 + v2);
          *((void *)a2 + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0) {
            goto LABEL_21;
          }
          v17 += 7;
          unint64_t v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            unint64_t v13 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v23 = v13 >> 3;
      if ((v13 >> 3) == 3) {
        break;
      }
      if (v23 == 2)
      {
        if (v22 != 2)
        {
          unint64_t v40 = (char *)*((void *)this + 2);
          unint64_t v39 = *((void *)this + 3);
          if ((unint64_t)v40 >= v39)
          {
            uint64_t v42 = (char *)*v8;
            uint64_t v43 = (v40 - (unsigned char *)*v8) >> 3;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61) {
LABEL_86:
            }
              sub_10000EE98();
            uint64_t v45 = v39 - (void)v42;
            if (v45 >> 2 > v44) {
              unint64_t v44 = v45 >> 2;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              char v47 = (char *)sub_10000EEB0((uint64_t)v9, v46);
              uint64_t v42 = (char *)*((void *)this + 1);
              unint64_t v40 = (char *)*((void *)this + 2);
            }
            else
            {
              char v47 = 0;
            }
            unint64_t v48 = &v47[8 * v43];
            *(void *)unint64_t v48 = 0;
            unint64_t v41 = v48 + 8;
            while (v40 != v42)
            {
              uint64_t v49 = *((void *)v40 - 1);
              v40 -= 8;
              *((void *)v48 - 1) = v49;
              v48 -= 8;
            }
            *((void *)this + 1) = v48;
            *((void *)this + 2) = v41;
            *((void *)this + 3) = &v47[8 * v46];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            *(void *)unint64_t v40 = 0;
            unint64_t v41 = v40 + 8;
          }
          *((void *)this + 2) = v41;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)a2 + 2))
          {
LABEL_75:
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_78;
          }
          *(v41 - 1) = *(void *)(*(void *)a2 + v50);
          goto LABEL_77;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v25 = *((void *)a2 + 1);
        unint64_t v26 = *((void *)a2 + 2);
        while (v25 < v26 && !*((unsigned char *)a2 + 24))
        {
          char v28 = (char *)*((void *)this + 2);
          unint64_t v27 = *((void *)this + 3);
          if ((unint64_t)v28 >= v27)
          {
            unint64_t v30 = (char *)*v8;
            uint64_t v31 = (v28 - (unsigned char *)*v8) >> 3;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61) {
              goto LABEL_86;
            }
            uint64_t v33 = v27 - (void)v30;
            if (v33 >> 2 > v32) {
              unint64_t v32 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              unint64_t v35 = (char *)sub_10000EEB0((uint64_t)v9, v34);
              unint64_t v30 = (char *)*((void *)this + 1);
              char v28 = (char *)*((void *)this + 2);
            }
            else
            {
              unint64_t v35 = 0;
            }
            uint64_t v36 = &v35[8 * v31];
            *(void *)uint64_t v36 = 0;
            unsigned int v29 = v36 + 8;
            while (v28 != v30)
            {
              uint64_t v37 = *((void *)v28 - 1);
              v28 -= 8;
              *((void *)v36 - 1) = v37;
              v36 -= 8;
            }
            *((void *)this + 1) = v36;
            *((void *)this + 2) = v29;
            *((void *)this + 3) = &v35[8 * v34];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)char v28 = 0;
            unsigned int v29 = v28 + 8;
          }
          *((void *)this + 2) = v29;
          unint64_t v38 = *((void *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)a2 + 2))
          {
            *((unsigned char *)a2 + 24) = 1;
            break;
          }
          *(v29 - 1) = *(void *)(*(void *)a2 + v38);
          unint64_t v26 = *((void *)a2 + 2);
          unint64_t v25 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v25;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if (v23 == 1) {
          operator new();
        }
        if ((PB::Reader::skip(a2, v23, v22, 0) & 1) == 0) {
          return 0;
        }
      }
LABEL_78:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 48) |= 1u;
    unint64_t v24 = *((void *)a2 + 1);
    if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
      goto LABEL_75;
    }
    *((void *)this + 4) = *(void *)(*(void *)a2 + v24);
LABEL_77:
    *((void *)a2 + 1) += 8;
    goto LABEL_78;
  }
  return v4 == 0;
}

uint64_t CMMsl::PropagatedAnchor::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 40);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 2u);
  }
  if (*(unsigned char *)(v3 + 48))
  {
    double v8 = *(double *)(v3 + 32);
    return PB::Writer::write(a2, v8, 3u);
  }
  return this;
}

uint64_t CMMsl::PropagatedAnchor::hash_value(CMMsl::PropagatedAnchor *this)
{
  unint64_t v2 = (CMMsl::Pose *)*((void *)this + 5);
  if (v2) {
    uint64_t v3 = CMMsl::Pose::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = PBHashBytes();
  if (*((unsigned char *)this + 48))
  {
    double v5 = *((double *)this + 4);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  return v4 ^ v3 ^ *(void *)&v5;
}

uint64_t CMMsl::PropagatedAnchor::makePose(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

void CMMsl::Prox::~Prox(CMMsl::Prox *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::Prox::Prox(uint64_t this, const CMMsl::Prox *a2)
{
  *(void *)this = off_1003A87A8;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::Prox *CMMsl::Prox::operator=(const CMMsl::Prox *a1, const CMMsl::Prox *a2)
{
  if (a1 != a2)
  {
    CMMsl::Prox::Prox((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Prox *a2, CMMsl::Prox *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::Prox::Prox(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A87A8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A87A8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Prox::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A87A8;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::Prox::formatText(CMMsl::Prox *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "detectionMask", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Prox::readFrom(CMMsl::Prox *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Prox::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::Prox::hash_value(CMMsl::Prox *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

void CMMsl::ProxBaselineEstimatorState::~ProxBaselineEstimatorState(CMMsl::ProxBaselineEstimatorState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState(CMMsl::ProxBaselineEstimatorState *this, const CMMsl::ProxBaselineEstimatorState *a2)
{
  *(void *)this = off_1003A87E0;
  *((_DWORD *)this + 22) = 0;
  int v2 = *((_DWORD *)a2 + 22);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 22) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 22);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 11);
    v3 |= 0x100u;
    *((_DWORD *)this + 22) = v3;
    *((float *)this + 11) = result;
    int v2 = *((_DWORD *)a2 + 22);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    float result = *((float *)a2 + 13);
    v3 |= 0x400u;
    *((_DWORD *)this + 22) = v3;
    *((float *)this + 13) = result;
    int v2 = *((_DWORD *)a2 + 22);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  float result = *((float *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  float result = *((float *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  float result = *((float *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  char v6 = *((unsigned char *)a2 + 84);
  v3 |= 0x40000u;
  *((_DWORD *)this + 22) = v3;
  *((unsigned char *)this + 84) = v6;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x4000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  float result = *((float *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 17) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  float result = *((float *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  float result = *((float *)a2 + 4);
  v3 |= 2u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_33:
  float result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_34:
  float result = *((float *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 9) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_35:
  float result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 4) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
LABEL_36:
  float result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
LABEL_37:
  float result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }
LABEL_38:
  float result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0) {
      return result;
    }
LABEL_40:
    float result = *((float *)a2 + 12);
    *((_DWORD *)this + 22) = v3 | 0x200;
    *((float *)this + 12) = result;
    return result;
  }
LABEL_39:
  float result = *((float *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 18) = result;
  if ((*((_DWORD *)a2 + 22) & 0x200) != 0) {
    goto LABEL_40;
  }
  return result;
}

CMMsl *CMMsl::ProxBaselineEstimatorState::operator=(CMMsl *a1, const CMMsl::ProxBaselineEstimatorState *a2)
{
  if (a1 != a2)
  {
    CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState((CMMsl::ProxBaselineEstimatorState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ProxBaselineEstimatorState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ProxBaselineEstimatorState *a2, CMMsl::ProxBaselineEstimatorState *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  int v6 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  int v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  int v8 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  int v9 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v9;
  int v10 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  LOBYTE(v4) = *((unsigned char *)this + 84);
  *((unsigned char *)this + 84) = *((unsigned char *)a2 + 84);
  *((unsigned char *)a2 + 84) = v4;
  int v11 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v11;
  int v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  int v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  int v14 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v14;
  int v15 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v15;
  int v16 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v16;
  int v17 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v17;
  int v18 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v18;
  int v19 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v19;
  int v20 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v20;
  float result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

float CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A87E0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  float result = *(float *)(a2 + 48);
  *(float *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::ProxBaselineEstimatorState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ProxBaselineEstimatorState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ProxBaselineEstimatorState::formatText(CMMsl::ProxBaselineEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "baselineError", *((float *)this + 4));
    int v5 = *((_DWORD *)this + 22);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "covariancePostMeasurement00", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "covariancePostMeasurement01", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "covariancePostMeasurement11", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "covariancePreMeasurement00", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "covariancePreMeasurement01", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "covariancePreMeasurement11", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "estimate", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "factoryXTalk", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "gain", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "intensity", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "measurement", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "possibleObstructed", *((unsigned char *)this + 84));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "proxBufferMax", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "proxBufferVariance", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "sensitivityCal", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "temperature", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "temperatureCalError", *((float *)this + 20));
  if (*((_DWORD *)this + 22)) {
LABEL_20:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
LABEL_21:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ProxBaselineEstimatorState::readFrom(CMMsl::ProxBaselineEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 22) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_104;
                  }
                  unint64_t v31 = v20++;
                  char v32 = *(unsigned char *)(v21 + v31);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_103:
                unint64_t v2 = v31 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_104;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_104:
              *((void *)this + 1) = v24;
              goto LABEL_95;
            case 2u:
              *((_DWORD *)this + 22) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 3u:
              *((_DWORD *)this + 22) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 4u:
              *((_DWORD *)this + 22) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 5u:
              *((_DWORD *)this + 22) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 6u:
              *((_DWORD *)this + 22) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 7u:
              *((_DWORD *)this + 22) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 8u:
              *((_DWORD *)this + 22) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 84) = v28;
              goto LABEL_95;
            case 9u:
              *((_DWORD *)this + 22) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 0xAu:
              *((_DWORD *)this + 22) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 0xBu:
              *((_DWORD *)this + 22) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 0xCu:
              *((_DWORD *)this + 22) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 0xDu:
              *((_DWORD *)this + 22) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 0xEu:
              *((_DWORD *)this + 22) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 0xFu:
              *((_DWORD *)this + 22) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 0x10u:
              *((_DWORD *)this + 22) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 0x11u:
              *((_DWORD *)this + 22) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 0x12u:
              *((_DWORD *)this + 22) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 0x13u:
              *((_DWORD *)this + 22) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_94:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_83:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_95;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
LABEL_95:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ProxBaselineEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 88);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 88);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 2u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 3u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 4u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 5u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 6u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 7u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 84), 8u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x4000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 9u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xAu);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0xBu);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xCu);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xDu);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xEu);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0xFu);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0x10u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_19;
    }
LABEL_38:
    this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x12u);
    if ((*(_DWORD *)(v3 + 88) & 0x200) == 0) {
      return this;
    }
    goto LABEL_39;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0x11u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x8000) != 0) {
    goto LABEL_38;
  }
LABEL_19:
  if ((v4 & 0x200) == 0) {
    return this;
  }
LABEL_39:
  float v5 = *(float *)(v3 + 48);

  return PB::Writer::write(a2, v5, 0x13u);
}

uint64_t CMMsl::ProxBaselineEstimatorState::hash_value(CMMsl::ProxBaselineEstimatorState *this)
{
  int v1 = *((_DWORD *)this + 22);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_3;
    }
LABEL_56:
    uint64_t v4 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_6;
    }
LABEL_57:
    uint64_t v6 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_9;
    }
LABEL_58:
    uint64_t v8 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_12;
    }
LABEL_59:
    uint64_t v10 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_15;
    }
LABEL_60:
    uint64_t v12 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_18;
    }
LABEL_61:
    uint64_t v14 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_62;
  }
  uint64_t v2 = *((void *)this + 1);
  if ((v1 & 0x100) == 0) {
    goto LABEL_56;
  }
LABEL_3:
  float v3 = *((float *)this + 11);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_57;
  }
LABEL_6:
  float v5 = *((float *)this + 13);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_58;
  }
LABEL_9:
  float v7 = *((float *)this + 15);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_59;
  }
LABEL_12:
  float v9 = *((float *)this + 14);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_60;
  }
LABEL_15:
  float v11 = *((float *)this + 19);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_61;
  }
LABEL_18:
  float v13 = *((float *)this + 20);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x40000) != 0)
  {
LABEL_21:
    uint64_t v15 = *((unsigned __int8 *)this + 84);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_22;
    }
LABEL_63:
    uint64_t v17 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_25;
    }
LABEL_64:
    uint64_t v19 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_28;
    }
LABEL_65:
    uint64_t v21 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_31;
    }
LABEL_66:
    uint64_t v23 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_34;
    }
LABEL_67:
    uint64_t v25 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_37;
    }
LABEL_68:
    uint64_t v27 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_40;
    }
LABEL_69:
    uint64_t v29 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_43;
    }
LABEL_70:
    uint64_t v31 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_46;
    }
LABEL_71:
    uint64_t v33 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_49;
    }
    goto LABEL_72;
  }
LABEL_62:
  uint64_t v15 = 0;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_63;
  }
LABEL_22:
  float v16 = *((float *)this + 17);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_64;
  }
LABEL_25:
  float v18 = *((float *)this + 16);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_65;
  }
LABEL_28:
  float v20 = *((float *)this + 4);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_66;
  }
LABEL_31:
  float v22 = *((float *)this + 8);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_67;
  }
LABEL_34:
  float v24 = *((float *)this + 9);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_68;
  }
LABEL_37:
  float v26 = *((float *)this + 10);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_69;
  }
LABEL_40:
  float v28 = *((float *)this + 5);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_70;
  }
LABEL_43:
  float v30 = *((float *)this + 6);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_71;
  }
LABEL_46:
  float v32 = *((float *)this + 7);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_49:
    float v34 = *((float *)this + 18);
    uint64_t v35 = LODWORD(v34);
    if (v34 == 0.0) {
      uint64_t v35 = 0;
    }
    if ((v1 & 0x200) != 0) {
      goto LABEL_52;
    }
LABEL_73:
    uint64_t v37 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37;
  }
LABEL_72:
  uint64_t v35 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_73;
  }
LABEL_52:
  float v36 = *((float *)this + 12);
  uint64_t v37 = LODWORD(v36);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37;
}

void CMMsl::ProxCalibration::~ProxCalibration(CMMsl::ProxCalibration *this)
{
  *(void *)this = off_1003A8818;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ProxCalibration::~ProxCalibration(this);

  operator delete();
}

CMMsl::ProxCalibration *CMMsl::ProxCalibration::ProxCalibration(CMMsl::ProxCalibration *this, const CMMsl::ProxCalibration *a2)
{
  *(void *)this = off_1003A8818;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  char v5 = *((unsigned char *)a2 + 72);
  if ((v5 & 2) != 0)
  {
    int v7 = *((_DWORD *)a2 + 15);
    char v6 = 2;
    *((unsigned char *)this + 72) = 2;
    *((_DWORD *)this + 15) = v7;
    char v5 = *((unsigned char *)a2 + 72);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if (*((unsigned char *)a2 + 72))
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 14);
    v6 |= 1u;
    *((unsigned char *)this + 72) = v6;
    *((_DWORD *)this + 14) = v8;
    char v5 = *((unsigned char *)a2 + 72);
  }
LABEL_6:
  if ((v5 & 4) == 0)
  {
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v11 = *((_DWORD *)a2 + 16);
  v6 |= 4u;
  *((unsigned char *)this + 72) = v6;
  *((_DWORD *)this + 16) = v11;
  if ((*((unsigned char *)a2 + 72) & 8) != 0)
  {
LABEL_8:
    int v9 = *((_DWORD *)a2 + 17);
    *((unsigned char *)this + 72) = v6 | 8;
    *((_DWORD *)this + 17) = v9;
  }
LABEL_9:
  if (this != a2)
  {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  return this;
}

uint64_t CMMsl::ProxCalibration::operator=(uint64_t a1, const CMMsl::ProxCalibration *a2)
{
  if ((const CMMsl::ProxCalibration *)a1 != a2)
  {
    CMMsl::ProxCalibration::ProxCalibration((CMMsl::ProxCalibration *)&v11, a2);
    uint64_t v3 = v16;
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v3;
    int v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    int v17 = v6;
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v7;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v8;
    long long v9 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    long long v14 = v9;
    CMMsl::ProxCalibration::~ProxCalibration((CMMsl::ProxCalibration *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ProxCalibration *a2, CMMsl::ProxCalibration *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  int v4 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  float result = *((float *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((float *)a2 + 14) = result;
  int v6 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  int v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
  return result;
}

uint64_t CMMsl::ProxCalibration::ProxCalibration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8818;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::ProxCalibration::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::ProxCalibration::ProxCalibration((uint64_t)&v11, a2);
    uint64_t v3 = v16;
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v3;
    int v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    int v17 = v6;
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v7;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v8;
    long long v9 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    long long v14 = v9;
    CMMsl::ProxCalibration::~ProxCalibration((CMMsl::ProxCalibration *)&v11);
  }
  return a1;
}

uint64_t CMMsl::ProxCalibration::formatText(CMMsl::ProxCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 72);
  if (v5)
  {
    PB::TextFormatter::format(a2, "bC150RXAVE", *((float *)this + 14));
    char v5 = *((unsigned char *)this + 72);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "gC0RXAVE", *((float *)this + 15));
  }
  int v6 = (float *)*((void *)this + 1);
  long long v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "ntcRamp", v8);
  }
  long long v9 = (float *)*((void *)this + 4);
  uint64_t v10 = (float *)*((void *)this + 5);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(a2, "rxXT", v11);
  }
  char v12 = *((unsigned char *)this + 72);
  if ((v12 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "versionPxCL", *((_DWORD *)this + 16));
    char v12 = *((unsigned char *)this + 72);
  }
  if ((v12 & 8) != 0) {
    PB::TextFormatter::format(a2, "versionPxTC", *((_DWORD *)this + 17));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::ProxCalibration::readFrom(CMMsl::ProxCalibration *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 32);
    long long v9 = (char *)this + 48;
    uint64_t v10 = (void **)((char *)this + 8);
    float v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 72) |= 2u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)a2 + 2)) {
            goto LABEL_153;
          }
          *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v25);
          goto LABEL_155;
        case 2u:
          *((unsigned char *)this + 72) |= 1u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)a2 + 2)) {
            goto LABEL_153;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v26);
          goto LABEL_155;
        case 3u:
          *((unsigned char *)this + 72) |= 4u;
          unint64_t v27 = *((void *)a2 + 1);
          unint64_t v28 = *((void *)a2 + 2);
          uint64_t v29 = *(void *)a2;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            char v30 = 0;
            unsigned int v31 = 0;
            uint64_t v32 = 0;
            do
            {
              unint64_t v33 = v27 + 1;
              *((void *)a2 + 1) = v27 + 1;
              char v34 = *(unsigned char *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0) {
                goto LABEL_133;
              }
              v30 += 7;
              unint64_t v27 = v33;
              BOOL v18 = v31++ > 8;
            }
            while (!v18);
LABEL_99:
            LODWORD(v32) = 0;
            goto LABEL_133;
          }
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v32 = 0;
          if (v28 <= v27) {
            unint64_t v28 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v73 = v27 + 1;
              char v74 = *(unsigned char *)(v29 + v27);
              *((void *)a2 + 1) = v73;
              v32 |= (unint64_t)(v74 & 0x7F) << v71;
              if (v74 < 0)
              {
                v71 += 7;
                unint64_t v27 = v73;
                BOOL v18 = v72++ > 8;
                if (v18) {
                  goto LABEL_99;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v32) = 0;
              }
            }
            break;
          }
LABEL_133:
          *((_DWORD *)this + 16) = v32;
          goto LABEL_156;
        case 4u:
          *((unsigned char *)this + 72) |= 8u;
          unint64_t v35 = *((void *)a2 + 1);
          unint64_t v36 = *((void *)a2 + 2);
          uint64_t v37 = *(void *)a2;
          if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
          {
            char v38 = 0;
            unsigned int v39 = 0;
            uint64_t v40 = 0;
            do
            {
              unint64_t v41 = v35 + 1;
              *((void *)a2 + 1) = v35 + 1;
              char v42 = *(unsigned char *)(v37 + v35);
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if ((v42 & 0x80) == 0) {
                goto LABEL_136;
              }
              v38 += 7;
              unint64_t v35 = v41;
              BOOL v18 = v39++ > 8;
            }
            while (!v18);
LABEL_106:
            LODWORD(v40) = 0;
            goto LABEL_136;
          }
          char v75 = 0;
          unsigned int v76 = 0;
          uint64_t v40 = 0;
          if (v36 <= v35) {
            unint64_t v36 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v36 == v35)
            {
              LODWORD(v40) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v77 = v35 + 1;
              char v78 = *(unsigned char *)(v37 + v35);
              *((void *)a2 + 1) = v77;
              v40 |= (unint64_t)(v78 & 0x7F) << v75;
              if (v78 < 0)
              {
                v75 += 7;
                unint64_t v35 = v77;
                BOOL v18 = v76++ > 8;
                if (v18) {
                  goto LABEL_106;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v40) = 0;
              }
            }
            break;
          }
LABEL_136:
          *((_DWORD *)this + 17) = v40;
          goto LABEL_156;
        case 5u:
          if (v24 != 2)
          {
            uint64_t v80 = (char *)*((void *)this + 2);
            unint64_t v79 = *((void *)this + 3);
            if ((unint64_t)v80 >= v79)
            {
              uint64_t v84 = (char *)*v10;
              uint64_t v85 = (v80 - (unsigned char *)*v10) >> 2;
              unint64_t v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62) {
LABEL_166:
              }
                sub_10000EE98();
              uint64_t v87 = v79 - (void)v84;
              if (v87 >> 1 > v86) {
                unint64_t v86 = v87 >> 1;
              }
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v86;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_100024458((uint64_t)v11, v88);
                uint64_t v84 = (char *)*((void *)this + 1);
                uint64_t v80 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v89 = 0;
              }
              unint64_t v96 = &v89[4 * v85];
              *(_DWORD *)unint64_t v96 = 0;
              unint64_t v81 = v96 + 4;
              while (v80 != v84)
              {
                int v97 = *((_DWORD *)v80 - 1);
                v80 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *((void *)this + 1) = v96;
              *((void *)this + 2) = v81;
              *((void *)this + 3) = &v89[4 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v80 = 0;
              unint64_t v81 = v80 + 4;
            }
            *((void *)this + 2) = v81;
            goto LABEL_151;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v43 = *((void *)a2 + 1);
          unint64_t v44 = *((void *)a2 + 2);
          while (v43 < v44 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v46 = (char *)*((void *)this + 2);
            unint64_t v45 = *((void *)this + 3);
            if ((unint64_t)v46 >= v45)
            {
              unint64_t v48 = (char *)*v10;
              uint64_t v49 = (v46 - (unsigned char *)*v10) >> 2;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                goto LABEL_166;
              }
              uint64_t v51 = v45 - (void)v48;
              if (v51 >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                unint64_t v53 = (char *)sub_100024458((uint64_t)v11, v52);
                unint64_t v48 = (char *)*((void *)this + 1);
                unint64_t v46 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v53 = 0;
              }
              uint64_t v54 = &v53[4 * v49];
              *(_DWORD *)uint64_t v54 = 0;
              char v47 = v54 + 4;
              while (v46 != v48)
              {
                int v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *((void *)this + 1) = v54;
              *((void *)this + 2) = v47;
              *((void *)this + 3) = &v53[4 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v46 = 0;
              char v47 = v46 + 4;
            }
            *((void *)this + 2) = v47;
            unint64_t v56 = *((void *)a2 + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)a2 + 2)) {
              goto LABEL_111;
            }
            *(v47 - 1) = *(_DWORD *)(*(void *)a2 + v56);
            unint64_t v44 = *((void *)a2 + 2);
            unint64_t v43 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v43;
          }
          goto LABEL_112;
        case 6u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v57 = *((void *)a2 + 1);
            unint64_t v58 = *((void *)a2 + 2);
            while (v57 < v58 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v60 = (char *)*((void *)this + 5);
              unint64_t v59 = *((void *)this + 6);
              if ((unint64_t)v60 >= v59)
              {
                unint64_t v62 = (char *)*v8;
                uint64_t v63 = (v60 - (unsigned char *)*v8) >> 2;
                unint64_t v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 62) {
                  goto LABEL_167;
                }
                uint64_t v65 = v59 - (void)v62;
                if (v65 >> 1 > v64) {
                  unint64_t v64 = v65 >> 1;
                }
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v66 = v64;
                }
                if (v66)
                {
                  unint64_t v67 = (char *)sub_100024458((uint64_t)v9, v66);
                  unint64_t v62 = (char *)*((void *)this + 4);
                  uint64_t v60 = (char *)*((void *)this + 5);
                }
                else
                {
                  unint64_t v67 = 0;
                }
                char v68 = &v67[4 * v63];
                *(_DWORD *)char v68 = 0;
                unint64_t v61 = v68 + 4;
                while (v60 != v62)
                {
                  int v69 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }
                *((void *)this + 4) = v68;
                *((void *)this + 5) = v61;
                *((void *)this + 6) = &v67[4 * v66];
                if (v62) {
                  operator delete(v62);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v60 = 0;
                unint64_t v61 = v60 + 4;
              }
              *((void *)this + 5) = v61;
              unint64_t v70 = *((void *)a2 + 1);
              if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)a2 + 2))
              {
LABEL_111:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v61 - 1) = *(_DWORD *)(*(void *)a2 + v70);
              unint64_t v58 = *((void *)a2 + 2);
              unint64_t v57 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v57;
            }
LABEL_112:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v83 = (char *)*((void *)this + 5);
            unint64_t v82 = *((void *)this + 6);
            if ((unint64_t)v83 >= v82)
            {
              v90 = (char *)*v8;
              uint64_t v91 = (v83 - (unsigned char *)*v8) >> 2;
              unint64_t v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62) {
LABEL_167:
              }
                sub_10000EE98();
              uint64_t v93 = v82 - (void)v90;
              if (v93 >> 1 > v92) {
                unint64_t v92 = v93 >> 1;
              }
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v92;
              }
              if (v94)
              {
                unsigned int v95 = (char *)sub_100024458((uint64_t)v9, v94);
                v90 = (char *)*((void *)this + 4);
                uint64_t v83 = (char *)*((void *)this + 5);
              }
              else
              {
                unsigned int v95 = 0;
              }
              char v98 = &v95[4 * v91];
              *(_DWORD *)char v98 = 0;
              unint64_t v81 = v98 + 4;
              while (v83 != v90)
              {
                int v99 = *((_DWORD *)v83 - 1);
                v83 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }
              *((void *)this + 4) = v98;
              *((void *)this + 5) = v81;
              *((void *)this + 6) = &v95[4 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v83 = 0;
              unint64_t v81 = v83 + 4;
            }
            *((void *)this + 5) = v81;
LABEL_151:
            unint64_t v100 = *((void *)a2 + 1);
            if (v100 <= 0xFFFFFFFFFFFFFFFBLL && v100 + 4 <= *((void *)a2 + 2))
            {
              *(v81 - 1) = *(_DWORD *)(*(void *)a2 + v100);
LABEL_155:
              *((void *)a2 + 1) += 4;
            }
            else
            {
LABEL_153:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_156:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_156;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ProxCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 72);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 60), 1u);
    char v4 = *(unsigned char *)(v3 + 72);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_15:
      this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 3u);
      if ((*(unsigned char *)(v3 + 72) & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(this + 72) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 2u);
  char v4 = *(unsigned char *)(v3 + 72);
  if ((v4 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_4:
  if ((v4 & 8) != 0) {
LABEL_5:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 4u);
LABEL_6:
  char v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 5u);
  }
  long long v9 = *(float **)(v3 + 32);
  float v8 = *(float **)(v3 + 40);
  while (v9 != v8)
  {
    float v10 = *v9++;
    this = PB::Writer::write(a2, v10, 6u);
  }
  return this;
}

uint64_t CMMsl::ProxCalibration::hash_value(CMMsl::ProxCalibration *this)
{
  if ((*((unsigned char *)this + 72) & 2) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 72)) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 72) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v4 = 0;
    if ((*((unsigned char *)this + 72) & 8) != 0) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v5 = 0;
    goto LABEL_14;
  }
  float v6 = *((float *)this + 15);
  uint64_t v1 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 72) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_3:
  float v2 = *((float *)this + 14);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 72) & 4) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v4 = *((int *)this + 16);
  if ((*((unsigned char *)this + 72) & 8) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v5 = *((int *)this + 17);
LABEL_14:
  uint64_t v7 = v3 ^ v1 ^ v4 ^ v5 ^ PBHashBytes();
  return v7 ^ PBHashBytes();
}

void CMMsl::ProxPDP::~ProxPDP(CMMsl::ProxPDP *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::ProxPDP::ProxPDP(uint64_t this, const CMMsl::ProxPDP *a2)
{
  *(void *)this = off_1003A8850;
  *(_DWORD *)(this + 48) = 0;
  __int16 v2 = *((_WORD *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 48) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 24) = v5;
    __int16 v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 32) = v6;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 28) = v7;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  int v8 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 16) = v8;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v9;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v10 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 20) = v10;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v11 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 40) = v11;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      return this;
    }
LABEL_22:
    char v13 = *((unsigned char *)a2 + 44);
    *(_WORD *)(this + 48) = v3 | 0x100;
    *(unsigned char *)(this + 44) = v13;
    return this;
  }
LABEL_21:
  char v12 = *((unsigned char *)a2 + 45);
  v3 |= 0x200u;
  *(_WORD *)(this + 48) = v3;
  *(unsigned char *)(this + 45) = v12;
  if ((*((_WORD *)a2 + 24) & 0x100) != 0) {
    goto LABEL_22;
  }
  return this;
}

uint64_t CMMsl::ProxPDP::operator=(uint64_t a1, const CMMsl::ProxPDP *a2)
{
  if ((const CMMsl::ProxPDP *)a1 != a2)
  {
    CMMsl::ProxPDP::ProxPDP((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v6;
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v7;
    LOBYTE(v4) = *(unsigned char *)(a1 + 45);
    *(unsigned char *)(a1 + 45) = v15;
    char v15 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v14;
    char v14 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ProxPDP *a2, CMMsl::ProxPDP *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  int v7 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  int v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  int v9 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v9;
  int v10 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v10;
  float result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  LOBYTE(v4) = *((unsigned char *)this + 45);
  *((unsigned char *)this + 45) = *((unsigned char *)a2 + 45);
  *((unsigned char *)a2 + 45) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v4;
  return result;
}

float CMMsl::ProxPDP::ProxPDP(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8850;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return result;
}

uint64_t CMMsl::ProxPDP::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::ProxPDP::ProxPDP((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v6;
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v7;
    LOBYTE(v4) = *(unsigned char *)(a1 + 45);
    *(unsigned char *)(a1 + 45) = v15;
    char v15 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v14;
    char v14 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::ProxPDP::formatText(CMMsl::ProxPDP *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "ambient", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "baselineConfidence", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "intensity", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "intensityBaselineDelta", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "intensityCalDelta", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "pocketFlag", *((unsigned char *)this + 44));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "pocketProbability", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "rxNtcC", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "scanFlags", *((unsigned char *)this + 45));
  if (*((_WORD *)this + 24)) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
LABEL_12:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ProxPDP::readFrom(CMMsl::ProxPDP *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 24) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_73;
                  }
                  unint64_t v33 = v20++;
                  char v34 = *(unsigned char *)(v21 + v33);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  BOOL v14 = v32++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_72;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_72:
                unint64_t v2 = v33 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_73;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_73:
              *((void *)this + 1) = v24;
              goto LABEL_74;
            case 2u:
              *((_WORD *)this + 24) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_68;
            case 3u:
              *((_WORD *)this + 24) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_68;
            case 4u:
              *((_WORD *)this + 24) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_68;
            case 5u:
              *((_WORD *)this + 24) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_68;
            case 6u:
              *((_WORD *)this + 24) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_68;
            case 7u:
              *((_WORD *)this + 24) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_68;
            case 8u:
              *((_WORD *)this + 24) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_68:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_51:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_74;
            case 9u:
              *((_WORD *)this + 24) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 45) = v28;
              goto LABEL_74;
            case 0xAu:
              *((_WORD *)this + 24) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 44) = v30;
              goto LABEL_74;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
LABEL_74:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ProxPDP::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 48);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 3u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 5u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 6u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 7u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 45), 9u);
    if ((*(_WORD *)(v3 + 48) & 0x100) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 8u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x200) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x100) == 0) {
    return this;
  }
LABEL_21:
  char v5 = *(unsigned char *)(v3 + 44);

  return PB::Writer::write(a2, v5, 0xAu);
}

uint64_t CMMsl::ProxPDP::hash_value(CMMsl::ProxPDP *this)
{
  __int16 v1 = *((_WORD *)this + 24);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_3;
    }
LABEL_27:
    uint64_t v4 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_28:
    uint64_t v6 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_9;
    }
LABEL_29:
    uint64_t v8 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_12;
    }
LABEL_30:
    uint64_t v10 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_31:
    uint64_t v12 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_18;
    }
LABEL_32:
    uint64_t v14 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_21;
    }
LABEL_33:
    uint64_t v16 = 0;
    if ((*((_WORD *)this + 24) & 0x200) != 0) {
      goto LABEL_24;
    }
LABEL_34:
    uint64_t v17 = 0;
    if ((*((_WORD *)this + 24) & 0x100) != 0) {
      goto LABEL_25;
    }
LABEL_35:
    uint64_t v18 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v17 ^ v18;
  }
  uint64_t v2 = *((void *)this + 1);
  if ((v1 & 8) == 0) {
    goto LABEL_27;
  }
LABEL_3:
  float v3 = *((float *)this + 6);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_28;
  }
LABEL_6:
  float v5 = *((float *)this + 8);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_29;
  }
LABEL_9:
  float v7 = *((float *)this + 7);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_30;
  }
LABEL_12:
  float v9 = *((float *)this + 4);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_15:
  float v11 = *((float *)this + 9);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_32;
  }
LABEL_18:
  float v13 = *((float *)this + 5);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_33;
  }
LABEL_21:
  float v15 = *((float *)this + 10);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((*((_WORD *)this + 24) & 0x200) == 0) {
    goto LABEL_34;
  }
LABEL_24:
  uint64_t v17 = *((unsigned __int8 *)this + 45);
  if ((*((_WORD *)this + 24) & 0x100) == 0) {
    goto LABEL_35;
  }
LABEL_25:
  uint64_t v18 = *((unsigned __int8 *)this + 44);
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v17 ^ v18;
}

void CMMsl::RawAudio::~RawAudio(CMMsl::RawAudio *this)
{
  *(void *)this = off_1003A8888;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::RawAudio::~RawAudio(this);

  operator delete();
}

CMMsl::RawAudio *CMMsl::RawAudio::RawAudio(CMMsl::RawAudio *this, const CMMsl::RawAudio *a2)
{
  *(void *)this = off_1003A8888;
  *((void *)this + 1) = 0;
  float v3 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != a2) {
    sub_100024308(v3, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::RawAudio::operator=(uint64_t a1, const CMMsl::RawAudio *a2)
{
  if ((const CMMsl::RawAudio *)a1 != a2)
  {
    CMMsl::RawAudio::RawAudio((CMMsl::RawAudio *)&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    CMMsl::RawAudio::~RawAudio((CMMsl::RawAudio *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::RawAudio *a2, CMMsl::RawAudio *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

void *CMMsl::RawAudio::RawAudio(void *a1, uint64_t a2)
{
  *a1 = off_1003A8888;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_100274A30((uint64_t)(a1 + 1), (__n128 *)(a2 + 8));
  return a1;
}

{
  *a1 = off_1003A8888;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_100274A30((uint64_t)(a1 + 1), (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::RawAudio::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v8 = off_1003A8888;
    uint64_t v3 = *(void *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    long long v9 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    uint64_t v10 = v6;
    CMMsl::RawAudio::~RawAudio((CMMsl::RawAudio *)&v8);
  }
  return a1;
}

uint64_t CMMsl::RawAudio::formatText(CMMsl::RawAudio *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (int *)*((void *)this + 1);
  uint64_t v6 = (int *)*((void *)this + 2);
  while (v5 != v6)
  {
    int v7 = *v5++;
    PB::TextFormatter::format(a2, "volts", v7);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::RawAudio::readFrom(CMMsl::RawAudio *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 8);
    long long v9 = (void *)((char *)this + 24);
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v35 = v12++ > 8;
        if (v35) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v21 = v13 & 7;
      if (v21 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 1)
      {
        if (v21 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
          {
            char v22 = (char *)*((void *)this + 2);
            do
            {
              if ((unint64_t)v22 >= *v9)
              {
                unsigned int v23 = (char *)*v8;
                uint64_t v24 = (v22 - (unsigned char *)*v8) >> 2;
                unint64_t v25 = v24 + 1;
                if ((unint64_t)(v24 + 1) >> 62) {
                  goto LABEL_118;
                }
                uint64_t v26 = *v9 - (void)v23;
                if (v26 >> 1 > v25) {
                  unint64_t v25 = v26 >> 1;
                }
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v27 = v25;
                }
                if (v27)
                {
                  BOOL v28 = (char *)sub_100024458((uint64_t)v9, v27);
                  unsigned int v23 = (char *)*((void *)this + 1);
                  char v22 = (char *)*((void *)this + 2);
                }
                else
                {
                  BOOL v28 = 0;
                }
                int v29 = &v28[4 * v24];
                *(_DWORD *)int v29 = 0;
                BOOL v30 = v29 + 4;
                while (v22 != v23)
                {
                  int v31 = *((_DWORD *)v22 - 1);
                  v22 -= 4;
                  *((_DWORD *)v29 - 1) = v31;
                  v29 -= 4;
                }
                *((void *)this + 1) = v29;
                *((void *)this + 2) = v30;
                *((void *)this + 3) = &v28[4 * v27];
                if (v23) {
                  operator delete(v23);
                }
                char v22 = v30;
              }
              else
              {
                *(_DWORD *)char v22 = 0;
                v22 += 4;
              }
              *((void *)this + 2) = v22;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v32 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              BOOL v35 = v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v32;
              if (!v35)
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v43 = 0;
                while (1)
                {
                  unint64_t v44 = v33 + 1;
                  *((void *)a2 + 1) = v33 + 1;
                  char v45 = *(unsigned char *)(v34 + v33);
                  v43 |= (unint64_t)(v45 & 0x7F) << v41;
                  if ((v45 & 0x80) == 0) {
                    goto LABEL_65;
                  }
                  v41 += 7;
                  unint64_t v33 = v44;
                  BOOL v35 = v42++ > 8;
                  if (v35)
                  {
                    LODWORD(v43) = 0;
                    goto LABEL_65;
                  }
                }
              }
              char v36 = 0;
              unsigned int v37 = 0;
              uint64_t v43 = 0;
              if (v32 <= v33) {
                uint64_t v38 = *((void *)a2 + 1);
              }
              else {
                uint64_t v38 = *((void *)a2 + 2);
              }
              while (1)
              {
                if (v38 == v33)
                {
                  *((unsigned char *)a2 + 24) = 1;
                  *((_DWORD *)v22 - 1) = 0;
                  goto LABEL_81;
                }
                unint64_t v39 = v33++;
                char v40 = *(unsigned char *)(v34 + v39);
                *((void *)a2 + 1) = v33;
                v43 |= (unint64_t)(v40 & 0x7F) << v36;
                if ((v40 & 0x80) == 0) {
                  break;
                }
                v36 += 7;
                BOOL v35 = v37++ > 8;
                if (v35)
                {
                  LODWORD(v43) = 0;
                  goto LABEL_64;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v43) = 0;
              }
LABEL_64:
              unint64_t v44 = v39 + 1;
LABEL_65:
              *((_DWORD *)v22 - 1) = v43;
            }
            while (v44 < v32 && !*((unsigned char *)a2 + 24));
          }
LABEL_81:
          PB::Reader::recallMark();
        }
        else
        {
          char v47 = (char *)*((void *)this + 2);
          unint64_t v46 = *((void *)this + 3);
          if ((unint64_t)v47 >= v46)
          {
            uint64_t v49 = (char *)*v8;
            uint64_t v50 = (v47 - (unsigned char *)*v8) >> 2;
            unint64_t v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62) {
LABEL_118:
            }
              sub_10000EE98();
            uint64_t v52 = v46 - (void)v49;
            if (v52 >> 1 > v51) {
              unint64_t v51 = v52 >> 1;
            }
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v51;
            }
            if (v53)
            {
              uint64_t v54 = (char *)sub_100024458((uint64_t)v9, v53);
              uint64_t v49 = (char *)*((void *)this + 1);
              char v47 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v54 = 0;
            }
            int v55 = &v54[4 * v50];
            *(_DWORD *)int v55 = 0;
            unint64_t v48 = v55 + 4;
            while (v47 != v49)
            {
              int v56 = *((_DWORD *)v47 - 1);
              v47 -= 4;
              *((_DWORD *)v55 - 1) = v56;
              v55 -= 4;
            }
            *((void *)this + 1) = v55;
            *((void *)this + 2) = v48;
            *((void *)this + 3) = &v54[4 * v53];
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            *(_DWORD *)char v47 = 0;
            unint64_t v48 = v47 + 4;
          }
          *((void *)this + 2) = v48;
          unint64_t v57 = *((void *)a2 + 1);
          unint64_t v58 = *((void *)a2 + 2);
          uint64_t v59 = *(void *)a2;
          char v60 = 0;
          unsigned int v61 = 0;
          if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v58)
          {
            uint64_t v65 = 0;
            if (v58 <= v57) {
              unint64_t v58 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v58 == v57)
              {
                LODWORD(v65) = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_107;
              }
              unint64_t v63 = v57 + 1;
              char v64 = *(unsigned char *)(v59 + v57);
              *((void *)a2 + 1) = v63;
              v65 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0) {
                break;
              }
              v60 += 7;
              unint64_t v57 = v63;
              BOOL v35 = v61++ > 8;
              if (v35)
              {
LABEL_103:
                LODWORD(v65) = 0;
                goto LABEL_107;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v65) = 0;
            }
          }
          else
          {
            uint64_t v65 = 0;
            while (1)
            {
              unint64_t v66 = v57 + 1;
              *((void *)a2 + 1) = v57 + 1;
              char v67 = *(unsigned char *)(v59 + v57);
              v65 |= (unint64_t)(v67 & 0x7F) << v60;
              if ((v67 & 0x80) == 0) {
                break;
              }
              v60 += 7;
              unint64_t v57 = v66;
              BOOL v35 = v61++ > 8;
              if (v35) {
                goto LABEL_103;
              }
            }
          }
LABEL_107:
          *(v48 - 1) = v65;
        }
      }
      else if ((PB::Reader::skip(a2, v13 >> 3, v21, 0) & 1) == 0)
      {
        return 0;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v18;
      v13 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RawAudio::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(int **)(this + 8);
  for (int i = *(int **)(this + 16); v2 != i; this = PB::Writer::writeVarInt(a2, v5, 1u))
    int v5 = *v2++;
  return this;
}

uint64_t CMMsl::RawAudio::hash_value(CMMsl::RawAudio *this)
{
  return PBHashBytes();
}

void CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig(CMMsl::RelDMInSystemConfig *this)
{
  *(void *)this = off_1003A88C0;
  uint64_t v4 = *((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *unint64_t v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig(this);

  operator delete();
}

uint64_t CMMsl::RelDMInSystemConfig::RelDMInSystemConfig(uint64_t this, const CMMsl::RelDMInSystemConfig *a2)
{
  *(void *)this = off_1003A88C0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) |= 1u;
    *(void *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::RelDMInSystemConfig::operator=(uint64_t a1, const CMMsl::RelDMInSystemConfig *a2)
{
  if ((const CMMsl::RelDMInSystemConfig *)a1 != a2)
  {
    CMMsl::RelDMInSystemConfig::RelDMInSystemConfig((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig((CMMsl::RelDMInSystemConfig *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RelDMInSystemConfig *a2, CMMsl::RelDMInSystemConfig *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::RelDMInSystemConfig::RelDMInSystemConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A88C0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v6 = *v4;
  *uint64_t v4 = v5;
  if (v6) {
    sub_100012E84((uint64_t)v4, v6);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::RelDMInSystemConfig::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::RelDMInSystemConfig::RelDMInSystemConfig((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig((CMMsl::RelDMInSystemConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::RelDMInSystemConfig::formatText(CMMsl::RelDMInSystemConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "value", *((double *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelDMInSystemConfig::readFrom(CMMsl::RelDMInSystemConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v21);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelDMInSystemConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 8)) {
    this = PB::Writer::write();
  }
  if (*(unsigned char *)(v3 + 24))
  {
    double v4 = *(double *)(v3 + 16);
    return PB::Writer::write(a2, v4, 2u);
  }
  return this;
}

unint64_t CMMsl::RelDMInSystemConfig::hash_value(CMMsl::RelDMInSystemConfig *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v3 = sub_100012EE0((uint64_t)&v6, v2);
  }
  else {
    unint64_t v3 = 0;
  }
  if (*((unsigned char *)this + 24))
  {
    double v4 = *((double *)this + 2);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
  }
  else
  {
    double v4 = 0.0;
  }
  return *(void *)&v4 ^ v3;
}

void CMMsl::RelativeDeviceMotionComplexTransition::~RelativeDeviceMotionComplexTransition(CMMsl::RelativeDeviceMotionComplexTransition *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition(uint64_t this, const CMMsl::RelativeDeviceMotionComplexTransition *a2)
{
  *(void *)this = off_1003A88F8;
  *(void *)(this + 188) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    uint64_t v3 = 1;
    *(void *)(this + 188) = 1;
    *(void *)(this + 8) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 188);
    if ((v2 & 0x800000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x800000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 26);
    v3 |= 0x800000uLL;
    *(void *)(this + 188) = v3;
    *(_DWORD *)(this + 104) = v5;
    uint64_t v2 = *(void *)((char *)a2 + 188);
  }
LABEL_6:
  if ((v2 & 0x1000000) != 0)
  {
    int v6 = *((_DWORD *)a2 + 27);
    v3 |= 0x1000000uLL;
    *(void *)(this + 188) = v3;
    *(_DWORD *)(this + 108) = v6;
    uint64_t v2 = *(void *)((char *)a2 + 188);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 28);
  v3 |= 0x2000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 112) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v8 = *((_DWORD *)a2 + 6);
  v3 |= 8uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 24) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v9 = *((_DWORD *)a2 + 7);
  v3 |= 0x10uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 28) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v10 = *((_DWORD *)a2 + 8);
  v3 |= 0x20uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 32) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v11 = *((_DWORD *)a2 + 33);
  v3 |= 0x40000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 132) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v12 = *((_DWORD *)a2 + 12);
  v3 |= 0x200uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 48) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v13 = *((_DWORD *)a2 + 24);
  v3 |= 0x200000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 96) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v14 = *((_DWORD *)a2 + 4);
  v3 |= 2uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 16) = v14;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v15 = *((_DWORD *)a2 + 29);
  v3 |= 0x4000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 116) = v15;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_66;
  }
LABEL_65:
  int v16 = *((_DWORD *)a2 + 30);
  v3 |= 0x8000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 120) = v16;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_67;
  }
LABEL_66:
  int v17 = *((_DWORD *)a2 + 31);
  v3 |= 0x10000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 124) = v17;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v18 = *((_DWORD *)a2 + 9);
  v3 |= 0x40uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 36) = v18;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_69;
  }
LABEL_68:
  int v19 = *((_DWORD *)a2 + 10);
  v3 |= 0x80uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 40) = v19;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_70;
  }
LABEL_69:
  int v20 = *((_DWORD *)a2 + 11);
  v3 |= 0x100uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 44) = v20;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_71;
  }
LABEL_70:
  int v21 = *((_DWORD *)a2 + 34);
  v3 |= 0x80000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 136) = v21;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_72;
  }
LABEL_71:
  int v22 = *((_DWORD *)a2 + 13);
  v3 |= 0x400uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 52) = v22;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_73;
  }
LABEL_72:
  int v23 = *((_DWORD *)a2 + 25);
  v3 |= 0x400000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 100) = v23;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_74;
  }
LABEL_73:
  int v24 = *((_DWORD *)a2 + 5);
  v3 |= 4uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 20) = v24;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_75;
  }
LABEL_74:
  int v25 = *((_DWORD *)a2 + 37);
  v3 |= 0x400000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 148) = v25;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_76;
  }
LABEL_75:
  int v26 = *((_DWORD *)a2 + 17);
  v3 |= 0x4000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 68) = v26;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_77;
  }
LABEL_76:
  int v27 = *((_DWORD *)a2 + 40);
  v3 |= 0x2000000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 160) = v27;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_78;
  }
LABEL_77:
  int v28 = *((_DWORD *)a2 + 20);
  v3 |= 0x20000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 80) = v28;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_79;
  }
LABEL_78:
  int v29 = *((_DWORD *)a2 + 38);
  v3 |= 0x800000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 152) = v29;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x4000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_80;
  }
LABEL_79:
  int v30 = *((_DWORD *)a2 + 18);
  v3 |= 0x8000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 72) = v30;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_81;
  }
LABEL_80:
  int v31 = *((_DWORD *)a2 + 41);
  v3 |= 0x4000000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 164) = v31;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x40000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_82;
  }
LABEL_81:
  int v32 = *((_DWORD *)a2 + 21);
  v3 |= 0x40000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 84) = v32;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_83;
  }
LABEL_82:
  int v33 = *((_DWORD *)a2 + 39);
  v3 |= 0x1000000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 156) = v33;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_84;
  }
LABEL_83:
  int v34 = *((_DWORD *)a2 + 19);
  v3 |= 0x10000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 76) = v34;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_85;
  }
LABEL_84:
  int v35 = *((_DWORD *)a2 + 42);
  v3 |= 0x8000000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 168) = v35;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x80000) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_86;
  }
LABEL_85:
  int v36 = *((_DWORD *)a2 + 22);
  v3 |= 0x80000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 88) = v36;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x800) == 0) {
      goto LABEL_39;
    }
    goto LABEL_87;
  }
LABEL_86:
  char v37 = *((unsigned char *)a2 + 183);
  v3 |= 0x200000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 183) = v37;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_88;
  }
LABEL_87:
  int v38 = *((_DWORD *)a2 + 14);
  v3 |= 0x800uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 56) = v38;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_40:
    if ((v2 & 0x100000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_89;
  }
LABEL_88:
  int v39 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 60) = v39;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_90;
  }
LABEL_89:
  char v40 = *((unsigned char *)a2 + 182);
  v3 |= 0x100000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 182) = v40;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_91;
  }
LABEL_90:
  char v41 = *((unsigned char *)a2 + 184);
  v3 |= 0x400000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 184) = v41;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x2000) == 0)
  {
LABEL_43:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_92;
  }
LABEL_91:
  int v42 = *((_DWORD *)a2 + 16);
  v3 |= 0x2000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 64) = v42;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_93;
  }
LABEL_92:
  int v43 = *((_DWORD *)a2 + 35);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 140) = v43;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_94;
  }
LABEL_93:
  int v44 = *((_DWORD *)a2 + 36);
  v3 |= 0x200000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 144) = v44;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x80000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_95;
  }
LABEL_94:
  char v45 = *((unsigned char *)a2 + 186);
  v3 |= 0x1000000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 186) = v45;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x40000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_96;
  }
LABEL_95:
  char v46 = *((unsigned char *)a2 + 181);
  v3 |= 0x80000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 181) = v46;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_97;
  }
LABEL_96:
  char v47 = *((unsigned char *)a2 + 180);
  v3 |= 0x40000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 180) = v47;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x20000000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_98;
  }
LABEL_97:
  int v48 = *((_DWORD *)a2 + 32);
  v3 |= 0x20000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 128) = v48;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v2 & 0x10000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_99;
  }
LABEL_98:
  int v49 = *((_DWORD *)a2 + 44);
  v3 |= 0x20000000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 176) = v49;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_100;
  }
LABEL_99:
  int v50 = *((_DWORD *)a2 + 43);
  v3 |= 0x10000000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 172) = v50;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_52:
    if ((v2 & 0x800000000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_101;
  }
LABEL_100:
  int v51 = *((_DWORD *)a2 + 23);
  v3 |= 0x100000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 92) = v51;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_53:
    if ((v2 & 0x2000000000000) == 0) {
      return this;
    }
LABEL_102:
    char v53 = *((unsigned char *)a2 + 187);
    *(void *)(this + 188) = v3 | 0x2000000000000;
    *(unsigned char *)(this + 187) = v53;
    return this;
  }
LABEL_101:
  char v52 = *((unsigned char *)a2 + 185);
  v3 |= 0x800000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 185) = v52;
  if ((*(void *)((unsigned char *)a2 + 188) & 0x2000000000000) != 0) {
    goto LABEL_102;
  }
  return this;
}

CMMsl *CMMsl::RelativeDeviceMotionComplexTransition::operator=(CMMsl *a1, const CMMsl::RelativeDeviceMotionComplexTransition *a2)
{
  if (a1 != a2)
  {
    CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionComplexTransition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RelativeDeviceMotionComplexTransition *a2, CMMsl::RelativeDeviceMotionComplexTransition *a3)
{
  uint64_t v3 = *(void *)((char *)this + 188);
  *(void *)((char *)this + 188) = *(void *)((char *)a2 + 188);
  *(void *)((char *)a2 + 188) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 183);
  *((unsigned char *)this + 183) = *((unsigned char *)a2 + 183);
  *((unsigned char *)a2 + 183) = v3;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 182);
  *((unsigned char *)this + 182) = *((unsigned char *)a2 + 182);
  *((unsigned char *)a2 + 182) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 184);
  *((unsigned char *)this + 184) = *((unsigned char *)a2 + 184);
  *((unsigned char *)a2 + 184) = v3;
  LODWORD(v3) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 186);
  *((unsigned char *)this + 186) = *((unsigned char *)a2 + 186);
  *((unsigned char *)a2 + 186) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 181);
  *((unsigned char *)this + 181) = *((unsigned char *)a2 + 181);
  *((unsigned char *)a2 + 181) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 180);
  *((unsigned char *)this + 180) = *((unsigned char *)a2 + 180);
  *((unsigned char *)a2 + 180) = v3;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v4;
  float result = *((float *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((float *)a2 + 43) = result;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 185);
  *((unsigned char *)this + 185) = *((unsigned char *)a2 + 185);
  *((unsigned char *)a2 + 185) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 187);
  *((unsigned char *)this + 187) = *((unsigned char *)a2 + 187);
  *((unsigned char *)a2 + 187) = v3;
  return result;
}

float CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A88F8;
  *(void *)(a1 + 188) = *(void *)(a2 + 188);
  *(void *)(a2 + 188) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 183) = *(unsigned char *)(a2 + 183);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 182) = *(unsigned char *)(a2 + 182);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 186) = *(unsigned char *)(a2 + 186);
  *(unsigned char *)(a1 + 181) = *(unsigned char *)(a2 + 181);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  float result = *(float *)(a2 + 172);
  *(float *)(a1 + 172) = result;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 185) = *(unsigned char *)(a2 + 185);
  *(unsigned char *)(a1 + 187) = *(unsigned char *)(a2 + 187);
  return result;
}

CMMsl *CMMsl::RelativeDeviceMotionComplexTransition::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionComplexTransition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::formatText(CMMsl::RelativeDeviceMotionComplexTransition *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "auxHorizontalRotation", *((float *)this + 4));
    uint64_t v5 = *(void *)((char *)this + 188);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_57;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "auxHorizontalTranslation", *((float *)this + 5));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "auxOmegaInertial_X", *((float *)this + 6));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "auxOmegaInertial_Y", *((float *)this + 7));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "auxOmegaInertial_Z", *((float *)this + 8));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "auxUserAccelInertial_X", *((float *)this + 9));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "auxUserAccelInertial_Y", *((float *)this + 10));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "auxUserAccelInertial_Z", *((float *)this + 11));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "auxVerticalRotation", *((float *)this + 12));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "auxVerticalTranslation", *((float *)this + 13));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "blockHeadTurnFalsePositive", *((unsigned char *)this + 180));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "bodyTurnDetectionVerticalRotationSrc", *((float *)this + 14));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "bodyTurnMaximaBaseline", *((float *)this + 15));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "counterBodyTurnAboveBaseline", *((_DWORD *)this + 16));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "hasRecentHeadTurn", *((unsigned char *)this + 181));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "horizontalRotationSimilarity", *((float *)this + 17));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "horizontalRotationSimilarityBaseline", *((float *)this + 18));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "horizontalRotationSimilarityThreshold", *((float *)this + 19));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "horizontalTranslationSimilarity", *((float *)this + 20));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "horizontalTranslationSimilarityBaseline", *((float *)this + 21));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "horizontalTranslationSimilarityThreshold", *((float *)this + 22));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "inBodyTurn", *((unsigned char *)this + 182));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "inComplexTransitionState", *((unsigned char *)this + 183));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "inStrongBodyTurn", *((unsigned char *)this + 184));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "longBodyTurnCounter", *((_DWORD *)this + 23));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "longBodyTurnState", *((unsigned char *)this + 185));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "overrideHeadTurn", *((unsigned char *)this + 186));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "srcHorizontalRotation", *((float *)this + 24));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "srcHorizontalTranslation", *((float *)this + 25));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "srcOmegaInertial_X", *((float *)this + 26));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "srcOmegaInertial_Y", *((float *)this + 27));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "srcOmegaInertial_Z", *((float *)this + 28));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "srcUserAccelInertial_X", *((float *)this + 29));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "srcUserAccelInertial_Y", *((float *)this + 30));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "srcUserAccelInertial_Z", *((float *)this + 31));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "srcVertToHrzRotRatio", *((float *)this + 32));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "srcVerticalRotation", *((float *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "srcVerticalTranslation", *((float *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "srcYawRotationExtremaBuffer", *((float *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v5 & 1) == 0) {
      goto LABEL_42;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "srcYawRotationMaximaBaseline", *((float *)this + 36));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 1) == 0)
  {
LABEL_42:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "verticalRotationSimilarity", *((float *)this + 37));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "verticalRotationSimilarityBaseline", *((float *)this + 38));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "verticalRotationSimilarityThreshold", *((float *)this + 39));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "verticalTranslationSimilarity", *((float *)this + 40));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "verticalTranslationSimilarityBaseline", *((float *)this + 41));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "verticalTranslationSimilarityThreshold", *((float *)this + 42));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "yawRateSimilarity1000ms", *((float *)this + 43));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v5 & 0x2000000000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "yawRateSimilarity200ms", *((float *)this + 44));
  if ((*(void *)((unsigned char *)this + 188) & 0x2000000000000) != 0) {
LABEL_51:
  }
    PB::TextFormatter::format(a2, "yawRateSimilarityState", *((unsigned char *)this + 187));
LABEL_52:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::readFrom(CMMsl::RelativeDeviceMotionComplexTransition *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)((char *)this + 188) |= 1uLL;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v20);
          uint64_t v21 = *((void *)a2 + 1) + 8;
          goto LABEL_206;
        case 2u:
          *(void *)((char *)this + 188) |= 0x800000uLL;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v23);
          goto LABEL_205;
        case 3u:
          *(void *)((char *)this + 188) |= 0x1000000uLL;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v24);
          goto LABEL_205;
        case 4u:
          *(void *)((char *)this + 188) |= 0x2000000uLL;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v25);
          goto LABEL_205;
        case 5u:
          *(void *)((char *)this + 188) |= 8uLL;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v26);
          goto LABEL_205;
        case 6u:
          *(void *)((char *)this + 188) |= 0x10uLL;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v27);
          goto LABEL_205;
        case 7u:
          *(void *)((char *)this + 188) |= 0x20uLL;
          unint64_t v28 = *((void *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v28);
          goto LABEL_205;
        case 8u:
          *(void *)((char *)this + 188) |= 0x40000000uLL;
          unint64_t v29 = *((void *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v29);
          goto LABEL_205;
        case 9u:
          *(void *)((char *)this + 188) |= 0x200uLL;
          unint64_t v30 = *((void *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v30);
          goto LABEL_205;
        case 0xAu:
          *(void *)((char *)this + 188) |= 0x200000uLL;
          unint64_t v31 = *((void *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v31);
          goto LABEL_205;
        case 0xBu:
          *(void *)((char *)this + 188) |= 2uLL;
          unint64_t v32 = *((void *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v32);
          goto LABEL_205;
        case 0xCu:
          *(void *)((char *)this + 188) |= 0x4000000uLL;
          unint64_t v33 = *((void *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v33);
          goto LABEL_205;
        case 0xDu:
          *(void *)((char *)this + 188) |= 0x8000000uLL;
          unint64_t v34 = *((void *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v34);
          goto LABEL_205;
        case 0xEu:
          *(void *)((char *)this + 188) |= 0x10000000uLL;
          unint64_t v35 = *((void *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v35);
          goto LABEL_205;
        case 0xFu:
          *(void *)((char *)this + 188) |= 0x40uLL;
          unint64_t v36 = *((void *)a2 + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v36);
          goto LABEL_205;
        case 0x10u:
          *(void *)((char *)this + 188) |= 0x80uLL;
          unint64_t v37 = *((void *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v37);
          goto LABEL_205;
        case 0x11u:
          *(void *)((char *)this + 188) |= 0x100uLL;
          unint64_t v38 = *((void *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v38);
          goto LABEL_205;
        case 0x12u:
          *(void *)((char *)this + 188) |= 0x80000000uLL;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v39);
          goto LABEL_205;
        case 0x13u:
          *(void *)((char *)this + 188) |= 0x400uLL;
          unint64_t v40 = *((void *)a2 + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v40);
          goto LABEL_205;
        case 0x14u:
          *(void *)((char *)this + 188) |= 0x400000uLL;
          unint64_t v41 = *((void *)a2 + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v41);
          goto LABEL_205;
        case 0x15u:
          *(void *)((char *)this + 188) |= 4uLL;
          unint64_t v42 = *((void *)a2 + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v42);
          goto LABEL_205;
        case 0x16u:
          *(void *)((char *)this + 188) |= 0x400000000uLL;
          unint64_t v43 = *((void *)a2 + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v43);
          goto LABEL_205;
        case 0x17u:
          *(void *)((char *)this + 188) |= 0x4000uLL;
          unint64_t v44 = *((void *)a2 + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v44);
          goto LABEL_205;
        case 0x18u:
          *(void *)((char *)this + 188) |= 0x2000000000uLL;
          unint64_t v45 = *((void *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 40) = *(_DWORD *)(*(void *)a2 + v45);
          goto LABEL_205;
        case 0x19u:
          *(void *)((char *)this + 188) |= 0x20000uLL;
          unint64_t v46 = *((void *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v46);
          goto LABEL_205;
        case 0x1Au:
          *(void *)((char *)this + 188) |= 0x800000000uLL;
          unint64_t v47 = *((void *)a2 + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v47);
          goto LABEL_205;
        case 0x1Bu:
          *(void *)((char *)this + 188) |= 0x8000uLL;
          unint64_t v48 = *((void *)a2 + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v48);
          goto LABEL_205;
        case 0x1Cu:
          *(void *)((char *)this + 188) |= 0x4000000000uLL;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 41) = *(_DWORD *)(*(void *)a2 + v49);
          goto LABEL_205;
        case 0x1Du:
          *(void *)((char *)this + 188) |= 0x40000uLL;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v50);
          goto LABEL_205;
        case 0x1Eu:
          *(void *)((char *)this + 188) |= 0x1000000000uLL;
          unint64_t v51 = *((void *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v51);
          goto LABEL_205;
        case 0x1Fu:
          *(void *)((char *)this + 188) |= 0x10000uLL;
          unint64_t v52 = *((void *)a2 + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v52);
          goto LABEL_205;
        case 0x20u:
          *(void *)((char *)this + 188) |= 0x8000000000uLL;
          unint64_t v53 = *((void *)a2 + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v53);
          goto LABEL_205;
        case 0x21u:
          *(void *)((char *)this + 188) |= 0x80000uLL;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v54);
          goto LABEL_205;
        case 0x22u:
          *(void *)((char *)this + 188) |= 0x200000000000uLL;
          unint64_t v55 = *((void *)a2 + 1);
          if (v55 >= *((void *)a2 + 2))
          {
            BOOL v58 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v56 = v55 + 1;
            int v57 = *(unsigned __int8 *)(*(void *)a2 + v55);
            *((void *)a2 + 1) = v56;
            BOOL v58 = v57 != 0;
          }
          *((unsigned char *)this + 183) = v58;
          goto LABEL_207;
        case 0x23u:
          *(void *)((char *)this + 188) |= 0x800uLL;
          unint64_t v59 = *((void *)a2 + 1);
          if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v59);
          goto LABEL_205;
        case 0x24u:
          *(void *)((char *)this + 188) |= 0x1000uLL;
          unint64_t v60 = *((void *)a2 + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v60);
          goto LABEL_205;
        case 0x25u:
          *(void *)((char *)this + 188) |= 0x100000000000uLL;
          unint64_t v61 = *((void *)a2 + 1);
          if (v61 >= *((void *)a2 + 2))
          {
            BOOL v64 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v62 = v61 + 1;
            int v63 = *(unsigned __int8 *)(*(void *)a2 + v61);
            *((void *)a2 + 1) = v62;
            BOOL v64 = v63 != 0;
          }
          *((unsigned char *)this + 182) = v64;
          goto LABEL_207;
        case 0x26u:
          *(void *)((char *)this + 188) |= 0x400000000000uLL;
          unint64_t v65 = *((void *)a2 + 1);
          if (v65 >= *((void *)a2 + 2))
          {
            BOOL v68 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v66 = v65 + 1;
            int v67 = *(unsigned __int8 *)(*(void *)a2 + v65);
            *((void *)a2 + 1) = v66;
            BOOL v68 = v67 != 0;
          }
          *((unsigned char *)this + 184) = v68;
          goto LABEL_207;
        case 0x27u:
          *(void *)((char *)this + 188) |= 0x2000uLL;
          unint64_t v69 = *((void *)a2 + 1);
          unint64_t v70 = *((void *)a2 + 2);
          uint64_t v71 = *(void *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)a2 + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_219;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_186:
            LODWORD(v74) = 0;
            goto LABEL_219;
          }
          char v110 = 0;
          unsigned int v111 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v112 = v69 + 1;
              char v113 = *(unsigned char *)(v71 + v69);
              *((void *)a2 + 1) = v112;
              v74 |= (unint64_t)(v113 & 0x7F) << v110;
              if (v113 < 0)
              {
                v110 += 7;
                unint64_t v69 = v112;
                BOOL v14 = v111++ > 8;
                if (v14) {
                  goto LABEL_186;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_219:
          *((_DWORD *)this + 16) = v74;
          goto LABEL_207;
        case 0x28u:
          *(void *)((char *)this + 188) |= (unint64_t)&_mh_execute_header;
          unint64_t v77 = *((void *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v77);
          goto LABEL_205;
        case 0x29u:
          *(void *)((char *)this + 188) |= 0x200000000uLL;
          unint64_t v78 = *((void *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v78);
          goto LABEL_205;
        case 0x2Au:
          *(void *)((char *)this + 188) |= 0x1000000000000uLL;
          unint64_t v79 = *((void *)a2 + 1);
          if (v79 >= *((void *)a2 + 2))
          {
            BOOL v82 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v80 = v79 + 1;
            int v81 = *(unsigned __int8 *)(*(void *)a2 + v79);
            *((void *)a2 + 1) = v80;
            BOOL v82 = v81 != 0;
          }
          *((unsigned char *)this + 186) = v82;
          goto LABEL_207;
        case 0x2Bu:
          *(void *)((char *)this + 188) |= 0x80000000000uLL;
          unint64_t v83 = *((void *)a2 + 1);
          if (v83 >= *((void *)a2 + 2))
          {
            BOOL v86 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v84 = v83 + 1;
            int v85 = *(unsigned __int8 *)(*(void *)a2 + v83);
            *((void *)a2 + 1) = v84;
            BOOL v86 = v85 != 0;
          }
          *((unsigned char *)this + 181) = v86;
          goto LABEL_207;
        case 0x2Cu:
          *(void *)((char *)this + 188) |= 0x40000000000uLL;
          unint64_t v87 = *((void *)a2 + 1);
          if (v87 >= *((void *)a2 + 2))
          {
            BOOL v90 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v88 = v87 + 1;
            int v89 = *(unsigned __int8 *)(*(void *)a2 + v87);
            *((void *)a2 + 1) = v88;
            BOOL v90 = v89 != 0;
          }
          *((unsigned char *)this + 180) = v90;
          goto LABEL_207;
        case 0x2Du:
          *(void *)((char *)this + 188) |= 0x20000000uLL;
          unint64_t v91 = *((void *)a2 + 1);
          if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v91);
          goto LABEL_205;
        case 0x2Eu:
          *(void *)((char *)this + 188) |= 0x20000000000uLL;
          unint64_t v92 = *((void *)a2 + 1);
          if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((void *)a2 + 2)) {
            goto LABEL_162;
          }
          *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v92);
          goto LABEL_205;
        case 0x2Fu:
          *(void *)((char *)this + 188) |= 0x10000000000uLL;
          unint64_t v93 = *((void *)a2 + 1);
          if (v93 <= 0xFFFFFFFFFFFFFFFBLL && v93 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v93);
LABEL_205:
            uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_206:
            *((void *)a2 + 1) = v21;
          }
          else
          {
LABEL_162:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_207;
        case 0x30u:
          *(void *)((char *)this + 188) |= 0x100000uLL;
          unint64_t v94 = *((void *)a2 + 1);
          unint64_t v95 = *((void *)a2 + 2);
          uint64_t v96 = *(void *)a2;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            char v97 = 0;
            unsigned int v98 = 0;
            uint64_t v99 = 0;
            do
            {
              unint64_t v100 = v94 + 1;
              *((void *)a2 + 1) = v94 + 1;
              char v101 = *(unsigned char *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0) {
                goto LABEL_216;
              }
              v97 += 7;
              unint64_t v94 = v100;
              BOOL v14 = v98++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v99) = 0;
            goto LABEL_216;
          }
          char v114 = 0;
          unsigned int v115 = 0;
          uint64_t v99 = 0;
          if (v95 <= v94) {
            unint64_t v95 = *((void *)a2 + 1);
          }
          break;
        case 0x31u:
          *(void *)((char *)this + 188) |= 0x800000000000uLL;
          unint64_t v102 = *((void *)a2 + 1);
          if (v102 >= *((void *)a2 + 2))
          {
            BOOL v105 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v103 = v102 + 1;
            int v104 = *(unsigned __int8 *)(*(void *)a2 + v102);
            *((void *)a2 + 1) = v103;
            BOOL v105 = v104 != 0;
          }
          *((unsigned char *)this + 185) = v105;
          goto LABEL_207;
        case 0x32u:
          *(void *)((char *)this + 188) |= 0x2000000000000uLL;
          unint64_t v106 = *((void *)a2 + 1);
          if (v106 >= *((void *)a2 + 2))
          {
            BOOL v109 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v107 = v106 + 1;
            int v108 = *(unsigned __int8 *)(*(void *)a2 + v106);
            *((void *)a2 + 1) = v107;
            BOOL v109 = v108 != 0;
          }
          *((unsigned char *)this + 187) = v109;
          goto LABEL_207;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_207;
      }
      while (1)
      {
        if (v95 == v94)
        {
          LODWORD(v99) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_216;
        }
        unint64_t v116 = v94 + 1;
        char v117 = *(unsigned char *)(v96 + v94);
        *((void *)a2 + 1) = v116;
        v99 |= (unint64_t)(v117 & 0x7F) << v114;
        if ((v117 & 0x80) == 0) {
          break;
        }
        v114 += 7;
        unint64_t v94 = v116;
        BOOL v14 = v115++ > 8;
        if (v14) {
          goto LABEL_199;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v99) = 0;
      }
LABEL_216:
      *((_DWORD *)this + 23) = v99;
LABEL_207:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 188);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    uint64_t v4 = *(void *)(v3 + 188);
    if ((v4 & 0x800000) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_54;
    }
  }
  else if ((v4 & 0x800000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 2u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 3u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 4u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 6u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 7u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 8u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 9u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0xAu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0xBu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0xCu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0xDu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0xEu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xFu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x10u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x11u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x12u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x13u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x14u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0x15u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x16u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x17u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x18u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x19u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0x20u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x21u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800) == 0) {
      goto LABEL_36;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 183), 0x22u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x23u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x24u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 182), 0x25u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 184), 0x26u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 0x27u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x28u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x29u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 186), 0x2Au);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 181), 0x2Bu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 180), 0x2Cu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x2Du);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0x2Eu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x2Fu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_49:
    if ((v4 & 0x800000000000) == 0) {
      goto LABEL_50;
    }
LABEL_100:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 185), 0x31u);
    if ((*(void *)(v3 + 188) & 0x2000000000000) == 0) {
      return this;
    }
    goto LABEL_101;
  }
LABEL_99:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0x30u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800000000000) != 0) {
    goto LABEL_100;
  }
LABEL_50:
  if ((v4 & 0x2000000000000) == 0) {
    return this;
  }
LABEL_101:
  char v5 = *(unsigned char *)(v3 + 187);

  return PB::Writer::write(a2, v5, 0x32u);
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::hash_value(CMMsl::RelativeDeviceMotionComplexTransition *this)
{
  uint64_t v1 = *(void *)((char *)this + 188);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_3;
    }
LABEL_137:
    uint64_t v114 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_6;
    }
LABEL_138:
    uint64_t v113 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_9;
    }
LABEL_139:
    uint64_t v112 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_12;
    }
LABEL_140:
    uint64_t v111 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_15;
    }
LABEL_141:
    uint64_t v110 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_18;
    }
LABEL_142:
    uint64_t v109 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_21;
    }
LABEL_143:
    uint64_t v108 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_24;
    }
LABEL_144:
    uint64_t v107 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_27;
    }
LABEL_145:
    uint64_t v106 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_30;
    }
LABEL_146:
    uint64_t v105 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_33;
    }
LABEL_147:
    uint64_t v104 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_36;
    }
LABEL_148:
    uint64_t v103 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_39;
    }
LABEL_149:
    uint64_t v102 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_42;
    }
LABEL_150:
    uint64_t v101 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_45;
    }
LABEL_151:
    uint64_t v100 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_48;
    }
LABEL_152:
    uint64_t v99 = 0;
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_51;
    }
LABEL_153:
    uint64_t v98 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_54;
    }
LABEL_154:
    uint64_t v97 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_57;
    }
LABEL_155:
    uint64_t v96 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_60;
    }
LABEL_156:
    uint64_t v95 = 0;
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_63;
    }
LABEL_157:
    uint64_t v94 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_66;
    }
LABEL_158:
    uint64_t v93 = 0;
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_69;
    }
LABEL_159:
    uint64_t v92 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_72;
    }
LABEL_160:
    uint64_t v50 = 0;
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_76;
    }
LABEL_161:
    uint64_t v52 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_80;
    }
LABEL_162:
    uint64_t v54 = 0;
    if ((v1 & 0x4000000000) != 0) {
      goto LABEL_84;
    }
LABEL_163:
    uint64_t v56 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_87;
    }
LABEL_164:
    uint64_t v58 = 0;
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_90;
    }
LABEL_165:
    uint64_t v60 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_93;
    }
LABEL_166:
    uint64_t v62 = 0;
    if ((v1 & 0x8000000000) != 0) {
      goto LABEL_96;
    }
LABEL_167:
    uint64_t v64 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_99;
    }
LABEL_168:
    uint64_t v66 = 0;
    if ((v1 & 0x200000000000) != 0) {
      goto LABEL_102;
    }
    goto LABEL_169;
  }
  if (*((double *)this + 1) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 1);
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_137;
  }
LABEL_3:
  float v3 = *((float *)this + 26);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v114 = v4;
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_138;
  }
LABEL_6:
  float v5 = *((float *)this + 27);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v113 = v6;
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_139;
  }
LABEL_9:
  float v7 = *((float *)this + 28);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v112 = v8;
  if ((v1 & 8) == 0) {
    goto LABEL_140;
  }
LABEL_12:
  float v9 = *((float *)this + 6);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v111 = v10;
  if ((v1 & 0x10) == 0) {
    goto LABEL_141;
  }
LABEL_15:
  float v11 = *((float *)this + 7);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v110 = v12;
  if ((v1 & 0x20) == 0) {
    goto LABEL_142;
  }
LABEL_18:
  float v13 = *((float *)this + 8);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v109 = v14;
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_143;
  }
LABEL_21:
  float v15 = *((float *)this + 33);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v108 = v16;
  if ((v1 & 0x200) == 0) {
    goto LABEL_144;
  }
LABEL_24:
  float v17 = *((float *)this + 12);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  uint64_t v107 = v18;
  if ((v1 & 0x200000) == 0) {
    goto LABEL_145;
  }
LABEL_27:
  float v19 = *((float *)this + 24);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  uint64_t v106 = v20;
  if ((v1 & 2) == 0) {
    goto LABEL_146;
  }
LABEL_30:
  float v21 = *((float *)this + 4);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  uint64_t v105 = v22;
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_147;
  }
LABEL_33:
  float v23 = *((float *)this + 29);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  uint64_t v104 = v24;
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_148;
  }
LABEL_36:
  float v25 = *((float *)this + 30);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  uint64_t v103 = v26;
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_149;
  }
LABEL_39:
  float v27 = *((float *)this + 31);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  uint64_t v102 = v28;
  if ((v1 & 0x40) == 0) {
    goto LABEL_150;
  }
LABEL_42:
  float v29 = *((float *)this + 9);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  uint64_t v101 = v30;
  if ((v1 & 0x80) == 0) {
    goto LABEL_151;
  }
LABEL_45:
  float v31 = *((float *)this + 10);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  uint64_t v100 = v32;
  if ((v1 & 0x100) == 0) {
    goto LABEL_152;
  }
LABEL_48:
  float v33 = *((float *)this + 11);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  uint64_t v99 = v34;
  if ((v1 & 0x80000000) == 0) {
    goto LABEL_153;
  }
LABEL_51:
  float v35 = *((float *)this + 34);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  uint64_t v98 = v36;
  if ((v1 & 0x400) == 0) {
    goto LABEL_154;
  }
LABEL_54:
  float v37 = *((float *)this + 13);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  uint64_t v97 = v38;
  if ((v1 & 0x400000) == 0) {
    goto LABEL_155;
  }
LABEL_57:
  float v39 = *((float *)this + 25);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  uint64_t v96 = v40;
  if ((v1 & 4) == 0) {
    goto LABEL_156;
  }
LABEL_60:
  float v41 = *((float *)this + 5);
  uint64_t v42 = LODWORD(v41);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  uint64_t v95 = v42;
  if ((v1 & 0x400000000) == 0) {
    goto LABEL_157;
  }
LABEL_63:
  float v43 = *((float *)this + 37);
  uint64_t v44 = LODWORD(v43);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  uint64_t v94 = v44;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_158;
  }
LABEL_66:
  float v45 = *((float *)this + 17);
  uint64_t v46 = LODWORD(v45);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  uint64_t v93 = v46;
  if ((v1 & 0x2000000000) == 0) {
    goto LABEL_159;
  }
LABEL_69:
  float v47 = *((float *)this + 40);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  uint64_t v92 = v48;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_160;
  }
LABEL_72:
  float v49 = *((float *)this + 20);
  if (v49 == 0.0) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = LODWORD(v49);
  }
  if ((v1 & 0x800000000) == 0) {
    goto LABEL_161;
  }
LABEL_76:
  float v51 = *((float *)this + 38);
  if (v51 == 0.0) {
    uint64_t v52 = 0;
  }
  else {
    uint64_t v52 = LODWORD(v51);
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_162;
  }
LABEL_80:
  float v53 = *((float *)this + 18);
  if (v53 == 0.0) {
    uint64_t v54 = 0;
  }
  else {
    uint64_t v54 = LODWORD(v53);
  }
  if ((v1 & 0x4000000000) == 0) {
    goto LABEL_163;
  }
LABEL_84:
  float v55 = *((float *)this + 41);
  uint64_t v56 = LODWORD(v55);
  if (v55 == 0.0) {
    uint64_t v56 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_164;
  }
LABEL_87:
  float v57 = *((float *)this + 21);
  uint64_t v58 = LODWORD(v57);
  if (v57 == 0.0) {
    uint64_t v58 = 0;
  }
  if ((v1 & 0x1000000000) == 0) {
    goto LABEL_165;
  }
LABEL_90:
  float v59 = *((float *)this + 39);
  uint64_t v60 = LODWORD(v59);
  if (v59 == 0.0) {
    uint64_t v60 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_166;
  }
LABEL_93:
  float v61 = *((float *)this + 19);
  uint64_t v62 = LODWORD(v61);
  if (v61 == 0.0) {
    uint64_t v62 = 0;
  }
  if ((v1 & 0x8000000000) == 0) {
    goto LABEL_167;
  }
LABEL_96:
  float v63 = *((float *)this + 42);
  uint64_t v64 = LODWORD(v63);
  if (v63 == 0.0) {
    uint64_t v64 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_168;
  }
LABEL_99:
  float v65 = *((float *)this + 22);
  uint64_t v66 = LODWORD(v65);
  if (v65 == 0.0) {
    uint64_t v66 = 0;
  }
  if ((v1 & 0x200000000000) != 0)
  {
LABEL_102:
    uint64_t v67 = *((unsigned __int8 *)this + 183);
    if ((v1 & 0x800) != 0) {
      goto LABEL_103;
    }
LABEL_170:
    uint64_t v69 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_106;
    }
LABEL_171:
    uint64_t v71 = 0;
    if ((v1 & 0x100000000000) != 0) {
      goto LABEL_109;
    }
    goto LABEL_172;
  }
LABEL_169:
  uint64_t v67 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_170;
  }
LABEL_103:
  float v68 = *((float *)this + 14);
  uint64_t v69 = LODWORD(v68);
  if (v68 == 0.0) {
    uint64_t v69 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_171;
  }
LABEL_106:
  float v70 = *((float *)this + 15);
  uint64_t v71 = LODWORD(v70);
  if (v70 == 0.0) {
    uint64_t v71 = 0;
  }
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_109:
    uint64_t v72 = *((unsigned __int8 *)this + 182);
    if ((v1 & 0x400000000000) != 0) {
      goto LABEL_110;
    }
    goto LABEL_173;
  }
LABEL_172:
  uint64_t v72 = 0;
  if ((v1 & 0x400000000000) != 0)
  {
LABEL_110:
    uint64_t v73 = *((unsigned __int8 *)this + 184);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_111;
    }
    goto LABEL_174;
  }
LABEL_173:
  uint64_t v73 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_111:
    uint64_t v74 = *((unsigned int *)this + 16);
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_112;
    }
LABEL_175:
    uint64_t v76 = 0;
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_115;
    }
LABEL_176:
    uint64_t v78 = 0;
    if ((v1 & 0x1000000000000) != 0) {
      goto LABEL_118;
    }
    goto LABEL_177;
  }
LABEL_174:
  uint64_t v74 = 0;
  if ((v1 & 0x100000000) == 0) {
    goto LABEL_175;
  }
LABEL_112:
  float v75 = *((float *)this + 35);
  uint64_t v76 = LODWORD(v75);
  if (v75 == 0.0) {
    uint64_t v76 = 0;
  }
  if ((v1 & 0x200000000) == 0) {
    goto LABEL_176;
  }
LABEL_115:
  float v77 = *((float *)this + 36);
  uint64_t v78 = LODWORD(v77);
  if (v77 == 0.0) {
    uint64_t v78 = 0;
  }
  if ((v1 & 0x1000000000000) != 0)
  {
LABEL_118:
    uint64_t v79 = *((unsigned __int8 *)this + 186);
    if ((v1 & 0x80000000000) != 0) {
      goto LABEL_119;
    }
    goto LABEL_178;
  }
LABEL_177:
  uint64_t v79 = 0;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_119:
    uint64_t v80 = *((unsigned __int8 *)this + 181);
    if ((v1 & 0x40000000000) != 0) {
      goto LABEL_120;
    }
    goto LABEL_179;
  }
LABEL_178:
  uint64_t v80 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_120:
    uint64_t v81 = *((unsigned __int8 *)this + 180);
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_121;
    }
LABEL_180:
    uint64_t v83 = 0;
    if ((v1 & 0x20000000000) != 0) {
      goto LABEL_124;
    }
LABEL_181:
    uint64_t v85 = 0;
    if ((v1 & 0x10000000000) != 0) {
      goto LABEL_127;
    }
LABEL_182:
    uint64_t v87 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_130;
    }
    goto LABEL_183;
  }
LABEL_179:
  uint64_t v81 = 0;
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_180;
  }
LABEL_121:
  float v82 = *((float *)this + 32);
  uint64_t v83 = LODWORD(v82);
  if (v82 == 0.0) {
    uint64_t v83 = 0;
  }
  if ((v1 & 0x20000000000) == 0) {
    goto LABEL_181;
  }
LABEL_124:
  float v84 = *((float *)this + 44);
  uint64_t v85 = LODWORD(v84);
  if (v84 == 0.0) {
    uint64_t v85 = 0;
  }
  if ((v1 & 0x10000000000) == 0) {
    goto LABEL_182;
  }
LABEL_127:
  float v86 = *((float *)this + 43);
  uint64_t v87 = LODWORD(v86);
  if (v86 == 0.0) {
    uint64_t v87 = 0;
  }
  if ((v1 & 0x100000) != 0)
  {
LABEL_130:
    uint64_t v88 = *((unsigned int *)this + 23);
    if ((v1 & 0x800000000000) != 0) {
      goto LABEL_131;
    }
LABEL_184:
    uint64_t v89 = 0;
    if ((v1 & 0x2000000000000) != 0) {
      goto LABEL_132;
    }
LABEL_185:
    uint64_t v90 = 0;
    return v114 ^ v2 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v50 ^ v52 ^ v54 ^ v56 ^ v58 ^ v60 ^ v62 ^ v64 ^ v66 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v76 ^ v78 ^ v79 ^ v80 ^ v81 ^ v83 ^ v85 ^ v87 ^ v88 ^ v89 ^ v90;
  }
LABEL_183:
  uint64_t v88 = 0;
  if ((v1 & 0x800000000000) == 0) {
    goto LABEL_184;
  }
LABEL_131:
  uint64_t v89 = *((unsigned __int8 *)this + 185);
  if ((v1 & 0x2000000000000) == 0) {
    goto LABEL_185;
  }
LABEL_132:
  uint64_t v90 = *((unsigned __int8 *)this + 187);
  return v114 ^ v2 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v50 ^ v52 ^ v54 ^ v56 ^ v58 ^ v60 ^ v62 ^ v64 ^ v66 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v76 ^ v78 ^ v79 ^ v80 ^ v81 ^ v83 ^ v85 ^ v87 ^ v88 ^ v89 ^ v90;
}

void CMMsl::RelativeDeviceMotionCorrelatedMotion::~RelativeDeviceMotionCorrelatedMotion(CMMsl::RelativeDeviceMotionCorrelatedMotion *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion(uint64_t this, const CMMsl::RelativeDeviceMotionCorrelatedMotion *a2)
{
  *(void *)this = off_1003A8930;
  *(_DWORD *)(this + 128) = 0;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    int v3 = 4;
    *(_DWORD *)(this + 128) = 4;
    *(void *)(this + 24) = v4;
    int v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 25);
    v3 |= 0x100000u;
    *(_DWORD *)(this + 128) = v3;
    *(_DWORD *)(this + 100) = v5;
    int v2 = *((_DWORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    int v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x80u;
    *(_DWORD *)(this + 128) = v3;
    *(_DWORD *)(this + 48) = v6;
    int v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 24);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 96) = v7;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  int v8 = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 44) = v8;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  int v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 76) = v9;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v10 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 72) = v10;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v11 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 68) = v11;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v12 = *((_DWORD *)a2 + 28);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 112) = v12;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v13 = *((unsigned char *)a2 + 124);
  v3 |= 0x20000000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 124) = v13;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  char v14 = *((unsigned char *)a2 + 120);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 120) = v14;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v15 = *((_DWORD *)a2 + 15);
  v3 |= 0x400u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 60) = v15;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  char v16 = *((unsigned char *)a2 + 123);
  v3 |= 0x10000000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 123) = v16;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  char v17 = *((unsigned char *)a2 + 125);
  v3 |= 0x40000000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 125) = v17;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v18 = *((_DWORD *)a2 + 23);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 92) = v18;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v19 = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 40) = v19;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v20 = *((_DWORD *)a2 + 22);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 88) = v20;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v21 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 36) = v21;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v22 = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 52) = v22;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v23 = *((_DWORD *)a2 + 27);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 108) = v23;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  char v24 = *((unsigned char *)a2 + 126);
  v3 |= 0x80000000;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 126) = v24;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v25 = *((_DWORD *)a2 + 21);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 84) = v25;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x200) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v26 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 32) = v26;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v27 = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 56) = v27;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v28 = *((_DWORD *)a2 + 26);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 104) = v28;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0) {
      goto LABEL_31;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v29 = *((unsigned char *)a2 + 121);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 121) = v29;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v30 = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 64) = v30;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_32:
    if ((v2 & 2) == 0) {
      goto LABEL_33;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v31 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 8) = v31;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t v32 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 16) = v32;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v33 = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 116) = v33;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x8000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000) == 0) {
      return this;
    }
LABEL_66:
    char v35 = *((unsigned char *)a2 + 122);
    *(_DWORD *)(this + 128) = v3 | 0x8000000;
    *(unsigned char *)(this + 122) = v35;
    return this;
  }
LABEL_65:
  int v34 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 80) = v34;
  if ((*((_DWORD *)a2 + 32) & 0x8000000) != 0) {
    goto LABEL_66;
  }
  return this;
}

CMMsl *CMMsl::RelativeDeviceMotionCorrelatedMotion::operator=(CMMsl *a1, const CMMsl::RelativeDeviceMotionCorrelatedMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionCorrelatedMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RelativeDeviceMotionCorrelatedMotion *a2, CMMsl::RelativeDeviceMotionCorrelatedMotion *a3)
{
  int v3 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 124);
  *((unsigned char *)this + 124) = *((unsigned char *)a2 + 124);
  *((unsigned char *)a2 + 124) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 120);
  *((unsigned char *)this + 120) = *((unsigned char *)a2 + 120);
  *((unsigned char *)a2 + 120) = v3;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 123);
  *((unsigned char *)this + 123) = *((unsigned char *)a2 + 123);
  *((unsigned char *)a2 + 123) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 125);
  *((unsigned char *)this + 125) = *((unsigned char *)a2 + 125);
  *((unsigned char *)a2 + 125) = v3;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 126);
  *((unsigned char *)this + 126) = *((unsigned char *)a2 + 126);
  *((unsigned char *)a2 + 126) = v3;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 121);
  *((unsigned char *)this + 121) = *((unsigned char *)a2 + 121);
  *((unsigned char *)a2 + 121) = v3;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v6;
  float result = *((float *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((float *)a2 + 20) = result;
  LOBYTE(v3) = *((unsigned char *)this + 122);
  *((unsigned char *)this + 122) = *((unsigned char *)a2 + 122);
  *((unsigned char *)a2 + 122) = v3;
  return result;
}

float CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8930;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 123) = *(unsigned char *)(a2 + 123);
  *(unsigned char *)(a1 + 125) = *(unsigned char *)(a2 + 125);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(unsigned char *)(a1 + 126) = *(unsigned char *)(a2 + 126);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  float result = *(float *)(a2 + 80);
  *(float *)(a1 + 80) = result;
  *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
  return result;
}

CMMsl *CMMsl::RelativeDeviceMotionCorrelatedMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionCorrelatedMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::formatText(CMMsl::RelativeDeviceMotionCorrelatedMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "auxAvgOmegaAroundGrav2s", *((float *)this + 8));
    int v5 = *((_DWORD *)this + 32);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "auxAvgOmegaAroundGravLong", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "auxAvgOmegaAroundGravShort", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "auxAvgOmegaLong", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "auxAvgOmegaShort", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "auxHistoricalOmegaStdMax", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "auxOverSrcYawDiffSum", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "dotRotGrav", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "hasUnCorrelatedSrcMotion", *((unsigned char *)this + 120));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "inHeadTurnState", *((unsigned char *)this + 121));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "inLikelySlowBodyTurnPed", *((unsigned char *)this + 122));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "isInCorrelatedActivity", *((unsigned char *)this + 123));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "isInCorrelatedMotion", *((unsigned char *)this + 124));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "lastHeadTurnStartTime", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "lastHeadTurnStopTime", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "lastHeadTurnYawRadians", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "likelyOnGymMachine", *((unsigned char *)this + 125));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "relOmegaMeanLong", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "relOmegaVarLong", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "relOmegaVarShort", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "srcAccumulatedYaw4s", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "srcAvgOmegaAroundGrav2s", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "srcAvgOmegaAroundGravLong", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "srcAvgOmegaAroundGravShort", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "srcAvgOmegaLong", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "srcAvgOmegaShort", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200000) == 0)
  {
LABEL_28:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "srcAvgYawBufferSum", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400000) == 0)
  {
LABEL_29:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "srcHistoricalOmegaStdMax", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800000) == 0)
  {
LABEL_30:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "srcRotationAxisAlignment", *((float *)this + 28));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "srcYawBufferLongStd", *((float *)this + 29));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v5 & 4) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "steadyStatePedestrian", *((unsigned char *)this + 126));
  if ((*((_DWORD *)this + 32) & 4) != 0) {
LABEL_33:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
LABEL_34:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::readFrom(CMMsl::RelativeDeviceMotionCorrelatedMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 32) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_102;
        case 2u:
          *((_DWORD *)this + 32) |= 0x100000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 3u:
          *((_DWORD *)this + 32) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 4u:
          *((_DWORD *)this + 32) |= 0x80000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 5u:
          *((_DWORD *)this + 32) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 6u:
          *((_DWORD *)this + 32) |= 0x4000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 7u:
          *((_DWORD *)this + 32) |= 0x2000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 8u:
          *((_DWORD *)this + 32) |= 0x1000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 9u:
          *((_DWORD *)this + 32) |= 0x800000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0xAu:
          *((_DWORD *)this + 32) |= 0x20000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v22 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v22 = v21 != 0;
          }
          *((unsigned char *)this + 124) = v22;
          break;
        case 0xBu:
          *((_DWORD *)this + 32) |= 0x2000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v24 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v24 = v23 != 0;
          }
          *((unsigned char *)this + 120) = v24;
          break;
        case 0xCu:
          *((_DWORD *)this + 32) |= 0x400u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0xDu:
          *((_DWORD *)this + 32) |= 0x10000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v26 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v25 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v26 = v25 != 0;
          }
          *((unsigned char *)this + 123) = v26;
          break;
        case 0xEu:
          *((_DWORD *)this + 32) |= 0x40000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v28 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v28 = v27 != 0;
          }
          *((unsigned char *)this + 125) = v28;
          break;
        case 0xFu:
          *((_DWORD *)this + 32) |= 0x40000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0x10u:
          *((_DWORD *)this + 32) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0x11u:
          *((_DWORD *)this + 32) |= 0x20000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0x12u:
          *((_DWORD *)this + 32) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0x13u:
          *((_DWORD *)this + 32) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0x14u:
          *((_DWORD *)this + 32) |= 0x400000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0x15u:
          *((_DWORD *)this + 32) |= 0x80000000;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v30 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v30 = v29 != 0;
          }
          *((unsigned char *)this + 126) = v30;
          break;
        case 0x16u:
          *((_DWORD *)this + 32) |= 0x10000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0x17u:
          *((_DWORD *)this + 32) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0x18u:
          *((_DWORD *)this + 32) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0x19u:
          *((_DWORD *)this + 32) |= 0x200000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0x1Au:
          *((_DWORD *)this + 32) |= 0x4000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v32 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v31 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v32 = v31 != 0;
          }
          *((unsigned char *)this + 121) = v32;
          break;
        case 0x1Bu:
          *((_DWORD *)this + 32) |= 0x800u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0x1Cu:
          *((_DWORD *)this + 32) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_102;
        case 0x1Du:
          *((_DWORD *)this + 32) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_102:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_130;
        case 0x1Eu:
          *((_DWORD *)this + 32) |= 0x1000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_129;
        case 0x1Fu:
          *((_DWORD *)this + 32) |= 0x8000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
          {
LABEL_113:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_129:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_130:
            *((void *)a2 + 1) = v2;
          }
          break;
        case 0x20u:
          *((_DWORD *)this + 32) |= 0x8000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v34 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v34 = v33 != 0;
          }
          *((unsigned char *)this + 122) = v34;
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 128);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 2u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 3u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 4u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 5u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 6u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 7u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 8u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 9u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 124), 0xAu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 120), 0xBu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xCu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 123), 0xDu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 125), 0xEu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xFu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x10u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x11u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x12u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x13u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x14u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 126), 0x15u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x16u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x17u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x18u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x19u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 121), 0x1Au);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x1Bu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_29:
    if ((v4 & 2) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0x1Cu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0x1Du);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_32;
    }
LABEL_64:
    this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x1Fu);
    if ((*(_DWORD *)(v3 + 128) & 0x8000000) == 0) {
      return this;
    }
    goto LABEL_65;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x1Eu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) != 0) {
    goto LABEL_64;
  }
LABEL_32:
  if ((v4 & 0x8000000) == 0) {
    return this;
  }
LABEL_65:
  char v5 = *(unsigned char *)(v3 + 122);

  return PB::Writer::write(a2, v5, 0x20u);
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::hash_value(CMMsl::RelativeDeviceMotionCorrelatedMotion *this)
{
  int v1 = *((_DWORD *)this + 32);
  if ((v1 & 4) == 0)
  {
    double v57 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_3;
    }
LABEL_101:
    uint64_t v3 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_7;
    }
LABEL_102:
    uint64_t v61 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_10;
    }
LABEL_103:
    uint64_t v60 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_13;
    }
LABEL_104:
    uint64_t v59 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_16;
    }
LABEL_105:
    uint64_t v58 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_19;
    }
LABEL_106:
    uint64_t v13 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_23;
    }
LABEL_107:
    uint64_t v15 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_27;
    }
LABEL_108:
    uint64_t v17 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_109;
  }
  double v55 = *((double *)this + 3);
  if (v55 == 0.0) {
    double v55 = 0.0;
  }
  double v57 = v55;
  if ((v1 & 0x100000) == 0) {
    goto LABEL_101;
  }
LABEL_3:
  float v2 = *((float *)this + 25);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = LODWORD(v2);
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_102;
  }
LABEL_7:
  float v4 = *((float *)this + 12);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  uint64_t v61 = v5;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_103;
  }
LABEL_10:
  float v6 = *((float *)this + 24);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  uint64_t v60 = v7;
  if ((v1 & 0x40) == 0) {
    goto LABEL_104;
  }
LABEL_13:
  float v8 = *((float *)this + 11);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  uint64_t v59 = v9;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_105;
  }
LABEL_16:
  float v10 = *((float *)this + 19);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  uint64_t v58 = v11;
  if ((v1 & 0x2000) == 0) {
    goto LABEL_106;
  }
LABEL_19:
  float v12 = *((float *)this + 18);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = LODWORD(v12);
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_107;
  }
LABEL_23:
  float v14 = *((float *)this + 17);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = LODWORD(v14);
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_108;
  }
LABEL_27:
  float v16 = *((float *)this + 28);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = LODWORD(v16);
  }
  if ((v1 & 0x20000000) != 0)
  {
LABEL_31:
    uint64_t v18 = *((unsigned __int8 *)this + 124);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_110;
  }
LABEL_109:
  uint64_t v18 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_32:
    uint64_t v19 = *((unsigned __int8 *)this + 120);
    if ((v1 & 0x400) != 0) {
      goto LABEL_33;
    }
LABEL_111:
    uint64_t v21 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_37;
    }
    goto LABEL_112;
  }
LABEL_110:
  uint64_t v19 = 0;
  if ((v1 & 0x400) == 0) {
    goto LABEL_111;
  }
LABEL_33:
  float v20 = *((float *)this + 15);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = LODWORD(v20);
  }
  if ((v1 & 0x10000000) != 0)
  {
LABEL_37:
    uint64_t v22 = *((unsigned __int8 *)this + 123);
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_113;
  }
LABEL_112:
  uint64_t v22 = 0;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_38:
    uint64_t v23 = *((unsigned __int8 *)this + 125);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_39;
    }
LABEL_114:
    uint64_t v25 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_43;
    }
LABEL_115:
    uint64_t v27 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_47;
    }
LABEL_116:
    uint64_t v29 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_51;
    }
LABEL_117:
    uint64_t v31 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_55;
    }
LABEL_118:
    uint64_t v33 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_59;
    }
LABEL_119:
    uint64_t v35 = 0;
    if (v1 < 0) {
      goto LABEL_63;
    }
    goto LABEL_120;
  }
LABEL_113:
  uint64_t v23 = 0;
  if ((v1 & 0x40000) == 0) {
    goto LABEL_114;
  }
LABEL_39:
  float v24 = *((float *)this + 23);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = LODWORD(v24);
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_115;
  }
LABEL_43:
  float v26 = *((float *)this + 10);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = LODWORD(v26);
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_116;
  }
LABEL_47:
  float v28 = *((float *)this + 22);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = LODWORD(v28);
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_117;
  }
LABEL_51:
  float v30 = *((float *)this + 9);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = LODWORD(v30);
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_118;
  }
LABEL_55:
  float v32 = *((float *)this + 13);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = LODWORD(v32);
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_119;
  }
LABEL_59:
  float v34 = *((float *)this + 27);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = LODWORD(v34);
  }
  if (v1 < 0)
  {
LABEL_63:
    uint64_t v36 = *((unsigned __int8 *)this + 126);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_64;
    }
LABEL_121:
    uint64_t v38 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_68;
    }
LABEL_122:
    uint64_t v40 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_72;
    }
LABEL_123:
    uint64_t v42 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_76;
    }
LABEL_124:
    uint64_t v44 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_80;
    }
    goto LABEL_125;
  }
LABEL_120:
  uint64_t v36 = 0;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_121;
  }
LABEL_64:
  float v37 = *((float *)this + 21);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = LODWORD(v37);
  }
  if ((v1 & 8) == 0) {
    goto LABEL_122;
  }
LABEL_68:
  float v39 = *((float *)this + 8);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = LODWORD(v39);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_123;
  }
LABEL_72:
  float v41 = *((float *)this + 14);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = LODWORD(v41);
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_124;
  }
LABEL_76:
  float v43 = *((float *)this + 26);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = LODWORD(v43);
  }
  if ((v1 & 0x4000000) != 0)
  {
LABEL_80:
    uint64_t v45 = *((unsigned __int8 *)this + 121);
    if ((v1 & 0x800) != 0) {
      goto LABEL_81;
    }
LABEL_126:
    uint64_t v47 = 0;
    if (v1) {
      goto LABEL_85;
    }
LABEL_127:
    double v48 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_88;
    }
LABEL_128:
    double v49 = 0.0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_91;
    }
LABEL_129:
    uint64_t v51 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_94;
    }
    goto LABEL_130;
  }
LABEL_125:
  uint64_t v45 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_126;
  }
LABEL_81:
  float v46 = *((float *)this + 16);
  if (v46 == 0.0) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = LODWORD(v46);
  }
  if ((v1 & 1) == 0) {
    goto LABEL_127;
  }
LABEL_85:
  double v48 = *((double *)this + 1);
  if (v48 == 0.0) {
    double v48 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_128;
  }
LABEL_88:
  double v49 = *((double *)this + 2);
  if (v49 == 0.0) {
    double v49 = 0.0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_129;
  }
LABEL_91:
  float v50 = *((float *)this + 29);
  uint64_t v51 = LODWORD(v50);
  if (v50 == 0.0) {
    uint64_t v51 = 0;
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_94:
    float v52 = *((float *)this + 20);
    uint64_t v53 = LODWORD(v52);
    if (v52 == 0.0) {
      uint64_t v53 = 0;
    }
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_97;
    }
LABEL_131:
    uint64_t v54 = 0;
    return v3 ^ *(void *)&v57 ^ v61 ^ v60 ^ v59 ^ v58 ^ v13 ^ v15 ^ v17 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v45 ^ v47 ^ *(void *)&v48 ^ *(void *)&v49 ^ v51 ^ v53 ^ v54;
  }
LABEL_130:
  uint64_t v53 = 0;
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_131;
  }
LABEL_97:
  uint64_t v54 = *((unsigned __int8 *)this + 122);
  return v3 ^ *(void *)&v57 ^ v61 ^ v60 ^ v59 ^ v58 ^ v13 ^ v15 ^ v17 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v45 ^ v47 ^ *(void *)&v48 ^ *(void *)&v49 ^ v51 ^ v53 ^ v54;
}

void CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal(CMMsl::RelativeDeviceMotionInternal *this)
{
  *(void *)this = off_1003A8968;
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal(this);

  operator delete();
}

CMMsl::RelativeDeviceMotionInternal *CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal(CMMsl::RelativeDeviceMotionInternal *this, const CMMsl::RelativeDeviceMotionInternal *a2)
{
  *(void *)this = off_1003A8968;
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (char *)this + 8;
  *((_DWORD *)this + 41) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 8);
    int v6 = 2;
    *((_DWORD *)this + 41) = 2;
    *((void *)this + 8) = v7;
    int v5 = *((_DWORD *)a2 + 41);
    if ((v5 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v6 = 0;
  if ((v5 & 0x800) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 27);
    v6 |= 0x800u;
    *((_DWORD *)this + 41) = v6;
    *((_DWORD *)this + 27) = v8;
    int v5 = *((_DWORD *)a2 + 41);
  }
LABEL_6:
  if ((v5 & 0x1000) != 0)
  {
    int v13 = *((_DWORD *)a2 + 28);
    v6 |= 0x1000u;
    *((_DWORD *)this + 41) = v6;
    *((_DWORD *)this + 28) = v13;
    int v5 = *((_DWORD *)a2 + 41);
    if ((v5 & 0x2000) == 0)
    {
LABEL_8:
      if ((v5 & 0x4000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  int v14 = *((_DWORD *)a2 + 29);
  v6 |= 0x2000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 29) = v14;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v15 = *((_DWORD *)a2 + 30);
  v6 |= 0x4000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 30) = v15;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v16 = *((_DWORD *)a2 + 31);
  v6 |= 0x8000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 31) = v16;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v17 = *((_DWORD *)a2 + 32);
  v6 |= 0x10000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 32) = v17;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x80000) == 0)
  {
LABEL_12:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v18 = *((_DWORD *)a2 + 35);
  v6 |= 0x80000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 35) = v18;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x100000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v19 = *((_DWORD *)a2 + 36);
  v6 |= 0x100000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 36) = v19;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x200000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v20 = *((_DWORD *)a2 + 37);
  v6 |= 0x200000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 37) = v20;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x100) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v21 = *((_DWORD *)a2 + 24);
  v6 |= 0x100u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 24) = v21;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v22 = *((_DWORD *)a2 + 25);
  v6 |= 0x200u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 25) = v22;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_51:
  int v23 = *((_DWORD *)a2 + 26);
  v6 |= 0x400u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 26) = v23;
  if ((*((_DWORD *)a2 + 41) & 0x80) != 0)
  {
LABEL_18:
    int v9 = *((_DWORD *)a2 + 23);
    *((_DWORD *)this + 41) = v6 | 0x80;
    *((_DWORD *)this + 23) = v9;
  }
LABEL_19:
  if (this != a2)
  {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x8000000) != 0)
  {
    char v24 = *((unsigned char *)a2 + 157);
    *((_DWORD *)this + 41) |= 0x8000000u;
    *((unsigned char *)this + 157) = v24;
    int v10 = *((_DWORD *)a2 + 41);
    if ((v10 & 0x400000) == 0)
    {
LABEL_23:
      if ((v10 & 0x1000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_55;
    }
  }
  else if ((v10 & 0x400000) == 0)
  {
    goto LABEL_23;
  }
  char v25 = *((unsigned char *)a2 + 152);
  *((_DWORD *)this + 41) |= 0x400000u;
  *((unsigned char *)this + 152) = v25;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  char v26 = *((unsigned char *)a2 + 154);
  *((_DWORD *)this + 41) |= 0x1000000u;
  *((unsigned char *)this + 154) = v26;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x10) == 0)
  {
LABEL_25:
    if ((v10 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v27 = *((_DWORD *)a2 + 20);
  *((_DWORD *)this + 41) |= 0x10u;
  *((_DWORD *)this + 20) = v27;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 8) == 0)
  {
LABEL_26:
    if ((v10 & 4) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v28 = *((_DWORD *)a2 + 19);
  *((_DWORD *)this + 41) |= 8u;
  *((_DWORD *)this + 19) = v28;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 4) == 0)
  {
LABEL_27:
    if ((v10 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v29 = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 41) |= 4u;
  *((_DWORD *)this + 18) = v29;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }
LABEL_59:
  char v30 = *((unsigned char *)a2 + 159);
  *((_DWORD *)this + 41) |= 0x20000000u;
  *((unsigned char *)this + 159) = v30;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v31 = *((unsigned char *)a2 + 161);
  *((_DWORD *)this + 41) |= 0x80000000;
  *((unsigned char *)this + 161) = v31;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x800000) == 0)
  {
LABEL_30:
    if ((v10 & 0x20) == 0) {
      goto LABEL_31;
    }
    goto LABEL_62;
  }
LABEL_61:
  char v32 = *((unsigned char *)a2 + 153);
  *((_DWORD *)this + 41) |= 0x800000u;
  *((unsigned char *)this + 153) = v32;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x20) == 0)
  {
LABEL_31:
    if ((v10 & 0x40000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v33 = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 41) |= 0x20u;
  *((_DWORD *)this + 21) = v33;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x40000) == 0)
  {
LABEL_32:
    if ((v10 & 0x10000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v34 = *((_DWORD *)a2 + 34);
  *((_DWORD *)this + 41) |= 0x40000u;
  *((_DWORD *)this + 34) = v34;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_65;
  }
LABEL_64:
  char v35 = *((unsigned char *)a2 + 158);
  *((_DWORD *)this + 41) |= 0x10000000u;
  *((unsigned char *)this + 158) = v35;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v10 & 0x40000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_66;
  }
LABEL_65:
  char v36 = *((unsigned char *)a2 + 156);
  *((_DWORD *)this + 41) |= 0x4000000u;
  *((unsigned char *)this + 156) = v36;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v10 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_67;
  }
LABEL_66:
  char v37 = *((unsigned char *)a2 + 160);
  *((_DWORD *)this + 41) |= 0x40000000u;
  *((unsigned char *)this + 160) = v37;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 1) == 0)
  {
LABEL_36:
    if ((v10 & 0x40) == 0) {
      goto LABEL_37;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v38 = *((void *)a2 + 7);
  *((_DWORD *)this + 41) |= 1u;
  *((void *)this + 7) = v38;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x40) == 0)
  {
LABEL_37:
    if ((v10 & 0x2000000) == 0) {
      goto LABEL_38;
    }
LABEL_69:
    char v40 = *((unsigned char *)a2 + 155);
    *((_DWORD *)this + 41) |= 0x2000000u;
    *((unsigned char *)this + 155) = v40;
    if ((*((_DWORD *)a2 + 41) & 0x20000) == 0) {
      return this;
    }
    goto LABEL_39;
  }
LABEL_68:
  int v39 = *((_DWORD *)a2 + 22);
  *((_DWORD *)this + 41) |= 0x40u;
  *((_DWORD *)this + 22) = v39;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x2000000) != 0) {
    goto LABEL_69;
  }
LABEL_38:
  if ((v10 & 0x20000) != 0)
  {
LABEL_39:
    int v11 = *((_DWORD *)a2 + 33);
    *((_DWORD *)this + 41) |= 0x20000u;
    *((_DWORD *)this + 33) = v11;
  }
  return this;
}

CMMsl *CMMsl::RelativeDeviceMotionInternal::operator=(CMMsl *a1, const CMMsl::RelativeDeviceMotionInternal *a2)
{
  if (a1 != a2)
  {
    CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal((CMMsl::RelativeDeviceMotionInternal *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionInternal *)v5, v3);
    CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal((CMMsl::RelativeDeviceMotionInternal *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RelativeDeviceMotionInternal *a2, CMMsl::RelativeDeviceMotionInternal *a3)
{
  int v3 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 157);
  *((unsigned char *)this + 157) = *((unsigned char *)a2 + 157);
  *((unsigned char *)a2 + 157) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 152);
  *((unsigned char *)this + 152) = *((unsigned char *)a2 + 152);
  *((unsigned char *)a2 + 152) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 154);
  *((unsigned char *)this + 154) = *((unsigned char *)a2 + 154);
  *((unsigned char *)a2 + 154) = v10;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LOBYTE(v10) = *((unsigned char *)this + 159);
  *((unsigned char *)this + 159) = *((unsigned char *)a2 + 159);
  *((unsigned char *)a2 + 159) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 161);
  *((unsigned char *)this + 161) = *((unsigned char *)a2 + 161);
  *((unsigned char *)a2 + 161) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 153);
  *((unsigned char *)this + 153) = *((unsigned char *)a2 + 153);
  *((unsigned char *)a2 + 153) = v10;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v10) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 158);
  *((unsigned char *)this + 158) = *((unsigned char *)a2 + 158);
  *((unsigned char *)a2 + 158) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 156);
  *((unsigned char *)this + 156) = *((unsigned char *)a2 + 156);
  *((unsigned char *)a2 + 156) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 160);
  *((unsigned char *)this + 160) = *((unsigned char *)a2 + 160);
  *((unsigned char *)a2 + 160) = v10;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  LODWORD(v10) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 155);
  *((unsigned char *)this + 155) = *((unsigned char *)a2 + 155);
  *((unsigned char *)a2 + 155) = v10;
  LODWORD(v10) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v10;
  return result;
}

uint64_t CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8968;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a2 + 164) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(unsigned char *)(a1 + 157) = *(unsigned char *)(a2 + 157);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 159) = *(unsigned char *)(a2 + 159);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 158) = *(unsigned char *)(a2 + 158);
  *(unsigned char *)(a1 + 156) = *(unsigned char *)(a2 + 156);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  return a1;
}

CMMsl *CMMsl::RelativeDeviceMotionInternal::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionInternal *)v5, v3);
    CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal((CMMsl::RelativeDeviceMotionInternal *)v5);
  }
  return a1;
}

uint64_t CMMsl::RelativeDeviceMotionInternal::formatText(CMMsl::RelativeDeviceMotionInternal *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x400000) != 0)
  {
    PB::TextFormatter::format(a2, "btz", *((unsigned char *)this + 152));
    int v5 = *((_DWORD *)this + 41);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "btzDisturbanceDuration", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "btzIsCurrentlyQuiescent", *((unsigned char *)this + 153));
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "btzQuiescentDurationLoose", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "btzQuiescentDurationStrict", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "btzStaticPoseDuration", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "centeredBoresight", *((unsigned char *)this + 154));
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "centeredBoresightInHighDynamics", *((unsigned char *)this + 155));
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "clientMode", *((_DWORD *)this + 22));
  if ((*((_DWORD *)this + 41) & 0x4000000) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "inComplexTransitionState", *((unsigned char *)this + 156));
LABEL_12:
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "noiseVariance", v8);
  }
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x8000000) != 0)
  {
    PB::TextFormatter::format(a2, "pinnedBoresight", *((unsigned char *)this + 157));
    int v9 = *((_DWORD *)this + 41);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0) {
        goto LABEL_17;
      }
      goto LABEL_55;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(a2, "qHat_W", *((float *)this + 23));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "qHat_X", *((float *)this + 24));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x200) == 0)
  {
LABEL_18:
    if ((v9 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "qHat_Y", *((float *)this + 25));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x400) == 0)
  {
LABEL_19:
    if ((v9 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "qHat_Z", *((float *)this + 26));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x800) == 0)
  {
LABEL_20:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "rBoresight_X", *((float *)this + 27));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x1000) == 0)
  {
LABEL_21:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "rBoresight_Y", *((float *)this + 28));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x2000) == 0)
  {
LABEL_22:
    if ((v9 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "rBoresight_Z", *((float *)this + 29));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x4000) == 0)
  {
LABEL_23:
    if ((v9 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "rHat_X", *((float *)this + 30));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x8000) == 0)
  {
LABEL_24:
    if ((v9 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "rHat_Y", *((float *)this + 31));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x10000) == 0)
  {
LABEL_25:
    if ((v9 & 0x10000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "rHat_Z", *((float *)this + 32));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v9 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "requestingCamera", *((unsigned char *)this + 158));
  if (*((_DWORD *)this + 41)) {
LABEL_27:
  }
    PB::TextFormatter::format(a2, "srcTimestamp", *((double *)this + 7));
LABEL_28:
  uint64_t v10 = (float *)*((void *)this + 4);
  int v11 = (float *)*((void *)this + 5);
  while (v10 != v11)
  {
    float v12 = *v10++;
    PB::TextFormatter::format(a2, "stateVariance", v12);
  }
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
    int v13 = *((_DWORD *)this + 41);
    if ((v13 & 0x20000000) == 0)
    {
LABEL_32:
      if ((v13 & 0x20000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_68;
    }
  }
  else if ((v13 & 0x20000000) == 0)
  {
    goto LABEL_32;
  }
  PB::TextFormatter::format(a2, "tracking1IMU", *((unsigned char *)this + 159));
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x20000) == 0)
  {
LABEL_33:
    if ((v13 & 0x40000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "trackingBehavior", *((_DWORD *)this + 33));
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v13 & 0x40000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "trackingDisabled", *((unsigned char *)this + 160));
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x40000) == 0)
  {
LABEL_35:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "trackingScheme", *((_DWORD *)this + 34));
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v13 & 0x80000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "useRelaxedQuiescenceBounds", *((unsigned char *)this + 161));
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x80000) == 0)
  {
LABEL_37:
    if ((v13 & 0x100000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "vHat_X", *((float *)this + 35));
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x100000) == 0)
  {
LABEL_38:
    if ((v13 & 0x200000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "vHat_Y", *((float *)this + 36));
  if ((*((_DWORD *)this + 41) & 0x200000) != 0) {
LABEL_39:
  }
    PB::TextFormatter::format(a2, "vHat_Z", *((float *)this + 37));
LABEL_40:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::RelativeDeviceMotionInternal::readFrom(CMMsl::RelativeDeviceMotionInternal *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 8);
    int v9 = (char *)this + 24;
    uint64_t v10 = (void **)((char *)this + 32);
    int v11 = (char *)this + 48;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 41) |= 2u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v25);
          goto LABEL_153;
        case 2u:
          *((_DWORD *)this + 41) |= 0x800u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v26);
          goto LABEL_265;
        case 3u:
          *((_DWORD *)this + 41) |= 0x1000u;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v27);
          goto LABEL_265;
        case 4u:
          *((_DWORD *)this + 41) |= 0x2000u;
          unint64_t v28 = *((void *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v28);
          goto LABEL_265;
        case 5u:
          *((_DWORD *)this + 41) |= 0x4000u;
          unint64_t v29 = *((void *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v29);
          goto LABEL_265;
        case 6u:
          *((_DWORD *)this + 41) |= 0x8000u;
          unint64_t v30 = *((void *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v30);
          goto LABEL_265;
        case 7u:
          *((_DWORD *)this + 41) |= 0x10000u;
          unint64_t v31 = *((void *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v31);
          goto LABEL_265;
        case 8u:
          *((_DWORD *)this + 41) |= 0x80000u;
          unint64_t v32 = *((void *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v32);
          goto LABEL_265;
        case 9u:
          *((_DWORD *)this + 41) |= 0x100000u;
          unint64_t v33 = *((void *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v33);
          goto LABEL_265;
        case 0xAu:
          *((_DWORD *)this + 41) |= 0x200000u;
          unint64_t v34 = *((void *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v34);
          goto LABEL_265;
        case 0xBu:
          *((_DWORD *)this + 41) |= 0x100u;
          unint64_t v35 = *((void *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v35);
          goto LABEL_265;
        case 0xCu:
          *((_DWORD *)this + 41) |= 0x200u;
          unint64_t v36 = *((void *)a2 + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v36);
          goto LABEL_265;
        case 0xDu:
          *((_DWORD *)this + 41) |= 0x400u;
          unint64_t v37 = *((void *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v37);
          goto LABEL_265;
        case 0xEu:
          *((_DWORD *)this + 41) |= 0x80u;
          unint64_t v38 = *((void *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v38);
          goto LABEL_265;
        case 0xFu:
          if (v24 != 2)
          {
            v138 = (char *)*((void *)this + 5);
            unint64_t v137 = *((void *)this + 6);
            if ((unint64_t)v138 >= v137)
            {
              v154 = (char *)*v10;
              uint64_t v155 = (v138 - (unsigned char *)*v10) >> 2;
              unint64_t v156 = v155 + 1;
              if ((unint64_t)(v155 + 1) >> 62) {
LABEL_277:
              }
                sub_10000EE98();
              uint64_t v157 = v137 - (void)v154;
              if (v157 >> 1 > v156) {
                unint64_t v156 = v157 >> 1;
              }
              if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v158 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v158 = v156;
              }
              if (v158)
              {
                v159 = (char *)sub_100024458((uint64_t)v11, v158);
                v154 = (char *)*((void *)this + 4);
                v138 = (char *)*((void *)this + 5);
              }
              else
              {
                v159 = 0;
              }
              v166 = &v159[4 * v155];
              *(_DWORD *)v166 = 0;
              v139 = v166 + 4;
              while (v138 != v154)
              {
                int v167 = *((_DWORD *)v138 - 1);
                v138 -= 4;
                *((_DWORD *)v166 - 1) = v167;
                v166 -= 4;
              }
              *((void *)this + 4) = v166;
              *((void *)this + 5) = v139;
              *((void *)this + 6) = &v159[4 * v158];
              if (v154) {
                operator delete(v154);
              }
            }
            else
            {
              *(_DWORD *)v138 = 0;
              v139 = v138 + 4;
            }
            *((void *)this + 5) = v139;
            goto LABEL_261;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v39 = *((void *)a2 + 1);
          unint64_t v40 = *((void *)a2 + 2);
          while (v39 < v40 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v42 = (char *)*((void *)this + 5);
            unint64_t v41 = *((void *)this + 6);
            if ((unint64_t)v42 >= v41)
            {
              uint64_t v44 = (char *)*v10;
              uint64_t v45 = (v42 - (unsigned char *)*v10) >> 2;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62) {
                goto LABEL_277;
              }
              uint64_t v47 = v41 - (void)v44;
              if (v47 >> 1 > v46) {
                unint64_t v46 = v47 >> 1;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                double v49 = (char *)sub_100024458((uint64_t)v11, v48);
                uint64_t v44 = (char *)*((void *)this + 4);
                uint64_t v42 = (char *)*((void *)this + 5);
              }
              else
              {
                double v49 = 0;
              }
              float v50 = &v49[4 * v45];
              *(_DWORD *)float v50 = 0;
              float v43 = v50 + 4;
              while (v42 != v44)
              {
                int v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *((void *)this + 4) = v50;
              *((void *)this + 5) = v43;
              *((void *)this + 6) = &v49[4 * v48];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v42 = 0;
              float v43 = v42 + 4;
            }
            *((void *)this + 5) = v43;
            unint64_t v52 = *((void *)a2 + 1);
            if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)a2 + 2)) {
              goto LABEL_217;
            }
            *(v43 - 1) = *(_DWORD *)(*(void *)a2 + v52);
            unint64_t v40 = *((void *)a2 + 2);
            unint64_t v39 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v39;
          }
          goto LABEL_218;
        case 0x10u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v53 = *((void *)a2 + 1);
            unint64_t v54 = *((void *)a2 + 2);
            while (v53 < v54 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v56 = (char *)*((void *)this + 2);
              unint64_t v55 = *((void *)this + 3);
              if ((unint64_t)v56 >= v55)
              {
                uint64_t v58 = (char *)*v8;
                uint64_t v59 = (v56 - (unsigned char *)*v8) >> 2;
                unint64_t v60 = v59 + 1;
                if ((unint64_t)(v59 + 1) >> 62) {
                  goto LABEL_278;
                }
                uint64_t v61 = v55 - (void)v58;
                if (v61 >> 1 > v60) {
                  unint64_t v60 = v61 >> 1;
                }
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v62 = v60;
                }
                if (v62)
                {
                  float v63 = (char *)sub_100024458((uint64_t)v9, v62);
                  uint64_t v58 = (char *)*((void *)this + 1);
                  uint64_t v56 = (char *)*((void *)this + 2);
                }
                else
                {
                  float v63 = 0;
                }
                uint64_t v64 = &v63[4 * v59];
                *(_DWORD *)uint64_t v64 = 0;
                double v57 = v64 + 4;
                while (v56 != v58)
                {
                  int v65 = *((_DWORD *)v56 - 1);
                  v56 -= 4;
                  *((_DWORD *)v64 - 1) = v65;
                  v64 -= 4;
                }
                *((void *)this + 1) = v64;
                *((void *)this + 2) = v57;
                *((void *)this + 3) = &v63[4 * v62];
                if (v58) {
                  operator delete(v58);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v56 = 0;
                double v57 = v56 + 4;
              }
              *((void *)this + 2) = v57;
              unint64_t v66 = *((void *)a2 + 1);
              if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)a2 + 2))
              {
LABEL_217:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v57 - 1) = *(_DWORD *)(*(void *)a2 + v66);
              unint64_t v54 = *((void *)a2 + 2);
              unint64_t v53 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v53;
            }
LABEL_218:
            PB::Reader::recallMark();
          }
          else
          {
            v141 = (char *)*((void *)this + 2);
            unint64_t v140 = *((void *)this + 3);
            if ((unint64_t)v141 >= v140)
            {
              v160 = (char *)*v8;
              uint64_t v161 = (v141 - (unsigned char *)*v8) >> 2;
              unint64_t v162 = v161 + 1;
              if ((unint64_t)(v161 + 1) >> 62) {
LABEL_278:
              }
                sub_10000EE98();
              uint64_t v163 = v140 - (void)v160;
              if (v163 >> 1 > v162) {
                unint64_t v162 = v163 >> 1;
              }
              if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v164 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v164 = v162;
              }
              if (v164)
              {
                v165 = (char *)sub_100024458((uint64_t)v9, v164);
                v160 = (char *)*((void *)this + 1);
                v141 = (char *)*((void *)this + 2);
              }
              else
              {
                v165 = 0;
              }
              v168 = &v165[4 * v161];
              *(_DWORD *)v168 = 0;
              v139 = v168 + 4;
              while (v141 != v160)
              {
                int v169 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v168 - 1) = v169;
                v168 -= 4;
              }
              *((void *)this + 1) = v168;
              *((void *)this + 2) = v139;
              *((void *)this + 3) = &v165[4 * v164];
              if (v160) {
                operator delete(v160);
              }
            }
            else
            {
              *(_DWORD *)v141 = 0;
              v139 = v141 + 4;
            }
            *((void *)this + 2) = v139;
LABEL_261:
            unint64_t v170 = *((void *)a2 + 1);
            if (v170 <= 0xFFFFFFFFFFFFFFFBLL && v170 + 4 <= *((void *)a2 + 2))
            {
              *(v139 - 1) = *(_DWORD *)(*(void *)a2 + v170);
LABEL_265:
              uint64_t v116 = *((void *)a2 + 1) + 4;
LABEL_266:
              *((void *)a2 + 1) = v116;
            }
            else
            {
LABEL_263:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_267:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 0x11u:
          *((_DWORD *)this + 41) |= 0x8000000u;
          unint64_t v67 = *((void *)a2 + 1);
          if (v67 >= *((void *)a2 + 2))
          {
            BOOL v70 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v68 = v67 + 1;
            int v69 = *(unsigned __int8 *)(*(void *)a2 + v67);
            *((void *)a2 + 1) = v68;
            BOOL v70 = v69 != 0;
          }
          *((unsigned char *)this + 157) = v70;
          goto LABEL_267;
        case 0x12u:
          *((_DWORD *)this + 41) |= 0x400000u;
          unint64_t v71 = *((void *)a2 + 1);
          if (v71 >= *((void *)a2 + 2))
          {
            BOOL v74 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v72 = v71 + 1;
            int v73 = *(unsigned __int8 *)(*(void *)a2 + v71);
            *((void *)a2 + 1) = v72;
            BOOL v74 = v73 != 0;
          }
          *((unsigned char *)this + 152) = v74;
          goto LABEL_267;
        case 0x13u:
          *((_DWORD *)this + 41) |= 0x1000000u;
          unint64_t v75 = *((void *)a2 + 1);
          if (v75 >= *((void *)a2 + 2))
          {
            BOOL v78 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v76 = v75 + 1;
            int v77 = *(unsigned __int8 *)(*(void *)a2 + v75);
            *((void *)a2 + 1) = v76;
            BOOL v78 = v77 != 0;
          }
          *((unsigned char *)this + 154) = v78;
          goto LABEL_267;
        case 0x14u:
          *((_DWORD *)this + 41) |= 0x10u;
          unint64_t v79 = *((void *)a2 + 1);
          if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v79);
          goto LABEL_265;
        case 0x15u:
          *((_DWORD *)this + 41) |= 8u;
          unint64_t v80 = *((void *)a2 + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v80);
          goto LABEL_265;
        case 0x16u:
          *((_DWORD *)this + 41) |= 4u;
          unint64_t v81 = *((void *)a2 + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v81);
          goto LABEL_265;
        case 0x17u:
          *((_DWORD *)this + 41) |= 0x20000000u;
          unint64_t v82 = *((void *)a2 + 1);
          if (v82 >= *((void *)a2 + 2))
          {
            BOOL v85 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v83 = v82 + 1;
            int v84 = *(unsigned __int8 *)(*(void *)a2 + v82);
            *((void *)a2 + 1) = v83;
            BOOL v85 = v84 != 0;
          }
          *((unsigned char *)this + 159) = v85;
          goto LABEL_267;
        case 0x18u:
          *((_DWORD *)this + 41) |= 0x80000000;
          unint64_t v86 = *((void *)a2 + 1);
          if (v86 >= *((void *)a2 + 2))
          {
            BOOL v89 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v87 = v86 + 1;
            int v88 = *(unsigned __int8 *)(*(void *)a2 + v86);
            *((void *)a2 + 1) = v87;
            BOOL v89 = v88 != 0;
          }
          *((unsigned char *)this + 161) = v89;
          goto LABEL_267;
        case 0x19u:
          *((_DWORD *)this + 41) |= 0x800000u;
          unint64_t v90 = *((void *)a2 + 1);
          if (v90 >= *((void *)a2 + 2))
          {
            BOOL v93 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v91 = v90 + 1;
            int v92 = *(unsigned __int8 *)(*(void *)a2 + v90);
            *((void *)a2 + 1) = v91;
            BOOL v93 = v92 != 0;
          }
          *((unsigned char *)this + 153) = v93;
          goto LABEL_267;
        case 0x1Au:
          *((_DWORD *)this + 41) |= 0x20u;
          unint64_t v94 = *((void *)a2 + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v94);
          goto LABEL_265;
        case 0x1Bu:
          *((_DWORD *)this + 41) |= 0x40000u;
          unint64_t v95 = *((void *)a2 + 1);
          unint64_t v96 = *((void *)a2 + 2);
          uint64_t v97 = *(void *)a2;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            char v98 = 0;
            unsigned int v99 = 0;
            uint64_t v100 = 0;
            do
            {
              unint64_t v101 = v95 + 1;
              *((void *)a2 + 1) = v95 + 1;
              char v102 = *(unsigned char *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0) {
                goto LABEL_240;
              }
              v98 += 7;
              unint64_t v95 = v101;
              BOOL v18 = v99++ > 8;
            }
            while (!v18);
LABEL_194:
            LODWORD(v100) = 0;
            goto LABEL_240;
          }
          char v142 = 0;
          unsigned int v143 = 0;
          uint64_t v100 = 0;
          if (v96 <= v95) {
            unint64_t v96 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v144 = v95 + 1;
              char v145 = *(unsigned char *)(v97 + v95);
              *((void *)a2 + 1) = v144;
              v100 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                unint64_t v95 = v144;
                BOOL v18 = v143++ > 8;
                if (v18) {
                  goto LABEL_194;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v100) = 0;
              }
            }
            break;
          }
LABEL_240:
          *((_DWORD *)this + 34) = v100;
          goto LABEL_267;
        case 0x1Cu:
          *((_DWORD *)this + 41) |= 0x10000000u;
          unint64_t v103 = *((void *)a2 + 1);
          if (v103 >= *((void *)a2 + 2))
          {
            BOOL v106 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v104 = v103 + 1;
            int v105 = *(unsigned __int8 *)(*(void *)a2 + v103);
            *((void *)a2 + 1) = v104;
            BOOL v106 = v105 != 0;
          }
          *((unsigned char *)this + 158) = v106;
          goto LABEL_267;
        case 0x1Du:
          *((_DWORD *)this + 41) |= 0x4000000u;
          unint64_t v107 = *((void *)a2 + 1);
          if (v107 >= *((void *)a2 + 2))
          {
            BOOL v110 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v108 = v107 + 1;
            int v109 = *(unsigned __int8 *)(*(void *)a2 + v107);
            *((void *)a2 + 1) = v108;
            BOOL v110 = v109 != 0;
          }
          *((unsigned char *)this + 156) = v110;
          goto LABEL_267;
        case 0x1Eu:
          *((_DWORD *)this + 41) |= 0x40000000u;
          unint64_t v111 = *((void *)a2 + 1);
          if (v111 >= *((void *)a2 + 2))
          {
            BOOL v114 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v112 = v111 + 1;
            int v113 = *(unsigned __int8 *)(*(void *)a2 + v111);
            *((void *)a2 + 1) = v112;
            BOOL v114 = v113 != 0;
          }
          *((unsigned char *)this + 160) = v114;
          goto LABEL_267;
        case 0x1Fu:
          *((_DWORD *)this + 41) |= 1u;
          unint64_t v115 = *((void *)a2 + 1);
          if (v115 > 0xFFFFFFFFFFFFFFF7 || v115 + 8 > *((void *)a2 + 2)) {
            goto LABEL_263;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v115);
LABEL_153:
          uint64_t v116 = *((void *)a2 + 1) + 8;
          goto LABEL_266;
        case 0x20u:
          *((_DWORD *)this + 41) |= 0x40u;
          unint64_t v117 = *((void *)a2 + 1);
          unint64_t v118 = *((void *)a2 + 2);
          uint64_t v119 = *(void *)a2;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            char v120 = 0;
            unsigned int v121 = 0;
            uint64_t v122 = 0;
            do
            {
              unint64_t v123 = v117 + 1;
              *((void *)a2 + 1) = v117 + 1;
              char v124 = *(unsigned char *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0) {
                goto LABEL_243;
              }
              v120 += 7;
              unint64_t v117 = v123;
              BOOL v18 = v121++ > 8;
            }
            while (!v18);
LABEL_207:
            LODWORD(v122) = 0;
            goto LABEL_243;
          }
          char v146 = 0;
          unsigned int v147 = 0;
          uint64_t v122 = 0;
          if (v118 <= v117) {
            unint64_t v118 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v148 = v117 + 1;
              char v149 = *(unsigned char *)(v119 + v117);
              *((void *)a2 + 1) = v148;
              v122 |= (unint64_t)(v149 & 0x7F) << v146;
              if (v149 < 0)
              {
                v146 += 7;
                unint64_t v117 = v148;
                BOOL v18 = v147++ > 8;
                if (v18) {
                  goto LABEL_207;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v122) = 0;
              }
            }
            break;
          }
LABEL_243:
          *((_DWORD *)this + 22) = v122;
          goto LABEL_267;
        case 0x21u:
          *((_DWORD *)this + 41) |= 0x2000000u;
          unint64_t v125 = *((void *)a2 + 1);
          if (v125 >= *((void *)a2 + 2))
          {
            BOOL v128 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v126 = v125 + 1;
            int v127 = *(unsigned __int8 *)(*(void *)a2 + v125);
            *((void *)a2 + 1) = v126;
            BOOL v128 = v127 != 0;
          }
          *((unsigned char *)this + 155) = v128;
          goto LABEL_267;
        case 0x22u:
          *((_DWORD *)this + 41) |= 0x20000u;
          unint64_t v129 = *((void *)a2 + 1);
          unint64_t v130 = *((void *)a2 + 2);
          uint64_t v131 = *(void *)a2;
          if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
          {
            char v132 = 0;
            unsigned int v133 = 0;
            uint64_t v134 = 0;
            do
            {
              unint64_t v135 = v129 + 1;
              *((void *)a2 + 1) = v129 + 1;
              char v136 = *(unsigned char *)(v131 + v129);
              v134 |= (unint64_t)(v136 & 0x7F) << v132;
              if ((v136 & 0x80) == 0) {
                goto LABEL_246;
              }
              v132 += 7;
              unint64_t v129 = v135;
              BOOL v18 = v133++ > 8;
            }
            while (!v18);
LABEL_216:
            LODWORD(v134) = 0;
            goto LABEL_246;
          }
          char v150 = 0;
          unsigned int v151 = 0;
          uint64_t v134 = 0;
          if (v130 <= v129) {
            unint64_t v130 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v130 == v129)
            {
              LODWORD(v134) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v152 = v129 + 1;
              char v153 = *(unsigned char *)(v131 + v129);
              *((void *)a2 + 1) = v152;
              v134 |= (unint64_t)(v153 & 0x7F) << v150;
              if (v153 < 0)
              {
                v150 += 7;
                unint64_t v129 = v152;
                BOOL v18 = v151++ > 8;
                if (v18) {
                  goto LABEL_216;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v134) = 0;
              }
            }
            break;
          }
LABEL_246:
          *((_DWORD *)this + 33) = v134;
          goto LABEL_267;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_267;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelativeDeviceMotionInternal::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 164);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
    int v4 = *(_DWORD *)(v3 + 164);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }
  else if ((v4 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 2u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 3u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 4u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 5u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 6u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 7u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 8u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 9u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0xAu);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0xBu);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
LABEL_53:
    this = PB::Writer::write(a2, *(float *)(v3 + 104), 0xDu);
    if ((*(_DWORD *)(v3 + 164) & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xCu);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x400) != 0) {
    goto LABEL_53;
  }
LABEL_14:
  if ((v4 & 0x80) != 0) {
LABEL_15:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xEu);
LABEL_16:
  int v5 = *(float **)(v3 + 32);
  uint64_t v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 0xFu);
  }
  float v8 = *(float **)(v3 + 8);
  int v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10, 0x10u);
  }
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x8000000) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 157), 0x11u);
    int v11 = *(_DWORD *)(v3 + 164);
    if ((v11 & 0x400000) == 0)
    {
LABEL_24:
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_57;
    }
  }
  else if ((v11 & 0x400000) == 0)
  {
    goto LABEL_24;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 152), 0x12u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v11 & 0x10) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 154), 0x13u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10) == 0)
  {
LABEL_26:
    if ((v11 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x14u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 8) == 0)
  {
LABEL_27:
    if ((v11 & 4) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x15u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 4) == 0)
  {
LABEL_28:
    if ((v11 & 0x20000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x16u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20000000) == 0)
  {
LABEL_29:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 159), 0x17u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v11 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 161), 0x18u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x800000) == 0)
  {
LABEL_31:
    if ((v11 & 0x20) == 0) {
      goto LABEL_32;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 153), 0x19u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20) == 0)
  {
LABEL_32:
    if ((v11 & 0x40000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x1Au);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000) == 0)
  {
LABEL_33:
    if ((v11 & 0x10000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 0x1Bu);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v11 & 0x4000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 158), 0x1Cu);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 156), 0x1Du);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v11 & 1) == 0) {
      goto LABEL_37;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 160), 0x1Eu);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 1) == 0)
  {
LABEL_37:
    if ((v11 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0x1Fu);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40) == 0)
  {
LABEL_38:
    if ((v11 & 0x2000000) == 0) {
      goto LABEL_39;
    }
LABEL_71:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 155), 0x21u);
    if ((*(_DWORD *)(v3 + 164) & 0x20000) == 0) {
      return this;
    }
    goto LABEL_72;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0x20u);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x2000000) != 0) {
    goto LABEL_71;
  }
LABEL_39:
  if ((v11 & 0x20000) == 0) {
    return this;
  }
LABEL_72:
  unsigned int v12 = *(_DWORD *)(v3 + 132);

  return PB::Writer::writeVarInt(a2, v12, 0x22u);
}

uint64_t CMMsl::RelativeDeviceMotionInternal::hash_value(CMMsl::RelativeDeviceMotionInternal *this)
{
  int v2 = *((_DWORD *)this + 41);
  if ((v2 & 2) == 0)
  {
    double v56 = 0.0;
    if ((v2 & 0x800) != 0) {
      goto LABEL_3;
    }
LABEL_51:
    uint64_t v4 = 0;
    if ((v2 & 0x1000) != 0) {
      goto LABEL_7;
    }
LABEL_52:
    uint64_t v62 = 0;
    if ((v2 & 0x2000) != 0) {
      goto LABEL_10;
    }
LABEL_53:
    uint64_t v61 = 0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_13;
    }
LABEL_54:
    uint64_t v60 = 0;
    if ((v2 & 0x8000) != 0) {
      goto LABEL_16;
    }
LABEL_55:
    uint64_t v59 = 0;
    if ((v2 & 0x10000) != 0) {
      goto LABEL_19;
    }
LABEL_56:
    uint64_t v58 = 0;
    if ((v2 & 0x80000) != 0) {
      goto LABEL_22;
    }
LABEL_57:
    uint64_t v57 = 0;
    if ((v2 & 0x100000) != 0) {
      goto LABEL_25;
    }
LABEL_58:
    uint64_t v18 = 0;
    if ((v2 & 0x200000) != 0) {
      goto LABEL_29;
    }
LABEL_59:
    uint64_t v20 = 0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_33;
    }
LABEL_60:
    uint64_t v22 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_37;
    }
LABEL_61:
    uint64_t v24 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_41;
    }
    goto LABEL_62;
  }
  double v29 = *((double *)this + 8);
  if (v29 == 0.0) {
    double v29 = 0.0;
  }
  double v56 = v29;
  if ((v2 & 0x800) == 0) {
    goto LABEL_51;
  }
LABEL_3:
  float v3 = *((float *)this + 27);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = LODWORD(v3);
  }
  if ((v2 & 0x1000) == 0) {
    goto LABEL_52;
  }
LABEL_7:
  float v5 = *((float *)this + 28);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v62 = v6;
  if ((v2 & 0x2000) == 0) {
    goto LABEL_53;
  }
LABEL_10:
  float v7 = *((float *)this + 29);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v61 = v8;
  if ((v2 & 0x4000) == 0) {
    goto LABEL_54;
  }
LABEL_13:
  float v9 = *((float *)this + 30);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v60 = v10;
  if ((v2 & 0x8000) == 0) {
    goto LABEL_55;
  }
LABEL_16:
  float v11 = *((float *)this + 31);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v59 = v12;
  if ((v2 & 0x10000) == 0) {
    goto LABEL_56;
  }
LABEL_19:
  float v13 = *((float *)this + 32);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v58 = v14;
  if ((v2 & 0x80000) == 0) {
    goto LABEL_57;
  }
LABEL_22:
  float v15 = *((float *)this + 35);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v57 = v16;
  if ((v2 & 0x100000) == 0) {
    goto LABEL_58;
  }
LABEL_25:
  float v17 = *((float *)this + 36);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = LODWORD(v17);
  }
  if ((v2 & 0x200000) == 0) {
    goto LABEL_59;
  }
LABEL_29:
  float v19 = *((float *)this + 37);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = LODWORD(v19);
  }
  if ((v2 & 0x100) == 0) {
    goto LABEL_60;
  }
LABEL_33:
  float v21 = *((float *)this + 24);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = LODWORD(v21);
  }
  if ((v2 & 0x200) == 0) {
    goto LABEL_61;
  }
LABEL_37:
  float v23 = *((float *)this + 25);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = LODWORD(v23);
  }
  if ((v2 & 0x400) != 0)
  {
LABEL_41:
    float v25 = *((float *)this + 26);
    if (v25 == 0.0) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = LODWORD(v25);
    }
    if ((v2 & 0x80) != 0) {
      goto LABEL_45;
    }
LABEL_63:
    uint64_t v28 = 0;
    goto LABEL_64;
  }
LABEL_62:
  uint64_t v26 = 0;
  if ((v2 & 0x80) == 0) {
    goto LABEL_63;
  }
LABEL_45:
  float v27 = *((float *)this + 23);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = LODWORD(v27);
  }
LABEL_64:
  uint64_t v30 = PBHashBytes();
  uint64_t v31 = PBHashBytes();
  int v32 = *((_DWORD *)this + 41);
  if ((v32 & 0x8000000) != 0)
  {
    uint64_t v33 = *((unsigned __int8 *)this + 157);
    if ((v32 & 0x400000) != 0)
    {
LABEL_66:
      uint64_t v34 = *((unsigned __int8 *)this + 152);
      if ((v32 & 0x1000000) != 0) {
        goto LABEL_67;
      }
      goto LABEL_95;
    }
  }
  else
  {
    uint64_t v33 = 0;
    if ((v32 & 0x400000) != 0) {
      goto LABEL_66;
    }
  }
  uint64_t v34 = 0;
  if ((v32 & 0x1000000) != 0)
  {
LABEL_67:
    uint64_t v35 = *((unsigned __int8 *)this + 154);
    if ((v32 & 0x10) != 0) {
      goto LABEL_68;
    }
LABEL_96:
    uint64_t v37 = 0;
    if ((v32 & 8) != 0) {
      goto LABEL_71;
    }
LABEL_97:
    uint64_t v39 = 0;
    if ((v32 & 4) != 0) {
      goto LABEL_74;
    }
LABEL_98:
    uint64_t v41 = 0;
    if ((v32 & 0x20000000) != 0) {
      goto LABEL_77;
    }
    goto LABEL_99;
  }
LABEL_95:
  uint64_t v35 = 0;
  if ((v32 & 0x10) == 0) {
    goto LABEL_96;
  }
LABEL_68:
  float v36 = *((float *)this + 20);
  uint64_t v37 = LODWORD(v36);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  if ((v32 & 8) == 0) {
    goto LABEL_97;
  }
LABEL_71:
  float v38 = *((float *)this + 19);
  uint64_t v39 = LODWORD(v38);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  if ((v32 & 4) == 0) {
    goto LABEL_98;
  }
LABEL_74:
  float v40 = *((float *)this + 18);
  uint64_t v41 = LODWORD(v40);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  if ((v32 & 0x20000000) != 0)
  {
LABEL_77:
    uint64_t v42 = *((unsigned __int8 *)this + 159);
    if (v32 < 0) {
      goto LABEL_78;
    }
    goto LABEL_100;
  }
LABEL_99:
  uint64_t v42 = 0;
  if (v32 < 0)
  {
LABEL_78:
    uint64_t v43 = *((unsigned __int8 *)this + 161);
    if ((v32 & 0x800000) != 0) {
      goto LABEL_79;
    }
    goto LABEL_101;
  }
LABEL_100:
  uint64_t v43 = 0;
  if ((v32 & 0x800000) != 0)
  {
LABEL_79:
    uint64_t v44 = *((unsigned __int8 *)this + 153);
    if ((v32 & 0x20) != 0) {
      goto LABEL_80;
    }
LABEL_102:
    uint64_t v46 = 0;
    if ((v32 & 0x40000) != 0) {
      goto LABEL_83;
    }
    goto LABEL_103;
  }
LABEL_101:
  uint64_t v44 = 0;
  if ((v32 & 0x20) == 0) {
    goto LABEL_102;
  }
LABEL_80:
  float v45 = *((float *)this + 21);
  uint64_t v46 = LODWORD(v45);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  if ((v32 & 0x40000) != 0)
  {
LABEL_83:
    uint64_t v47 = *((unsigned int *)this + 34);
    if ((v32 & 0x10000000) != 0) {
      goto LABEL_84;
    }
    goto LABEL_104;
  }
LABEL_103:
  uint64_t v47 = 0;
  if ((v32 & 0x10000000) != 0)
  {
LABEL_84:
    uint64_t v48 = *((unsigned __int8 *)this + 158);
    if ((v32 & 0x4000000) != 0) {
      goto LABEL_85;
    }
    goto LABEL_105;
  }
LABEL_104:
  uint64_t v48 = 0;
  if ((v32 & 0x4000000) != 0)
  {
LABEL_85:
    uint64_t v49 = *((unsigned __int8 *)this + 156);
    if ((v32 & 0x40000000) != 0) {
      goto LABEL_86;
    }
    goto LABEL_106;
  }
LABEL_105:
  uint64_t v49 = 0;
  if ((v32 & 0x40000000) != 0)
  {
LABEL_86:
    uint64_t v50 = *((unsigned __int8 *)this + 160);
    if (v32) {
      goto LABEL_87;
    }
LABEL_107:
    double v51 = 0.0;
    if ((v32 & 0x40) != 0) {
      goto LABEL_90;
    }
    goto LABEL_108;
  }
LABEL_106:
  uint64_t v50 = 0;
  if ((v32 & 1) == 0) {
    goto LABEL_107;
  }
LABEL_87:
  double v51 = *((double *)this + 7);
  if (v51 == 0.0) {
    double v51 = 0.0;
  }
  if ((v32 & 0x40) != 0)
  {
LABEL_90:
    uint64_t v52 = *((unsigned int *)this + 22);
    if ((v32 & 0x2000000) != 0) {
      goto LABEL_91;
    }
LABEL_109:
    uint64_t v53 = 0;
    if ((v32 & 0x20000) != 0) {
      goto LABEL_92;
    }
LABEL_110:
    uint64_t v54 = 0;
    return v4 ^ *(void *)&v56 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ *(void *)&v51 ^ v52 ^ v53 ^ v54;
  }
LABEL_108:
  uint64_t v52 = 0;
  if ((v32 & 0x2000000) == 0) {
    goto LABEL_109;
  }
LABEL_91:
  uint64_t v53 = *((unsigned __int8 *)this + 155);
  if ((v32 & 0x20000) == 0) {
    goto LABEL_110;
  }
LABEL_92:
  uint64_t v54 = *((unsigned int *)this + 33);
  return v4 ^ *(void *)&v56 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ *(void *)&v51 ^ v52 ^ v53 ^ v54;
}

void CMMsl::RelativeGravityConstraints::~RelativeGravityConstraints(CMMsl::RelativeGravityConstraints *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::RelativeGravityConstraints::RelativeGravityConstraints(CMMsl::RelativeGravityConstraints *this, const CMMsl::RelativeGravityConstraints *a2)
{
  *(void *)this = off_1003A89A0;
  *((_DWORD *)this + 12) = 0;
  __int16 v2 = *((_WORD *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 24) = 1;
    *((void *)this + 1) = v4;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((_WORD *)this + 24) = v3;
    *((_DWORD *)this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_WORD *)this + 24) = v3;
    *((_DWORD *)this + 4) = v4;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 7) = v4;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 9) = v4;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 10) = v4;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v5 = *((unsigned char *)a2 + 44);
  v3 |= 0x100u;
  *((_WORD *)this + 24) = v3;
  *((unsigned char *)this + 44) = v5;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 6) = v4;
  if ((*((_WORD *)a2 + 24) & 4) == 0) {
    return *(float *)&v4;
  }
LABEL_20:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((_WORD *)this + 24) = v3 | 4;
  *((_DWORD *)this + 5) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::RelativeGravityConstraints::operator=(uint64_t a1, const CMMsl::RelativeGravityConstraints *a2)
{
  if ((const CMMsl::RelativeGravityConstraints *)a1 != a2)
  {
    CMMsl::RelativeGravityConstraints::RelativeGravityConstraints((CMMsl::RelativeGravityConstraints *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v13;
    char v13 = v3;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RelativeGravityConstraints *a2, CMMsl::RelativeGravityConstraints *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v3;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::RelativeGravityConstraints::RelativeGravityConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A89A0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::RelativeGravityConstraints::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::RelativeGravityConstraints::RelativeGravityConstraints((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v13;
    char v13 = v3;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::RelativeGravityConstraints::formatText(CMMsl::RelativeGravityConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "avgRotationMax", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "historicalDisturbanceDuration", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "historicalQuiescenceDuration", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "instAccelMagDiff", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "instRotationMax", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "isAvgGrav", *((unsigned char *)this + 44));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "lpfAccelMagDiff", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "measNoiseVar", *((float *)this + 10));
  if (*((_WORD *)this + 24)) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_11:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelativeGravityConstraints::readFrom(CMMsl::RelativeGravityConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 24) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_54;
        case 2u:
          *((_WORD *)this + 24) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_53;
        case 3u:
          *((_WORD *)this + 24) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_53;
        case 4u:
          *((_WORD *)this + 24) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_53;
        case 5u:
          *((_WORD *)this + 24) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_53;
        case 6u:
          *((_WORD *)this + 24) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_53;
        case 7u:
          *((_WORD *)this + 24) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *((unsigned char *)this + 44) = v21;
          break;
        case 8u:
          *((_WORD *)this + 24) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_53;
        case 9u:
          *((_WORD *)this + 24) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_53:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_54:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_47:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelativeGravityConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 48);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 2u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 5u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 6u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(float *)(v3 + 24), 8u);
    if ((*(_WORD *)(v3 + 48) & 4) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 44), 7u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_19:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(a2, v5, 9u);
}

uint64_t CMMsl::RelativeGravityConstraints::hash_value(CMMsl::RelativeGravityConstraints *this)
{
  __int16 v1 = *((_WORD *)this + 24);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_28:
    uint64_t v4 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
LABEL_29:
    uint64_t v6 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_9;
    }
LABEL_30:
    uint64_t v8 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_31:
    uint64_t v10 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_15;
    }
LABEL_32:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 24) & 0x100) != 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_28;
  }
LABEL_3:
  float v3 = *((float *)this + 8);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_29;
  }
LABEL_6:
  float v5 = *((float *)this + 4);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_30;
  }
LABEL_9:
  float v7 = *((float *)this + 7);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_12:
  float v9 = *((float *)this + 9);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_32;
  }
LABEL_15:
  float v11 = *((float *)this + 10);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_18:
    uint64_t v13 = *((unsigned __int8 *)this + 44);
    if ((v1 & 8) != 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v13 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_19:
    float v14 = *((float *)this + 6);
    uint64_t v15 = LODWORD(v14);
    if (v14 == 0.0) {
      uint64_t v15 = 0;
    }
    if ((v1 & 4) != 0) {
      goto LABEL_22;
    }
LABEL_35:
    uint64_t v17 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17;
  }
LABEL_34:
  uint64_t v15 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_35;
  }
LABEL_22:
  float v16 = *((float *)this + 5);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17;
}

void CMMsl::RelativeGravityCorrection::~RelativeGravityCorrection(CMMsl::RelativeGravityCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A89D8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::RelativeGravityCorrection::~RelativeGravityCorrection(this);

  operator delete();
}

uint64_t CMMsl::RelativeGravityCorrection::RelativeGravityCorrection(uint64_t this, const CMMsl::RelativeGravityCorrection *a2)
{
  *(void *)this = off_1003A89D8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 20))
  {
    char v2 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) |= 1u;
    *(unsigned char *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::RelativeGravityCorrection::operator=(uint64_t a1, const CMMsl::RelativeGravityCorrection *a2)
{
  if ((const CMMsl::RelativeGravityCorrection *)a1 != a2)
  {
    CMMsl::RelativeGravityCorrection::RelativeGravityCorrection((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    CMMsl::RelativeGravityCorrection::~RelativeGravityCorrection((CMMsl::RelativeGravityCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::RelativeGravityCorrection *a2, CMMsl::RelativeGravityCorrection *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::RelativeGravityCorrection::RelativeGravityCorrection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A89D8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::RelativeGravityCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::RelativeGravityCorrection::RelativeGravityCorrection((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    CMMsl::RelativeGravityCorrection::~RelativeGravityCorrection((CMMsl::RelativeGravityCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::RelativeGravityCorrection::formatText(CMMsl::RelativeGravityCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "isAvgGrav", *((unsigned char *)this + 16));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelativeGravityCorrection::readFrom(CMMsl::RelativeGravityCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 >= *((void *)a2 + 2))
        {
          BOOL v24 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          int v23 = *(unsigned __int8 *)(*(void *)a2 + v21);
          *((void *)a2 + 1) = v22;
          BOOL v24 = v23 != 0;
        }
        *((unsigned char *)this + 16) = v24;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelativeGravityCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

unint64_t CMMsl::RelativeGravityCorrection::hash_value(CMMsl::RelativeGravityCorrection *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  }
  if (*((unsigned char *)this + 20)) {
    uint64_t v3 = *((unsigned __int8 *)this + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::RelativeGravityCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::RhythmicGnssOperatorStatus::~RhythmicGnssOperatorStatus(CMMsl::RhythmicGnssOperatorStatus *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus(uint64_t this, const CMMsl::RhythmicGnssOperatorStatus *a2)
{
  *(void *)this = off_1003A8A10;
  *(_DWORD *)(this + 24) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 3);
    char v3 = 2;
    *(unsigned char *)(this + 24) = 2;
    *(_DWORD *)(this + 12) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 8) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 20);
    v3 |= 8u;
    *(unsigned char *)(this + 24) = v3;
    *(unsigned char *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(unsigned char *)(this + 24) = v3;
    *(_DWORD *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return this;
      }
LABEL_12:
      char v8 = *((unsigned char *)a2 + 21);
      *(unsigned char *)(this + 24) = v3 | 0x10;
      *(unsigned char *)(this + 21) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 2);
  v3 |= 1u;
  *(unsigned char *)(this + 24) = v3;
  *(_DWORD *)(this + 8) = v7;
  if ((*((unsigned char *)a2 + 24) & 0x10) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::operator=(uint64_t a1, const CMMsl::RhythmicGnssOperatorStatus *a2)
{
  if ((const CMMsl::RhythmicGnssOperatorStatus *)a1 != a2)
  {
    CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    LOWORD(v3) = *(_WORD *)(a1 + 20);
    *(_WORD *)(a1 + 20) = v10;
    __int16 v10 = v3;
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::RhythmicGnssOperatorStatus *a2, CMMsl::RhythmicGnssOperatorStatus *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 20);
  *(unsigned char *)(this + 20) = *((unsigned char *)a2 + 20);
  *((unsigned char *)a2 + 20) = v4;
  int v5 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  int v6 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6;
  LOBYTE(v6) = *(unsigned char *)(this + 21);
  *(unsigned char *)(this + 21) = *((unsigned char *)a2 + 21);
  *((unsigned char *)a2 + 21) = v6;
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A8A10;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(result + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(result + 21) = *(unsigned char *)(a2 + 21);
  return result;
}

{
  *(void *)uint64_t result = off_1003A8A10;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(result + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(result + 21) = *(unsigned char *)(a2 + 21);
  return result;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v11[0] = off_1003A8A10;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    char v4 = *(unsigned char *)(a2 + 20);
    int v5 = *(_DWORD *)(a2 + 16);
    char v6 = *(unsigned char *)(a2 + 21);
    int v15 = *(_DWORD *)(a1 + 24);
    char v7 = *(unsigned char *)(a1 + 20);
    *(unsigned char *)(a1 + 20) = v4;
    char v13 = v7;
    int v12 = *(_DWORD *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_DWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 8) = v9;
    v11[1] = v8;
    LOBYTE(v3) = *(unsigned char *)(a1 + 21);
    *(unsigned char *)(a1 + 21) = v6;
    char v14 = v3;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::formatText(CMMsl::RhythmicGnssOperatorStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "activeGnssSession", *((unsigned char *)this + 20));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "currentModesOfOperation", *((_DWORD *)this + 2));
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "gnssModeOfOperation", *((_DWORD *)this + 3));
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "hasSubscribedRhythmicClient", *((unsigned char *)this + 21));
  if ((*((unsigned char *)this + 24) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "rhythmicMode", *((_DWORD *)this + 4));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::readFrom(CMMsl::RhythmicGnssOperatorStatus *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)a2 + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 24) |= 2u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_81;
                  }
                  unint64_t v45 = v20++;
                  char v46 = *(unsigned char *)(v21 + v45);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_80;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_80:
                unint64_t v3 = v45 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v3 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_81;
                  }
                  v22 += 7;
                  unint64_t v20 = v3;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_81:
              *((_DWORD *)this + 3) = v24;
              goto LABEL_92;
            case 2u:
              *((unsigned char *)this + 24) |= 8u;
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              if (v3 >= v2)
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v3++);
                *((void *)a2 + 1) = v3;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 20) = v28;
              goto LABEL_92;
            case 3u:
              *((unsigned char *)this + 24) |= 4u;
              unint64_t v29 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v30 = *(void *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_86;
                  }
                  unint64_t v49 = v29++;
                  char v50 = *(unsigned char *)(v30 + v49);
                  *((void *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_85:
                    unint64_t v3 = v49 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_85;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v3 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v31 += 7;
                unint64_t v29 = v3;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_86:
              *((_DWORD *)this + 4) = v33;
              goto LABEL_92;
            case 4u:
              *((unsigned char *)this + 24) |= 1u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_91;
                  }
                  unint64_t v53 = v35++;
                  char v54 = *(unsigned char *)(v36 + v53);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_90:
                    unint64_t v3 = v53 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_90;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v3 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v37 += 7;
                unint64_t v35 = v3;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_91:
              *((_DWORD *)this + 2) = v39;
LABEL_92:
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *((unsigned char *)this + 24) |= 0x10u;
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              if (v3 >= v2)
              {
                BOOL v42 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)a2 + v3++);
                *((void *)a2 + 1) = v3;
                BOOL v42 = v41 != 0;
              }
              *((unsigned char *)this + 21) = v42;
              goto LABEL_92;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              goto LABEL_92;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 12), 1u);
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 24) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 20), 2u);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 8), 4u);
    if ((*(unsigned char *)(v3 + 24) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 24);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  char v5 = *(unsigned char *)(v3 + 21);

  return PB::Writer::write(a2, v5, 5u);
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::hash_value(CMMsl::RhythmicGnssOperatorStatus *this)
{
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 3);
    if ((*((unsigned char *)this + 24) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 20);
      if ((*((unsigned char *)this + 24) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 24) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 4);
    if (*((unsigned char *)this + 24)) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v4 = 0;
    if ((*((unsigned char *)this + 24) & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_11:
    uint64_t v5 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5;
  }
LABEL_9:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 2);
  if ((*((unsigned char *)this + 24) & 0x10) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v5 = *((unsigned __int8 *)this + 21);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5;
}

void CMMsl::RotationRate::~RotationRate(CMMsl::RotationRate *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::RotationRate::RotationRate(CMMsl::RotationRate *this, const CMMsl::RotationRate *a2)
{
  *(void *)this = off_1003A8A48;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((unsigned char *)a2 + 28) & 8) == 0) {
      return *(float *)&v4;
    }
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::RotationRate::operator=(uint64_t a1, const CMMsl::RotationRate *a2)
{
  if ((const CMMsl::RotationRate *)a1 != a2)
  {
    CMMsl::RotationRate::RotationRate((CMMsl::RotationRate *)&v9, a2);
    uint64_t v3 = v11;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v3;
    int v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v6;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RotationRate *a2, CMMsl::RotationRate *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::RotationRate::RotationRate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8A48;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A8A48;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::RotationRate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v9[0] = off_1003A8A48;
    int v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    void v9[2] = v6;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::RotationRate::formatText(CMMsl::RotationRate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "y", *((float *)this + 5));
  if ((*((unsigned char *)this + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 6));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RotationRate::readFrom(CMMsl::RotationRate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 28) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 28) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 28) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 28) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_38:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RotationRate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::RotationRate::hash_value(CMMsl::RotationRate *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 5);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 6);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7;
}

void CMMsl::RunningArmSwingSignals::~RunningArmSwingSignals(CMMsl::RunningArmSwingSignals *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::RunningArmSwingSignals::RunningArmSwingSignals(CMMsl::RunningArmSwingSignals *this, const CMMsl::RunningArmSwingSignals *a2)
{
  *(void *)this = off_1003A8A80;
  *((_DWORD *)this + 16) = 0;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    char v3 = 2;
    *((unsigned char *)this + 64) = 2;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 64) & 0x40) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 7);
    v3 |= 0x40u;
    *((unsigned char *)this + 64) = v3;
    *((double *)this + 7) = result;
    char v2 = *((unsigned char *)a2 + 64);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 64) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((unsigned char *)this + 64) = v3;
  *((double *)this + 3) = result;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((unsigned char *)this + 64) = v3;
  *((double *)this + 5) = result;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_16:
    double result = *((double *)a2 + 4);
    *((unsigned char *)this + 64) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
LABEL_15:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((unsigned char *)this + 64) = v3;
  *((double *)this + 6) = result;
  if ((*((unsigned char *)a2 + 64) & 8) != 0) {
    goto LABEL_16;
  }
  return result;
}

uint64_t CMMsl::RunningArmSwingSignals::operator=(uint64_t a1, const CMMsl::RunningArmSwingSignals *a2)
{
  if ((const CMMsl::RunningArmSwingSignals *)a1 != a2)
  {
    CMMsl::RunningArmSwingSignals::RunningArmSwingSignals((CMMsl::RunningArmSwingSignals *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningArmSwingSignals *a2, CMMsl::RunningArmSwingSignals *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::RunningArmSwingSignals::RunningArmSwingSignals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8A80;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8A80;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::RunningArmSwingSignals::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v11 = off_1003A8A80;
    int v3 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    uint64_t v4 = *(void *)(a2 + 56);
    int v16 = *(_DWORD *)(a1 + 64);
    uint64_t v15 = *(void *)(a1 + 56);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    long long v14 = *(_OWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 24);
    long long v8 = *(_OWORD *)(a2 + 24);
    long long v9 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 64) = v3;
    *(void *)(a1 + 56) = v4;
    *(_OWORD *)(a1 + 8) = v6;
    *(_OWORD *)(a1 + 40) = v9;
    *(_OWORD *)(a1 + 24) = v8;
    long long v12 = v5;
    long long v13 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::RunningArmSwingSignals::formatText(CMMsl::RunningArmSwingSignals *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 64);
  if (v5)
  {
    PB::TextFormatter::format(a2, "cadence", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "swingAccelX", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "swingAccelXStandardized", *((double *)this + 4));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "swingAccelY", *((double *)this + 5));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "swingAccelZ", *((double *)this + 6));
  if ((*((unsigned char *)this + 64) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningArmSwingSignals::readFrom(CMMsl::RunningArmSwingSignals *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 64) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 2u:
          *((unsigned char *)this + 64) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 3u:
          *((unsigned char *)this + 64) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 5u:
          *((unsigned char *)this + 64) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 6u:
          *((unsigned char *)this + 64) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 7u:
          *((unsigned char *)this + 64) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 8u:
          *((unsigned char *)this + 64) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
          {
LABEL_44:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_46:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningArmSwingSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 64);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 64) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 2u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 5u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(double *)(v3 + 48), 7u);
    if ((*(unsigned char *)(v3 + 64) & 8) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 6u);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_15:
  double v5 = *(double *)(v3 + 32);

  return PB::Writer::write(a2, v5, 8u);
}

uint64_t CMMsl::RunningArmSwingSignals::hash_value(CMMsl::RunningArmSwingSignals *this)
{
  if ((*((unsigned char *)this + 64) & 2) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 64) & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_24:
    double v2 = 0.0;
    if (*((unsigned char *)this + 64)) {
      goto LABEL_6;
    }
LABEL_25:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 64) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_26:
    double v4 = 0.0;
    if ((*((unsigned char *)this + 64) & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_27:
    double v5 = 0.0;
    if ((*((unsigned char *)this + 64) & 0x20) != 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
  double v1 = *((double *)this + 2);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 0x40) == 0) {
    goto LABEL_24;
  }
LABEL_3:
  double v2 = *((double *)this + 7);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 1) == 0) {
    goto LABEL_25;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 4) == 0) {
    goto LABEL_26;
  }
LABEL_9:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 0x10) == 0) {
    goto LABEL_27;
  }
LABEL_12:
  double v5 = *((double *)this + 5);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 0x20) != 0)
  {
LABEL_15:
    double v6 = *((double *)this + 6);
    if (v6 == 0.0) {
      double v6 = 0.0;
    }
    if ((*((unsigned char *)this + 64) & 8) != 0) {
      goto LABEL_18;
    }
LABEL_29:
    double v7 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7;
  }
LABEL_28:
  double v6 = 0.0;
  if ((*((unsigned char *)this + 64) & 8) == 0) {
    goto LABEL_29;
  }
LABEL_18:
  double v7 = *((double *)this + 4);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7;
}

void CMMsl::RunningCentripetalAccelSignals::~RunningCentripetalAccelSignals(CMMsl::RunningCentripetalAccelSignals *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals(CMMsl::RunningCentripetalAccelSignals *this, const CMMsl::RunningCentripetalAccelSignals *a2)
{
  *(void *)this = off_1003A8AB8;
  *((_DWORD *)this + 30) = 0;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x200) != 0)
  {
    double result = *((double *)a2 + 10);
    __int16 v3 = 512;
    *((_WORD *)this + 60) = 512;
    *((double *)this + 10) = result;
    __int16 v2 = *((_WORD *)a2 + 60);
    if ((v2 & 0x2000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 60) & 0x2000) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 14);
    v3 |= 0x2000u;
    *((_WORD *)this + 60) = v3;
    *((double *)this + 14) = result;
    __int16 v2 = *((_WORD *)a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    double result = *((double *)a2 + 11);
    v3 |= 0x400u;
    *((_WORD *)this + 60) = v3;
    *((double *)this + 11) = result;
    __int16 v2 = *((_WORD *)a2 + 60);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 12) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 13) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 5) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 6) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_30:
    double result = *((double *)a2 + 3);
    *((_WORD *)this + 60) = v3 | 4;
    *((double *)this + 3) = result;
    return result;
  }
LABEL_29:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 2) = result;
  if ((*((_WORD *)a2 + 60) & 4) != 0) {
    goto LABEL_30;
  }
  return result;
}

CMMsl *CMMsl::RunningCentripetalAccelSignals::operator=(CMMsl *a1, const CMMsl::RunningCentripetalAccelSignals *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals((CMMsl::RunningCentripetalAccelSignals *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningCentripetalAccelSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningCentripetalAccelSignals *a2, CMMsl::RunningCentripetalAccelSignals *a3)
{
  int v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  uint64_t v5 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v5;
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v6;
  uint64_t v7 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v7;
  uint64_t v8 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v8;
  uint64_t v9 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v13;
  uint64_t v14 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v14;
  uint64_t v15 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v15;
  uint64_t v16 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v16;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8AB8;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::RunningCentripetalAccelSignals::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningCentripetalAccelSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::formatText(CMMsl::RunningCentripetalAccelSignals *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 60);
  if (v5)
  {
    PB::TextFormatter::format(a2, "centerOfMassPrefiltAccelX", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 60);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "centerOfMassPrefiltAccelY", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "centerOfMassPrefiltAccelZ", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "centripetalAccelX", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "centripetalAccelY", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "centripetalAccelZ", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "centripetalRotationRateX", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "centripetalRotationRateY", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "centripetalRotationRateZ", *((double *)this + 9));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 10));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "swingVelocityX", *((double *)this + 11));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "swingVelocityY", *((double *)this + 12));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "swingVelocityZ", *((double *)this + 13));
  if ((*((_WORD *)this + 60) & 0x2000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 14));
LABEL_16:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningCentripetalAccelSignals::readFrom(CMMsl::RunningCentripetalAccelSignals *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 60) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 2u:
          *((_WORD *)this + 60) |= 0x2000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 3u:
          *((_WORD *)this + 60) |= 0x400u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 4u:
          *((_WORD *)this + 60) |= 0x800u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 5u:
          *((_WORD *)this + 60) |= 0x1000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 6u:
          *((_WORD *)this + 60) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 7u:
          *((_WORD *)this + 60) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 8u:
          *((_WORD *)this + 60) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 9u:
          *((_WORD *)this + 60) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 0xAu:
          *((_WORD *)this + 60) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 0xBu:
          *((_WORD *)this + 60) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 0xCu:
          *((_WORD *)this + 60) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 0xDu:
          *((_WORD *)this + 60) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_65;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_67;
        case 0xEu:
          *((_WORD *)this + 60) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
          {
LABEL_65:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_67:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 120);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 80), 1u);
    __int16 v4 = *(_WORD *)(v3 + 120);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(this + 120) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 2u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 3u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 4u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 5u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 6u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 7u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 8u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 9u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xDu);
    if ((*(_WORD *)(v3 + 120) & 4) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 2) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_29:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(a2, v5, 0xEu);
}

uint64_t CMMsl::RunningCentripetalAccelSignals::hash_value(CMMsl::RunningCentripetalAccelSignals *this)
{
  __int16 v1 = *((_WORD *)this + 60);
  if ((v1 & 0x200) == 0)
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 60) & 0x2000) != 0) {
      goto LABEL_3;
    }
LABEL_45:
    double v3 = 0.0;
    if ((*((_WORD *)this + 60) & 0x400) != 0) {
      goto LABEL_6;
    }
LABEL_46:
    double v4 = 0.0;
    if ((*((_WORD *)this + 60) & 0x800) != 0) {
      goto LABEL_9;
    }
LABEL_47:
    double v5 = 0.0;
    if ((*((_WORD *)this + 60) & 0x1000) != 0) {
      goto LABEL_12;
    }
LABEL_48:
    double v6 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_49:
    double v7 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_18;
    }
LABEL_50:
    double v8 = 0.0;
    if ((*((_WORD *)this + 60) & 0x100) != 0) {
      goto LABEL_21;
    }
LABEL_51:
    double v9 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_24;
    }
LABEL_52:
    double v10 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_27;
    }
LABEL_53:
    double v11 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_30;
    }
LABEL_54:
    double v12 = 0.0;
    if (v1) {
      goto LABEL_33;
    }
LABEL_55:
    double v13 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_36;
    }
    goto LABEL_56;
  }
  double v2 = *((double *)this + 10);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((_WORD *)this + 60) & 0x2000) == 0) {
    goto LABEL_45;
  }
LABEL_3:
  double v3 = *((double *)this + 14);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((_WORD *)this + 60) & 0x400) == 0) {
    goto LABEL_46;
  }
LABEL_6:
  double v4 = *((double *)this + 11);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((_WORD *)this + 60) & 0x800) == 0) {
    goto LABEL_47;
  }
LABEL_9:
  double v5 = *((double *)this + 12);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((_WORD *)this + 60) & 0x1000) == 0) {
    goto LABEL_48;
  }
LABEL_12:
  double v6 = *((double *)this + 13);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_49;
  }
LABEL_15:
  double v7 = *((double *)this + 7);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_50;
  }
LABEL_18:
  double v8 = *((double *)this + 8);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 60) & 0x100) == 0) {
    goto LABEL_51;
  }
LABEL_21:
  double v9 = *((double *)this + 9);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_52;
  }
LABEL_24:
  double v10 = *((double *)this + 4);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_53;
  }
LABEL_27:
  double v11 = *((double *)this + 5);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_54;
  }
LABEL_30:
  double v12 = *((double *)this + 6);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_55;
  }
LABEL_33:
  double v13 = *((double *)this + 1);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 2) != 0)
  {
LABEL_36:
    double v14 = *((double *)this + 2);
    if (v14 == 0.0) {
      double v14 = 0.0;
    }
    if ((v1 & 4) != 0) {
      goto LABEL_39;
    }
LABEL_57:
    double v15 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15;
  }
LABEL_56:
  double v14 = 0.0;
  if ((v1 & 4) == 0) {
    goto LABEL_57;
  }
LABEL_39:
  double v15 = *((double *)this + 3);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15;
}

void CMMsl::RunningFormMetrics::~RunningFormMetrics(CMMsl::RunningFormMetrics *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::RunningFormMetrics::RunningFormMetrics(CMMsl::RunningFormMetrics *this, const CMMsl::RunningFormMetrics *a2)
{
  *(void *)this = off_1003A8AF0;
  *((void *)this + 28) = 0;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x40) != 0)
  {
    double result = *((double *)a2 + 7);
    uint64_t v3 = 64;
    *((void *)this + 28) = 64;
    *((double *)this + 7) = result;
    uint64_t v2 = *((void *)a2 + 28);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 8);
    v3 |= 0x80uLL;
    *((void *)this + 28) = v3;
    *((double *)this + 8) = result;
    uint64_t v2 = *((void *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x200000000) != 0)
  {
    char v5 = *((unsigned char *)a2 + 220);
    v3 |= 0x200000000uLL;
    *((void *)this + 28) = v3;
    *((unsigned char *)this + 220) = v5;
    uint64_t v2 = *((void *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_42;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 2);
  v3 |= 2uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 2) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  char v6 = *((unsigned char *)a2 + 217);
  v3 |= 0x40000000uLL;
  *((void *)this + 28) = v3;
  *((unsigned char *)this + 217) = v6;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x80000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = *((double *)a2 + 20);
  v3 |= 0x80000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 20) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v7 = *((unsigned char *)a2 + 221);
  v3 |= 0x400000000uLL;
  *((void *)this + 28) = v3;
  *((unsigned char *)this + 221) = v7;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  double result = *((double *)a2 + 1);
  v3 |= 1uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 1) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  char v8 = *((unsigned char *)a2 + 216);
  v3 |= 0x20000000uLL;
  *((void *)this + 28) = v3;
  *((unsigned char *)this + 216) = v8;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  char v9 = *((unsigned char *)a2 + 218);
  v3 |= 0x80000000uLL;
  *((void *)this + 28) = v3;
  *((unsigned char *)this + 218) = v9;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  double result = *((double *)a2 + 16);
  v3 |= 0x8000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 16) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  double result = *((double *)a2 + 19);
  v3 |= 0x40000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 19) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  double result = *((double *)a2 + 15);
  v3 |= 0x4000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 15) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v10 = *((_DWORD *)a2 + 52);
  v3 |= 0x8000000uLL;
  *((void *)this + 28) = v3;
  *((_DWORD *)this + 52) = v10;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v11 = *((_DWORD *)a2 + 51);
  v3 |= 0x4000000uLL;
  *((void *)this + 28) = v3;
  *((_DWORD *)this + 51) = v11;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v12 = *((_DWORD *)a2 + 53);
  v3 |= 0x10000000uLL;
  *((void *)this + 28) = v3;
  *((_DWORD *)this + 53) = v12;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x800000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v13 = *((_DWORD *)a2 + 48);
  v3 |= 0x800000uLL;
  *((void *)this + 28) = v3;
  *((_DWORD *)this + 48) = v13;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
LABEL_55:
  double result = *((double *)a2 + 13);
  v3 |= 0x1000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 13) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v14 = *((_DWORD *)a2 + 50);
  v3 |= 0x2000000uLL;
  *((void *)this + 28) = v3;
  *((_DWORD *)this + 50) = v14;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v15 = *((_DWORD *)a2 + 49);
  v3 |= 0x1000000uLL;
  *((void *)this + 28) = v3;
  *((_DWORD *)this + 49) = v15;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
LABEL_58:
  double result = *((double *)a2 + 4);
  v3 |= 8uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 4) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_59:
  double result = *((double *)a2 + 3);
  v3 |= 4uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 3) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x10) == 0)
  {
LABEL_27:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
LABEL_60:
  double result = *((double *)a2 + 5);
  v3 |= 0x10uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 5) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
LABEL_61:
  char v16 = *((unsigned char *)a2 + 219);
  v3 |= (unint64_t)&_mh_execute_header;
  *((void *)this + 28) = v3;
  *((unsigned char *)this + 219) = v16;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }
LABEL_62:
  double result = *((double *)a2 + 9);
  v3 |= 0x100uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 9) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_64;
  }
LABEL_63:
  double result = *((double *)a2 + 12);
  v3 |= 0x800uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 12) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x10000) == 0)
  {
LABEL_31:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_65;
  }
LABEL_64:
  double result = *((double *)a2 + 17);
  v3 |= 0x10000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 17) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x20000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20) == 0) {
      goto LABEL_33;
    }
    goto LABEL_66;
  }
LABEL_65:
  double result = *((double *)a2 + 18);
  v3 |= 0x20000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 18) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_33:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_67;
  }
LABEL_66:
  double result = *((double *)a2 + 6);
  v3 |= 0x20uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 6) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x400000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_68;
  }
LABEL_67:
  double result = *((double *)a2 + 23);
  v3 |= 0x400000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 23) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_69;
  }
LABEL_68:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 14) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x100000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0) {
      goto LABEL_37;
    }
    goto LABEL_70;
  }
LABEL_69:
  double result = *((double *)a2 + 21);
  v3 |= 0x100000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 21) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_71;
  }
LABEL_70:
  double result = *((double *)a2 + 10);
  v3 |= 0x200uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 10) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x400) == 0) {
      return result;
    }
LABEL_72:
    double result = *((double *)a2 + 11);
    *((void *)this + 28) = v3 | 0x400;
    *((double *)this + 11) = result;
    return result;
  }
LABEL_71:
  double result = *((double *)a2 + 22);
  v3 |= 0x200000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 22) = result;
  if ((*((void *)a2 + 28) & 0x400) != 0) {
    goto LABEL_72;
  }
  return result;
}

CMMsl *CMMsl::RunningFormMetrics::operator=(CMMsl *a1, const CMMsl::RunningFormMetrics *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningFormMetrics::RunningFormMetrics((CMMsl::RunningFormMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningFormMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningFormMetrics *a2, CMMsl::RunningFormMetrics *a3)
{
  uint64_t v3 = *((void *)this + 28);
  *((void *)this + 28) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v5;
  LOBYTE(v3) = *((unsigned char *)this + 220);
  *((unsigned char *)this + 220) = *((unsigned char *)a2 + 220);
  *((unsigned char *)a2 + 220) = v3;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LOBYTE(v3) = *((unsigned char *)this + 217);
  *((unsigned char *)this + 217) = *((unsigned char *)a2 + 217);
  *((unsigned char *)a2 + 217) = v3;
  uint64_t v7 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v7;
  LOBYTE(v3) = *((unsigned char *)this + 221);
  *((unsigned char *)this + 221) = *((unsigned char *)a2 + 221);
  *((unsigned char *)a2 + 221) = v3;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  LOBYTE(v3) = *((unsigned char *)this + 216);
  *((unsigned char *)this + 216) = *((unsigned char *)a2 + 216);
  *((unsigned char *)a2 + 216) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 218);
  *((unsigned char *)this + 218) = *((unsigned char *)a2 + 218);
  *((unsigned char *)a2 + 218) = v3;
  uint64_t v9 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v9;
  uint64_t v10 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v10;
  uint64_t v11 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v11;
  LODWORD(v3) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v3;
  LODWORD(v3) = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v3;
  LODWORD(v3) = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v3;
  LODWORD(v3) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v3;
  uint64_t v12 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v12;
  LODWORD(v3) = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v3;
  LODWORD(v3) = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v3;
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v13;
  uint64_t v14 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  LOBYTE(v3) = *((unsigned char *)this + 219);
  *((unsigned char *)this + 219) = *((unsigned char *)a2 + 219);
  *((unsigned char *)a2 + 219) = v3;
  uint64_t v16 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v16;
  uint64_t v17 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v17;
  uint64_t v18 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v18;
  uint64_t v19 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v19;
  uint64_t v20 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v20;
  uint64_t v21 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v21;
  uint64_t v22 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v22;
  uint64_t v23 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v23;
  uint64_t v24 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v24;
  uint64_t v25 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v25;
  double result = *((double *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((double *)a2 + 11) = result;
  return result;
}

double CMMsl::RunningFormMetrics::RunningFormMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8AF0;
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 220) = *(unsigned char *)(a2 + 220);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 221) = *(unsigned char *)(a2 + 221);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(unsigned char *)(a1 + 218) = *(unsigned char *)(a2 + 218);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 219) = *(unsigned char *)(a2 + 219);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  double result = *(double *)(a2 + 88);
  *(double *)(a1 + 88) = result;
  return result;
}

CMMsl *CMMsl::RunningFormMetrics::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningFormMetrics::RunningFormMetrics((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningFormMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningFormMetrics::formatText(CMMsl::RunningFormMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "emptyField0", *((double *)this + 1));
    uint64_t v5 = *((void *)this + 28);
    if ((v5 & 0x20000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_42;
    }
  }
  else if ((v5 & 0x20000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "emptyField1", *((unsigned char *)this + 216));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "emptyField2", *((_DWORD *)this + 48));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 2));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "groundContactTimeCadence", *((double *)this + 3));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "groundContactTimeGrade", *((double *)this + 4));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "groundContactTimeGradeSource", *((_DWORD *)this + 49));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "groundContactTimeGradeType", *((_DWORD *)this + 50));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "groundContactTimeIsValid", *((unsigned char *)this + 217));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "groundContactTimePace", *((double *)this + 5));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "groundContactTimeReportingStatus", *((_DWORD *)this + 51));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "groundContactTimeUnsmoothed", *((double *)this + 6));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "groundContactTimeWindowEndTime", *((double *)this + 7));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "isFlat", *((unsigned char *)this + 218));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "isFormBasedStrideLength", *((unsigned char *)this + 219));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_17:
    if ((v5 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "strideLength", *((double *)this + 8));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_18:
    if ((v5 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "strideLengthCadence", *((double *)this + 9));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_19:
    if ((v5 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "strideLengthGrade", *((double *)this + 10));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x400) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "strideLengthGradeType", *((double *)this + 11));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "strideLengthIsValid", *((unsigned char *)this + 220));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "strideLengthPace", *((double *)this + 12));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "strideLengthReportingStatus", *((_DWORD *)this + 52));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x1000) == 0)
  {
LABEL_24:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "strideLengthUncalibrated", *((double *)this + 13));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x2000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "strideLengthUnsmoothed", *((double *)this + 14));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x4000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "strideLengthWindowEndTime", *((double *)this + 15));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x8000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 16));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x10000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "verticalOscCadence", *((double *)this + 17));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "verticalOscPace", *((double *)this + 18));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x40000) == 0)
  {
LABEL_30:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "verticalOscWindowEndTime", *((double *)this + 19));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x80000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "verticalOscillation", *((double *)this + 20));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x100000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "verticalOscillationGrade", *((double *)this + 21));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x200000) == 0)
  {
LABEL_33:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "verticalOscillationGradeType", *((double *)this + 22));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "verticalOscillationIsValid", *((unsigned char *)this + 221));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "verticalOscillationReportingStatus", *((_DWORD *)this + 53));
  if ((*((void *)this + 28) & 0x400000) != 0) {
LABEL_36:
  }
    PB::TextFormatter::format(a2, "verticalOscillationUnsmoothed", *((double *)this + 23));
LABEL_37:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningFormMetrics::readFrom(CMMsl::RunningFormMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((void *)this + 28) |= 0x40uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 2u:
              *((void *)this + 28) |= 0x80uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 3u:
              *((void *)this + 28) |= 0x200000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 220) = v22;
              goto LABEL_203;
            case 4u:
              *((void *)this + 28) |= 2uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 5u:
              *((void *)this + 28) |= 0x40000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *((unsigned char *)this + 217) = v24;
              goto LABEL_203;
            case 6u:
              *((void *)this + 28) |= 0x80000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 7u:
              *((void *)this + 28) |= 0x400000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *((unsigned char *)this + 221) = v26;
              goto LABEL_203;
            case 8u:
              *((void *)this + 28) |= 1uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 9u:
              *((void *)this + 28) |= 0x20000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 216) = v28;
              goto LABEL_203;
            case 0xAu:
              *((void *)this + 28) |= 0x80000000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 218) = v30;
              goto LABEL_203;
            case 0xBu:
              *((void *)this + 28) |= 0x8000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0xCu:
              *((void *)this + 28) |= 0x40000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0xDu:
              *((void *)this + 28) |= 0x4000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0xEu:
              *((void *)this + 28) |= 0x8000000uLL;
              unint64_t v31 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v32 = *(void *)a2;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v35 = 0;
                if (v2 <= v31) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_212;
                  }
                  unint64_t v71 = v31++;
                  char v72 = *(unsigned char *)(v32 + v71);
                  *((void *)a2 + 1) = v31;
                  v35 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_211:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_212;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_211;
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              do
              {
                unint64_t v2 = v31 + 1;
                *((void *)a2 + 1) = v31 + 1;
                char v36 = *(unsigned char *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_212;
                }
                v33 += 7;
                unint64_t v31 = v2;
                BOOL v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_212:
              *((_DWORD *)this + 52) = v35;
              goto LABEL_203;
            case 0xFu:
              *((void *)this + 28) |= 0x4000000uLL;
              unint64_t v37 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v38 = *(void *)a2;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v41 = 0;
                if (v2 <= v37) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_217;
                  }
                  unint64_t v75 = v37++;
                  char v76 = *(unsigned char *)(v38 + v75);
                  *((void *)a2 + 1) = v37;
                  v41 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_216:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_217;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_216;
              }
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v2 = v37 + 1;
                *((void *)a2 + 1) = v37 + 1;
                char v42 = *(unsigned char *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_217;
                }
                v39 += 7;
                unint64_t v37 = v2;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_217:
              *((_DWORD *)this + 51) = v41;
              goto LABEL_203;
            case 0x10u:
              *((void *)this + 28) |= 0x10000000uLL;
              unint64_t v43 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v44 = *(void *)a2;
              if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v47 = 0;
                if (v2 <= v43) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_222;
                  }
                  unint64_t v79 = v43++;
                  char v80 = *(unsigned char *)(v44 + v79);
                  *((void *)a2 + 1) = v43;
                  v47 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_221:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_222;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v47) = 0;
                }
                goto LABEL_221;
              }
              char v45 = 0;
              unsigned int v46 = 0;
              uint64_t v47 = 0;
              do
              {
                unint64_t v2 = v43 + 1;
                *((void *)a2 + 1) = v43 + 1;
                char v48 = *(unsigned char *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0) {
                  goto LABEL_222;
                }
                v45 += 7;
                unint64_t v43 = v2;
                BOOL v14 = v46++ > 8;
              }
              while (!v14);
              LODWORD(v47) = 0;
LABEL_222:
              *((_DWORD *)this + 53) = v47;
              goto LABEL_203;
            case 0x11u:
              *((void *)this + 28) |= 0x800000uLL;
              unint64_t v49 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v50 = *(void *)a2;
              if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v53 = 0;
                if (v2 <= v49) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_227;
                  }
                  unint64_t v83 = v49++;
                  char v84 = *(unsigned char *)(v50 + v83);
                  *((void *)a2 + 1) = v49;
                  v53 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  BOOL v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_226:
                    unint64_t v2 = v83 + 1;
                    goto LABEL_227;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v53) = 0;
                }
                goto LABEL_226;
              }
              char v51 = 0;
              unsigned int v52 = 0;
              uint64_t v53 = 0;
              do
              {
                unint64_t v2 = v49 + 1;
                *((void *)a2 + 1) = v49 + 1;
                char v54 = *(unsigned char *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0) {
                  goto LABEL_227;
                }
                v51 += 7;
                unint64_t v49 = v2;
                BOOL v14 = v52++ > 8;
              }
              while (!v14);
              LODWORD(v53) = 0;
LABEL_227:
              *((_DWORD *)this + 48) = v53;
              goto LABEL_203;
            case 0x12u:
              *((void *)this + 28) |= 0x1000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x13u:
              *((void *)this + 28) |= 0x2000000uLL;
              unint64_t v55 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v56 = *(void *)a2;
              if (v55 > 0xFFFFFFFFFFFFFFF5 || v55 + 10 > v2)
              {
                char v85 = 0;
                unsigned int v86 = 0;
                uint64_t v59 = 0;
                if (v2 <= v55) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v55)
                  {
                    LODWORD(v59) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_232;
                  }
                  unint64_t v87 = v55++;
                  char v88 = *(unsigned char *)(v56 + v87);
                  *((void *)a2 + 1) = v55;
                  v59 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0) {
                    break;
                  }
                  v85 += 7;
                  BOOL v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v59) = 0;
LABEL_231:
                    unint64_t v2 = v87 + 1;
                    goto LABEL_232;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v59) = 0;
                }
                goto LABEL_231;
              }
              char v57 = 0;
              unsigned int v58 = 0;
              uint64_t v59 = 0;
              do
              {
                unint64_t v2 = v55 + 1;
                *((void *)a2 + 1) = v55 + 1;
                char v60 = *(unsigned char *)(v56 + v55);
                v59 |= (unint64_t)(v60 & 0x7F) << v57;
                if ((v60 & 0x80) == 0) {
                  goto LABEL_232;
                }
                v57 += 7;
                unint64_t v55 = v2;
                BOOL v14 = v58++ > 8;
              }
              while (!v14);
              LODWORD(v59) = 0;
LABEL_232:
              *((_DWORD *)this + 50) = v59;
              goto LABEL_203;
            case 0x14u:
              *((void *)this + 28) |= 0x1000000uLL;
              unint64_t v61 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v62 = *(void *)a2;
              if (v61 > 0xFFFFFFFFFFFFFFF5 || v61 + 10 > v2)
              {
                char v89 = 0;
                unsigned int v90 = 0;
                uint64_t v65 = 0;
                if (v2 <= v61) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v61)
                  {
                    LODWORD(v65) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_237;
                  }
                  unint64_t v91 = v61++;
                  char v92 = *(unsigned char *)(v62 + v91);
                  *((void *)a2 + 1) = v61;
                  v65 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0) {
                    break;
                  }
                  v89 += 7;
                  BOOL v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v65) = 0;
LABEL_236:
                    unint64_t v2 = v91 + 1;
                    goto LABEL_237;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v65) = 0;
                }
                goto LABEL_236;
              }
              char v63 = 0;
              unsigned int v64 = 0;
              uint64_t v65 = 0;
              do
              {
                unint64_t v2 = v61 + 1;
                *((void *)a2 + 1) = v61 + 1;
                char v66 = *(unsigned char *)(v62 + v61);
                v65 |= (unint64_t)(v66 & 0x7F) << v63;
                if ((v66 & 0x80) == 0) {
                  goto LABEL_237;
                }
                v63 += 7;
                unint64_t v61 = v2;
                BOOL v14 = v64++ > 8;
              }
              while (!v14);
              LODWORD(v65) = 0;
LABEL_237:
              *((_DWORD *)this + 49) = v65;
LABEL_203:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x15u:
              *((void *)this + 28) |= 8uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x16u:
              *((void *)this + 28) |= 4uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x17u:
              *((void *)this + 28) |= 0x10uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x18u:
              *((void *)this + 28) |= (unint64_t)&_mh_execute_header;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v68 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v67 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v68 = v67 != 0;
              }
              *((unsigned char *)this + 219) = v68;
              goto LABEL_203;
            case 0x19u:
              *((void *)this + 28) |= 0x100uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x1Au:
              *((void *)this + 28) |= 0x800uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x1Bu:
              *((void *)this + 28) |= 0x10000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x1Cu:
              *((void *)this + 28) |= 0x20000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x1Du:
              *((void *)this + 28) |= 0x20uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x1Eu:
              *((void *)this + 28) |= 0x400000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 23) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x1Fu:
              *((void *)this + 28) |= 0x2000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x20u:
              *((void *)this + 28) |= 0x100000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x21u:
              *((void *)this + 28) |= 0x200uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x22u:
              *((void *)this + 28) |= 0x200000uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_146;
              }
              *((void *)this + 22) = *(void *)(*(void *)a2 + v2);
              goto LABEL_202;
            case 0x23u:
              *((void *)this + 28) |= 0x400uLL;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
LABEL_202:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_146:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_203;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_203;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningFormMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 224);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    uint64_t v4 = *(void *)(v3 + 224);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 2u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 220), 3u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 217), 5u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 6u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 221), 7u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 8u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 216), 9u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 218), 0xAu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0xBu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 0xCu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0xDu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 208), 0xEu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 204), 0xFu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 212), 0x10u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 192), 0x11u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0x12u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 200), 0x13u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 196), 0x14u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0x15u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x16u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0x17u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 219), 0x18u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x19u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x400000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(double *)(v3 + 184), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 0x20u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_35;
    }
LABEL_70:
    this = PB::Writer::write(a2, *(double *)(v3 + 176), 0x22u);
    if ((*(void *)(v3 + 224) & 0x400) == 0) {
      return this;
    }
    goto LABEL_71;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0x21u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200000) != 0) {
    goto LABEL_70;
  }
LABEL_35:
  if ((v4 & 0x400) == 0) {
    return this;
  }
LABEL_71:
  double v5 = *(double *)(v3 + 88);

  return PB::Writer::write(a2, v5, 0x23u);
}

uint64_t CMMsl::RunningFormMetrics::hash_value(CMMsl::RunningFormMetrics *this)
{
  uint64_t v1 = *((void *)this + 28);
  if ((v1 & 0x40) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_95:
    double v41 = 0.0;
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_96;
  }
  if (*((double *)this + 7) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 7);
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_95;
  }
LABEL_3:
  double v3 = *((double *)this + 8);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v41 = v3;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_6:
    uint64_t v40 = *((unsigned __int8 *)this + 220);
    if ((v1 & 2) != 0) {
      goto LABEL_7;
    }
LABEL_97:
    double v39 = 0.0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_10;
    }
    goto LABEL_98;
  }
LABEL_96:
  uint64_t v40 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_97;
  }
LABEL_7:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  double v39 = v4;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_10:
    uint64_t v38 = *((unsigned __int8 *)this + 217);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_11;
    }
LABEL_99:
    double v37 = 0.0;
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_100;
  }
LABEL_98:
  uint64_t v38 = 0;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_99;
  }
LABEL_11:
  double v5 = *((double *)this + 20);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  double v37 = v5;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_14:
    uint64_t v36 = *((unsigned __int8 *)this + 221);
    if (v1) {
      goto LABEL_15;
    }
LABEL_101:
    double v35 = 0.0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_102;
  }
LABEL_100:
  uint64_t v36 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_101;
  }
LABEL_15:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  double v35 = v6;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_18:
    uint64_t v34 = *((unsigned __int8 *)this + 216);
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_19;
    }
    goto LABEL_103;
  }
LABEL_102:
  uint64_t v34 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_19:
    uint64_t v7 = *((unsigned __int8 *)this + 218);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_20;
    }
LABEL_104:
    uint64_t v8 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_24;
    }
LABEL_105:
    uint64_t v9 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_28;
    }
LABEL_106:
    uint64_t v10 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_107;
  }
LABEL_103:
  uint64_t v7 = 0;
  if ((v1 & 0x8000) == 0) {
    goto LABEL_104;
  }
LABEL_20:
  if (*((double *)this + 16) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 16);
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_105;
  }
LABEL_24:
  if (*((double *)this + 19) == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)this + 19);
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_106;
  }
LABEL_28:
  if (*((double *)this + 15) == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *((void *)this + 15);
  }
  if ((v1 & 0x8000000) != 0)
  {
LABEL_32:
    uint64_t v11 = *((int *)this + 52);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_108;
  }
LABEL_107:
  uint64_t v11 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_33:
    uint64_t v12 = *((int *)this + 51);
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_34;
    }
    goto LABEL_109;
  }
LABEL_108:
  uint64_t v12 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_34:
    uint64_t v13 = *((int *)this + 53);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_110;
  }
LABEL_109:
  uint64_t v13 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_35:
    uint64_t v14 = *((int *)this + 48);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_36;
    }
LABEL_111:
    uint64_t v15 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_112;
  }
LABEL_110:
  uint64_t v14 = 0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_111;
  }
LABEL_36:
  if (*((double *)this + 13) == 0.0) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *((void *)this + 13);
  }
  if ((v1 & 0x2000000) != 0)
  {
LABEL_40:
    uint64_t v16 = *((int *)this + 50);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_113;
  }
LABEL_112:
  uint64_t v16 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_41:
    uint64_t v17 = *((int *)this + 49);
    if ((v1 & 8) != 0) {
      goto LABEL_42;
    }
LABEL_114:
    uint64_t v18 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_46;
    }
LABEL_115:
    uint64_t v19 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_50;
    }
LABEL_116:
    uint64_t v20 = 0;
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_54;
    }
    goto LABEL_117;
  }
LABEL_113:
  uint64_t v17 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_114;
  }
LABEL_42:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *((void *)this + 4);
  }
  if ((v1 & 4) == 0) {
    goto LABEL_115;
  }
LABEL_46:
  if (*((double *)this + 3) == 0.0) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *((void *)this + 3);
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_116;
  }
LABEL_50:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *((void *)this + 5);
  }
  if ((v1 & 0x100000000) != 0)
  {
LABEL_54:
    uint64_t v21 = *((unsigned __int8 *)this + 219);
    if ((v1 & 0x100) != 0) {
      goto LABEL_55;
    }
LABEL_118:
    uint64_t v22 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_59;
    }
LABEL_119:
    uint64_t v23 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_63;
    }
LABEL_120:
    uint64_t v24 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_67;
    }
LABEL_121:
    double v25 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_70;
    }
LABEL_122:
    double v26 = 0.0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_73;
    }
LABEL_123:
    double v27 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_76;
    }
LABEL_124:
    double v28 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_79;
    }
LABEL_125:
    double v29 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_82;
    }
LABEL_126:
    double v30 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_85;
    }
    goto LABEL_127;
  }
LABEL_117:
  uint64_t v21 = 0;
  if ((v1 & 0x100) == 0) {
    goto LABEL_118;
  }
LABEL_55:
  if (*((double *)this + 9) == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *((void *)this + 9);
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_119;
  }
LABEL_59:
  if (*((double *)this + 12) == 0.0) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *((void *)this + 12);
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_120;
  }
LABEL_63:
  if (*((double *)this + 17) == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *((void *)this + 17);
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_121;
  }
LABEL_67:
  double v25 = *((double *)this + 18);
  if (v25 == 0.0) {
    double v25 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_122;
  }
LABEL_70:
  double v26 = *((double *)this + 6);
  if (v26 == 0.0) {
    double v26 = 0.0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_123;
  }
LABEL_73:
  double v27 = *((double *)this + 23);
  if (v27 == 0.0) {
    double v27 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_124;
  }
LABEL_76:
  double v28 = *((double *)this + 14);
  if (v28 == 0.0) {
    double v28 = 0.0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_125;
  }
LABEL_79:
  double v29 = *((double *)this + 21);
  if (v29 == 0.0) {
    double v29 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_126;
  }
LABEL_82:
  double v30 = *((double *)this + 10);
  if (v30 == 0.0) {
    double v30 = 0.0;
  }
  if ((v1 & 0x200000) != 0)
  {
LABEL_85:
    double v31 = *((double *)this + 22);
    if (v31 == 0.0) {
      double v31 = 0.0;
    }
    if ((v1 & 0x400) != 0) {
      goto LABEL_88;
    }
LABEL_128:
    double v32 = 0.0;
    return *(void *)&v41 ^ v2 ^ v40 ^ *(void *)&v39 ^ v38 ^ *(void *)&v37 ^ v36 ^ *(void *)&v35 ^ v34 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ *(void *)&v27 ^ *(void *)&v28 ^ *(void *)&v29 ^ *(void *)&v30 ^ *(void *)&v31 ^ *(void *)&v32;
  }
LABEL_127:
  double v31 = 0.0;
  if ((v1 & 0x400) == 0) {
    goto LABEL_128;
  }
LABEL_88:
  double v32 = *((double *)this + 11);
  if (v32 == 0.0) {
    double v32 = 0.0;
  }
  return *(void *)&v41 ^ v2 ^ v40 ^ *(void *)&v39 ^ v38 ^ *(void *)&v37 ^ v36 ^ *(void *)&v35 ^ v34 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ *(void *)&v27 ^ *(void *)&v28 ^ *(void *)&v29 ^ *(void *)&v30 ^ *(void *)&v31 ^ *(void *)&v32;
}

void CMMsl::RunningPower::~RunningPower(CMMsl::RunningPower *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::RunningPower::RunningPower(uint64_t this, const CMMsl::RunningPower *a2)
{
  *(void *)this = off_1003A8B28;
  *(_DWORD *)(this + 128) = 0;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40) != 0)
  {
    uint64_t v4 = *((void *)a2 + 7);
    int v3 = 64;
    *(_DWORD *)(this + 128) = 64;
    *(void *)(this + 56) = v4;
    int v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 6);
    v3 |= 0x20u;
    *(_DWORD *)(this + 128) = v3;
    *(void *)(this + 48) = v5;
    int v2 = *((_DWORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    uint64_t v6 = *((void *)a2 + 9);
    v3 |= 0x100u;
    *(_DWORD *)(this + 128) = v3;
    *(void *)(this + 72) = v6;
    int v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x100000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x100000) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 124);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 124) = v7;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v8 = *((void *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 96) = v8;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v9 = *((void *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 88) = v9;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v10 = *((_DWORD *)a2 + 27);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 108) = v10;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v11 = *((_DWORD *)a2 + 26);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 104) = v11;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v12 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 16) = v12;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v13 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 32) = v13;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v14 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 24) = v14;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  char v15 = *((unsigned char *)a2 + 123);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 123) = v15;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v16 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 40) = v16;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v17 = *((void *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 80) = v17;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v18 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 64) = v18;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v19 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 8) = v19;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }
LABEL_41:
  char v20 = *((unsigned char *)a2 + 125);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 125) = v20;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }
LABEL_42:
  char v21 = *((unsigned char *)a2 + 121);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 121) = v21;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v22 = *((_DWORD *)a2 + 29);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 116) = v22;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v23 = *((unsigned char *)a2 + 120);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 120) = v23;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0) {
      return this;
    }
LABEL_46:
    int v25 = *((_DWORD *)a2 + 28);
    *(_DWORD *)(this + 128) = v3 | 0x4000;
    *(_DWORD *)(this + 112) = v25;
    return this;
  }
LABEL_45:
  char v24 = *((unsigned char *)a2 + 122);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 122) = v24;
  if ((*((_DWORD *)a2 + 32) & 0x4000) != 0) {
    goto LABEL_46;
  }
  return this;
}

CMMsl *CMMsl::RunningPower::operator=(CMMsl *a1, const CMMsl::RunningPower *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningPower::RunningPower((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningPower *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningPower *a2, CMMsl::RunningPower *a3)
{
  int v3 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  uint64_t v6 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v6;
  LOBYTE(v3) = *((unsigned char *)this + 124);
  *((unsigned char *)this + 124) = *((unsigned char *)a2 + 124);
  *((unsigned char *)a2 + 124) = v3;
  uint64_t v7 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v7;
  uint64_t v8 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v8;
  int v9 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v9;
  int v10 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v10;
  uint64_t v11 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  LOBYTE(v10) = *((unsigned char *)this + 123);
  *((unsigned char *)this + 123) = *((unsigned char *)a2 + 123);
  *((unsigned char *)a2 + 123) = v10;
  uint64_t v14 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v14;
  uint64_t v15 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v15;
  uint64_t v16 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v16;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v10) = *((unsigned char *)this + 125);
  *((unsigned char *)this + 125) = *((unsigned char *)a2 + 125);
  *((unsigned char *)a2 + 125) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 121);
  *((unsigned char *)this + 121) = *((unsigned char *)a2 + 121);
  *((unsigned char *)a2 + 121) = v10;
  int v18 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v18;
  LOBYTE(v18) = *((unsigned char *)this + 120);
  *((unsigned char *)this + 120) = *((unsigned char *)a2 + 120);
  *((unsigned char *)a2 + 120) = v18;
  LOBYTE(v18) = *((unsigned char *)this + 122);
  *((unsigned char *)this + 122) = *((unsigned char *)a2 + 122);
  *((unsigned char *)a2 + 122) = v18;
  int v19 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v19;
  return result;
}

double CMMsl::RunningPower::RunningPower(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8B28;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 123) = *(unsigned char *)(a2 + 123);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 125) = *(unsigned char *)(a2 + 125);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return result;
}

CMMsl *CMMsl::RunningPower::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningPower::RunningPower((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningPower *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningPower::formatText(CMMsl::RunningPower *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(a2, "activityType", *((_DWORD *)this + 26));
    int v5 = *((_DWORD *)this + 32);
    if ((v5 & 0x2000) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "activityTypeWithoutOverride", *((_DWORD *)this + 27));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "currentCadence", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "currentPace", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "elevationSource", *((_DWORD *)this + 28));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "eta", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "grade", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "gradeOnsetCounter", *((_DWORD *)this + 29));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "horizSpeed", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isArmConstrainedStateValid", *((unsigned char *)this + 120));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "isGradeOnsetEscalated", *((unsigned char *)this + 121));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "isRunning", *((unsigned char *)this + 122));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "isValid", *((unsigned char *)this + 123));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "isWeightSet", *((unsigned char *)this + 124));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "isWorkoutSelected", *((unsigned char *)this + 125));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "powerWattage", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_19:
    if ((v5 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "userHeight", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_20:
    if ((v5 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "userWeight", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_21:
    if ((v5 & 0x400) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "verticalSpeed", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_22:
    if ((v5 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "wLoad", *((double *)this + 11));
  if ((*((_DWORD *)this + 32) & 0x800) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(a2, "workrateMETs", *((double *)this + 12));
LABEL_24:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningPower::readFrom(CMMsl::RunningPower *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 32) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 2u:
              *((_DWORD *)this + 32) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 3u:
              *((_DWORD *)this + 32) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 4u:
              *((_DWORD *)this + 32) |= 0x100000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 124) = v22;
              goto LABEL_162;
            case 5u:
              *((_DWORD *)this + 32) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 6u:
              *((_DWORD *)this + 32) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 7u:
              *((_DWORD *)this + 32) |= 0x2000u;
              unint64_t v23 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v24 = *(void *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_146;
                  }
                  unint64_t v59 = v23++;
                  char v60 = *(unsigned char *)(v24 + v59);
                  *((void *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_145:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_145;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)a2 + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_146;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_146:
              *((_DWORD *)this + 27) = v27;
              goto LABEL_162;
            case 8u:
              *((_DWORD *)this + 32) |= 0x1000u;
              unint64_t v29 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v30 = *(void *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_151;
                  }
                  unint64_t v63 = v29++;
                  char v64 = *(unsigned char *)(v30 + v63);
                  *((void *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_150:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_150;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_151;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_151:
              *((_DWORD *)this + 26) = v33;
              goto LABEL_162;
            case 9u:
              *((_DWORD *)this + 32) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 0xAu:
              *((_DWORD *)this + 32) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 0xBu:
              *((_DWORD *)this + 32) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 0xCu:
              *((_DWORD *)this + 32) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *((unsigned char *)this + 123) = v36;
              goto LABEL_162;
            case 0xDu:
              *((_DWORD *)this + 32) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 0xEu:
              *((_DWORD *)this + 32) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 0xFu:
              *((_DWORD *)this + 32) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 0x10u:
              *((_DWORD *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_141:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_77:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_162;
            case 0x11u:
              *((_DWORD *)this + 32) |= 0x200000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v38 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v37 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v38 = v37 != 0;
              }
              *((unsigned char *)this + 125) = v38;
              goto LABEL_162;
            case 0x12u:
              *((_DWORD *)this + 32) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *((unsigned char *)this + 121) = v40;
              goto LABEL_162;
            case 0x13u:
              *((_DWORD *)this + 32) |= 0x8000u;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_156;
                  }
                  unint64_t v67 = v41++;
                  char v68 = *(unsigned char *)(v42 + v67);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_155:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_155;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_156;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_156:
              *((_DWORD *)this + 29) = v45;
              goto LABEL_162;
            case 0x14u:
              *((_DWORD *)this + 32) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *((unsigned char *)this + 120) = v48;
              goto LABEL_162;
            case 0x15u:
              *((_DWORD *)this + 32) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v50 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v49 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v50 = v49 != 0;
              }
              *((unsigned char *)this + 122) = v50;
              goto LABEL_162;
            case 0x16u:
              *((_DWORD *)this + 32) |= 0x4000u;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_161;
                  }
                  unint64_t v71 = v51++;
                  char v72 = *(unsigned char *)(v52 + v71);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_160:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_160;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_161:
              *((_DWORD *)this + 28) = v55;
LABEL_162:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_162;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningPower::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 128);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 2u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 3u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 124), 4u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 5u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 6u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 7u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 8u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 9u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xAu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xBu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 123), 0xCu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xDu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0xEu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 0xFu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0x10u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 125), 0x11u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 121), 0x12u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x13u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_22;
    }
LABEL_44:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 122), 0x15u);
    if ((*(_DWORD *)(v3 + 128) & 0x4000) == 0) {
      return this;
    }
    goto LABEL_45;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 120), 0x14u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) != 0) {
    goto LABEL_44;
  }
LABEL_22:
  if ((v4 & 0x4000) == 0) {
    return this;
  }
LABEL_45:
  int v5 = *(_DWORD *)(v3 + 112);

  return PB::Writer::writeVarInt(a2, v5, 0x16u);
}

uint64_t CMMsl::RunningPower::hash_value(CMMsl::RunningPower *this)
{
  int v1 = *((_DWORD *)this + 32);
  if ((v1 & 0x40) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_49:
    double v3 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_6;
    }
LABEL_50:
    double v4 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_51;
  }
  double v2 = *((double *)this + 7);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_49;
  }
LABEL_3:
  double v3 = *((double *)this + 6);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_50;
  }
LABEL_6:
  double v4 = *((double *)this + 9);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x100000) != 0)
  {
LABEL_9:
    uint64_t v5 = *((unsigned __int8 *)this + 124);
    if ((v1 & 0x800) != 0) {
      goto LABEL_10;
    }
LABEL_52:
    double v6 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_13;
    }
LABEL_53:
    double v7 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }
LABEL_51:
  uint64_t v5 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_52;
  }
LABEL_10:
  double v6 = *((double *)this + 12);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_53;
  }
LABEL_13:
  double v7 = *((double *)this + 11);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x2000) != 0)
  {
LABEL_16:
    uint64_t v8 = *((int *)this + 27);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v8 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_17:
    uint64_t v9 = *((int *)this + 26);
    if ((v1 & 2) != 0) {
      goto LABEL_18;
    }
LABEL_56:
    double v10 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_21;
    }
LABEL_57:
    double v11 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_24;
    }
LABEL_58:
    double v12 = 0.0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_55:
  uint64_t v9 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_56;
  }
LABEL_18:
  double v10 = *((double *)this + 2);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_57;
  }
LABEL_21:
  double v11 = *((double *)this + 4);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_58;
  }
LABEL_24:
  double v12 = *((double *)this + 3);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x80000) != 0)
  {
LABEL_27:
    uint64_t v13 = *((unsigned __int8 *)this + 123);
    if ((v1 & 0x10) != 0) {
      goto LABEL_28;
    }
LABEL_60:
    double v14 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_31;
    }
LABEL_61:
    double v15 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_34;
    }
LABEL_62:
    double v16 = 0.0;
    if (v1) {
      goto LABEL_37;
    }
LABEL_63:
    double v17 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_64;
  }
LABEL_59:
  uint64_t v13 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_60;
  }
LABEL_28:
  double v14 = *((double *)this + 5);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_61;
  }
LABEL_31:
  double v15 = *((double *)this + 10);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_62;
  }
LABEL_34:
  double v16 = *((double *)this + 8);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_63;
  }
LABEL_37:
  double v17 = *((double *)this + 1);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 0x200000) != 0)
  {
LABEL_40:
    uint64_t v18 = *((unsigned __int8 *)this + 125);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v18 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_41:
    uint64_t v19 = *((unsigned __int8 *)this + 121);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v19 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_42:
    uint64_t v20 = *((int *)this + 29);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v20 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_43:
    uint64_t v21 = *((unsigned __int8 *)this + 120);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_44;
    }
LABEL_68:
    uint64_t v22 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_45;
    }
LABEL_69:
    uint64_t v23 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23;
  }
LABEL_67:
  uint64_t v21 = 0;
  if ((v1 & 0x40000) == 0) {
    goto LABEL_68;
  }
LABEL_44:
  uint64_t v22 = *((unsigned __int8 *)this + 122);
  if ((v1 & 0x4000) == 0) {
    goto LABEL_69;
  }
LABEL_45:
  uint64_t v23 = *((int *)this + 28);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23;
}

void CMMsl::RunningRotationAxis::~RunningRotationAxis(CMMsl::RunningRotationAxis *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::RunningRotationAxis::RunningRotationAxis(CMMsl::RunningRotationAxis *this, const CMMsl::RunningRotationAxis *a2)
{
  *(void *)this = off_1003A8B60;
  *((_DWORD *)this + 12) = 0;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    char v3 = 8;
    *((unsigned char *)this + 48) = 8;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 48) & 0x10) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((unsigned char *)this + 48) = v3;
    *((double *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 48);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 48) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      double result = *((double *)a2 + 3);
      *((unsigned char *)this + 48) = v3 | 4;
      *((double *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((unsigned char *)this + 48) = v3;
  *((double *)this + 2) = result;
  if ((*((unsigned char *)a2 + 48) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::RunningRotationAxis::operator=(uint64_t a1, const CMMsl::RunningRotationAxis *a2)
{
  if ((const CMMsl::RunningRotationAxis *)a1 != a2)
  {
    CMMsl::RunningRotationAxis::RunningRotationAxis((CMMsl::RunningRotationAxis *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v11;
    uint64_t v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v9 = v5;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningRotationAxis *a2, CMMsl::RunningRotationAxis *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::RunningRotationAxis::RunningRotationAxis(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8B60;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8B60;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::RunningRotationAxis::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v10 = off_1003A8B60;
    int v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    uint64_t v4 = *(void *)(a2 + 40);
    int v14 = *(_DWORD *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    long long v7 = *(_OWORD *)(a1 + 24);
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(void *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 8) = v6;
    *(_OWORD *)(a1 + 24) = v8;
    long long v11 = v5;
    long long v12 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::RunningRotationAxis::formatText(CMMsl::RunningRotationAxis *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "primaryAxisX", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "primaryAxisY", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "primaryAxisZ", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  if ((*((unsigned char *)this + 48) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningRotationAxis::readFrom(CMMsl::RunningRotationAxis *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 48) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_38;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_40;
        case 2u:
          *((unsigned char *)this + 48) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_38;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_40;
        case 3u:
          *((unsigned char *)this + 48) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_38;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_40;
        case 4u:
          *((unsigned char *)this + 48) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_38;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_40;
        case 5u:
          *((unsigned char *)this + 48) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_40:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_38:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningRotationAxis::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 48);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 48) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
    if ((*(unsigned char *)(v3 + 48) & 4) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(a2, v5, 5u);
}

uint64_t CMMsl::RunningRotationAxis::hash_value(CMMsl::RunningRotationAxis *this)
{
  if ((*((unsigned char *)this + 48) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 48) & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_18:
    double v2 = 0.0;
    if (*((unsigned char *)this + 48)) {
      goto LABEL_6;
    }
LABEL_19:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 48) & 2) != 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 0x10) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  double v2 = *((double *)this + 5);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_19;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
LABEL_9:
    double v4 = *((double *)this + 2);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    if ((*((unsigned char *)this + 48) & 4) != 0) {
      goto LABEL_12;
    }
LABEL_21:
    double v5 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5;
  }
LABEL_20:
  double v4 = 0.0;
  if ((*((unsigned char *)this + 48) & 4) == 0) {
    goto LABEL_21;
  }
LABEL_12:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5;
}

void CMMsl::RunningSpeedKFResult::~RunningSpeedKFResult(CMMsl::RunningSpeedKFResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::RunningSpeedKFResult::RunningSpeedKFResult(uint64_t this, const CMMsl::RunningSpeedKFResult *a2)
{
  *(void *)this = off_1003A8B98;
  *(_DWORD *)(this + 188) = 0;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x80000) != 0)
  {
    uint64_t v4 = *((void *)a2 + 20);
    int v3 = 0x80000;
    *(_DWORD *)(this + 188) = 0x80000;
    *(void *)(this + 160) = v4;
    int v2 = *((_DWORD *)a2 + 47);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 8);
    v3 |= 0x80u;
    *(_DWORD *)(this + 188) = v3;
    *(void *)(this + 64) = v5;
    int v2 = *((_DWORD *)a2 + 47);
  }
LABEL_6:
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v6 = *((void *)a2 + 19);
    v3 |= 0x40000u;
    *(_DWORD *)(this + 188) = v3;
    *(void *)(this + 152) = v6;
    int v2 = *((_DWORD *)a2 + 47);
    if ((v2 & 0x8000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_35;
    }
  }
  else if ((v2 & 0x8000000) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 184);
  v3 |= 0x8000000u;
  *(_DWORD *)(this + 188) = v3;
  *(unsigned char *)(this + 184) = v7;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v8 = *((void *)a2 + 18);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 144) = v8;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v9 = *((void *)a2 + 17);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 136) = v9;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  char v10 = *((unsigned char *)a2 + 182);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 188) = v3;
  *(unsigned char *)(this + 182) = v10;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  char v11 = *((unsigned char *)a2 + 183);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 188) = v3;
  *(unsigned char *)(this + 183) = v11;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v12 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 56) = v12;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v13 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 32) = v13;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v14 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 48) = v14;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v15 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 40) = v15;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v16 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 8) = v16;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 2) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v17 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 16) = v17;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v18 = *((void *)a2 + 16);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 128) = v18;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v19 = *((void *)a2 + 15);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 120) = v19;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v20 = *((void *)a2 + 9);
  v3 |= 0x100u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 72) = v20;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v21 = *((void *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 80) = v21;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 4) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v22 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 24) = v22;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v23 = *((_DWORD *)a2 + 44);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 176) = v23;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v24 = *((_DWORD *)a2 + 42);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 168) = v24;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v25 = *((_DWORD *)a2 + 43);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 172) = v25;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_54;
  }
LABEL_53:
  char v26 = *((unsigned char *)a2 + 180);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 188) = v3;
  *(unsigned char *)(this + 180) = v26;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v27 = *((void *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 104) = v27;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x2000) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0) {
      goto LABEL_30;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v28 = *((void *)a2 + 14);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 112) = v28;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v29 = *((void *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 88) = v29;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0) {
      return this;
    }
LABEL_58:
    char v31 = *((unsigned char *)a2 + 181);
    *(_DWORD *)(this + 188) = v3 | 0x1000000;
    *(unsigned char *)(this + 181) = v31;
    return this;
  }
LABEL_57:
  uint64_t v30 = *((void *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 96) = v30;
  if ((*((_DWORD *)a2 + 47) & 0x1000000) != 0) {
    goto LABEL_58;
  }
  return this;
}

CMMsl *CMMsl::RunningSpeedKFResult::operator=(CMMsl *a1, const CMMsl::RunningSpeedKFResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningSpeedKFResult::RunningSpeedKFResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningSpeedKFResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningSpeedKFResult *a2, CMMsl::RunningSpeedKFResult *a3)
{
  int v3 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v3;
  uint64_t v4 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v4;
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v5;
  uint64_t v6 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v6;
  LOBYTE(v3) = *((unsigned char *)this + 184);
  *((unsigned char *)this + 184) = *((unsigned char *)a2 + 184);
  *((unsigned char *)a2 + 184) = v3;
  uint64_t v7 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v7;
  uint64_t v8 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v8;
  LOBYTE(v3) = *((unsigned char *)this + 182);
  *((unsigned char *)this + 182) = *((unsigned char *)a2 + 182);
  *((unsigned char *)a2 + 182) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 183);
  *((unsigned char *)this + 183) = *((unsigned char *)a2 + 183);
  *((unsigned char *)a2 + 183) = v3;
  uint64_t v9 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  uint64_t v13 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v13;
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v14;
  uint64_t v15 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v15;
  uint64_t v16 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v16;
  uint64_t v17 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v17;
  uint64_t v18 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v18;
  uint64_t v19 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v19;
  int v20 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v20;
  int v21 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v21;
  int v22 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v22;
  LOBYTE(v22) = *((unsigned char *)this + 180);
  *((unsigned char *)this + 180) = *((unsigned char *)a2 + 180);
  *((unsigned char *)a2 + 180) = v22;
  uint64_t v23 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v23;
  uint64_t v24 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v24;
  uint64_t v25 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v25;
  double result = *((double *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((double *)a2 + 12) = result;
  LOBYTE(v22) = *((unsigned char *)this + 181);
  *((unsigned char *)this + 181) = *((unsigned char *)a2 + 181);
  *((unsigned char *)a2 + 181) = v22;
  return result;
}

double CMMsl::RunningSpeedKFResult::RunningSpeedKFResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8B98;
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a2 + 188) = 0;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 182) = *(unsigned char *)(a2 + 182);
  *(unsigned char *)(a1 + 183) = *(unsigned char *)(a2 + 183);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  double result = *(double *)(a2 + 96);
  *(double *)(a1 + 96) = result;
  *(unsigned char *)(a1 + 181) = *(unsigned char *)(a2 + 181);
  return result;
}

CMMsl *CMMsl::RunningSpeedKFResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningSpeedKFResult::RunningSpeedKFResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningSpeedKFResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningSpeedKFResult::formatText(CMMsl::RunningSpeedKFResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 47);
  if (v5)
  {
    PB::TextFormatter::format(a2, "algDelay", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 47);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasFactor", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "deltaCalibratedPedometerDistance", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "deltaOdometerDistance", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "deltaOdometerTime", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "deltaPedometerTime", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "deltaRawPedometerDistance", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x100000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "gestureState", *((_DWORD *)this + 42));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x200000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "gestureType", *((_DWORD *)this + 43));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "interruptFlag", *((unsigned char *)this + 180));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "isTrackRunOdometer", *((unsigned char *)this + 181));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "isValidOdometerSpeed", *((unsigned char *)this + 182));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "isValidPedometerSpeed", *((unsigned char *)this + 183));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "isValidRunningSpeed", *((unsigned char *)this + 184));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "kalmanEpsOdometer", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x200) == 0)
  {
LABEL_18:
    if ((v5 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "kalmanEpsPedometer", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x400) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "kalmanGainOdometer", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "kalmanGainPedometer", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "kalmanMeasurementNoiseOdometer", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "kalmanMeasurementNoisePedometer", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "kalmanProcessNoise", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "kalmanStateCovariance", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "odometerQuality", *((_DWORD *)this + 44));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "odometerSpeed", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "pedometerSpeed", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x40000) == 0)
  {
LABEL_28:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "runningSpeed", *((double *)this + 19));
  if ((*((_DWORD *)this + 47) & 0x80000) != 0) {
LABEL_29:
  }
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 20));
LABEL_30:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningSpeedKFResult::readFrom(CMMsl::RunningSpeedKFResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 47) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 2u:
              *((_DWORD *)this + 47) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 3u:
              *((_DWORD *)this + 47) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 4u:
              *((_DWORD *)this + 47) |= 0x8000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 184) = v22;
              goto LABEL_148;
            case 5u:
              *((_DWORD *)this + 47) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 6u:
              *((_DWORD *)this + 47) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 7u:
              *((_DWORD *)this + 47) |= 0x2000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *((unsigned char *)this + 182) = v24;
              goto LABEL_148;
            case 8u:
              *((_DWORD *)this + 47) |= 0x4000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *((unsigned char *)this + 183) = v26;
              goto LABEL_148;
            case 9u:
              *((_DWORD *)this + 47) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0xAu:
              *((_DWORD *)this + 47) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0xBu:
              *((_DWORD *)this + 47) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0xCu:
              *((_DWORD *)this + 47) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0xDu:
              *((_DWORD *)this + 47) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0xEu:
              *((_DWORD *)this + 47) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0xFu:
              *((_DWORD *)this + 47) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0x10u:
              *((_DWORD *)this + 47) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0x11u:
              *((_DWORD *)this + 47) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0x12u:
              *((_DWORD *)this + 47) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0x13u:
              *((_DWORD *)this + 47) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0x14u:
              *((_DWORD *)this + 47) |= 0x400000u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_157;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_156:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_156;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_157;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_157:
              *((_DWORD *)this + 44) = v31;
              goto LABEL_148;
            case 0x15u:
              *((_DWORD *)this + 47) |= 0x100000u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_162;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_161:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_161;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_162;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_162:
              *((_DWORD *)this + 42) = v37;
              goto LABEL_148;
            case 0x16u:
              *((_DWORD *)this + 47) |= 0x200000u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_167;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_166:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_167;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_166;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_167;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_167:
              *((_DWORD *)this + 43) = v43;
LABEL_148:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x17u:
              *((_DWORD *)this + 47) |= 0x800000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *((unsigned char *)this + 180) = v46;
              goto LABEL_148;
            case 0x18u:
              *((_DWORD *)this + 47) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0x19u:
              *((_DWORD *)this + 47) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0x1Au:
              *((_DWORD *)this + 47) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
              goto LABEL_147;
            case 0x1Bu:
              *((_DWORD *)this + 47) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
LABEL_147:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_112:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_148;
            case 0x1Cu:
              *((_DWORD *)this + 47) |= 0x1000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *((unsigned char *)this + 181) = v48;
              goto LABEL_148;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_148;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningSpeedKFResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 188);
  if ((v4 & 0x80000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 160), 1u);
    int v4 = *(_DWORD *)(v3 + 188);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 2u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 3u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 184), 4u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 5u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 6u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 182), 7u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 183), 8u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 9u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xAu);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xBu);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xCu);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xDu);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xEu);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0xFu);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0x10u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x11u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0x12u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x13u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 176), 0x14u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 168), 0x15u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 172), 0x16u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 180), 0x17u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0x18u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x19u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0) {
      goto LABEL_28;
    }
LABEL_56:
    this = PB::Writer::write(a2, *(double *)(v3 + 96), 0x1Bu);
    if ((*(_DWORD *)(v3 + 188) & 0x1000000) == 0) {
      return this;
    }
    goto LABEL_57;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 0x1Au);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800) != 0) {
    goto LABEL_56;
  }
LABEL_28:
  if ((v4 & 0x1000000) == 0) {
    return this;
  }
LABEL_57:
  char v5 = *(unsigned char *)(v3 + 181);

  return PB::Writer::write(a2, v5, 0x1Cu);
}

uint64_t CMMsl::RunningSpeedKFResult::hash_value(CMMsl::RunningSpeedKFResult *this)
{
  int v1 = *((_DWORD *)this + 47);
  if ((v1 & 0x80000) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_71:
    double v3 = 0.0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_6;
    }
LABEL_72:
    double v4 = 0.0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_73;
  }
  double v2 = *((double *)this + 20);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_71;
  }
LABEL_3:
  double v3 = *((double *)this + 8);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_72;
  }
LABEL_6:
  double v4 = *((double *)this + 19);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x8000000) != 0)
  {
LABEL_9:
    uint64_t v5 = *((unsigned __int8 *)this + 184);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_10;
    }
LABEL_74:
    double v6 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_13;
    }
LABEL_75:
    double v7 = 0.0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }
LABEL_73:
  uint64_t v5 = 0;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_74;
  }
LABEL_10:
  double v6 = *((double *)this + 18);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_75;
  }
LABEL_13:
  double v7 = *((double *)this + 17);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x2000000) != 0)
  {
LABEL_16:
    uint64_t v8 = *((unsigned __int8 *)this + 182);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v8 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_17:
    uint64_t v9 = *((unsigned __int8 *)this + 183);
    if ((v1 & 0x40) != 0) {
      goto LABEL_18;
    }
LABEL_78:
    double v10 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_21;
    }
LABEL_79:
    double v11 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_24;
    }
LABEL_80:
    double v12 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_27;
    }
LABEL_81:
    double v13 = 0.0;
    if (v1) {
      goto LABEL_30;
    }
LABEL_82:
    double v14 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_33;
    }
LABEL_83:
    double v15 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_36;
    }
LABEL_84:
    double v16 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_39;
    }
LABEL_85:
    double v17 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_42;
    }
LABEL_86:
    double v18 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_45;
    }
LABEL_87:
    double v19 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_48;
    }
LABEL_88:
    double v20 = 0.0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_51;
    }
    goto LABEL_89;
  }
LABEL_77:
  uint64_t v9 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_78;
  }
LABEL_18:
  double v10 = *((double *)this + 7);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_79;
  }
LABEL_21:
  double v11 = *((double *)this + 4);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_80;
  }
LABEL_24:
  double v12 = *((double *)this + 6);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_81;
  }
LABEL_27:
  double v13 = *((double *)this + 5);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_82;
  }
LABEL_30:
  double v14 = *((double *)this + 1);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_83;
  }
LABEL_33:
  double v15 = *((double *)this + 2);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_84;
  }
LABEL_36:
  double v16 = *((double *)this + 16);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_85;
  }
LABEL_39:
  double v17 = *((double *)this + 15);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_86;
  }
LABEL_42:
  double v18 = *((double *)this + 9);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_87;
  }
LABEL_45:
  double v19 = *((double *)this + 10);
  if (v19 == 0.0) {
    double v19 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_88;
  }
LABEL_48:
  double v20 = *((double *)this + 3);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  if ((v1 & 0x400000) != 0)
  {
LABEL_51:
    uint64_t v21 = *((int *)this + 44);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_52;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v21 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_52:
    uint64_t v22 = *((int *)this + 42);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_53;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v22 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_53:
    uint64_t v23 = *((int *)this + 43);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_54;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t v23 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_54:
    uint64_t v24 = *((unsigned __int8 *)this + 180);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_55;
    }
LABEL_93:
    double v25 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_58;
    }
LABEL_94:
    double v26 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_61;
    }
LABEL_95:
    double v27 = 0.0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_64;
    }
    goto LABEL_96;
  }
LABEL_92:
  uint64_t v24 = 0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_93;
  }
LABEL_55:
  double v25 = *((double *)this + 13);
  if (v25 == 0.0) {
    double v25 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_94;
  }
LABEL_58:
  double v26 = *((double *)this + 14);
  if (v26 == 0.0) {
    double v26 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_95;
  }
LABEL_61:
  double v27 = *((double *)this + 11);
  if (v27 == 0.0) {
    double v27 = 0.0;
  }
  if ((v1 & 0x800) != 0)
  {
LABEL_64:
    double v28 = *((double *)this + 12);
    if (v28 == 0.0) {
      double v28 = 0.0;
    }
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_67;
    }
LABEL_97:
    uint64_t v29 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ *(void *)&v27 ^ *(void *)&v28 ^ v29;
  }
LABEL_96:
  double v28 = 0.0;
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_97;
  }
LABEL_67:
  uint64_t v29 = *((unsigned __int8 *)this + 181);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ *(void *)&v27 ^ *(void *)&v28 ^ v29;
}

void CMMsl::RunningStrideLength::~RunningStrideLength(CMMsl::RunningStrideLength *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::RunningStrideLength::RunningStrideLength(CMMsl::RunningStrideLength *this, const CMMsl::RunningStrideLength *a2)
{
  *(void *)this = off_1003A8BD0;
  *((_DWORD *)this + 34) = 0;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    int v3 = 4;
    *((_DWORD *)this + 34) = 4;
    *((double *)this + 3) = result;
    int v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 10);
    v3 |= 0x200u;
    *((_DWORD *)this + 34) = v3;
    *((double *)this + 10) = result;
    int v2 = *((_DWORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x4000) != 0)
  {
    double result = *((double *)a2 + 15);
    v3 |= 0x4000u;
    *((_DWORD *)this + 34) = v3;
    *((double *)this + 15) = result;
    int v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 11) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  double result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
LABEL_30:
  double result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 12) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }
LABEL_31:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
LABEL_32:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 1) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v5 = *((_DWORD *)a2 + 32);
  v3 |= 0x8000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 32) = v5;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  char v6 = *((unsigned char *)a2 + 132);
  v3 |= 0x10000u;
  *((_DWORD *)this + 34) = v3;
  *((unsigned char *)this + 132) = v6;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_36:
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 34) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_35:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 9) = result;
  if ((*((_DWORD *)a2 + 34) & 2) != 0) {
    goto LABEL_36;
  }
  return result;
}

CMMsl *CMMsl::RunningStrideLength::operator=(CMMsl *a1, const CMMsl::RunningStrideLength *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningStrideLength::RunningStrideLength((CMMsl::RunningStrideLength *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningStrideLength *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningStrideLength *a2, CMMsl::RunningStrideLength *a3)
{
  int v3 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v5;
  uint64_t v6 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v6;
  uint64_t v7 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v13;
  uint64_t v14 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v15;
  uint64_t v16 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v16;
  int v17 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v17;
  LOBYTE(v17) = *((unsigned char *)this + 132);
  *((unsigned char *)this + 132) = *((unsigned char *)a2 + 132);
  *((unsigned char *)a2 + 132) = v17;
  uint64_t v18 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v18;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::RunningStrideLength::RunningStrideLength(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8BD0;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::RunningStrideLength::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningStrideLength::RunningStrideLength((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningStrideLength *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningStrideLength::formatText(CMMsl::RunningStrideLength *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x8000) != 0)
  {
    PB::TextFormatter::format(a2, "algorithmType", *((_DWORD *)this + 32));
    int v5 = *((_DWORD *)this + 34);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "alpha", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "cadence", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "formBasedStartTime", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "grade", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "heightCM", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "horizontalAccelMagnitudeMeanSqrt", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isValid", *((unsigned char *)this + 132));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "rotationRateGravityProjectionMax", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "rotationRateMagnitudeMin", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "speedBasedStartTime", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "strideLength", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "strideLengthFormBasedCalibrated", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "strideLengthFormBasedUncalibrated", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "strideLengthSpeedBased", *((double *)this + 14));
  if ((*((_DWORD *)this + 34) & 0x4000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 15));
LABEL_19:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningStrideLength::readFrom(CMMsl::RunningStrideLength *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 34) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 2u:
              *((_DWORD *)this + 34) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 3u:
              *((_DWORD *)this + 34) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 4u:
              *((_DWORD *)this + 34) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 5u:
              *((_DWORD *)this + 34) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 6u:
              *((_DWORD *)this + 34) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 7u:
              *((_DWORD *)this + 34) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 8u:
              *((_DWORD *)this + 34) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 9u:
              *((_DWORD *)this + 34) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 0xAu:
              *((_DWORD *)this + 34) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 0xBu:
              *((_DWORD *)this + 34) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 0xCu:
              *((_DWORD *)this + 34) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 0xDu:
              *((_DWORD *)this + 34) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 0xEu:
              *((_DWORD *)this + 34) |= 0x8000u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v31 = v21++;
                  char v32 = *(unsigned char *)(v22 + v31);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_92;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *((_DWORD *)this + 32) = v25;
LABEL_94:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xFu:
              *((_DWORD *)this + 34) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 132) = v28;
              goto LABEL_94;
            case 0x10u:
              *((_DWORD *)this + 34) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_88;
            case 0x11u:
              *((_DWORD *)this + 34) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_88:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_77:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_94;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_94;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningStrideLength::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 136);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    int v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 2u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 3u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 4u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 7u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 8u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 9u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0xAu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0xBu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0xCu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xDu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 128), 0xEu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
LABEL_34:
    this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x10u);
    if ((*(_DWORD *)(v3 + 136) & 2) == 0) {
      return this;
    }
    goto LABEL_35;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 132), 0xFu);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) != 0) {
    goto LABEL_34;
  }
LABEL_17:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_35:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 0x11u);
}

uint64_t CMMsl::RunningStrideLength::hash_value(CMMsl::RunningStrideLength *this)
{
  int v1 = *((_DWORD *)this + 34);
  if ((v1 & 4) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_3;
    }
LABEL_50:
    double v3 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_6;
    }
LABEL_51:
    double v4 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_9;
    }
LABEL_52:
    double v5 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_53:
    double v6 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_15;
    }
LABEL_54:
    double v7 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_18;
    }
LABEL_55:
    double v8 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_21;
    }
LABEL_56:
    double v9 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_24;
    }
LABEL_57:
    double v10 = 0.0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_27;
    }
LABEL_58:
    double v11 = 0.0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_30;
    }
LABEL_59:
    double v12 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_33;
    }
LABEL_60:
    double v13 = 0.0;
    if (v1) {
      goto LABEL_36;
    }
LABEL_61:
    double v14 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_62;
  }
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_50;
  }
LABEL_3:
  double v3 = *((double *)this + 10);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_51;
  }
LABEL_6:
  double v4 = *((double *)this + 15);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_52;
  }
LABEL_9:
  double v5 = *((double *)this + 11);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_53;
  }
LABEL_12:
  double v6 = *((double *)this + 5);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_54;
  }
LABEL_15:
  double v7 = *((double *)this + 6);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_55;
  }
LABEL_18:
  double v8 = *((double *)this + 8);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_56;
  }
LABEL_21:
  double v9 = *((double *)this + 7);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_57;
  }
LABEL_24:
  double v10 = *((double *)this + 4);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_58;
  }
LABEL_27:
  double v11 = *((double *)this + 13);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_59;
  }
LABEL_30:
  double v12 = *((double *)this + 12);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_60;
  }
LABEL_33:
  double v13 = *((double *)this + 14);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_61;
  }
LABEL_36:
  double v14 = *((double *)this + 1);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_39:
    uint64_t v15 = *((int *)this + 32);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v15 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_40:
    uint64_t v16 = *((unsigned __int8 *)this + 132);
    if ((v1 & 0x100) != 0) {
      goto LABEL_41;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t v16 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_41:
    double v17 = *((double *)this + 9);
    if (v17 == 0.0) {
      double v17 = 0.0;
    }
    if ((v1 & 2) != 0) {
      goto LABEL_44;
    }
LABEL_65:
    double v18 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ v15 ^ v16 ^ *(void *)&v17 ^ *(void *)&v18;
  }
LABEL_64:
  double v17 = 0.0;
  if ((v1 & 2) == 0) {
    goto LABEL_65;
  }
LABEL_44:
  double v18 = *((double *)this + 2);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ v15 ^ v16 ^ *(void *)&v17 ^ *(void *)&v18;
}

void CMMsl::RunningVerticalOscillation::~RunningVerticalOscillation(CMMsl::RunningVerticalOscillation *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::RunningVerticalOscillation::RunningVerticalOscillation(CMMsl::RunningVerticalOscillation *this, const CMMsl::RunningVerticalOscillation *a2)
{
  *(void *)this = off_1003A8C08;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    char v3 = 4;
    *((unsigned char *)this + 40) = 4;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 4);
    v3 |= 8u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 40) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((unsigned char *)this + 40) = v3;
  *((double *)this + 1) = result;
  if ((*((unsigned char *)a2 + 40) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::RunningVerticalOscillation::operator=(uint64_t a1, const CMMsl::RunningVerticalOscillation *a2)
{
  if ((const CMMsl::RunningVerticalOscillation *)a1 != a2)
  {
    CMMsl::RunningVerticalOscillation::RunningVerticalOscillation((CMMsl::RunningVerticalOscillation *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningVerticalOscillation *a2, CMMsl::RunningVerticalOscillation *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::RunningVerticalOscillation::RunningVerticalOscillation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8C08;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8C08;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::RunningVerticalOscillation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A8C08;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v11 = *(_DWORD *)(a1 + 40);
    long long v10 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    long long v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::RunningVerticalOscillation::formatText(CMMsl::RunningVerticalOscillation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "displacement", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningVerticalOscillation::readFrom(CMMsl::RunningVerticalOscillation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 40) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((unsigned char *)this + 40) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 40) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningVerticalOscillation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
      if ((*(unsigned char *)(v3 + 40) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::RunningVerticalOscillation::hash_value(CMMsl::RunningVerticalOscillation *this)
{
  if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if (*((unsigned char *)this + 40)) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if (*((unsigned char *)this + 40))
  {
LABEL_6:
    double v3 = *((double *)this + 1);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v4 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
  }
LABEL_16:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
}

void CMMsl::RunningVerticalOscillationGradientBoostedSignals::~RunningVerticalOscillationGradientBoostedSignals(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals(uint64_t this, const CMMsl::RunningVerticalOscillationGradientBoostedSignals *a2)
{
  *(void *)this = off_1003A8C40;
  *(_DWORD *)(this + 212) = 0;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v4 = *((void *)a2 + 19);
    int v3 = 0x40000;
    *(_DWORD *)(this + 212) = 0x40000;
    *(void *)(this + 152) = v4;
    int v2 = *((_DWORD *)a2 + 53);
    if ((v2 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 15);
    v3 |= 0x4000u;
    *(_DWORD *)(this + 212) = v3;
    *(void *)(this + 120) = v5;
    int v2 = *((_DWORD *)a2 + 53);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    uint64_t v6 = *((void *)a2 + 11);
    v3 |= 0x400u;
    *(_DWORD *)(this + 212) = v3;
    *(void *)(this + 88) = v6;
    int v2 = *((_DWORD *)a2 + 53);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 96) = v7;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v8 = *((void *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 104) = v8;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v9 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 16) = v9;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v10 = *((void *)a2 + 25);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 200) = v10;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v11 = *((void *)a2 + 22);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 176) = v11;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v12 = *((void *)a2 + 21);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 168) = v12;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v13 = *((void *)a2 + 18);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 144) = v13;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v14 = *((void *)a2 + 16);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 128) = v14;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v15 = *((void *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 80) = v15;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v16 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 56) = v16;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v17 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 48) = v17;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v18 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 32) = v18;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v19 = *((void *)a2 + 24);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 192) = v19;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v20 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 40) = v20;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x2000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v21 = *((void *)a2 + 14);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 112) = v21;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v22 = *((void *)a2 + 9);
  v3 |= 0x100u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 72) = v22;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v23 = *((void *)a2 + 17);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 136) = v23;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v24 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 64) = v24;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 1) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v25 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 24) = v25;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 1) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v26 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 8) = v26;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x400000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v27 = *((void *)a2 + 23);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 184) = v27;
  int v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000000) == 0) {
      return this;
    }
LABEL_54:
    char v29 = *((unsigned char *)a2 + 208);
    *(_DWORD *)(this + 212) = v3 | 0x2000000;
    *(unsigned char *)(this + 208) = v29;
    return this;
  }
LABEL_53:
  uint64_t v28 = *((void *)a2 + 20);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 212) = v3;
  *(void *)(this + 160) = v28;
  if ((*((_DWORD *)a2 + 53) & 0x2000000) != 0) {
    goto LABEL_54;
  }
  return this;
}

CMMsl *CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator=(CMMsl *a1, const CMMsl::RunningVerticalOscillationGradientBoostedSignals *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationGradientBoostedSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningVerticalOscillationGradientBoostedSignals *a2, CMMsl::RunningVerticalOscillationGradientBoostedSignals *a3)
{
  int v3 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v3;
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v4;
  uint64_t v5 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v5;
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v6;
  uint64_t v7 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v7;
  uint64_t v8 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v10;
  uint64_t v11 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v11;
  uint64_t v12 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v12;
  uint64_t v13 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v13;
  uint64_t v14 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v14;
  uint64_t v15 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v15;
  uint64_t v16 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v16;
  uint64_t v17 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v17;
  uint64_t v18 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v18;
  uint64_t v19 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v21;
  uint64_t v22 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v22;
  uint64_t v23 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v23;
  uint64_t v24 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v24;
  uint64_t v25 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v25;
  uint64_t v26 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v26;
  uint64_t v27 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v27;
  double result = *((double *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((double *)a2 + 20) = result;
  LOBYTE(v3) = *((unsigned char *)this + 208);
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 208);
  *((unsigned char *)a2 + 208) = v3;
  return result;
}

double CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8C40;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a2 + 212) = 0;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  double result = *(double *)(a2 + 160);
  *(double *)(a1 + 160) = result;
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  return result;
}

CMMsl *CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationGradientBoostedSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::formatText(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 53);
  if (v5)
  {
    PB::TextFormatter::format(a2, "centerOfMassAccelZAmplitudeBackwards", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 53);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "height", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "integratedAngleYg", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "integratedAngleYgBackwards", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "integratedCenterOfAccelZMaxBackwards", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "integratedRotationAxisWZ", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "integratedRotationAxisWZForwards", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "integratedRotationRateYBackwards", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "integratedUserAccelTForwards", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "integratedUserAccelY", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "integratedVelocityZ", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "integratedVelocityZBackwards", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "integratedVelocityZForwards", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "isValidPeak", *((unsigned char *)this + 208));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "medianCadence", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "peakTime", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "rotationAxisWTAmplitudeXForwards", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "rotationRateMaxZForwards", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "rotationTMaxZForwards", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 19));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "strideLengthCadence", *((double *)this + 20));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "swingAccelAmplitudeYBackwards", *((double *)this + 21));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "swingAccelMeanXBackwards", *((double *)this + 22));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "swingAccelTZMean", *((double *)this + 23));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x800000) == 0)
  {
LABEL_26:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "userAccelTMeanXBackards", *((double *)this + 24));
  if ((*((_DWORD *)this + 53) & 0x1000000) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(a2, "weight", *((double *)this + 25));
LABEL_28:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::readFrom(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 53) |= 0x40000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 2u:
          *((_DWORD *)this + 53) |= 0x4000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 3u:
          *((_DWORD *)this + 53) |= 0x400u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 4u:
          *((_DWORD *)this + 53) |= 0x800u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 5u:
          *((_DWORD *)this + 53) |= 0x1000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 6u:
          *((_DWORD *)this + 53) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 7u:
          *((_DWORD *)this + 53) |= 0x1000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 25) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 8u:
          *((_DWORD *)this + 53) |= 0x200000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 22) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 9u:
          *((_DWORD *)this + 53) |= 0x100000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0xAu:
          *((_DWORD *)this + 53) |= 0x20000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0xBu:
          *((_DWORD *)this + 53) |= 0x8000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0xCu:
          *((_DWORD *)this + 53) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0xDu:
          *((_DWORD *)this + 53) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0xEu:
          *((_DWORD *)this + 53) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0xFu:
          *((_DWORD *)this + 53) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0x10u:
          *((_DWORD *)this + 53) |= 0x800000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 24) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0x11u:
          *((_DWORD *)this + 53) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0x12u:
          *((_DWORD *)this + 53) |= 0x2000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0x13u:
          *((_DWORD *)this + 53) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0x14u:
          *((_DWORD *)this + 53) |= 0x10000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0x15u:
          *((_DWORD *)this + 53) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0x16u:
          *((_DWORD *)this + 53) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0x17u:
          *((_DWORD *)this + 53) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0x18u:
          *((_DWORD *)this + 53) |= 0x400000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_100;
          }
          *((void *)this + 23) = *(void *)(*(void *)a2 + v2);
          goto LABEL_104;
        case 0x19u:
          *((_DWORD *)this + 53) |= 0x80000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
          {
LABEL_100:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
LABEL_104:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          break;
        case 0x1Au:
          *((_DWORD *)this + 53) |= 0x2000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *((unsigned char *)this + 208) = v21;
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 212);
  if ((v4 & 0x40000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 152), 1u);
    int v4 = *(_DWORD *)(v3 + 212);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 2u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 3u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 4u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 5u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 6u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 200), 7u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 176), 8u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 9u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0xAu);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0xBu);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0xCu);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0xDu);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xEu);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xFu);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 192), 0x10u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0x11u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x12u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x13u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 0x14u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 0x15u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x16u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0x17u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    this = PB::Writer::write(a2, *(double *)(v3 + 160), 0x19u);
    if ((*(_DWORD *)(v3 + 212) & 0x2000000) == 0) {
      return this;
    }
    goto LABEL_53;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 184), 0x18u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80000) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 0x2000000) == 0) {
    return this;
  }
LABEL_53:
  char v5 = *(unsigned char *)(v3 + 208);

  return PB::Writer::write(a2, v5, 0x1Au);
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::hash_value(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this)
{
  int v1 = *((_DWORD *)this + 53);
  if ((v1 & 0x40000) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_3;
    }
LABEL_79:
    double v3 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_6;
    }
LABEL_80:
    double v4 = 0.0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_9;
    }
LABEL_81:
    double v5 = 0.0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_12;
    }
LABEL_82:
    double v6 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_15;
    }
LABEL_83:
    double v7 = 0.0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_18;
    }
LABEL_84:
    double v8 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_21;
    }
LABEL_85:
    double v9 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_24;
    }
LABEL_86:
    double v10 = 0.0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_27;
    }
LABEL_87:
    double v11 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_30;
    }
LABEL_88:
    double v12 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_33;
    }
LABEL_89:
    double v13 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_36;
    }
LABEL_90:
    double v14 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_39;
    }
LABEL_91:
    double v15 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_42;
    }
LABEL_92:
    double v16 = 0.0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_45;
    }
LABEL_93:
    double v17 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_48;
    }
LABEL_94:
    double v18 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_51;
    }
LABEL_95:
    double v19 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_54;
    }
LABEL_96:
    double v20 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_57;
    }
LABEL_97:
    double v21 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_60;
    }
LABEL_98:
    double v22 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_63;
    }
LABEL_99:
    double v23 = 0.0;
    if (v1) {
      goto LABEL_66;
    }
LABEL_100:
    double v24 = 0.0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_69;
    }
LABEL_101:
    double v25 = 0.0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_72;
    }
    goto LABEL_102;
  }
  double v2 = *((double *)this + 19);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_79;
  }
LABEL_3:
  double v3 = *((double *)this + 15);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_80;
  }
LABEL_6:
  double v4 = *((double *)this + 11);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_81;
  }
LABEL_9:
  double v5 = *((double *)this + 12);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_82;
  }
LABEL_12:
  double v6 = *((double *)this + 13);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_83;
  }
LABEL_15:
  double v7 = *((double *)this + 2);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_84;
  }
LABEL_18:
  double v8 = *((double *)this + 25);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_85;
  }
LABEL_21:
  double v9 = *((double *)this + 22);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_86;
  }
LABEL_24:
  double v10 = *((double *)this + 21);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_87;
  }
LABEL_27:
  double v11 = *((double *)this + 18);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_88;
  }
LABEL_30:
  double v12 = *((double *)this + 16);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_89;
  }
LABEL_33:
  double v13 = *((double *)this + 10);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_90;
  }
LABEL_36:
  double v14 = *((double *)this + 7);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_91;
  }
LABEL_39:
  double v15 = *((double *)this + 6);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_92;
  }
LABEL_42:
  double v16 = *((double *)this + 4);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_93;
  }
LABEL_45:
  double v17 = *((double *)this + 24);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_94;
  }
LABEL_48:
  double v18 = *((double *)this + 5);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_95;
  }
LABEL_51:
  double v19 = *((double *)this + 14);
  if (v19 == 0.0) {
    double v19 = 0.0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_96;
  }
LABEL_54:
  double v20 = *((double *)this + 9);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_97;
  }
LABEL_57:
  double v21 = *((double *)this + 17);
  if (v21 == 0.0) {
    double v21 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_98;
  }
LABEL_60:
  double v22 = *((double *)this + 8);
  if (v22 == 0.0) {
    double v22 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_99;
  }
LABEL_63:
  double v23 = *((double *)this + 3);
  if (v23 == 0.0) {
    double v23 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_100;
  }
LABEL_66:
  double v24 = *((double *)this + 1);
  if (v24 == 0.0) {
    double v24 = 0.0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_101;
  }
LABEL_69:
  double v25 = *((double *)this + 23);
  if (v25 == 0.0) {
    double v25 = 0.0;
  }
  if ((v1 & 0x80000) != 0)
  {
LABEL_72:
    double v26 = *((double *)this + 20);
    if (v26 == 0.0) {
      double v26 = 0.0;
    }
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_75;
    }
LABEL_103:
    uint64_t v27 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23 ^ *(void *)&v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ v27;
  }
LABEL_102:
  double v26 = 0.0;
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_103;
  }
LABEL_75:
  uint64_t v27 = *((unsigned __int8 *)this + 208);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23 ^ *(void *)&v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ v27;
}

void CMMsl::RunningVerticalOscillationSignals::~RunningVerticalOscillationSignals(CMMsl::RunningVerticalOscillationSignals *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals(CMMsl::RunningVerticalOscillationSignals *this, const CMMsl::RunningVerticalOscillationSignals *a2)
{
  *(void *)this = off_1003A8C78;
  *((_DWORD *)this + 52) = 0;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x400) != 0)
  {
    double result = *((double *)a2 + 11);
    int v3 = 1024;
    *((_DWORD *)this + 52) = 1024;
    *((double *)this + 11) = result;
    int v2 = *((_DWORD *)a2 + 52);
    if ((v2 & 0x10000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 17);
    v3 |= 0x10000u;
    *((_DWORD *)this + 52) = v3;
    *((double *)this + 17) = result;
    int v2 = *((_DWORD *)a2 + 52);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_DWORD *)this + 52) = v3;
    *((double *)this + 1) = result;
    int v2 = *((_DWORD *)a2 + 52);
    if ((v2 & 0x800000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_32;
    }
  }
  else if ((v2 & 0x800000) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 24);
  v3 |= 0x800000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 24) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  double result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 12) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  double result = *((double *)a2 + 25);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 25) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x200000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  double result = *((double *)a2 + 22);
  v3 |= 0x200000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 22) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  double result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 3) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }
LABEL_44:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_46;
  }
LABEL_45:
  double result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_47;
  }
LABEL_46:
  double result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_48;
  }
LABEL_47:
  double result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x400000) == 0)
  {
LABEL_25:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_49;
  }
LABEL_48:
  double result = *((double *)a2 + 23);
  v3 |= 0x400000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 23) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x40000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_50;
  }
LABEL_49:
  double result = *((double *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0) {
      goto LABEL_28;
    }
    goto LABEL_51;
  }
LABEL_50:
  double result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 18) = result;
  int v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_52:
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 52) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_51:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 9) = result;
  if ((*((_DWORD *)a2 + 52) & 2) != 0) {
    goto LABEL_52;
  }
  return result;
}

CMMsl *CMMsl::RunningVerticalOscillationSignals::operator=(CMMsl *a1, const CMMsl::RunningVerticalOscillationSignals *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals((CMMsl::RunningVerticalOscillationSignals *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningVerticalOscillationSignals *a2, CMMsl::RunningVerticalOscillationSignals *a3)
{
  int v3 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v3;
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v4;
  uint64_t v5 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v7;
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v9;
  uint64_t v10 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v15;
  uint64_t v16 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v16;
  uint64_t v17 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v17;
  uint64_t v18 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v18;
  uint64_t v19 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v19;
  uint64_t v20 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v20;
  uint64_t v21 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v21;
  uint64_t v22 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v22;
  uint64_t v23 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v23;
  uint64_t v24 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v24;
  uint64_t v25 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v25;
  uint64_t v26 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v26;
  uint64_t v27 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v27;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8C78;
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a2 + 208) = 0;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::RunningVerticalOscillationSignals::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::formatText(CMMsl::RunningVerticalOscillationSignals *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 52);
  if (v5)
  {
    PB::TextFormatter::format(a2, "acceleration", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "centerOfMassAccelAmplitude", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "centerOfMassAccelMax", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "centripetalAccelMeanY", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "centripetalAccelMeanZ", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "height", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "position", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "rotationProjectedGravityAmplitude", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "rotationRateMean", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "rotationRateMeanX", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "strideLengthCadence", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "swingAccelAmplitudeY", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "swingAccelAmplitudeZ", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "swingAccelMaxY", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "swingAccelMaxZ", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "userAccelAmplitudeZ", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "userAccelMaxX", *((double *)this + 19));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "userAccelMaxY", *((double *)this + 20));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "userAccelMean", *((double *)this + 21));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "userAccelMeanY", *((double *)this + 22));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "userAccelProjectedGravityAmplitudeCadence", *((double *)this + 23));
  int v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "velocity", *((double *)this + 24));
  if ((*((_DWORD *)this + 52) & 0x1000000) != 0) {
LABEL_26:
  }
    PB::TextFormatter::format(a2, "weight", *((double *)this + 25));
LABEL_27:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningVerticalOscillationSignals::readFrom(CMMsl::RunningVerticalOscillationSignals *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 52) |= 0x400u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 2u:
          *((_DWORD *)this + 52) |= 0x10000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 3u:
          *((_DWORD *)this + 52) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 4u:
          *((_DWORD *)this + 52) |= 0x800000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 24) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 5u:
          *((_DWORD *)this + 52) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 6u:
          *((_DWORD *)this + 52) |= 0x800u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 7u:
          *((_DWORD *)this + 52) |= 0x1000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 25) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 8u:
          *((_DWORD *)this + 52) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 9u:
          *((_DWORD *)this + 52) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0xAu:
          *((_DWORD *)this + 52) |= 0x100000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0xBu:
          *((_DWORD *)this + 52) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0xCu:
          *((_DWORD *)this + 52) |= 0x200000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 22) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0xDu:
          *((_DWORD *)this + 52) |= 0x8000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0xEu:
          *((_DWORD *)this + 52) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0xFu:
          *((_DWORD *)this + 52) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0x10u:
          *((_DWORD *)this + 52) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0x11u:
          *((_DWORD *)this + 52) |= 0x2000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0x12u:
          *((_DWORD *)this + 52) |= 0x1000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0x13u:
          *((_DWORD *)this + 52) |= 0x4000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0x14u:
          *((_DWORD *)this + 52) |= 0x80000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0x15u:
          *((_DWORD *)this + 52) |= 0x400000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 23) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0x16u:
          *((_DWORD *)this + 52) |= 0x40000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0x17u:
          *((_DWORD *)this + 52) |= 0x20000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0x18u:
          *((_DWORD *)this + 52) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_96;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
          goto LABEL_100;
        case 0x19u:
          *((_DWORD *)this + 52) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_100:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_96:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 208);
  if ((v4 & 0x400) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 88), 1u);
    int v4 = *(_DWORD *)(v3 + 208);
    if ((v4 & 0x10000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x10000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 2u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 192), 4u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 5u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 6u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 200), 7u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 8u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 9u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 0xAu);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xBu);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 176), 0xCu);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x8000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0xDu);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xEu);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xFu);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0x10u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x11u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0x12u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0x13u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 0x14u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x400000) == 0)
  {
LABEL_22:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 184), 0x15u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 0x16u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
LABEL_50:
    this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x18u);
    if ((*(_DWORD *)(v3 + 208) & 2) == 0) {
      return this;
    }
    goto LABEL_51;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0x17u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100) != 0) {
    goto LABEL_50;
  }
LABEL_25:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_51:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 0x19u);
}

uint64_t CMMsl::RunningVerticalOscillationSignals::hash_value(CMMsl::RunningVerticalOscillationSignals *this)
{
  int v1 = *((_DWORD *)this + 52);
  if ((v1 & 0x400) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_3;
    }
LABEL_78:
    double v3 = 0.0;
    if (v1) {
      goto LABEL_6;
    }
LABEL_79:
    double v4 = 0.0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_9;
    }
LABEL_80:
    double v5 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_81:
    double v6 = 0.0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_15;
    }
LABEL_82:
    double v7 = 0.0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_18;
    }
LABEL_83:
    double v8 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_21;
    }
LABEL_84:
    double v9 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_24;
    }
LABEL_85:
    double v10 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_27;
    }
LABEL_86:
    double v11 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_30;
    }
LABEL_87:
    double v12 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_33;
    }
LABEL_88:
    double v13 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_36;
    }
LABEL_89:
    double v14 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_39;
    }
LABEL_90:
    double v15 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_42;
    }
LABEL_91:
    double v16 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_45;
    }
LABEL_92:
    double v17 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_48;
    }
LABEL_93:
    double v18 = 0.0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_51;
    }
LABEL_94:
    double v19 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_54;
    }
LABEL_95:
    double v20 = 0.0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_57;
    }
LABEL_96:
    double v21 = 0.0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_60;
    }
LABEL_97:
    double v22 = 0.0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_63;
    }
LABEL_98:
    double v23 = 0.0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_66;
    }
LABEL_99:
    double v24 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_69;
    }
    goto LABEL_100;
  }
  double v2 = *((double *)this + 11);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_78;
  }
LABEL_3:
  double v3 = *((double *)this + 17);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_79;
  }
LABEL_6:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_80;
  }
LABEL_9:
  double v5 = *((double *)this + 24);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_81;
  }
LABEL_12:
  double v6 = *((double *)this + 7);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_82;
  }
LABEL_15:
  double v7 = *((double *)this + 12);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_83;
  }
LABEL_18:
  double v8 = *((double *)this + 25);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_84;
  }
LABEL_21:
  double v9 = *((double *)this + 6);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_85;
  }
LABEL_24:
  double v10 = *((double *)this + 8);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_86;
  }
LABEL_27:
  double v11 = *((double *)this + 21);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_87;
  }
LABEL_30:
  double v12 = *((double *)this + 4);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_88;
  }
LABEL_33:
  double v13 = *((double *)this + 22);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_89;
  }
LABEL_36:
  double v14 = *((double *)this + 16);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_90;
  }
LABEL_39:
  double v15 = *((double *)this + 3);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_91;
  }
LABEL_42:
  double v16 = *((double *)this + 5);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_92;
  }
LABEL_45:
  double v17 = *((double *)this + 10);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_93;
  }
LABEL_48:
  double v18 = *((double *)this + 14);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_94;
  }
LABEL_51:
  double v19 = *((double *)this + 13);
  if (v19 == 0.0) {
    double v19 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_95;
  }
LABEL_54:
  double v20 = *((double *)this + 15);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_96;
  }
LABEL_57:
  double v21 = *((double *)this + 20);
  if (v21 == 0.0) {
    double v21 = 0.0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_97;
  }
LABEL_60:
  double v22 = *((double *)this + 23);
  if (v22 == 0.0) {
    double v22 = 0.0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_98;
  }
LABEL_63:
  double v23 = *((double *)this + 19);
  if (v23 == 0.0) {
    double v23 = 0.0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_99;
  }
LABEL_66:
  double v24 = *((double *)this + 18);
  if (v24 == 0.0) {
    double v24 = 0.0;
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_69:
    double v25 = *((double *)this + 9);
    if (v25 == 0.0) {
      double v25 = 0.0;
    }
    if ((v1 & 2) != 0) {
      goto LABEL_72;
    }
LABEL_101:
    double v26 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23 ^ *(void *)&v24 ^ *(void *)&v25 ^ *(void *)&v26;
  }
LABEL_100:
  double v25 = 0.0;
  if ((v1 & 2) == 0) {
    goto LABEL_101;
  }
LABEL_72:
  double v26 = *((double *)this + 2);
  if (v26 == 0.0) {
    double v26 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23 ^ *(void *)&v24 ^ *(void *)&v25 ^ *(void *)&v26;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival(uint64_t this)
{
  *(void *)this = off_1003A8CB0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = off_1003A8CB0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::SMEstimatedTimeOfArrival::~SMEstimatedTimeOfArrival(CMMsl::SMEstimatedTimeOfArrival *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival(uint64_t this, const CMMsl::SMEstimatedTimeOfArrival *a2)
{
  *(void *)this = off_1003A8CB0;
  *(_DWORD *)(this + 36) = 0;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    char v3 = 4;
    *(unsigned char *)(this + 36) = 4;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 36))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 36) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(this + 36) = v3 | 8;
    *(_DWORD *)(this + 32) = v7;
    return this;
  }
  uint64_t v6 = *((void *)a2 + 2);
  v3 |= 2u;
  *(unsigned char *)(this + 36) = v3;
  *(void *)(this + 16) = v6;
  if ((*((unsigned char *)a2 + 36) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::operator=(uint64_t a1, const CMMsl::SMEstimatedTimeOfArrival *a2)
{
  if ((const CMMsl::SMEstimatedTimeOfArrival *)a1 != a2)
  {
    CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival((uint64_t)v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    *(void *)&long long v3 = v10;
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v3;
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMEstimatedTimeOfArrival *a2, CMMsl::SMEstimatedTimeOfArrival *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  return result;
}

double CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8CB0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8CB0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A8CB0;
    uint64_t v3 = *(void *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::formatText(CMMsl::SMEstimatedTimeOfArrival *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 36);
  if (v5)
  {
    PB::TextFormatter::format(a2, "calculatedArrival", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "motionState", *((_DWORD *)this + 8));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "originalArrival", *((double *)this + 2));
  if ((*((unsigned char *)this + 36) & 4) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::readFrom(CMMsl::SMEstimatedTimeOfArrival *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 36) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_32;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_48;
            case 2u:
              *((unsigned char *)this + 36) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_32;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_48;
            case 3u:
              *((unsigned char *)this + 36) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_48:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_32:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_54;
            case 4u:
              *((unsigned char *)this + 36) |= 8u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_53;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_52:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_53;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_52;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_53;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_53:
              *((_DWORD *)this + 8) = v25;
LABEL_54:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_54;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 36);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
      if ((*(unsigned char *)(v3 + 36) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 36) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  int v5 = *(_DWORD *)(v3 + 32);

  return PB::Writer::writeVarInt(a2, v5, 4u);
}

BOOL CMMsl::SMEstimatedTimeOfArrival::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 8) == 0;
  if ((*(unsigned char *)(a1 + 36) & 8) != 0) {
    return (*(unsigned char *)(a2 + 36) & 8) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return v2;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::hash_value(CMMsl::SMEstimatedTimeOfArrival *this)
{
  if ((*((unsigned char *)this + 36) & 4) == 0)
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 36)) {
      goto LABEL_3;
    }
LABEL_13:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 36) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 36) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 36) & 2) != 0)
  {
LABEL_6:
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 36) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v4 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4;
  }
LABEL_14:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 36) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v4 = *((int *)this + 8);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4;
}

uint64_t CMMsl::SMLastScreenLock::SMLastScreenLock(uint64_t this)
{
  *(void *)this = off_1003A8CE8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A8CE8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::SMLastScreenLock::~SMLastScreenLock(CMMsl::SMLastScreenLock *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::SMLastScreenLock::SMLastScreenLock(CMMsl::SMLastScreenLock *this, const CMMsl::SMLastScreenLock *a2)
{
  *(void *)this = off_1003A8CE8;
  *((_DWORD *)this + 6) = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 24) = 2;
    *((double *)this + 2) = result;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 24))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::SMLastScreenLock::operator=(uint64_t a1, const CMMsl::SMLastScreenLock *a2)
{
  if ((const CMMsl::SMLastScreenLock *)a1 != a2)
  {
    CMMsl::SMLastScreenLock::SMLastScreenLock((CMMsl::SMLastScreenLock *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMLastScreenLock *a2, CMMsl::SMLastScreenLock *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SMLastScreenLock::SMLastScreenLock(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8CE8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8CE8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SMLastScreenLock::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = off_1003A8CE8;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::SMLastScreenLock::formatText(CMMsl::SMLastScreenLock *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "lastUnlockDate", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SMLastScreenLock::readFrom(CMMsl::SMLastScreenLock *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_28;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_28:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::SMLastScreenLock::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::SMLastScreenLock::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if (*(unsigned char *)(a1 + 24)) {
    return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::SMLastScreenLock::hash_value(CMMsl::SMLastScreenLock *this)
{
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 24)) {
      goto LABEL_3;
    }
LABEL_9:
    double v2 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1;
}

uint64_t CMMsl::SMLockStateChange::SMLockStateChange(uint64_t this)
{
  *(void *)this = off_1003A8D20;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A8D20;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::SMLockStateChange::~SMLockStateChange(CMMsl::SMLockStateChange *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::SMLockStateChange::SMLockStateChange(CMMsl::SMLockStateChange *this, const CMMsl::SMLockStateChange *a2)
{
  *(void *)this = off_1003A8D20;
  *((_DWORD *)this + 6) = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 24) = 2;
    *((double *)this + 2) = result;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 24))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::SMLockStateChange::operator=(uint64_t a1, const CMMsl::SMLockStateChange *a2)
{
  if ((const CMMsl::SMLockStateChange *)a1 != a2)
  {
    CMMsl::SMLockStateChange::SMLockStateChange((CMMsl::SMLockStateChange *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMLockStateChange *a2, CMMsl::SMLockStateChange *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SMLockStateChange::SMLockStateChange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8D20;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8D20;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SMLockStateChange::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = off_1003A8D20;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::SMLockStateChange::formatText(CMMsl::SMLockStateChange *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "stateChangeType", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SMLockStateChange::readFrom(CMMsl::SMLockStateChange *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_28;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_28:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::SMLockStateChange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::SMLockStateChange::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if (*(unsigned char *)(a1 + 24)) {
    return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::SMLockStateChange::hash_value(CMMsl::SMLockStateChange *this)
{
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 24)) {
      goto LABEL_3;
    }
LABEL_9:
    double v2 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1;
}

uint64_t CMMsl::SMSessionConfiguration::SMSessionConfiguration(uint64_t this)
{
  *(void *)this = off_1003A8D58;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(void *)this = off_1003A8D58;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void CMMsl::SMSessionConfiguration::~SMSessionConfiguration(CMMsl::SMSessionConfiguration *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::SMSessionConfiguration::SMSessionConfiguration(CMMsl::SMSessionConfiguration *this, const CMMsl::SMSessionConfiguration *a2)
{
  *(void *)this = off_1003A8D58;
  *((_DWORD *)this + 14) = 0;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 0x10) != 0)
  {
    double result = *((double *)a2 + 5);
    char v3 = 16;
    *((unsigned char *)this + 56) = 16;
    *((double *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 56) & 8) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 4);
    v3 |= 8u;
    *((unsigned char *)this + 56) = v3;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 56) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((unsigned char *)this + 56) = v3;
  *((double *)this + 3) = result;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_14:
    double result = *((double *)a2 + 6);
    *((unsigned char *)this + 56) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_13:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((unsigned char *)this + 56) = v3;
  *((double *)this + 1) = result;
  if ((*((unsigned char *)a2 + 56) & 0x20) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t CMMsl::SMSessionConfiguration::operator=(uint64_t a1, const CMMsl::SMSessionConfiguration *a2)
{
  if ((const CMMsl::SMSessionConfiguration *)a1 != a2)
  {
    CMMsl::SMSessionConfiguration::SMSessionConfiguration((CMMsl::SMSessionConfiguration *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMSessionConfiguration *a2, CMMsl::SMSessionConfiguration *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  double result = *((double *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::SMSessionConfiguration::SMSessionConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8D58;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8D58;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t CMMsl::SMSessionConfiguration::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = off_1003A8D58;
    int v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    int v13 = *(_DWORD *)(a1 + 56);
    long long v11 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a2 + 8);
    long long v5 = *(_OWORD *)(a2 + 24);
    long long v10 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 40) = v7;
    long long v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::SMSessionConfiguration::formatText(CMMsl::SMSessionConfiguration *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 56);
  if (v5)
  {
    PB::TextFormatter::format(a2, "destinationHunc", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "destinationLat", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "destinationLon", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "sessionEndTimestamp", *((double *)this + 4));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "sessionStartTimestamp", *((double *)this + 5));
  if ((*((unsigned char *)this + 56) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "transportationType", *((double *)this + 6));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SMSessionConfiguration::readFrom(CMMsl::SMSessionConfiguration *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 56) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 2u:
          *((unsigned char *)this + 56) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 3u:
          *((unsigned char *)this + 56) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 4u:
          *((unsigned char *)this + 56) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 5u:
          *((unsigned char *)this + 56) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_41;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 6u:
          *((unsigned char *)this + 56) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
LABEL_43:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_41:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SMSessionConfiguration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 56);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 2u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
    if ((*(unsigned char *)(v3 + 56) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  char v4 = *(unsigned char *)(v3 + 56);
  if (v4) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 48);

  return PB::Writer::write(a2, v5, 6u);
}

BOOL CMMsl::SMSessionConfiguration::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    if ((*(unsigned char *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 56))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 56) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 56) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 56) & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  }
  return v2;
}

uint64_t CMMsl::SMSessionConfiguration::hash_value(CMMsl::SMSessionConfiguration *this)
{
  if ((*((unsigned char *)this + 56) & 0x10) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 56) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_21:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 56) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_22:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 56) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_23:
    double v4 = 0.0;
    if (*((unsigned char *)this + 56)) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
  double v1 = *((double *)this + 5);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 8) == 0) {
    goto LABEL_21;
  }
LABEL_3:
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 2) == 0) {
    goto LABEL_22;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 4) == 0) {
    goto LABEL_23;
  }
LABEL_9:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if (*((unsigned char *)this + 56))
  {
LABEL_12:
    double v5 = *((double *)this + 1);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if ((*((unsigned char *)this + 56) & 0x20) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    double v6 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6;
  }
LABEL_24:
  double v5 = 0.0;
  if ((*((unsigned char *)this + 56) & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  double v6 = *((double *)this + 6);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6;
}

void CMMsl::SPUPlaybackExampleDeviceMotion::~SPUPlaybackExampleDeviceMotion(CMMsl::SPUPlaybackExampleDeviceMotion *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A8D90;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::SPUPlaybackExampleDeviceMotion::~SPUPlaybackExampleDeviceMotion(this);

  operator delete();
}

void *CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(void *this, const CMMsl::SPUPlaybackExampleDeviceMotion *a2)
{
  *this = off_1003A8D90;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::SPUPlaybackExampleDeviceMotion *CMMsl::SPUPlaybackExampleDeviceMotion::operator=(const CMMsl::SPUPlaybackExampleDeviceMotion *a1, const CMMsl::SPUPlaybackExampleDeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::SPUPlaybackExampleDeviceMotion::~SPUPlaybackExampleDeviceMotion((CMMsl::SPUPlaybackExampleDeviceMotion *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SPUPlaybackExampleDeviceMotion *a2, CMMsl::SPUPlaybackExampleDeviceMotion *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(void *a1, uint64_t a2)
{
  *a1 = off_1003A8D90;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A8D90;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A8D90;
    v6[1] = v4;
    CMMsl::SPUPlaybackExampleDeviceMotion::~SPUPlaybackExampleDeviceMotion((CMMsl::SPUPlaybackExampleDeviceMotion *)v6);
  }
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::formatText(CMMsl::SPUPlaybackExampleDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::readFrom(CMMsl::SPUPlaybackExampleDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::DeviceMotion *CMMsl::SPUPlaybackExampleDeviceMotion::hash_value(CMMsl::SPUPlaybackExampleDeviceMotion *this)
{
  uint64_t result = (CMMsl::DeviceMotion *)*((void *)this + 1);
  if (result) {
    return (CMMsl::DeviceMotion *)CMMsl::DeviceMotion::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::SPUPlaybackExampleMotionStateUpdate::~SPUPlaybackExampleMotionStateUpdate(CMMsl::SPUPlaybackExampleMotionStateUpdate *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A8DC8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::SPUPlaybackExampleMotionStateUpdate::~SPUPlaybackExampleMotionStateUpdate(this);

  operator delete();
}

void *CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(void *this, const CMMsl::SPUPlaybackExampleMotionStateUpdate *a2)
{
  *this = off_1003A8DC8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::SPUPlaybackExampleMotionStateUpdate *CMMsl::SPUPlaybackExampleMotionStateUpdate::operator=(const CMMsl::SPUPlaybackExampleMotionStateUpdate *a1, const CMMsl::SPUPlaybackExampleMotionStateUpdate *a2)
{
  if (a1 != a2)
  {
    CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::SPUPlaybackExampleMotionStateUpdate::~SPUPlaybackExampleMotionStateUpdate((CMMsl::SPUPlaybackExampleMotionStateUpdate *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SPUPlaybackExampleMotionStateUpdate *a2, CMMsl::SPUPlaybackExampleMotionStateUpdate *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(void *a1, uint64_t a2)
{
  *a1 = off_1003A8DC8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A8DC8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A8DC8;
    v6[1] = v4;
    CMMsl::SPUPlaybackExampleMotionStateUpdate::~SPUPlaybackExampleMotionStateUpdate((CMMsl::SPUPlaybackExampleMotionStateUpdate *)v6);
  }
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::formatText(CMMsl::SPUPlaybackExampleMotionStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::readFrom(CMMsl::SPUPlaybackExampleMotionStateUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::MotionStateUpdate *CMMsl::SPUPlaybackExampleMotionStateUpdate::hash_value(CMMsl::SPUPlaybackExampleMotionStateUpdate *this)
{
  uint64_t result = (CMMsl::MotionStateUpdate *)*((void *)this + 1);
  if (result) {
    return (CMMsl::MotionStateUpdate *)CMMsl::MotionStateUpdate::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::SafetyCompanionStatus::~SafetyCompanionStatus(CMMsl::SafetyCompanionStatus *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::SafetyCompanionStatus::SafetyCompanionStatus(uint64_t this, const CMMsl::SafetyCompanionStatus *a2)
{
  *(void *)this = off_1003A8E00;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::SafetyCompanionStatus *CMMsl::SafetyCompanionStatus::operator=(const CMMsl::SafetyCompanionStatus *a1, const CMMsl::SafetyCompanionStatus *a2)
{
  if (a1 != a2)
  {
    CMMsl::SafetyCompanionStatus::SafetyCompanionStatus((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SafetyCompanionStatus *a2, CMMsl::SafetyCompanionStatus *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::SafetyCompanionStatus(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A8E00;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = off_1003A8E00;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SafetyCompanionStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = off_1003A8E00;
    v8[1] = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SafetyCompanionStatus::formatText(CMMsl::SafetyCompanionStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "code", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SafetyCompanionStatus::readFrom(CMMsl::SafetyCompanionStatus *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          unint64_t v3 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
LABEL_59:
          unint64_t v3 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v3 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v3;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((void *)this + 1) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyCompanionStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::hash_value(CMMsl::SafetyCompanionStatus *this)
{
  if (*((unsigned char *)this + 20))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::SafetyHertzSample::~SafetyHertzSample(CMMsl::SafetyHertzSample *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::SafetyHertzSample::SafetyHertzSample(uint64_t this, const CMMsl::SafetyHertzSample *a2)
{
  *(void *)this = off_1003A8E38;
  *(_DWORD *)(this + 24) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 24) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 24) = v3 | 2;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t CMMsl::SafetyHertzSample::operator=(uint64_t a1, const CMMsl::SafetyHertzSample *a2)
{
  if ((const CMMsl::SafetyHertzSample *)a1 != a2)
  {
    CMMsl::SafetyHertzSample::SafetyHertzSample((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SafetyHertzSample *a2, CMMsl::SafetyHertzSample *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::SafetyHertzSample::SafetyHertzSample(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A8E38;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = off_1003A8E38;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SafetyHertzSample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v10 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[0] = off_1003A8E38;
    v9[1] = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    *(void *)(a1 + 16) = v7;
    void v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::SafetyHertzSample::formatText(CMMsl::SafetyHertzSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dramDurationMs", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  if ((*((unsigned char *)this + 24) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "vehicularFlags", *((_DWORD *)this + 5));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SafetyHertzSample::readFrom(CMMsl::SafetyHertzSample *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_80;
            }
            unint64_t v46 = v27++;
            char v47 = *(unsigned char *)(v28 + v46);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            BOOL v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_79;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_79:
          unint64_t v3 = v46 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_80:
        *((_DWORD *)this + 4) = v31;
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_85;
            }
            unint64_t v50 = v33++;
            char v51 = *(unsigned char *)(v34 + v50);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            BOOL v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_84;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
LABEL_84:
          unint64_t v3 = v50 + 1;
        }
        else
        {
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          while (1)
          {
            unint64_t v3 = v33 + 1;
            *((void *)a2 + 1) = v33 + 1;
            char v38 = *(unsigned char *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            unint64_t v33 = v3;
            BOOL v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_85:
        *((_DWORD *)this + 5) = v37;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_75;
            }
            unint64_t v42 = v21++;
            char v43 = *(unsigned char *)(v22 + v42);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0) {
              break;
            }
            v40 += 7;
            BOOL v14 = v41++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_74;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
LABEL_74:
          unint64_t v3 = v42 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v3 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v3;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_75:
        *((void *)this + 1) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyHertzSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 24) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 2u);
    if ((*(unsigned char *)(v3 + 24) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  unsigned int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 3u);
}

uint64_t CMMsl::SafetyHertzSample::hash_value(CMMsl::SafetyHertzSample *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  uint64_t v1 = *((void *)this + 1);
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 4);
  return v2 ^ v1 ^ v3;
}

void CMMsl::SafetyRemoteSample::~SafetyRemoteSample(CMMsl::SafetyRemoteSample *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::SafetyRemoteSample::SafetyRemoteSample(uint64_t this, const CMMsl::SafetyRemoteSample *a2)
{
  *(void *)this = off_1003A8E70;
  *(_DWORD *)(this + 52) = 0;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    int v4 = *((_DWORD *)a2 + 11);
    char v3 = 32;
    *(unsigned char *)(this + 52) = 32;
    *(_DWORD *)(this + 44) = v4;
    char v2 = *((unsigned char *)a2 + 52);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 52) & 0x40) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 12);
    v3 |= 0x40u;
    *(unsigned char *)(this + 52) = v3;
    *(_DWORD *)(this + 48) = v5;
    char v2 = *((unsigned char *)a2 + 52);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 10);
    v3 |= 0x10u;
    *(unsigned char *)(this + 52) = v3;
    *(_DWORD *)(this + 40) = v6;
    char v2 = *((unsigned char *)a2 + 52);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 4);
  v3 |= 8u;
  *(unsigned char *)(this + 52) = v3;
  *(void *)(this + 32) = v7;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v8 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 52) = v3;
  *(void *)(this + 8) = v8;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_16:
    uint64_t v10 = *((void *)a2 + 2);
    *(unsigned char *)(this + 52) = v3 | 2;
    *(void *)(this + 16) = v10;
    return this;
  }
LABEL_15:
  uint64_t v9 = *((void *)a2 + 3);
  v3 |= 4u;
  *(unsigned char *)(this + 52) = v3;
  *(void *)(this + 24) = v9;
  if ((*((unsigned char *)a2 + 52) & 2) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::operator=(uint64_t a1, const CMMsl::SafetyRemoteSample *a2)
{
  if ((const CMMsl::SafetyRemoteSample *)a1 != a2)
  {
    CMMsl::SafetyRemoteSample::SafetyRemoteSample((uint64_t)v7, a2);
    long long v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v10 = v3;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SafetyRemoteSample *a2, CMMsl::SafetyRemoteSample *a3)
{
  int v3 = *(_DWORD *)(this + 52);
  *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  int v4 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  int v5 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  int v6 = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  uint64_t v7 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  uint64_t v10 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::SafetyRemoteSample(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A8E70;
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = off_1003A8E70;
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SafetyRemoteSample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v9 = off_1003A8E70;
    long long v3 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 52) = 0;
    long long v4 = *(_OWORD *)(a1 + 40);
    long long v11 = *(_OWORD *)(a1 + 24);
    long long v12 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 8) = v6;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::SafetyRemoteSample::formatText(CMMsl::SafetyRemoteSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 52);
  if (v5)
  {
    PB::TextFormatter::format(a2, "createdAtTimestamp", *((void *)this + 1));
    char v5 = *((unsigned char *)this + 52);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 52) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochNumber", *((_DWORD *)this + 10));
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "epochTimestamp", *((void *)this + 2));
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "lastRealTriggerTimestamp", *((void *)this + 3));
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "mode", *((_DWORD *)this + 11));
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "receivedAtTimestamp", *((void *)this + 4));
  if ((*((unsigned char *)this + 52) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "sessionNumber", *((_DWORD *)this + 12));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SafetyRemoteSample::readFrom(CMMsl::SafetyRemoteSample *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)a2 + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          unint64_t v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 2u:
              *((unsigned char *)this + 52) |= 0x20u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v64 = 0;
                unsigned int v65 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_135;
                  }
                  unint64_t v66 = v21++;
                  char v67 = *(unsigned char *)(v22 + v66);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v67 & 0x7F) << v64;
                  if ((v67 & 0x80) == 0) {
                    break;
                  }
                  v64 += 7;
                  BOOL v14 = v65++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_134;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
LABEL_134:
                unint64_t v3 = v66 + 1;
              }
              else
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                do
                {
                  unint64_t v3 = v21 + 1;
                  *((void *)a2 + 1) = v21 + 1;
                  char v26 = *(unsigned char *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0) {
                    goto LABEL_135;
                  }
                  v23 += 7;
                  unint64_t v21 = v3;
                  BOOL v14 = v24++ > 8;
                }
                while (!v14);
                LODWORD(v25) = 0;
              }
LABEL_135:
              *((_DWORD *)this + 11) = v25;
              goto LABEL_166;
            case 3u:
              *((unsigned char *)this + 52) |= 0x40u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v72 = 0;
                unsigned int v73 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_145;
                  }
                  unint64_t v74 = v33++;
                  char v75 = *(unsigned char *)(v34 + v74);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v75 & 0x7F) << v72;
                  if ((v75 & 0x80) == 0) {
                    break;
                  }
                  v72 += 7;
                  BOOL v14 = v73++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_144:
                    unint64_t v3 = v74 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_144;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v3 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v35 += 7;
                unint64_t v33 = v3;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_145:
              *((_DWORD *)this + 12) = v37;
              goto LABEL_166;
            case 4u:
              *((unsigned char *)this + 52) |= 0x10u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v76 = 0;
                unsigned int v77 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_150;
                  }
                  unint64_t v78 = v39++;
                  char v79 = *(unsigned char *)(v40 + v78);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v79 & 0x7F) << v76;
                  if ((v79 & 0x80) == 0) {
                    break;
                  }
                  v76 += 7;
                  BOOL v14 = v77++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_149:
                    unint64_t v3 = v78 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_149;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v3 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v41 += 7;
                unint64_t v39 = v3;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_150:
              *((_DWORD *)this + 10) = v43;
              goto LABEL_166;
            case 5u:
              *((unsigned char *)this + 52) |= 8u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v80 = 0;
                unsigned int v81 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v45)
                  {
                    uint64_t v49 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_155;
                  }
                  unint64_t v82 = v45++;
                  char v83 = *(unsigned char *)(v46 + v82);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v83 & 0x7F) << v80;
                  if ((v83 & 0x80) == 0) {
                    break;
                  }
                  v80 += 7;
                  BOOL v14 = v81++ > 8;
                  if (v14)
                  {
                    uint64_t v49 = 0;
LABEL_154:
                    unint64_t v3 = v82 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v49 = 0;
                }
                goto LABEL_154;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v3 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_155;
                }
                v47 += 7;
                unint64_t v45 = v3;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              uint64_t v49 = 0;
LABEL_155:
              *((void *)this + 4) = v49;
              goto LABEL_166;
            case 6u:
              *((unsigned char *)this + 52) |= 1u;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v84 = 0;
                unsigned int v85 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v51)
                  {
                    uint64_t v55 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_160;
                  }
                  unint64_t v86 = v51++;
                  char v87 = *(unsigned char *)(v52 + v86);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v87 & 0x7F) << v84;
                  if ((v87 & 0x80) == 0) {
                    break;
                  }
                  v84 += 7;
                  BOOL v14 = v85++ > 8;
                  if (v14)
                  {
                    uint64_t v55 = 0;
LABEL_159:
                    unint64_t v3 = v86 + 1;
                    goto LABEL_160;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v55 = 0;
                }
                goto LABEL_159;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v3 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_160;
                }
                v53 += 7;
                unint64_t v51 = v3;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              uint64_t v55 = 0;
LABEL_160:
              *((void *)this + 1) = v55;
              goto LABEL_166;
            default:
              if (v20 == 100)
              {
                *((unsigned char *)this + 52) |= 4u;
                unint64_t v57 = *((void *)a2 + 1);
                unint64_t v2 = *((void *)a2 + 2);
                uint64_t v58 = *(void *)a2;
                if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
                {
                  char v88 = 0;
                  unsigned int v89 = 0;
                  uint64_t v61 = 0;
                  if (v2 <= v57) {
                    unint64_t v3 = *((void *)a2 + 1);
                  }
                  else {
                    unint64_t v3 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v3 == v57)
                    {
                      uint64_t v61 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                      goto LABEL_165;
                    }
                    unint64_t v90 = v57++;
                    char v91 = *(unsigned char *)(v58 + v90);
                    *((void *)a2 + 1) = v57;
                    v61 |= (unint64_t)(v91 & 0x7F) << v88;
                    if ((v91 & 0x80) == 0) {
                      break;
                    }
                    v88 += 7;
                    BOOL v14 = v89++ > 8;
                    if (v14)
                    {
                      uint64_t v61 = 0;
                      goto LABEL_164;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v61 = 0;
                  }
LABEL_164:
                  unint64_t v3 = v90 + 1;
                }
                else
                {
                  char v59 = 0;
                  unsigned int v60 = 0;
                  uint64_t v61 = 0;
                  while (1)
                  {
                    unint64_t v3 = v57 + 1;
                    *((void *)a2 + 1) = v57 + 1;
                    char v62 = *(unsigned char *)(v58 + v57);
                    v61 |= (unint64_t)(v62 & 0x7F) << v59;
                    if ((v62 & 0x80) == 0) {
                      break;
                    }
                    v59 += 7;
                    unint64_t v57 = v3;
                    BOOL v14 = v60++ > 8;
                    if (v14)
                    {
                      uint64_t v61 = 0;
                      break;
                    }
                  }
                }
LABEL_165:
                *((void *)this + 3) = v61;
              }
              else if (v20 == 101)
              {
                *((unsigned char *)this + 52) |= 2u;
                unint64_t v27 = *((void *)a2 + 1);
                unint64_t v2 = *((void *)a2 + 2);
                uint64_t v28 = *(void *)a2;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  char v68 = 0;
                  unsigned int v69 = 0;
                  uint64_t v31 = 0;
                  if (v2 <= v27) {
                    unint64_t v3 = *((void *)a2 + 1);
                  }
                  else {
                    unint64_t v3 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v3 == v27)
                    {
                      uint64_t v31 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                      goto LABEL_140;
                    }
                    unint64_t v70 = v27++;
                    char v71 = *(unsigned char *)(v28 + v70);
                    *((void *)a2 + 1) = v27;
                    v31 |= (unint64_t)(v71 & 0x7F) << v68;
                    if ((v71 & 0x80) == 0) {
                      break;
                    }
                    v68 += 7;
                    BOOL v14 = v69++ > 8;
                    if (v14)
                    {
                      uint64_t v31 = 0;
                      goto LABEL_139;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v31 = 0;
                  }
LABEL_139:
                  unint64_t v3 = v70 + 1;
                }
                else
                {
                  char v29 = 0;
                  unsigned int v30 = 0;
                  uint64_t v31 = 0;
                  while (1)
                  {
                    unint64_t v3 = v27 + 1;
                    *((void *)a2 + 1) = v27 + 1;
                    char v32 = *(unsigned char *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0) {
                      break;
                    }
                    v29 += 7;
                    unint64_t v27 = v3;
                    BOOL v14 = v30++ > 8;
                    if (v14)
                    {
                      uint64_t v31 = 0;
                      break;
                    }
                  }
                }
LABEL_140:
                *((void *)this + 2) = v31;
              }
              else
              {
                uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
                if (!result) {
                  return result;
                }
                unint64_t v3 = *((void *)a2 + 1);
                unint64_t v2 = *((void *)a2 + 2);
              }
LABEL_166:
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyRemoteSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 52);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 44), 2u);
    char v4 = *(unsigned char *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 52) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 3u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 4u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 5u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0x64u);
    if ((*(unsigned char *)(v3 + 52) & 2) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 6u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_15:
  unint64_t v5 = *(void *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 0x65u);
}

uint64_t CMMsl::SafetyRemoteSample::hash_value(CMMsl::SafetyRemoteSample *this)
{
  if ((*((unsigned char *)this + 52) & 0x20) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 11);
    if ((*((unsigned char *)this + 52) & 0x40) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 12);
      if ((*((unsigned char *)this + 52) & 0x10) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 52) & 0x40) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 52) & 0x10) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 10);
    if ((*((unsigned char *)this + 52) & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 52) & 8) != 0)
  {
LABEL_5:
    uint64_t v4 = *((void *)this + 4);
    if (*((unsigned char *)this + 52)) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v4 = 0;
  if (*((unsigned char *)this + 52))
  {
LABEL_6:
    uint64_t v5 = *((void *)this + 1);
    if ((*((unsigned char *)this + 52) & 4) != 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 52) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_15:
    uint64_t v7 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
  }
LABEL_13:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 52) & 4) == 0) {
    goto LABEL_14;
  }
LABEL_7:
  uint64_t v6 = *((void *)this + 3);
  if ((*((unsigned char *)this + 52) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v7 = *((void *)this + 2);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::SafetyTrustedAudioResult::~SafetyTrustedAudioResult(CMMsl::SafetyTrustedAudioResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult(uint64_t this, const CMMsl::SafetyTrustedAudioResult *a2)
{
  *(void *)this = off_1003A8EA8;
  *(void *)(this + 212) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x800) != 0)
  {
    uint64_t v4 = *((void *)a2 + 12);
    uint64_t v3 = 2048;
    *(void *)(this + 212) = 2048;
    *(void *)(this + 96) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 212);
    if ((v2 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x200000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 35);
    v3 |= 0x200000uLL;
    *(void *)(this + 212) = v3;
    *(_DWORD *)(this + 140) = v5;
    uint64_t v2 = *(void *)((char *)a2 + 212);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    uint64_t v6 = *((void *)a2 + 7);
    v3 |= 0x40uLL;
    *(void *)(this + 212) = v3;
    *(void *)(this + 56) = v6;
    uint64_t v2 = *(void *)((char *)a2 + 212);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_47;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 30);
  v3 |= 0x10000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 120) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v8 = *((_DWORD *)a2 + 38);
  v3 |= 0x1000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 152) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v9 = *((_DWORD *)a2 + 34);
  v3 |= 0x100000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 136) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v10 = *((void *)a2 + 6);
  v3 |= 0x20uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 48) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v11 = *((_DWORD *)a2 + 32);
  v3 |= 0x40000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 128) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x800000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v12 = *((_DWORD *)a2 + 37);
  v3 |= 0x800000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 148) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x400000) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v13 = *((_DWORD *)a2 + 36);
  v3 |= 0x400000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 144) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v14 = *((void *)a2 + 8);
  v3 |= 0x80uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 64) = v14;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x20000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v15 = *((_DWORD *)a2 + 31);
  v3 |= 0x20000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 124) = v15;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v16 = *((_DWORD *)a2 + 33);
  v3 |= 0x80000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 132) = v16;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v17 = *((_DWORD *)a2 + 44);
  v3 |= 0x40000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 176) = v17;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v18 = *((void *)a2 + 10);
  v3 |= 0x200uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 80) = v18;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v19 = *((_DWORD *)a2 + 39);
  v3 |= 0x2000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 156) = v19;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v20 = *((_DWORD *)a2 + 47);
  v3 |= 0x200000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 188) = v20;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v21 = *((_DWORD *)a2 + 43);
  v3 |= 0x20000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 172) = v21;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v22 = *((void *)a2 + 9);
  v3 |= 0x100uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 72) = v22;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v23 = *((_DWORD *)a2 + 41);
  v3 |= 0x8000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 164) = v23;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v24 = *((_DWORD *)a2 + 46);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 184) = v24;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v25 = *((_DWORD *)a2 + 45);
  v3 |= 0x80000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 180) = v25;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x400) == 0)
  {
LABEL_27:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v26 = *((void *)a2 + 11);
  v3 |= 0x400uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 88) = v26;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_67;
  }
LABEL_66:
  int v27 = *((_DWORD *)a2 + 40);
  v3 |= 0x4000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 160) = v27;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v28 = *((_DWORD *)a2 + 42);
  v3 |= 0x10000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 168) = v28;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x2000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_69;
  }
LABEL_68:
  int v29 = *((_DWORD *)a2 + 27);
  v3 |= 0x2000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 108) = v29;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }
LABEL_69:
  int v30 = *((_DWORD *)a2 + 29);
  v3 |= 0x8000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 116) = v30;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x4000) == 0)
  {
LABEL_32:
    if ((v2 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }
LABEL_70:
  int v31 = *((_DWORD *)a2 + 28);
  v3 |= 0x4000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 112) = v31;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x10) == 0)
  {
LABEL_33:
    if ((v2 & 8) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v32 = *((void *)a2 + 5);
  v3 |= 0x10uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 40) = v32;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 8) == 0)
  {
LABEL_34:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v33 = *((void *)a2 + 4);
  v3 |= 8uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 32) = v33;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }
LABEL_73:
  int v34 = *((_DWORD *)a2 + 49);
  v3 |= 0x800000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 196) = v34;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_75;
  }
LABEL_74:
  int v35 = *((_DWORD *)a2 + 51);
  v3 |= 0x2000000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 204) = v35;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_76;
  }
LABEL_75:
  int v36 = *((_DWORD *)a2 + 50);
  v3 |= 0x1000000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 200) = v36;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x4000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_77;
  }
LABEL_76:
  int v37 = *((_DWORD *)a2 + 48);
  v3 |= 0x400000000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 192) = v37;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x8000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_78;
  }
LABEL_77:
  char v38 = *((unsigned char *)a2 + 208);
  v3 |= 0x4000000000uLL;
  *(void *)(this + 212) = v3;
  *(unsigned char *)(this + 208) = v38;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_79;
  }
LABEL_78:
  char v39 = *((unsigned char *)a2 + 209);
  v3 |= 0x8000000000uLL;
  *(void *)(this + 212) = v3;
  *(unsigned char *)(this + 209) = v39;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 0x1000) == 0)
  {
LABEL_41:
    if ((v2 & 4) == 0) {
      goto LABEL_42;
    }
    goto LABEL_80;
  }
LABEL_79:
  int v40 = *((_DWORD *)a2 + 26);
  v3 |= 0x1000uLL;
  *(void *)(this + 212) = v3;
  *(_DWORD *)(this + 104) = v40;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 4) == 0)
  {
LABEL_42:
    if ((v2 & 2) == 0) {
      goto LABEL_43;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v41 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 24) = v41;
  uint64_t v2 = *(void *)((char *)a2 + 212);
  if ((v2 & 2) == 0)
  {
LABEL_43:
    if ((v2 & 1) == 0) {
      return this;
    }
LABEL_82:
    uint64_t v43 = *((void *)a2 + 1);
    *(void *)(this + 212) = v3 | 1;
    *(void *)(this + 8) = v43;
    return this;
  }
LABEL_81:
  uint64_t v42 = *((void *)a2 + 2);
  v3 |= 2uLL;
  *(void *)(this + 212) = v3;
  *(void *)(this + 16) = v42;
  if (*(void *)((unsigned char *)a2 + 212)) {
    goto LABEL_82;
  }
  return this;
}

CMMsl *CMMsl::SafetyTrustedAudioResult::operator=(CMMsl *a1, const CMMsl::SafetyTrustedAudioResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SafetyTrustedAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SafetyTrustedAudioResult *a2, CMMsl::SafetyTrustedAudioResult *a3)
{
  uint64_t v3 = *(void *)((char *)this + 212);
  *(void *)((char *)this + 212) = *(void *)((char *)a2 + 212);
  *(void *)((char *)a2 + 212) = v3;
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v4;
  int v5 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v5;
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v7;
  int v8 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v8;
  int v9 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  int v11 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v11;
  int v12 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v12;
  int v13 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v13;
  uint64_t v14 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v14;
  int v15 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v15;
  int v16 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v16;
  int v17 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v17;
  uint64_t v18 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v18;
  int v19 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v19;
  int v20 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v20;
  int v21 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v21;
  uint64_t v22 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v22;
  int v23 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v23;
  int v24 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v24;
  int v25 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v25;
  uint64_t v26 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v26;
  int v27 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v27;
  int v28 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v28;
  int v29 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v29;
  LODWORD(v26) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v26;
  LODWORD(v26) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v26;
  uint64_t v30 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v30;
  uint64_t v31 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v31;
  int v32 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v32;
  int v33 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v33;
  int v34 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v34;
  float result = *((float *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((float *)a2 + 48) = result;
  LOBYTE(v31) = *((unsigned char *)this + 208);
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 208);
  *((unsigned char *)a2 + 208) = v31;
  LOBYTE(v31) = *((unsigned char *)this + 209);
  *((unsigned char *)this + 209) = *((unsigned char *)a2 + 209);
  *((unsigned char *)a2 + 209) = v31;
  LODWORD(v31) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v31;
  uint64_t v36 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v36;
  uint64_t v37 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v37;
  uint64_t v38 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v38;
  return result;
}

float CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8EA8;
  *(void *)(a1 + 212) = *(void *)(a2 + 212);
  *(void *)(a2 + 212) = 0;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  float result = *(float *)(a2 + 192);
  *(float *)(a1 + 192) = result;
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return result;
}

CMMsl *CMMsl::SafetyTrustedAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SafetyTrustedAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SafetyTrustedAudioResult::formatText(CMMsl::SafetyTrustedAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 212);
  if (v5)
  {
    PB::TextFormatter::format(a2, "calculationTimestamp", *((void *)this + 1));
    uint64_t v5 = *(void *)((char *)this + 212);
    if ((v5 & 0x1000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_47;
    }
  }
  else if ((v5 & 0x1000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dramDuration", *((_DWORD *)this + 26));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "dramMaxTimestamp", *((void *)this + 2));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "dramMinTimestamp", *((void *)this + 3));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "epochMaxTimestamp", *((void *)this + 4));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "epochMinTimestamp", *((void *)this + 5));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "maxRMS", *((float *)this + 27));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "numPointsInEpoch", *((_DWORD *)this + 28));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "numShortAudio", *((_DWORD *)this + 29));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "planarChaosAtMaxEnergy", *((float *)this + 30));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "planarChaosAtMaxSaturation", *((float *)this + 31));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "planarEnergyAtMaxChaos", *((float *)this + 32));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "planarEnergyAtMaxSaturation", *((float *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "planarMaxChaos", *((float *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x200000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "planarMaxEnergy", *((float *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "planarMaxSaturation", *((float *)this + 36));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "planarPassThru", *((unsigned char *)this + 208));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x800000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "planarSaturationAtMaxChaos", *((float *)this + 37));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "planarSaturationAtMaxEnergy", *((float *)this + 38));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x20) == 0)
  {
LABEL_21:
    if ((v5 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "planarTimestampAtMaxChaos", *((void *)this + 6));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x40) == 0)
  {
LABEL_22:
    if ((v5 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "planarTimestampAtMaxEnergy", *((void *)this + 7));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x80) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "planarTimestampAtMaxSaturation", *((void *)this + 8));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "rolloverChaosAtMaxEnergy", *((float *)this + 39));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "rolloverChaosAtMaxSaturation", *((float *)this + 40));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "rolloverEnergyAtMaxChaos", *((float *)this + 41));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "rolloverEnergyAtMaxSaturation", *((float *)this + 42));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "rolloverMaxChaos", *((float *)this + 43));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "rolloverMaxEnergy", *((float *)this + 44));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "rolloverMaxSaturation", *((float *)this + 45));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "rolloverPassThru", *((unsigned char *)this + 209));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "rolloverSaturationAtMaxChaos", *((float *)this + 46));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100) == 0) {
      goto LABEL_34;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "rolloverSaturationAtMaxEnergy", *((float *)this + 47));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x100) == 0)
  {
LABEL_34:
    if ((v5 & 0x200) == 0) {
      goto LABEL_35;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "rolloverTimestampAtMaxChaos", *((void *)this + 9));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x200) == 0)
  {
LABEL_35:
    if ((v5 & 0x400) == 0) {
      goto LABEL_36;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "rolloverTimestampAtMaxEnergy", *((void *)this + 10));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x400) == 0)
  {
LABEL_36:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "rolloverTimestampAtMaxSaturation", *((void *)this + 11));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "soundEnvelopeCount", *((float *)this + 48));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "soundMaxMeanOverArmSession", *((float *)this + 49));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "soundMeanCurrentWindow", *((float *)this + 50));
  uint64_t v5 = *(void *)((char *)this + 212);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x800) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "soundMeanLast15s", *((float *)this + 51));
  if ((*(void *)((unsigned char *)this + 212) & 0x800) != 0) {
LABEL_41:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 12));
LABEL_42:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SafetyTrustedAudioResult::readFrom(CMMsl::SafetyTrustedAudioResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)((char *)this + 212) |= 0x800uLL;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            char v172 = 0;
            unsigned int v173 = 0;
            uint64_t v25 = 0;
            if (v21 <= v20) {
              unint64_t v21 = *((void *)a2 + 1);
            }
            do
            {
              if (v21 == v20)
              {
                uint64_t v25 = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_321;
              }
              unint64_t v174 = v20 + 1;
              char v175 = *(unsigned char *)(v22 + v20);
              *((void *)a2 + 1) = v174;
              v25 |= (unint64_t)(v175 & 0x7F) << v172;
              if ((v175 & 0x80) == 0)
              {
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_321;
              }
              v172 += 7;
              unint64_t v20 = v174;
              BOOL v14 = v173++ > 8;
            }
            while (!v14);
LABEL_208:
            uint64_t v25 = 0;
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
              if (v14) {
                goto LABEL_208;
              }
            }
          }
LABEL_321:
          *((void *)this + 12) = v25;
          goto LABEL_313;
        case 2u:
          *(void *)((char *)this + 212) |= 0x200000uLL;
          unint64_t v29 = *((void *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v29);
          goto LABEL_312;
        case 3u:
          *(void *)((char *)this + 212) |= 0x40uLL;
          unint64_t v30 = *((void *)a2 + 1);
          unint64_t v31 = *((void *)a2 + 2);
          uint64_t v32 = *(void *)a2;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v35 = 0;
            do
            {
              unint64_t v36 = v30 + 1;
              *((void *)a2 + 1) = v30 + 1;
              char v37 = *(unsigned char *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0) {
                goto LABEL_325;
              }
              v33 += 7;
              unint64_t v30 = v36;
              BOOL v14 = v34++ > 8;
            }
            while (!v14);
LABEL_215:
            uint64_t v35 = 0;
            goto LABEL_325;
          }
          char v176 = 0;
          unsigned int v177 = 0;
          uint64_t v35 = 0;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v31 == v30)
            {
              uint64_t v35 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v178 = v30 + 1;
              char v179 = *(unsigned char *)(v32 + v30);
              *((void *)a2 + 1) = v178;
              v35 |= (unint64_t)(v179 & 0x7F) << v176;
              if (v179 < 0)
              {
                v176 += 7;
                unint64_t v30 = v178;
                BOOL v14 = v177++ > 8;
                if (v14) {
                  goto LABEL_215;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v35 = 0;
              }
            }
            break;
          }
LABEL_325:
          *((void *)this + 7) = v35;
          goto LABEL_313;
        case 4u:
          *(void *)((char *)this + 212) |= 0x10000uLL;
          unint64_t v38 = *((void *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v38);
          goto LABEL_312;
        case 5u:
          *(void *)((char *)this + 212) |= 0x1000000uLL;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v39);
          goto LABEL_312;
        case 6u:
          *(void *)((char *)this + 212) |= 0x100000uLL;
          unint64_t v40 = *((void *)a2 + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v40);
          goto LABEL_312;
        case 7u:
          *(void *)((char *)this + 212) |= 0x20uLL;
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          uint64_t v43 = *(void *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)a2 + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_329;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v14 = v45++ > 8;
            }
            while (!v14);
LABEL_222:
            uint64_t v46 = 0;
            goto LABEL_329;
          }
          char v180 = 0;
          unsigned int v181 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              uint64_t v46 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v182 = v41 + 1;
              char v183 = *(unsigned char *)(v43 + v41);
              *((void *)a2 + 1) = v182;
              v46 |= (unint64_t)(v183 & 0x7F) << v180;
              if (v183 < 0)
              {
                v180 += 7;
                unint64_t v41 = v182;
                BOOL v14 = v181++ > 8;
                if (v14) {
                  goto LABEL_222;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v46 = 0;
              }
            }
            break;
          }
LABEL_329:
          *((void *)this + 6) = v46;
          goto LABEL_313;
        case 8u:
          *(void *)((char *)this + 212) |= 0x40000uLL;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v49);
          goto LABEL_312;
        case 9u:
          *(void *)((char *)this + 212) |= 0x800000uLL;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v50);
          goto LABEL_312;
        case 0xAu:
          *(void *)((char *)this + 212) |= 0x400000uLL;
          unint64_t v51 = *((void *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v51);
          goto LABEL_312;
        case 0xBu:
          *(void *)((char *)this + 212) |= 0x80uLL;
          unint64_t v52 = *((void *)a2 + 1);
          unint64_t v53 = *((void *)a2 + 2);
          uint64_t v54 = *(void *)a2;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            char v55 = 0;
            unsigned int v56 = 0;
            uint64_t v57 = 0;
            do
            {
              unint64_t v58 = v52 + 1;
              *((void *)a2 + 1) = v52 + 1;
              char v59 = *(unsigned char *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0) {
                goto LABEL_333;
              }
              v55 += 7;
              unint64_t v52 = v58;
              BOOL v14 = v56++ > 8;
            }
            while (!v14);
LABEL_229:
            uint64_t v57 = 0;
            goto LABEL_333;
          }
          char v184 = 0;
          unsigned int v185 = 0;
          uint64_t v57 = 0;
          if (v53 <= v52) {
            unint64_t v53 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v53 == v52)
            {
              uint64_t v57 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v186 = v52 + 1;
              char v187 = *(unsigned char *)(v54 + v52);
              *((void *)a2 + 1) = v186;
              v57 |= (unint64_t)(v187 & 0x7F) << v184;
              if (v187 < 0)
              {
                v184 += 7;
                unint64_t v52 = v186;
                BOOL v14 = v185++ > 8;
                if (v14) {
                  goto LABEL_229;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v57 = 0;
              }
            }
            break;
          }
LABEL_333:
          *((void *)this + 8) = v57;
          goto LABEL_313;
        case 0xCu:
          *(void *)((char *)this + 212) |= 0x20000uLL;
          unint64_t v60 = *((void *)a2 + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v60);
          goto LABEL_312;
        case 0xDu:
          *(void *)((char *)this + 212) |= 0x80000uLL;
          unint64_t v61 = *((void *)a2 + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v61);
          goto LABEL_312;
        case 0xEu:
          *(void *)((char *)this + 212) |= 0x40000000uLL;
          unint64_t v62 = *((void *)a2 + 1);
          if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v62);
          goto LABEL_312;
        case 0xFu:
          *(void *)((char *)this + 212) |= 0x200uLL;
          unint64_t v63 = *((void *)a2 + 1);
          unint64_t v64 = *((void *)a2 + 2);
          uint64_t v65 = *(void *)a2;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            char v66 = 0;
            unsigned int v67 = 0;
            uint64_t v68 = 0;
            do
            {
              unint64_t v69 = v63 + 1;
              *((void *)a2 + 1) = v63 + 1;
              char v70 = *(unsigned char *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0) {
                goto LABEL_337;
              }
              v66 += 7;
              unint64_t v63 = v69;
              BOOL v14 = v67++ > 8;
            }
            while (!v14);
LABEL_236:
            uint64_t v68 = 0;
            goto LABEL_337;
          }
          char v188 = 0;
          unsigned int v189 = 0;
          uint64_t v68 = 0;
          if (v64 <= v63) {
            unint64_t v64 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v64 == v63)
            {
              uint64_t v68 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v190 = v63 + 1;
              char v191 = *(unsigned char *)(v65 + v63);
              *((void *)a2 + 1) = v190;
              v68 |= (unint64_t)(v191 & 0x7F) << v188;
              if (v191 < 0)
              {
                v188 += 7;
                unint64_t v63 = v190;
                BOOL v14 = v189++ > 8;
                if (v14) {
                  goto LABEL_236;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v68 = 0;
              }
            }
            break;
          }
LABEL_337:
          *((void *)this + 10) = v68;
          goto LABEL_313;
        case 0x10u:
          *(void *)((char *)this + 212) |= 0x2000000uLL;
          unint64_t v71 = *((void *)a2 + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v71);
          goto LABEL_312;
        case 0x11u:
          *(void *)((char *)this + 212) |= 0x200000000uLL;
          unint64_t v72 = *((void *)a2 + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 47) = *(_DWORD *)(*(void *)a2 + v72);
          goto LABEL_312;
        case 0x12u:
          *(void *)((char *)this + 212) |= 0x20000000uLL;
          unint64_t v73 = *((void *)a2 + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v73);
          goto LABEL_312;
        case 0x13u:
          *(void *)((char *)this + 212) |= 0x100uLL;
          unint64_t v74 = *((void *)a2 + 1);
          unint64_t v75 = *((void *)a2 + 2);
          uint64_t v76 = *(void *)a2;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            char v77 = 0;
            unsigned int v78 = 0;
            uint64_t v79 = 0;
            do
            {
              unint64_t v80 = v74 + 1;
              *((void *)a2 + 1) = v74 + 1;
              char v81 = *(unsigned char *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0) {
                goto LABEL_341;
              }
              v77 += 7;
              unint64_t v74 = v80;
              BOOL v14 = v78++ > 8;
            }
            while (!v14);
LABEL_243:
            uint64_t v79 = 0;
            goto LABEL_341;
          }
          char v192 = 0;
          unsigned int v193 = 0;
          uint64_t v79 = 0;
          if (v75 <= v74) {
            unint64_t v75 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v75 == v74)
            {
              uint64_t v79 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v194 = v74 + 1;
              char v195 = *(unsigned char *)(v76 + v74);
              *((void *)a2 + 1) = v194;
              v79 |= (unint64_t)(v195 & 0x7F) << v192;
              if (v195 < 0)
              {
                v192 += 7;
                unint64_t v74 = v194;
                BOOL v14 = v193++ > 8;
                if (v14) {
                  goto LABEL_243;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v79 = 0;
              }
            }
            break;
          }
LABEL_341:
          *((void *)this + 9) = v79;
          goto LABEL_313;
        case 0x14u:
          *(void *)((char *)this + 212) |= 0x8000000uLL;
          unint64_t v82 = *((void *)a2 + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 41) = *(_DWORD *)(*(void *)a2 + v82);
          goto LABEL_312;
        case 0x15u:
          *(void *)((char *)this + 212) |= (unint64_t)&_mh_execute_header;
          unint64_t v83 = *((void *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 46) = *(_DWORD *)(*(void *)a2 + v83);
          goto LABEL_312;
        case 0x16u:
          *(void *)((char *)this + 212) |= 0x80000000uLL;
          unint64_t v84 = *((void *)a2 + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 45) = *(_DWORD *)(*(void *)a2 + v84);
          goto LABEL_312;
        case 0x17u:
          *(void *)((char *)this + 212) |= 0x400uLL;
          unint64_t v85 = *((void *)a2 + 1);
          unint64_t v86 = *((void *)a2 + 2);
          uint64_t v87 = *(void *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)a2 + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_345;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }
            while (!v14);
LABEL_250:
            uint64_t v90 = 0;
            goto LABEL_345;
          }
          char v196 = 0;
          unsigned int v197 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              uint64_t v90 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v198 = v85 + 1;
              char v199 = *(unsigned char *)(v87 + v85);
              *((void *)a2 + 1) = v198;
              v90 |= (unint64_t)(v199 & 0x7F) << v196;
              if (v199 < 0)
              {
                v196 += 7;
                unint64_t v85 = v198;
                BOOL v14 = v197++ > 8;
                if (v14) {
                  goto LABEL_250;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v90 = 0;
              }
            }
            break;
          }
LABEL_345:
          *((void *)this + 11) = v90;
          goto LABEL_313;
        case 0x18u:
          *(void *)((char *)this + 212) |= 0x4000000uLL;
          unint64_t v93 = *((void *)a2 + 1);
          if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 40) = *(_DWORD *)(*(void *)a2 + v93);
          goto LABEL_312;
        case 0x19u:
          *(void *)((char *)this + 212) |= 0x10000000uLL;
          unint64_t v94 = *((void *)a2 + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v94);
          goto LABEL_312;
        case 0x1Au:
          *(void *)((char *)this + 212) |= 0x2000uLL;
          unint64_t v95 = *((void *)a2 + 1);
          if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v95);
          goto LABEL_312;
        case 0x1Bu:
          *(void *)((char *)this + 212) |= 0x8000uLL;
          unint64_t v96 = *((void *)a2 + 1);
          unint64_t v97 = *((void *)a2 + 2);
          uint64_t v98 = *(void *)a2;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            char v99 = 0;
            unsigned int v100 = 0;
            uint64_t v101 = 0;
            do
            {
              unint64_t v102 = v96 + 1;
              *((void *)a2 + 1) = v96 + 1;
              char v103 = *(unsigned char *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0) {
                goto LABEL_377;
              }
              v99 += 7;
              unint64_t v96 = v102;
              BOOL v14 = v100++ > 8;
            }
            while (!v14);
LABEL_257:
            LODWORD(v101) = 0;
            goto LABEL_377;
          }
          char v200 = 0;
          unsigned int v201 = 0;
          uint64_t v101 = 0;
          if (v97 <= v96) {
            unint64_t v97 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v97 == v96)
            {
              LODWORD(v101) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v202 = v96 + 1;
              char v203 = *(unsigned char *)(v98 + v96);
              *((void *)a2 + 1) = v202;
              v101 |= (unint64_t)(v203 & 0x7F) << v200;
              if (v203 < 0)
              {
                v200 += 7;
                unint64_t v96 = v202;
                BOOL v14 = v201++ > 8;
                if (v14) {
                  goto LABEL_257;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v101) = 0;
              }
            }
            break;
          }
LABEL_377:
          *((_DWORD *)this + 29) = v101;
          goto LABEL_313;
        case 0x1Cu:
          *(void *)((char *)this + 212) |= 0x4000uLL;
          unint64_t v104 = *((void *)a2 + 1);
          unint64_t v105 = *((void *)a2 + 2);
          uint64_t v106 = *(void *)a2;
          if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
          {
            char v107 = 0;
            unsigned int v108 = 0;
            uint64_t v109 = 0;
            do
            {
              unint64_t v110 = v104 + 1;
              *((void *)a2 + 1) = v104 + 1;
              char v111 = *(unsigned char *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0) {
                goto LABEL_350;
              }
              v107 += 7;
              unint64_t v104 = v110;
              BOOL v14 = v108++ > 8;
            }
            while (!v14);
LABEL_264:
            LODWORD(v109) = 0;
            goto LABEL_350;
          }
          char v204 = 0;
          unsigned int v205 = 0;
          uint64_t v109 = 0;
          if (v105 <= v104) {
            unint64_t v105 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v105 == v104)
            {
              LODWORD(v109) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v206 = v104 + 1;
              char v207 = *(unsigned char *)(v106 + v104);
              *((void *)a2 + 1) = v206;
              v109 |= (unint64_t)(v207 & 0x7F) << v204;
              if (v207 < 0)
              {
                v204 += 7;
                unint64_t v104 = v206;
                BOOL v14 = v205++ > 8;
                if (v14) {
                  goto LABEL_264;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v109) = 0;
              }
            }
            break;
          }
LABEL_350:
          *((_DWORD *)this + 28) = v109;
          goto LABEL_313;
        case 0x1Du:
          *(void *)((char *)this + 212) |= 0x10uLL;
          unint64_t v112 = *((void *)a2 + 1);
          unint64_t v113 = *((void *)a2 + 2);
          uint64_t v114 = *(void *)a2;
          if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
          {
            char v115 = 0;
            unsigned int v116 = 0;
            uint64_t v117 = 0;
            do
            {
              unint64_t v118 = v112 + 1;
              *((void *)a2 + 1) = v112 + 1;
              char v119 = *(unsigned char *)(v114 + v112);
              v117 |= (unint64_t)(v119 & 0x7F) << v115;
              if ((v119 & 0x80) == 0) {
                goto LABEL_354;
              }
              v115 += 7;
              unint64_t v112 = v118;
              BOOL v14 = v116++ > 8;
            }
            while (!v14);
LABEL_271:
            uint64_t v117 = 0;
            goto LABEL_354;
          }
          char v208 = 0;
          unsigned int v209 = 0;
          uint64_t v117 = 0;
          if (v113 <= v112) {
            unint64_t v113 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v113 == v112)
            {
              uint64_t v117 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v210 = v112 + 1;
              char v211 = *(unsigned char *)(v114 + v112);
              *((void *)a2 + 1) = v210;
              v117 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                unint64_t v112 = v210;
                BOOL v14 = v209++ > 8;
                if (v14) {
                  goto LABEL_271;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v117 = 0;
              }
            }
            break;
          }
LABEL_354:
          *((void *)this + 5) = v117;
          goto LABEL_313;
        case 0x1Eu:
          *(void *)((char *)this + 212) |= 8uLL;
          unint64_t v120 = *((void *)a2 + 1);
          unint64_t v121 = *((void *)a2 + 2);
          uint64_t v122 = *(void *)a2;
          if (v120 <= 0xFFFFFFFFFFFFFFF5 && v120 + 10 <= v121)
          {
            char v123 = 0;
            unsigned int v124 = 0;
            uint64_t v125 = 0;
            do
            {
              unint64_t v126 = v120 + 1;
              *((void *)a2 + 1) = v120 + 1;
              char v127 = *(unsigned char *)(v122 + v120);
              v125 |= (unint64_t)(v127 & 0x7F) << v123;
              if ((v127 & 0x80) == 0) {
                goto LABEL_358;
              }
              v123 += 7;
              unint64_t v120 = v126;
              BOOL v14 = v124++ > 8;
            }
            while (!v14);
LABEL_278:
            uint64_t v125 = 0;
            goto LABEL_358;
          }
          char v212 = 0;
          unsigned int v213 = 0;
          uint64_t v125 = 0;
          if (v121 <= v120) {
            unint64_t v121 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v121 == v120)
            {
              uint64_t v125 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v214 = v120 + 1;
              char v215 = *(unsigned char *)(v122 + v120);
              *((void *)a2 + 1) = v214;
              v125 |= (unint64_t)(v215 & 0x7F) << v212;
              if (v215 < 0)
              {
                v212 += 7;
                unint64_t v120 = v214;
                BOOL v14 = v213++ > 8;
                if (v14) {
                  goto LABEL_278;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v125 = 0;
              }
            }
            break;
          }
LABEL_358:
          *((void *)this + 4) = v125;
          goto LABEL_313;
        case 0x1Fu:
          *(void *)((char *)this + 212) |= 0x800000000uLL;
          unint64_t v128 = *((void *)a2 + 1);
          if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 49) = *(_DWORD *)(*(void *)a2 + v128);
          goto LABEL_312;
        case 0x20u:
          *(void *)((char *)this + 212) |= 0x2000000000uLL;
          unint64_t v129 = *((void *)a2 + 1);
          if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 51) = *(_DWORD *)(*(void *)a2 + v129);
          goto LABEL_312;
        case 0x21u:
          *(void *)((char *)this + 212) |= 0x1000000000uLL;
          unint64_t v130 = *((void *)a2 + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)a2 + 2)) {
            goto LABEL_169;
          }
          *((_DWORD *)this + 50) = *(_DWORD *)(*(void *)a2 + v130);
          goto LABEL_312;
        case 0x22u:
          *(void *)((char *)this + 212) |= 0x400000000uLL;
          unint64_t v131 = *((void *)a2 + 1);
          if (v131 <= 0xFFFFFFFFFFFFFFFBLL && v131 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 48) = *(_DWORD *)(*(void *)a2 + v131);
LABEL_312:
            *((void *)a2 + 1) += 4;
          }
          else
          {
LABEL_169:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_313;
        case 0x23u:
          *(void *)((char *)this + 212) |= 0x4000000000uLL;
          unint64_t v132 = *((void *)a2 + 1);
          if (v132 >= *((void *)a2 + 2))
          {
            BOOL v135 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v133 = v132 + 1;
            int v134 = *(unsigned __int8 *)(*(void *)a2 + v132);
            *((void *)a2 + 1) = v133;
            BOOL v135 = v134 != 0;
          }
          *((unsigned char *)this + 208) = v135;
          goto LABEL_313;
        case 0x24u:
          *(void *)((char *)this + 212) |= 0x8000000000uLL;
          unint64_t v136 = *((void *)a2 + 1);
          if (v136 >= *((void *)a2 + 2))
          {
            BOOL v139 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v137 = v136 + 1;
            int v138 = *(unsigned __int8 *)(*(void *)a2 + v136);
            *((void *)a2 + 1) = v137;
            BOOL v139 = v138 != 0;
          }
          *((unsigned char *)this + 209) = v139;
          goto LABEL_313;
        case 0x25u:
          *(void *)((char *)this + 212) |= 0x1000uLL;
          unint64_t v140 = *((void *)a2 + 1);
          unint64_t v141 = *((void *)a2 + 2);
          uint64_t v142 = *(void *)a2;
          if (v140 <= 0xFFFFFFFFFFFFFFF5 && v140 + 10 <= v141)
          {
            char v143 = 0;
            unsigned int v144 = 0;
            uint64_t v145 = 0;
            do
            {
              unint64_t v146 = v140 + 1;
              *((void *)a2 + 1) = v140 + 1;
              char v147 = *(unsigned char *)(v142 + v140);
              v145 |= (unint64_t)(v147 & 0x7F) << v143;
              if ((v147 & 0x80) == 0) {
                goto LABEL_362;
              }
              v143 += 7;
              unint64_t v140 = v146;
              BOOL v14 = v144++ > 8;
            }
            while (!v14);
LABEL_289:
            LODWORD(v145) = 0;
            goto LABEL_362;
          }
          char v216 = 0;
          unsigned int v217 = 0;
          uint64_t v145 = 0;
          if (v141 <= v140) {
            unint64_t v141 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v141 == v140)
            {
              LODWORD(v145) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v218 = v140 + 1;
              char v219 = *(unsigned char *)(v142 + v140);
              *((void *)a2 + 1) = v218;
              v145 |= (unint64_t)(v219 & 0x7F) << v216;
              if (v219 < 0)
              {
                v216 += 7;
                unint64_t v140 = v218;
                BOOL v14 = v217++ > 8;
                if (v14) {
                  goto LABEL_289;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v145) = 0;
              }
            }
            break;
          }
LABEL_362:
          *((_DWORD *)this + 26) = v145;
          goto LABEL_313;
        case 0x26u:
          *(void *)((char *)this + 212) |= 4uLL;
          unint64_t v148 = *((void *)a2 + 1);
          unint64_t v149 = *((void *)a2 + 2);
          uint64_t v150 = *(void *)a2;
          if (v148 <= 0xFFFFFFFFFFFFFFF5 && v148 + 10 <= v149)
          {
            char v151 = 0;
            unsigned int v152 = 0;
            uint64_t v153 = 0;
            do
            {
              unint64_t v154 = v148 + 1;
              *((void *)a2 + 1) = v148 + 1;
              char v155 = *(unsigned char *)(v150 + v148);
              v153 |= (unint64_t)(v155 & 0x7F) << v151;
              if ((v155 & 0x80) == 0) {
                goto LABEL_366;
              }
              v151 += 7;
              unint64_t v148 = v154;
              BOOL v14 = v152++ > 8;
            }
            while (!v14);
LABEL_296:
            uint64_t v153 = 0;
            goto LABEL_366;
          }
          char v220 = 0;
          unsigned int v221 = 0;
          uint64_t v153 = 0;
          if (v149 <= v148) {
            unint64_t v149 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v149 == v148)
            {
              uint64_t v153 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v222 = v148 + 1;
              char v223 = *(unsigned char *)(v150 + v148);
              *((void *)a2 + 1) = v222;
              v153 |= (unint64_t)(v223 & 0x7F) << v220;
              if (v223 < 0)
              {
                v220 += 7;
                unint64_t v148 = v222;
                BOOL v14 = v221++ > 8;
                if (v14) {
                  goto LABEL_296;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v153 = 0;
              }
            }
            break;
          }
LABEL_366:
          *((void *)this + 3) = v153;
          goto LABEL_313;
        case 0x27u:
          *(void *)((char *)this + 212) |= 2uLL;
          unint64_t v156 = *((void *)a2 + 1);
          unint64_t v157 = *((void *)a2 + 2);
          uint64_t v158 = *(void *)a2;
          if (v156 <= 0xFFFFFFFFFFFFFFF5 && v156 + 10 <= v157)
          {
            char v159 = 0;
            unsigned int v160 = 0;
            uint64_t v161 = 0;
            do
            {
              unint64_t v162 = v156 + 1;
              *((void *)a2 + 1) = v156 + 1;
              char v163 = *(unsigned char *)(v158 + v156);
              v161 |= (unint64_t)(v163 & 0x7F) << v159;
              if ((v163 & 0x80) == 0) {
                goto LABEL_370;
              }
              v159 += 7;
              unint64_t v156 = v162;
              BOOL v14 = v160++ > 8;
            }
            while (!v14);
LABEL_303:
            uint64_t v161 = 0;
            goto LABEL_370;
          }
          char v224 = 0;
          unsigned int v225 = 0;
          uint64_t v161 = 0;
          if (v157 <= v156) {
            unint64_t v157 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v157 == v156)
            {
              uint64_t v161 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v226 = v156 + 1;
              char v227 = *(unsigned char *)(v158 + v156);
              *((void *)a2 + 1) = v226;
              v161 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                unint64_t v156 = v226;
                BOOL v14 = v225++ > 8;
                if (v14) {
                  goto LABEL_303;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v161 = 0;
              }
            }
            break;
          }
LABEL_370:
          *((void *)this + 2) = v161;
          goto LABEL_313;
        case 0x28u:
          *(void *)((char *)this + 212) |= 1uLL;
          unint64_t v164 = *((void *)a2 + 1);
          unint64_t v165 = *((void *)a2 + 2);
          uint64_t v166 = *(void *)a2;
          if (v164 <= 0xFFFFFFFFFFFFFFF5 && v164 + 10 <= v165)
          {
            char v167 = 0;
            unsigned int v168 = 0;
            uint64_t v169 = 0;
            do
            {
              unint64_t v170 = v164 + 1;
              *((void *)a2 + 1) = v164 + 1;
              char v171 = *(unsigned char *)(v166 + v164);
              v169 |= (unint64_t)(v171 & 0x7F) << v167;
              if ((v171 & 0x80) == 0) {
                goto LABEL_374;
              }
              v167 += 7;
              unint64_t v164 = v170;
              BOOL v14 = v168++ > 8;
            }
            while (!v14);
LABEL_310:
            uint64_t v169 = 0;
            goto LABEL_374;
          }
          char v228 = 0;
          unsigned int v229 = 0;
          uint64_t v169 = 0;
          if (v165 <= v164) {
            unint64_t v165 = *((void *)a2 + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_313;
      }
      while (1)
      {
        if (v165 == v164)
        {
          uint64_t v169 = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_374;
        }
        unint64_t v230 = v164 + 1;
        char v231 = *(unsigned char *)(v166 + v164);
        *((void *)a2 + 1) = v230;
        v169 |= (unint64_t)(v231 & 0x7F) << v228;
        if ((v231 & 0x80) == 0) {
          break;
        }
        v228 += 7;
        unint64_t v164 = v230;
        BOOL v14 = v229++ > 8;
        if (v14) {
          goto LABEL_310;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        uint64_t v169 = 0;
      }
LABEL_374:
      *((void *)this + 1) = v169;
LABEL_313:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyTrustedAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 212);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 96), 1u);
    uint64_t v4 = *(void *)(v3 + 212);
    if ((v4 & 0x200000) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_44;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 2u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 56), 3u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 4u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 5u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 6u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 48), 7u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 8u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 9u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0xAu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 64), 0xBu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0xCu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0xDu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0xEu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 80), 0xFu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x10u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 188), 0x11u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x12u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 72), 0x13u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 0x14u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 184), 0x15u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0x16u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_24:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 88), 0x17u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x18u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0x19u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x4000) == 0)
  {
LABEL_29:
    if ((v4 & 0x10) == 0) {
      goto LABEL_30;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_30:
    if ((v4 & 8) == 0) {
      goto LABEL_31;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_31:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 196), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 204), 0x20u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 200), 0x21u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(float *)(v3 + 192), 0x22u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 208), 0x23u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 209), 0x24u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x1000) == 0)
  {
LABEL_38:
    if ((v4 & 4) == 0) {
      goto LABEL_39;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0x25u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_39:
    if ((v4 & 2) == 0) {
      goto LABEL_40;
    }
LABEL_80:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0x27u);
    if ((*(void *)(v3 + 212) & 1) == 0) {
      return this;
    }
    goto LABEL_81;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0x26u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 2) != 0) {
    goto LABEL_80;
  }
LABEL_40:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_81:
  unint64_t v5 = *(void *)(v3 + 8);

  return PB::Writer::writeVarInt(a2, v5, 0x28u);
}

uint64_t CMMsl::SafetyTrustedAudioResult::hash_value(CMMsl::SafetyTrustedAudioResult *this)
{
  uint64_t v1 = *(void *)((char *)this + 212);
  if ((v1 & 0x800) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_3;
    }
LABEL_98:
    uint64_t v75 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_6;
    }
    goto LABEL_99;
  }
  uint64_t v2 = *((void *)this + 12);
  if ((v1 & 0x200000) == 0) {
    goto LABEL_98;
  }
LABEL_3:
  float v3 = *((float *)this + 35);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v75 = v4;
  if ((v1 & 0x40) != 0)
  {
LABEL_6:
    uint64_t v74 = *((void *)this + 7);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_7;
    }
LABEL_100:
    uint64_t v73 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_10;
    }
LABEL_101:
    uint64_t v72 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_13;
    }
LABEL_102:
    uint64_t v71 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_16;
    }
    goto LABEL_103;
  }
LABEL_99:
  uint64_t v74 = 0;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_100;
  }
LABEL_7:
  float v5 = *((float *)this + 30);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v73 = v6;
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_101;
  }
LABEL_10:
  float v7 = *((float *)this + 38);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v72 = v8;
  if ((v1 & 0x100000) == 0) {
    goto LABEL_102;
  }
LABEL_13:
  float v9 = *((float *)this + 34);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v71 = v10;
  if ((v1 & 0x20) != 0)
  {
LABEL_16:
    uint64_t v70 = *((void *)this + 6);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_17;
    }
LABEL_104:
    uint64_t v69 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_20;
    }
LABEL_105:
    uint64_t v68 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_23;
    }
LABEL_106:
    uint64_t v67 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_26;
    }
    goto LABEL_107;
  }
LABEL_103:
  uint64_t v70 = 0;
  if ((v1 & 0x40000) == 0) {
    goto LABEL_104;
  }
LABEL_17:
  float v11 = *((float *)this + 32);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v69 = v12;
  if ((v1 & 0x800000) == 0) {
    goto LABEL_105;
  }
LABEL_20:
  float v13 = *((float *)this + 37);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v68 = v14;
  if ((v1 & 0x400000) == 0) {
    goto LABEL_106;
  }
LABEL_23:
  float v15 = *((float *)this + 36);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v67 = v16;
  if ((v1 & 0x80) != 0)
  {
LABEL_26:
    uint64_t v66 = *((void *)this + 8);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_27;
    }
LABEL_108:
    uint64_t v65 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_30;
    }
LABEL_109:
    uint64_t v64 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_33;
    }
LABEL_110:
    uint64_t v63 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_36;
    }
    goto LABEL_111;
  }
LABEL_107:
  uint64_t v66 = 0;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_108;
  }
LABEL_27:
  float v17 = *((float *)this + 31);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  uint64_t v65 = v18;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_109;
  }
LABEL_30:
  float v19 = *((float *)this + 33);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  uint64_t v64 = v20;
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_110;
  }
LABEL_33:
  float v21 = *((float *)this + 44);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  uint64_t v63 = v22;
  if ((v1 & 0x200) != 0)
  {
LABEL_36:
    uint64_t v23 = *((void *)this + 10);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_37;
    }
LABEL_112:
    uint64_t v25 = 0;
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_41;
    }
LABEL_113:
    uint64_t v27 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_45;
    }
LABEL_114:
    uint64_t v29 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_49;
    }
    goto LABEL_115;
  }
LABEL_111:
  uint64_t v23 = 0;
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_112;
  }
LABEL_37:
  float v24 = *((float *)this + 39);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = LODWORD(v24);
  }
  if ((v1 & 0x200000000) == 0) {
    goto LABEL_113;
  }
LABEL_41:
  float v26 = *((float *)this + 47);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = LODWORD(v26);
  }
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_114;
  }
LABEL_45:
  float v28 = *((float *)this + 43);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = LODWORD(v28);
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_49:
    uint64_t v30 = *((void *)this + 9);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_50;
    }
LABEL_116:
    uint64_t v32 = 0;
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_54;
    }
LABEL_117:
    uint64_t v34 = 0;
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_58;
    }
LABEL_118:
    uint64_t v36 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_62;
    }
    goto LABEL_119;
  }
LABEL_115:
  uint64_t v30 = 0;
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_116;
  }
LABEL_50:
  float v31 = *((float *)this + 41);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = LODWORD(v31);
  }
  if ((v1 & 0x100000000) == 0) {
    goto LABEL_117;
  }
LABEL_54:
  float v33 = *((float *)this + 46);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = LODWORD(v33);
  }
  if ((v1 & 0x80000000) == 0) {
    goto LABEL_118;
  }
LABEL_58:
  float v35 = *((float *)this + 45);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = LODWORD(v35);
  }
  if ((v1 & 0x400) != 0)
  {
LABEL_62:
    uint64_t v37 = *((void *)this + 11);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_63;
    }
LABEL_120:
    uint64_t v39 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_67;
    }
LABEL_121:
    uint64_t v41 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_71;
    }
LABEL_122:
    uint64_t v43 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_75;
    }
    goto LABEL_123;
  }
LABEL_119:
  uint64_t v37 = 0;
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_120;
  }
LABEL_63:
  float v38 = *((float *)this + 40);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = LODWORD(v38);
  }
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_121;
  }
LABEL_67:
  float v40 = *((float *)this + 42);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = LODWORD(v40);
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_122;
  }
LABEL_71:
  float v42 = *((float *)this + 27);
  if (v42 == 0.0) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = LODWORD(v42);
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_75:
    uint64_t v44 = *((int *)this + 29);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_76;
    }
    goto LABEL_124;
  }
LABEL_123:
  uint64_t v44 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_76:
    uint64_t v45 = *((unsigned int *)this + 28);
    if ((v1 & 0x10) != 0) {
      goto LABEL_77;
    }
    goto LABEL_125;
  }
LABEL_124:
  uint64_t v45 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_77:
    uint64_t v46 = *((void *)this + 5);
    if ((v1 & 8) != 0) {
      goto LABEL_78;
    }
    goto LABEL_126;
  }
LABEL_125:
  uint64_t v46 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_78:
    uint64_t v47 = *((void *)this + 4);
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_79;
    }
LABEL_127:
    uint64_t v49 = 0;
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_82;
    }
LABEL_128:
    uint64_t v51 = 0;
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_85;
    }
LABEL_129:
    uint64_t v53 = 0;
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_88;
    }
LABEL_130:
    uint64_t v55 = 0;
    if ((v1 & 0x4000000000) != 0) {
      goto LABEL_91;
    }
    goto LABEL_131;
  }
LABEL_126:
  uint64_t v47 = 0;
  if ((v1 & 0x800000000) == 0) {
    goto LABEL_127;
  }
LABEL_79:
  float v48 = *((float *)this + 49);
  uint64_t v49 = LODWORD(v48);
  if (v48 == 0.0) {
    uint64_t v49 = 0;
  }
  if ((v1 & 0x2000000000) == 0) {
    goto LABEL_128;
  }
LABEL_82:
  float v50 = *((float *)this + 51);
  uint64_t v51 = LODWORD(v50);
  if (v50 == 0.0) {
    uint64_t v51 = 0;
  }
  if ((v1 & 0x1000000000) == 0) {
    goto LABEL_129;
  }
LABEL_85:
  float v52 = *((float *)this + 50);
  uint64_t v53 = LODWORD(v52);
  if (v52 == 0.0) {
    uint64_t v53 = 0;
  }
  if ((v1 & 0x400000000) == 0) {
    goto LABEL_130;
  }
LABEL_88:
  float v54 = *((float *)this + 48);
  uint64_t v55 = LODWORD(v54);
  if (v54 == 0.0) {
    uint64_t v55 = 0;
  }
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_91:
    uint64_t v56 = *((unsigned __int8 *)this + 208);
    if ((v1 & 0x8000000000) != 0) {
      goto LABEL_92;
    }
    goto LABEL_132;
  }
LABEL_131:
  uint64_t v56 = 0;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_92:
    uint64_t v57 = *((unsigned __int8 *)this + 209);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_93;
    }
    goto LABEL_133;
  }
LABEL_132:
  uint64_t v57 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_93:
    uint64_t v58 = *((unsigned int *)this + 26);
    if ((v1 & 4) != 0) {
      goto LABEL_94;
    }
    goto LABEL_134;
  }
LABEL_133:
  uint64_t v58 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_94:
    uint64_t v59 = *((void *)this + 3);
    if ((v1 & 2) != 0) {
      goto LABEL_95;
    }
LABEL_135:
    uint64_t v60 = 0;
    if (v1) {
      goto LABEL_96;
    }
LABEL_136:
    uint64_t v61 = 0;
    return v75 ^ v2 ^ v74 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v39 ^ v41 ^ v43 ^ v44 ^ v45 ^ v46 ^ v47 ^ v49 ^ v51 ^ v53 ^ v55 ^ v56 ^ v57 ^ v58 ^ v59 ^ v60 ^ v61;
  }
LABEL_134:
  uint64_t v59 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_135;
  }
LABEL_95:
  uint64_t v60 = *((void *)this + 2);
  if ((v1 & 1) == 0) {
    goto LABEL_136;
  }
LABEL_96:
  uint64_t v61 = *((void *)this + 1);
  return v75 ^ v2 ^ v74 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v39 ^ v41 ^ v43 ^ v44 ^ v45 ^ v46 ^ v47 ^ v49 ^ v51 ^ v53 ^ v55 ^ v56 ^ v57 ^ v58 ^ v59 ^ v60 ^ v61;
}

uint64_t CMMsl::SatelliteInfo::SatelliteInfo(uint64_t this)
{
  *(void *)this = off_1003A8EE0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A8EE0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::SatelliteInfo::~SatelliteInfo(CMMsl::SatelliteInfo *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::SatelliteInfo::SatelliteInfo(CMMsl::SatelliteInfo *this, const CMMsl::SatelliteInfo *a2)
{
  *(void *)this = off_1003A8EE0;
  *((_DWORD *)this + 5) = 0;
  char v2 = *((unsigned char *)a2 + 20);
  if ((v2 & 2) != 0)
  {
    float result = *((float *)a2 + 3);
    char v3 = 2;
    *((unsigned char *)this + 20) = 2;
    *((float *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 20);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 20))
  {
LABEL_5:
    float result = *((float *)a2 + 2);
    v3 |= 1u;
    *((unsigned char *)this + 20) = v3;
    *((float *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    float result = *((float *)a2 + 4);
    *((unsigned char *)this + 20) = v3 | 4;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t CMMsl::SatelliteInfo::operator=(uint64_t a1, const CMMsl::SatelliteInfo *a2)
{
  if ((const CMMsl::SatelliteInfo *)a1 != a2)
  {
    CMMsl::SatelliteInfo::SatelliteInfo((CMMsl::SatelliteInfo *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    int v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SatelliteInfo *a2, CMMsl::SatelliteInfo *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  int v4 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  int v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::SatelliteInfo::SatelliteInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8EE0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A8EE0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::SatelliteInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A8EE0;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    int v4 = *(_DWORD *)(a2 + 16);
    int v10 = *(_DWORD *)(a1 + 20);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(void *)(a1 + 8) = v6;
    v8[1] = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SatelliteInfo::formatText(CMMsl::SatelliteInfo *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "azimuthDeg", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "elevationDeg", *((float *)this + 3));
  if ((*((unsigned char *)this + 20) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "l1Cn0", *((float *)this + 4));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SatelliteInfo::readFrom(CMMsl::SatelliteInfo *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 20) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_32;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_32;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_37;
        }
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
        {
LABEL_32:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_37;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 4;
      *((void *)a2 + 1) = v2;
LABEL_37:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::SatelliteInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 2) == 0)
  {
    if ((*(unsigned char *)(this + 20) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(float *)(v3 + 8), 2u);
    if ((*(unsigned char *)(v3 + 20) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(float *)(this + 12), 1u);
  char v4 = *(unsigned char *)(v3 + 20);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  float v5 = *(float *)(v3 + 16);

  return PB::Writer::write(a2, v5, 3u);
}

BOOL CMMsl::SatelliteInfo::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 20) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 4) == 0;
  if ((*(unsigned char *)(a1 + 20) & 4) != 0) {
    return (*(unsigned char *)(a2 + 20) & 4) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::SatelliteInfo::hash_value(CMMsl::SatelliteInfo *this)
{
  if ((*((unsigned char *)this + 20) & 2) != 0)
  {
    float v6 = *((float *)this + 3);
    uint64_t v1 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v1 = 0;
    }
    if (*((unsigned char *)this + 20))
    {
LABEL_3:
      float v2 = *((float *)this + 2);
      uint64_t v3 = LODWORD(v2);
      if (v2 == 0.0) {
        uint64_t v3 = 0;
      }
      if ((*((unsigned char *)this + 20) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t v5 = 0;
      return v3 ^ v1 ^ v5;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 20)) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 20) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  float v4 = *((float *)this + 4);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  return v3 ^ v1 ^ v5;
}

void CMMsl::SessionOverride::~SessionOverride(CMMsl::SessionOverride *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::SessionOverride::SessionOverride(uint64_t this, const CMMsl::SessionOverride *a2)
{
  *(void *)this = off_1003A8F18;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::SessionOverride *CMMsl::SessionOverride::operator=(const CMMsl::SessionOverride *a1, const CMMsl::SessionOverride *a2)
{
  if (a1 != a2)
  {
    CMMsl::SessionOverride::SessionOverride((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SessionOverride *a2, CMMsl::SessionOverride *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::SessionOverride::SessionOverride(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8F18;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A8F18;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SessionOverride::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A8F18;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    void v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SessionOverride::formatText(CMMsl::SessionOverride *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "sessionType", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SessionOverride::readFrom(CMMsl::SessionOverride *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SessionOverride::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::SessionOverride::hash_value(CMMsl::SessionOverride *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

void CMMsl::SignalEnvironment::~SignalEnvironment(CMMsl::SignalEnvironment *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::SignalEnvironment::SignalEnvironment(uint64_t this, const CMMsl::SignalEnvironment *a2)
{
  *(void *)this = off_1003A8F50;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::SignalEnvironment::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = off_1003A8F50;
    int v3 = *(unsigned __int8 *)(a2 + 12);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = off_1003A8F50;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SignalEnvironment *a2, CMMsl::SignalEnvironment *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::SignalEnvironment::formatText(CMMsl::SignalEnvironment *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SignalEnvironment::readFrom(CMMsl::SignalEnvironment *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SignalEnvironment::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  }
  return this;
}

uint64_t CMMsl::SignalEnvironment::hash_value(CMMsl::SignalEnvironment *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

void CMMsl::SignificantUserInteraction::~SignificantUserInteraction(CMMsl::SignificantUserInteraction *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::SignificantUserInteraction::SignificantUserInteraction(uint64_t this, const CMMsl::SignificantUserInteraction *a2)
{
  *(void *)this = off_1003A8F88;
  *(void *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::SignificantUserInteraction *CMMsl::SignificantUserInteraction::operator=(const CMMsl::SignificantUserInteraction *a1, const CMMsl::SignificantUserInteraction *a2)
{
  if (a1 != a2)
  {
    CMMsl::SignificantUserInteraction::SignificantUserInteraction((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SignificantUserInteraction *a2, CMMsl::SignificantUserInteraction *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::SignificantUserInteraction::SignificantUserInteraction(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A8F88;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = off_1003A8F88;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SignificantUserInteraction::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = off_1003A8F88;
    v8[1] = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4;
    void v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SignificantUserInteraction::formatText(CMMsl::SignificantUserInteraction *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
    char v5 = *((unsigned char *)this + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 4));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SignificantUserInteraction::readFrom(CMMsl::SignificantUserInteraction *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          unint64_t v3 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
LABEL_59:
          unint64_t v3 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v3 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v3;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((void *)this + 1) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SignificantUserInteraction::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::SignificantUserInteraction::hash_value(CMMsl::SignificantUserInteraction *this)
{
  if (*((unsigned char *)this + 20))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::SimActivityEvent::~SimActivityEvent(CMMsl::SimActivityEvent *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A8FC0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::SimActivityEvent::~SimActivityEvent(this);

  operator delete();
}

uint64_t CMMsl::SimActivityEvent::SimActivityEvent(uint64_t this, const CMMsl::SimActivityEvent *a2)
{
  *(void *)this = off_1003A8FC0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 16) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::SimMotionState::SimMotionState(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A8FF8;
  *(_DWORD *)(result + 12) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(void *)uint64_t result = off_1003A8FF8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = off_1003A8FF8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::SimActivityEvent::operator=(uint64_t a1, const CMMsl::SimActivityEvent *a2)
{
  if ((const CMMsl::SimActivityEvent *)a1 != a2)
  {
    CMMsl::SimActivityEvent::SimActivityEvent((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v6 = v10;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v6;
    uint64_t v9 = v5;
    uint64_t v10 = v4;
    CMMsl::SimActivityEvent::~SimActivityEvent((CMMsl::SimActivityEvent *)&v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SimActivityEvent *a2, CMMsl::SimActivityEvent *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v5 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(this + 16);
  uint64_t v6 = *((void *)a2 + 2);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *(void *)(this + 16) = v6;
  *((void *)a2 + 1) = v5;
  *((void *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::SimActivityEvent::SimActivityEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A8FC0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t CMMsl::SimActivityEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::SimActivityEvent::SimActivityEvent((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v6 = v10;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v6;
    uint64_t v9 = v5;
    uint64_t v10 = v4;
    CMMsl::SimActivityEvent::~SimActivityEvent((CMMsl::SimActivityEvent *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SimActivityEvent::formatText(CMMsl::SimActivityEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "motionState");
  }
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SimActivityEvent::readFrom(CMMsl::SimActivityEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2) {
        operator new();
      }
      if (v20 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              uint64_t v26 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v32 = v21 + 1;
            char v33 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v21 = v32;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              uint64_t v26 = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v26 = 0;
          }
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((void *)this + 2) = v26;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SimMotionState::SimMotionState(uint64_t this)
{
  *(void *)this = off_1003A8FF8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = off_1003A8FF8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::SimActivityEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 24)) {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 16), 1u);
  }
  int v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
  {
    return PB::Writer::writeSubmessage(a2, v4, 2u);
  }
  return this;
}

BOOL CMMsl::SimMotionState::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::SimActivityEvent::hash_value(CMMsl::SimActivityEvent *this)
{
  if (*((unsigned char *)this + 24)) {
    uint64_t v1 = *((void *)this + 2);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    char v3 = *(unsigned char *)(v2 + 12);
    uint64_t v2 = *(unsigned int *)(v2 + 8);
    if ((v3 & 1) == 0) {
      uint64_t v2 = 0;
    }
  }
  return v2 ^ v1;
}

uint64_t CMMsl::SimActivityEvent::makeMotionState(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::SimMotionState::~SimMotionState(CMMsl::SimMotionState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::SimMotionState::SimMotionState(uint64_t this, const CMMsl::SimMotionState *a2)
{
  *(void *)this = off_1003A8FF8;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::SimMotionState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = off_1003A8FF8;
    int v3 = *(unsigned char *)(a2 + 12) & 1;
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = off_1003A8FF8;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SimMotionState *a2, CMMsl::SimMotionState *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::SimMotionState::formatText(CMMsl::SimMotionState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SimMotionState::readFrom(CMMsl::SimMotionState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SimMotionState::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  }
  return this;
}

uint64_t CMMsl::SimMotionState::hash_value(CMMsl::SimMotionState *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned int *)this + 2);
  }
  else {
    return 0;
  }
}

void CMMsl::SitStandDetectorFeatures::~SitStandDetectorFeatures(CMMsl::SitStandDetectorFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures(CMMsl::SitStandDetectorFeatures *this, const CMMsl::SitStandDetectorFeatures *a2)
{
  *(void *)this = off_1003A9030;
  *((_DWORD *)this + 11) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 44) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((unsigned char *)this + 44) = v3;
    *((_DWORD *)this + 7) = v4;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 44) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 10) = v4;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 6) = v4;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 5) = v4;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 9) = v4;
  if ((*((unsigned char *)a2 + 44) & 0x20) == 0) {
    return *(float *)&v4;
  }
LABEL_18:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *((unsigned char *)this + 44) = v3 | 0x20;
  *((_DWORD *)this + 8) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::SitStandDetectorFeatures::operator=(uint64_t a1, const CMMsl::SitStandDetectorFeatures *a2)
{
  if ((const CMMsl::SitStandDetectorFeatures *)a1 != a2)
  {
    CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures((CMMsl::SitStandDetectorFeatures *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    int v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorFeatures *a2, CMMsl::SitStandDetectorFeatures *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  return result;
}

float CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9030;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A9030;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorFeatures::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v11[0] = off_1003A9030;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 40);
    int v15 = *(_DWORD *)(a1 + 44);
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v11[1] = v6;
    int v14 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v12 = *(_OWORD *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v9;
    uint64_t v13 = v8;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorFeatures::formatText(CMMsl::SitStandDetectorFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "magnitudeRangeInertialVertical", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "maxAngleBetweenThighAndShinDeg", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "minAngleBetweenThighAndShinDeg", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "motionPlanarity", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "timeToReachMaxThighAndShinAngleThreshold", *((float *)this + 8));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((unsigned char *)this + 44) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timeToReachMinThighAndShinAngleThreshold", *((float *)this + 9));
  char v5 = *((unsigned char *)this + 44);
  if (v5) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "vm", *((float *)this + 10));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SitStandDetectorFeatures::readFrom(CMMsl::SitStandDetectorFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 44) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_50;
        case 2u:
          *((unsigned char *)this + 44) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_49;
        case 3u:
          *((unsigned char *)this + 44) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_49;
        case 4u:
          *((unsigned char *)this + 44) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_49;
        case 5u:
          *((unsigned char *)this + 44) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_49;
        case 6u:
          *((unsigned char *)this + 44) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_49;
        case 7u:
          *((unsigned char *)this + 44) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_47;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_49;
        case 8u:
          *((unsigned char *)this + 44) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
          {
LABEL_47:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_49:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_50:
            *((void *)a2 + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 4u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 36), 7u);
    if ((*(unsigned char *)(v3 + 44) & 0x20) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 6u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_17:
  float v5 = *(float *)(v3 + 32);

  return PB::Writer::write(a2, v5, 8u);
}

uint64_t CMMsl::SitStandDetectorFeatures::hash_value(CMMsl::SitStandDetectorFeatures *this)
{
  if ((*((unsigned char *)this + 44) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_27:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_28:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 44) & 0x80) != 0) {
      goto LABEL_9;
    }
LABEL_29:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_12;
    }
LABEL_30:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_15;
    }
LABEL_31:
    uint64_t v11 = 0;
    if ((*((unsigned char *)this + 44) & 0x40) != 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_27;
  }
LABEL_3:
  float v2 = *((float *)this + 7);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_28;
  }
LABEL_6:
  float v4 = *((float *)this + 4);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x80) == 0) {
    goto LABEL_29;
  }
LABEL_9:
  float v6 = *((float *)this + 10);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 44) & 8) == 0) {
    goto LABEL_30;
  }
LABEL_12:
  float v8 = *((float *)this + 6);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_31;
  }
LABEL_15:
  float v10 = *((float *)this + 5);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x40) != 0)
  {
LABEL_18:
    float v12 = *((float *)this + 9);
    uint64_t v13 = LODWORD(v12);
    if (v12 == 0.0) {
      uint64_t v13 = 0;
    }
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_21;
    }
LABEL_33:
    uint64_t v15 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_32:
  uint64_t v13 = 0;
  if ((*((unsigned char *)this + 44) & 0x20) == 0) {
    goto LABEL_33;
  }
LABEL_21:
  float v14 = *((float *)this + 8);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
}

void CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::~SitStandDetectorPosteriorBufferStatsForSitToStand(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this, const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a2)
{
  *(void *)this = off_1003A9068;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 6) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    if ((*((unsigned char *)a2 + 28) & 4) == 0) {
      return *(float *)&v4;
    }
  }
  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((unsigned char *)this + 28) = v3 | 4;
  *((_DWORD *)this + 5) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator=(uint64_t a1, const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a2)
{
  if ((const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *)a1 != a2)
  {
    CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand((CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v3;
    uint64_t v4 = v11;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v4;
    int v7 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v7;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a2, CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9068;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A9068;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    int v10 = *(_DWORD *)(a1 + 24);
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v4;
    v9[0] = off_1003A9068;
    int v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    *(void *)(a1 + 16) = v7;
    v9[1] = v5;
    void v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::formatText(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "maxPosterior", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "meanPosterior", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "minPosterior", *((float *)this + 6));
  if (*((unsigned char *)this + 28)) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::readFrom(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 28) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 28) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 28) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 28) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_38:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
      if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::hash_value(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 2) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 4);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 5);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7;
}

void CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::~SitStandDetectorPosteriorBufferStatsForStandToSit(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this, const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a2)
{
  *(void *)this = off_1003A90A0;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 6) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    if ((*((unsigned char *)a2 + 28) & 4) == 0) {
      return *(float *)&v4;
    }
  }
  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((unsigned char *)this + 28) = v3 | 4;
  *((_DWORD *)this + 5) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator=(uint64_t a1, const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a2)
{
  if ((const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *)a1 != a2)
  {
    CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit((CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v3;
    uint64_t v4 = v11;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v4;
    int v7 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v7;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a2, CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A90A0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A90A0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    int v10 = *(_DWORD *)(a1 + 24);
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v4;
    v9[0] = off_1003A90A0;
    int v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    *(void *)(a1 + 16) = v7;
    v9[1] = v5;
    void v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::formatText(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "maxPosterior", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "meanPosterior", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "minPosterior", *((float *)this + 6));
  if (*((unsigned char *)this + 28)) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::readFrom(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 28) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 28) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 28) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 28) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_38:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
      if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::hash_value(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 2) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 4);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 5);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7;
}

void CMMsl::SitStandDetectorTransition::~SitStandDetectorTransition(CMMsl::SitStandDetectorTransition *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(uint64_t this, const CMMsl::SitStandDetectorTransition *a2)
{
  *(void *)this = off_1003A90D8;
  *(void *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::SitStandDetectorTransition *CMMsl::SitStandDetectorTransition::operator=(const CMMsl::SitStandDetectorTransition *a1, const CMMsl::SitStandDetectorTransition *a2)
{
  if (a1 != a2)
  {
    CMMsl::SitStandDetectorTransition::SitStandDetectorTransition((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorTransition *a2, CMMsl::SitStandDetectorTransition *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A90D8;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A90D8;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SitStandDetectorTransition::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A90D8;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    void v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorTransition::formatText(CMMsl::SitStandDetectorTransition *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "transitionType", *((_DWORD *)this + 4));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SitStandDetectorTransition::readFrom(CMMsl::SitStandDetectorTransition *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorTransition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::SitStandDetectorTransition::hash_value(CMMsl::SitStandDetectorTransition *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 4);
  return v2 ^ *(void *)&v1;
}

void CMMsl::Skeleton2D::~Skeleton2D(CMMsl::Skeleton2D *this)
{
  *(void *)this = off_1003A9110;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A9110;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A9110;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Skeleton2D::Skeleton2D(uint64_t this, const CMMsl::Skeleton2D *a2)
{
  *(void *)this = off_1003A9110;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    sub_10022AB20();
  }
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 5);
    *(unsigned char *)(this + 48) |= 2u;
    *(void *)(this + 40) = v3;
    char v2 = *((unsigned char *)a2 + 48);
  }
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 48) |= 1u;
    *(void *)(this + 8) = v4;
  }
  return this;
}

void sub_10022AB20()
{
}

void sub_10022AC24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton2D::operator=(uint64_t a1, const CMMsl::Skeleton2D *a2)
{
  if ((const CMMsl::Skeleton2D *)a1 != a2)
  {
    CMMsl::Skeleton2D::Skeleton2D((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    char v9 = off_1003A9110;
    char v15 = (void **)&v11;
    sub_100274A84(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Skeleton2D *a2, CMMsl::Skeleton2D *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::Skeleton2D::Skeleton2D(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9110;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  sub_100274B44((void **)(a1 + 16));
  *uint64_t v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::Skeleton2D::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::Skeleton2D::Skeleton2D((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    char v9 = off_1003A9110;
    char v15 = (void **)&v11;
    sub_100274A84(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton2D::formatText(CMMsl::Skeleton2D *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 48)) {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 2);
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "joint");
  }
  if ((*((unsigned char *)this + 48) & 2) != 0) {
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Skeleton2D::readFrom(CMMsl::Skeleton2D *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v22);
LABEL_34:
        *((void *)a2 + 1) += 8;
        goto LABEL_35;
      }
      if (v20 == 1) {
        sub_10022B220();
      }
      uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
      if (!result) {
        return result;
      }
LABEL_35:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 48) |= 1u;
    unint64_t v21 = *((void *)a2 + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
    {
LABEL_30:
      *((unsigned char *)a2 + 24) = 1;
      goto LABEL_35;
    }
    *((void *)this + 1) = *(void *)(*(void *)a2 + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

void sub_10022B220()
{
}

void sub_10022B340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton2D::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base ***)(this + 16);
  uint64_t v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6, 1u);
  }
  char v7 = *(unsigned char *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
    char v7 = *(unsigned char *)(v3 + 48);
  }
  if (v7)
  {
    double v8 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v8, 3u);
  }
  return this;
}

BOOL sub_10022B41C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::Skeleton2DJoint::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::Skeleton2D::hash_value(CMMsl::Skeleton2D *this)
{
  uint64_t v2 = (CMMsl::Skeleton2DJoint **)*((void *)this + 2);
  uint64_t v3 = (CMMsl::Skeleton2DJoint **)*((void *)this + 3);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      v4 ^= CMMsl::Skeleton2DJoint::hash_value(v5);
    }
    while (v2 != v3);
  }
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
    double v6 = *((double *)this + 5);
    if (v6 == 0.0) {
      double v6 = 0.0;
    }
    if (*((unsigned char *)this + 48)) {
      goto LABEL_8;
    }
LABEL_14:
    double v7 = 0.0;
    return *(void *)&v6 ^ v4 ^ *(void *)&v7;
  }
  double v6 = 0.0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  double v7 = *((double *)this + 1);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  return *(void *)&v6 ^ v4 ^ *(void *)&v7;
}

uint64_t CMMsl::Skeleton2DJoint::Skeleton2DJoint(uint64_t this)
{
  *(void *)this = off_1003A9148;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A9148;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::Skeleton2DJoint::~Skeleton2DJoint(CMMsl::Skeleton2DJoint *this)
{
  *(void *)this = off_1003A9148;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::Skeleton2DJoint::~Skeleton2DJoint(this);

  operator delete();
}

CMMsl::Skeleton2DJoint *CMMsl::Skeleton2DJoint::Skeleton2DJoint(CMMsl::Skeleton2DJoint *this, const CMMsl::Skeleton2DJoint *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (char *)this + 8;
  *(void *)this = off_1003A9148;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 11) = 0;
  if ((*((unsigned char *)a2 + 44) & 2) != 0)
  {
    int v5 = *((_DWORD *)a2 + 9);
    *((unsigned char *)this + 44) = 2;
    *((_DWORD *)this + 9) = v5;
  }
  if (this != a2) {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  char v6 = *((unsigned char *)a2 + 44);
  if (v6)
  {
    int v7 = *((_DWORD *)a2 + 8);
    *((unsigned char *)this + 44) |= 1u;
    *((_DWORD *)this + 8) = v7;
    char v6 = *((unsigned char *)a2 + 44);
  }
  if ((v6 & 4) != 0)
  {
    char v8 = *((unsigned char *)a2 + 40);
    *((unsigned char *)this + 44) |= 4u;
    *((unsigned char *)this + 40) = v8;
  }
  return this;
}

uint64_t CMMsl::Skeleton2DJoint::operator=(uint64_t a1, const CMMsl::Skeleton2DJoint *a2)
{
  if ((const CMMsl::Skeleton2DJoint *)a1 != a2)
  {
    CMMsl::Skeleton2DJoint::Skeleton2DJoint((CMMsl::Skeleton2DJoint *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v15;
    int v15 = v3;
    int v4 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v13;
    int v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v6;
    int v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    int v12 = v7;
    LOBYTE(v6) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v14;
    char v14 = v6;
    CMMsl::Skeleton2DJoint::~Skeleton2DJoint((CMMsl::Skeleton2DJoint *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Skeleton2DJoint *a2, CMMsl::Skeleton2DJoint *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  int v4 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  LOBYTE(v7) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v7;
  return result;
}

uint64_t CMMsl::Skeleton2DJoint::Skeleton2DJoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9148;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

{
  *(void *)a1 = off_1003A9148;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::Skeleton2DJoint::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v14 = off_1003A9148;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    int v4 = *(_DWORD *)(a2 + 36);
    char v5 = *(unsigned char *)(a2 + 40);
    int v6 = *(_DWORD *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 24);
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    int v9 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v3;
    int v20 = v9;
    int v10 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v4;
    int v18 = v10;
    long long v11 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v15 = v11;
    uint64_t v12 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v7;
    uint64_t v16 = v12;
    LODWORD(v8) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v6;
    int v17 = v8;
    LOBYTE(v12) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v5;
    char v19 = v12;
    CMMsl::Skeleton2DJoint::~Skeleton2DJoint((CMMsl::Skeleton2DJoint *)&v14);
  }
  return a1;
}

uint64_t CMMsl::Skeleton2DJoint::formatText(CMMsl::Skeleton2DJoint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "confidence", *((float *)this + 8));
    char v5 = *((unsigned char *)this + 44);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "joint", *((_DWORD *)this + 9));
  }
  int v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "position", v8);
  }
  if ((*((unsigned char *)this + 44) & 4) != 0) {
    PB::TextFormatter::format(a2, "visible", *((unsigned char *)this + 40));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::Skeleton2DJoint::readFrom(CMMsl::Skeleton2DJoint *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 8);
    int v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 44) |= 2u;
          unint64_t v23 = *((void *)a2 + 1);
          unint64_t v24 = *((void *)a2 + 2);
          uint64_t v25 = *(void *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v28 = 0;
            do
            {
              unint64_t v29 = v23 + 1;
              *((void *)a2 + 1) = v23 + 1;
              char v30 = *(unsigned char *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0) {
                goto LABEL_83;
              }
              v26 += 7;
              unint64_t v23 = v29;
              BOOL v16 = v27++ > 8;
            }
            while (!v16);
LABEL_67:
            LODWORD(v28) = 0;
            goto LABEL_83;
          }
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v28 = 0;
          if (v24 <= v23) {
            unint64_t v24 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v52 = v23 + 1;
              char v53 = *(unsigned char *)(v25 + v23);
              *((void *)a2 + 1) = v52;
              v28 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                unint64_t v23 = v52;
                BOOL v16 = v51++ > 8;
                if (v16) {
                  goto LABEL_67;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v28) = 0;
              }
            }
            break;
          }
LABEL_83:
          *((_DWORD *)this + 9) = v28;
          goto LABEL_97;
        case 2u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v31 = *((void *)a2 + 1);
            unint64_t v32 = *((void *)a2 + 2);
            while (v31 < v32 && !*((unsigned char *)a2 + 24))
            {
              char v34 = (char *)*((void *)this + 2);
              unint64_t v33 = *((void *)this + 3);
              if ((unint64_t)v34 >= v33)
              {
                unint64_t v36 = (char *)*v8;
                uint64_t v37 = (v34 - (unsigned char *)*v8) >> 2;
                unint64_t v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62) {
                  goto LABEL_107;
                }
                uint64_t v39 = v33 - (void)v36;
                if (v39 >> 1 > v38) {
                  unint64_t v38 = v39 >> 1;
                }
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v40 = v38;
                }
                if (v40)
                {
                  char v41 = (char *)sub_100024458((uint64_t)v9, v40);
                  unint64_t v36 = (char *)*((void *)this + 1);
                  char v34 = (char *)*((void *)this + 2);
                }
                else
                {
                  char v41 = 0;
                }
                float v42 = &v41[4 * v37];
                *(_DWORD *)float v42 = 0;
                unsigned int v35 = v42 + 4;
                while (v34 != v36)
                {
                  int v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *((_DWORD *)v42 - 1) = v43;
                  v42 -= 4;
                }
                *((void *)this + 1) = v42;
                *((void *)this + 2) = v35;
                *((void *)this + 3) = &v41[4 * v40];
                if (v36) {
                  operator delete(v36);
                }
              }
              else
              {
                *(_DWORD *)char v34 = 0;
                unsigned int v35 = v34 + 4;
              }
              *((void *)this + 2) = v35;
              unint64_t v44 = *((void *)a2 + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v35 - 1) = *(_DWORD *)(*(void *)a2 + v44);
              unint64_t v32 = *((void *)a2 + 2);
              unint64_t v31 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v31;
            }
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v55 = (char *)*((void *)this + 2);
            unint64_t v54 = *((void *)this + 3);
            if ((unint64_t)v55 >= v54)
            {
              uint64_t v57 = (char *)*v8;
              uint64_t v58 = (v55 - (unsigned char *)*v8) >> 2;
              unint64_t v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 62) {
LABEL_107:
              }
                sub_10000EE98();
              uint64_t v60 = v54 - (void)v57;
              if (v60 >> 1 > v59) {
                unint64_t v59 = v60 >> 1;
              }
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v61 = v59;
              }
              if (v61)
              {
                unint64_t v62 = (char *)sub_100024458((uint64_t)v9, v61);
                uint64_t v57 = (char *)*((void *)this + 1);
                uint64_t v55 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v62 = 0;
              }
              uint64_t v63 = &v62[4 * v58];
              *(_DWORD *)uint64_t v63 = 0;
              uint64_t v56 = v63 + 4;
              while (v55 != v57)
              {
                int v64 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v63 - 1) = v64;
                v63 -= 4;
              }
              *((void *)this + 1) = v63;
              *((void *)this + 2) = v56;
              *((void *)this + 3) = &v62[4 * v61];
              if (v57) {
                operator delete(v57);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v55 = 0;
              uint64_t v56 = v55 + 4;
            }
            *((void *)this + 2) = v56;
            unint64_t v65 = *((void *)a2 + 1);
            if (v65 <= 0xFFFFFFFFFFFFFFFBLL && v65 + 4 <= *((void *)a2 + 2))
            {
              *(v56 - 1) = *(_DWORD *)(*(void *)a2 + v65);
LABEL_96:
              *((void *)a2 + 1) += 4;
            }
            else
            {
LABEL_94:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_97:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 3u:
          *((unsigned char *)this + 44) |= 1u;
          unint64_t v45 = *((void *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)a2 + 2)) {
            goto LABEL_94;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v45);
          goto LABEL_96;
        case 4u:
          *((unsigned char *)this + 44) |= 4u;
          unint64_t v46 = *((void *)a2 + 1);
          if (v46 >= *((void *)a2 + 2))
          {
            BOOL v49 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v47 = v46 + 1;
            int v48 = *(unsigned __int8 *)(*(void *)a2 + v46);
            *((void *)a2 + 1) = v47;
            BOOL v49 = v48 != 0;
          }
          *((unsigned char *)this + 40) = v49;
          goto LABEL_97;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_97;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Skeleton2DJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 44) & 2) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 36), 1u);
  }
  int v4 = *(float **)(v3 + 8);
  char v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  char v7 = *(unsigned char *)(v3 + 44);
  if (v7)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 32), 3u);
    char v7 = *(unsigned char *)(v3 + 44);
  }
  if ((v7 & 4) != 0)
  {
    char v8 = *(unsigned char *)(v3 + 40);
    return PB::Writer::write(a2, v8, 4u);
  }
  return this;
}

BOOL CMMsl::Skeleton2DJoint::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 8);
  unint64_t v2 = *(float **)(a1 + 16);
  int v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  BOOL v5 = (*(unsigned char *)(a2 + 44) & 4) == 0;
  if ((*(unsigned char *)(a1 + 44) & 4) != 0) {
    return (*(unsigned char *)(a2 + 44) & 4) != 0 && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
  }
  return v5;
}

uint64_t CMMsl::Skeleton2DJoint::hash_value(CMMsl::Skeleton2DJoint *this)
{
  if ((*((unsigned char *)this + 44) & 2) != 0) {
    uint64_t v2 = *((int *)this + 9);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  if (*((unsigned char *)this + 44))
  {
    float v6 = *((float *)this + 8);
    uint64_t v4 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v4 = 0;
    }
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v5 = 0;
    return v3 ^ v2 ^ v4 ^ v5;
  }
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v5 = *((unsigned __int8 *)this + 40);
  return v3 ^ v2 ^ v4 ^ v5;
}

void CMMsl::Skeleton3D::~Skeleton3D(CMMsl::Skeleton3D *this)
{
  *(void *)this = off_1003A9180;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A9180;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A9180;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

void *CMMsl::Skeleton3D::Skeleton3D(void *this, const CMMsl::Skeleton3D *a2)
{
  this[1] = 0;
  *this = off_1003A9180;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_10022C33C();
  }
  return this;
}

void sub_10022C33C()
{
}

void sub_10022C440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3D::operator=(uint64_t a1, const CMMsl::Skeleton3D *a2)
{
  if ((const CMMsl::Skeleton3D *)a1 != a2)
  {
    CMMsl::Skeleton3D::Skeleton3D(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    float v6 = off_1003A9180;
    int v9 = (void **)&v7;
    sub_100274A84(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::Skeleton3D *a2, CMMsl::Skeleton3D *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::Skeleton3D::Skeleton3D(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9180;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = off_1003A9180;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::Skeleton3D::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v9 = off_1003A9180;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_100274B44((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    unsigned int v12 = (void **)&v10;
    int v9 = off_1003A9180;
    sub_100274A84(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3D::formatText(CMMsl::Skeleton3D *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "joint");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Skeleton3D::readFrom(CMMsl::Skeleton3D *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_10022C940();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_10022C940()
{
}

void sub_10022CA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3D::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (int i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    long long v5 = *v2++;
  return this;
}

BOOL sub_10022CAF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::SkeletonJoint::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::Skeleton3D::hash_value(CMMsl::Skeleton3D *this)
{
  double v1 = (CMMsl::SkeletonJoint **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::SkeletonJoint **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::SkeletonJoint::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::Skeleton3DLifted::~Skeleton3DLifted(CMMsl::Skeleton3DLifted *this)
{
  *(void *)this = off_1003A91B8;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A91B8;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A91B8;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Skeleton3DLifted::Skeleton3DLifted(uint64_t this, const CMMsl::Skeleton3DLifted *a2)
{
  *(void *)this = off_1003A91B8;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    sub_10022CDD4();
  }
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 5);
    *(unsigned char *)(this + 48) |= 2u;
    *(void *)(this + 40) = v3;
    char v2 = *((unsigned char *)a2 + 48);
  }
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 48) |= 1u;
    *(void *)(this + 8) = v4;
  }
  return this;
}

void sub_10022CDD4()
{
}

void sub_10022CED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3DLifted::operator=(uint64_t a1, const CMMsl::Skeleton3DLifted *a2)
{
  if ((const CMMsl::Skeleton3DLifted *)a1 != a2)
  {
    CMMsl::Skeleton3DLifted::Skeleton3DLifted((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    unsigned int v9 = off_1003A91B8;
    unsigned int v15 = (void **)&v11;
    sub_100274A84(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Skeleton3DLifted *a2, CMMsl::Skeleton3DLifted *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::Skeleton3DLifted::Skeleton3DLifted(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A91B8;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  sub_100274B44((void **)(a1 + 16));
  *uint64_t v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::Skeleton3DLifted::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::Skeleton3DLifted::Skeleton3DLifted((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    unsigned int v9 = off_1003A91B8;
    unsigned int v15 = (void **)&v11;
    sub_100274A84(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3DLifted::formatText(CMMsl::Skeleton3DLifted *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 48)) {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 2);
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "joint");
  }
  if ((*((unsigned char *)this + 48) & 2) != 0) {
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Skeleton3DLifted::readFrom(CMMsl::Skeleton3DLifted *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v22);
LABEL_34:
        *((void *)a2 + 1) += 8;
        goto LABEL_35;
      }
      if (v20 == 1) {
        sub_10022D4D4();
      }
      uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
      if (!result) {
        return result;
      }
LABEL_35:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 48) |= 1u;
    unint64_t v21 = *((void *)a2 + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
    {
LABEL_30:
      *((unsigned char *)a2 + 24) = 1;
      goto LABEL_35;
    }
    *((void *)this + 1) = *(void *)(*(void *)a2 + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

void sub_10022D4D4()
{
}

void sub_10022D5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3DLifted::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base ***)(this + 16);
  uint64_t v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6, 1u);
  }
  char v7 = *(unsigned char *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
    char v7 = *(unsigned char *)(v3 + 48);
  }
  if (v7)
  {
    double v8 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v8, 3u);
  }
  return this;
}

BOOL sub_10022D6D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::Skeleton3DLiftedJoint::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::Skeleton3DLifted::hash_value(CMMsl::Skeleton3DLifted *this)
{
  uint64_t v2 = (CMMsl::Skeleton3DLiftedJoint **)*((void *)this + 2);
  uint64_t v3 = (CMMsl::Skeleton3DLiftedJoint **)*((void *)this + 3);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      v4 ^= CMMsl::Skeleton3DLiftedJoint::hash_value(v5);
    }
    while (v2 != v3);
  }
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
    double v6 = *((double *)this + 5);
    if (v6 == 0.0) {
      double v6 = 0.0;
    }
    if (*((unsigned char *)this + 48)) {
      goto LABEL_8;
    }
LABEL_14:
    double v7 = 0.0;
    return *(void *)&v6 ^ v4 ^ *(void *)&v7;
  }
  double v6 = 0.0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  double v7 = *((double *)this + 1);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  return *(void *)&v6 ^ v4 ^ *(void *)&v7;
}

double CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(CMMsl::Skeleton3DLiftedJoint *this)
{
  *(void *)this = off_1003A91F0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A91F0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint(CMMsl::Skeleton3DLiftedJoint *this)
{
  *(void *)this = off_1003A91F0;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint(this);

  operator delete();
}

CMMsl::Skeleton3DLiftedJoint *CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(CMMsl::Skeleton3DLiftedJoint *this, const CMMsl::Skeleton3DLiftedJoint *a2)
{
  *(void *)this = off_1003A91F0;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v3 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((unsigned char *)a2 + 36))
  {
    int v4 = *((_DWORD *)a2 + 8);
    *((unsigned char *)this + 36) = 1;
    *((_DWORD *)this + 8) = v4;
  }
  if (this != a2) {
    sub_100024308(v3, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::operator=(uint64_t a1, const CMMsl::Skeleton3DLiftedJoint *a2)
{
  if ((const CMMsl::Skeleton3DLiftedJoint *)a1 != a2)
  {
    CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint((CMMsl::Skeleton3DLiftedJoint *)v7, a2);
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint((CMMsl::Skeleton3DLiftedJoint *)v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::Skeleton3DLiftedJoint *a2, CMMsl::Skeleton3DLiftedJoint *a3)
{
  int v3 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  int v4 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  return this;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A91F0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(void *)a1 = off_1003A91F0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v10 = off_1003A91F0;
    uint64_t v3 = *(void *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v5 = *(void *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v5;
    uint64_t v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    long long v11 = v7;
    uint64_t v8 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    uint64_t v12 = v8;
    CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint((CMMsl::Skeleton3DLiftedJoint *)&v10);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::formatText(CMMsl::Skeleton3DLiftedJoint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 36)) {
    PB::TextFormatter::format(a2, "joint", *((_DWORD *)this + 8));
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "position", v7);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::Skeleton3DLiftedJoint::readFrom(CMMsl::Skeleton3DLiftedJoint *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v23 = v13 >> 3;
      if ((v13 >> 3) == 2)
      {
        if (v22 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v32 = *((void *)a2 + 1);
          unint64_t v33 = *((void *)a2 + 2);
          while (v32 < v33 && !*((unsigned char *)a2 + 24))
          {
            unsigned int v35 = (char *)*((void *)this + 2);
            unint64_t v34 = *((void *)this + 3);
            if ((unint64_t)v35 >= v34)
            {
              uint64_t v37 = (char *)*v8;
              uint64_t v38 = (v35 - (unsigned char *)*v8) >> 2;
              unint64_t v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 62) {
                goto LABEL_100;
              }
              uint64_t v40 = v34 - (void)v37;
              if (v40 >> 1 > v39) {
                unint64_t v39 = v40 >> 1;
              }
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v39;
              }
              if (v41)
              {
                float v42 = (char *)sub_100024458((uint64_t)v9, v41);
                uint64_t v37 = (char *)*((void *)this + 1);
                unsigned int v35 = (char *)*((void *)this + 2);
              }
              else
              {
                float v42 = 0;
              }
              int v43 = &v42[4 * v38];
              *(_DWORD *)int v43 = 0;
              unint64_t v36 = v43 + 4;
              while (v35 != v37)
              {
                int v44 = *((_DWORD *)v35 - 1);
                v35 -= 4;
                *((_DWORD *)v43 - 1) = v44;
                v43 -= 4;
              }
              *((void *)this + 1) = v43;
              *((void *)this + 2) = v36;
              *((void *)this + 3) = &v42[4 * v41];
              if (v37) {
                operator delete(v37);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v35 = 0;
              unint64_t v36 = v35 + 4;
            }
            *((void *)this + 2) = v36;
            unint64_t v45 = *((void *)a2 + 1);
            if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v36 - 1) = *(_DWORD *)(*(void *)a2 + v45);
            unint64_t v33 = *((void *)a2 + 2);
            unint64_t v32 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v32;
          }
          PB::Reader::recallMark();
        }
        else
        {
          unsigned int v51 = (char *)*((void *)this + 2);
          unint64_t v50 = *((void *)this + 3);
          if ((unint64_t)v51 >= v50)
          {
            char v53 = (char *)*v8;
            uint64_t v54 = (v51 - (unsigned char *)*v8) >> 2;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 62) {
LABEL_100:
            }
              sub_10000EE98();
            uint64_t v56 = v50 - (void)v53;
            if (v56 >> 1 > v55) {
              unint64_t v55 = v56 >> 1;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57)
            {
              uint64_t v58 = (char *)sub_100024458((uint64_t)v9, v57);
              char v53 = (char *)*((void *)this + 1);
              unsigned int v51 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v58 = 0;
            }
            unint64_t v59 = &v58[4 * v54];
            *(_DWORD *)unint64_t v59 = 0;
            unint64_t v52 = v59 + 4;
            while (v51 != v53)
            {
              int v60 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *((_DWORD *)v59 - 1) = v60;
              v59 -= 4;
            }
            *((void *)this + 1) = v59;
            *((void *)this + 2) = v52;
            *((void *)this + 3) = &v58[4 * v57];
            if (v53) {
              operator delete(v53);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v51 = 0;
            unint64_t v52 = v51 + 4;
          }
          *((void *)this + 2) = v52;
          unint64_t v61 = *((void *)a2 + 1);
          if (v61 <= 0xFFFFFFFFFFFFFFFBLL && v61 + 4 <= *((void *)a2 + 2))
          {
            *(v52 - 1) = *(_DWORD *)(*(void *)a2 + v61);
            *((void *)a2 + 1) += 4;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
        }
      }
      else if (v23 == 1)
      {
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v24 = *((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        uint64_t v26 = *(void *)a2;
        if (v24 > 0xFFFFFFFFFFFFFFF5 || v24 + 10 > v25)
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v29 = 0;
          if (v25 <= v24) {
            unint64_t v25 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_77;
            }
            unint64_t v48 = v24 + 1;
            char v49 = *(unsigned char *)(v26 + v24);
            *((void *)a2 + 1) = v48;
            v29 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v46 += 7;
            unint64_t v24 = v48;
            BOOL v16 = v47++ > 8;
            if (v16)
            {
LABEL_63:
              LODWORD(v29) = 0;
              goto LABEL_77;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v29) = 0;
          }
        }
        else
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          while (1)
          {
            unint64_t v30 = v24 + 1;
            *((void *)a2 + 1) = v24 + 1;
            char v31 = *(unsigned char *)(v26 + v24);
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            unint64_t v24 = v30;
            BOOL v16 = v28++ > 8;
            if (v16) {
              goto LABEL_63;
            }
          }
        }
LABEL_77:
        *((_DWORD *)this + 8) = v29;
      }
      else if ((PB::Reader::skip(a2, v23, v22, 0) & 1) == 0)
      {
        return 0;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 36)) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 32), 1u);
  }
  uint64_t v5 = *(float **)(v3 + 8);
  int v4 = *(float **)(v3 + 16);
  while (v5 != v4)
  {
    float v6 = *v5++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  return this;
}

BOOL CMMsl::Skeleton3DLiftedJoint::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  int v4 = *(float **)(a2 + 8);
  if (v2 - v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 4;
  do
  {
    float v6 = *v4++;
    BOOL result = *(float *)(v5 - 4) == v6;
    BOOL v8 = *(float *)(v5 - 4) != v6 || v5 == v2;
    v5 += 4;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::hash_value(CMMsl::Skeleton3DLiftedJoint *this)
{
  if (*((unsigned char *)this + 36)) {
    uint64_t v1 = *((int *)this + 8);
  }
  else {
    uint64_t v1 = 0;
  }
  return PBHashBytes() ^ v1;
}

void CMMsl::Skeleton3DRetargeted::~Skeleton3DRetargeted(CMMsl::Skeleton3DRetargeted *this)
{
  *(void *)this = off_1003A9228;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A9228;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A9228;
  uint64_t v2 = (void **)((char *)this + 16);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted(uint64_t this, const CMMsl::Skeleton3DRetargeted *a2)
{
  *(void *)this = off_1003A9228;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    sub_10022C33C();
  }
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 5);
    *(unsigned char *)(this + 48) |= 2u;
    *(void *)(this + 40) = v3;
    char v2 = *((unsigned char *)a2 + 48);
  }
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 48) |= 1u;
    *(void *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::Skeleton3DRetargeted::operator=(uint64_t a1, const CMMsl::Skeleton3DRetargeted *a2)
{
  if ((const CMMsl::Skeleton3DRetargeted *)a1 != a2)
  {
    CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    uint64_t v9 = off_1003A9228;
    char v15 = (void **)&v11;
    sub_100274A84(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Skeleton3DRetargeted *a2, CMMsl::Skeleton3DRetargeted *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9228;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  sub_100274B44((void **)(a1 + 16));
  *uint64_t v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::Skeleton3DRetargeted::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v7;
    uint64_t v9 = off_1003A9228;
    char v15 = (void **)&v11;
    sub_100274A84(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3DRetargeted::formatText(CMMsl::Skeleton3DRetargeted *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 48)) {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 2);
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "joint");
  }
  if ((*((unsigned char *)this + 48) & 2) != 0) {
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Skeleton3DRetargeted::readFrom(CMMsl::Skeleton3DRetargeted *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v22);
LABEL_34:
        *((void *)a2 + 1) += 8;
        goto LABEL_35;
      }
      if (v20 == 1) {
        sub_10022C940();
      }
      uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
      if (!result) {
        return result;
      }
LABEL_35:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 48) |= 1u;
    unint64_t v21 = *((void *)a2 + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
    {
LABEL_30:
      *((unsigned char *)a2 + 24) = 1;
      goto LABEL_35;
    }
    *((void *)this + 1) = *(void *)(*(void *)a2 + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

uint64_t CMMsl::Skeleton3DRetargeted::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base ***)(this + 16);
  uint64_t v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6, 1u);
  }
  char v7 = *(unsigned char *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
    char v7 = *(unsigned char *)(v3 + 48);
  }
  if (v7)
  {
    double v8 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v8, 3u);
  }
  return this;
}

uint64_t CMMsl::Skeleton3DRetargeted::hash_value(CMMsl::Skeleton3DRetargeted *this)
{
  unint64_t v2 = (CMMsl::SkeletonJoint **)*((void *)this + 2);
  uint64_t v3 = (CMMsl::SkeletonJoint **)*((void *)this + 3);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      v4 ^= CMMsl::SkeletonJoint::hash_value(v5);
    }
    while (v2 != v3);
  }
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
    double v6 = *((double *)this + 5);
    if (v6 == 0.0) {
      double v6 = 0.0;
    }
    if (*((unsigned char *)this + 48)) {
      goto LABEL_8;
    }
LABEL_14:
    double v7 = 0.0;
    return *(void *)&v6 ^ v4 ^ *(void *)&v7;
  }
  double v6 = 0.0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  double v7 = *((double *)this + 1);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  return *(void *)&v6 ^ v4 ^ *(void *)&v7;
}

double CMMsl::SkeletonJoint::SkeletonJoint(CMMsl::SkeletonJoint *this)
{
  *(void *)this = off_1003A9260;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A9260;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  return result;
}

void CMMsl::SkeletonJoint::~SkeletonJoint(CMMsl::SkeletonJoint *this)
{
  *(void *)this = off_1003A9260;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::SkeletonJoint::~SkeletonJoint(this);

  operator delete();
}

CMMsl::SkeletonJoint *CMMsl::SkeletonJoint::SkeletonJoint(CMMsl::SkeletonJoint *this, const CMMsl::SkeletonJoint *a2)
{
  *(void *)this = off_1003A9260;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  if (*((unsigned char *)a2 + 60))
  {
    int v5 = *((_DWORD *)a2 + 14);
    *((unsigned char *)this + 60) = 1;
    *((_DWORD *)this + 14) = v5;
  }
  if (this != a2)
  {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  return this;
}

uint64_t CMMsl::SkeletonJoint::operator=(uint64_t a1, const CMMsl::SkeletonJoint *a2)
{
  if ((const CMMsl::SkeletonJoint *)a1 != a2)
  {
    CMMsl::SkeletonJoint::SkeletonJoint((CMMsl::SkeletonJoint *)&v8, a2);
    uint64_t v3 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v12;
    uint64_t v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v6;
    CMMsl::SkeletonJoint::~SkeletonJoint((CMMsl::SkeletonJoint *)&v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SkeletonJoint *a2, CMMsl::SkeletonJoint *a3)
{
  int v3 = *(_DWORD *)(this + 60);
  *(_DWORD *)(this + 60) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  int v4 = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  return this;
}

uint64_t CMMsl::SkeletonJoint::SkeletonJoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9260;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::SkeletonJoint::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::SkeletonJoint::SkeletonJoint((uint64_t)&v8, a2);
    uint64_t v3 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v12;
    uint64_t v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v6;
    CMMsl::SkeletonJoint::~SkeletonJoint((CMMsl::SkeletonJoint *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SkeletonJoint::formatText(CMMsl::SkeletonJoint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 60)) {
    PB::TextFormatter::format(a2, "joint", *((_DWORD *)this + 14));
  }
  long long v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "position", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  long long v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "quaternion", v10);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::SkeletonJoint::readFrom(CMMsl::SkeletonJoint *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 32);
    long long v9 = (char *)this + 48;
    float v10 = (void **)((char *)this + 8);
    long long v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 != 2)
        {
          uint64_t v70 = (char *)*((void *)this + 2);
          unint64_t v69 = *((void *)this + 3);
          if ((unint64_t)v70 >= v69)
          {
            char v77 = (char *)*v10;
            uint64_t v78 = (v70 - (unsigned char *)*v10) >> 2;
            unint64_t v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62) {
LABEL_144:
            }
              sub_10000EE98();
            uint64_t v80 = v69 - (void)v77;
            if (v80 >> 1 > v79) {
              unint64_t v79 = v80 >> 1;
            }
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v81 = v79;
            }
            if (v81)
            {
              unint64_t v82 = (char *)sub_100024458((uint64_t)v11, v81);
              char v77 = (char *)*((void *)this + 1);
              uint64_t v70 = (char *)*((void *)this + 2);
            }
            else
            {
              unint64_t v82 = 0;
            }
            unint64_t v85 = &v82[4 * v78];
            *(_DWORD *)unint64_t v85 = 0;
            uint64_t v68 = v85 + 4;
            while (v70 != v77)
            {
              int v86 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *((_DWORD *)v85 - 1) = v86;
              v85 -= 4;
            }
            *((void *)this + 1) = v85;
            *((void *)this + 2) = v68;
            *((void *)this + 3) = &v82[4 * v81];
            if (v77) {
              operator delete(v77);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v70 = 0;
            uint64_t v68 = v70 + 4;
          }
          *((void *)this + 2) = v68;
LABEL_129:
          unint64_t v87 = *((void *)a2 + 1);
          if (v87 <= 0xFFFFFFFFFFFFFFFBLL && v87 + 4 <= *((void *)a2 + 2))
          {
            *(v68 - 1) = *(_DWORD *)(*(void *)a2 + v87);
            *((void *)a2 + 1) += 4;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_133;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v48 = *((void *)a2 + 1);
        unint64_t v49 = *((void *)a2 + 2);
        while (v48 < v49 && !*((unsigned char *)a2 + 24))
        {
          unsigned int v51 = (char *)*((void *)this + 2);
          unint64_t v50 = *((void *)this + 3);
          if ((unint64_t)v51 >= v50)
          {
            char v53 = (char *)*v10;
            uint64_t v54 = (v51 - (unsigned char *)*v10) >> 2;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 62) {
              goto LABEL_144;
            }
            uint64_t v56 = v50 - (void)v53;
            if (v56 >> 1 > v55) {
              unint64_t v55 = v56 >> 1;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57)
            {
              uint64_t v58 = (char *)sub_100024458((uint64_t)v11, v57);
              char v53 = (char *)*((void *)this + 1);
              unsigned int v51 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v58 = 0;
            }
            unint64_t v59 = &v58[4 * v54];
            *(_DWORD *)unint64_t v59 = 0;
            unint64_t v52 = v59 + 4;
            while (v51 != v53)
            {
              int v60 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *((_DWORD *)v59 - 1) = v60;
              v59 -= 4;
            }
            *((void *)this + 1) = v59;
            *((void *)this + 2) = v52;
            *((void *)this + 3) = &v58[4 * v57];
            if (v53) {
              operator delete(v53);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v51 = 0;
            unint64_t v52 = v51 + 4;
          }
          *((void *)this + 2) = v52;
          unint64_t v61 = *((void *)a2 + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *(v52 - 1) = *(_DWORD *)(*(void *)a2 + v61);
          unint64_t v49 = *((void *)a2 + 2);
          unint64_t v48 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v48;
        }
LABEL_94:
        PB::Reader::recallMark();
        goto LABEL_133;
      }
      if (v25 == 1)
      {
        *((unsigned char *)this + 60) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v27)
        {
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v31 = 0;
          if (v27 <= v26) {
            unint64_t v27 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_114;
            }
            unint64_t v64 = v26 + 1;
            char v65 = *(unsigned char *)(v28 + v26);
            *((void *)a2 + 1) = v64;
            v31 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0) {
              break;
            }
            v62 += 7;
            unint64_t v26 = v64;
            BOOL v18 = v63++ > 8;
            if (v18)
            {
LABEL_88:
              LODWORD(v31) = 0;
              goto LABEL_114;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v32 = v26 + 1;
            *((void *)a2 + 1) = v26 + 1;
            char v33 = *(unsigned char *)(v28 + v26);
            v31 |= (unint64_t)(v33 & 0x7F) << v29;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v26 = v32;
            BOOL v18 = v30++ > 8;
            if (v18) {
              goto LABEL_88;
            }
          }
        }
LABEL_114:
        *((_DWORD *)this + 14) = v31;
      }
      else if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0)
      {
        return 0;
      }
LABEL_133:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    if (v24 != 2)
    {
      uint64_t v67 = (char *)*((void *)this + 5);
      unint64_t v66 = *((void *)this + 6);
      if ((unint64_t)v67 >= v66)
      {
        uint64_t v71 = (char *)*v8;
        uint64_t v72 = (v67 - (unsigned char *)*v8) >> 2;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 62) {
LABEL_143:
        }
          sub_10000EE98();
        uint64_t v74 = v66 - (void)v71;
        if (v74 >> 1 > v73) {
          unint64_t v73 = v74 >> 1;
        }
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75)
        {
          uint64_t v76 = (char *)sub_100024458((uint64_t)v9, v75);
          uint64_t v71 = (char *)*((void *)this + 4);
          uint64_t v67 = (char *)*((void *)this + 5);
        }
        else
        {
          uint64_t v76 = 0;
        }
        unint64_t v83 = &v76[4 * v72];
        *(_DWORD *)unint64_t v83 = 0;
        uint64_t v68 = v83 + 4;
        while (v67 != v71)
        {
          int v84 = *((_DWORD *)v67 - 1);
          v67 -= 4;
          *((_DWORD *)v83 - 1) = v84;
          v83 -= 4;
        }
        *((void *)this + 4) = v83;
        *((void *)this + 5) = v68;
        *((void *)this + 6) = &v76[4 * v75];
        if (v71) {
          operator delete(v71);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v67 = 0;
        uint64_t v68 = v67 + 4;
      }
      *((void *)this + 5) = v68;
      goto LABEL_129;
    }
    if (PB::Reader::placeMark()) {
      return 0;
    }
    unint64_t v34 = *((void *)a2 + 1);
    unint64_t v35 = *((void *)a2 + 2);
    while (v34 < v35 && !*((unsigned char *)a2 + 24))
    {
      uint64_t v37 = (char *)*((void *)this + 5);
      unint64_t v36 = *((void *)this + 6);
      if ((unint64_t)v37 >= v36)
      {
        unint64_t v39 = (char *)*v8;
        uint64_t v40 = (v37 - (unsigned char *)*v8) >> 2;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          goto LABEL_143;
        }
        uint64_t v42 = v36 - (void)v39;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          int v44 = (char *)sub_100024458((uint64_t)v9, v43);
          unint64_t v39 = (char *)*((void *)this + 4);
          uint64_t v37 = (char *)*((void *)this + 5);
        }
        else
        {
          int v44 = 0;
        }
        unint64_t v45 = &v44[4 * v40];
        *(_DWORD *)unint64_t v45 = 0;
        uint64_t v38 = v45 + 4;
        while (v37 != v39)
        {
          int v46 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *((void *)this + 4) = v45;
        *((void *)this + 5) = v38;
        *((void *)this + 6) = &v44[4 * v43];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v37 = 0;
        uint64_t v38 = v37 + 4;
      }
      *((void *)this + 5) = v38;
      unint64_t v47 = *((void *)a2 + 1);
      if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)a2 + 2))
      {
LABEL_93:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_94;
      }
      *(v38 - 1) = *(_DWORD *)(*(void *)a2 + v47);
      unint64_t v35 = *((void *)a2 + 2);
      unint64_t v34 = *((void *)a2 + 1) + 4;
      *((void *)a2 + 1) = v34;
    }
    goto LABEL_94;
  }
  return v4 == 0;
}

uint64_t CMMsl::SkeletonJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 60)) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 56), 1u);
  }
  int v4 = (float *)v3[1];
  long long v5 = (float *)v3[2];
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  uint64_t v8 = (float *)v3[4];
  float v7 = (float *)v3[5];
  while (v8 != v7)
  {
    float v9 = *v8++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  return this;
}

BOOL CMMsl::SkeletonJoint::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 60))
  {
    if ((*(unsigned char *)(a2 + 60) & 1) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 60))
  {
    return 0;
  }
  unint64_t v3 = *(float **)(a1 + 8);
  unint64_t v2 = *(float **)(a1 + 16);
  int v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  float v7 = *(float **)(a2 + 32);
  if (v5 - v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 4;
  do
  {
    float v9 = *v7++;
    BOOL result = *(float *)(v8 - 4) == v9;
    BOOL v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::SkeletonJoint::hash_value(CMMsl::SkeletonJoint *this)
{
  if (*((unsigned char *)this + 60)) {
    uint64_t v1 = *((int *)this + 14);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

void CMMsl::SoundPressureLevel::~SoundPressureLevel(CMMsl::SoundPressureLevel *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t this, const CMMsl::SoundPressureLevel *a2)
{
  *(void *)this = off_1003A9298;
  *(_DWORD *)(this + 20) = 0;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = 2;
    *(_DWORD *)(this + 16) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 1) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 20))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = v2;
    *(void *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::SoundPressureLevel::operator=(uint64_t a1, const CMMsl::SoundPressureLevel *a2)
{
  if ((const CMMsl::SoundPressureLevel *)a1 != a2)
  {
    CMMsl::SoundPressureLevel::SoundPressureLevel((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v3;
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SoundPressureLevel *a2, CMMsl::SoundPressureLevel *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return result;
}

float CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9298;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A9298;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t CMMsl::SoundPressureLevel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    int v4 = *(_DWORD *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v12 = v6;
    int v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    int v11 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v5;
    v10[0] = off_1003A9298;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::SoundPressureLevel::formatText(CMMsl::SoundPressureLevel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "rms", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SoundPressureLevel::readFrom(CMMsl::SoundPressureLevel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((void *)this + 1) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SoundPressureLevel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    unint64_t v5 = *(void *)(v3 + 8);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::SoundPressureLevel::hash_value(CMMsl::SoundPressureLevel *this)
{
  if ((*((unsigned char *)this + 20) & 2) != 0)
  {
    float v3 = *((float *)this + 4);
    uint64_t v1 = LODWORD(v3);
    if (v3 == 0.0) {
      uint64_t v1 = 0;
    }
    if (*((unsigned char *)this + 20)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((void *)this + 1);
  return v2 ^ v1;
}

void CMMsl::SpatialEvent::~SpatialEvent(CMMsl::SpatialEvent *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::SpatialEvent::SpatialEvent(CMMsl::SpatialEvent *this, const CMMsl::SpatialEvent *a2)
{
  *(void *)this = off_1003A92D0;
  *((void *)this + 2) = 0;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 4);
    *((unsigned char *)this + 20) = 2;
    *((_DWORD *)this + 4) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 20))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 20) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

const CMMsl::SpatialEvent *CMMsl::SpatialEvent::operator=(const CMMsl::SpatialEvent *a1, const CMMsl::SpatialEvent *a2)
{
  if (a1 != a2)
  {
    CMMsl::SpatialEvent::SpatialEvent((CMMsl::SpatialEvent *)v7, a2);
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v3 = *((void *)a1 + 2);
    uint64_t v5 = v9;
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v5;
    uint64_t v8 = v4;
    uint64_t v9 = v3;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SpatialEvent *a2, CMMsl::SpatialEvent *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  int v4 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SpatialEvent::SpatialEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A92D0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A92D0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SpatialEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A92D0;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v6;
    void v8[2] = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SpatialEvent::formatText(CMMsl::SpatialEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "event", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SpatialEvent::readFrom(CMMsl::SpatialEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SpatialEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::SpatialEvent::hash_value(CMMsl::SpatialEvent *this)
{
  if ((*((unsigned char *)this + 20) & 2) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 20)) {
      goto LABEL_3;
    }
LABEL_7:
    double v2 = 0.0;
    return *(void *)&v2 ^ v1;
  }
  uint64_t v1 = *((int *)this + 4);
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ v1;
}

void CMMsl::SteadinessEvent::~SteadinessEvent(CMMsl::SteadinessEvent *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::SteadinessEvent::SteadinessEvent(CMMsl::SteadinessEvent *this, const CMMsl::SteadinessEvent *a2)
{
  *(void *)this = off_1003A9308;
  *((_DWORD *)this + 15) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    __int16 v3 = 8;
    *((_WORD *)this + 30) = 8;
    *((double *)this + 4) = result;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 12);
    v3 |= 0x20u;
    *((_WORD *)this + 30) = v3;
    *((_DWORD *)this + 12) = v5;
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    char v6 = *((unsigned char *)a2 + 55);
    v3 |= 0x200u;
    *((_WORD *)this + 30) = v3;
    *((unsigned char *)this + 55) = v6;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 56);
  v3 |= 0x400u;
  *((_WORD *)this + 30) = v3;
  *((unsigned char *)this + 56) = v7;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v8 = *((unsigned char *)a2 + 52);
  v3 |= 0x40u;
  *((_WORD *)this + 30) = v3;
  *((unsigned char *)this + 52) = v8;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  char v9 = *((unsigned char *)a2 + 53);
  v3 |= 0x80u;
  *((_WORD *)this + 30) = v3;
  *((unsigned char *)this + 53) = v9;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  char v10 = *((unsigned char *)a2 + 54);
  v3 |= 0x100u;
  *((_WORD *)this + 30) = v3;
  *((unsigned char *)this + 54) = v10;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 30) = v3;
  *((double *)this + 2) = result;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 30) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_24:
    double result = *((double *)a2 + 5);
    *((_WORD *)this + 30) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_23:
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 30) = v3;
  *((double *)this + 3) = result;
  if ((*((_WORD *)a2 + 30) & 0x10) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::SteadinessEvent::operator=(CMMsl *a1, const CMMsl::SteadinessEvent *a2)
{
  if (a1 != a2)
  {
    CMMsl::SteadinessEvent::SteadinessEvent((CMMsl::SteadinessEvent *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessEvent *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessEvent *a2, CMMsl::SteadinessEvent *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 55);
  *((unsigned char *)this + 55) = *((unsigned char *)a2 + 55);
  *((unsigned char *)a2 + 55) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 52);
  *((unsigned char *)this + 52) = *((unsigned char *)a2 + 52);
  *((unsigned char *)a2 + 52) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 53);
  *((unsigned char *)this + 53) = *((unsigned char *)a2 + 53);
  *((unsigned char *)a2 + 53) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 54);
  *((unsigned char *)this + 54) = *((unsigned char *)a2 + 54);
  *((unsigned char *)a2 + 54) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::SteadinessEvent::SteadinessEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9308;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 55) = *(unsigned char *)(a2 + 55);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 53);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::SteadinessEvent::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessEvent::SteadinessEvent((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessEvent *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessEvent::formatText(CMMsl::SteadinessEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "isBlockoutPeriodLow", *((unsigned char *)this + 52));
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isBlockoutPeriodVeryLow", *((unsigned char *)this + 53));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "isSampleRecent", *((unsigned char *)this + 54));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "percentLow", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "percentOK", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "percentVeryLow", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "totalValidDuration", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "userHasOnboarded", *((unsigned char *)this + 55));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "value", *((_DWORD *)this + 12));
  if ((*((_WORD *)this + 30) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "writtenToHealthKit", *((unsigned char *)this + 56));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessEvent::readFrom(CMMsl::SteadinessEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 30) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 2u:
              *((_WORD *)this + 30) |= 0x20u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_79;
                  }
                  unint64_t v39 = v21++;
                  char v40 = *(unsigned char *)(v22 + v39);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_78:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_78;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_79;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_79:
              *((_DWORD *)this + 12) = v25;
LABEL_80:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 3u:
              *((_WORD *)this + 30) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 55) = v28;
              goto LABEL_80;
            case 4u:
              *((_WORD *)this + 30) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 56) = v30;
              goto LABEL_80;
            case 5u:
              *((_WORD *)this + 30) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v32 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v32 = v31 != 0;
              }
              *((unsigned char *)this + 52) = v32;
              goto LABEL_80;
            case 6u:
              *((_WORD *)this + 30) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 53) = v34;
              goto LABEL_80;
            case 7u:
              *((_WORD *)this + 30) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *((unsigned char *)this + 54) = v36;
              goto LABEL_80;
            case 8u:
              *((_WORD *)this + 30) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 9u:
              *((_WORD *)this + 30) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 0xAu:
              *((_WORD *)this + 30) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 0xBu:
              *((_WORD *)this + 30) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
LABEL_74:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_55:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_80;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_80;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 55), 3u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 56), 4u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 52), 5u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 53), 6u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 54), 7u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 8u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xAu);
    if ((*(_WORD *)(v3 + 60) & 0x10) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 9u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 40);

  return PB::Writer::write(a2, v5, 0xBu);
}

uint64_t CMMsl::SteadinessEvent::hash_value(CMMsl::SteadinessEvent *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 8) != 0)
  {
    double v2 = *((double *)this + 4);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 12);
      if ((*((_WORD *)this + 30) & 0x200) != 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((_WORD *)this + 30) & 0x200) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned __int8 *)this + 55);
    if ((*((_WORD *)this + 30) & 0x400) != 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v4 = 0;
  if ((*((_WORD *)this + 30) & 0x400) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned __int8 *)this + 56);
    if ((v1 & 0x40) != 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v5 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_6:
    uint64_t v6 = *((unsigned __int8 *)this + 52);
    if ((v1 & 0x80) != 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v6 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_7:
    uint64_t v7 = *((unsigned __int8 *)this + 53);
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 30) & 0x100) != 0)
  {
LABEL_8:
    uint64_t v8 = *((unsigned __int8 *)this + 54);
    if ((v1 & 2) != 0) {
      goto LABEL_9;
    }
LABEL_30:
    double v9 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_31:
    double v10 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v8 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_30;
  }
LABEL_9:
  double v9 = *((double *)this + 2);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_12:
  double v10 = *((double *)this + 1);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_15:
    double v11 = *((double *)this + 3);
    if (v11 == 0.0) {
      double v11 = 0.0;
    }
    if ((v1 & 0x10) != 0) {
      goto LABEL_18;
    }
LABEL_33:
    double v12 = 0.0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12;
  }
LABEL_32:
  double v11 = 0.0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_33;
  }
LABEL_18:
  double v12 = *((double *)this + 5);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12;
}

void CMMsl::SteadinessModelBalanceFeatures::~SteadinessModelBalanceFeatures(CMMsl::SteadinessModelBalanceFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures(CMMsl::SteadinessModelBalanceFeatures *this, const CMMsl::SteadinessModelBalanceFeatures *a2)
{
  *(void *)this = off_1003A9340;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    char v3 = 2;
    *((unsigned char *)this + 40) = 2;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 40))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 4);
    *((unsigned char *)this + 40) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((unsigned char *)this + 40) = v3;
  *((double *)this + 3) = result;
  if ((*((unsigned char *)a2 + 40) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::operator=(uint64_t a1, const CMMsl::SteadinessModelBalanceFeatures *a2)
{
  if ((const CMMsl::SteadinessModelBalanceFeatures *)a1 != a2)
  {
    CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures((CMMsl::SteadinessModelBalanceFeatures *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelBalanceFeatures *a2, CMMsl::SteadinessModelBalanceFeatures *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9340;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9340;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A9340;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v11 = *(_DWORD *)(a1 + 40);
    long long v4 = *(_OWORD *)(a2 + 8);
    long long v9 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a1 + 24);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 24) = v6;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::formatText(CMMsl::SteadinessModelBalanceFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "intermediateBoutsAsymmetryPercentageCv", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "intermediateBoutsAsymmetryPercentageMedian", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "intermediateBoutsDoubleSupportPercentageMedian", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "intermediateBoutsDoubleSupportPercentageStd", *((double *)this + 4));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::readFrom(CMMsl::SteadinessModelBalanceFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 40) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 40) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 40) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
      if ((*(unsigned char *)(v3 + 40) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 32);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::hash_value(CMMsl::SteadinessModelBalanceFeatures *this)
{
  if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 40)) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 2);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 4) != 0)
  {
LABEL_6:
    double v3 = *((double *)this + 3);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v4 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
  }
LABEL_16:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v4 = *((double *)this + 4);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
}

void CMMsl::SteadinessModelContinuousWalkingFeatures::~SteadinessModelContinuousWalkingFeatures(CMMsl::SteadinessModelContinuousWalkingFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures(CMMsl::SteadinessModelContinuousWalkingFeatures *this, const CMMsl::SteadinessModelContinuousWalkingFeatures *a2)
{
  *(void *)this = off_1003A9378;
  *((_DWORD *)this + 44) = 0;
  int v2 = *((_DWORD *)a2 + 44);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 44) = 1;
    *((double *)this + 1) = result;
    int v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 2) = result;
    int v2 = *((_DWORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 3) = result;
    int v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 11) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  double result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 12) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  double result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }
LABEL_38:
  double result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 18) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_40;
  }
LABEL_39:
  double result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x8000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_41;
  }
LABEL_40:
  double result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_42;
  }
LABEL_41:
  double result = *((double *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_43;
  }
LABEL_42:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000) == 0) {
      return result;
    }
LABEL_44:
    double result = *((double *)a2 + 13);
    *((_DWORD *)this + 44) = v3 | 0x1000;
    *((double *)this + 13) = result;
    return result;
  }
LABEL_43:
  double result = *((double *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 17) = result;
  if ((*((_DWORD *)a2 + 44) & 0x1000) != 0) {
    goto LABEL_44;
  }
  return result;
}

CMMsl *CMMsl::SteadinessModelContinuousWalkingFeatures::operator=(CMMsl *a1, const CMMsl::SteadinessModelContinuousWalkingFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures((CMMsl::SteadinessModelContinuousWalkingFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelContinuousWalkingFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelContinuousWalkingFeatures *a2, CMMsl::SteadinessModelContinuousWalkingFeatures *a3)
{
  int v3 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v7;
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  uint64_t v12 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v12;
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
  uint64_t v14 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v15;
  uint64_t v16 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v16;
  uint64_t v17 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v17;
  uint64_t v18 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v18;
  uint64_t v19 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v19;
  uint64_t v20 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v20;
  uint64_t v21 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v21;
  uint64_t v22 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v22;
  uint64_t v23 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v23;
  double result = *((double *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((double *)a2 + 13) = result;
  return result;
}

double CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9378;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  double result = *(double *)(a2 + 104);
  *(double *)(a1 + 104) = result;
  return result;
}

CMMsl *CMMsl::SteadinessModelContinuousWalkingFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelContinuousWalkingFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::formatText(CMMsl::SteadinessModelContinuousWalkingFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "allBoutsBoutDurationSecCv", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "allBoutsBoutDurationSecMedian", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "allBoutsCycleTimeCv", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "intermediateBoutsCycleTimeCv", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "intermediateBoutsCycleTimeMedian", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "intermediateBoutsDoubleSupportPercentageMedian", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthCv", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthMedian", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthMedianHeightnorm", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedCv", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedMedian", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedMedianSqrtheightnorm", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "longBoutsWalkingSpeedCountRatioLog", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "shortBoutsCycleTimeCv", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "shortBoutsCycleTimeMedian", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "shortBoutsDoubleSupportPercentageMedian", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "shortBoutsStepLengthCv", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "shortBoutsStepLengthMedianHeightnorm", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "shortBoutsWalkingSpeedCv", *((double *)this + 19));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "shortBoutsWalkingSpeedMedian", *((double *)this + 20));
  if ((*((_DWORD *)this + 44) & 0x100000) != 0) {
LABEL_22:
  }
    PB::TextFormatter::format(a2, "shortBoutsWalkingSpeedMedianSqrtheightnorm", *((double *)this + 21));
LABEL_23:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::readFrom(CMMsl::SteadinessModelContinuousWalkingFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 44) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 2u:
          *((_DWORD *)this + 44) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 3u:
          *((_DWORD *)this + 44) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 4u:
          *((_DWORD *)this + 44) |= 0x400u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 5u:
          *((_DWORD *)this + 44) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 6u:
          *((_DWORD *)this + 44) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 7u:
          *((_DWORD *)this + 44) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 8u:
          *((_DWORD *)this + 44) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 9u:
          *((_DWORD *)this + 44) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 0xAu:
          *((_DWORD *)this + 44) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 0xBu:
          *((_DWORD *)this + 44) |= 0x800u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 0xCu:
          *((_DWORD *)this + 44) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 0xDu:
          *((_DWORD *)this + 44) |= 0x80000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 0xEu:
          *((_DWORD *)this + 44) |= 0x100000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 0xFu:
          *((_DWORD *)this + 44) |= 0x20000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 0x10u:
          *((_DWORD *)this + 44) |= 0x4000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 0x11u:
          *((_DWORD *)this + 44) |= 0x8000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 0x12u:
          *((_DWORD *)this + 44) |= 0x40000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 0x13u:
          *((_DWORD *)this + 44) |= 0x2000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 0x14u:
          *((_DWORD *)this + 44) |= 0x10000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_86;
          }
          *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 0x15u:
          *((_DWORD *)this + 44) |= 0x1000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
          {
LABEL_86:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
LABEL_88:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 176);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 4u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 5u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 6u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 7u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 8u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 9u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xAu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0xBu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0xCu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 0xDu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 0xEu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0xFu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0x10u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0x11u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 0x12u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
LABEL_42:
    this = PB::Writer::write(a2, *(double *)(v3 + 136), 0x14u);
    if ((*(_DWORD *)(v3 + 176) & 0x1000) == 0) {
      return this;
    }
    goto LABEL_43;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x13u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_42;
  }
LABEL_21:
  if ((v4 & 0x1000) == 0) {
    return this;
  }
LABEL_43:
  double v5 = *(double *)(v3 + 104);

  return PB::Writer::write(a2, v5, 0x15u);
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::hash_value(CMMsl::SteadinessModelContinuousWalkingFeatures *this)
{
  int v1 = *((_DWORD *)this + 44);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_66:
    double v3 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_67:
    double v4 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_9;
    }
LABEL_68:
    double v5 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_69:
    double v6 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_15;
    }
LABEL_70:
    double v7 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_18;
    }
LABEL_71:
    double v8 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_21;
    }
LABEL_72:
    double v9 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_24;
    }
LABEL_73:
    double v10 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_27;
    }
LABEL_74:
    double v11 = 0.0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_30;
    }
LABEL_75:
    double v12 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_33;
    }
LABEL_76:
    double v13 = 0.0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_36;
    }
LABEL_77:
    double v14 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_39;
    }
LABEL_78:
    double v15 = 0.0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_42;
    }
LABEL_79:
    double v16 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_45;
    }
LABEL_80:
    double v17 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_48;
    }
LABEL_81:
    double v18 = 0.0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_51;
    }
LABEL_82:
    double v19 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_54;
    }
LABEL_83:
    double v20 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_57;
    }
    goto LABEL_84;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_66;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_67;
  }
LABEL_6:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_68;
  }
LABEL_9:
  double v5 = *((double *)this + 11);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_69;
  }
LABEL_12:
  double v6 = *((double *)this + 10);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_70;
  }
LABEL_15:
  double v7 = *((double *)this + 5);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_71;
  }
LABEL_18:
  double v8 = *((double *)this + 4);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_72;
  }
LABEL_21:
  double v9 = *((double *)this + 8);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_73;
  }
LABEL_24:
  double v10 = *((double *)this + 7);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_74;
  }
LABEL_27:
  double v11 = *((double *)this + 6);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_75;
  }
LABEL_30:
  double v12 = *((double *)this + 12);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_76;
  }
LABEL_33:
  double v13 = *((double *)this + 9);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_77;
  }
LABEL_36:
  double v14 = *((double *)this + 20);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_78;
  }
LABEL_39:
  double v15 = *((double *)this + 21);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_79;
  }
LABEL_42:
  double v16 = *((double *)this + 18);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_80;
  }
LABEL_45:
  double v17 = *((double *)this + 15);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_81;
  }
LABEL_48:
  double v18 = *((double *)this + 16);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_82;
  }
LABEL_51:
  double v19 = *((double *)this + 19);
  if (v19 == 0.0) {
    double v19 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_83;
  }
LABEL_54:
  double v20 = *((double *)this + 14);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_57:
    double v21 = *((double *)this + 17);
    if (v21 == 0.0) {
      double v21 = 0.0;
    }
    if ((v1 & 0x1000) != 0) {
      goto LABEL_60;
    }
LABEL_85:
    double v22 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22;
  }
LABEL_84:
  double v21 = 0.0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_85;
  }
LABEL_60:
  double v22 = *((double *)this + 13);
  if (v22 == 0.0) {
    double v22 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22;
}

void CMMsl::SteadinessModelGaitBaselineFeatures::~SteadinessModelGaitBaselineFeatures(CMMsl::SteadinessModelGaitBaselineFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures(CMMsl::SteadinessModelGaitBaselineFeatures *this, const CMMsl::SteadinessModelGaitBaselineFeatures *a2)
{
  *(void *)this = off_1003A93B0;
  *((_DWORD *)this + 22) = 0;
  __int16 v2 = *((_WORD *)a2 + 44);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 44) = 1;
    *((double *)this + 1) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 2) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 3) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 10) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_22:
    double result = *((double *)a2 + 6);
    *((_WORD *)this + 44) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_21:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 5) = result;
  if ((*((_WORD *)a2 + 44) & 0x20) != 0) {
    goto LABEL_22;
  }
  return result;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::operator=(uint64_t a1, const CMMsl::SteadinessModelGaitBaselineFeatures *a2)
{
  if ((const CMMsl::SteadinessModelGaitBaselineFeatures *)a1 != a2)
  {
    CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures((CMMsl::SteadinessModelGaitBaselineFeatures *)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v16;
    int v16 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v15;
    long long v15 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v14 = v7;
    long long v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelGaitBaselineFeatures *a2, CMMsl::SteadinessModelGaitBaselineFeatures *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v7;
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  double result = *((double *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A93B0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures((uint64_t)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v16;
    int v16 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v15;
    long long v15 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v14 = v7;
    long long v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::formatText(CMMsl::SteadinessModelGaitBaselineFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "asymmetryPercentageMedian", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "asymmetryPercentageStd", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "doubleSupportPercentageMedian", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "height", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthQ95Heightnorm", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedQ95Sqrtheightnorm", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "modelOutputBalancePrior", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "stepLengthMedian", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "stepLengthXWalkingSpeedMedian", *((double *)this + 9));
  if ((*((_WORD *)this + 44) & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "walkingSpeedMedian", *((double *)this + 10));
LABEL_12:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::readFrom(CMMsl::SteadinessModelGaitBaselineFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 44) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_53;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 2u:
          *((_WORD *)this + 44) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_53;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 3u:
          *((_WORD *)this + 44) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_53;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 4u:
          *((_WORD *)this + 44) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_53;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 5u:
          *((_WORD *)this + 44) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_53;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 6u:
          *((_WORD *)this + 44) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_53;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 7u:
          *((_WORD *)this + 44) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_53;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 8u:
          *((_WORD *)this + 44) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_53;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 9u:
          *((_WORD *)this + 44) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_53;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_55;
        case 0xAu:
          *((_WORD *)this + 44) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
LABEL_55:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_53:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 88);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 4u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 5u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 6u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 7u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::write(a2, *(double *)(v3 + 40), 9u);
    if ((*(_WORD *)(v3 + 88) & 0x20) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 8u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_21:
  double v5 = *(double *)(v3 + 48);

  return PB::Writer::write(a2, v5, 0xAu);
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::hash_value(CMMsl::SteadinessModelGaitBaselineFeatures *this)
{
  __int16 v1 = *((_WORD *)this + 44);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_33:
    double v3 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_34:
    double v4 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_9;
    }
LABEL_35:
    double v5 = 0.0;
    if ((*((_WORD *)this + 44) & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_36:
    double v6 = 0.0;
    if ((*((_WORD *)this + 44) & 0x100) != 0) {
      goto LABEL_15;
    }
LABEL_37:
    double v7 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_18;
    }
LABEL_38:
    double v8 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_21;
    }
LABEL_39:
    double v9 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_24;
    }
    goto LABEL_40;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_34;
  }
LABEL_6:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_35;
  }
LABEL_9:
  double v5 = *((double *)this + 8);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x200) == 0) {
    goto LABEL_36;
  }
LABEL_12:
  double v6 = *((double *)this + 10);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x100) == 0) {
    goto LABEL_37;
  }
LABEL_15:
  double v7 = *((double *)this + 9);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_38;
  }
LABEL_18:
  double v8 = *((double *)this + 4);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_39;
  }
LABEL_21:
  double v9 = *((double *)this + 7);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_24:
    double v10 = *((double *)this + 5);
    if (v10 == 0.0) {
      double v10 = 0.0;
    }
    if ((v1 & 0x20) != 0) {
      goto LABEL_27;
    }
LABEL_41:
    double v11 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11;
  }
LABEL_40:
  double v10 = 0.0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_41;
  }
LABEL_27:
  double v11 = *((double *)this + 6);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11;
}

void CMMsl::SteadinessModelHarmonicFeatures::~SteadinessModelHarmonicFeatures(CMMsl::SteadinessModelHarmonicFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures(CMMsl::SteadinessModelHarmonicFeatures *this, const CMMsl::SteadinessModelHarmonicFeatures *a2)
{
  *(void *)this = off_1003A93E8;
  *((_DWORD *)this + 62) = 0;
  int v2 = *((_DWORD *)a2 + 62);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 62) = 1;
    *((double *)this + 1) = result;
    int v2 = *((_DWORD *)a2 + 62);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 62) = v3;
    *((double *)this + 2) = result;
    int v2 = *((_DWORD *)a2 + 62);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 62) = v3;
    *((double *)this + 3) = result;
    int v2 = *((_DWORD *)a2 + 62);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_37;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 9) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_42:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 11) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }
LABEL_44:
  double result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 12) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_45:
  double result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x2000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }
LABEL_46:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_47:
  double result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_48:
  double result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
LABEL_49:
  double result = *((double *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 17) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
LABEL_50:
  double result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 18) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }
LABEL_51:
  double result = *((double *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }
LABEL_52:
  double result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }
LABEL_53:
  double result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }
LABEL_54:
  double result = *((double *)a2 + 22);
  v3 |= 0x200000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 22) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x400000) == 0)
  {
LABEL_27:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_56;
  }
LABEL_55:
  double result = *((double *)a2 + 23);
  v3 |= 0x400000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 23) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x800000) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_57;
  }
LABEL_56:
  double result = *((double *)a2 + 24);
  v3 |= 0x800000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 24) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_58;
  }
LABEL_57:
  double result = *((double *)a2 + 25);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 25) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_59;
  }
LABEL_58:
  double result = *((double *)a2 + 27);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 27) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_60;
  }
LABEL_59:
  double result = *((double *)a2 + 28);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 28) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_61;
  }
LABEL_60:
  double result = *((double *)a2 + 29);
  v3 |= 0x10000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 29) = result;
  int v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x2000000) == 0) {
      return result;
    }
LABEL_62:
    double result = *((double *)a2 + 26);
    *((_DWORD *)this + 62) = v3 | 0x2000000;
    *((double *)this + 26) = result;
    return result;
  }
LABEL_61:
  double result = *((double *)a2 + 30);
  v3 |= 0x20000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 30) = result;
  if ((*((_DWORD *)a2 + 62) & 0x2000000) != 0) {
    goto LABEL_62;
  }
  return result;
}

CMMsl *CMMsl::SteadinessModelHarmonicFeatures::operator=(CMMsl *a1, const CMMsl::SteadinessModelHarmonicFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures((CMMsl::SteadinessModelHarmonicFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelHarmonicFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelHarmonicFeatures *a2, CMMsl::SteadinessModelHarmonicFeatures *a3)
{
  int v3 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  uint64_t v12 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v12;
  uint64_t v13 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v13;
  uint64_t v14 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v14;
  uint64_t v15 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v15;
  uint64_t v16 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v16;
  uint64_t v17 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v17;
  uint64_t v18 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v18;
  uint64_t v19 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v19;
  uint64_t v20 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v20;
  uint64_t v21 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v21;
  uint64_t v22 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v22;
  uint64_t v23 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v23;
  uint64_t v24 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v24;
  uint64_t v25 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v25;
  uint64_t v26 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v26;
  uint64_t v27 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v27;
  uint64_t v28 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v28;
  uint64_t v29 = *((void *)this + 27);
  *((void *)this + 27) = *((void *)a2 + 27);
  *((void *)a2 + 27) = v29;
  uint64_t v30 = *((void *)this + 28);
  *((void *)this + 28) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v30;
  uint64_t v31 = *((void *)this + 29);
  *((void *)this + 29) = *((void *)a2 + 29);
  *((void *)a2 + 29) = v31;
  uint64_t v32 = *((void *)this + 30);
  *((void *)this + 30) = *((void *)a2 + 30);
  *((void *)a2 + 30) = v32;
  double result = *((double *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((double *)a2 + 26) = result;
  return result;
}

double CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A93E8;
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a2 + 248) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  double result = *(double *)(a2 + 208);
  *(double *)(a1 + 208) = result;
  return result;
}

CMMsl *CMMsl::SteadinessModelHarmonicFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelHarmonicFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::formatText(CMMsl::SteadinessModelHarmonicFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 62);
  if (v5)
  {
    PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApCv", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 62);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApMean", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApMedian", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApQ5", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApQ95", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlCv", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlMean", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlMedian", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlQ5", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlQ95", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtCv", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtMean", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtMedian", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtQ5", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtQ95", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApCv", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApMean", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApMedian", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApQ5", *((double *)this + 19));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApQ95", *((double *)this + 20));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlCv", *((double *)this + 21));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlMean", *((double *)this + 22));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlMedian", *((double *)this + 23));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlQ5", *((double *)this + 24));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlQ95", *((double *)this + 25));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtCv", *((double *)this + 26));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtMean", *((double *)this + 27));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtMedian", *((double *)this + 28));
  int v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtQ5", *((double *)this + 29));
  if ((*((_DWORD *)this + 62) & 0x20000000) != 0) {
LABEL_31:
  }
    PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtQ95", *((double *)this + 30));
LABEL_32:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::readFrom(CMMsl::SteadinessModelHarmonicFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 62) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 2u:
          *((_DWORD *)this + 62) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 3u:
          *((_DWORD *)this + 62) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 4u:
          *((_DWORD *)this + 62) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 5u:
          *((_DWORD *)this + 62) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 6u:
          *((_DWORD *)this + 62) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 7u:
          *((_DWORD *)this + 62) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 8u:
          *((_DWORD *)this + 62) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 9u:
          *((_DWORD *)this + 62) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0xAu:
          *((_DWORD *)this + 62) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0xBu:
          *((_DWORD *)this + 62) |= 0x400u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0xCu:
          *((_DWORD *)this + 62) |= 0x800u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0xDu:
          *((_DWORD *)this + 62) |= 0x1000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0xEu:
          *((_DWORD *)this + 62) |= 0x2000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0xFu:
          *((_DWORD *)this + 62) |= 0x4000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x10u:
          *((_DWORD *)this + 62) |= 0x8000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x11u:
          *((_DWORD *)this + 62) |= 0x10000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x12u:
          *((_DWORD *)this + 62) |= 0x20000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x13u:
          *((_DWORD *)this + 62) |= 0x40000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x14u:
          *((_DWORD *)this + 62) |= 0x80000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x15u:
          *((_DWORD *)this + 62) |= 0x100000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x16u:
          *((_DWORD *)this + 62) |= 0x200000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 22) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x17u:
          *((_DWORD *)this + 62) |= 0x400000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 23) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x18u:
          *((_DWORD *)this + 62) |= 0x800000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 24) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x19u:
          *((_DWORD *)this + 62) |= 0x1000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 25) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x1Au:
          *((_DWORD *)this + 62) |= 0x4000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 27) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x1Bu:
          *((_DWORD *)this + 62) |= 0x8000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 28) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x1Cu:
          *((_DWORD *)this + 62) |= 0x10000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 29) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x1Du:
          *((_DWORD *)this + 62) |= 0x20000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_113;
          }
          *((void *)this + 30) = *(void *)(*(void *)a2 + v2);
          goto LABEL_115;
        case 0x1Eu:
          *((_DWORD *)this + 62) |= 0x2000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
          {
LABEL_113:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((void *)this + 26) = *(void *)(*(void *)a2 + v2);
LABEL_115:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 248);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 248);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 7u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 8u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 9u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0xAu);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 0xBu);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0xCu);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0xDu);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0xEu);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0xFu);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0x10u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 0x11u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0x12u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 0x13u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 0x14u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 0x15u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 176), 0x16u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(double *)(v3 + 184), 0x17u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(double *)(v3 + 192), 0x18u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(double *)(v3 + 200), 0x19u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 216), 0x1Au);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(double *)(v3 + 224), 0x1Bu);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_30;
    }
LABEL_60:
    this = PB::Writer::write(a2, *(double *)(v3 + 240), 0x1Du);
    if ((*(_DWORD *)(v3 + 248) & 0x2000000) == 0) {
      return this;
    }
    goto LABEL_61;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(double *)(v3 + 232), 0x1Cu);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000000) != 0) {
    goto LABEL_60;
  }
LABEL_30:
  if ((v4 & 0x2000000) == 0) {
    return this;
  }
LABEL_61:
  double v5 = *(double *)(v3 + 208);

  return PB::Writer::write(a2, v5, 0x1Eu);
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::hash_value(CMMsl::SteadinessModelHarmonicFeatures *this)
{
  int v1 = *((_DWORD *)this + 62);
  if ((v1 & 1) == 0)
  {
    double v35 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_117:
    double v34 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_118:
    double v33 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_119:
    uint64_t v4 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_13;
    }
LABEL_120:
    uint64_t v5 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_17;
    }
LABEL_121:
    uint64_t v6 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_21;
    }
LABEL_122:
    uint64_t v7 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_25;
    }
LABEL_123:
    uint64_t v8 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_29;
    }
LABEL_124:
    uint64_t v9 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_33;
    }
LABEL_125:
    uint64_t v10 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_37;
    }
LABEL_126:
    uint64_t v11 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_41;
    }
LABEL_127:
    uint64_t v12 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_45;
    }
LABEL_128:
    uint64_t v13 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_49;
    }
LABEL_129:
    uint64_t v14 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_53;
    }
LABEL_130:
    uint64_t v15 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_57;
    }
LABEL_131:
    uint64_t v16 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_61;
    }
LABEL_132:
    uint64_t v17 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_65;
    }
LABEL_133:
    uint64_t v18 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_69;
    }
LABEL_134:
    uint64_t v19 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_73;
    }
LABEL_135:
    uint64_t v20 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_77;
    }
LABEL_136:
    uint64_t v21 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_81;
    }
LABEL_137:
    uint64_t v22 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_85;
    }
LABEL_138:
    uint64_t v23 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_89;
    }
LABEL_139:
    uint64_t v24 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_93;
    }
LABEL_140:
    uint64_t v25 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_97;
    }
LABEL_141:
    uint64_t v26 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_101;
    }
LABEL_142:
    uint64_t v27 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_105;
    }
LABEL_143:
    double v28 = 0.0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_108;
    }
    goto LABEL_144;
  }
  double v31 = *((double *)this + 1);
  if (v31 == 0.0) {
    double v31 = 0.0;
  }
  double v35 = v31;
  if ((v1 & 2) == 0) {
    goto LABEL_117;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  double v34 = v2;
  if ((v1 & 4) == 0) {
    goto LABEL_118;
  }
LABEL_6:
  double v3 = *((double *)this + 3);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v33 = v3;
  if ((v1 & 8) == 0) {
    goto LABEL_119;
  }
LABEL_9:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *((void *)this + 4);
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_120;
  }
LABEL_13:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 5);
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_121;
  }
LABEL_17:
  if (*((double *)this + 6) == 0.0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *((void *)this + 6);
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_122;
  }
LABEL_21:
  if (*((double *)this + 7) == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *((void *)this + 7);
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_123;
  }
LABEL_25:
  if (*((double *)this + 8) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 8);
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_124;
  }
LABEL_29:
  if (*((double *)this + 9) == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)this + 9);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_125;
  }
LABEL_33:
  if (*((double *)this + 10) == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *((void *)this + 10);
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_126;
  }
LABEL_37:
  if (*((double *)this + 11) == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *((void *)this + 11);
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_127;
  }
LABEL_41:
  if (*((double *)this + 12) == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *((void *)this + 12);
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_128;
  }
LABEL_45:
  if (*((double *)this + 13) == 0.0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *((void *)this + 13);
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_129;
  }
LABEL_49:
  if (*((double *)this + 14) == 0.0) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *((void *)this + 14);
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_130;
  }
LABEL_53:
  if (*((double *)this + 15) == 0.0) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *((void *)this + 15);
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_131;
  }
LABEL_57:
  if (*((double *)this + 16) == 0.0) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *((void *)this + 16);
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_132;
  }
LABEL_61:
  if (*((double *)this + 17) == 0.0) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *((void *)this + 17);
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_133;
  }
LABEL_65:
  if (*((double *)this + 18) == 0.0) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *((void *)this + 18);
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_134;
  }
LABEL_69:
  if (*((double *)this + 19) == 0.0) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *((void *)this + 19);
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_135;
  }
LABEL_73:
  if (*((double *)this + 20) == 0.0) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *((void *)this + 20);
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_136;
  }
LABEL_77:
  if (*((double *)this + 21) == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *((void *)this + 21);
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_137;
  }
LABEL_81:
  if (*((double *)this + 22) == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *((void *)this + 22);
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_138;
  }
LABEL_85:
  if (*((double *)this + 23) == 0.0) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *((void *)this + 23);
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_139;
  }
LABEL_89:
  if (*((double *)this + 24) == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *((void *)this + 24);
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_140;
  }
LABEL_93:
  if (*((double *)this + 25) == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *((void *)this + 25);
  }
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_141;
  }
LABEL_97:
  if (*((double *)this + 27) == 0.0) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = *((void *)this + 27);
  }
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_142;
  }
LABEL_101:
  if (*((double *)this + 28) == 0.0) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = *((void *)this + 28);
  }
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_143;
  }
LABEL_105:
  double v28 = *((double *)this + 29);
  if (v28 == 0.0) {
    double v28 = 0.0;
  }
  if ((v1 & 0x20000000) != 0)
  {
LABEL_108:
    double v29 = *((double *)this + 30);
    if (v29 == 0.0) {
      double v29 = 0.0;
    }
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_111;
    }
LABEL_145:
    double v30 = 0.0;
    return *(void *)&v34 ^ *(void *)&v35 ^ *(void *)&v33 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(void *)&v28 ^ *(void *)&v29 ^ *(void *)&v30;
  }
LABEL_144:
  double v29 = 0.0;
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_145;
  }
LABEL_111:
  double v30 = *((double *)this + 26);
  if (v30 == 0.0) {
    double v30 = 0.0;
  }
  return *(void *)&v34 ^ *(void *)&v35 ^ *(void *)&v33 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(void *)&v28 ^ *(void *)&v29 ^ *(void *)&v30;
}

void CMMsl::SteadinessModelResult::~SteadinessModelResult(CMMsl::SteadinessModelResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::SteadinessModelResult::SteadinessModelResult(uint64_t this, const CMMsl::SteadinessModelResult *a2)
{
  *(void *)this = off_1003A9420;
  *(_DWORD *)(this + 52) = 0;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    char v3 = 4;
    *(unsigned char *)(this + 52) = 4;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 52);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 52) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 52) = v3;
    *(void *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 52);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 52) = v3;
    *(void *)(this + 8) = v6;
    char v2 = *((unsigned char *)a2 + 52);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *(unsigned char *)(this + 52) = v3;
  *(_DWORD *)(this + 48) = v7;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  int v8 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(unsigned char *)(this + 52) = v3;
  *(_DWORD *)(this + 36) = v8;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v9 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(unsigned char *)(this + 52) = v3;
  *(_DWORD *)(this + 32) = v9;
  char v2 = *((unsigned char *)a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_18:
    int v11 = *((_DWORD *)a2 + 10);
    *(unsigned char *)(this + 52) = v3 | 0x20;
    *(_DWORD *)(this + 40) = v11;
    return this;
  }
LABEL_17:
  int v10 = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *(unsigned char *)(this + 52) = v3;
  *(_DWORD *)(this + 44) = v10;
  if ((*((unsigned char *)a2 + 52) & 0x20) != 0) {
    goto LABEL_18;
  }
  return this;
}

uint64_t CMMsl::SteadinessModelResult::operator=(uint64_t a1, const CMMsl::SteadinessModelResult *a2)
{
  if ((const CMMsl::SteadinessModelResult *)a1 != a2)
  {
    CMMsl::SteadinessModelResult::SteadinessModelResult((uint64_t)v7, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v11;
    uint64_t v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v10;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelResult *a2, CMMsl::SteadinessModelResult *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v7 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v7;
  int v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  int v9 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v9;
  int v10 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v10;
  int v11 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  return result;
}

double CMMsl::SteadinessModelResult::SteadinessModelResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9420;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9420;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::SteadinessModelResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v10 = off_1003A9420;
    uint64_t v3 = *(void *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 48);
    *(_DWORD *)(a2 + 52) = 0;
    uint64_t v12 = *(void *)(a1 + 24);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v11 = v5;
    uint64_t v14 = *(void *)(a1 + 48);
    long long v7 = *(_OWORD *)(a1 + 32);
    long long v8 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = v4;
    *(_OWORD *)(a1 + 32) = v8;
    long long v13 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelResult::formatText(CMMsl::SteadinessModelResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 52);
  if (v5)
  {
    PB::TextFormatter::format(a2, "likelihoodNotOK", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "likelihoodOK", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "numDaysWithDataLast30Days", *((_DWORD *)this + 8));
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "numDaysWithDataLast7Days", *((_DWORD *)this + 9));
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "numValidBouts28Days", *((_DWORD *)this + 10));
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(a2, "rawSteadiness", *((double *)this + 3));
    if ((*((unsigned char *)this + 52) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "numValidBouts7Days", *((_DWORD *)this + 11));
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "rejectionStatus", *((_DWORD *)this + 12));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelResult::readFrom(CMMsl::SteadinessModelResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 52) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_32;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 2u:
              *((unsigned char *)this + 52) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_32;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 3u:
              *((unsigned char *)this + 52) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_104:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_32:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_130;
            case 4u:
              *((unsigned char *)this + 52) |= 0x80u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_109;
                  }
                  unint64_t v53 = v21++;
                  char v54 = *(unsigned char *)(v22 + v53);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_108;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *((_DWORD *)this + 12) = v25;
              goto LABEL_130;
            case 5u:
              *((unsigned char *)this + 52) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_114;
                  }
                  unint64_t v57 = v27++;
                  char v58 = *(unsigned char *)(v28 + v57);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_113:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_113;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_114:
              *((_DWORD *)this + 9) = v31;
              goto LABEL_130;
            case 6u:
              *((unsigned char *)this + 52) |= 8u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_119;
                  }
                  unint64_t v61 = v33++;
                  char v62 = *(unsigned char *)(v34 + v61);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_118:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_118;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_119:
              *((_DWORD *)this + 8) = v37;
              goto LABEL_130;
            case 7u:
              *((unsigned char *)this + 52) |= 0x40u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_124;
                  }
                  unint64_t v65 = v39++;
                  char v66 = *(unsigned char *)(v40 + v65);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_123:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_123;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_124;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_124:
              *((_DWORD *)this + 11) = v43;
              goto LABEL_130;
            case 8u:
              *((unsigned char *)this + 52) |= 0x20u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_129;
                  }
                  unint64_t v69 = v45++;
                  char v70 = *(unsigned char *)(v46 + v69);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_128;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_129;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *((_DWORD *)this + 10) = v49;
LABEL_130:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_130;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 52);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 4u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 5u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 7u);
    if ((*(unsigned char *)(v3 + 52) & 0x20) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 6u);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_17:
  int v5 = *(_DWORD *)(v3 + 40);

  return PB::Writer::writeVarInt(a2, v5, 8u);
}

uint64_t CMMsl::SteadinessModelResult::hash_value(CMMsl::SteadinessModelResult *this)
{
  if ((*((unsigned char *)this + 52) & 4) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 52) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_17:
    double v2 = 0.0;
    if (*((unsigned char *)this + 52)) {
      goto LABEL_6;
    }
LABEL_18:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 52) & 0x80) != 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 52) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 52) & 1) == 0) {
    goto LABEL_18;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 52) & 0x80) != 0)
  {
LABEL_9:
    uint64_t v4 = *((unsigned int *)this + 12);
    if ((*((unsigned char *)this + 52) & 0x10) != 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 52) & 0x10) != 0)
  {
LABEL_10:
    uint64_t v5 = *((int *)this + 9);
    if ((*((unsigned char *)this + 52) & 8) != 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 52) & 8) != 0)
  {
LABEL_11:
    uint64_t v6 = *((int *)this + 8);
    if ((*((unsigned char *)this + 52) & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_22:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 52) & 0x20) != 0) {
      goto LABEL_13;
    }
LABEL_23:
    uint64_t v8 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_21:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 52) & 0x40) == 0) {
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v7 = *((int *)this + 11);
  if ((*((unsigned char *)this + 52) & 0x20) == 0) {
    goto LABEL_23;
  }
LABEL_13:
  uint64_t v8 = *((int *)this + 10);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::SteadinessModelTemporalDispersionFeatures::~SteadinessModelTemporalDispersionFeatures(CMMsl::SteadinessModelTemporalDispersionFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures(CMMsl::SteadinessModelTemporalDispersionFeatures *this, const CMMsl::SteadinessModelTemporalDispersionFeatures *a2)
{
  *(void *)this = off_1003A9458;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    char v3 = 8;
    *((unsigned char *)this + 40) = 8;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 40) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((unsigned char *)this + 40) = v3;
  *((double *)this + 2) = result;
  if (*((unsigned char *)a2 + 40)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::operator=(uint64_t a1, const CMMsl::SteadinessModelTemporalDispersionFeatures *a2)
{
  if ((const CMMsl::SteadinessModelTemporalDispersionFeatures *)a1 != a2)
  {
    CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures((CMMsl::SteadinessModelTemporalDispersionFeatures *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelTemporalDispersionFeatures *a2, CMMsl::SteadinessModelTemporalDispersionFeatures *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9458;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9458;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A9458;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v11 = *(_DWORD *)(a1 + 40);
    long long v10 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    long long v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::formatText(CMMsl::SteadinessModelTemporalDispersionFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "centroidSlopeHeightNormDoubleSupportPercentageCadence", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "centroidSlopeHeightNormWalkingSpeedStepLength", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "l2DispersionHeightNormDoubleSupportPercentageCadence", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "l2DispersionHeightNormWalkingSpeedStepLength", *((double *)this + 4));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::readFrom(CMMsl::SteadinessModelTemporalDispersionFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 40) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((unsigned char *)this + 40) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 40) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
      if ((*(unsigned char *)(v3 + 40) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::hash_value(CMMsl::SteadinessModelTemporalDispersionFeatures *this)
{
  if ((*((unsigned char *)this + 40) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 2) != 0)
  {
LABEL_6:
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if (*((unsigned char *)this + 40)) {
      goto LABEL_9;
    }
LABEL_17:
    double v4 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
  }
LABEL_16:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
}

void CMMsl::SteadinessModelTemporalEntropyFeatures::~SteadinessModelTemporalEntropyFeatures(CMMsl::SteadinessModelTemporalEntropyFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures(CMMsl::SteadinessModelTemporalEntropyFeatures *this, const CMMsl::SteadinessModelTemporalEntropyFeatures *a2)
{
  *(void *)this = off_1003A9490;
  *((_DWORD *)this + 54) = 0;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x80000) != 0)
  {
    double result = *((double *)a2 + 20);
    int v3 = 0x80000;
    *((_DWORD *)this + 54) = 0x80000;
    *((double *)this + 20) = result;
    int v2 = *((_DWORD *)a2 + 54);
    if ((v2 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 19);
    v3 |= 0x40000u;
    *((_DWORD *)this + 54) = v3;
    *((double *)this + 19) = result;
    int v2 = *((_DWORD *)a2 + 54);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 54) = v3;
    *((double *)this + 2) = result;
    int v2 = *((_DWORD *)a2 + 54);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 1) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  double result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x400000) == 0)
  {
LABEL_10:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  double result = *((double *)a2 + 23);
  v3 |= 0x400000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 23) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x200000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  double result = *((double *)a2 + 22);
  v3 |= 0x200000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 22) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x800000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  double result = *((double *)a2 + 24);
  v3 |= 0x800000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 24) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = *((double *)a2 + 26);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 26) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  double result = *((double *)a2 + 25);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 25) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 3) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }
LABEL_47:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 9) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x400) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }
LABEL_48:
  double result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 11) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x4000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  double result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  double result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }
LABEL_51:
  double result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 18) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x10000) == 0)
  {
LABEL_28:
    if ((v2 & 0x800) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
LABEL_52:
  double result = *((double *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 17) = result;
  int v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x800) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0) {
      return result;
    }
LABEL_54:
    double result = *((double *)a2 + 13);
    *((_DWORD *)this + 54) = v3 | 0x1000;
    *((double *)this + 13) = result;
    return result;
  }
LABEL_53:
  double result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 12) = result;
  if ((*((_DWORD *)a2 + 54) & 0x1000) != 0) {
    goto LABEL_54;
  }
  return result;
}

CMMsl *CMMsl::SteadinessModelTemporalEntropyFeatures::operator=(CMMsl *a1, const CMMsl::SteadinessModelTemporalEntropyFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures((CMMsl::SteadinessModelTemporalEntropyFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelTemporalEntropyFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelTemporalEntropyFeatures *a2, CMMsl::SteadinessModelTemporalEntropyFeatures *a3)
{
  int v3 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v3;
  uint64_t v4 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v4;
  uint64_t v5 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v8;
  uint64_t v9 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v9;
  uint64_t v10 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v10;
  uint64_t v11 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v11;
  uint64_t v12 = *((void *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((void *)a2 + 26) = v12;
  uint64_t v13 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v13;
  uint64_t v14 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  uint64_t v16 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v16;
  uint64_t v17 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v17;
  uint64_t v18 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v18;
  uint64_t v19 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v19;
  uint64_t v20 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v20;
  uint64_t v21 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v21;
  uint64_t v22 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v22;
  uint64_t v23 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v23;
  uint64_t v24 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v24;
  uint64_t v25 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v25;
  uint64_t v26 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v26;
  uint64_t v27 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v27;
  uint64_t v28 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v28;
  double result = *((double *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((double *)a2 + 13) = result;
  return result;
}

double CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9490;
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a2 + 216) = 0;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  double result = *(double *)(a2 + 104);
  *(double *)(a1 + 104) = result;
  return result;
}

CMMsl *CMMsl::SteadinessModelTemporalEntropyFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelTemporalEntropyFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::formatText(CMMsl::SteadinessModelTemporalEntropyFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 54);
  if (v5)
  {
    PB::TextFormatter::format(a2, "allBoutsCycleTimeEntropy5thTo95th", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 54);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "allBoutsCycleTimeEntropyMean", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd1Mean", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd1P5", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd1P95", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd2Mean", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd2P5", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd2P95", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thLog", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimeEntropyP5Log", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthEntropyMeanLog", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P5Log", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd2P5Log", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "allBoutsStepLengthEntropy5thTo95th", *((double *)this + 19));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "allBoutsStepLengthEntropyMean", *((double *)this + 20));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd1Mean", *((double *)this + 21));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd1P5", *((double *)this + 22));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd1P95", *((double *)this + 23));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd2Mean", *((double *)this + 24));
  int v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd2P5", *((double *)this + 25));
  if ((*((_DWORD *)this + 54) & 0x2000000) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd2P95", *((double *)this + 26));
LABEL_28:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::readFrom(CMMsl::SteadinessModelTemporalEntropyFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 54) |= 0x80000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 2u:
          *((_DWORD *)this + 54) |= 0x40000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 3u:
          *((_DWORD *)this + 54) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 4u:
          *((_DWORD *)this + 54) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 5u:
          *((_DWORD *)this + 54) |= 0x100000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 6u:
          *((_DWORD *)this + 54) |= 0x400000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 23) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 7u:
          *((_DWORD *)this + 54) |= 0x200000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 22) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 8u:
          *((_DWORD *)this + 54) |= 0x800000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 24) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 9u:
          *((_DWORD *)this + 54) |= 0x2000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 26) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0xAu:
          *((_DWORD *)this + 54) |= 0x1000000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 25) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0xBu:
          *((_DWORD *)this + 54) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0xCu:
          *((_DWORD *)this + 54) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0xDu:
          *((_DWORD *)this + 54) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0xEu:
          *((_DWORD *)this + 54) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0xFu:
          *((_DWORD *)this + 54) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0x10u:
          *((_DWORD *)this + 54) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0x11u:
          *((_DWORD *)this + 54) |= 0x2000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0x12u:
          *((_DWORD *)this + 54) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0x13u:
          *((_DWORD *)this + 54) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0x14u:
          *((_DWORD *)this + 54) |= 0x400u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0x15u:
          *((_DWORD *)this + 54) |= 0x4000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0x16u:
          *((_DWORD *)this + 54) |= 0x8000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0x17u:
          *((_DWORD *)this + 54) |= 0x20000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0x18u:
          *((_DWORD *)this + 54) |= 0x10000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0x19u:
          *((_DWORD *)this + 54) |= 0x800u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_101;
          }
          *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
          goto LABEL_103;
        case 0x1Au:
          *((_DWORD *)this + 54) |= 0x1000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
          {
LABEL_101:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
LABEL_103:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 216);
  if ((v4 & 0x80000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 160), 1u);
    int v4 = *(_DWORD *)(v3 + 216);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 2u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 5u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 184), 6u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 176), 7u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 192), 8u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 208), 9u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 200), 0xAu);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xBu);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xCu);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xDu);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xEu);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 0xFu);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0x10u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x11u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0x12u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x13u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 0x14u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0x15u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0x16u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0x17u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x800) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    this = PB::Writer::write(a2, *(double *)(v3 + 96), 0x19u);
    if ((*(_DWORD *)(v3 + 216) & 0x1000) == 0) {
      return this;
    }
    goto LABEL_53;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 0x18u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 0x1000) == 0) {
    return this;
  }
LABEL_53:
  double v5 = *(double *)(v3 + 104);

  return PB::Writer::write(a2, v5, 0x1Au);
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::hash_value(CMMsl::SteadinessModelTemporalEntropyFeatures *this)
{
  int v1 = *((_DWORD *)this + 54);
  if ((v1 & 0x80000) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_3;
    }
LABEL_81:
    double v3 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
LABEL_82:
    double v4 = 0.0;
    if (v1) {
      goto LABEL_9;
    }
LABEL_83:
    double v5 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_12;
    }
LABEL_84:
    double v6 = 0.0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_15;
    }
LABEL_85:
    double v7 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_18;
    }
LABEL_86:
    double v8 = 0.0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_21;
    }
LABEL_87:
    double v9 = 0.0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_24;
    }
LABEL_88:
    double v10 = 0.0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_27;
    }
LABEL_89:
    double v11 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_30;
    }
LABEL_90:
    double v12 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_33;
    }
LABEL_91:
    double v13 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_36;
    }
LABEL_92:
    double v14 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_39;
    }
LABEL_93:
    double v15 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_42;
    }
LABEL_94:
    double v16 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_45;
    }
LABEL_95:
    double v17 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_48;
    }
LABEL_96:
    double v18 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_51;
    }
LABEL_97:
    double v19 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_54;
    }
LABEL_98:
    double v20 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_57;
    }
LABEL_99:
    double v21 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_60;
    }
LABEL_100:
    double v22 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_63;
    }
LABEL_101:
    double v23 = 0.0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_66;
    }
LABEL_102:
    double v24 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_69;
    }
LABEL_103:
    double v25 = 0.0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_72;
    }
    goto LABEL_104;
  }
  double v2 = *((double *)this + 20);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_81;
  }
LABEL_3:
  double v3 = *((double *)this + 19);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_82;
  }
LABEL_6:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_83;
  }
LABEL_9:
  double v5 = *((double *)this + 1);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_84;
  }
LABEL_12:
  double v6 = *((double *)this + 21);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_85;
  }
LABEL_15:
  double v7 = *((double *)this + 23);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_86;
  }
LABEL_18:
  double v8 = *((double *)this + 22);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_87;
  }
LABEL_21:
  double v9 = *((double *)this + 24);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_88;
  }
LABEL_24:
  double v10 = *((double *)this + 26);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_89;
  }
LABEL_27:
  double v11 = *((double *)this + 25);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_90;
  }
LABEL_30:
  double v12 = *((double *)this + 3);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_91;
  }
LABEL_33:
  double v13 = *((double *)this + 5);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_92;
  }
LABEL_36:
  double v14 = *((double *)this + 4);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_93;
  }
LABEL_39:
  double v15 = *((double *)this + 6);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_94;
  }
LABEL_42:
  double v16 = *((double *)this + 8);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_95;
  }
LABEL_45:
  double v17 = *((double *)this + 7);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_96;
  }
LABEL_48:
  double v18 = *((double *)this + 14);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_97;
  }
LABEL_51:
  double v19 = *((double *)this + 10);
  if (v19 == 0.0) {
    double v19 = 0.0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_98;
  }
LABEL_54:
  double v20 = *((double *)this + 9);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_99;
  }
LABEL_57:
  double v21 = *((double *)this + 11);
  if (v21 == 0.0) {
    double v21 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_100;
  }
LABEL_60:
  double v22 = *((double *)this + 15);
  if (v22 == 0.0) {
    double v22 = 0.0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_101;
  }
LABEL_63:
  double v23 = *((double *)this + 16);
  if (v23 == 0.0) {
    double v23 = 0.0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_102;
  }
LABEL_66:
  double v24 = *((double *)this + 18);
  if (v24 == 0.0) {
    double v24 = 0.0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_103;
  }
LABEL_69:
  double v25 = *((double *)this + 17);
  if (v25 == 0.0) {
    double v25 = 0.0;
  }
  if ((v1 & 0x800) != 0)
  {
LABEL_72:
    double v26 = *((double *)this + 12);
    if (v26 == 0.0) {
      double v26 = 0.0;
    }
    if ((v1 & 0x1000) != 0) {
      goto LABEL_75;
    }
LABEL_105:
    double v27 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23 ^ *(void *)&v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ *(void *)&v27;
  }
LABEL_104:
  double v26 = 0.0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_105;
  }
LABEL_75:
  double v27 = *((double *)this + 13);
  if (v27 == 0.0) {
    double v27 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23 ^ *(void *)&v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ *(void *)&v27;
}

void CMMsl::StepCadenceToStrideLengthBin::~StepCadenceToStrideLengthBin(CMMsl::StepCadenceToStrideLengthBin *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin(CMMsl::StepCadenceToStrideLengthBin *this, const CMMsl::StepCadenceToStrideLengthBin *a2)
{
  *(void *)this = off_1003A94C8;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    int v4 = *((_DWORD *)a2 + 8);
    char v3 = 8;
    *((unsigned char *)this + 40) = 8;
    *((_DWORD *)this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 40))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      double result = *((double *)a2 + 3);
      *((unsigned char *)this + 40) = v3 | 4;
      *((double *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v6 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 9) = v6;
  if ((*((unsigned char *)a2 + 40) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::operator=(uint64_t a1, const CMMsl::StepCadenceToStrideLengthBin *a2)
{
  if ((const CMMsl::StepCadenceToStrideLengthBin *)a1 != a2)
  {
    CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin((CMMsl::StepCadenceToStrideLengthBin *)&v8, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v3;
    *(void *)&long long v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v11;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v5;
    int v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v6;
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepCadenceToStrideLengthBin *a2, CMMsl::StepCadenceToStrideLengthBin *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  int v4 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  int v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A94C8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A94C8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = off_1003A94C8;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    int v13 = *(_DWORD *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v10 = v5;
    *(void *)&long long v5 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    uint64_t v11 = v7;
    uint64_t v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::formatText(CMMsl::StepCadenceToStrideLengthBin *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "begin", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bin", *((_DWORD *)this + 8));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "end", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 9));
  if ((*((unsigned char *)this + 40) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "strideLength", *((double *)this + 3));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::readFrom(CMMsl::StepCadenceToStrideLengthBin *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 40) |= 8u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_67;
                  }
                  unint64_t v35 = v20++;
                  char v36 = *(unsigned char *)(v21 + v35);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_66;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_66:
                unint64_t v2 = v35 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_67;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_67:
              *((_DWORD *)this + 8) = v24;
              goto LABEL_73;
            case 2u:
              *((unsigned char *)this + 40) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_46;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_62;
            case 3u:
              *((unsigned char *)this + 40) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_46;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_62;
            case 4u:
              *((unsigned char *)this + 40) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_72;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_71;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *((_DWORD *)this + 9) = v31;
LABEL_73:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *((unsigned char *)this + 40) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_62:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_46:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_73;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_73;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 4u);
    if ((*(unsigned char *)(v3 + 40) & 4) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(a2, v5, 5u);
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::hash_value(CMMsl::StepCadenceToStrideLengthBin *this)
{
  if ((*((unsigned char *)this + 40) & 8) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 40)) {
      goto LABEL_3;
    }
LABEL_14:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_15:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
  uint64_t v1 = *((unsigned int *)this + 8);
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
LABEL_9:
    uint64_t v4 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_10;
    }
LABEL_17:
    double v5 = 0.0;
    return *(void *)&v2 ^ v1 ^ *(void *)&v3 ^ v4 ^ *(void *)&v5;
  }
LABEL_16:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 40) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_10:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3 ^ v4 ^ *(void *)&v5;
}

void CMMsl::StepCountEntry::~StepCountEntry(CMMsl::StepCountEntry *this)
{
  *(void *)this = off_1003A9500;
  uint64_t v4 = *((void *)this + 9);
  double v2 = (void *)((char *)this + 72);
  uint64_t v3 = v4;
  *double v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::StepCountEntry::~StepCountEntry(this);

  operator delete();
}

uint64_t CMMsl::StepCountEntry::StepCountEntry(uint64_t this, const CMMsl::StepCountEntry *a2)
{
  *(void *)this = off_1003A9500;
  *(void *)(this + 8) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 72) = 0;
  *(_DWORD *)(this + 152) = 0;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 11);
    int v3 = 128;
    *(_DWORD *)(this + 152) = 128;
    *(void *)(this + 88) = v4;
    int v2 = *((_DWORD *)a2 + 38);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 10);
    v3 |= 0x40u;
    *(_DWORD *)(this + 152) = v3;
    *(void *)(this + 80) = v5;
    int v2 = *((_DWORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    uint64_t v7 = *((void *)a2 + 6);
    v3 |= 0x10u;
    *(_DWORD *)(this + 152) = v3;
    *(void *)(this + 48) = v7;
    int v2 = *((_DWORD *)a2 + 38);
    if ((v2 & 0x100) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  int v8 = *((_DWORD *)a2 + 24);
  v3 |= 0x100u;
  *(_DWORD *)(this + 152) = v3;
  *(_DWORD *)(this + 96) = v8;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v9 = *((void *)a2 + 5);
  v3 |= 8u;
  *(_DWORD *)(this + 152) = v3;
  *(void *)(this + 40) = v9;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v10 = *((void *)a2 + 8);
  v3 |= 0x20u;
  *(_DWORD *)(this + 152) = v3;
  *(void *)(this + 64) = v10;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v11 = *((_DWORD *)a2 + 30);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 152) = v3;
  *(_DWORD *)(this + 120) = v11;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v12 = *((_DWORD *)a2 + 31);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 152) = v3;
  *(_DWORD *)(this + 124) = v12;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 4) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v13 = *((void *)a2 + 4);
  v3 |= 4u;
  *(_DWORD *)(this + 152) = v3;
  *(void *)(this + 32) = v13;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v14 = *((void *)a2 + 3);
  v3 |= 2u;
  *(_DWORD *)(this + 152) = v3;
  *(void *)(this + 24) = v14;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_27:
  uint64_t v15 = *((void *)a2 + 2);
  v3 |= 1u;
  *(_DWORD *)(this + 152) = v3;
  *(void *)(this + 16) = v15;
  if ((*((_DWORD *)a2 + 38) & 0x80000) != 0)
  {
LABEL_16:
    int v6 = *((_DWORD *)a2 + 35);
    *(_DWORD *)(this + 152) = v3 | 0x80000;
    *(_DWORD *)(this + 140) = v6;
  }
LABEL_17:
  if (*((void *)a2 + 9)) {
    operator new();
  }
  int v16 = *((_DWORD *)a2 + 38);
  if ((v16 & 0x200000) != 0)
  {
    char v17 = *((unsigned char *)a2 + 148);
    *(_DWORD *)(this + 152) |= 0x200000u;
    *(unsigned char *)(this + 148) = v17;
    int v16 = *((_DWORD *)a2 + 38);
  }
  if ((v16 & 0x400000) != 0)
  {
    char v18 = *((unsigned char *)a2 + 149);
    *(_DWORD *)(this + 152) |= 0x400000u;
    *(unsigned char *)(this + 149) = v18;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  int v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x40000) != 0)
  {
    int v22 = *((_DWORD *)a2 + 34);
    *(_DWORD *)(this + 152) |= 0x40000u;
    *(_DWORD *)(this + 136) = v22;
    int v19 = *((_DWORD *)a2 + 38);
    if ((v19 & 0x100000) == 0)
    {
LABEL_37:
      if ((v19 & 0x20000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_51;
    }
  }
  else if ((v19 & 0x100000) == 0)
  {
    goto LABEL_37;
  }
  int v23 = *((_DWORD *)a2 + 36);
  *(_DWORD *)(this + 152) |= 0x100000u;
  *(_DWORD *)(this + 144) = v23;
  int v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x20000) == 0)
  {
LABEL_38:
    if ((v19 & 0x400) == 0) {
      goto LABEL_39;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v24 = *((_DWORD *)a2 + 33);
  *(_DWORD *)(this + 152) |= 0x20000u;
  *(_DWORD *)(this + 132) = v24;
  int v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x400) == 0)
  {
LABEL_39:
    if ((v19 & 0x800) == 0) {
      goto LABEL_40;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v25 = *((_DWORD *)a2 + 26);
  *(_DWORD *)(this + 152) |= 0x400u;
  *(_DWORD *)(this + 104) = v25;
  int v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x800) == 0)
  {
LABEL_40:
    if ((v19 & 0x2000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v26 = *((_DWORD *)a2 + 27);
  *(_DWORD *)(this + 152) |= 0x800u;
  *(_DWORD *)(this + 108) = v26;
  int v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x2000) == 0)
  {
LABEL_41:
    if ((v19 & 0x200) == 0) {
      goto LABEL_42;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v27 = *((_DWORD *)a2 + 29);
  *(_DWORD *)(this + 152) |= 0x2000u;
  *(_DWORD *)(this + 116) = v27;
  int v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x200) == 0)
  {
LABEL_42:
    if ((v19 & 0x1000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_55:
  int v28 = *((_DWORD *)a2 + 25);
  *(_DWORD *)(this + 152) |= 0x200u;
  *(_DWORD *)(this + 100) = v28;
  if ((*((_DWORD *)a2 + 38) & 0x1000) != 0)
  {
LABEL_43:
    int v20 = *((_DWORD *)a2 + 28);
    *(_DWORD *)(this + 152) |= 0x1000u;
    *(_DWORD *)(this + 112) = v20;
  }
LABEL_44:
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 154))
  {
    int v21 = *((_DWORD *)a2 + 32);
    *(_DWORD *)(this + 152) |= 0x10000u;
    *(_DWORD *)(this + 128) = v21;
  }
  return this;
}

CMMsl *CMMsl::StepCountEntry::operator=(CMMsl *a1, const CMMsl::StepCountEntry *a2)
{
  if (a1 != a2)
  {
    CMMsl::StepCountEntry::StepCountEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntry *)v5, v3);
    CMMsl::StepCountEntry::~StepCountEntry((CMMsl::StepCountEntry *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepCountEntry *a2, CMMsl::StepCountEntry *a3)
{
  int v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v4;
  uint64_t v5 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  int v7 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  int v10 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v10;
  int v11 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  int v15 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v15;
  uint64_t v16 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 148);
  *((unsigned char *)this + 148) = *((unsigned char *)a2 + 148);
  *((unsigned char *)a2 + 148) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 149);
  *((unsigned char *)this + 149) = *((unsigned char *)a2 + 149);
  *((unsigned char *)a2 + 149) = v16;
  uint64_t v17 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v17;
  LODWORD(v17) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v17;
  LODWORD(v17) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v17;
  LODWORD(v17) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v17;
  LODWORD(v17) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v17;
  LODWORD(v17) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v17;
  LODWORD(v17) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v17;
  LODWORD(v17) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v17;
  LODWORD(v17) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v17;
  uint64_t v18 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v18;
  LODWORD(v18) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v18;
  return result;
}

uint64_t CMMsl::StepCountEntry::StepCountEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9500;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 72);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v6 = *v4;
  *uint64_t v4 = v5;
  if (v6) {
    sub_100012E84((uint64_t)v4, v6);
  }
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(unsigned char *)(a1 + 149) = *(unsigned char *)(a2 + 149);
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  return a1;
}

CMMsl *CMMsl::StepCountEntry::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepCountEntry::StepCountEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntry *)v5, v3);
    CMMsl::StepCountEntry::~StepCountEntry((CMMsl::StepCountEntry *)v5);
  }
  return a1;
}

uint64_t CMMsl::StepCountEntry::formatText(CMMsl::StepCountEntry *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "accelerometerPace");
  }
  int v6 = *((_DWORD *)this + 38);
  if (v6)
  {
    PB::TextFormatter::format(a2, "activeTime", *((double *)this + 2));
    int v6 = *((_DWORD *)this + 38);
    if ((v6 & 0x100) == 0)
    {
LABEL_5:
      if ((v6 & 2) == 0) {
        goto LABEL_6;
      }
      goto LABEL_38;
    }
  }
  else if ((v6 & 0x100) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "count", *((_DWORD *)this + 24));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 2) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "currentCadence", *((double *)this + 3));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "currentPace", *((double *)this + 4));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "distance", *((double *)this + 5));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x200) == 0)
  {
LABEL_9:
    if ((v6 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "distanceSource", *((_DWORD *)this + 25));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x400) == 0)
  {
LABEL_10:
    if ((v6 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "elevationAscended", *((_DWORD *)this + 26));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x800) == 0)
  {
LABEL_11:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "elevationDescended", *((_DWORD *)this + 27));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x1000) == 0)
  {
LABEL_12:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "falseStepDetectorState", *((_DWORD *)this + 28));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x2000) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "falseStepsSuppressed", *((_DWORD *)this + 29));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "firstStepTime", *((double *)this + 6));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x4000) == 0)
  {
LABEL_15:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "floorsAscended", *((_DWORD *)this + 30));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x8000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "floorsDescended", *((_DWORD *)this + 31));
  int v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x200000) == 0)
  {
LABEL_17:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "isOdometerDistance", *((unsigned char *)this + 148));
  if ((*((_DWORD *)this + 38) & 0x400000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(a2, "isOdometerPace", *((unsigned char *)this + 149));
LABEL_19:
  uint64_t v7 = *((void *)this + 7);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "movementStats");
  }
  int v8 = *((_DWORD *)this + 38);
  if ((v8 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "paceSource", *((_DWORD *)this + 32));
    int v8 = *((_DWORD *)this + 38);
    if ((v8 & 0x20000) == 0)
    {
LABEL_23:
      if ((v8 & 0x40000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_53;
    }
  }
  else if ((v8 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState", *((_DWORD *)this + 33));
  int v8 = *((_DWORD *)this + 38);
  if ((v8 & 0x40000) == 0)
  {
LABEL_24:
    if ((v8 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "pushCount", *((_DWORD *)this + 34));
  int v8 = *((_DWORD *)this + 38);
  if ((v8 & 0x20) == 0)
  {
LABEL_25:
    if ((v8 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "rawDistance", *((double *)this + 8));
  if ((*((_DWORD *)this + 38) & 0x80000) != 0) {
LABEL_26:
  }
    PB::TextFormatter::format(a2, "recordId", *((_DWORD *)this + 35));
LABEL_27:
  if (*((void *)this + 9)) {
    PB::TextFormatter::format();
  }
  int v9 = *((_DWORD *)this + 38);
  if ((v9 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 10));
    int v9 = *((_DWORD *)this + 38);
    if ((v9 & 0x80) == 0)
    {
LABEL_31:
      if ((v9 & 0x100000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_31;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 11));
  if ((*((_DWORD *)this + 38) & 0x100000) != 0) {
LABEL_32:
  }
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 36));
LABEL_33:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepCountEntry::readFrom(CMMsl::StepCountEntry *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 38) |= 0x80u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v20);
          goto LABEL_242;
        case 2u:
          *((_DWORD *)this + 38) |= 0x40u;
          unint64_t v22 = *((void *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v22);
          goto LABEL_242;
        case 3u:
          *((_DWORD *)this + 38) |= 0x10u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v23);
          goto LABEL_242;
        case 4u:
          *((_DWORD *)this + 38) |= 0x100u;
          unint64_t v24 = *((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
          uint64_t v26 = *(void *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            do
            {
              unint64_t v30 = v24 + 1;
              *((void *)a2 + 1) = v24 + 1;
              char v31 = *(unsigned char *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0) {
                goto LABEL_246;
              }
              v27 += 7;
              unint64_t v24 = v30;
              BOOL v14 = v28++ > 8;
            }
            while (!v14);
LABEL_152:
            LODWORD(v29) = 0;
            goto LABEL_246;
          }
          char v141 = 0;
          unsigned int v142 = 0;
          uint64_t v29 = 0;
          if (v25 <= v24) {
            unint64_t v25 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v143 = v24 + 1;
              char v144 = *(unsigned char *)(v26 + v24);
              *((void *)a2 + 1) = v143;
              v29 |= (unint64_t)(v144 & 0x7F) << v141;
              if (v144 < 0)
              {
                v141 += 7;
                unint64_t v24 = v143;
                BOOL v14 = v142++ > 8;
                if (v14) {
                  goto LABEL_152;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v29) = 0;
              }
            }
            break;
          }
LABEL_246:
          *((_DWORD *)this + 24) = v29;
          goto LABEL_295;
        case 5u:
          *((_DWORD *)this + 38) |= 8u;
          unint64_t v32 = *((void *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFF7 || v32 + 8 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v32);
          goto LABEL_242;
        case 6u:
          *((_DWORD *)this + 38) |= 0x20u;
          unint64_t v33 = *((void *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v33);
          goto LABEL_242;
        case 7u:
          *((_DWORD *)this + 38) |= 0x4000u;
          unint64_t v34 = *((void *)a2 + 1);
          unint64_t v35 = *((void *)a2 + 2);
          uint64_t v36 = *(void *)a2;
          if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
          {
            char v37 = 0;
            unsigned int v38 = 0;
            uint64_t v39 = 0;
            do
            {
              unint64_t v40 = v34 + 1;
              *((void *)a2 + 1) = v34 + 1;
              char v41 = *(unsigned char *)(v36 + v34);
              v39 |= (unint64_t)(v41 & 0x7F) << v37;
              if ((v41 & 0x80) == 0) {
                goto LABEL_250;
              }
              v37 += 7;
              unint64_t v34 = v40;
              BOOL v14 = v38++ > 8;
            }
            while (!v14);
LABEL_159:
            LODWORD(v39) = 0;
            goto LABEL_250;
          }
          char v145 = 0;
          unsigned int v146 = 0;
          uint64_t v39 = 0;
          if (v35 <= v34) {
            unint64_t v35 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v35 == v34)
            {
              LODWORD(v39) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v147 = v34 + 1;
              char v148 = *(unsigned char *)(v36 + v34);
              *((void *)a2 + 1) = v147;
              v39 |= (unint64_t)(v148 & 0x7F) << v145;
              if (v148 < 0)
              {
                v145 += 7;
                unint64_t v34 = v147;
                BOOL v14 = v146++ > 8;
                if (v14) {
                  goto LABEL_159;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v39) = 0;
              }
            }
            break;
          }
LABEL_250:
          *((_DWORD *)this + 30) = v39;
          goto LABEL_295;
        case 8u:
          *((_DWORD *)this + 38) |= 0x8000u;
          unint64_t v42 = *((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          uint64_t v44 = *(void *)a2;
          if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
          {
            char v45 = 0;
            unsigned int v46 = 0;
            uint64_t v47 = 0;
            do
            {
              unint64_t v48 = v42 + 1;
              *((void *)a2 + 1) = v42 + 1;
              char v49 = *(unsigned char *)(v44 + v42);
              v47 |= (unint64_t)(v49 & 0x7F) << v45;
              if ((v49 & 0x80) == 0) {
                goto LABEL_254;
              }
              v45 += 7;
              unint64_t v42 = v48;
              BOOL v14 = v46++ > 8;
            }
            while (!v14);
LABEL_166:
            LODWORD(v47) = 0;
            goto LABEL_254;
          }
          char v149 = 0;
          unsigned int v150 = 0;
          uint64_t v47 = 0;
          if (v43 <= v42) {
            unint64_t v43 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v43 == v42)
            {
              LODWORD(v47) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v151 = v42 + 1;
              char v152 = *(unsigned char *)(v44 + v42);
              *((void *)a2 + 1) = v151;
              v47 |= (unint64_t)(v152 & 0x7F) << v149;
              if (v152 < 0)
              {
                v149 += 7;
                unint64_t v42 = v151;
                BOOL v14 = v150++ > 8;
                if (v14) {
                  goto LABEL_166;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v47) = 0;
              }
            }
            break;
          }
LABEL_254:
          *((_DWORD *)this + 31) = v47;
          goto LABEL_295;
        case 9u:
          *((_DWORD *)this + 38) |= 4u;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v50);
          goto LABEL_242;
        case 0xAu:
          *((_DWORD *)this + 38) |= 2u;
          unint64_t v51 = *((void *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((void *)a2 + 2)) {
            goto LABEL_68;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v51);
          goto LABEL_242;
        case 0xBu:
          *((_DWORD *)this + 38) |= 1u;
          unint64_t v52 = *((void *)a2 + 1);
          if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v52);
LABEL_242:
            *((void *)a2 + 1) += 8;
          }
          else
          {
LABEL_68:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_295;
        case 0xCu:
          *((_DWORD *)this + 38) |= 0x80000u;
          unint64_t v53 = *((void *)a2 + 1);
          unint64_t v54 = *((void *)a2 + 2);
          uint64_t v55 = *(void *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)a2 + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_258;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v14 = v57++ > 8;
            }
            while (!v14);
LABEL_173:
            LODWORD(v58) = 0;
            goto LABEL_258;
          }
          char v153 = 0;
          unsigned int v154 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v155 = v53 + 1;
              char v156 = *(unsigned char *)(v55 + v53);
              *((void *)a2 + 1) = v155;
              v58 |= (unint64_t)(v156 & 0x7F) << v153;
              if (v156 < 0)
              {
                v153 += 7;
                unint64_t v53 = v155;
                BOOL v14 = v154++ > 8;
                if (v14) {
                  goto LABEL_173;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v58) = 0;
              }
            }
            break;
          }
LABEL_258:
          *((_DWORD *)this + 35) = v58;
          goto LABEL_295;
        case 0xDu:
          operator new();
        case 0xEu:
          *((_DWORD *)this + 38) |= 0x200000u;
          unint64_t v61 = *((void *)a2 + 1);
          if (v61 >= *((void *)a2 + 2))
          {
            BOOL v64 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v62 = v61 + 1;
            int v63 = *(unsigned __int8 *)(*(void *)a2 + v61);
            *((void *)a2 + 1) = v62;
            BOOL v64 = v63 != 0;
          }
          *((unsigned char *)this + 148) = v64;
          goto LABEL_295;
        case 0xFu:
          *((_DWORD *)this + 38) |= 0x400000u;
          unint64_t v65 = *((void *)a2 + 1);
          if (v65 >= *((void *)a2 + 2))
          {
            BOOL v68 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v66 = v65 + 1;
            int v67 = *(unsigned __int8 *)(*(void *)a2 + v65);
            *((void *)a2 + 1) = v66;
            BOOL v68 = v67 != 0;
          }
          *((unsigned char *)this + 149) = v68;
          goto LABEL_295;
        case 0x10u:
          operator new();
        case 0x11u:
          *((_DWORD *)this + 38) |= 0x40000u;
          unint64_t v69 = *((void *)a2 + 1);
          unint64_t v70 = *((void *)a2 + 2);
          uint64_t v71 = *(void *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)a2 + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_262;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_184:
            LODWORD(v74) = 0;
            goto LABEL_262;
          }
          char v157 = 0;
          unsigned int v158 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v159 = v69 + 1;
              char v160 = *(unsigned char *)(v71 + v69);
              *((void *)a2 + 1) = v159;
              v74 |= (unint64_t)(v160 & 0x7F) << v157;
              if (v160 < 0)
              {
                v157 += 7;
                unint64_t v69 = v159;
                BOOL v14 = v158++ > 8;
                if (v14) {
                  goto LABEL_184;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_262:
          *((_DWORD *)this + 34) = v74;
          goto LABEL_295;
        case 0x12u:
          *((_DWORD *)this + 38) |= 0x100000u;
          unint64_t v77 = *((void *)a2 + 1);
          unint64_t v78 = *((void *)a2 + 2);
          uint64_t v79 = *(void *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)a2 + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_266;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }
            while (!v14);
LABEL_191:
            LODWORD(v82) = 0;
            goto LABEL_266;
          }
          char v161 = 0;
          unsigned int v162 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v163 = v77 + 1;
              char v164 = *(unsigned char *)(v79 + v77);
              *((void *)a2 + 1) = v163;
              v82 |= (unint64_t)(v164 & 0x7F) << v161;
              if (v164 < 0)
              {
                v161 += 7;
                unint64_t v77 = v163;
                BOOL v14 = v162++ > 8;
                if (v14) {
                  goto LABEL_191;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v82) = 0;
              }
            }
            break;
          }
LABEL_266:
          *((_DWORD *)this + 36) = v82;
          goto LABEL_295;
        case 0x13u:
          *((_DWORD *)this + 38) |= 0x20000u;
          unint64_t v85 = *((void *)a2 + 1);
          unint64_t v86 = *((void *)a2 + 2);
          uint64_t v87 = *(void *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)a2 + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_270;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }
            while (!v14);
LABEL_198:
            LODWORD(v90) = 0;
            goto LABEL_270;
          }
          char v165 = 0;
          unsigned int v166 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v167 = v85 + 1;
              char v168 = *(unsigned char *)(v87 + v85);
              *((void *)a2 + 1) = v167;
              v90 |= (unint64_t)(v168 & 0x7F) << v165;
              if (v168 < 0)
              {
                v165 += 7;
                unint64_t v85 = v167;
                BOOL v14 = v166++ > 8;
                if (v14) {
                  goto LABEL_198;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v90) = 0;
              }
            }
            break;
          }
LABEL_270:
          *((_DWORD *)this + 33) = v90;
          goto LABEL_295;
        case 0x14u:
          *((_DWORD *)this + 38) |= 0x400u;
          unint64_t v93 = *((void *)a2 + 1);
          unint64_t v94 = *((void *)a2 + 2);
          uint64_t v95 = *(void *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)a2 + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_274;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }
            while (!v14);
LABEL_205:
            LODWORD(v98) = 0;
            goto LABEL_274;
          }
          char v169 = 0;
          unsigned int v170 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v171 = v93 + 1;
              char v172 = *(unsigned char *)(v95 + v93);
              *((void *)a2 + 1) = v171;
              v98 |= (unint64_t)(v172 & 0x7F) << v169;
              if (v172 < 0)
              {
                v169 += 7;
                unint64_t v93 = v171;
                BOOL v14 = v170++ > 8;
                if (v14) {
                  goto LABEL_205;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v98) = 0;
              }
            }
            break;
          }
LABEL_274:
          *((_DWORD *)this + 26) = v98;
          goto LABEL_295;
        case 0x15u:
          *((_DWORD *)this + 38) |= 0x800u;
          unint64_t v101 = *((void *)a2 + 1);
          unint64_t v102 = *((void *)a2 + 2);
          uint64_t v103 = *(void *)a2;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)a2 + 1) = v101 + 1;
              char v108 = *(unsigned char *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_278;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v14 = v105++ > 8;
            }
            while (!v14);
LABEL_212:
            LODWORD(v106) = 0;
            goto LABEL_278;
          }
          char v173 = 0;
          unsigned int v174 = 0;
          uint64_t v106 = 0;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v175 = v101 + 1;
              char v176 = *(unsigned char *)(v103 + v101);
              *((void *)a2 + 1) = v175;
              v106 |= (unint64_t)(v176 & 0x7F) << v173;
              if (v176 < 0)
              {
                v173 += 7;
                unint64_t v101 = v175;
                BOOL v14 = v174++ > 8;
                if (v14) {
                  goto LABEL_212;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v106) = 0;
              }
            }
            break;
          }
LABEL_278:
          *((_DWORD *)this + 27) = v106;
          goto LABEL_295;
        case 0x16u:
          *((_DWORD *)this + 38) |= 0x2000u;
          unint64_t v109 = *((void *)a2 + 1);
          unint64_t v110 = *((void *)a2 + 2);
          uint64_t v111 = *(void *)a2;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)a2 + 1) = v109 + 1;
              char v116 = *(unsigned char *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_282;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }
            while (!v14);
LABEL_219:
            LODWORD(v114) = 0;
            goto LABEL_282;
          }
          char v177 = 0;
          unsigned int v178 = 0;
          uint64_t v114 = 0;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v179 = v109 + 1;
              char v180 = *(unsigned char *)(v111 + v109);
              *((void *)a2 + 1) = v179;
              v114 |= (unint64_t)(v180 & 0x7F) << v177;
              if (v180 < 0)
              {
                v177 += 7;
                unint64_t v109 = v179;
                BOOL v14 = v178++ > 8;
                if (v14) {
                  goto LABEL_219;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v114) = 0;
              }
            }
            break;
          }
LABEL_282:
          *((_DWORD *)this + 29) = v114;
          goto LABEL_295;
        case 0x17u:
          *((_DWORD *)this + 38) |= 0x200u;
          unint64_t v117 = *((void *)a2 + 1);
          unint64_t v118 = *((void *)a2 + 2);
          uint64_t v119 = *(void *)a2;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            char v120 = 0;
            unsigned int v121 = 0;
            uint64_t v122 = 0;
            do
            {
              unint64_t v123 = v117 + 1;
              *((void *)a2 + 1) = v117 + 1;
              char v124 = *(unsigned char *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0) {
                goto LABEL_286;
              }
              v120 += 7;
              unint64_t v117 = v123;
              BOOL v14 = v121++ > 8;
            }
            while (!v14);
LABEL_226:
            LODWORD(v122) = 0;
            goto LABEL_286;
          }
          char v181 = 0;
          unsigned int v182 = 0;
          uint64_t v122 = 0;
          if (v118 <= v117) {
            unint64_t v118 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v183 = v117 + 1;
              char v184 = *(unsigned char *)(v119 + v117);
              *((void *)a2 + 1) = v183;
              v122 |= (unint64_t)(v184 & 0x7F) << v181;
              if (v184 < 0)
              {
                v181 += 7;
                unint64_t v117 = v183;
                BOOL v14 = v182++ > 8;
                if (v14) {
                  goto LABEL_226;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v122) = 0;
              }
            }
            break;
          }
LABEL_286:
          *((_DWORD *)this + 25) = v122;
          goto LABEL_295;
        case 0x18u:
          *((_DWORD *)this + 38) |= 0x1000u;
          unint64_t v125 = *((void *)a2 + 1);
          unint64_t v126 = *((void *)a2 + 2);
          uint64_t v127 = *(void *)a2;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)a2 + 1) = v125 + 1;
              char v132 = *(unsigned char *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_290;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }
            while (!v14);
LABEL_233:
            LODWORD(v130) = 0;
            goto LABEL_290;
          }
          char v185 = 0;
          unsigned int v186 = 0;
          uint64_t v130 = 0;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v187 = v125 + 1;
              char v188 = *(unsigned char *)(v127 + v125);
              *((void *)a2 + 1) = v187;
              v130 |= (unint64_t)(v188 & 0x7F) << v185;
              if (v188 < 0)
              {
                v185 += 7;
                unint64_t v125 = v187;
                BOOL v14 = v186++ > 8;
                if (v14) {
                  goto LABEL_233;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v130) = 0;
              }
            }
            break;
          }
LABEL_290:
          *((_DWORD *)this + 28) = v130;
          goto LABEL_295;
        case 0x19u:
          operator new();
        case 0x1Au:
          *((_DWORD *)this + 38) |= 0x10000u;
          unint64_t v133 = *((void *)a2 + 1);
          unint64_t v134 = *((void *)a2 + 2);
          uint64_t v135 = *(void *)a2;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)a2 + 1) = v133 + 1;
              char v140 = *(unsigned char *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_294;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }
            while (!v14);
LABEL_240:
            LODWORD(v138) = 0;
            goto LABEL_294;
          }
          char v189 = 0;
          unsigned int v190 = 0;
          uint64_t v138 = 0;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)a2 + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_295;
      }
      while (1)
      {
        if (v134 == v133)
        {
          LODWORD(v138) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_294;
        }
        unint64_t v191 = v133 + 1;
        char v192 = *(unsigned char *)(v135 + v133);
        *((void *)a2 + 1) = v191;
        v138 |= (unint64_t)(v192 & 0x7F) << v189;
        if ((v192 & 0x80) == 0) {
          break;
        }
        v189 += 7;
        unint64_t v133 = v191;
        BOOL v14 = v190++ > 8;
        if (v14) {
          goto LABEL_240;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v138) = 0;
      }
LABEL_294:
      *((_DWORD *)this + 32) = v138;
LABEL_295:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StepCountEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 152);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 88), 1u);
    int v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 2u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 3u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 4u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 6u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 7u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 124), 8u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 9u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xAu);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xBu);
  if ((*(_DWORD *)(v3 + 152) & 0x80000) != 0) {
LABEL_13:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 140), 0xCu);
LABEL_14:
  if (*(void *)(v3 + 72)) {
    this = PB::Writer::write();
  }
  int v5 = *(_DWORD *)(v3 + 152);
  if ((v5 & 0x200000) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 148), 0xEu);
    int v5 = *(_DWORD *)(v3 + 152);
  }
  if ((v5 & 0x400000) != 0) {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 149), 0xFu);
  }
  int v6 = *(const PB::Base **)(v3 + 8);
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6, 0x10u);
  }
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x40000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 0x11u);
    int v7 = *(_DWORD *)(v3 + 152);
    if ((v7 & 0x100000) == 0)
    {
LABEL_24:
      if ((v7 & 0x20000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_49;
    }
  }
  else if ((v7 & 0x100000) == 0)
  {
    goto LABEL_24;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 144), 0x12u);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x20000) == 0)
  {
LABEL_25:
    if ((v7 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 132), 0x13u);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x400) == 0)
  {
LABEL_26:
    if ((v7 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0x14u);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x800) == 0)
  {
LABEL_27:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0x15u);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x2000) == 0)
  {
LABEL_28:
    if ((v7 & 0x200) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x16u);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x200) == 0)
  {
LABEL_29:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 0x17u);
  if ((*(_DWORD *)(v3 + 152) & 0x1000) != 0) {
LABEL_30:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x18u);
LABEL_31:
  uint64_t v8 = *(const PB::Base **)(v3 + 56);
  if (v8) {
    this = PB::Writer::writeSubmessage(a2, v8, 0x19u);
  }
  if (*(unsigned char *)(v3 + 154))
  {
    int v9 = *(_DWORD *)(v3 + 128);
    return PB::Writer::writeVarInt(a2, v9, 0x1Au);
  }
  return this;
}

unint64_t CMMsl::StepCountEntry::hash_value(CMMsl::StepCountEntry *this)
{
  int v2 = *((_DWORD *)this + 38);
  if ((v2 & 0x80) == 0)
  {
    double v37 = 0.0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_34:
    double v36 = 0.0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_35:
    double v35 = 0.0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
  double v12 = *((double *)this + 11);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  double v37 = v12;
  if ((v2 & 0x40) == 0) {
    goto LABEL_34;
  }
LABEL_3:
  double v3 = *((double *)this + 10);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v36 = v3;
  if ((v2 & 0x10) == 0) {
    goto LABEL_35;
  }
LABEL_6:
  double v4 = *((double *)this + 6);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  double v35 = v4;
  if ((v2 & 0x100) != 0)
  {
LABEL_9:
    uint64_t v34 = *((unsigned int *)this + 24);
    if ((v2 & 8) != 0) {
      goto LABEL_10;
    }
LABEL_37:
    double v33 = 0.0;
    if ((v2 & 0x20) != 0) {
      goto LABEL_13;
    }
LABEL_38:
    double v32 = 0.0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_36:
  uint64_t v34 = 0;
  if ((v2 & 8) == 0) {
    goto LABEL_37;
  }
LABEL_10:
  double v5 = *((double *)this + 5);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  double v33 = v5;
  if ((v2 & 0x20) == 0) {
    goto LABEL_38;
  }
LABEL_13:
  double v6 = *((double *)this + 8);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  double v32 = v6;
  if ((v2 & 0x4000) != 0)
  {
LABEL_16:
    uint64_t v31 = *((unsigned int *)this + 30);
    if ((v2 & 0x8000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v31 = 0;
  if ((v2 & 0x8000) != 0)
  {
LABEL_17:
    uint64_t v7 = *((unsigned int *)this + 31);
    if ((v2 & 4) != 0) {
      goto LABEL_18;
    }
LABEL_41:
    uint64_t v8 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_22;
    }
LABEL_42:
    uint64_t v9 = 0;
    if (v2) {
      goto LABEL_26;
    }
    goto LABEL_43;
  }
LABEL_40:
  uint64_t v7 = 0;
  if ((v2 & 4) == 0) {
    goto LABEL_41;
  }
LABEL_18:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 4);
  }
  if ((v2 & 2) == 0) {
    goto LABEL_42;
  }
LABEL_22:
  if (*((double *)this + 3) == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)this + 3);
  }
  if (v2)
  {
LABEL_26:
    if (*((double *)this + 2) == 0.0) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = *((void *)this + 2);
    }
    if ((v2 & 0x80000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v10 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_30:
    uint64_t v11 = *((int *)this + 35);
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v11 = 0;
LABEL_45:
  uint64_t v13 = *((void *)this + 9);
  if (v13)
  {
    unint64_t v14 = sub_100012EE0((uint64_t)&v38, v13);
    int v2 = *((_DWORD *)this + 38);
    if ((v2 & 0x200000) == 0) {
      goto LABEL_47;
    }
LABEL_50:
    uint64_t v15 = *((unsigned __int8 *)this + 148);
    if ((v2 & 0x400000) != 0) {
      goto LABEL_48;
    }
    goto LABEL_51;
  }
  unint64_t v14 = 0;
  if ((v2 & 0x200000) != 0) {
    goto LABEL_50;
  }
LABEL_47:
  uint64_t v15 = 0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_48:
    uint64_t v16 = *((unsigned __int8 *)this + 149);
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v16 = 0;
LABEL_52:
  unint64_t v17 = *((void *)this + 1);
  if (v17) {
    unint64_t v17 = CMMsl::AccelerometerPace::hash_value((CMMsl::AccelerometerPace *)v17);
  }
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v18 = *((unsigned int *)this + 34);
    if ((v2 & 0x100000) != 0)
    {
LABEL_56:
      uint64_t v19 = *((unsigned int *)this + 36);
      if ((v2 & 0x20000) != 0) {
        goto LABEL_57;
      }
      goto LABEL_65;
    }
  }
  else
  {
    uint64_t v18 = 0;
    if ((v2 & 0x100000) != 0) {
      goto LABEL_56;
    }
  }
  uint64_t v19 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_57:
    uint64_t v20 = *((unsigned int *)this + 33);
    if ((v2 & 0x400) != 0) {
      goto LABEL_58;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v20 = 0;
  if ((v2 & 0x400) != 0)
  {
LABEL_58:
    uint64_t v21 = *((unsigned int *)this + 26);
    if ((v2 & 0x800) != 0) {
      goto LABEL_59;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v21 = 0;
  if ((v2 & 0x800) != 0)
  {
LABEL_59:
    uint64_t v22 = *((unsigned int *)this + 27);
    if ((v2 & 0x2000) != 0) {
      goto LABEL_60;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v22 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_60:
    uint64_t v23 = *((unsigned int *)this + 29);
    if ((v2 & 0x200) != 0) {
      goto LABEL_61;
    }
LABEL_69:
    uint64_t v24 = 0;
    if ((v2 & 0x1000) != 0) {
      goto LABEL_62;
    }
LABEL_70:
    uint64_t v25 = 0;
    goto LABEL_71;
  }
LABEL_68:
  uint64_t v23 = 0;
  if ((v2 & 0x200) == 0) {
    goto LABEL_69;
  }
LABEL_61:
  uint64_t v24 = *((unsigned int *)this + 25);
  if ((v2 & 0x1000) == 0) {
    goto LABEL_70;
  }
LABEL_62:
  uint64_t v25 = *((unsigned int *)this + 28);
LABEL_71:
  uint64_t v26 = *((void *)this + 7);
  if (v26)
  {
    float v27 = *(float *)(v26 + 8);
    BOOL v28 = v27 == 0.0 || (*(unsigned char *)(v26 + 12) & 1) == 0;
    uint64_t v26 = LODWORD(v27);
    if (v28) {
      uint64_t v26 = 0;
    }
  }
  if ((v2 & 0x10000) != 0) {
    uint64_t v29 = *((int *)this + 32);
  }
  else {
    uint64_t v29 = 0;
  }
  return *(void *)&v36 ^ *(void *)&v37 ^ *(void *)&v35 ^ v34 ^ *(void *)&v33 ^ *(void *)&v32 ^ v31 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v29;
}

uint64_t CMMsl::StepCountEntry::makeAccelerometerPace(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::StepCountEntry::makeMovementStats(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

void CMMsl::StepCountEntryAddition::~StepCountEntryAddition(CMMsl::StepCountEntryAddition *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::StepCountEntryAddition::StepCountEntryAddition(uint64_t this, const CMMsl::StepCountEntryAddition *a2)
{
  *(void *)this = off_1003A9538;
  *(_DWORD *)(this + 72) = 0;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *((void *)a2 + 6);
    __int16 v3 = 32;
    *(_WORD *)(this + 72) = 32;
    *(void *)(this + 48) = v4;
    __int16 v2 = *((_WORD *)a2 + 36);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 16);
    v3 |= 0x80u;
    *(_WORD *)(this + 72) = v3;
    *(_DWORD *)(this + 64) = v5;
    __int16 v2 = *((_WORD *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 72) = v3;
    *(void *)(this + 24) = v6;
    __int16 v2 = *((_WORD *)a2 + 36);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 32) = v7;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  char v9 = *((unsigned char *)a2 + 69);
  v3 |= 0x200u;
  *(_WORD *)(this + 72) = v3;
  *(unsigned char *)(this + 69) = v9;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v10 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 8) = v10;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v11 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 56) = v11;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  char v12 = *((unsigned char *)a2 + 70);
  v3 |= 0x400u;
  *(_WORD *)(this + 72) = v3;
  *(unsigned char *)(this + 70) = v12;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0) {
      return this;
    }
LABEL_24:
    char v14 = *((unsigned char *)a2 + 68);
    *(_WORD *)(this + 72) = v3 | 0x100;
    *(unsigned char *)(this + 68) = v14;
    return this;
  }
LABEL_23:
  uint64_t v13 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 16) = v13;
  if ((*((_WORD *)a2 + 36) & 0x100) != 0) {
    goto LABEL_24;
  }
  return this;
}

CMMsl *CMMsl::StepCountEntryAddition::operator=(CMMsl *a1, const CMMsl::StepCountEntryAddition *a2)
{
  if (a1 != a2)
  {
    CMMsl::StepCountEntryAddition::StepCountEntryAddition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntryAddition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepCountEntryAddition *a2, CMMsl::StepCountEntryAddition *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  int v5 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  LOBYTE(v5) = *((unsigned char *)this + 69);
  *((unsigned char *)this + 69) = *((unsigned char *)a2 + 69);
  *((unsigned char *)a2 + 69) = v5;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  LOBYTE(v5) = *((unsigned char *)this + 70);
  *((unsigned char *)this + 70) = *((unsigned char *)a2 + 70);
  *((unsigned char *)a2 + 70) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v5) = *((unsigned char *)this + 68);
  *((unsigned char *)this + 68) = *((unsigned char *)a2 + 68);
  *((unsigned char *)a2 + 68) = v5;
  return result;
}

double CMMsl::StepCountEntryAddition::StepCountEntryAddition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9538;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 69) = *(unsigned char *)(a2 + 69);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 70) = *(unsigned char *)(a2 + 70);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  return result;
}

CMMsl *CMMsl::StepCountEntryAddition::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepCountEntryAddition::StepCountEntryAddition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntryAddition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::StepCountEntryAddition::formatText(CMMsl::StepCountEntryAddition *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 36);
  if (v5)
  {
    PB::TextFormatter::format(a2, "calibratedDistance", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "energyDeltaDistance", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "energyIsCalibrated", *((unsigned char *)this + 68));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "incrementalActiveTime", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "incrementalSteps", *((_DWORD *)this + 16));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "lastStepTime", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "odometerSpeed", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "rawPace", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "rawPaceDidJump", *((unsigned char *)this + 69));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "stepCadenceDeltaDistance", *((double *)this + 7));
  if ((*((_WORD *)this + 36) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "stepCadenceIsCalibrated", *((unsigned char *)this + 70));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepCountEntryAddition::readFrom(CMMsl::StepCountEntryAddition *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 36) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 2u:
              *((_WORD *)this + 36) |= 0x80u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_77;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_76:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_77;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_76;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_77;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_77:
              *((_DWORD *)this + 16) = v25;
LABEL_78:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 3u:
              *((_WORD *)this + 36) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 4u:
              *((_WORD *)this + 36) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 5u:
              *((_WORD *)this + 36) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 6u:
              *((_WORD *)this + 36) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 69) = v28;
              goto LABEL_78;
            case 7u:
              *((_WORD *)this + 36) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 8u:
              *((_WORD *)this + 36) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_55;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 9u:
              *((_WORD *)this + 36) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 70) = v30;
              goto LABEL_78;
            case 0xAu:
              *((_WORD *)this + 36) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_72:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_55:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_78;
            case 0xBu:
              *((_WORD *)this + 36) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v32 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v32 = v31 != 0;
              }
              *((unsigned char *)this + 68) = v32;
              goto LABEL_78;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_78;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::StepCountEntryAddition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 72);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48), 1u);
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 2u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 69), 6u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 7u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 8u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xAu);
    if ((*(_WORD *)(v3 + 72) & 0x100) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 70), 9u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x100) == 0) {
    return this;
  }
LABEL_23:
  char v5 = *(unsigned char *)(v3 + 68);

  return PB::Writer::write(a2, v5, 0xBu);
}

uint64_t CMMsl::StepCountEntryAddition::hash_value(CMMsl::StepCountEntryAddition *this)
{
  __int16 v1 = *((_WORD *)this + 36);
  if ((v1 & 0x20) != 0)
  {
    double v2 = *((double *)this + 6);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 16);
      if ((v1 & 4) != 0) {
        goto LABEL_4;
      }
LABEL_29:
      double v4 = 0.0;
      if ((v1 & 8) != 0) {
        goto LABEL_7;
      }
LABEL_30:
      double v5 = 0.0;
      if ((v1 & 0x10) != 0) {
        goto LABEL_10;
      }
LABEL_31:
      double v6 = 0.0;
      if ((*((_WORD *)this + 36) & 0x200) != 0) {
        goto LABEL_13;
      }
      goto LABEL_32;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_29;
  }
LABEL_4:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_30;
  }
LABEL_7:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_31;
  }
LABEL_10:
  double v6 = *((double *)this + 5);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((_WORD *)this + 36) & 0x200) != 0)
  {
LABEL_13:
    uint64_t v7 = *((unsigned __int8 *)this + 69);
    if (v1) {
      goto LABEL_14;
    }
LABEL_33:
    double v8 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_17;
    }
LABEL_34:
    double v9 = 0.0;
    if ((*((_WORD *)this + 36) & 0x400) != 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_32:
  uint64_t v7 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_14:
  double v8 = *((double *)this + 1);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_34;
  }
LABEL_17:
  double v9 = *((double *)this + 7);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((*((_WORD *)this + 36) & 0x400) != 0)
  {
LABEL_20:
    uint64_t v10 = *((unsigned __int8 *)this + 70);
    if ((v1 & 2) != 0) {
      goto LABEL_21;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v10 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_21:
    double v11 = *((double *)this + 2);
    if (v11 == 0.0) {
      double v11 = 0.0;
    }
    if ((*((_WORD *)this + 36) & 0x100) != 0) {
      goto LABEL_24;
    }
LABEL_37:
    uint64_t v12 = 0;
    return v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ *(void *)&v11 ^ v12;
  }
LABEL_36:
  double v11 = 0.0;
  if ((*((_WORD *)this + 36) & 0x100) == 0) {
    goto LABEL_37;
  }
LABEL_24:
  uint64_t v12 = *((unsigned __int8 *)this + 68);
  return v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ *(void *)&v11 ^ v12;
}

void CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult(CMMsl::StepDistanceFusionResult *this)
{
  *(void *)this = off_1003A9570;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult(this);

  operator delete();
}

uint64_t CMMsl::StepDistanceFusionResult::StepDistanceFusionResult(uint64_t this, const CMMsl::StepDistanceFusionResult *a2)
{
  *(void *)this = off_1003A9570;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 100) = 0;
  *(void *)(this + 16) = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  __int16 v2 = *((_WORD *)a2 + 50);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 3);
    *(_WORD *)(this + 100) |= 1u;
    *(void *)(this + 24) = v4;
    __int16 v2 = *((_WORD *)a2 + 50);
    if ((v2 & 2) == 0)
    {
LABEL_7:
      if ((v2 & 0x80) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v5 = *((void *)a2 + 4);
  *(_WORD *)(this + 100) |= 2u;
  *(void *)(this + 32) = v5;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x80) == 0)
  {
LABEL_8:
    if ((v2 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v6 = *((void *)a2 + 10);
  *(_WORD *)(this + 100) |= 0x80u;
  *(void *)(this + 80) = v6;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v7 = *((void *)a2 + 8);
  *(_WORD *)(this + 100) |= 0x20u;
  *(void *)(this + 64) = v7;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v8 = *((void *)a2 + 9);
  *(_WORD *)(this + 100) |= 0x40u;
  *(void *)(this + 72) = v8;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v9 = *((void *)a2 + 5);
  *(_WORD *)(this + 100) |= 4u;
  *(void *)(this + 40) = v9;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v10 = *((void *)a2 + 6);
  *(_WORD *)(this + 100) |= 8u;
  *(void *)(this + 48) = v10;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v11 = *((void *)a2 + 7);
  *(_WORD *)(this + 100) |= 0x10u;
  *(void *)(this + 56) = v11;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v12 = *((unsigned char *)a2 + 96);
  *(_WORD *)(this + 100) |= 0x400u;
  *(unsigned char *)(this + 96) = v12;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0) {
      return this;
    }
    goto LABEL_16;
  }
LABEL_27:
  int v13 = *((_DWORD *)a2 + 23);
  *(_WORD *)(this + 100) |= 0x200u;
  *(_DWORD *)(this + 92) = v13;
  if ((*((_WORD *)a2 + 50) & 0x100) == 0) {
    return this;
  }
LABEL_16:
  int v3 = *((_DWORD *)a2 + 22);
  *(_WORD *)(this + 100) |= 0x100u;
  *(_DWORD *)(this + 88) = v3;
  return this;
}

CMMsl *CMMsl::StepDistanceFusionResult::operator=(CMMsl *a1, const CMMsl::StepDistanceFusionResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::StepDistanceFusionResult::StepDistanceFusionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepDistanceFusionResult *)v5, v3);
    CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult((CMMsl::StepDistanceFusionResult *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepDistanceFusionResult *a2, CMMsl::StepDistanceFusionResult *a3)
{
  int v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  uint64_t v11 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v11;
  uint64_t v12 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v12;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  LOBYTE(v5) = *((unsigned char *)this + 96);
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  *((unsigned char *)a2 + 96) = v5;
  LODWORD(v5) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v5;
  LODWORD(v5) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v5;
  return result;
}

uint64_t CMMsl::StepDistanceFusionResult::StepDistanceFusionResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9570;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return a1;
}

CMMsl *CMMsl::StepDistanceFusionResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepDistanceFusionResult::StepDistanceFusionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepDistanceFusionResult *)v5, v3);
    CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult((CMMsl::StepDistanceFusionResult *)v5);
  }
  return a1;
}

uint64_t CMMsl::StepDistanceFusionResult::formatText(CMMsl::StepDistanceFusionResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "addition");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "fused");
  }
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 0x400) != 0)
  {
    PB::TextFormatter::format(a2, "isVehicular", *((unsigned char *)this + 96));
    __int16 v7 = *((_WORD *)this + 50);
    if ((v7 & 1) == 0)
    {
LABEL_7:
      if ((v7 & 0x100) == 0) {
        goto LABEL_8;
      }
      goto LABEL_22;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "odometerDeltaDistance", *((double *)this + 3));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 0x100) == 0)
  {
LABEL_8:
    if ((v7 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "odometerQuality", *((_DWORD *)this + 22));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 2) == 0)
  {
LABEL_9:
    if ((v7 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "odometerSmoothMeanPace", *((double *)this + 4));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 0x200) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "pedometerDistanceSource", *((_DWORD *)this + 23));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "speedStdDevOdometer", *((double *)this + 5));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "speedStdDevPedometer", *((double *)this + 6));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 0x10) == 0)
  {
LABEL_13:
    if ((v7 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "speedStdDevResidualTolerance", *((double *)this + 7));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 0x20) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "totalDistanceCalibratedPedometer", *((double *)this + 8));
  __int16 v7 = *((_WORD *)this + 50);
  if ((v7 & 0x40) == 0)
  {
LABEL_15:
    if ((v7 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "totalDistanceFused", *((double *)this + 9));
  if ((*((_WORD *)this + 50) & 0x80) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(a2, "totalDistanceOdometer", *((double *)this + 10));
LABEL_17:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepDistanceFusionResult::readFrom(CMMsl::StepDistanceFusionResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          *((_WORD *)this + 50) |= 1u;
          unint64_t v21 = *((void *)a2 + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v21);
          goto LABEL_83;
        case 4u:
          *((_WORD *)this + 50) |= 2u;
          unint64_t v22 = *((void *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v22);
          goto LABEL_83;
        case 5u:
          *((_WORD *)this + 50) |= 0x80u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v23);
          goto LABEL_83;
        case 6u:
          *((_WORD *)this + 50) |= 0x20u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v24);
          goto LABEL_83;
        case 7u:
          *((_WORD *)this + 50) |= 0x40u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v25);
          goto LABEL_83;
        case 8u:
          *((_WORD *)this + 50) |= 4u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v26);
          goto LABEL_83;
        case 9u:
          *((_WORD *)this + 50) |= 8u;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v27);
          goto LABEL_83;
        case 0xAu:
          *((_WORD *)this + 50) |= 0x10u;
          unint64_t v28 = *((void *)a2 + 1);
          if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 7) = *(void *)(*(void *)a2 + v28);
LABEL_83:
            *((void *)a2 + 1) += 8;
          }
          else
          {
LABEL_49:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_92;
        case 0xBu:
          *((_WORD *)this + 50) |= 0x400u;
          unint64_t v29 = *((void *)a2 + 1);
          if (v29 >= *((void *)a2 + 2))
          {
            BOOL v32 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v30 = v29 + 1;
            int v31 = *(unsigned __int8 *)(*(void *)a2 + v29);
            *((void *)a2 + 1) = v30;
            BOOL v32 = v31 != 0;
          }
          *((unsigned char *)this + 96) = v32;
          goto LABEL_92;
        case 0xCu:
          *((_WORD *)this + 50) |= 0x200u;
          unint64_t v33 = *((void *)a2 + 1);
          unint64_t v34 = *((void *)a2 + 2);
          uint64_t v35 = *(void *)a2;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            char v36 = 0;
            unsigned int v37 = 0;
            uint64_t v38 = 0;
            do
            {
              unint64_t v39 = v33 + 1;
              *((void *)a2 + 1) = v33 + 1;
              char v40 = *(unsigned char *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0) {
                goto LABEL_87;
              }
              v36 += 7;
              unint64_t v33 = v39;
              BOOL v14 = v37++ > 8;
            }
            while (!v14);
LABEL_74:
            LODWORD(v38) = 0;
            goto LABEL_87;
          }
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v38 = 0;
          if (v34 <= v33) {
            unint64_t v34 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v51 = v33 + 1;
              char v52 = *(unsigned char *)(v35 + v33);
              *((void *)a2 + 1) = v51;
              v38 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                unint64_t v33 = v51;
                BOOL v14 = v50++ > 8;
                if (v14) {
                  goto LABEL_74;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v38) = 0;
              }
            }
            break;
          }
LABEL_87:
          *((_DWORD *)this + 23) = v38;
          goto LABEL_92;
        case 0xDu:
          *((_WORD *)this + 50) |= 0x100u;
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          uint64_t v43 = *(void *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)a2 + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_91;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v14 = v45++ > 8;
            }
            while (!v14);
LABEL_81:
            LODWORD(v46) = 0;
            goto LABEL_91;
          }
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)a2 + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_92;
      }
      while (1)
      {
        if (v42 == v41)
        {
          LODWORD(v46) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_91;
        }
        unint64_t v55 = v41 + 1;
        char v56 = *(unsigned char *)(v43 + v41);
        *((void *)a2 + 1) = v55;
        v46 |= (unint64_t)(v56 & 0x7F) << v53;
        if ((v56 & 0x80) == 0) {
          break;
        }
        v53 += 7;
        unint64_t v41 = v55;
        BOOL v14 = v54++ > 8;
        if (v14) {
          goto LABEL_81;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v46) = 0;
      }
LABEL_91:
      *((_DWORD *)this + 22) = v46;
LABEL_92:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StepDistanceFusionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5, 2u);
  }
  __int16 v6 = *(_WORD *)(v3 + 100);
  if (v6)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
    __int16 v6 = *(_WORD *)(v3 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0) {
        goto LABEL_8;
      }
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 5u);
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 6u);
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 7u);
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_11:
    if ((v6 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 8u);
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_12:
    if ((v6 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 9u);
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0xAu);
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x200) == 0) {
      goto LABEL_15;
    }
LABEL_26:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0xCu);
    if ((*(_WORD *)(v3 + 100) & 0x100) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 96), 0xBu);
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x200) != 0) {
    goto LABEL_26;
  }
LABEL_15:
  if ((v6 & 0x100) == 0) {
    return this;
  }
LABEL_27:
  int v7 = *(_DWORD *)(v3 + 88);

  return PB::Writer::writeVarInt(a2, v7, 0xDu);
}

unint64_t CMMsl::StepDistanceFusionResult::hash_value(CMMsl::StepDistanceFusionResult *this)
{
  unint64_t v2 = (CMMsl::StepCountEntry *)*((void *)this + 2);
  if (v2) {
    unint64_t v3 = CMMsl::StepCountEntry::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 1);
  if (v4) {
    unint64_t v4 = CMMsl::StepCountEntryAddition::hash_value((CMMsl::StepCountEntryAddition *)v4);
  }
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 1) == 0)
  {
    double v6 = 0.0;
    if ((v5 & 2) != 0) {
      goto LABEL_8;
    }
LABEL_35:
    double v7 = 0.0;
    if ((v5 & 0x80) != 0) {
      goto LABEL_11;
    }
LABEL_36:
    double v8 = 0.0;
    if ((v5 & 0x20) != 0) {
      goto LABEL_14;
    }
LABEL_37:
    double v9 = 0.0;
    if ((v5 & 0x40) != 0) {
      goto LABEL_17;
    }
LABEL_38:
    double v10 = 0.0;
    if ((v5 & 4) != 0) {
      goto LABEL_20;
    }
LABEL_39:
    double v11 = 0.0;
    if ((v5 & 8) != 0) {
      goto LABEL_23;
    }
LABEL_40:
    double v12 = 0.0;
    if ((v5 & 0x10) != 0) {
      goto LABEL_26;
    }
LABEL_41:
    double v13 = 0.0;
    if ((*((_WORD *)this + 50) & 0x400) != 0) {
      goto LABEL_29;
    }
    goto LABEL_42;
  }
  double v6 = *((double *)this + 3);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v5 & 2) == 0) {
    goto LABEL_35;
  }
LABEL_8:
  double v7 = *((double *)this + 4);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v5 & 0x80) == 0) {
    goto LABEL_36;
  }
LABEL_11:
  double v8 = *((double *)this + 10);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v5 & 0x20) == 0) {
    goto LABEL_37;
  }
LABEL_14:
  double v9 = *((double *)this + 8);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v5 & 0x40) == 0) {
    goto LABEL_38;
  }
LABEL_17:
  double v10 = *((double *)this + 9);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v5 & 4) == 0) {
    goto LABEL_39;
  }
LABEL_20:
  double v11 = *((double *)this + 5);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v5 & 8) == 0) {
    goto LABEL_40;
  }
LABEL_23:
  double v12 = *((double *)this + 6);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v5 & 0x10) == 0) {
    goto LABEL_41;
  }
LABEL_26:
  double v13 = *((double *)this + 7);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((*((_WORD *)this + 50) & 0x400) != 0)
  {
LABEL_29:
    uint64_t v14 = *((unsigned __int8 *)this + 96);
    if ((*((_WORD *)this + 50) & 0x200) != 0) {
      goto LABEL_30;
    }
LABEL_43:
    uint64_t v15 = 0;
    if ((*((_WORD *)this + 50) & 0x100) != 0) {
      goto LABEL_31;
    }
LABEL_44:
    uint64_t v16 = 0;
    return v4 ^ v3 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ v14 ^ v15 ^ v16;
  }
LABEL_42:
  uint64_t v14 = 0;
  if ((*((_WORD *)this + 50) & 0x200) == 0) {
    goto LABEL_43;
  }
LABEL_30:
  uint64_t v15 = *((int *)this + 23);
  if ((*((_WORD *)this + 50) & 0x100) == 0) {
    goto LABEL_44;
  }
LABEL_31:
  uint64_t v16 = *((int *)this + 22);
  return v4 ^ v3 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ v14 ^ v15 ^ v16;
}

uint64_t CMMsl::StepDistanceFusionResult::makeFused(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::StepDistanceFusionResult::makeAddition(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::StepLikelihoodFeatures::~StepLikelihoodFeatures(CMMsl::StepLikelihoodFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(CMMsl::StepLikelihoodFeatures *this, const CMMsl::StepLikelihoodFeatures *a2)
{
  *(void *)this = off_1003A95A8;
  *((_DWORD *)this + 24) = 0;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x40) != 0)
  {
    double result = *((double *)a2 + 7);
    __int16 v3 = 64;
    *((_WORD *)this + 48) = 64;
    *((double *)this + 7) = result;
    __int16 v2 = *((_WORD *)a2 + 48);
    if ((v2 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 48) & 0x400) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 11);
    v3 |= 0x400u;
    *((_WORD *)this + 48) = v3;
    *((double *)this + 11) = result;
    __int16 v2 = *((_WORD *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    double result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_WORD *)this + 48) = v3;
    *((double *)this + 6) = result;
    __int16 v2 = *((_WORD *)a2 + 48);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 10) = result;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 5) = result;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 2) = result;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_24:
    double result = *((double *)a2 + 1);
    *((_WORD *)this + 48) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_23:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 8) = result;
  if (*((_WORD *)a2 + 48)) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::StepLikelihoodFeatures::operator=(CMMsl *a1, const CMMsl::StepLikelihoodFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures((CMMsl::StepLikelihoodFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepLikelihoodFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepLikelihoodFeatures *a2, CMMsl::StepLikelihoodFeatures *a3)
{
  int v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  uint64_t v13 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v13;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A95A8;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::StepLikelihoodFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepLikelihoodFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::StepLikelihoodFeatures::formatText(CMMsl::StepLikelihoodFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "bobbiness", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bufferAvgSampleRateHz", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "concavityDeltaDeg", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "deltaInertialZVel", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "horizontalDisplacement", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "impulseDurationSec", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "likelihoodRatio", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "peakiness", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "thetaPitchFaceDeg", *((double *)this + 9));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "thetaRollFaceDeg", *((double *)this + 10));
  if ((*((_WORD *)this + 48) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "timeSinceLastStepSec", *((double *)this + 11));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepLikelihoodFeatures::readFrom(CMMsl::StepLikelihoodFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 48) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 2u:
          *((_WORD *)this + 48) |= 0x400u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 3u:
          *((_WORD *)this + 48) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 4u:
          *((_WORD *)this + 48) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 5u:
          *((_WORD *)this + 48) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 6u:
          *((_WORD *)this + 48) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 7u:
          *((_WORD *)this + 48) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 8u:
          *((_WORD *)this + 48) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 9u:
          *((_WORD *)this + 48) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 0xAu:
          *((_WORD *)this + 48) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 0xBu:
          *((_WORD *)this + 48) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_58:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_54:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StepLikelihoodFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 96);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    __int16 v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(this + 96) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 2u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 3u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 5u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 6u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 7u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 8u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(double *)(v3 + 64), 0xAu);
    if ((*(_WORD *)(v3 + 96) & 1) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 9u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 0xBu);
}

uint64_t CMMsl::StepLikelihoodFeatures::hash_value(CMMsl::StepLikelihoodFeatures *this)
{
  __int16 v1 = *((_WORD *)this + 48);
  if ((v1 & 0x40) == 0)
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 48) & 0x400) != 0) {
      goto LABEL_3;
    }
LABEL_36:
    double v3 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_37:
    double v4 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_38:
    double v5 = 0.0;
    if ((*((_WORD *)this + 48) & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_39:
    double v6 = 0.0;
    if ((*((_WORD *)this + 48) & 0x100) != 0) {
      goto LABEL_15;
    }
LABEL_40:
    double v7 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_18;
    }
LABEL_41:
    double v8 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_21;
    }
LABEL_42:
    double v9 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_24;
    }
LABEL_43:
    double v10 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_27;
    }
    goto LABEL_44;
  }
  double v2 = *((double *)this + 7);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((_WORD *)this + 48) & 0x400) == 0) {
    goto LABEL_36;
  }
LABEL_3:
  double v3 = *((double *)this + 11);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_37;
  }
LABEL_6:
  double v4 = *((double *)this + 6);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_38;
  }
LABEL_9:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((_WORD *)this + 48) & 0x200) == 0) {
    goto LABEL_39;
  }
LABEL_12:
  double v6 = *((double *)this + 10);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((_WORD *)this + 48) & 0x100) == 0) {
    goto LABEL_40;
  }
LABEL_15:
  double v7 = *((double *)this + 9);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_41;
  }
LABEL_18:
  double v8 = *((double *)this + 5);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_42;
  }
LABEL_21:
  double v9 = *((double *)this + 3);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_43;
  }
LABEL_24:
  double v10 = *((double *)this + 2);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_27:
    double v11 = *((double *)this + 8);
    if (v11 == 0.0) {
      double v11 = 0.0;
    }
    if (v1) {
      goto LABEL_30;
    }
LABEL_45:
    double v12 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12;
  }
LABEL_44:
  double v11 = 0.0;
  if ((v1 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_30:
  double v12 = *((double *)this + 1);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12;
}

void CMMsl::StreamingHeartRateData::~StreamingHeartRateData(CMMsl::StreamingHeartRateData *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A95E0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::StreamingHeartRateData::~StreamingHeartRateData(this);

  operator delete();
}

void *CMMsl::StreamingHeartRateData::StreamingHeartRateData(void *this, const CMMsl::StreamingHeartRateData *a2)
{
  *this = off_1003A95E0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::StreamingHeartRateData *CMMsl::StreamingHeartRateData::operator=(const CMMsl::StreamingHeartRateData *a1, const CMMsl::StreamingHeartRateData *a2)
{
  if (a1 != a2)
  {
    CMMsl::StreamingHeartRateData::StreamingHeartRateData(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::StreamingHeartRateData::~StreamingHeartRateData((CMMsl::StreamingHeartRateData *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::StreamingHeartRateData *a2, CMMsl::StreamingHeartRateData *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::StreamingHeartRateData::StreamingHeartRateData(void *a1, uint64_t a2)
{
  *a1 = off_1003A95E0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A95E0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::StreamingHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A95E0;
    v6[1] = v4;
    CMMsl::StreamingHeartRateData::~StreamingHeartRateData((CMMsl::StreamingHeartRateData *)v6);
  }
  return a1;
}