uint64_t CMMsl::StreamingHeartRateData::formatText(CMMsl::StreamingHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t vars8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StreamingHeartRateData::readFrom(CMMsl::StreamingHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StreamingHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::OnsetHeartRateData *CMMsl::StreamingHeartRateData::hash_value(CMMsl::StreamingHeartRateData *this)
{
  uint64_t result = (CMMsl::OnsetHeartRateData *)*((void *)this + 1);
  if (result) {
    return (CMMsl::OnsetHeartRateData *)CMMsl::OnsetHeartRateData::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::StreamingHeartRateData::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::StreamingHighFrequencyHeartRateData::~StreamingHighFrequencyHeartRateData(CMMsl::StreamingHighFrequencyHeartRateData *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A9618;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::StreamingHighFrequencyHeartRateData::~StreamingHighFrequencyHeartRateData(this);

  operator delete();
}

void *CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(void *this, const CMMsl::StreamingHighFrequencyHeartRateData *a2)
{
  *this = off_1003A9618;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::StreamingHighFrequencyHeartRateData *CMMsl::StreamingHighFrequencyHeartRateData::operator=(const CMMsl::StreamingHighFrequencyHeartRateData *a1, const CMMsl::StreamingHighFrequencyHeartRateData *a2)
{
  if (a1 != a2)
  {
    CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::StreamingHighFrequencyHeartRateData::~StreamingHighFrequencyHeartRateData((CMMsl::StreamingHighFrequencyHeartRateData *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::StreamingHighFrequencyHeartRateData *a2, CMMsl::StreamingHighFrequencyHeartRateData *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(void *a1, uint64_t a2)
{
  *a1 = off_1003A9618;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A9618;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A9618;
    v6[1] = v4;
    CMMsl::StreamingHighFrequencyHeartRateData::~StreamingHighFrequencyHeartRateData((CMMsl::StreamingHighFrequencyHeartRateData *)v6);
  }
  return a1;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::formatText(CMMsl::StreamingHighFrequencyHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::readFrom(CMMsl::StreamingHighFrequencyHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::OnsetHeartRateData *CMMsl::StreamingHighFrequencyHeartRateData::hash_value(CMMsl::StreamingHighFrequencyHeartRateData *this)
{
  uint64_t result = (CMMsl::OnsetHeartRateData *)*((void *)this + 1);
  if (result) {
    return (CMMsl::OnsetHeartRateData *)CMMsl::OnsetHeartRateData::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::StrideCalBin::~StrideCalBin(CMMsl::StrideCalBin *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::StrideCalBin::StrideCalBin(CMMsl::StrideCalBin *this, const CMMsl::StrideCalBin *a2)
{
  *(void *)this = off_1003A9650;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    int v4 = *((_DWORD *)a2 + 8);
    char v3 = 8;
    *((unsigned char *)this + 40) = 8;
    *((_DWORD *)this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 40))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      double result = *((double *)a2 + 3);
      *((unsigned char *)this + 40) = v3 | 4;
      *((double *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v6 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 9) = v6;
  if ((*((unsigned char *)a2 + 40) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::StrideCalBin::operator=(uint64_t a1, const CMMsl::StrideCalBin *a2)
{
  if ((const CMMsl::StrideCalBin *)a1 != a2)
  {
    CMMsl::StrideCalBin::StrideCalBin((CMMsl::StrideCalBin *)&v8, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v3;
    *(void *)&long long v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v11;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v5;
    int v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v6;
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StrideCalBin *a2, CMMsl::StrideCalBin *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  int v4 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  int v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::StrideCalBin::StrideCalBin(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9650;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9650;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::StrideCalBin::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = off_1003A9650;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    int v13 = *(_DWORD *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v10 = v5;
    *(void *)&long long v5 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    uint64_t v11 = v7;
    uint64_t v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::StrideCalBin::formatText(CMMsl::StrideCalBin *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "begin", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bin", *((_DWORD *)this + 8));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "end", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "kValue", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 9));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StrideCalBin::readFrom(CMMsl::StrideCalBin *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 40) |= 8u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_67;
                  }
                  unint64_t v35 = v20++;
                  char v36 = *(unsigned char *)(v21 + v35);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_66;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_66:
                unint64_t v2 = v35 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_67;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_67:
              *((_DWORD *)this + 8) = v24;
              goto LABEL_73;
            case 2u:
              *((unsigned char *)this + 40) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_46;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_62;
            case 3u:
              *((unsigned char *)this + 40) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_46;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_62;
            case 4u:
              *((unsigned char *)this + 40) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_72;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_71;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *((_DWORD *)this + 9) = v31;
LABEL_73:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *((unsigned char *)this + 40) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_62:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_46:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_73;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_73;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::StrideCalBin::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 4u);
    if ((*(unsigned char *)(v3 + 40) & 4) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(a2, v5, 5u);
}

uint64_t CMMsl::StrideCalBin::hash_value(CMMsl::StrideCalBin *this)
{
  if ((*((unsigned char *)this + 40) & 8) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 40)) {
      goto LABEL_3;
    }
LABEL_14:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_15:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
  uint64_t v1 = *((unsigned int *)this + 8);
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
LABEL_9:
    uint64_t v4 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_10;
    }
LABEL_17:
    double v5 = 0.0;
    return *(void *)&v2 ^ v1 ^ *(void *)&v3 ^ v4 ^ *(void *)&v5;
  }
LABEL_16:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 40) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_10:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3 ^ v4 ^ *(void *)&v5;
}

void CMMsl::StrideCalEntry::~StrideCalEntry(CMMsl::StrideCalEntry *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::StrideCalEntry::StrideCalEntry(uint64_t this, const CMMsl::StrideCalEntry *a2)
{
  *(void *)this = off_1003A9688;
  *(_DWORD *)(this + 92) = 0;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x100) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    __int16 v3 = 256;
    *(_WORD *)(this + 92) = 256;
    *(void *)(this + 72) = v4;
    __int16 v2 = *((_WORD *)a2 + 46);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 92) = v3;
    *(void *)(this + 16) = v5;
    __int16 v2 = *((_WORD *)a2 + 46);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *((void *)a2 + 4);
    v3 |= 8u;
    *(_WORD *)(this + 92) = v3;
    *(void *)(this + 32) = v6;
    __int16 v2 = *((_WORD *)a2 + 46);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 40) = v7;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v8 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 8) = v8;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v9 = *((_DWORD *)a2 + 22);
  v3 |= 0x800u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 88) = v9;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v10 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v10;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v11 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 64) = v11;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v12 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 48) = v12;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 24) = v13;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x40) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0) {
      return this;
    }
LABEL_26:
    int v15 = *((_DWORD *)a2 + 20);
    *(_WORD *)(this + 92) = v3 | 0x200;
    *(_DWORD *)(this + 80) = v15;
    return this;
  }
LABEL_25:
  uint64_t v14 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 56) = v14;
  if ((*((_WORD *)a2 + 46) & 0x200) != 0) {
    goto LABEL_26;
  }
  return this;
}

CMMsl *CMMsl::StrideCalEntry::operator=(CMMsl *a1, const CMMsl::StrideCalEntry *a2)
{
  if (a1 != a2)
  {
    CMMsl::StrideCalEntry::StrideCalEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StrideCalEntry *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StrideCalEntry *a2, CMMsl::StrideCalEntry *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  int v9 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v9;
  int v10 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  uint64_t v12 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  int v15 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v15;
  return result;
}

double CMMsl::StrideCalEntry::StrideCalEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9688;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

CMMsl *CMMsl::StrideCalEntry::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StrideCalEntry::StrideCalEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StrideCalEntry *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::StrideCalEntry::formatText(CMMsl::StrideCalEntry *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 46);
  if (v5)
  {
    PB::TextFormatter::format(a2, "distance", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 46);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "gpsSource", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "kvalue", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "kvalueTrack", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "percentGrade", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "runningFormStrideLength", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "runningFormStrideLengthMetrics", *((_DWORD *)this + 20));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "session", *((_DWORD *)this + 21));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 9));
  if ((*((_WORD *)this + 46) & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "steps", *((_DWORD *)this + 22));
LABEL_14:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StrideCalEntry::readFrom(CMMsl::StrideCalEntry *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 46) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 2u:
              *((_WORD *)this + 46) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 3u:
              *((_WORD *)this + 46) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 4u:
              *((_WORD *)this + 46) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 5u:
              *((_WORD *)this + 46) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 6u:
              *((_WORD *)this + 46) |= 0x800u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_99;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_98:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_99;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_98;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_99;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_99:
              *((_DWORD *)this + 22) = v25;
              goto LABEL_110;
            case 7u:
              *((_WORD *)this + 46) |= 0x400u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_104;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_103:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_104;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_103;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_104;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_104:
              *((_DWORD *)this + 21) = v31;
              goto LABEL_110;
            case 8u:
              *((_WORD *)this + 46) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 9u:
              *((_WORD *)this + 46) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 0xAu:
              *((_WORD *)this + 46) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_94;
            case 0xBu:
              *((_WORD *)this + 46) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
LABEL_94:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_64:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_110;
            case 0xCu:
              *((_WORD *)this + 46) |= 0x200u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_109;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_108:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_108;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_109:
              *((_DWORD *)this + 20) = v37;
LABEL_110:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_110;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::StrideCalEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 92);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 72), 1u);
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 4u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 6u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 7u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 8u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 9u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(double *)(v3 + 56), 0xBu);
    if ((*(_WORD *)(v3 + 92) & 0x200) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x40) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 0x200) == 0) {
    return this;
  }
LABEL_25:
  int v5 = *(_DWORD *)(v3 + 80);

  return PB::Writer::writeVarInt(a2, v5, 0xCu);
}

uint64_t CMMsl::StrideCalEntry::hash_value(CMMsl::StrideCalEntry *this)
{
  __int16 v1 = *((_WORD *)this + 46);
  if ((v1 & 0x100) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_33:
    double v3 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_6;
    }
LABEL_34:
    double v4 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_9;
    }
LABEL_35:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_36:
    double v6 = 0.0;
    if ((*((_WORD *)this + 46) & 0x800) != 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
  double v2 = *((double *)this + 9);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_34;
  }
LABEL_6:
  double v4 = *((double *)this + 4);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_35;
  }
LABEL_9:
  double v5 = *((double *)this + 5);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((_WORD *)this + 46) & 0x800) != 0)
  {
LABEL_15:
    uint64_t v7 = *((int *)this + 22);
    if ((*((_WORD *)this + 46) & 0x400) != 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 46) & 0x400) != 0)
  {
LABEL_16:
    uint64_t v8 = *((int *)this + 21);
    if ((v1 & 0x80) != 0) {
      goto LABEL_17;
    }
LABEL_39:
    double v9 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_20;
    }
LABEL_40:
    double v10 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_23;
    }
LABEL_41:
    double v11 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_26;
    }
    goto LABEL_42;
  }
LABEL_38:
  uint64_t v8 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_39;
  }
LABEL_17:
  double v9 = *((double *)this + 8);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_40;
  }
LABEL_20:
  double v10 = *((double *)this + 6);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_41;
  }
LABEL_23:
  double v11 = *((double *)this + 3);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x40) != 0)
  {
LABEL_26:
    double v12 = *((double *)this + 7);
    if (v12 == 0.0) {
      double v12 = 0.0;
    }
    if ((*((_WORD *)this + 46) & 0x200) != 0) {
      goto LABEL_29;
    }
LABEL_43:
    uint64_t v13 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ v13;
  }
LABEL_42:
  double v12 = 0.0;
  if ((*((_WORD *)this + 46) & 0x200) == 0) {
    goto LABEL_43;
  }
LABEL_29:
  uint64_t v13 = *((int *)this + 20);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ v13;
}

void CMMsl::SubStats::~SubStats(CMMsl::SubStats *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::SubStats::SubStats(CMMsl::SubStats *this, const CMMsl::SubStats *a2)
{
  *(void *)this = off_1003A96C0;
  *((_DWORD *)this + 14) = 0;
  __int16 v2 = *((_WORD *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 28) = 1;
    *((void *)this + 1) = v4;
    __int16 v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((_WORD *)this + 28) = v3;
    *((_DWORD *)this + 8) = v5;
    __int16 v2 = *((_WORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    float result = *((float *)a2 + 5);
    v3 |= 4u;
    *((_WORD *)this + 28) = v3;
    *((float *)this + 5) = result;
    __int16 v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  float result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 6) = result;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  float result = *((float *)a2 + 12);
  v3 |= 0x200u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 12) = result;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  float result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 10) = result;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  char v7 = *((unsigned char *)a2 + 52);
  v3 |= 0x400u;
  *((_WORD *)this + 28) = v3;
  *((unsigned char *)this + 52) = v7;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v8 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 4) = v8;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_24:
    float result = *((float *)a2 + 9);
    *((_WORD *)this + 28) = v3 | 0x40;
    *((float *)this + 9) = result;
    return result;
  }
LABEL_23:
  int v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 11) = v9;
  if ((*((_WORD *)a2 + 28) & 0x40) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::SubStats::operator=(CMMsl *a1, const CMMsl::SubStats *a2)
{
  if (a1 != a2)
  {
    CMMsl::SubStats::SubStats((CMMsl::SubStats *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SubStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SubStats *a2, CMMsl::SubStats *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  int v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  int v8 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  int v9 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v9;
  LOBYTE(v4) = *((unsigned char *)this + 52);
  *((unsigned char *)this + 52) = *((unsigned char *)a2 + 52);
  *((unsigned char *)a2 + 52) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::SubStats::SubStats(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A96C0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

CMMsl *CMMsl::SubStats::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SubStats::SubStats((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SubStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SubStats::formatText(CMMsl::SubStats *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "classifierCall", *((_DWORD *)this + 4));
    __int16 v5 = *((_WORD *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "featureSlope", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "maxAccel", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "maxMinPressure", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "model", *((_DWORD *)this + 8));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "sCal", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "slopeNxCorr", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 11));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "xCorr", *((float *)this + 12));
  if ((*((_WORD *)this + 28) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "zoh", *((unsigned char *)this + 52));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SubStats::readFrom(CMMsl::SubStats *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 28) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_108;
                  }
                  unint64_t v49 = v20++;
                  char v50 = *(unsigned char *)(v21 + v49);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_107;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_107:
                unint64_t v2 = v49 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_108;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_108:
              *((void *)this + 1) = v24;
              goto LABEL_124;
            case 2u:
              *((_WORD *)this + 28) |= 0x20u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_113;
                  }
                  unint64_t v53 = v27++;
                  char v54 = *(unsigned char *)(v28 + v53);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_112:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_112;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_113;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_113:
              *((_DWORD *)this + 8) = v31;
              goto LABEL_124;
            case 3u:
              *((_WORD *)this + 28) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_71;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 4u:
              *((_WORD *)this + 28) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_71;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 5u:
              *((_WORD *)this + 28) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_71;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 6u:
              *((_WORD *)this + 28) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_71;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 7u:
              *((_WORD *)this + 28) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_71;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 8u:
              *((_WORD *)this + 28) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 52) = v34;
              goto LABEL_124;
            case 9u:
              *((_WORD *)this + 28) |= 2u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_118;
                  }
                  unint64_t v57 = v35++;
                  char v58 = *(unsigned char *)(v36 + v57);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_117:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_117;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_118;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_118:
              *((_DWORD *)this + 4) = v39;
              goto LABEL_124;
            case 0xAu:
              *((_WORD *)this + 28) |= 0x100u;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_123;
                  }
                  unint64_t v61 = v41++;
                  char v62 = *(unsigned char *)(v42 + v61);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_122:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_123;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_122;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_123;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_123:
              *((_DWORD *)this + 11) = v45;
LABEL_124:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *((_WORD *)this + 28) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_103:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_71:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_124;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_124;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::SubStats::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 56);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 2u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 6u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 7u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 52), 8u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 0xAu);
    if ((*(_WORD *)(v3 + 56) & 0x40) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 9u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_23:
  float v5 = *(float *)(v3 + 36);

  return PB::Writer::write(a2, v5, 0xBu);
}

uint64_t CMMsl::SubStats::hash_value(CMMsl::SubStats *this)
{
  __int16 v1 = *((_WORD *)this + 28);
  if (v1)
  {
    uint64_t v2 = *((void *)this + 1);
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 8);
      if ((v1 & 4) != 0) {
        goto LABEL_4;
      }
LABEL_27:
      uint64_t v5 = 0;
      if ((v1 & 0x10) != 0) {
        goto LABEL_7;
      }
LABEL_28:
      uint64_t v7 = 0;
      if ((v1 & 8) != 0) {
        goto LABEL_10;
      }
LABEL_29:
      uint64_t v9 = 0;
      if ((*((_WORD *)this + 28) & 0x200) != 0) {
        goto LABEL_13;
      }
LABEL_30:
      uint64_t v11 = 0;
      if ((v1 & 0x80) != 0) {
        goto LABEL_16;
      }
LABEL_31:
      uint64_t v13 = 0;
      if ((*((_WORD *)this + 28) & 0x400) != 0) {
        goto LABEL_19;
      }
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_27;
  }
LABEL_4:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_28;
  }
LABEL_7:
  float v6 = *((float *)this + 7);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_29;
  }
LABEL_10:
  float v8 = *((float *)this + 6);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((_WORD *)this + 28) & 0x200) == 0) {
    goto LABEL_30;
  }
LABEL_13:
  float v10 = *((float *)this + 12);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_16:
  float v12 = *((float *)this + 10);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((*((_WORD *)this + 28) & 0x400) != 0)
  {
LABEL_19:
    uint64_t v14 = *((unsigned __int8 *)this + 52);
    if ((v1 & 2) != 0) {
      goto LABEL_20;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v14 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_20:
    uint64_t v15 = *((int *)this + 4);
    if ((*((_WORD *)this + 28) & 0x100) != 0) {
      goto LABEL_21;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v15 = 0;
  if ((*((_WORD *)this + 28) & 0x100) != 0)
  {
LABEL_21:
    uint64_t v16 = *((unsigned int *)this + 11);
    if ((v1 & 0x40) != 0) {
      goto LABEL_22;
    }
LABEL_35:
    uint64_t v18 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
  }
LABEL_34:
  uint64_t v16 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_35;
  }
LABEL_22:
  float v17 = *((float *)this + 9);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
}

void CMMsl::SwingDoTCandidate::~SwingDoTCandidate(CMMsl::SwingDoTCandidate *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::SwingDoTCandidate::SwingDoTCandidate(CMMsl::SwingDoTCandidate *this, const CMMsl::SwingDoTCandidate *a2)
{
  *(void *)this = off_1003A96F8;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 8) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 7);
    char v3 = 8;
    *((unsigned char *)this + 32) = 8;
    *((_DWORD *)this + 7) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((unsigned char *)this + 32) = v3;
  *((double *)this + 1) = result;
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::SwingDoTCandidate::operator=(uint64_t a1, const CMMsl::SwingDoTCandidate *a2)
{
  if ((const CMMsl::SwingDoTCandidate *)a1 != a2)
  {
    CMMsl::SwingDoTCandidate::SwingDoTCandidate((CMMsl::SwingDoTCandidate *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SwingDoTCandidate *a2, CMMsl::SwingDoTCandidate *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::SwingDoTCandidate::SwingDoTCandidate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A96F8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A96F8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::SwingDoTCandidate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A96F8;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SwingDoTCandidate::formatText(CMMsl::SwingDoTCandidate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dirAngleRad", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "extremaVal", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "peakTimestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "valleyTimestamp", *((double *)this + 2));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SwingDoTCandidate::readFrom(CMMsl::SwingDoTCandidate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 32) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_30;
        case 2u:
          *((unsigned char *)this + 32) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_30:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          goto LABEL_39;
        case 3u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_38;
        case 4u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_38:
            unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_39:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SwingDoTCandidate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if (v4) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::SwingDoTCandidate::hash_value(CMMsl::SwingDoTCandidate *this)
{
  if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if (*((unsigned char *)this + 32)) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  float v6 = *((float *)this + 7);
  uint64_t v1 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if (*((unsigned char *)this + 32))
  {
LABEL_6:
    double v4 = *((double *)this + 1);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v5 = 0.0;
    return v3 ^ v1 ^ *(void *)&v4 ^ *(void *)&v5;
  }
LABEL_16:
  double v4 = 0.0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v5 = *((double *)this + 2);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  return v3 ^ v1 ^ *(void *)&v4 ^ *(void *)&v5;
}

void CMMsl::TapAccept::~TapAccept(CMMsl::TapAccept *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::TapAccept::TapAccept(uint64_t this, const CMMsl::TapAccept *a2)
{
  *(void *)this = off_1003A9730;
  *(_DWORD *)(this + 36) = -1;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 44) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(unsigned char *)(this + 44) = v3;
    *(_DWORD *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *(unsigned char *)(this + 44) = v3;
    *(_DWORD *)(this + 36) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 32) = v7;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v8 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 28) = v8;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return this;
    }
LABEL_16:
    int v10 = *((_DWORD *)a2 + 10);
    *(unsigned char *)(this + 44) = v3 | 0x40;
    *(_DWORD *)(this + 40) = v10;
    return this;
  }
LABEL_15:
  uint64_t v9 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 44) = v3;
  *(void *)(this + 8) = v9;
  if ((*((unsigned char *)a2 + 44) & 0x40) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::TapAccept::operator=(uint64_t a1, const CMMsl::TapAccept *a2)
{
  if ((const CMMsl::TapAccept *)a1 != a2)
  {
    CMMsl::TapAccept::TapAccept((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    int v13 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v4;
    uint64_t v5 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v11;
    uint64_t v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v6;
    *(void *)&long long v6 = *(void *)(a1 + 36);
    *(void *)(a1 + 36) = v12;
    uint64_t v12 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TapAccept *a2, CMMsl::TapAccept *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  double result = *(double *)((char *)a2 + 36);
  uint64_t v8 = *(void *)((char *)this + 36);
  *(double *)((char *)this + 36) = result;
  *(void *)((char *)a2 + 36) = v8;
  return result;
}

double CMMsl::TapAccept::TapAccept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9730;
  *(_DWORD *)(a1 + 36) = -1;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 36);
  *(double *)(a1 + 36) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9730;
  *(_DWORD *)(a1 + 36) = -1;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 36);
  *(double *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::TapAccept::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = off_1003A9730;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    int v14 = *(_DWORD *)(a1 + 44);
    int v11 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = *(void *)(a2 + 28);
    uint64_t v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v10 = v6;
    *(void *)&long long v6 = *(void *)(a1 + 36);
    uint64_t v7 = *(void *)(a2 + 36);
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 44) = v3;
    *(void *)(a1 + 36) = v7;
    uint64_t v13 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::TapAccept::formatText(CMMsl::TapAccept *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 6));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 44) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "peakHalfWidth", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "peakMagnitude", *((float *)this + 8));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "peakTime", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "tapAcceptStatus", *((_DWORD *)this + 9));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "tapCounter", *((_DWORD *)this + 10));
  if ((*((unsigned char *)this + 44) & 2) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::TapAccept::readFrom(CMMsl::TapAccept *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 44) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_50;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_80;
            case 2u:
              *((unsigned char *)this + 44) |= 4u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_86;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_85:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_85;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_86:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_97;
            case 3u:
              *((unsigned char *)this + 44) |= 0x20u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_91;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_90:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_90;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_91:
              *((_DWORD *)this + 9) = v31;
              goto LABEL_97;
            case 4u:
              *((unsigned char *)this + 44) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_50;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_47;
            case 5u:
              *((unsigned char *)this + 44) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_50;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_47:
              unint64_t v2 = *((void *)a2 + 1) + 4;
              goto LABEL_81;
            case 6u:
              *((unsigned char *)this + 44) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_80:
                unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_81:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_50:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_97;
            case 7u:
              *((unsigned char *)this + 44) |= 0x40u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_96;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_95:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_95;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_96;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_96:
              *((_DWORD *)this + 10) = v37;
LABEL_97:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_97;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::TapAccept::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 4u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 6u);
    if ((*(unsigned char *)(v3 + 44) & 0x40) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 5u);
  char v4 = *(unsigned char *)(v3 + 44);
  if (v4) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_15:
  unsigned int v5 = *(_DWORD *)(v3 + 40);

  return PB::Writer::writeVarInt(a2, v5, 7u);
}

uint64_t CMMsl::TapAccept::hash_value(CMMsl::TapAccept *this)
{
  if ((*((unsigned char *)this + 44) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 6);
      if ((*((unsigned char *)this + 44) & 0x20) != 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 44) & 0x20) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 9);
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_5;
    }
LABEL_20:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_8;
    }
LABEL_21:
    uint64_t v7 = 0;
    if (*((unsigned char *)this + 44)) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_20;
  }
LABEL_5:
  float v4 = *((float *)this + 8);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 44) & 8) == 0) {
    goto LABEL_21;
  }
LABEL_8:
  float v6 = *((float *)this + 7);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if (*((unsigned char *)this + 44))
  {
LABEL_11:
    double v8 = *((double *)this + 1);
    if (v8 == 0.0) {
      double v8 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 0x40) != 0) {
      goto LABEL_14;
    }
LABEL_23:
    uint64_t v9 = 0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v5 ^ v7 ^ *(void *)&v8 ^ v9;
  }
LABEL_22:
  double v8 = 0.0;
  if ((*((unsigned char *)this + 44) & 0x40) == 0) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v9 = *((unsigned int *)this + 10);
  return v2 ^ *(void *)&v1 ^ v3 ^ v5 ^ v7 ^ *(void *)&v8 ^ v9;
}

void CMMsl::TapDetect::~TapDetect(CMMsl::TapDetect *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::TapDetect::TapDetect(CMMsl::TapDetect *this, const CMMsl::TapDetect *a2)
{
  *(void *)this = off_1003A9768;
  *((_DWORD *)this + 7) = -2;
  double result = NAN;
  *(_OWORD *)((char *)this + 52) = xmmword_10033A600;
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    __int16 v4 = 2;
    *((_WORD *)this + 32) = 2;
    *((double *)this + 2) = result;
    __int16 v3 = *((_WORD *)a2 + 32);
    if ((v3 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v4 = 0;
  if ((v3 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 9);
    v4 |= 0x20u;
    *((_WORD *)this + 32) = v4;
    *((_DWORD *)this + 9) = v5;
    __int16 v3 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v3 & 0x400) != 0)
  {
    int v6 = *((_DWORD *)a2 + 14);
    v4 |= 0x400u;
    *((_WORD *)this + 32) = v4;
    *((_DWORD *)this + 14) = v6;
    __int16 v3 = *((_WORD *)a2 + 32);
    if ((v3 & 4) == 0)
    {
LABEL_8:
      if ((v3 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 6);
  v4 |= 4u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 6) = v7;
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x10) == 0)
  {
LABEL_9:
    if ((v3 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v8 = *((_DWORD *)a2 + 8);
  v4 |= 0x10u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 8) = v8;
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x200) == 0)
  {
LABEL_10:
    if ((v3 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v9 = *((_DWORD *)a2 + 13);
  v4 |= 0x200u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 13) = v9;
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x800) == 0)
  {
LABEL_11:
    if ((v3 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v10 = *((_DWORD *)a2 + 15);
  v4 |= 0x800u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 15) = v10;
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 8) == 0)
  {
LABEL_12:
    if ((v3 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v11 = *((_DWORD *)a2 + 7);
  v4 |= 8u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 7) = v11;
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x100) == 0)
  {
LABEL_13:
    if ((v3 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v4 |= 0x100u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 12) = LODWORD(result);
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x80) == 0)
  {
LABEL_14:
    if ((v3 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v4 |= 0x80u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 11) = LODWORD(result);
  __int16 v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x40) == 0)
  {
LABEL_15:
    if ((v3 & 1) == 0) {
      return result;
    }
LABEL_26:
    double result = *((double *)a2 + 1);
    *((_WORD *)this + 32) = v4 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_25:
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v4 |= 0x40u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 10) = LODWORD(result);
  if (*((_WORD *)a2 + 32)) {
    goto LABEL_26;
  }
  return result;
}

CMMsl *CMMsl::TapDetect::operator=(CMMsl *a1, const CMMsl::TapDetect *a2)
{
  if (a1 != a2)
  {
    CMMsl::TapDetect::TapDetect((CMMsl::TapDetect *)v5, a2);
    CMMsl::swap(a1, (CMMsl::TapDetect *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TapDetect *a2, CMMsl::TapDetect *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  uint64_t v6 = *(void *)((char *)this + 52);
  *(void *)((char *)this + 52) = *(void *)((char *)a2 + 52);
  *(void *)((char *)a2 + 52) = v6;
  int v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  int v9 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v9;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::TapDetect::TapDetect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9768;
  *(_DWORD *)(a1 + 28) = -2;
  *(void *)(a1 + 52) = 0x100000001;
  *(_DWORD *)(a1 + 60) = -2;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 52) = *(void *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::TapDetect::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::TapDetect::TapDetect((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::TapDetect *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::TapDetect::formatText(CMMsl::TapDetect *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "axis", *((_DWORD *)this + 6));
    __int16 v5 = *((_WORD *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "clippedPeakType", *((_DWORD *)this + 7));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "direction", *((_DWORD *)this + 8));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 9));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "peakHalfWidth", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "peakMagnitude", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "peakTime", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "peakValue", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "strideDirection", *((_DWORD *)this + 13));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "tapDetectStatus", *((_DWORD *)this + 14));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  if ((*((_WORD *)this + 32) & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "widthCalculationMethod", *((_DWORD *)this + 15));
LABEL_14:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::TapDetect::readFrom(CMMsl::TapDetect *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 32) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_88;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_139;
            case 2u:
              *((_WORD *)this + 32) |= 0x20u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_145;
                  }
                  unint64_t v65 = v21++;
                  char v66 = *(unsigned char *)(v22 + v65);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_144:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_144;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_145:
              *((_DWORD *)this + 9) = v25;
              goto LABEL_176;
            case 3u:
              *((_WORD *)this + 32) |= 0x400u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_150;
                  }
                  unint64_t v69 = v27++;
                  char v70 = *(unsigned char *)(v28 + v69);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_149:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_149;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_150:
              *((_DWORD *)this + 14) = v31;
              goto LABEL_176;
            case 4u:
              *((_WORD *)this + 32) |= 4u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_155;
                  }
                  unint64_t v73 = v33++;
                  char v74 = *(unsigned char *)(v34 + v73);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_154:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_154;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_155;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_155:
              *((_DWORD *)this + 6) = v37;
              goto LABEL_176;
            case 5u:
              *((_WORD *)this + 32) |= 0x10u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_160;
                  }
                  unint64_t v77 = v39++;
                  char v78 = *(unsigned char *)(v40 + v77);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_159:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_160;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_159;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_160;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_160:
              *((_DWORD *)this + 8) = v43;
              goto LABEL_176;
            case 6u:
              *((_WORD *)this + 32) |= 0x200u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_165;
                  }
                  unint64_t v81 = v45++;
                  char v82 = *(unsigned char *)(v46 + v81);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_164:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_165;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_164;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_165;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_165:
              *((_DWORD *)this + 13) = v49;
              goto LABEL_176;
            case 7u:
              *((_WORD *)this + 32) |= 0x800u;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_170;
                  }
                  unint64_t v85 = v51++;
                  char v86 = *(unsigned char *)(v52 + v85);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_169:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_170;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_169;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_170;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_170:
              *((_DWORD *)this + 15) = v55;
              goto LABEL_176;
            case 8u:
              *((_WORD *)this + 32) |= 8u;
              unint64_t v57 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v58 = *(void *)a2;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                char v87 = 0;
                unsigned int v88 = 0;
                uint64_t v61 = 0;
                if (v2 <= v57) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_175;
                  }
                  unint64_t v89 = v57++;
                  char v90 = *(unsigned char *)(v58 + v89);
                  *((void *)a2 + 1) = v57;
                  v61 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  BOOL v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_174:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_175;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v61) = 0;
                }
                goto LABEL_174;
              }
              char v59 = 0;
              unsigned int v60 = 0;
              uint64_t v61 = 0;
              do
              {
                unint64_t v2 = v57 + 1;
                *((void *)a2 + 1) = v57 + 1;
                char v62 = *(unsigned char *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_175;
                }
                v59 += 7;
                unint64_t v57 = v2;
                BOOL v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_175:
              *((_DWORD *)this + 7) = v61;
LABEL_176:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *((_WORD *)this + 32) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_88;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_85;
            case 0xAu:
              *((_WORD *)this + 32) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_88;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_85;
            case 0xBu:
              *((_WORD *)this + 32) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_88;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_85:
              unint64_t v2 = *((void *)a2 + 1) + 4;
              goto LABEL_140;
            case 0xCu:
              *((_WORD *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_139:
                unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_140:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_88:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_176;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_176;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::TapDetect::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 64);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 2u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 3u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 4u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 5u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 6u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 7u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 8u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 9u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xBu);
    if ((*(_WORD *)(v3 + 64) & 1) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_25:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 0xCu);
}

uint64_t CMMsl::TapDetect::hash_value(CMMsl::TapDetect *this)
{
  __int16 v1 = *((_WORD *)this + 32);
  if ((v1 & 2) != 0)
  {
    double v2 = *((double *)this + 2);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 9);
      if ((*((_WORD *)this + 32) & 0x400) != 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((_WORD *)this + 32) & 0x400) != 0)
  {
LABEL_4:
    uint64_t v4 = *((int *)this + 14);
    if ((v1 & 4) != 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v4 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((int *)this + 6);
    if ((v1 & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v5 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_6:
    uint64_t v6 = *((int *)this + 8);
    if ((*((_WORD *)this + 32) & 0x200) != 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v6 = 0;
  if ((*((_WORD *)this + 32) & 0x200) != 0)
  {
LABEL_7:
    uint64_t v7 = *((int *)this + 13);
    if ((*((_WORD *)this + 32) & 0x800) != 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 32) & 0x800) != 0)
  {
LABEL_8:
    uint64_t v8 = *((int *)this + 15);
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v8 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_9:
    uint64_t v9 = *((int *)this + 7);
    if ((*((_WORD *)this + 32) & 0x100) != 0) {
      goto LABEL_10;
    }
LABEL_32:
    uint64_t v11 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_13;
    }
LABEL_33:
    uint64_t v13 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v9 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0) {
    goto LABEL_32;
  }
LABEL_10:
  float v10 = *((float *)this + 12);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_33;
  }
LABEL_13:
  float v12 = *((float *)this + 11);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v1 & 0x40) != 0)
  {
LABEL_16:
    float v14 = *((float *)this + 10);
    uint64_t v15 = LODWORD(v14);
    if (v14 == 0.0) {
      uint64_t v15 = 0;
    }
    if (v1) {
      goto LABEL_19;
    }
LABEL_35:
    double v16 = 0.0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15 ^ *(void *)&v16;
  }
LABEL_34:
  uint64_t v15 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_19:
  double v16 = *((double *)this + 1);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15 ^ *(void *)&v16;
}

void CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion(CMMsl::TempestPoCAuxiliaryDeviceMotion *this)
{
  *(void *)this = off_1003A97A0;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion(this);

  operator delete();
}

CMMsl::TempestPoCAuxiliaryDeviceMotion *CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion(CMMsl::TempestPoCAuxiliaryDeviceMotion *this, const CMMsl::TempestPoCAuxiliaryDeviceMotion *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = off_1003A97A0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 26) = 0;
  if (*((void *)a2 + 10)) {
    operator new();
  }
  if (this != a2) {
    sub_100024308((char *)this + 8, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x80) != 0)
  {
    int v7 = *((_DWORD *)a2 + 23);
    *((_WORD *)this + 52) |= 0x80u;
    *((_DWORD *)this + 23) = v7;
    __int16 v4 = *((_WORD *)a2 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_7:
      if ((v4 & 0x100) == 0) {
        goto LABEL_8;
      }
      goto LABEL_19;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  int v8 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 52) |= 0x40u;
  *((_DWORD *)this + 22) = v8;
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v9 = *((_DWORD *)a2 + 24);
  *((_WORD *)this + 52) |= 0x100u;
  *((_DWORD *)this + 24) = v9;
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v10 = *((_DWORD *)a2 + 25);
  *((_WORD *)this + 52) |= 0x200u;
  *((_DWORD *)this + 25) = v10;
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v11 = *((void *)a2 + 5);
  *((_WORD *)this + 52) |= 2u;
  *((void *)this + 5) = v11;
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v12 = *((void *)a2 + 6);
  *((_WORD *)this + 52) |= 4u;
  *((void *)this + 6) = v12;
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v13 = *((void *)a2 + 8);
  *((_WORD *)this + 52) |= 0x10u;
  *((void *)this + 8) = v13;
  __int16 v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_25:
    uint64_t v15 = *((void *)a2 + 4);
    *((_WORD *)this + 52) |= 1u;
    *((void *)this + 4) = v15;
    if ((*((_WORD *)a2 + 52) & 8) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_24:
  uint64_t v14 = *((void *)a2 + 9);
  *((_WORD *)this + 52) |= 0x20u;
  *((void *)this + 9) = v14;
  __int16 v4 = *((_WORD *)a2 + 52);
  if (v4) {
    goto LABEL_25;
  }
LABEL_14:
  if ((v4 & 8) != 0)
  {
LABEL_15:
    uint64_t v5 = *((void *)a2 + 7);
    *((_WORD *)this + 52) |= 8u;
    *((void *)this + 7) = v5;
  }
  return this;
}

CMMsl *CMMsl::TempestPoCAuxiliaryDeviceMotion::operator=(CMMsl *a1, const CMMsl::TempestPoCAuxiliaryDeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion((CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5, v3);
    CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion((CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TempestPoCAuxiliaryDeviceMotion *a2, CMMsl::TempestPoCAuxiliaryDeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  int v8 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  LODWORD(v7) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v7;
  LODWORD(v7) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  int v9 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A97A0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v6 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100274A30(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

CMMsl *CMMsl::TempestPoCAuxiliaryDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5, v3);
    CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion((CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::formatText(CMMsl::TempestPoCAuxiliaryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_WORD *)this + 52)) {
    PB::TextFormatter::format(a2, "auxiliaryIosTimeUncertainty", *((double *)this + 4));
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "filteredAcceleration", v7);
  }
  __int16 v8 = *((_WORD *)this + 52);
  if ((v8 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "quiescentMode", *((_DWORD *)this + 22));
    __int16 v8 = *((_WORD *)this + 52);
    if ((v8 & 0x80) == 0)
    {
LABEL_7:
      if ((v8 & 2) == 0) {
        goto LABEL_8;
      }
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "quiescentNoise", *((float *)this + 23));
  __int16 v8 = *((_WORD *)this + 52);
  if ((v8 & 2) == 0)
  {
LABEL_8:
    if ((v8 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "sensorTimeBeforeAlignment", *((double *)this + 5));
  __int16 v8 = *((_WORD *)this + 52);
  if ((v8 & 4) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "sentCftime", *((double *)this + 6));
  __int16 v8 = *((_WORD *)this + 52);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 24));
  __int16 v8 = *((_WORD *)this + 52);
  if ((v8 & 8) == 0)
  {
LABEL_11:
    if ((v8 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "sourceIosTimeUncertainty", *((double *)this + 7));
  __int16 v8 = *((_WORD *)this + 52);
  if ((v8 & 0x10) == 0)
  {
LABEL_12:
    if ((v8 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "sourceReceiveCftime", *((double *)this + 8));
  if ((*((_WORD *)this + 52) & 0x20) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "sourceReceiveSensorTimestamp", *((double *)this + 9));
LABEL_14:
  uint64_t v9 = *((void *)this + 10);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "super");
  }
  if ((*((_WORD *)this + 52) & 0x200) != 0) {
    PB::TextFormatter::format(a2, "version", *((float *)this + 25));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::TempestPoCAuxiliaryDeviceMotion::readFrom(CMMsl::TempestPoCAuxiliaryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    __int16 v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v23 = *((void *)a2 + 1);
            unint64_t v24 = *((void *)a2 + 2);
            while (v23 < v24 && !*((unsigned char *)a2 + 24))
            {
              char v26 = (char *)*((void *)this + 2);
              unint64_t v25 = *((void *)this + 3);
              if ((unint64_t)v26 >= v25)
              {
                uint64_t v28 = (char *)*v8;
                uint64_t v29 = (v26 - (unsigned char *)*v8) >> 2;
                unint64_t v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 62) {
                  goto LABEL_145;
                }
                uint64_t v31 = v25 - (void)v28;
                if (v31 >> 1 > v30) {
                  unint64_t v30 = v31 >> 1;
                }
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v32 = v30;
                }
                if (v32)
                {
                  unint64_t v33 = (char *)sub_100024458((uint64_t)v9, v32);
                  uint64_t v28 = (char *)*((void *)this + 1);
                  char v26 = (char *)*((void *)this + 2);
                }
                else
                {
                  unint64_t v33 = 0;
                }
                uint64_t v34 = &v33[4 * v29];
                *(_DWORD *)uint64_t v34 = 0;
                unint64_t v27 = v34 + 4;
                while (v26 != v28)
                {
                  int v35 = *((_DWORD *)v26 - 1);
                  v26 -= 4;
                  *((_DWORD *)v34 - 1) = v35;
                  v34 -= 4;
                }
                *((void *)this + 1) = v34;
                *((void *)this + 2) = v27;
                *((void *)this + 3) = &v33[4 * v32];
                if (v28) {
                  operator delete(v28);
                }
              }
              else
              {
                *(_DWORD *)char v26 = 0;
                unint64_t v27 = v26 + 4;
              }
              *((void *)this + 2) = v27;
              unint64_t v36 = *((void *)a2 + 1);
              if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v27 - 1) = *(_DWORD *)(*(void *)a2 + v36);
              unint64_t v24 = *((void *)a2 + 2);
              unint64_t v23 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v23;
            }
            PB::Reader::recallMark();
          }
          else
          {
            char v63 = (char *)*((void *)this + 2);
            unint64_t v62 = *((void *)this + 3);
            if ((unint64_t)v63 >= v62)
            {
              unint64_t v73 = (char *)*v8;
              uint64_t v74 = (v63 - (unsigned char *)*v8) >> 2;
              unint64_t v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 62) {
LABEL_145:
              }
                sub_10000EE98();
              uint64_t v76 = v62 - (void)v73;
              if (v76 >> 1 > v75) {
                unint64_t v75 = v76 >> 1;
              }
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v77 = v75;
              }
              if (v77)
              {
                char v78 = (char *)sub_100024458((uint64_t)v9, v77);
                unint64_t v73 = (char *)*((void *)this + 1);
                char v63 = (char *)*((void *)this + 2);
              }
              else
              {
                char v78 = 0;
              }
              char v79 = &v78[4 * v74];
              *(_DWORD *)char v79 = 0;
              unsigned int v64 = v79 + 4;
              while (v63 != v73)
              {
                int v80 = *((_DWORD *)v63 - 1);
                v63 -= 4;
                *((_DWORD *)v79 - 1) = v80;
                v79 -= 4;
              }
              *((void *)this + 1) = v79;
              *((void *)this + 2) = v64;
              *((void *)this + 3) = &v78[4 * v77];
              if (v73) {
                operator delete(v73);
              }
            }
            else
            {
              *(_DWORD *)char v63 = 0;
              unsigned int v64 = v63 + 4;
            }
            *((void *)this + 2) = v64;
            unint64_t v81 = *((void *)a2 + 1);
            if (v81 <= 0xFFFFFFFFFFFFFFFBLL && v81 + 4 <= *((void *)a2 + 2))
            {
              *(v64 - 1) = *(_DWORD *)(*(void *)a2 + v81);
LABEL_133:
              uint64_t v61 = *((void *)a2 + 1) + 4;
LABEL_134:
              *((void *)a2 + 1) = v61;
            }
            else
            {
LABEL_131:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_135:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 3u:
          *((_WORD *)this + 52) |= 0x80u;
          unint64_t v37 = *((void *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v37);
          goto LABEL_133;
        case 4u:
          *((_WORD *)this + 52) |= 0x40u;
          unint64_t v38 = *((void *)a2 + 1);
          unint64_t v39 = *((void *)a2 + 2);
          uint64_t v40 = *(void *)a2;
          if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
          {
            char v41 = 0;
            unsigned int v42 = 0;
            uint64_t v43 = 0;
            do
            {
              unint64_t v44 = v38 + 1;
              *((void *)a2 + 1) = v38 + 1;
              char v45 = *(unsigned char *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0) {
                goto LABEL_118;
              }
              v41 += 7;
              unint64_t v38 = v44;
              BOOL v16 = v42++ > 8;
            }
            while (!v16);
LABEL_98:
            LODWORD(v43) = 0;
            goto LABEL_118;
          }
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v43 = 0;
          if (v39 <= v38) {
            unint64_t v39 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v39 == v38)
            {
              LODWORD(v43) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v67 = v38 + 1;
              char v68 = *(unsigned char *)(v40 + v38);
              *((void *)a2 + 1) = v67;
              v43 |= (unint64_t)(v68 & 0x7F) << v65;
              if (v68 < 0)
              {
                v65 += 7;
                unint64_t v38 = v67;
                BOOL v16 = v66++ > 8;
                if (v16) {
                  goto LABEL_98;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v43) = 0;
              }
            }
            break;
          }
LABEL_118:
          *((_DWORD *)this + 22) = v43;
          goto LABEL_135;
        case 5u:
          *((_WORD *)this + 52) |= 0x100u;
          unint64_t v46 = *((void *)a2 + 1);
          unint64_t v47 = *((void *)a2 + 2);
          uint64_t v48 = *(void *)a2;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            char v49 = 0;
            unsigned int v50 = 0;
            uint64_t v51 = 0;
            do
            {
              unint64_t v52 = v46 + 1;
              *((void *)a2 + 1) = v46 + 1;
              char v53 = *(unsigned char *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0) {
                goto LABEL_121;
              }
              v49 += 7;
              unint64_t v46 = v52;
              BOOL v16 = v50++ > 8;
            }
            while (!v16);
LABEL_105:
            LODWORD(v51) = 0;
            goto LABEL_121;
          }
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v51 = 0;
          if (v47 <= v46) {
            unint64_t v47 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v47 == v46)
            {
              LODWORD(v51) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v71 = v46 + 1;
              char v72 = *(unsigned char *)(v48 + v46);
              *((void *)a2 + 1) = v71;
              v51 |= (unint64_t)(v72 & 0x7F) << v69;
              if (v72 < 0)
              {
                v69 += 7;
                unint64_t v46 = v71;
                BOOL v16 = v70++ > 8;
                if (v16) {
                  goto LABEL_105;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v51) = 0;
              }
            }
            break;
          }
LABEL_121:
          *((_DWORD *)this + 24) = v51;
          goto LABEL_135;
        case 6u:
          *((_WORD *)this + 52) |= 0x200u;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v54);
          goto LABEL_133;
        case 7u:
          *((_WORD *)this + 52) |= 2u;
          unint64_t v55 = *((void *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v55);
          goto LABEL_89;
        case 8u:
          *((_WORD *)this + 52) |= 4u;
          unint64_t v56 = *((void *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFF7 || v56 + 8 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v56);
          goto LABEL_89;
        case 9u:
          *((_WORD *)this + 52) |= 0x10u;
          unint64_t v57 = *((void *)a2 + 1);
          if (v57 > 0xFFFFFFFFFFFFFFF7 || v57 + 8 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v57);
          goto LABEL_89;
        case 0xAu:
          *((_WORD *)this + 52) |= 0x20u;
          unint64_t v58 = *((void *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v58);
          goto LABEL_89;
        case 0xBu:
          *((_WORD *)this + 52) |= 1u;
          unint64_t v59 = *((void *)a2 + 1);
          if (v59 > 0xFFFFFFFFFFFFFFF7 || v59 + 8 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v59);
          goto LABEL_89;
        case 0xCu:
          *((_WORD *)this + 52) |= 8u;
          unint64_t v60 = *((void *)a2 + 1);
          if (v60 > 0xFFFFFFFFFFFFFFF7 || v60 + 8 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v60);
LABEL_89:
          uint64_t v61 = *((void *)a2 + 1) + 8;
          goto LABEL_134;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_135;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 80);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  uint64_t v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 2u);
  }
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 92), 3u);
    __int16 v8 = *(_WORD *)(v3 + 104);
    if ((v8 & 0x40) == 0)
    {
LABEL_8:
      if ((v8 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 4u);
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_9:
    if ((v8 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 5u);
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x200) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 6u);
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 7u);
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 8u);
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 9u);
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x20) == 0)
  {
LABEL_14:
    if ((v8 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_25:
    this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xBu);
    if ((*(_WORD *)(v3 + 104) & 8) == 0) {
      return this;
    }
    goto LABEL_26;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0xAu);
  __int16 v8 = *(_WORD *)(v3 + 104);
  if (v8) {
    goto LABEL_25;
  }
LABEL_15:
  if ((v8 & 8) == 0) {
    return this;
  }
LABEL_26:
  double v9 = *(double *)(v3 + 56);

  return PB::Writer::write(a2, v9, 0xCu);
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::hash_value(CMMsl::TempestPoCAuxiliaryDeviceMotion *this)
{
  unint64_t v2 = (CMMsl::AuxiliaryDeviceMotion *)*((void *)this + 10);
  if (v2) {
    uint64_t v3 = CMMsl::AuxiliaryDeviceMotion::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = PBHashBytes();
  __int16 v5 = *((_WORD *)this + 52);
  if ((v5 & 0x80) != 0)
  {
    float v17 = *((float *)this + 23);
    uint64_t v6 = LODWORD(v17);
    if (v17 == 0.0) {
      uint64_t v6 = 0;
    }
    if ((v5 & 0x40) != 0)
    {
LABEL_6:
      uint64_t v7 = *((unsigned int *)this + 22);
      if ((*((_WORD *)this + 52) & 0x100) != 0) {
        goto LABEL_7;
      }
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if ((v5 & 0x40) != 0) {
      goto LABEL_6;
    }
  }
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 52) & 0x100) != 0)
  {
LABEL_7:
    uint64_t v8 = *((unsigned int *)this + 24);
    if ((*((_WORD *)this + 52) & 0x200) != 0) {
      goto LABEL_8;
    }
LABEL_34:
    uint64_t v10 = 0;
    if ((v5 & 2) != 0) {
      goto LABEL_11;
    }
LABEL_35:
    double v11 = 0.0;
    if ((v5 & 4) != 0) {
      goto LABEL_14;
    }
LABEL_36:
    double v12 = 0.0;
    if ((v5 & 0x10) != 0) {
      goto LABEL_17;
    }
LABEL_37:
    double v13 = 0.0;
    if ((v5 & 0x20) != 0) {
      goto LABEL_20;
    }
LABEL_38:
    double v14 = 0.0;
    if (v5) {
      goto LABEL_23;
    }
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v8 = 0;
  if ((*((_WORD *)this + 52) & 0x200) == 0) {
    goto LABEL_34;
  }
LABEL_8:
  float v9 = *((float *)this + 25);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v5 & 2) == 0) {
    goto LABEL_35;
  }
LABEL_11:
  double v11 = *((double *)this + 5);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v5 & 4) == 0) {
    goto LABEL_36;
  }
LABEL_14:
  double v12 = *((double *)this + 6);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v5 & 0x10) == 0) {
    goto LABEL_37;
  }
LABEL_17:
  double v13 = *((double *)this + 8);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v5 & 0x20) == 0) {
    goto LABEL_38;
  }
LABEL_20:
  double v14 = *((double *)this + 9);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if (v5)
  {
LABEL_23:
    double v15 = *((double *)this + 4);
    if (v15 == 0.0) {
      double v15 = 0.0;
    }
    if ((v5 & 8) != 0) {
      goto LABEL_26;
    }
LABEL_40:
    double v16 = 0.0;
    return v4 ^ v3 ^ v6 ^ v7 ^ v8 ^ v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16;
  }
LABEL_39:
  double v15 = 0.0;
  if ((v5 & 8) == 0) {
    goto LABEL_40;
  }
LABEL_26:
  double v16 = *((double *)this + 7);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  return v4 ^ v3 ^ v6 ^ v7 ^ v8 ^ v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 80)) {
    operator new();
  }
  return this;
}

void CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation(CMMsl::TempestPoCListenerOrientation *this)
{
  *(void *)this = off_1003A97D8;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation(this);

  operator delete();
}

CMMsl::TempestPoCListenerOrientation *CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation(CMMsl::TempestPoCListenerOrientation *this, const CMMsl::TempestPoCListenerOrientation *a2)
{
  *(void *)this = off_1003A97D8;
  *((void *)this + 1) = 0;
  uint64_t v4 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 24) = 0;
  __int16 v5 = *((_WORD *)a2 + 48);
  if ((v5 & 0x10) != 0)
  {
    uint64_t v7 = *((void *)a2 + 8);
    __int16 v6 = 16;
    *((_WORD *)this + 48) = 16;
    *((void *)this + 8) = v7;
    __int16 v5 = *((_WORD *)a2 + 48);
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = 0;
  if ((*((_WORD *)a2 + 48) & 0x200) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 22);
    v6 |= 0x200u;
    *((_WORD *)this + 48) = v6;
    *((_DWORD *)this + 22) = v8;
    __int16 v5 = *((_WORD *)a2 + 48);
  }
LABEL_6:
  if ((v5 & 0x80) == 0)
  {
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v13 = *((_DWORD *)a2 + 20);
  v6 |= 0x80u;
  *((_WORD *)this + 48) = v6;
  *((_DWORD *)this + 20) = v13;
  if ((*((_WORD *)a2 + 48) & 0x100) != 0)
  {
LABEL_8:
    int v9 = *((_DWORD *)a2 + 21);
    *((_WORD *)this + 48) = v6 | 0x100;
    *((_DWORD *)this + 21) = v9;
  }
LABEL_9:
  if (this != a2) {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v10 = *((_WORD *)a2 + 48);
  if ((v10 & 0x400) != 0)
  {
    char v14 = *((unsigned char *)a2 + 92);
    *((_WORD *)this + 48) |= 0x400u;
    *((unsigned char *)this + 92) = v14;
    __int16 v10 = *((_WORD *)a2 + 48);
    if ((v10 & 0x20) == 0)
    {
LABEL_13:
      if ((v10 & 0x40) == 0) {
        goto LABEL_14;
      }
      goto LABEL_24;
    }
  }
  else if ((v10 & 0x20) == 0)
  {
    goto LABEL_13;
  }
  int v15 = *((_DWORD *)a2 + 18);
  *((_WORD *)this + 48) |= 0x20u;
  *((_DWORD *)this + 18) = v15;
  __int16 v10 = *((_WORD *)a2 + 48);
  if ((v10 & 0x40) == 0)
  {
LABEL_14:
    if ((v10 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v16 = *((_DWORD *)a2 + 19);
  *((_WORD *)this + 48) |= 0x40u;
  *((_DWORD *)this + 19) = v16;
  __int16 v10 = *((_WORD *)a2 + 48);
  if ((v10 & 8) == 0)
  {
LABEL_15:
    if ((v10 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v17 = *((void *)a2 + 7);
  *((_WORD *)this + 48) |= 8u;
  *((void *)this + 7) = v17;
  __int16 v10 = *((_WORD *)a2 + 48);
  if ((v10 & 1) == 0)
  {
LABEL_16:
    if ((v10 & 4) == 0) {
      goto LABEL_17;
    }
LABEL_27:
    uint64_t v19 = *((void *)a2 + 6);
    *((_WORD *)this + 48) |= 4u;
    *((void *)this + 6) = v19;
    if ((*((_WORD *)a2 + 48) & 2) == 0) {
      return this;
    }
    goto LABEL_18;
  }
LABEL_26:
  uint64_t v18 = *((void *)a2 + 4);
  *((_WORD *)this + 48) |= 1u;
  *((void *)this + 4) = v18;
  __int16 v10 = *((_WORD *)a2 + 48);
  if ((v10 & 4) != 0) {
    goto LABEL_27;
  }
LABEL_17:
  if ((v10 & 2) != 0)
  {
LABEL_18:
    uint64_t v11 = *((void *)a2 + 5);
    *((_WORD *)this + 48) |= 2u;
    *((void *)this + 5) = v11;
  }
  return this;
}

CMMsl *CMMsl::TempestPoCListenerOrientation::operator=(CMMsl *a1, const CMMsl::TempestPoCListenerOrientation *a2)
{
  if (a1 != a2)
  {
    CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation((CMMsl::TempestPoCListenerOrientation *)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCListenerOrientation *)v5, v3);
    CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation((CMMsl::TempestPoCListenerOrientation *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TempestPoCListenerOrientation *a2, CMMsl::TempestPoCListenerOrientation *a3)
{
  int v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 92);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
  *((unsigned char *)a2 + 92) = v7;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A97D8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

CMMsl *CMMsl::TempestPoCListenerOrientation::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCListenerOrientation *)v5, v3);
    CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation((CMMsl::TempestPoCListenerOrientation *)v5);
  }
  return a1;
}

uint64_t CMMsl::TempestPoCListenerOrientation::formatText(CMMsl::TempestPoCListenerOrientation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "angularVelocityConstraintRps", *((float *)this + 18));
    __int16 v5 = *((_WORD *)this + 48);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "consumedAuxTimestamp", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "dthetaNormRad", *((float *)this + 19));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x400) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "inBTZ", *((unsigned char *)this + 92));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "listenerPitch", *((float *)this + 20));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "listenerRoll", *((float *)this + 21));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "listenerYaw", *((float *)this + 22));
  if ((*((_WORD *)this + 48) & 2) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "machAbsTimestamp", *((double *)this + 5));
LABEL_10:
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "quaternion", v8);
  }
  __int16 v9 = *((_WORD *)this + 48);
  if ((v9 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "receivedAuxTimestamp", *((double *)this + 6));
    __int16 v9 = *((_WORD *)this + 48);
    if ((v9 & 8) == 0)
    {
LABEL_14:
      if ((v9 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  else if ((v9 & 8) == 0)
  {
    goto LABEL_14;
  }
  PB::TextFormatter::format(a2, "srcTimestamp", *((double *)this + 7));
  if ((*((_WORD *)this + 48) & 0x10) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
LABEL_16:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::TempestPoCListenerOrientation::readFrom(CMMsl::TempestPoCListenerOrientation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 8);
    __int16 v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_WORD *)this + 48) |= 0x10u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
            goto LABEL_104;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v23);
          goto LABEL_81;
        case 2u:
          *((_WORD *)this + 48) |= 0x200u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)a2 + 2)) {
            goto LABEL_104;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v24);
          goto LABEL_106;
        case 3u:
          *((_WORD *)this + 48) |= 0x80u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)a2 + 2)) {
            goto LABEL_104;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v25);
          goto LABEL_106;
        case 4u:
          *((_WORD *)this + 48) |= 0x100u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)a2 + 2)) {
            goto LABEL_104;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v26);
          goto LABEL_106;
        case 5u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v27 = *((void *)a2 + 1);
            unint64_t v28 = *((void *)a2 + 2);
            while (v27 < v28 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v30 = (char *)*((void *)this + 2);
              unint64_t v29 = *((void *)this + 3);
              if ((unint64_t)v30 >= v29)
              {
                unint64_t v32 = (char *)*v8;
                uint64_t v33 = (v30 - (unsigned char *)*v8) >> 2;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62) {
                  goto LABEL_116;
                }
                uint64_t v35 = v29 - (void)v32;
                if (v35 >> 1 > v34) {
                  unint64_t v34 = v35 >> 1;
                }
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36)
                {
                  unint64_t v37 = (char *)sub_100024458((uint64_t)v9, v36);
                  unint64_t v32 = (char *)*((void *)this + 1);
                  unint64_t v30 = (char *)*((void *)this + 2);
                }
                else
                {
                  unint64_t v37 = 0;
                }
                unint64_t v38 = &v37[4 * v33];
                *(_DWORD *)unint64_t v38 = 0;
                uint64_t v31 = v38 + 4;
                while (v30 != v32)
                {
                  int v39 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *((_DWORD *)v38 - 1) = v39;
                  v38 -= 4;
                }
                *((void *)this + 1) = v38;
                *((void *)this + 2) = v31;
                *((void *)this + 3) = &v37[4 * v36];
                if (v32) {
                  operator delete(v32);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v30 = 0;
                uint64_t v31 = v30 + 4;
              }
              *((void *)this + 2) = v31;
              unint64_t v40 = *((void *)a2 + 1);
              if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v31 - 1) = *(_DWORD *)(*(void *)a2 + v40);
              unint64_t v28 = *((void *)a2 + 2);
              unint64_t v27 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v27;
            }
            PB::Reader::recallMark();
          }
          else
          {
            char v53 = (char *)*((void *)this + 2);
            unint64_t v52 = *((void *)this + 3);
            if ((unint64_t)v53 >= v52)
            {
              unint64_t v55 = (char *)*v8;
              uint64_t v56 = (v53 - (unsigned char *)*v8) >> 2;
              unint64_t v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62) {
LABEL_116:
              }
                sub_10000EE98();
              uint64_t v58 = v52 - (void)v55;
              if (v58 >> 1 > v57) {
                unint64_t v57 = v58 >> 1;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v57;
              }
              if (v59)
              {
                unint64_t v60 = (char *)sub_100024458((uint64_t)v9, v59);
                unint64_t v55 = (char *)*((void *)this + 1);
                char v53 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v60 = 0;
              }
              uint64_t v61 = &v60[4 * v56];
              *(_DWORD *)uint64_t v61 = 0;
              unint64_t v54 = v61 + 4;
              while (v53 != v55)
              {
                int v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              *((void *)this + 1) = v61;
              *((void *)this + 2) = v54;
              *((void *)this + 3) = &v60[4 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *(_DWORD *)char v53 = 0;
              unint64_t v54 = v53 + 4;
            }
            *((void *)this + 2) = v54;
            unint64_t v63 = *((void *)a2 + 1);
            if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *((void *)a2 + 2))
            {
              *(v54 - 1) = *(_DWORD *)(*(void *)a2 + v63);
LABEL_106:
              uint64_t v51 = *((void *)a2 + 1) + 4;
LABEL_107:
              *((void *)a2 + 1) = v51;
            }
            else
            {
LABEL_104:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_108:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 6u:
          *((_WORD *)this + 48) |= 0x400u;
          unint64_t v41 = *((void *)a2 + 1);
          if (v41 >= *((void *)a2 + 2))
          {
            BOOL v44 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v42 = v41 + 1;
            int v43 = *(unsigned __int8 *)(*(void *)a2 + v41);
            *((void *)a2 + 1) = v42;
            BOOL v44 = v43 != 0;
          }
          *((unsigned char *)this + 92) = v44;
          goto LABEL_108;
        case 7u:
          *((_WORD *)this + 48) |= 0x20u;
          unint64_t v45 = *((void *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)a2 + 2)) {
            goto LABEL_104;
          }
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v45);
          goto LABEL_106;
        case 8u:
          *((_WORD *)this + 48) |= 0x40u;
          unint64_t v46 = *((void *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)a2 + 2)) {
            goto LABEL_104;
          }
          *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v46);
          goto LABEL_106;
        case 9u:
          *((_WORD *)this + 48) |= 8u;
          unint64_t v47 = *((void *)a2 + 1);
          if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((void *)a2 + 2)) {
            goto LABEL_104;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v47);
          goto LABEL_81;
        case 0xAu:
          *((_WORD *)this + 48) |= 1u;
          unint64_t v48 = *((void *)a2 + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((void *)a2 + 2)) {
            goto LABEL_104;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v48);
          goto LABEL_81;
        case 0xBu:
          *((_WORD *)this + 48) |= 4u;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((void *)a2 + 2)) {
            goto LABEL_104;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v49);
          goto LABEL_81;
        case 0xCu:
          *((_WORD *)this + 48) |= 2u;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)a2 + 2)) {
            goto LABEL_104;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v50);
LABEL_81:
          uint64_t v51 = *((void *)a2 + 1) + 8;
          goto LABEL_107;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_108;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::TempestPoCListenerOrientation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 96);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
    __int16 v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
LABEL_19:
      this = PB::Writer::write(a2, *(float *)(v3 + 80), 3u);
      if ((*(_WORD *)(v3 + 96) & 0x100) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(_WORD *)(this + 96) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 2u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) != 0) {
    goto LABEL_19;
  }
LABEL_4:
  if ((v4 & 0x100) != 0) {
LABEL_5:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 84), 4u);
LABEL_6:
  __int16 v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 5u);
  }
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x400) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 92), 6u);
    __int16 v8 = *(_WORD *)(v3 + 96);
    if ((v8 & 0x20) == 0)
    {
LABEL_11:
      if ((v8 & 0x40) == 0) {
        goto LABEL_12;
      }
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 7u);
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x40) == 0)
  {
LABEL_12:
    if ((v8 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 8u);
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 8) == 0)
  {
LABEL_13:
    if ((v8 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 9u);
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 1) == 0)
  {
LABEL_14:
    if ((v8 & 4) == 0) {
      goto LABEL_15;
    }
LABEL_26:
    this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xBu);
    if ((*(_WORD *)(v3 + 96) & 2) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xAu);
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 4) != 0) {
    goto LABEL_26;
  }
LABEL_15:
  if ((v8 & 2) == 0) {
    return this;
  }
LABEL_27:
  double v9 = *(double *)(v3 + 40);

  return PB::Writer::write(a2, v9, 0xCu);
}

uint64_t CMMsl::TempestPoCListenerOrientation::hash_value(CMMsl::TempestPoCListenerOrientation *this)
{
  __int16 v2 = *((_WORD *)this + 48);
  if ((v2 & 0x10) == 0)
  {
    uint64_t v3 = 0;
    if ((*((_WORD *)this + 48) & 0x200) != 0) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v5 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  if (*((double *)this + 8) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 8);
  }
  if ((*((_WORD *)this + 48) & 0x200) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  float v4 = *((float *)this + 22);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = LODWORD(v4);
  }
  if ((v2 & 0x80) != 0)
  {
LABEL_7:
    float v6 = *((float *)this + 20);
    if (v6 == 0.0) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = LODWORD(v6);
    }
    if ((*((_WORD *)this + 48) & 0x100) != 0) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v9 = 0;
    goto LABEL_21;
  }
LABEL_19:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 48) & 0x100) == 0) {
    goto LABEL_20;
  }
LABEL_11:
  float v8 = *((float *)this + 21);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = LODWORD(v8);
  }
LABEL_21:
  uint64_t v10 = PBHashBytes();
  __int16 v11 = *((_WORD *)this + 48);
  if ((v11 & 0x400) == 0)
  {
    uint64_t v12 = 0;
    if ((v11 & 0x20) != 0) {
      goto LABEL_23;
    }
LABEL_42:
    uint64_t v14 = 0;
    if ((v11 & 0x40) != 0) {
      goto LABEL_26;
    }
LABEL_43:
    uint64_t v16 = 0;
    if ((v11 & 8) != 0) {
      goto LABEL_29;
    }
LABEL_44:
    double v17 = 0.0;
    if (v11) {
      goto LABEL_32;
    }
LABEL_45:
    double v18 = 0.0;
    if ((v11 & 4) != 0) {
      goto LABEL_35;
    }
    goto LABEL_46;
  }
  uint64_t v12 = *((unsigned __int8 *)this + 92);
  if ((v11 & 0x20) == 0) {
    goto LABEL_42;
  }
LABEL_23:
  float v13 = *((float *)this + 18);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v11 & 0x40) == 0) {
    goto LABEL_43;
  }
LABEL_26:
  float v15 = *((float *)this + 19);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v11 & 8) == 0) {
    goto LABEL_44;
  }
LABEL_29:
  double v17 = *((double *)this + 7);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v11 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_32:
  double v18 = *((double *)this + 4);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v11 & 4) != 0)
  {
LABEL_35:
    double v19 = *((double *)this + 6);
    if (v19 == 0.0) {
      double v19 = 0.0;
    }
    if ((v11 & 2) != 0) {
      goto LABEL_38;
    }
LABEL_47:
    double v20 = 0.0;
    return v5 ^ v3 ^ v7 ^ v9 ^ v12 ^ v14 ^ v16 ^ *(void *)&v17 ^ v10 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20;
  }
LABEL_46:
  double v19 = 0.0;
  if ((v11 & 2) == 0) {
    goto LABEL_47;
  }
LABEL_38:
  double v20 = *((double *)this + 5);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  return v5 ^ v3 ^ v7 ^ v9 ^ v12 ^ v14 ^ v16 ^ *(void *)&v17 ^ v10 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20;
}

void CMMsl::Timestamp::~Timestamp(CMMsl::Timestamp *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::Timestamp::Timestamp(uint64_t this, const CMMsl::Timestamp *a2)
{
  *(void *)this = off_1003A9810;
  *(void *)(this + 16) = 0;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = 2;
    *(_DWORD *)(this + 16) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 1) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 20))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = v2;
    *(void *)(this + 8) = v4;
  }
  return this;
}

const CMMsl::Timestamp *CMMsl::Timestamp::operator=(const CMMsl::Timestamp *a1, const CMMsl::Timestamp *a2)
{
  if (a1 != a2)
  {
    CMMsl::Timestamp::Timestamp((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v3;
    uint64_t v4 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::Timestamp *a2, CMMsl::Timestamp *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  int v4 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return this;
}

uint64_t CMMsl::Timestamp::Timestamp(uint64_t result, uint64_t a2)
{
  *(void *)double result = off_1003A9810;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

{
  *(void *)double result = off_1003A9810;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t CMMsl::Timestamp::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4;
    v8[2] = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = off_1003A9810;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::Timestamp::formatText(CMMsl::Timestamp *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "source", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Timestamp::readFrom(CMMsl::Timestamp *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              uint64_t v31 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              uint64_t v31 = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v31 = 0;
          }
LABEL_63:
          unint64_t v3 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              uint64_t v31 = 0;
              break;
            }
          }
        }
LABEL_64:
        *((void *)this + 1) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_59:
          unint64_t v3 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v3 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v3;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 4) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Timestamp::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    unint64_t v5 = *(void *)(v3 + 8);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::Timestamp::hash_value(CMMsl::Timestamp *this)
{
  if ((*((unsigned char *)this + 20) & 2) != 0)
  {
    uint64_t v1 = *((int *)this + 4);
    if (*((unsigned char *)this + 20)) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((void *)this + 1);
  return v2 ^ v1;
}

void CMMsl::TouchOscarEmu::~TouchOscarEmu(CMMsl::TouchOscarEmu *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t this, const CMMsl::TouchOscarEmu *a2)
{
  *(void *)this = off_1003A9848;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::TouchOscarEmu::operator=(uint64_t a1, const CMMsl::TouchOscarEmu *a2)
{
  if ((const CMMsl::TouchOscarEmu *)a1 != a2)
  {
    CMMsl::TouchOscarEmu::TouchOscarEmu((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TouchOscarEmu *a2, CMMsl::TouchOscarEmu *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9848;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9848;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::TouchOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A9848;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::TouchOscarEmu::formatText(CMMsl::TouchOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "touchDetected", *((unsigned char *)this + 16));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::TouchOscarEmu::readFrom(CMMsl::TouchOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v22 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v22 = v21 != 0;
        }
        *((unsigned char *)this + 16) = v22;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::TouchOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::TouchOscarEmu::hash_value(CMMsl::TouchOscarEmu *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

void CMMsl::TrackRunData::~TrackRunData(CMMsl::TrackRunData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::TrackRunData::TrackRunData(uint64_t this, const CMMsl::TrackRunData *a2)
{
  *(void *)this = off_1003A9880;
  *(_DWORD *)(this + 40) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x10) != 0)
  {
    int v4 = *((_DWORD *)a2 + 7);
    char v3 = 16;
    *(unsigned char *)(this + 40) = 16;
    *(_DWORD *)(this + 28) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 40) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 40) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(unsigned char *)(this + 40) = v3;
  *(_DWORD *)(this + 16) = v7;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v8 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(unsigned char *)(this + 40) = v3;
  *(_DWORD *)(this + 32) = v8;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return this;
    }
LABEL_16:
    char v10 = *((unsigned char *)a2 + 36);
    *(unsigned char *)(this + 40) = v3 | 0x40;
    *(unsigned char *)(this + 36) = v10;
    return this;
  }
LABEL_15:
  uint64_t v9 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 40) = v3;
  *(void *)(this + 8) = v9;
  if ((*((unsigned char *)a2 + 40) & 0x40) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::TrackRunData::operator=(uint64_t a1, const CMMsl::TrackRunData *a2)
{
  if ((const CMMsl::TrackRunData *)a1 != a2)
  {
    CMMsl::TrackRunData::TrackRunData((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v4;
    int v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    int v11 = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v6;
    LOBYTE(v5) = *(unsigned char *)(a1 + 36);
    *(unsigned char *)(a1 + 36) = v12;
    char v12 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TrackRunData *a2, CMMsl::TrackRunData *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  int v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  int v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  int v8 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v8;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v8) = *((unsigned char *)this + 36);
  *((unsigned char *)this + 36) = *((unsigned char *)a2 + 36);
  *((unsigned char *)a2 + 36) = v8;
  return result;
}

double CMMsl::TrackRunData::TrackRunData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9880;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9880;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  return result;
}

uint64_t CMMsl::TrackRunData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v11[0] = off_1003A9880;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v4 = *(_DWORD *)(a2 + 32);
    uint64_t v5 = *(void *)(a2 + 8);
    char v6 = *(unsigned char *)(a2 + 36);
    int v15 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 16);
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 16) = v8;
    long long v12 = v7;
    int v9 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v4;
    int v13 = v9;
    *(void *)&long long v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v5;
    v11[1] = v7;
    LOBYTE(v9) = *(unsigned char *)(a1 + 36);
    *(unsigned char *)(a1 + 36) = v6;
    char v14 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::TrackRunData::formatText(CMMsl::TrackRunData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "distanceToTrackMeters", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "estimatedLaneConfidence", *((_DWORD *)this + 4));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "estimatedLaneNumber", *((_DWORD *)this + 5));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "laneCount", *((_DWORD *)this + 6));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "laneNumber", *((_DWORD *)this + 7));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "odometerHasBeenCorrected", *((unsigned char *)this + 36));
  if ((*((unsigned char *)this + 40) & 0x20) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "trackProximity", *((_DWORD *)this + 8));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::TrackRunData::readFrom(CMMsl::TrackRunData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 40) |= 0x10u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_106;
                  }
                  unint64_t v55 = v20++;
                  char v56 = *(unsigned char *)(v21 + v55);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_105;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_105:
                unint64_t v2 = v55 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_106;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_106:
              *((_DWORD *)this + 7) = v24;
              goto LABEL_127;
            case 2u:
              *((unsigned char *)this + 40) |= 4u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_111;
                  }
                  unint64_t v59 = v27++;
                  char v60 = *(unsigned char *)(v28 + v59);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_110;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_111;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *((_DWORD *)this + 5) = v31;
              goto LABEL_127;
            case 3u:
              *((unsigned char *)this + 40) |= 8u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_116;
                  }
                  unint64_t v63 = v33++;
                  char v64 = *(unsigned char *)(v34 + v63);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_115:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_115;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_116;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_116:
              *((_DWORD *)this + 6) = v37;
              goto LABEL_127;
            case 4u:
              *((unsigned char *)this + 40) |= 2u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_121;
                  }
                  unint64_t v67 = v39++;
                  char v68 = *(unsigned char *)(v40 + v67);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_120:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_121;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_120;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_121;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_121:
              *((_DWORD *)this + 4) = v43;
              goto LABEL_127;
            case 5u:
              *((unsigned char *)this + 40) |= 0x20u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_126;
                  }
                  unint64_t v71 = v45++;
                  char v72 = *(unsigned char *)(v46 + v71);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_125:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_125;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_126;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_126:
              *((_DWORD *)this + 8) = v49;
LABEL_127:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *((unsigned char *)this + 40) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_127;
            case 7u:
              *((unsigned char *)this + 40) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v52 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v51 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v52 = v51 != 0;
              }
              *((unsigned char *)this + 36) = v52;
              goto LABEL_127;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_127;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::TrackRunData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 28), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 4u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 6u);
    if ((*(unsigned char *)(v3 + 40) & 0x40) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 5u);
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_15:
  char v5 = *(unsigned char *)(v3 + 36);

  return PB::Writer::write(a2, v5, 7u);
}

uint64_t CMMsl::TrackRunData::hash_value(CMMsl::TrackRunData *this)
{
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
    uint64_t v1 = *((int *)this + 7);
    if ((*((unsigned char *)this + 40) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((int *)this + 5);
      if ((*((unsigned char *)this + 40) & 8) != 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 40) & 8) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 6);
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 40) & 2) != 0)
  {
LABEL_5:
    uint64_t v4 = *((int *)this + 4);
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 40) & 0x20) != 0)
  {
LABEL_6:
    uint64_t v5 = *((int *)this + 8);
    if (*((unsigned char *)this + 40)) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v5 = 0;
  if (*((unsigned char *)this + 40))
  {
LABEL_7:
    double v6 = *((double *)this + 1);
    if (v6 == 0.0) {
      double v6 = 0.0;
    }
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_10;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ *(void *)&v6 ^ v7;
  }
LABEL_16:
  double v6 = 0.0;
  if ((*((unsigned char *)this + 40) & 0x40) == 0) {
    goto LABEL_17;
  }
LABEL_10:
  uint64_t v7 = *((unsigned __int8 *)this + 36);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ *(void *)&v6 ^ v7;
}

void CMMsl::UWBRange::~UWBRange(CMMsl::UWBRange *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::UWBRange::UWBRange(CMMsl::UWBRange *this, const CMMsl::UWBRange *a2)
{
  *(void *)this = off_1003A98B8;
  *((_DWORD *)this + 14) = 0;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    char v3 = 8;
    *((unsigned char *)this + 56) = 8;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 56) & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 56) = v3;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 56);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 56) = v3;
    *((void *)this + 1) = v5;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v6 = *((void *)a2 + 2);
  v3 |= 2u;
  *((unsigned char *)this + 56) = v3;
  *((void *)this + 2) = v6;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_14:
    double result = *((double *)a2 + 6);
    *((unsigned char *)this + 56) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_13:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((unsigned char *)this + 56) = v3;
  *((double *)this + 5) = result;
  if ((*((unsigned char *)a2 + 56) & 0x20) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t CMMsl::UWBRange::operator=(uint64_t a1, const CMMsl::UWBRange *a2)
{
  if ((const CMMsl::UWBRange *)a1 != a2)
  {
    CMMsl::UWBRange::UWBRange((CMMsl::UWBRange *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::UWBRange *a2, CMMsl::UWBRange *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  double result = *((double *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::UWBRange::UWBRange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A98B8;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A98B8;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t CMMsl::UWBRange::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = off_1003A98B8;
    int v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    int v13 = *(_DWORD *)(a1 + 56);
    long long v4 = *(_OWORD *)(a2 + 24);
    long long v11 = *(_OWORD *)(a1 + 24);
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 40) = v7;
    long long v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::UWBRange::formatText(CMMsl::UWBRange *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 56);
  if (v5)
  {
    PB::TextFormatter::format(a2, "cycleIndex", *((void *)this + 1));
    char v5 = *((unsigned char *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "error", *((void *)this + 2));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "machAbsoluteTimestamp", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 4));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "range", *((double *)this + 5));
  if ((*((unsigned char *)this + 56) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "rssi", *((double *)this + 6));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::UWBRange::readFrom(CMMsl::UWBRange *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 56) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_49;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_65;
            case 2u:
              *((unsigned char *)this + 56) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_49;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_65;
            case 3u:
              *((unsigned char *)this + 56) |= 1u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_70;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_69:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_70;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_69;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_70;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_70:
              *((void *)this + 1) = v25;
              goto LABEL_76;
            case 4u:
              *((unsigned char *)this + 56) |= 2u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_75;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_74:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_75;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_74;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_75;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_75:
              *((void *)this + 2) = v31;
LABEL_76:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *((unsigned char *)this + 56) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_49;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_65;
            case 6u:
              *((unsigned char *)this + 56) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
LABEL_65:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_49:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_76;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_76;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::UWBRange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 56);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 3u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
    if ((*(unsigned char *)(v3 + 56) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 4u);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 48);

  return PB::Writer::write(a2, v5, 6u);
}

uint64_t CMMsl::UWBRange::hash_value(CMMsl::UWBRange *this)
{
  if ((*((unsigned char *)this + 56) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 56) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_17:
    double v2 = 0.0;
    if (*((unsigned char *)this + 56)) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if (*((unsigned char *)this + 56))
  {
LABEL_6:
    uint64_t v3 = *((void *)this + 1);
    if ((*((unsigned char *)this + 56) & 2) != 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 56) & 2) != 0)
  {
LABEL_7:
    uint64_t v4 = *((void *)this + 2);
    if ((*((unsigned char *)this + 56) & 0x10) != 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 56) & 0x10) != 0)
  {
LABEL_8:
    double v5 = *((double *)this + 5);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if ((*((unsigned char *)this + 56) & 0x20) != 0) {
      goto LABEL_11;
    }
LABEL_21:
    double v6 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6;
  }
LABEL_20:
  double v5 = 0.0;
  if ((*((unsigned char *)this + 56) & 0x20) == 0) {
    goto LABEL_21;
  }
LABEL_11:
  double v6 = *((double *)this + 6);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6;
}

void CMMsl::UltraFastAccel::~UltraFastAccel(CMMsl::UltraFastAccel *this)
{
  *(void *)this = off_1003A98F0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::UltraFastAccel::~UltraFastAccel(this);

  operator delete();
}

uint64_t CMMsl::UltraFastAccel::UltraFastAccel(uint64_t this, const CMMsl::UltraFastAccel *a2)
{
  *(void *)this = off_1003A98F0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 1);
    *(unsigned char *)(this + 24) |= 1u;
    *(void *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::UltraFastAccel::operator=(uint64_t a1, const CMMsl::UltraFastAccel *a2)
{
  if ((const CMMsl::UltraFastAccel *)a1 != a2)
  {
    CMMsl::UltraFastAccel::UltraFastAccel((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v6 = v10;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v6;
    uint64_t v9 = v5;
    uint64_t v10 = v4;
    CMMsl::UltraFastAccel::~UltraFastAccel((CMMsl::UltraFastAccel *)&v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::UltraFastAccel *a2, CMMsl::UltraFastAccel *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v5 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(this + 16);
  uint64_t v6 = *((void *)a2 + 2);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *(void *)(this + 16) = v6;
  *((void *)a2 + 1) = v5;
  *((void *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::UltraFastAccel::UltraFastAccel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A98F0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::UltraFastAccel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::UltraFastAccel::UltraFastAccel((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v6 = v10;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v6;
    uint64_t v9 = v5;
    uint64_t v10 = v4;
    CMMsl::UltraFastAccel::~UltraFastAccel((CMMsl::UltraFastAccel *)&v8);
  }
  return a1;
}

uint64_t CMMsl::UltraFastAccel::formatText(CMMsl::UltraFastAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "aopTimestamp", *((void *)this + 1));
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::UltraFastAccel::readFrom(CMMsl::UltraFastAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              uint64_t v26 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v32 = v21 + 1;
            char v33 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v21 = v32;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              uint64_t v26 = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v26 = 0;
          }
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((void *)this + 1) = v26;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::UltraFastAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 24))
  {
    unint64_t v5 = *(void *)(v3 + 8);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

unint64_t CMMsl::UltraFastAccel::hash_value(CMMsl::UltraFastAccel *this)
{
  unint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v2 = CMMsl::Accel::hash_value((CMMsl::Accel *)v2);
  }
  if (*((unsigned char *)this + 24)) {
    uint64_t v3 = *((void *)this + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::UltraFastAccel::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

void CMMsl::UserStudyEvent::~UserStudyEvent(CMMsl::UserStudyEvent *this)
{
  *(void *)this = off_1003A9928;
  uint64_t v4 = *((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *unint64_t v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::UserStudyEvent::~UserStudyEvent(this);

  operator delete();
}

uint64_t CMMsl::UserStudyEvent::UserStudyEvent(uint64_t this, const CMMsl::UserStudyEvent *a2)
{
  *(void *)this = off_1003A9928;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 16) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::UserStudyEvent::operator=(uint64_t a1, const CMMsl::UserStudyEvent *a2)
{
  if ((const CMMsl::UserStudyEvent *)a1 != a2)
  {
    CMMsl::UserStudyEvent::UserStudyEvent((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    CMMsl::UserStudyEvent::~UserStudyEvent((CMMsl::UserStudyEvent *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::UserStudyEvent *a2, CMMsl::UserStudyEvent *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return result;
}

uint64_t CMMsl::UserStudyEvent::UserStudyEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9928;
  *(void *)(a1 + 8) = 0;
  int v3 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *v3;
  *int v3 = v4;
  if (v5) {
    sub_100012E84((uint64_t)v3, v5);
  }
  return a1;
}

uint64_t CMMsl::UserStudyEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::UserStudyEvent::UserStudyEvent((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    CMMsl::UserStudyEvent::~UserStudyEvent((CMMsl::UserStudyEvent *)&v7);
  }
  return a1;
}

uint64_t CMMsl::UserStudyEvent::formatText(CMMsl::UserStudyEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::UserStudyEvent::readFrom(CMMsl::UserStudyEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2) {
        operator new();
      }
      if (v20 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v21);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::UserStudyEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = this;
  if (*(unsigned char *)(this + 24)) {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
  }
  if (*(void *)(v2 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

unint64_t CMMsl::UserStudyEvent::hash_value(CMMsl::UserStudyEvent *this)
{
  if (*((unsigned char *)this + 24))
  {
    if (*((double *)this + 2) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 2);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v3 = sub_100012EE0((uint64_t)&v5, v2);
  }
  else {
    unint64_t v3 = 0;
  }
  return v3 ^ v1;
}

void CMMsl::VIOEstimation::~VIOEstimation(CMMsl::VIOEstimation *this)
{
  *(void *)this = off_1003A9960;
  uint64_t v2 = (void *)*((void *)this + 34);
  if (v2)
  {
    *((void *)this + 35) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 31);
  if (v3)
  {
    *((void *)this + 32) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 28);
  if (v4)
  {
    *((void *)this + 29) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 25);
  if (v5)
  {
    *((void *)this + 26) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 22);
  if (v6)
  {
    *((void *)this + 23) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 19);
  if (v7)
  {
    *((void *)this + 20) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 16);
  if (v8)
  {
    *((void *)this + 17) = v8;
    operator delete(v8);
  }
  char v9 = (void *)*((void *)this + 13);
  if (v9)
  {
    *((void *)this + 14) = v9;
    operator delete(v9);
  }
  unsigned int v10 = (void *)*((void *)this + 10);
  if (v10)
  {
    *((void *)this + 11) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 7);
  if (v11)
  {
    *((void *)this + 8) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 4);
  if (v12)
  {
    *((void *)this + 5) = v12;
    operator delete(v12);
  }
  char v13 = (void *)*((void *)this + 1);
  if (v13)
  {
    *((void *)this + 2) = v13;
    operator delete(v13);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VIOEstimation::~VIOEstimation(this);

  operator delete();
}

CMMsl::VIOEstimation *CMMsl::VIOEstimation::VIOEstimation(CMMsl::VIOEstimation *this, const CMMsl::VIOEstimation *a2)
{
  *(void *)this = off_1003A9960;
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  char v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v6 = (char *)this + 104;
  *(_OWORD *)((char *)this + 152) = 0u;
  uint64_t v7 = (char *)this + 152;
  *(_OWORD *)((char *)this + 200) = 0u;
  uint64_t v8 = (char *)this + 200;
  *(_OWORD *)((char *)this + 248) = 0u;
  char v9 = (char *)this + 248;
  *((void *)this + 42) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  char v10 = *((unsigned char *)a2 + 340);
  if ((v10 & 0x40) != 0)
  {
    int v12 = *((_DWORD *)a2 + 84);
    char v11 = 64;
    *((unsigned char *)this + 340) = 64;
    *((_DWORD *)this + 84) = v12;
    char v10 = *((unsigned char *)a2 + 340);
    if ((v10 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v11 = 0;
  if ((*((unsigned char *)a2 + 340) & 4) != 0)
  {
LABEL_5:
    uint64_t v13 = *((void *)a2 + 39);
    v11 |= 4u;
    *((unsigned char *)this + 340) = v11;
    *((void *)this + 39) = v13;
    char v10 = *((unsigned char *)a2 + 340);
  }
LABEL_6:
  if (v10)
  {
    uint64_t v19 = *((void *)a2 + 37);
    v11 |= 1u;
    *((unsigned char *)this + 340) = v11;
    *((void *)this + 37) = v19;
    char v10 = *((unsigned char *)a2 + 340);
    if ((v10 & 8) == 0)
    {
LABEL_8:
      if ((v10 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else if ((v10 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v20 = *((void *)a2 + 40);
  v11 |= 8u;
  *((unsigned char *)this + 340) = v11;
  *((void *)this + 40) = v20;
  if ((*((unsigned char *)a2 + 340) & 2) != 0)
  {
LABEL_9:
    uint64_t v14 = *((void *)a2 + 38);
    *((unsigned char *)this + 340) = v11 | 2;
    *((void *)this + 38) = v14;
  }
LABEL_10:
  if (this != a2)
  {
    sub_1000330C4((char *)this + 176, *((char **)a2 + 22), *((void *)a2 + 23), (uint64_t)(*((void *)a2 + 23) - *((void *)a2 + 22)) >> 3);
    sub_1000330C4(v6, *((char **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
    sub_1000330C4((char *)this + 272, *((char **)a2 + 34), *((void *)a2 + 35), (uint64_t)(*((void *)a2 + 35) - *((void *)a2 + 34)) >> 3);
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4((char *)this + 224, *((char **)a2 + 28), *((void *)a2 + 29), (uint64_t)(*((void *)a2 + 29) - *((void *)a2 + 28)) >> 3);
    sub_1000330C4(v7, *((char **)a2 + 19), *((void *)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 3);
    sub_1000330C4((char *)this + 128, *((char **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 3);
    sub_1000330C4(v9, *((char **)a2 + 31), *((void *)a2 + 32), (uint64_t)(*((void *)a2 + 32) - *((void *)a2 + 31)) >> 3);
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_1000330C4(v8, *((char **)a2 + 25), *((void *)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 3);
    sub_1000330C4((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
    sub_1000330C4(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  char v15 = *((unsigned char *)a2 + 340);
  if ((v15 & 0x20) != 0)
  {
    int v16 = *((_DWORD *)a2 + 83);
    *((unsigned char *)this + 340) |= 0x20u;
    *((_DWORD *)this + 83) = v16;
    char v15 = *((unsigned char *)a2 + 340);
  }
  if ((v15 & 0x10) != 0)
  {
    int v17 = *((_DWORD *)a2 + 82);
    *((unsigned char *)this + 340) |= 0x10u;
    *((_DWORD *)this + 82) = v17;
  }
  return this;
}

CMMsl *CMMsl::VIOEstimation::operator=(CMMsl *a1, const CMMsl::VIOEstimation *a2)
{
  if (a1 != a2)
  {
    CMMsl::VIOEstimation::VIOEstimation((CMMsl::VIOEstimation *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOEstimation *)v5, v3);
    CMMsl::VIOEstimation::~VIOEstimation((CMMsl::VIOEstimation *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VIOEstimation *a2, CMMsl::VIOEstimation *a3)
{
  int v3 = *((_DWORD *)this + 85);
  *((_DWORD *)this + 85) = *((_DWORD *)a2 + 85);
  *((_DWORD *)a2 + 85) = v3;
  int v4 = *((_DWORD *)this + 84);
  *((_DWORD *)this + 84) = *((_DWORD *)a2 + 84);
  *((_DWORD *)a2 + 84) = v4;
  uint64_t v5 = *((void *)this + 39);
  *((void *)this + 39) = *((void *)a2 + 39);
  *((void *)a2 + 39) = v5;
  uint64_t v6 = *((void *)this + 37);
  *((void *)this + 37) = *((void *)a2 + 37);
  *((void *)a2 + 37) = v6;
  uint64_t v7 = *((void *)this + 40);
  *((void *)this + 40) = *((void *)a2 + 40);
  *((void *)a2 + 40) = v7;
  uint64_t v8 = *((void *)this + 38);
  *((void *)this + 38) = *((void *)a2 + 38);
  *((void *)a2 + 38) = v8;
  uint64_t v9 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v9;
  uint64_t v10 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v10;
  uint64_t v11 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v11;
  uint64_t v12 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v12;
  uint64_t v13 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v13;
  uint64_t v14 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v14;
  uint64_t v15 = *((void *)this + 34);
  *((void *)this + 34) = *((void *)a2 + 34);
  *((void *)a2 + 34) = v15;
  uint64_t v16 = *((void *)this + 35);
  *((void *)this + 35) = *((void *)a2 + 35);
  *((void *)a2 + 35) = v16;
  uint64_t v17 = *((void *)this + 36);
  *((void *)this + 36) = *((void *)a2 + 36);
  *((void *)a2 + 36) = v17;
  uint64_t v18 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v18;
  uint64_t v19 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v19;
  uint64_t v20 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v20;
  uint64_t v21 = *((void *)this + 28);
  *((void *)this + 28) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v21;
  uint64_t v22 = *((void *)this + 29);
  *((void *)this + 29) = *((void *)a2 + 29);
  *((void *)a2 + 29) = v22;
  uint64_t v23 = *((void *)this + 30);
  *((void *)this + 30) = *((void *)a2 + 30);
  *((void *)a2 + 30) = v23;
  uint64_t v24 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v24;
  uint64_t v25 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v25;
  uint64_t v26 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v26;
  uint64_t v27 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v27;
  uint64_t v28 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v28;
  uint64_t v29 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v29;
  uint64_t v30 = *((void *)this + 31);
  *((void *)this + 31) = *((void *)a2 + 31);
  *((void *)a2 + 31) = v30;
  uint64_t v31 = *((void *)this + 32);
  *((void *)this + 32) = *((void *)a2 + 32);
  *((void *)a2 + 32) = v31;
  uint64_t v32 = *((void *)this + 33);
  *((void *)this + 33) = *((void *)a2 + 33);
  *((void *)a2 + 33) = v32;
  uint64_t v33 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v33;
  uint64_t v34 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v34;
  uint64_t v35 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v35;
  uint64_t v36 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v36;
  uint64_t v37 = *((void *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((void *)a2 + 26) = v37;
  uint64_t v38 = *((void *)this + 27);
  *((void *)this + 27) = *((void *)a2 + 27);
  *((void *)a2 + 27) = v38;
  uint64_t v39 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v39;
  uint64_t v40 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v40;
  uint64_t v41 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v41;
  uint64_t v42 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v42;
  uint64_t v43 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v43;
  uint64_t v44 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v44;
  LODWORD(v8) = *((_DWORD *)this + 83);
  *((_DWORD *)this + 83) = *((_DWORD *)a2 + 83);
  *((_DWORD *)a2 + 83) = v8;
  float result = *((float *)this + 82);
  *((_DWORD *)this + 82) = *((_DWORD *)a2 + 82);
  *((float *)a2 + 82) = result;
  return result;
}

uint64_t CMMsl::VIOEstimation::VIOEstimation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9960;
  uint64_t v6 = a1 + 32;
  uint64_t v7 = a1 + 80;
  uint64_t v5 = a1 + 128;
  *(_DWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a2 + 340) = 0;
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  sub_100274A30(a1 + 176, (__n128 *)(a2 + 176));
  sub_100274A30(a1 + 104, (__n128 *)(a2 + 104));
  sub_100274A30(a1 + 272, (__n128 *)(a2 + 272));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(a1 + 224, (__n128 *)(a2 + 224));
  sub_100274A30(a1 + 152, (__n128 *)(a2 + 152));
  sub_100274A30(v5, (__n128 *)(a2 + 128));
  sub_100274A30(a1 + 248, (__n128 *)(a2 + 248));
  sub_100274A30(v6, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 200, (__n128 *)(a2 + 200));
  sub_100274A30(v7, (__n128 *)(a2 + 80));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a2 + 332);
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
  return a1;
}

CMMsl *CMMsl::VIOEstimation::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VIOEstimation::VIOEstimation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOEstimation *)v5, v3);
    CMMsl::VIOEstimation::~VIOEstimation((CMMsl::VIOEstimation *)v5);
  }
  return a1;
}

uint64_t CMMsl::VIOEstimation::formatText(CMMsl::VIOEstimation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  uint64_t v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "accelBias", v7);
  }
  uint64_t v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "accelBiasCov", v10);
  }
  char v11 = *((unsigned char *)this + 340);
  if ((v11 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "cameraImageResolutionHeight", *((float *)this + 82));
    char v11 = *((unsigned char *)this + 340);
  }
  if ((v11 & 0x20) != 0) {
    PB::TextFormatter::format(a2, "cameraImageResolutionWidth", *((float *)this + 83));
  }
  uint64_t v12 = (double *)*((void *)this + 7);
  uint64_t v13 = (double *)*((void *)this + 8);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(a2, "cameraIntrinsics", v14);
  }
  uint64_t v15 = (double *)*((void *)this + 10);
  uint64_t v16 = (double *)*((void *)this + 11);
  while (v15 != v16)
  {
    double v17 = *v15++;
    PB::TextFormatter::format(a2, "cameraPose", v17);
  }
  uint64_t v18 = (double *)*((void *)this + 13);
  uint64_t v19 = (double *)*((void *)this + 14);
  while (v18 != v19)
  {
    double v20 = *v18++;
    PB::TextFormatter::format(a2, "gyroBias", v20);
  }
  uint64_t v21 = (double *)*((void *)this + 16);
  uint64_t v22 = (double *)*((void *)this + 17);
  while (v21 != v22)
  {
    double v23 = *v21++;
    PB::TextFormatter::format(a2, "gyroBiasCov", v23);
  }
  char v24 = *((unsigned char *)this + 340);
  if (v24)
  {
    PB::TextFormatter::format(a2, "machContinuousOriginTimestamp", *((double *)this + 37));
    char v24 = *((unsigned char *)this + 340);
  }
  if ((v24 & 2) != 0) {
    PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 38));
  }
  uint64_t v25 = (double *)*((void *)this + 22);
  uint64_t v26 = (double *)*((void *)this + 23);
  while (v25 != v26)
  {
    double v27 = *v25++;
    PB::TextFormatter::format(a2, "orientation", v27);
  }
  uint64_t v28 = (double *)*((void *)this + 19);
  uint64_t v29 = (double *)*((void *)this + 20);
  while (v28 != v29)
  {
    double v30 = *v28++;
    PB::TextFormatter::format(a2, "orientationCov", v30);
  }
  if ((*((unsigned char *)this + 340) & 4) != 0) {
    PB::TextFormatter::format(a2, "originTimestamp", *((double *)this + 39));
  }
  uint64_t v31 = (double *)*((void *)this + 28);
  uint64_t v32 = (double *)*((void *)this + 29);
  while (v31 != v32)
  {
    double v33 = *v31++;
    PB::TextFormatter::format(a2, "position", v33);
  }
  uint64_t v34 = (double *)*((void *)this + 25);
  uint64_t v35 = (double *)*((void *)this + 26);
  while (v34 != v35)
  {
    double v36 = *v34++;
    PB::TextFormatter::format(a2, "positionCov", v36);
  }
  char v37 = *((unsigned char *)this + 340);
  if ((v37 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 40));
    char v37 = *((unsigned char *)this + 340);
  }
  if ((v37 & 0x40) != 0) {
    PB::TextFormatter::format(a2, "trackingState", *((_DWORD *)this + 84));
  }
  uint64_t v38 = (double *)*((void *)this + 34);
  uint64_t v39 = (double *)*((void *)this + 35);
  while (v38 != v39)
  {
    double v40 = *v38++;
    PB::TextFormatter::format(a2, "velocity", v40);
  }
  uint64_t v41 = (double *)*((void *)this + 31);
  uint64_t v42 = (double *)*((void *)this + 32);
  while (v41 != v42)
  {
    double v43 = *v41++;
    PB::TextFormatter::format(a2, "velocityCov", v43);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VIOEstimation::readFrom(CMMsl::VIOEstimation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v355 = (void **)((char *)this + 56);
    v347 = (char *)this + 72;
    v354 = (void **)((char *)this + 80);
    v346 = (char *)this + 96;
    v353 = (void **)((char *)this + 200);
    v352 = (void **)((char *)this + 32);
    v344 = (char *)this + 48;
    v345 = (char *)this + 216;
    v343 = (char *)this + 264;
    v350 = (void **)((char *)this + 128);
    v351 = (void **)((char *)this + 248);
    v349 = (void **)((char *)this + 152);
    v341 = (char *)this + 168;
    v342 = (char *)this + 144;
    v348 = (void **)((char *)this + 224);
    uint64_t v8 = (void **)((char *)this + 8);
    v339 = (char *)this + 24;
    v340 = (char *)this + 240;
    uint64_t v9 = (void **)((char *)this + 272);
    double v10 = (void **)((char *)this + 104);
    v337 = (char *)this + 120;
    v338 = (char *)this + 288;
    char v11 = (void **)((char *)this + 176);
    v336 = (char *)this + 192;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 340) |= 0x40u;
          unint64_t v25 = *((void *)a2 + 1);
          unint64_t v26 = *((void *)a2 + 2);
          uint64_t v27 = *(void *)a2;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            do
            {
              unint64_t v31 = v25 + 1;
              *((void *)a2 + 1) = v25 + 1;
              char v32 = *(unsigned char *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                goto LABEL_471;
              }
              v28 += 7;
              unint64_t v25 = v31;
              BOOL v18 = v29++ > 8;
            }
            while (!v18);
LABEL_347:
            LODWORD(v30) = 0;
            goto LABEL_471;
          }
          char v208 = 0;
          unsigned int v209 = 0;
          uint64_t v30 = 0;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v210 = v25 + 1;
              char v211 = *(unsigned char *)(v27 + v25);
              *((void *)a2 + 1) = v210;
              v30 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                unint64_t v25 = v210;
                BOOL v18 = v209++ > 8;
                if (v18) {
                  goto LABEL_347;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v30) = 0;
              }
            }
            break;
          }
LABEL_471:
          *((_DWORD *)this + 84) = v30;
          goto LABEL_562;
        case 2u:
          *((unsigned char *)this + 340) |= 4u;
          unint64_t v33 = *((void *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((void *)a2 + 2)) {
            goto LABEL_558;
          }
          *((void *)this + 39) = *(void *)(*(void *)a2 + v33);
          goto LABEL_560;
        case 3u:
          *((unsigned char *)this + 340) |= 1u;
          unint64_t v34 = *((void *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((void *)a2 + 2)) {
            goto LABEL_558;
          }
          *((void *)this + 37) = *(void *)(*(void *)a2 + v34);
          goto LABEL_560;
        case 4u:
          *((unsigned char *)this + 340) |= 8u;
          unint64_t v35 = *((void *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((void *)a2 + 2)) {
            goto LABEL_558;
          }
          *((void *)this + 40) = *(void *)(*(void *)a2 + v35);
          goto LABEL_560;
        case 5u:
          *((unsigned char *)this + 340) |= 2u;
          unint64_t v36 = *((void *)a2 + 1);
          if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((void *)a2 + 2)) {
            goto LABEL_558;
          }
          *((void *)this + 38) = *(void *)(*(void *)a2 + v36);
          goto LABEL_560;
        case 6u:
          if (v24 != 2)
          {
            v213 = (char *)*((void *)this + 23);
            unint64_t v212 = *((void *)this + 24);
            if ((unint64_t)v213 >= v212)
            {
              v237 = (char *)*v11;
              uint64_t v238 = (v213 - (unsigned char *)*v11) >> 3;
              unint64_t v239 = v238 + 1;
              if ((unint64_t)(v238 + 1) >> 61) {
LABEL_572:
              }
                sub_10000EE98();
              uint64_t v240 = v212 - (void)v237;
              if (v240 >> 2 > v239) {
                unint64_t v239 = v240 >> 2;
              }
              if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v241 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v241 = v239;
              }
              if (v241)
              {
                v242 = (char *)sub_10000EEB0((uint64_t)v336, v241);
                v237 = (char *)*((void *)this + 22);
                v213 = (char *)*((void *)this + 23);
              }
              else
              {
                v242 = 0;
              }
              v309 = &v242[8 * v238];
              *(void *)v309 = 0;
              v214 = v309 + 8;
              while (v213 != v237)
              {
                uint64_t v310 = *((void *)v213 - 1);
                v213 -= 8;
                *((void *)v309 - 1) = v310;
                v309 -= 8;
              }
              *((void *)this + 22) = v309;
              *((void *)this + 23) = v214;
              *((void *)this + 24) = &v242[8 * v241];
              if (v237) {
                operator delete(v237);
              }
            }
            else
            {
              *(void *)v213 = 0;
              v214 = v213 + 8;
            }
            *((void *)this + 23) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          while (v37 < v38 && !*((unsigned char *)a2 + 24))
          {
            double v40 = (char *)*((void *)this + 23);
            unint64_t v39 = *((void *)this + 24);
            if ((unint64_t)v40 >= v39)
            {
              uint64_t v42 = (char *)*v11;
              uint64_t v43 = (v40 - (unsigned char *)*v11) >> 3;
              unint64_t v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 61) {
                goto LABEL_572;
              }
              uint64_t v45 = v39 - (void)v42;
              if (v45 >> 2 > v44) {
                unint64_t v44 = v45 >> 2;
              }
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v44;
              }
              if (v46)
              {
                char v47 = (char *)sub_10000EEB0((uint64_t)v336, v46);
                uint64_t v42 = (char *)*((void *)this + 22);
                double v40 = (char *)*((void *)this + 23);
              }
              else
              {
                char v47 = 0;
              }
              unsigned int v48 = &v47[8 * v43];
              *(void *)unsigned int v48 = 0;
              uint64_t v41 = v48 + 8;
              while (v40 != v42)
              {
                uint64_t v49 = *((void *)v40 - 1);
                v40 -= 8;
                *((void *)v48 - 1) = v49;
                v48 -= 8;
              }
              *((void *)this + 22) = v48;
              *((void *)this + 23) = v41;
              *((void *)this + 24) = &v47[8 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *(void *)double v40 = 0;
              uint64_t v41 = v40 + 8;
            }
            *((void *)this + 23) = v41;
            unint64_t v50 = *((void *)a2 + 1);
            if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)a2 + 2)) {
              goto LABEL_332;
            }
            *(v41 - 1) = *(void *)(*(void *)a2 + v50);
            unint64_t v38 = *((void *)a2 + 2);
            unint64_t v37 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v37;
          }
          goto LABEL_333;
        case 7u:
          if (v24 != 2)
          {
            v216 = (char *)*((void *)this + 14);
            unint64_t v215 = *((void *)this + 15);
            if ((unint64_t)v216 >= v215)
            {
              v243 = (char *)*v10;
              uint64_t v244 = (v216 - (unsigned char *)*v10) >> 3;
              unint64_t v245 = v244 + 1;
              if ((unint64_t)(v244 + 1) >> 61) {
LABEL_573:
              }
                sub_10000EE98();
              uint64_t v246 = v215 - (void)v243;
              if (v246 >> 2 > v245) {
                unint64_t v245 = v246 >> 2;
              }
              if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v247 = v245;
              }
              if (v247)
              {
                v248 = (char *)sub_10000EEB0((uint64_t)v337, v247);
                v243 = (char *)*((void *)this + 13);
                v216 = (char *)*((void *)this + 14);
              }
              else
              {
                v248 = 0;
              }
              v311 = &v248[8 * v244];
              *(void *)v311 = 0;
              v214 = v311 + 8;
              while (v216 != v243)
              {
                uint64_t v312 = *((void *)v216 - 1);
                v216 -= 8;
                *((void *)v311 - 1) = v312;
                v311 -= 8;
              }
              *((void *)this + 13) = v311;
              *((void *)this + 14) = v214;
              *((void *)this + 15) = &v248[8 * v247];
              if (v243) {
                operator delete(v243);
              }
            }
            else
            {
              *(void *)v216 = 0;
              v214 = v216 + 8;
            }
            *((void *)this + 14) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v51 = *((void *)a2 + 1);
          unint64_t v52 = *((void *)a2 + 2);
          while (v51 < v52 && !*((unsigned char *)a2 + 24))
          {
            unsigned int v54 = (char *)*((void *)this + 14);
            unint64_t v53 = *((void *)this + 15);
            if ((unint64_t)v54 >= v53)
            {
              char v56 = (char *)*v10;
              uint64_t v57 = (v54 - (unsigned char *)*v10) >> 3;
              unint64_t v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61) {
                goto LABEL_573;
              }
              uint64_t v59 = v53 - (void)v56;
              if (v59 >> 2 > v58) {
                unint64_t v58 = v59 >> 2;
              }
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v60 = v58;
              }
              if (v60)
              {
                char v61 = (char *)sub_10000EEB0((uint64_t)v337, v60);
                char v56 = (char *)*((void *)this + 13);
                unsigned int v54 = (char *)*((void *)this + 14);
              }
              else
              {
                char v61 = 0;
              }
              unsigned int v62 = &v61[8 * v57];
              *(void *)unsigned int v62 = 0;
              unint64_t v55 = v62 + 8;
              while (v54 != v56)
              {
                uint64_t v63 = *((void *)v54 - 1);
                v54 -= 8;
                *((void *)v62 - 1) = v63;
                v62 -= 8;
              }
              *((void *)this + 13) = v62;
              *((void *)this + 14) = v55;
              *((void *)this + 15) = &v61[8 * v60];
              if (v56) {
                operator delete(v56);
              }
            }
            else
            {
              *(void *)unsigned int v54 = 0;
              unint64_t v55 = v54 + 8;
            }
            *((void *)this + 14) = v55;
            unint64_t v64 = *((void *)a2 + 1);
            if (v64 > 0xFFFFFFFFFFFFFFF7 || v64 + 8 > *((void *)a2 + 2)) {
              goto LABEL_332;
            }
            *(v55 - 1) = *(void *)(*(void *)a2 + v64);
            unint64_t v52 = *((void *)a2 + 2);
            unint64_t v51 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v51;
          }
          goto LABEL_333;
        case 8u:
          if (v24 != 2)
          {
            v218 = (char *)*((void *)this + 35);
            unint64_t v217 = *((void *)this + 36);
            if ((unint64_t)v218 >= v217)
            {
              v249 = (char *)*v9;
              uint64_t v250 = (v218 - (unsigned char *)*v9) >> 3;
              unint64_t v251 = v250 + 1;
              if ((unint64_t)(v250 + 1) >> 61) {
LABEL_574:
              }
                sub_10000EE98();
              uint64_t v252 = v217 - (void)v249;
              if (v252 >> 2 > v251) {
                unint64_t v251 = v252 >> 2;
              }
              if ((unint64_t)v252 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v253 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v253 = v251;
              }
              if (v253)
              {
                v254 = (char *)sub_10000EEB0((uint64_t)v338, v253);
                v249 = (char *)*((void *)this + 34);
                v218 = (char *)*((void *)this + 35);
              }
              else
              {
                v254 = 0;
              }
              v313 = &v254[8 * v250];
              *(void *)v313 = 0;
              v214 = v313 + 8;
              while (v218 != v249)
              {
                uint64_t v314 = *((void *)v218 - 1);
                v218 -= 8;
                *((void *)v313 - 1) = v314;
                v313 -= 8;
              }
              *((void *)this + 34) = v313;
              *((void *)this + 35) = v214;
              *((void *)this + 36) = &v254[8 * v253];
              if (v249) {
                operator delete(v249);
              }
            }
            else
            {
              *(void *)v218 = 0;
              v214 = v218 + 8;
            }
            *((void *)this + 35) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v65 = *((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
          while (v65 < v66 && !*((unsigned char *)a2 + 24))
          {
            char v68 = (char *)*((void *)this + 35);
            unint64_t v67 = *((void *)this + 36);
            if ((unint64_t)v68 >= v67)
            {
              unsigned int v70 = (char *)*v9;
              uint64_t v71 = (v68 - (unsigned char *)*v9) >> 3;
              unint64_t v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 61) {
                goto LABEL_574;
              }
              uint64_t v73 = v67 - (void)v70;
              if (v73 >> 2 > v72) {
                unint64_t v72 = v73 >> 2;
              }
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v74 = v72;
              }
              if (v74)
              {
                unint64_t v75 = (char *)sub_10000EEB0((uint64_t)v338, v74);
                unsigned int v70 = (char *)*((void *)this + 34);
                char v68 = (char *)*((void *)this + 35);
              }
              else
              {
                unint64_t v75 = 0;
              }
              uint64_t v76 = &v75[8 * v71];
              *(void *)uint64_t v76 = 0;
              char v69 = v76 + 8;
              while (v68 != v70)
              {
                uint64_t v77 = *((void *)v68 - 1);
                v68 -= 8;
                *((void *)v76 - 1) = v77;
                v76 -= 8;
              }
              *((void *)this + 34) = v76;
              *((void *)this + 35) = v69;
              *((void *)this + 36) = &v75[8 * v74];
              if (v70) {
                operator delete(v70);
              }
            }
            else
            {
              *(void *)char v68 = 0;
              char v69 = v68 + 8;
            }
            *((void *)this + 35) = v69;
            unint64_t v78 = *((void *)a2 + 1);
            if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((void *)a2 + 2)) {
              goto LABEL_332;
            }
            *(v69 - 1) = *(void *)(*(void *)a2 + v78);
            unint64_t v66 = *((void *)a2 + 2);
            unint64_t v65 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v65;
          }
          goto LABEL_333;
        case 9u:
          if (v24 != 2)
          {
            v220 = (char *)*((void *)this + 2);
            unint64_t v219 = *((void *)this + 3);
            if ((unint64_t)v220 >= v219)
            {
              v255 = (char *)*v8;
              uint64_t v256 = (v220 - (unsigned char *)*v8) >> 3;
              unint64_t v257 = v256 + 1;
              if ((unint64_t)(v256 + 1) >> 61) {
LABEL_575:
              }
                sub_10000EE98();
              uint64_t v258 = v219 - (void)v255;
              if (v258 >> 2 > v257) {
                unint64_t v257 = v258 >> 2;
              }
              if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v259 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v259 = v257;
              }
              if (v259)
              {
                v260 = (char *)sub_10000EEB0((uint64_t)v339, v259);
                v255 = (char *)*((void *)this + 1);
                v220 = (char *)*((void *)this + 2);
              }
              else
              {
                v260 = 0;
              }
              v315 = &v260[8 * v256];
              *(void *)v315 = 0;
              v214 = v315 + 8;
              while (v220 != v255)
              {
                uint64_t v316 = *((void *)v220 - 1);
                v220 -= 8;
                *((void *)v315 - 1) = v316;
                v315 -= 8;
              }
              *((void *)this + 1) = v315;
              *((void *)this + 2) = v214;
              *((void *)this + 3) = &v260[8 * v259];
              if (v255) {
                operator delete(v255);
              }
            }
            else
            {
              *(void *)v220 = 0;
              v214 = v220 + 8;
            }
            *((void *)this + 2) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v79 = *((void *)a2 + 1);
          unint64_t v80 = *((void *)a2 + 2);
          while (v79 < v80 && !*((unsigned char *)a2 + 24))
          {
            char v82 = (char *)*((void *)this + 2);
            unint64_t v81 = *((void *)this + 3);
            if ((unint64_t)v82 >= v81)
            {
              unsigned int v84 = (char *)*v8;
              uint64_t v85 = (v82 - (unsigned char *)*v8) >> 3;
              unint64_t v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 61) {
                goto LABEL_575;
              }
              uint64_t v87 = v81 - (void)v84;
              if (v87 >> 2 > v86) {
                unint64_t v86 = v87 >> 2;
              }
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v86;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_10000EEB0((uint64_t)v339, v88);
                unsigned int v84 = (char *)*((void *)this + 1);
                char v82 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v89 = 0;
              }
              char v90 = &v89[8 * v85];
              *(void *)char v90 = 0;
              char v83 = v90 + 8;
              while (v82 != v84)
              {
                uint64_t v91 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v90 - 1) = v91;
                v90 -= 8;
              }
              *((void *)this + 1) = v90;
              *((void *)this + 2) = v83;
              *((void *)this + 3) = &v89[8 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *(void *)char v82 = 0;
              char v83 = v82 + 8;
            }
            *((void *)this + 2) = v83;
            unint64_t v92 = *((void *)a2 + 1);
            if (v92 > 0xFFFFFFFFFFFFFFF7 || v92 + 8 > *((void *)a2 + 2)) {
              goto LABEL_332;
            }
            *(v83 - 1) = *(void *)(*(void *)a2 + v92);
            unint64_t v80 = *((void *)a2 + 2);
            unint64_t v79 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v79;
          }
          goto LABEL_333;
        case 0xAu:
          if (v24 != 2)
          {
            v222 = (char *)*((void *)this + 29);
            unint64_t v221 = *((void *)this + 30);
            if ((unint64_t)v222 >= v221)
            {
              v261 = (char *)*v348;
              uint64_t v262 = (v222 - (unsigned char *)*v348) >> 3;
              unint64_t v263 = v262 + 1;
              if ((unint64_t)(v262 + 1) >> 61) {
LABEL_576:
              }
                sub_10000EE98();
              uint64_t v264 = v221 - (void)v261;
              if (v264 >> 2 > v263) {
                unint64_t v263 = v264 >> 2;
              }
              if ((unint64_t)v264 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v265 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v265 = v263;
              }
              if (v265)
              {
                v266 = (char *)sub_10000EEB0((uint64_t)v340, v265);
                v261 = (char *)*((void *)this + 28);
                v222 = (char *)*((void *)this + 29);
              }
              else
              {
                v266 = 0;
              }
              v317 = &v266[8 * v262];
              *(void *)v317 = 0;
              v214 = v317 + 8;
              while (v222 != v261)
              {
                uint64_t v318 = *((void *)v222 - 1);
                v222 -= 8;
                *((void *)v317 - 1) = v318;
                v317 -= 8;
              }
              *((void *)this + 28) = v317;
              *((void *)this + 29) = v214;
              *((void *)this + 30) = &v266[8 * v265];
              if (v261) {
                operator delete(v261);
              }
            }
            else
            {
              *(void *)v222 = 0;
              v214 = v222 + 8;
            }
            *((void *)this + 29) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v93 = *((void *)a2 + 1);
          unint64_t v94 = *((void *)a2 + 2);
          while (v93 < v94 && !*((unsigned char *)a2 + 24))
          {
            v96 = (char *)*((void *)this + 29);
            unint64_t v95 = *((void *)this + 30);
            if ((unint64_t)v96 >= v95)
            {
              v98 = (char *)*v348;
              uint64_t v99 = (v96 - (unsigned char *)*v348) >> 3;
              unint64_t v100 = v99 + 1;
              if ((unint64_t)(v99 + 1) >> 61) {
                goto LABEL_576;
              }
              uint64_t v101 = v95 - (void)v98;
              if (v101 >> 2 > v100) {
                unint64_t v100 = v101 >> 2;
              }
              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v100;
              }
              if (v102)
              {
                v103 = (char *)sub_10000EEB0((uint64_t)v340, v102);
                v98 = (char *)*((void *)this + 28);
                v96 = (char *)*((void *)this + 29);
              }
              else
              {
                v103 = 0;
              }
              v104 = &v103[8 * v99];
              *(void *)v104 = 0;
              v97 = v104 + 8;
              while (v96 != v98)
              {
                uint64_t v105 = *((void *)v96 - 1);
                v96 -= 8;
                *((void *)v104 - 1) = v105;
                v104 -= 8;
              }
              *((void *)this + 28) = v104;
              *((void *)this + 29) = v97;
              *((void *)this + 30) = &v103[8 * v102];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              *(void *)v96 = 0;
              v97 = v96 + 8;
            }
            *((void *)this + 29) = v97;
            unint64_t v106 = *((void *)a2 + 1);
            if (v106 > 0xFFFFFFFFFFFFFFF7 || v106 + 8 > *((void *)a2 + 2)) {
              goto LABEL_332;
            }
            *(v97 - 1) = *(void *)(*(void *)a2 + v106);
            unint64_t v94 = *((void *)a2 + 2);
            unint64_t v93 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v93;
          }
          goto LABEL_333;
        case 0xBu:
          if (v24 != 2)
          {
            v224 = (char *)*((void *)this + 20);
            unint64_t v223 = *((void *)this + 21);
            if ((unint64_t)v224 >= v223)
            {
              v267 = (char *)*v349;
              uint64_t v268 = (v224 - (unsigned char *)*v349) >> 3;
              unint64_t v269 = v268 + 1;
              if ((unint64_t)(v268 + 1) >> 61) {
LABEL_577:
              }
                sub_10000EE98();
              uint64_t v270 = v223 - (void)v267;
              if (v270 >> 2 > v269) {
                unint64_t v269 = v270 >> 2;
              }
              if ((unint64_t)v270 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v271 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v271 = v269;
              }
              if (v271)
              {
                v272 = (char *)sub_10000EEB0((uint64_t)v341, v271);
                v267 = (char *)*((void *)this + 19);
                v224 = (char *)*((void *)this + 20);
              }
              else
              {
                v272 = 0;
              }
              v319 = &v272[8 * v268];
              *(void *)v319 = 0;
              v214 = v319 + 8;
              while (v224 != v267)
              {
                uint64_t v320 = *((void *)v224 - 1);
                v224 -= 8;
                *((void *)v319 - 1) = v320;
                v319 -= 8;
              }
              *((void *)this + 19) = v319;
              *((void *)this + 20) = v214;
              *((void *)this + 21) = &v272[8 * v271];
              if (v267) {
                operator delete(v267);
              }
            }
            else
            {
              *(void *)v224 = 0;
              v214 = v224 + 8;
            }
            *((void *)this + 20) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v107 = *((void *)a2 + 1);
          unint64_t v108 = *((void *)a2 + 2);
          while (v107 < v108 && !*((unsigned char *)a2 + 24))
          {
            v110 = (char *)*((void *)this + 20);
            unint64_t v109 = *((void *)this + 21);
            if ((unint64_t)v110 >= v109)
            {
              v112 = (char *)*v349;
              uint64_t v113 = (v110 - (unsigned char *)*v349) >> 3;
              unint64_t v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 61) {
                goto LABEL_577;
              }
              uint64_t v115 = v109 - (void)v112;
              if (v115 >> 2 > v114) {
                unint64_t v114 = v115 >> 2;
              }
              if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v116 = v114;
              }
              if (v116)
              {
                v117 = (char *)sub_10000EEB0((uint64_t)v341, v116);
                v112 = (char *)*((void *)this + 19);
                v110 = (char *)*((void *)this + 20);
              }
              else
              {
                v117 = 0;
              }
              v118 = &v117[8 * v113];
              *(void *)v118 = 0;
              v111 = v118 + 8;
              while (v110 != v112)
              {
                uint64_t v119 = *((void *)v110 - 1);
                v110 -= 8;
                *((void *)v118 - 1) = v119;
                v118 -= 8;
              }
              *((void *)this + 19) = v118;
              *((void *)this + 20) = v111;
              *((void *)this + 21) = &v117[8 * v116];
              if (v112) {
                operator delete(v112);
              }
            }
            else
            {
              *(void *)v110 = 0;
              v111 = v110 + 8;
            }
            *((void *)this + 20) = v111;
            unint64_t v120 = *((void *)a2 + 1);
            if (v120 > 0xFFFFFFFFFFFFFFF7 || v120 + 8 > *((void *)a2 + 2)) {
              goto LABEL_332;
            }
            *(v111 - 1) = *(void *)(*(void *)a2 + v120);
            unint64_t v108 = *((void *)a2 + 2);
            unint64_t v107 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v107;
          }
          goto LABEL_333;
        case 0xCu:
          if (v24 != 2)
          {
            v226 = (char *)*((void *)this + 17);
            unint64_t v225 = *((void *)this + 18);
            if ((unint64_t)v226 >= v225)
            {
              v273 = (char *)*v350;
              uint64_t v274 = (v226 - (unsigned char *)*v350) >> 3;
              unint64_t v275 = v274 + 1;
              if ((unint64_t)(v274 + 1) >> 61) {
LABEL_578:
              }
                sub_10000EE98();
              uint64_t v276 = v225 - (void)v273;
              if (v276 >> 2 > v275) {
                unint64_t v275 = v276 >> 2;
              }
              if ((unint64_t)v276 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v277 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v277 = v275;
              }
              if (v277)
              {
                v278 = (char *)sub_10000EEB0((uint64_t)v342, v277);
                v273 = (char *)*((void *)this + 16);
                v226 = (char *)*((void *)this + 17);
              }
              else
              {
                v278 = 0;
              }
              v321 = &v278[8 * v274];
              *(void *)v321 = 0;
              v214 = v321 + 8;
              while (v226 != v273)
              {
                uint64_t v322 = *((void *)v226 - 1);
                v226 -= 8;
                *((void *)v321 - 1) = v322;
                v321 -= 8;
              }
              *((void *)this + 16) = v321;
              *((void *)this + 17) = v214;
              *((void *)this + 18) = &v278[8 * v277];
              if (v273) {
                operator delete(v273);
              }
            }
            else
            {
              *(void *)v226 = 0;
              v214 = v226 + 8;
            }
            *((void *)this + 17) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v121 = *((void *)a2 + 1);
          unint64_t v122 = *((void *)a2 + 2);
          while (v121 < v122 && !*((unsigned char *)a2 + 24))
          {
            v124 = (char *)*((void *)this + 17);
            unint64_t v123 = *((void *)this + 18);
            if ((unint64_t)v124 >= v123)
            {
              v126 = (char *)*v350;
              uint64_t v127 = (v124 - (unsigned char *)*v350) >> 3;
              unint64_t v128 = v127 + 1;
              if ((unint64_t)(v127 + 1) >> 61) {
                goto LABEL_578;
              }
              uint64_t v129 = v123 - (void)v126;
              if (v129 >> 2 > v128) {
                unint64_t v128 = v129 >> 2;
              }
              if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v130 = v128;
              }
              if (v130)
              {
                v131 = (char *)sub_10000EEB0((uint64_t)v342, v130);
                v126 = (char *)*((void *)this + 16);
                v124 = (char *)*((void *)this + 17);
              }
              else
              {
                v131 = 0;
              }
              v132 = &v131[8 * v127];
              *(void *)v132 = 0;
              v125 = v132 + 8;
              while (v124 != v126)
              {
                uint64_t v133 = *((void *)v124 - 1);
                v124 -= 8;
                *((void *)v132 - 1) = v133;
                v132 -= 8;
              }
              *((void *)this + 16) = v132;
              *((void *)this + 17) = v125;
              *((void *)this + 18) = &v131[8 * v130];
              if (v126) {
                operator delete(v126);
              }
            }
            else
            {
              *(void *)v124 = 0;
              v125 = v124 + 8;
            }
            *((void *)this + 17) = v125;
            unint64_t v134 = *((void *)a2 + 1);
            if (v134 > 0xFFFFFFFFFFFFFFF7 || v134 + 8 > *((void *)a2 + 2)) {
              goto LABEL_332;
            }
            *(v125 - 1) = *(void *)(*(void *)a2 + v134);
            unint64_t v122 = *((void *)a2 + 2);
            unint64_t v121 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v121;
          }
          goto LABEL_333;
        case 0xDu:
          if (v24 != 2)
          {
            v228 = (char *)*((void *)this + 32);
            unint64_t v227 = *((void *)this + 33);
            if ((unint64_t)v228 >= v227)
            {
              v279 = (char *)*v351;
              uint64_t v280 = (v228 - (unsigned char *)*v351) >> 3;
              unint64_t v281 = v280 + 1;
              if ((unint64_t)(v280 + 1) >> 61) {
LABEL_579:
              }
                sub_10000EE98();
              uint64_t v282 = v227 - (void)v279;
              if (v282 >> 2 > v281) {
                unint64_t v281 = v282 >> 2;
              }
              if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v283 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v283 = v281;
              }
              if (v283)
              {
                v284 = (char *)sub_10000EEB0((uint64_t)v343, v283);
                v279 = (char *)*((void *)this + 31);
                v228 = (char *)*((void *)this + 32);
              }
              else
              {
                v284 = 0;
              }
              v323 = &v284[8 * v280];
              *(void *)v323 = 0;
              v214 = v323 + 8;
              while (v228 != v279)
              {
                uint64_t v324 = *((void *)v228 - 1);
                v228 -= 8;
                *((void *)v323 - 1) = v324;
                v323 -= 8;
              }
              *((void *)this + 31) = v323;
              *((void *)this + 32) = v214;
              *((void *)this + 33) = &v284[8 * v283];
              if (v279) {
                operator delete(v279);
              }
            }
            else
            {
              *(void *)v228 = 0;
              v214 = v228 + 8;
            }
            *((void *)this + 32) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v135 = *((void *)a2 + 1);
          unint64_t v136 = *((void *)a2 + 2);
          while (v135 < v136 && !*((unsigned char *)a2 + 24))
          {
            v138 = (char *)*((void *)this + 32);
            unint64_t v137 = *((void *)this + 33);
            if ((unint64_t)v138 >= v137)
            {
              v140 = (char *)*v351;
              uint64_t v141 = (v138 - (unsigned char *)*v351) >> 3;
              unint64_t v142 = v141 + 1;
              if ((unint64_t)(v141 + 1) >> 61) {
                goto LABEL_579;
              }
              uint64_t v143 = v137 - (void)v140;
              if (v143 >> 2 > v142) {
                unint64_t v142 = v143 >> 2;
              }
              if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v144 = v142;
              }
              if (v144)
              {
                v145 = (char *)sub_10000EEB0((uint64_t)v343, v144);
                v140 = (char *)*((void *)this + 31);
                v138 = (char *)*((void *)this + 32);
              }
              else
              {
                v145 = 0;
              }
              v146 = &v145[8 * v141];
              *(void *)v146 = 0;
              v139 = v146 + 8;
              while (v138 != v140)
              {
                uint64_t v147 = *((void *)v138 - 1);
                v138 -= 8;
                *((void *)v146 - 1) = v147;
                v146 -= 8;
              }
              *((void *)this + 31) = v146;
              *((void *)this + 32) = v139;
              *((void *)this + 33) = &v145[8 * v144];
              if (v140) {
                operator delete(v140);
              }
            }
            else
            {
              *(void *)v138 = 0;
              v139 = v138 + 8;
            }
            *((void *)this + 32) = v139;
            unint64_t v148 = *((void *)a2 + 1);
            if (v148 > 0xFFFFFFFFFFFFFFF7 || v148 + 8 > *((void *)a2 + 2)) {
              goto LABEL_332;
            }
            *(v139 - 1) = *(void *)(*(void *)a2 + v148);
            unint64_t v136 = *((void *)a2 + 2);
            unint64_t v135 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v135;
          }
          goto LABEL_333;
        case 0xEu:
          if (v24 != 2)
          {
            v230 = (char *)*((void *)this + 5);
            unint64_t v229 = *((void *)this + 6);
            if ((unint64_t)v230 >= v229)
            {
              v285 = (char *)*v352;
              uint64_t v286 = (v230 - (unsigned char *)*v352) >> 3;
              unint64_t v287 = v286 + 1;
              if ((unint64_t)(v286 + 1) >> 61) {
LABEL_580:
              }
                sub_10000EE98();
              uint64_t v288 = v229 - (void)v285;
              if (v288 >> 2 > v287) {
                unint64_t v287 = v288 >> 2;
              }
              if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v289 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v289 = v287;
              }
              if (v289)
              {
                v290 = (char *)sub_10000EEB0((uint64_t)v344, v289);
                v285 = (char *)*((void *)this + 4);
                v230 = (char *)*((void *)this + 5);
              }
              else
              {
                v290 = 0;
              }
              v325 = &v290[8 * v286];
              *(void *)v325 = 0;
              v214 = v325 + 8;
              while (v230 != v285)
              {
                uint64_t v326 = *((void *)v230 - 1);
                v230 -= 8;
                *((void *)v325 - 1) = v326;
                v325 -= 8;
              }
              *((void *)this + 4) = v325;
              *((void *)this + 5) = v214;
              *((void *)this + 6) = &v290[8 * v289];
              if (v285) {
                operator delete(v285);
              }
            }
            else
            {
              *(void *)v230 = 0;
              v214 = v230 + 8;
            }
            *((void *)this + 5) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v149 = *((void *)a2 + 1);
          unint64_t v150 = *((void *)a2 + 2);
          while (v149 < v150 && !*((unsigned char *)a2 + 24))
          {
            v152 = (char *)*((void *)this + 5);
            unint64_t v151 = *((void *)this + 6);
            if ((unint64_t)v152 >= v151)
            {
              v154 = (char *)*v352;
              uint64_t v155 = (v152 - (unsigned char *)*v352) >> 3;
              unint64_t v156 = v155 + 1;
              if ((unint64_t)(v155 + 1) >> 61) {
                goto LABEL_580;
              }
              uint64_t v157 = v151 - (void)v154;
              if (v157 >> 2 > v156) {
                unint64_t v156 = v157 >> 2;
              }
              if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v158 = v156;
              }
              if (v158)
              {
                v159 = (char *)sub_10000EEB0((uint64_t)v344, v158);
                v154 = (char *)*((void *)this + 4);
                v152 = (char *)*((void *)this + 5);
              }
              else
              {
                v159 = 0;
              }
              v160 = &v159[8 * v155];
              *(void *)v160 = 0;
              v153 = v160 + 8;
              while (v152 != v154)
              {
                uint64_t v161 = *((void *)v152 - 1);
                v152 -= 8;
                *((void *)v160 - 1) = v161;
                v160 -= 8;
              }
              *((void *)this + 4) = v160;
              *((void *)this + 5) = v153;
              *((void *)this + 6) = &v159[8 * v158];
              if (v154) {
                operator delete(v154);
              }
            }
            else
            {
              *(void *)v152 = 0;
              v153 = v152 + 8;
            }
            *((void *)this + 5) = v153;
            unint64_t v162 = *((void *)a2 + 1);
            if (v162 > 0xFFFFFFFFFFFFFFF7 || v162 + 8 > *((void *)a2 + 2)) {
              goto LABEL_332;
            }
            *(v153 - 1) = *(void *)(*(void *)a2 + v162);
            unint64_t v150 = *((void *)a2 + 2);
            unint64_t v149 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v149;
          }
          goto LABEL_333;
        case 0xFu:
          if (v24 != 2)
          {
            v232 = (char *)*((void *)this + 26);
            unint64_t v231 = *((void *)this + 27);
            if ((unint64_t)v232 >= v231)
            {
              v291 = (char *)*v353;
              uint64_t v292 = (v232 - (unsigned char *)*v353) >> 3;
              unint64_t v293 = v292 + 1;
              if ((unint64_t)(v292 + 1) >> 61) {
LABEL_581:
              }
                sub_10000EE98();
              uint64_t v294 = v231 - (void)v291;
              if (v294 >> 2 > v293) {
                unint64_t v293 = v294 >> 2;
              }
              if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v295 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v295 = v293;
              }
              if (v295)
              {
                v296 = (char *)sub_10000EEB0((uint64_t)v345, v295);
                v291 = (char *)*((void *)this + 25);
                v232 = (char *)*((void *)this + 26);
              }
              else
              {
                v296 = 0;
              }
              v327 = &v296[8 * v292];
              *(void *)v327 = 0;
              v214 = v327 + 8;
              while (v232 != v291)
              {
                uint64_t v328 = *((void *)v232 - 1);
                v232 -= 8;
                *((void *)v327 - 1) = v328;
                v327 -= 8;
              }
              *((void *)this + 25) = v327;
              *((void *)this + 26) = v214;
              *((void *)this + 27) = &v296[8 * v295];
              if (v291) {
                operator delete(v291);
              }
            }
            else
            {
              *(void *)v232 = 0;
              v214 = v232 + 8;
            }
            *((void *)this + 26) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v163 = *((void *)a2 + 1);
          unint64_t v164 = *((void *)a2 + 2);
          while (v163 < v164 && !*((unsigned char *)a2 + 24))
          {
            v166 = (char *)*((void *)this + 26);
            unint64_t v165 = *((void *)this + 27);
            if ((unint64_t)v166 >= v165)
            {
              v168 = (char *)*v353;
              uint64_t v169 = (v166 - (unsigned char *)*v353) >> 3;
              unint64_t v170 = v169 + 1;
              if ((unint64_t)(v169 + 1) >> 61) {
                goto LABEL_581;
              }
              uint64_t v171 = v165 - (void)v168;
              if (v171 >> 2 > v170) {
                unint64_t v170 = v171 >> 2;
              }
              if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v172 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v172 = v170;
              }
              if (v172)
              {
                v173 = (char *)sub_10000EEB0((uint64_t)v345, v172);
                v168 = (char *)*((void *)this + 25);
                v166 = (char *)*((void *)this + 26);
              }
              else
              {
                v173 = 0;
              }
              v174 = &v173[8 * v169];
              *(void *)v174 = 0;
              v167 = v174 + 8;
              while (v166 != v168)
              {
                uint64_t v175 = *((void *)v166 - 1);
                v166 -= 8;
                *((void *)v174 - 1) = v175;
                v174 -= 8;
              }
              *((void *)this + 25) = v174;
              *((void *)this + 26) = v167;
              *((void *)this + 27) = &v173[8 * v172];
              if (v168) {
                operator delete(v168);
              }
            }
            else
            {
              *(void *)v166 = 0;
              v167 = v166 + 8;
            }
            *((void *)this + 26) = v167;
            unint64_t v176 = *((void *)a2 + 1);
            if (v176 > 0xFFFFFFFFFFFFFFF7 || v176 + 8 > *((void *)a2 + 2)) {
              goto LABEL_332;
            }
            *(v167 - 1) = *(void *)(*(void *)a2 + v176);
            unint64_t v164 = *((void *)a2 + 2);
            unint64_t v163 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v163;
          }
          goto LABEL_333;
        case 0x10u:
          if (v24 != 2)
          {
            v234 = (char *)*((void *)this + 11);
            unint64_t v233 = *((void *)this + 12);
            if ((unint64_t)v234 >= v233)
            {
              v297 = (char *)*v354;
              uint64_t v298 = (v234 - (unsigned char *)*v354) >> 3;
              unint64_t v299 = v298 + 1;
              if ((unint64_t)(v298 + 1) >> 61) {
LABEL_582:
              }
                sub_10000EE98();
              uint64_t v300 = v233 - (void)v297;
              if (v300 >> 2 > v299) {
                unint64_t v299 = v300 >> 2;
              }
              if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v301 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v301 = v299;
              }
              if (v301)
              {
                v302 = (char *)sub_10000EEB0((uint64_t)v346, v301);
                v297 = (char *)*((void *)this + 10);
                v234 = (char *)*((void *)this + 11);
              }
              else
              {
                v302 = 0;
              }
              v329 = &v302[8 * v298];
              *(void *)v329 = 0;
              v214 = v329 + 8;
              while (v234 != v297)
              {
                uint64_t v330 = *((void *)v234 - 1);
                v234 -= 8;
                *((void *)v329 - 1) = v330;
                v329 -= 8;
              }
              *((void *)this + 10) = v329;
              *((void *)this + 11) = v214;
              *((void *)this + 12) = &v302[8 * v301];
              if (v297) {
                operator delete(v297);
              }
            }
            else
            {
              *(void *)v234 = 0;
              v214 = v234 + 8;
            }
            *((void *)this + 11) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v177 = *((void *)a2 + 1);
          unint64_t v178 = *((void *)a2 + 2);
          while (v177 < v178 && !*((unsigned char *)a2 + 24))
          {
            v180 = (char *)*((void *)this + 11);
            unint64_t v179 = *((void *)this + 12);
            if ((unint64_t)v180 >= v179)
            {
              v182 = (char *)*v354;
              uint64_t v183 = (v180 - (unsigned char *)*v354) >> 3;
              unint64_t v184 = v183 + 1;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_582;
              }
              uint64_t v185 = v179 - (void)v182;
              if (v185 >> 2 > v184) {
                unint64_t v184 = v185 >> 2;
              }
              if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v184;
              }
              if (v186)
              {
                v187 = (char *)sub_10000EEB0((uint64_t)v346, v186);
                v182 = (char *)*((void *)this + 10);
                v180 = (char *)*((void *)this + 11);
              }
              else
              {
                v187 = 0;
              }
              v188 = &v187[8 * v183];
              *(void *)v188 = 0;
              v181 = v188 + 8;
              while (v180 != v182)
              {
                uint64_t v189 = *((void *)v180 - 1);
                v180 -= 8;
                *((void *)v188 - 1) = v189;
                v188 -= 8;
              }
              *((void *)this + 10) = v188;
              *((void *)this + 11) = v181;
              *((void *)this + 12) = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *(void *)v180 = 0;
              v181 = v180 + 8;
            }
            *((void *)this + 11) = v181;
            unint64_t v190 = *((void *)a2 + 1);
            if (v190 > 0xFFFFFFFFFFFFFFF7 || v190 + 8 > *((void *)a2 + 2)) {
              goto LABEL_332;
            }
            *(v181 - 1) = *(void *)(*(void *)a2 + v190);
            unint64_t v178 = *((void *)a2 + 2);
            unint64_t v177 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v177;
          }
          goto LABEL_333;
        case 0x11u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v191 = *((void *)a2 + 1);
            unint64_t v192 = *((void *)a2 + 2);
            while (v191 < v192 && !*((unsigned char *)a2 + 24))
            {
              v194 = (char *)*((void *)this + 8);
              unint64_t v193 = *((void *)this + 9);
              if ((unint64_t)v194 >= v193)
              {
                v196 = (char *)*v355;
                uint64_t v197 = (v194 - (unsigned char *)*v355) >> 3;
                unint64_t v198 = v197 + 1;
                if ((unint64_t)(v197 + 1) >> 61) {
                  goto LABEL_583;
                }
                uint64_t v199 = v193 - (void)v196;
                if (v199 >> 2 > v198) {
                  unint64_t v198 = v199 >> 2;
                }
                if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v200 = v198;
                }
                if (v200)
                {
                  v201 = (char *)sub_10000EEB0((uint64_t)v347, v200);
                  v196 = (char *)*((void *)this + 7);
                  v194 = (char *)*((void *)this + 8);
                }
                else
                {
                  v201 = 0;
                }
                v202 = &v201[8 * v197];
                *(void *)v202 = 0;
                v195 = v202 + 8;
                while (v194 != v196)
                {
                  uint64_t v203 = *((void *)v194 - 1);
                  v194 -= 8;
                  *((void *)v202 - 1) = v203;
                  v202 -= 8;
                }
                *((void *)this + 7) = v202;
                *((void *)this + 8) = v195;
                *((void *)this + 9) = &v201[8 * v200];
                if (v196) {
                  operator delete(v196);
                }
              }
              else
              {
                *(void *)v194 = 0;
                v195 = v194 + 8;
              }
              *((void *)this + 8) = v195;
              unint64_t v204 = *((void *)a2 + 1);
              if (v204 > 0xFFFFFFFFFFFFFFF7 || v204 + 8 > *((void *)a2 + 2))
              {
LABEL_332:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v195 - 1) = *(void *)(*(void *)a2 + v204);
              unint64_t v192 = *((void *)a2 + 2);
              unint64_t v191 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v191;
            }
LABEL_333:
            PB::Reader::recallMark();
          }
          else
          {
            v236 = (char *)*((void *)this + 8);
            unint64_t v235 = *((void *)this + 9);
            if ((unint64_t)v236 >= v235)
            {
              v303 = (char *)*v355;
              uint64_t v304 = (v236 - (unsigned char *)*v355) >> 3;
              unint64_t v305 = v304 + 1;
              if ((unint64_t)(v304 + 1) >> 61) {
LABEL_583:
              }
                sub_10000EE98();
              uint64_t v306 = v235 - (void)v303;
              if (v306 >> 2 > v305) {
                unint64_t v305 = v306 >> 2;
              }
              if ((unint64_t)v306 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v307 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v307 = v305;
              }
              if (v307)
              {
                v308 = (char *)sub_10000EEB0((uint64_t)v347, v307);
                v303 = (char *)*((void *)this + 7);
                v236 = (char *)*((void *)this + 8);
              }
              else
              {
                v308 = 0;
              }
              v331 = &v308[8 * v304];
              *(void *)v331 = 0;
              v214 = v331 + 8;
              while (v236 != v303)
              {
                uint64_t v332 = *((void *)v236 - 1);
                v236 -= 8;
                *((void *)v331 - 1) = v332;
                v331 -= 8;
              }
              *((void *)this + 7) = v331;
              *((void *)this + 8) = v214;
              *((void *)this + 9) = &v308[8 * v307];
              if (v303) {
                operator delete(v303);
              }
            }
            else
            {
              *(void *)v236 = 0;
              v214 = v236 + 8;
            }
            *((void *)this + 8) = v214;
LABEL_556:
            unint64_t v333 = *((void *)a2 + 1);
            if (v333 <= 0xFFFFFFFFFFFFFFF7 && v333 + 8 <= *((void *)a2 + 2))
            {
              *(v214 - 1) = *(void *)(*(void *)a2 + v333);
LABEL_560:
              uint64_t v207 = *((void *)a2 + 1) + 8;
LABEL_561:
              *((void *)a2 + 1) = v207;
            }
            else
            {
LABEL_558:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_562:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 0x12u:
          *((unsigned char *)this + 340) |= 0x20u;
          unint64_t v205 = *((void *)a2 + 1);
          if (v205 > 0xFFFFFFFFFFFFFFFBLL || v205 + 4 > *((void *)a2 + 2)) {
            goto LABEL_558;
          }
          *((_DWORD *)this + 83) = *(_DWORD *)(*(void *)a2 + v205);
          goto LABEL_340;
        case 0x13u:
          *((unsigned char *)this + 340) |= 0x10u;
          unint64_t v206 = *((void *)a2 + 1);
          if (v206 > 0xFFFFFFFFFFFFFFFBLL || v206 + 4 > *((void *)a2 + 2)) {
            goto LABEL_558;
          }
          *((_DWORD *)this + 82) = *(_DWORD *)(*(void *)a2 + v206);
LABEL_340:
          uint64_t v207 = *((void *)a2 + 1) + 4;
          goto LABEL_561;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_562;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VIOEstimation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 340);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 336), 1u);
    char v4 = *(unsigned char *)(v3 + 340);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }
  else if ((*(unsigned char *)(this + 340) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 312), 2u);
  char v4 = *(unsigned char *)(v3 + 340);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_50:
    this = PB::Writer::write(a2, *(double *)(v3 + 320), 4u);
    if ((*(unsigned char *)(v3 + 340) & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 296), 3u);
  char v4 = *(unsigned char *)(v3 + 340);
  if ((v4 & 8) != 0) {
    goto LABEL_50;
  }
LABEL_5:
  if ((v4 & 2) != 0) {
LABEL_6:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 304), 5u);
LABEL_7:
  uint64_t v5 = *(double **)(v3 + 176);
  uint64_t v6 = *(double **)(v3 + 184);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 6u);
  }
  uint64_t v8 = *(double **)(v3 + 104);
  uint64_t v9 = *(double **)(v3 + 112);
  while (v8 != v9)
  {
    double v10 = *v8++;
    this = PB::Writer::write(a2, v10, 7u);
  }
  char v11 = *(double **)(v3 + 272);
  uint64_t v12 = *(double **)(v3 + 280);
  while (v11 != v12)
  {
    double v13 = *v11++;
    this = PB::Writer::write(a2, v13, 8u);
  }
  unsigned int v14 = *(double **)(v3 + 8);
  unint64_t v15 = *(double **)(v3 + 16);
  while (v14 != v15)
  {
    double v16 = *v14++;
    this = PB::Writer::write(a2, v16, 9u);
  }
  char v17 = *(double **)(v3 + 224);
  BOOL v18 = *(double **)(v3 + 232);
  while (v17 != v18)
  {
    double v19 = *v17++;
    this = PB::Writer::write(a2, v19, 0xAu);
  }
  unsigned int v20 = *(double **)(v3 + 152);
  unint64_t v21 = *(double **)(v3 + 160);
  while (v20 != v21)
  {
    double v22 = *v20++;
    this = PB::Writer::write(a2, v22, 0xBu);
  }
  double v23 = *(double **)(v3 + 128);
  int v24 = *(double **)(v3 + 136);
  while (v23 != v24)
  {
    double v25 = *v23++;
    this = PB::Writer::write(a2, v25, 0xCu);
  }
  unint64_t v26 = *(double **)(v3 + 248);
  uint64_t v27 = *(double **)(v3 + 256);
  while (v26 != v27)
  {
    double v28 = *v26++;
    this = PB::Writer::write(a2, v28, 0xDu);
  }
  unsigned int v29 = *(double **)(v3 + 32);
  uint64_t v30 = *(double **)(v3 + 40);
  while (v29 != v30)
  {
    double v31 = *v29++;
    this = PB::Writer::write(a2, v31, 0xEu);
  }
  char v32 = *(double **)(v3 + 200);
  unint64_t v33 = *(double **)(v3 + 208);
  while (v32 != v33)
  {
    double v34 = *v32++;
    this = PB::Writer::write(a2, v34, 0xFu);
  }
  unint64_t v35 = *(double **)(v3 + 80);
  unint64_t v36 = *(double **)(v3 + 88);
  while (v35 != v36)
  {
    double v37 = *v35++;
    this = PB::Writer::write(a2, v37, 0x10u);
  }
  unint64_t v38 = *(double **)(v3 + 56);
  unint64_t v39 = *(double **)(v3 + 64);
  while (v38 != v39)
  {
    double v40 = *v38++;
    this = PB::Writer::write(a2, v40, 0x11u);
  }
  char v41 = *(unsigned char *)(v3 + 340);
  if ((v41 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 332), 0x12u);
    char v41 = *(unsigned char *)(v3 + 340);
  }
  if ((v41 & 0x10) != 0)
  {
    float v42 = *(float *)(v3 + 328);
    return PB::Writer::write(a2, v42, 0x13u);
  }
  return this;
}

uint64_t CMMsl::VIOEstimation::hash_value(CMMsl::VIOEstimation *this)
{
  if ((*((unsigned char *)this + 340) & 0x40) == 0)
  {
    uint64_t v27 = 0;
    if ((*((unsigned char *)this + 340) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    double v26 = 0.0;
    if (*((unsigned char *)this + 340)) {
      goto LABEL_6;
    }
LABEL_17:
    double v25 = 0.0;
    if ((*((unsigned char *)this + 340) & 8) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  uint64_t v27 = *((int *)this + 84);
  if ((*((unsigned char *)this + 340) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  double v2 = *((double *)this + 39);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  double v26 = v2;
  if ((*((unsigned char *)this + 340) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  double v3 = *((double *)this + 37);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v25 = v3;
  if ((*((unsigned char *)this + 340) & 8) != 0)
  {
LABEL_9:
    double v4 = *((double *)this + 40);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    double v24 = v4;
    if ((*((unsigned char *)this + 340) & 2) != 0) {
      goto LABEL_12;
    }
LABEL_19:
    double v23 = 0.0;
    goto LABEL_20;
  }
LABEL_18:
  double v24 = 0.0;
  if ((*((unsigned char *)this + 340) & 2) == 0) {
    goto LABEL_19;
  }
LABEL_12:
  double v5 = *((double *)this + 38);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  double v23 = v5;
LABEL_20:
  uint64_t v22 = PBHashBytes();
  uint64_t v21 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  uint64_t v7 = PBHashBytes();
  uint64_t v8 = PBHashBytes();
  uint64_t v9 = PBHashBytes();
  uint64_t v10 = PBHashBytes();
  uint64_t v11 = PBHashBytes();
  uint64_t v12 = PBHashBytes();
  uint64_t v13 = PBHashBytes();
  uint64_t v14 = PBHashBytes();
  uint64_t v15 = PBHashBytes();
  if ((*((unsigned char *)this + 340) & 0x20) != 0)
  {
    float v19 = *((float *)this + 83);
    uint64_t v16 = LODWORD(v19);
    if (v19 == 0.0) {
      uint64_t v16 = 0;
    }
    if ((*((unsigned char *)this + 340) & 0x10) != 0) {
      goto LABEL_22;
    }
LABEL_28:
    uint64_t v18 = 0;
    return *(void *)&v26 ^ v27 ^ *(void *)&v25 ^ *(void *)&v24 ^ *(void *)&v23 ^ v22 ^ v21 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
  }
  uint64_t v16 = 0;
  if ((*((unsigned char *)this + 340) & 0x10) == 0) {
    goto LABEL_28;
  }
LABEL_22:
  float v17 = *((float *)this + 82);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  return *(void *)&v26 ^ v27 ^ *(void *)&v25 ^ *(void *)&v24 ^ *(void *)&v23 ^ v22 ^ v21 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
}

void CMMsl::VIOPose::~VIOPose(CMMsl::VIOPose *this)
{
  *(void *)this = off_1003A9998;
  double v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VIOPose::~VIOPose(this);

  operator delete();
}

CMMsl::VIOPose *CMMsl::VIOPose::VIOPose(CMMsl::VIOPose *this, const CMMsl::VIOPose *a2)
{
  *(void *)this = off_1003A9998;
  *((void *)this + 1) = 0;
  double v4 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 28) = 0;
  __int16 v5 = *((_WORD *)a2 + 56);
  if (v5)
  {
    uint64_t v7 = *((void *)a2 + 4);
    __int16 v6 = 1;
    *((_WORD *)this + 56) = 1;
    *((void *)this + 4) = v7;
    __int16 v5 = *((_WORD *)a2 + 56);
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = 0;
  if ((*((_WORD *)a2 + 56) & 0x200) != 0)
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 13);
    v6 |= 0x200u;
    *((_WORD *)this + 56) = v6;
    *((void *)this + 13) = v8;
    __int16 v5 = *((_WORD *)a2 + 56);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    uint64_t v9 = *((void *)a2 + 5);
    *((_WORD *)this + 56) = v6 | 2;
    *((void *)this + 5) = v9;
  }
  if (this != a2) {
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  __int16 v10 = *((_WORD *)a2 + 56);
  if ((v10 & 8) != 0)
  {
    uint64_t v13 = *((void *)a2 + 7);
    *((_WORD *)this + 56) |= 8u;
    *((void *)this + 7) = v13;
    __int16 v10 = *((_WORD *)a2 + 56);
    if ((v10 & 0x10) == 0)
    {
LABEL_12:
      if ((v10 & 0x20) == 0) {
        goto LABEL_13;
      }
      goto LABEL_21;
    }
  }
  else if ((v10 & 0x10) == 0)
  {
    goto LABEL_12;
  }
  uint64_t v14 = *((void *)a2 + 8);
  *((_WORD *)this + 56) |= 0x10u;
  *((void *)this + 8) = v14;
  __int16 v10 = *((_WORD *)a2 + 56);
  if ((v10 & 0x20) == 0)
  {
LABEL_13:
    if ((v10 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v15 = *((void *)a2 + 9);
  *((_WORD *)this + 56) |= 0x20u;
  *((void *)this + 9) = v15;
  __int16 v10 = *((_WORD *)a2 + 56);
  if ((v10 & 4) == 0)
  {
LABEL_14:
    if ((v10 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v16 = *((void *)a2 + 6);
  *((_WORD *)this + 56) |= 4u;
  *((void *)this + 6) = v16;
  __int16 v10 = *((_WORD *)a2 + 56);
  if ((v10 & 0x80) == 0)
  {
LABEL_15:
    if ((v10 & 0x100) == 0) {
      goto LABEL_16;
    }
LABEL_24:
    uint64_t v18 = *((void *)a2 + 12);
    *((_WORD *)this + 56) |= 0x100u;
    *((void *)this + 12) = v18;
    if ((*((_WORD *)a2 + 56) & 0x40) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_23:
  uint64_t v17 = *((void *)a2 + 11);
  *((_WORD *)this + 56) |= 0x80u;
  *((void *)this + 11) = v17;
  __int16 v10 = *((_WORD *)a2 + 56);
  if ((v10 & 0x100) != 0) {
    goto LABEL_24;
  }
LABEL_16:
  if ((v10 & 0x40) != 0)
  {
LABEL_17:
    uint64_t v11 = *((void *)a2 + 10);
    *((_WORD *)this + 56) |= 0x40u;
    *((void *)this + 10) = v11;
  }
  return this;
}

CMMsl *CMMsl::VIOPose::operator=(CMMsl *a1, const CMMsl::VIOPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::VIOPose::VIOPose((CMMsl::VIOPose *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOPose *)v5, v3);
    CMMsl::VIOPose::~VIOPose((CMMsl::VIOPose *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VIOPose *a2, CMMsl::VIOPose *a3)
{
  int v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  uint64_t v12 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v12;
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
  uint64_t v14 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v14;
  uint64_t v15 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v15;
  double result = *((double *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((double *)a2 + 10) = result;
  return result;
}

uint64_t CMMsl::VIOPose::VIOPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9998;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

CMMsl *CMMsl::VIOPose::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VIOPose::VIOPose((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOPose *)v5, v3);
    CMMsl::VIOPose::~VIOPose((CMMsl::VIOPose *)v5);
  }
  return a1;
}

uint64_t CMMsl::VIOPose::formatText(CMMsl::VIOPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 56);
  if (v5)
  {
    PB::TextFormatter::format(a2, "currentTimestamp", *((double *)this + 4));
    __int16 v5 = *((_WORD *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "latestInertialTimestamp", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "latestInertialTimestampMeta", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "positionX", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "positionY", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 56);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "positionZ", *((double *)this + 9));
  __int16 v5 = *((_WORD *)this + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "predictionComputeTimeMeta", *((double *)this + 10));
  __int16 v5 = *((_WORD *)this + 56);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "predictionTimeMeta", *((double *)this + 11));
  if ((*((_WORD *)this + 56) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "propagationTimeMeta", *((double *)this + 12));
LABEL_11:
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "rotationMatrixElement", v8);
  }
  if ((*((_WORD *)this + 56) & 0x200) != 0) {
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 13));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VIOPose::readFrom(CMMsl::VIOPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_WORD *)this + 56) |= 1u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
            goto LABEL_99;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v23);
          goto LABEL_101;
        case 2u:
          *((_WORD *)this + 56) |= 0x200u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
            goto LABEL_99;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v24);
          goto LABEL_101;
        case 3u:
          *((_WORD *)this + 56) |= 2u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_99;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v25);
          goto LABEL_101;
        case 4u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v26 = *((void *)a2 + 1);
            unint64_t v27 = *((void *)a2 + 2);
            while (v26 < v27 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v29 = (char *)*((void *)this + 2);
              unint64_t v28 = *((void *)this + 3);
              if ((unint64_t)v29 >= v28)
              {
                double v31 = (char *)*v8;
                uint64_t v32 = (v29 - (unsigned char *)*v8) >> 3;
                unint64_t v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 61) {
                  goto LABEL_110;
                }
                uint64_t v34 = v28 - (void)v31;
                if (v34 >> 2 > v33) {
                  unint64_t v33 = v34 >> 2;
                }
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v35 = v33;
                }
                if (v35)
                {
                  unint64_t v36 = (char *)sub_10000EEB0((uint64_t)v9, v35);
                  double v31 = (char *)*((void *)this + 1);
                  unsigned int v29 = (char *)*((void *)this + 2);
                }
                else
                {
                  unint64_t v36 = 0;
                }
                double v37 = &v36[8 * v32];
                *(void *)double v37 = 0;
                uint64_t v30 = v37 + 8;
                while (v29 != v31)
                {
                  uint64_t v38 = *((void *)v29 - 1);
                  v29 -= 8;
                  *((void *)v37 - 1) = v38;
                  v37 -= 8;
                }
                *((void *)this + 1) = v37;
                *((void *)this + 2) = v30;
                *((void *)this + 3) = &v36[8 * v35];
                if (v31) {
                  operator delete(v31);
                }
              }
              else
              {
                *(void *)unsigned int v29 = 0;
                uint64_t v30 = v29 + 8;
              }
              *((void *)this + 2) = v30;
              unint64_t v39 = *((void *)a2 + 1);
              if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v30 - 1) = *(void *)(*(void *)a2 + v39);
              unint64_t v27 = *((void *)a2 + 2);
              unint64_t v26 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v26;
            }
            PB::Reader::recallMark();
          }
          else
          {
            unsigned int v48 = (char *)*((void *)this + 2);
            unint64_t v47 = *((void *)this + 3);
            if ((unint64_t)v48 >= v47)
            {
              unint64_t v50 = (char *)*v8;
              uint64_t v51 = (v48 - (unsigned char *)*v8) >> 3;
              unint64_t v52 = v51 + 1;
              if ((unint64_t)(v51 + 1) >> 61) {
LABEL_110:
              }
                sub_10000EE98();
              uint64_t v53 = v47 - (void)v50;
              if (v53 >> 2 > v52) {
                unint64_t v52 = v53 >> 2;
              }
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v54 = v52;
              }
              if (v54)
              {
                unint64_t v55 = (char *)sub_10000EEB0((uint64_t)v9, v54);
                unint64_t v50 = (char *)*((void *)this + 1);
                unsigned int v48 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v55 = 0;
              }
              char v56 = &v55[8 * v51];
              *(void *)char v56 = 0;
              uint64_t v49 = v56 + 8;
              while (v48 != v50)
              {
                uint64_t v57 = *((void *)v48 - 1);
                v48 -= 8;
                *((void *)v56 - 1) = v57;
                v56 -= 8;
              }
              *((void *)this + 1) = v56;
              *((void *)this + 2) = v49;
              *((void *)this + 3) = &v55[8 * v54];
              if (v50) {
                operator delete(v50);
              }
            }
            else
            {
              *(void *)unsigned int v48 = 0;
              uint64_t v49 = v48 + 8;
            }
            *((void *)this + 2) = v49;
            unint64_t v58 = *((void *)a2 + 1);
            if (v58 <= 0xFFFFFFFFFFFFFFF7 && v58 + 8 <= *((void *)a2 + 2))
            {
              *(v49 - 1) = *(void *)(*(void *)a2 + v58);
LABEL_101:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_99:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_102:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 5u:
          *((_WORD *)this + 56) |= 8u;
          unint64_t v40 = *((void *)a2 + 1);
          if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((void *)a2 + 2)) {
            goto LABEL_99;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v40);
          goto LABEL_101;
        case 6u:
          *((_WORD *)this + 56) |= 0x10u;
          unint64_t v41 = *((void *)a2 + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((void *)a2 + 2)) {
            goto LABEL_99;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v41);
          goto LABEL_101;
        case 7u:
          *((_WORD *)this + 56) |= 0x20u;
          unint64_t v42 = *((void *)a2 + 1);
          if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((void *)a2 + 2)) {
            goto LABEL_99;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v42);
          goto LABEL_101;
        case 8u:
          *((_WORD *)this + 56) |= 4u;
          unint64_t v43 = *((void *)a2 + 1);
          if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((void *)a2 + 2)) {
            goto LABEL_99;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v43);
          goto LABEL_101;
        case 9u:
          *((_WORD *)this + 56) |= 0x80u;
          unint64_t v44 = *((void *)a2 + 1);
          if (v44 > 0xFFFFFFFFFFFFFFF7 || v44 + 8 > *((void *)a2 + 2)) {
            goto LABEL_99;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v44);
          goto LABEL_101;
        case 0xAu:
          *((_WORD *)this + 56) |= 0x100u;
          unint64_t v45 = *((void *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((void *)a2 + 2)) {
            goto LABEL_99;
          }
          *((void *)this + 12) = *(void *)(*(void *)a2 + v45);
          goto LABEL_101;
        case 0xBu:
          *((_WORD *)this + 56) |= 0x40u;
          unint64_t v46 = *((void *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((void *)a2 + 2)) {
            goto LABEL_99;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v46);
          goto LABEL_101;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_102;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VIOPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 112);
  if ((v4 & 1) == 0)
  {
    if ((*(_WORD *)(this + 112) & 0x200) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    this = PB::Writer::write(a2, *(double *)(v3 + 104), 2u);
    if ((*(_WORD *)(v3 + 112) & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
  __int16 v4 = *(_WORD *)(v3 + 112);
  if ((v4 & 0x200) != 0) {
    goto LABEL_17;
  }
LABEL_3:
  if ((v4 & 2) != 0) {
LABEL_4:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 40), 3u);
LABEL_5:
  __int16 v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 4u);
  }
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 56), 5u);
    __int16 v8 = *(_WORD *)(v3 + 112);
    if ((v8 & 0x10) == 0)
    {
LABEL_10:
      if ((v8 & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
  }
  else if ((v8 & 0x10) == 0)
  {
    goto LABEL_10;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 6u);
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x20) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 7u);
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 8u);
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x80) == 0)
  {
LABEL_13:
    if ((v8 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(double *)(v3 + 96), 0xAu);
    if ((*(_WORD *)(v3 + 112) & 0x40) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 9u);
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x100) != 0) {
    goto LABEL_24;
  }
LABEL_14:
  if ((v8 & 0x40) == 0) {
    return this;
  }
LABEL_25:
  double v9 = *(double *)(v3 + 80);

  return PB::Writer::write(a2, v9, 0xBu);
}

uint64_t CMMsl::VIOPose::hash_value(CMMsl::VIOPose *this)
{
  __int16 v2 = *((_WORD *)this + 56);
  if (v2)
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = *((void *)this + 4);
    }
    if ((*((_WORD *)this + 56) & 0x200) != 0)
    {
LABEL_3:
      if (*((double *)this + 13) == 0.0) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = *((void *)this + 13);
      }
      if ((v2 & 2) != 0) {
        goto LABEL_7;
      }
LABEL_15:
      uint64_t v5 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((_WORD *)this + 56) & 0x200) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_15;
  }
LABEL_7:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 5);
  }
LABEL_16:
  uint64_t v6 = PBHashBytes();
  __int16 v7 = *((_WORD *)this + 56);
  if ((v7 & 8) == 0)
  {
    double v8 = 0.0;
    if ((v7 & 0x10) != 0) {
      goto LABEL_18;
    }
LABEL_39:
    double v9 = 0.0;
    if ((v7 & 0x20) != 0) {
      goto LABEL_21;
    }
LABEL_40:
    double v10 = 0.0;
    if ((v7 & 4) != 0) {
      goto LABEL_24;
    }
LABEL_41:
    double v11 = 0.0;
    if ((v7 & 0x80) != 0) {
      goto LABEL_27;
    }
LABEL_42:
    double v12 = 0.0;
    if ((*((_WORD *)this + 56) & 0x100) != 0) {
      goto LABEL_30;
    }
    goto LABEL_43;
  }
  double v8 = *((double *)this + 7);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v7 & 0x10) == 0) {
    goto LABEL_39;
  }
LABEL_18:
  double v9 = *((double *)this + 8);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v7 & 0x20) == 0) {
    goto LABEL_40;
  }
LABEL_21:
  double v10 = *((double *)this + 9);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v7 & 4) == 0) {
    goto LABEL_41;
  }
LABEL_24:
  double v11 = *((double *)this + 6);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v7 & 0x80) == 0) {
    goto LABEL_42;
  }
LABEL_27:
  double v12 = *((double *)this + 11);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((*((_WORD *)this + 56) & 0x100) != 0)
  {
LABEL_30:
    double v13 = *((double *)this + 12);
    if (v13 == 0.0) {
      double v13 = 0.0;
    }
    if ((v7 & 0x40) != 0) {
      goto LABEL_33;
    }
LABEL_44:
    double v14 = 0.0;
    return v4 ^ v3 ^ v5 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ v6 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14;
  }
LABEL_43:
  double v13 = 0.0;
  if ((v7 & 0x40) == 0) {
    goto LABEL_44;
  }
LABEL_33:
  double v14 = *((double *)this + 10);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  return v4 ^ v3 ^ v5 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ v6 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14;
}

void CMMsl::VIOReplayPose::~VIOReplayPose(CMMsl::VIOReplayPose *this)
{
  *(void *)this = off_1003A99D0;
  __int16 v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VIOReplayPose::~VIOReplayPose(this);

  operator delete();
}

CMMsl::VIOReplayPose *CMMsl::VIOReplayPose::VIOReplayPose(CMMsl::VIOReplayPose *this, const CMMsl::VIOReplayPose *a2)
{
  *(void *)this = off_1003A99D0;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((unsigned char *)a2 + 64))
  {
    uint64_t v5 = *((void *)a2 + 7);
    *((unsigned char *)this + 64) = 1;
    *((void *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  }
  return this;
}

uint64_t CMMsl::VIOReplayPose::operator=(uint64_t a1, const CMMsl::VIOReplayPose *a2)
{
  if ((const CMMsl::VIOReplayPose *)a1 != a2)
  {
    CMMsl::VIOReplayPose::VIOReplayPose((CMMsl::VIOReplayPose *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    CMMsl::VIOReplayPose::~VIOReplayPose((CMMsl::VIOReplayPose *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VIOReplayPose *a2, CMMsl::VIOReplayPose *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::VIOReplayPose::VIOReplayPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A99D0;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::VIOReplayPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::VIOReplayPose::VIOReplayPose((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    CMMsl::VIOReplayPose::~VIOReplayPose((CMMsl::VIOReplayPose *)v9);
  }
  return a1;
}

uint64_t CMMsl::VIOReplayPose::formatText(CMMsl::VIOReplayPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "so3", v7);
  }
  if (*((unsigned char *)this + 64)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  }
  uint64_t v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "translation", v10);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VIOReplayPose::readFrom(CMMsl::VIOReplayPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 32);
    uint64_t v9 = (char *)this + 48;
    double v10 = (void **)((char *)this + 8);
    long long v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          while (v41 < v42 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v44 = (char *)*((void *)this + 2);
            unint64_t v43 = *((void *)this + 3);
            if ((unint64_t)v44 >= v43)
            {
              unint64_t v46 = (char *)*v10;
              uint64_t v47 = (v44 - (unsigned char *)*v10) >> 3;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61) {
                goto LABEL_128;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 2 > v48) {
                unint64_t v48 = v49 >> 2;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                uint64_t v51 = (char *)sub_10000EEB0((uint64_t)v11, v50);
                unint64_t v46 = (char *)*((void *)this + 1);
                unint64_t v44 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v51 = 0;
              }
              unint64_t v52 = &v51[8 * v47];
              *(void *)unint64_t v52 = 0;
              unint64_t v45 = v52 + 8;
              while (v44 != v46)
              {
                uint64_t v53 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v52 - 1) = v53;
                v52 -= 8;
              }
              *((void *)this + 1) = v52;
              *((void *)this + 2) = v45;
              *((void *)this + 3) = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(void *)unint64_t v44 = 0;
              unint64_t v45 = v44 + 8;
            }
            *((void *)this + 2) = v45;
            unint64_t v54 = *((void *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)a2 + 2)) {
              goto LABEL_82;
            }
            *(v45 - 1) = *(void *)(*(void *)a2 + v54);
            unint64_t v42 = *((void *)a2 + 2);
            unint64_t v41 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v41;
          }
          goto LABEL_83;
        }
        uint64_t v59 = (char *)*((void *)this + 2);
        unint64_t v58 = *((void *)this + 3);
        if ((unint64_t)v59 >= v58)
        {
          unint64_t v66 = (char *)*v10;
          uint64_t v67 = (v59 - (unsigned char *)*v10) >> 3;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61) {
LABEL_128:
          }
            sub_10000EE98();
          uint64_t v69 = v58 - (void)v66;
          if (v69 >> 2 > v68) {
            unint64_t v68 = v69 >> 2;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v68;
          }
          if (v70)
          {
            uint64_t v71 = (char *)sub_10000EEB0((uint64_t)v11, v70);
            unint64_t v66 = (char *)*((void *)this + 1);
            uint64_t v59 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v71 = 0;
          }
          unint64_t v74 = &v71[8 * v67];
          *(void *)unint64_t v74 = 0;
          uint64_t v57 = v74 + 8;
          while (v59 != v66)
          {
            uint64_t v75 = *((void *)v59 - 1);
            v59 -= 8;
            *((void *)v74 - 1) = v75;
            v74 -= 8;
          }
          *((void *)this + 1) = v74;
          *((void *)this + 2) = v57;
          *((void *)this + 3) = &v71[8 * v70];
          if (v66) {
            operator delete(v66);
          }
        }
        else
        {
          *(void *)uint64_t v59 = 0;
          uint64_t v57 = v59 + 8;
        }
        *((void *)this + 2) = v57;
LABEL_114:
        unint64_t v76 = *((void *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((void *)a2 + 2))
        {
LABEL_116:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_119;
        }
        *(v57 - 1) = *(void *)(*(void *)a2 + v76);
        goto LABEL_118;
      }
      if (v25 == 1)
      {
        *((unsigned char *)this + 64) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
          goto LABEL_116;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v26);
LABEL_118:
        *((void *)a2 + 1) += 8;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0) {
        return 0;
      }
LABEL_119:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    if (v24 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v27 = *((void *)a2 + 1);
      unint64_t v28 = *((void *)a2 + 2);
      while (v27 < v28 && !*((unsigned char *)a2 + 24))
      {
        uint64_t v30 = (char *)*((void *)this + 5);
        unint64_t v29 = *((void *)this + 6);
        if ((unint64_t)v30 >= v29)
        {
          uint64_t v32 = (char *)*v8;
          uint64_t v33 = (v30 - (unsigned char *)*v8) >> 3;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61) {
            goto LABEL_127;
          }
          uint64_t v35 = v29 - (void)v32;
          if (v35 >> 2 > v34) {
            unint64_t v34 = v35 >> 2;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            double v37 = (char *)sub_10000EEB0((uint64_t)v9, v36);
            uint64_t v32 = (char *)*((void *)this + 4);
            uint64_t v30 = (char *)*((void *)this + 5);
          }
          else
          {
            double v37 = 0;
          }
          uint64_t v38 = &v37[8 * v33];
          *(void *)uint64_t v38 = 0;
          double v31 = v38 + 8;
          while (v30 != v32)
          {
            uint64_t v39 = *((void *)v30 - 1);
            v30 -= 8;
            *((void *)v38 - 1) = v39;
            v38 -= 8;
          }
          *((void *)this + 4) = v38;
          *((void *)this + 5) = v31;
          *((void *)this + 6) = &v37[8 * v36];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *(void *)uint64_t v30 = 0;
          double v31 = v30 + 8;
        }
        *((void *)this + 5) = v31;
        unint64_t v40 = *((void *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((void *)a2 + 2))
        {
LABEL_82:
          *((unsigned char *)a2 + 24) = 1;
          break;
        }
        *(v31 - 1) = *(void *)(*(void *)a2 + v40);
        unint64_t v28 = *((void *)a2 + 2);
        unint64_t v27 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v27;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    char v56 = (char *)*((void *)this + 5);
    unint64_t v55 = *((void *)this + 6);
    if ((unint64_t)v56 >= v55)
    {
      unint64_t v60 = (char *)*v8;
      uint64_t v61 = (v56 - (unsigned char *)*v8) >> 3;
      unint64_t v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61) {
LABEL_127:
      }
        sub_10000EE98();
      uint64_t v63 = v55 - (void)v60;
      if (v63 >> 2 > v62) {
        unint64_t v62 = v63 >> 2;
      }
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v62;
      }
      if (v64)
      {
        unint64_t v65 = (char *)sub_10000EEB0((uint64_t)v9, v64);
        unint64_t v60 = (char *)*((void *)this + 4);
        char v56 = (char *)*((void *)this + 5);
      }
      else
      {
        unint64_t v65 = 0;
      }
      unint64_t v72 = &v65[8 * v61];
      *(void *)unint64_t v72 = 0;
      uint64_t v57 = v72 + 8;
      while (v56 != v60)
      {
        uint64_t v73 = *((void *)v56 - 1);
        v56 -= 8;
        *((void *)v72 - 1) = v73;
        v72 -= 8;
      }
      *((void *)this + 4) = v72;
      *((void *)this + 5) = v57;
      *((void *)this + 6) = &v65[8 * v64];
      if (v60) {
        operator delete(v60);
      }
    }
    else
    {
      *(void *)char v56 = 0;
      uint64_t v57 = v56 + 8;
    }
    *((void *)this + 5) = v57;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t CMMsl::VIOReplayPose::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 64)) {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
  }
  int v4 = (double *)v3[1];
  long long v5 = (double *)v3[2];
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  uint64_t v8 = (double *)v3[4];
  double v7 = (double *)v3[5];
  while (v8 != v7)
  {
    double v9 = *v8++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  return this;
}

uint64_t CMMsl::VIOReplayPose::hash_value(CMMsl::VIOReplayPose *this)
{
  if (*((unsigned char *)this + 64))
  {
    if (*((double *)this + 7) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 7);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

void CMMsl::VO2MaxInput::~VO2MaxInput(CMMsl::VO2MaxInput *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::VO2MaxInput::VO2MaxInput(CMMsl::VO2MaxInput *this, const CMMsl::VO2MaxInput *a2)
{
  *(void *)this = off_1003A9A08;
  *((_DWORD *)this + 22) = 0;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x80) != 0)
  {
    double result = *((double *)a2 + 8);
    __int16 v3 = 128;
    *((_WORD *)this + 44) = 128;
    *((double *)this + 8) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 6) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    int v5 = *((_DWORD *)a2 + 19);
    v3 |= 0x200u;
    *((_WORD *)this + 44) = v3;
    *((_DWORD *)this + 19) = v5;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 2) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v6 = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 18) = v6;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v7 = *((unsigned char *)a2 + 84);
  v3 |= 0x800u;
  *((_WORD *)this + 44) = v3;
  *((unsigned char *)this + 84) = v7;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  char v8 = *((unsigned char *)a2 + 85);
  v3 |= 0x1000u;
  *((_WORD *)this + 44) = v3;
  *((unsigned char *)this + 85) = v8;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v9 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 20) = v9;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_30:
    double result = *((double *)a2 + 5);
    *((_WORD *)this + 44) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_29:
  char v10 = *((unsigned char *)a2 + 86);
  v3 |= 0x2000u;
  *((_WORD *)this + 44) = v3;
  *((unsigned char *)this + 86) = v10;
  if ((*((_WORD *)a2 + 44) & 0x10) != 0) {
    goto LABEL_30;
  }
  return result;
}

CMMsl *CMMsl::VO2MaxInput::operator=(CMMsl *a1, const CMMsl::VO2MaxInput *a2)
{
  if (a1 != a2)
  {
    CMMsl::VO2MaxInput::VO2MaxInput((CMMsl::VO2MaxInput *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VO2MaxInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VO2MaxInput *a2, CMMsl::VO2MaxInput *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  int v10 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v10;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  uint64_t v12 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v12;
  LOBYTE(v10) = *((unsigned char *)this + 84);
  *((unsigned char *)this + 84) = *((unsigned char *)a2 + 84);
  *((unsigned char *)a2 + 84) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 85);
  *((unsigned char *)this + 85) = *((unsigned char *)a2 + 85);
  *((unsigned char *)a2 + 85) = v10;
  int v13 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 86);
  *((unsigned char *)this + 86) = *((unsigned char *)a2 + 86);
  *((unsigned char *)a2 + 86) = v13;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::VO2MaxInput::VO2MaxInput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9A08;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 86) = *(unsigned char *)(a2 + 86);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::VO2MaxInput::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VO2MaxInput::VO2MaxInput((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VO2MaxInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::VO2MaxInput::formatText(CMMsl::VO2MaxInput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "cadence", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "grade", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "gradeType", *((_DWORD *)this + 18));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "hasGps", *((unsigned char *)this + 84));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "hasStrideCal", *((unsigned char *)this + 85));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "heartRate", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "heartRateConfidence", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "hrTime", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isStroller", *((unsigned char *)this + 86));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "metSource", *((_DWORD *)this + 19));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "mets", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "pace", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "startDate", *((double *)this + 8));
  if ((*((_WORD *)this + 44) & 0x400) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 20));
LABEL_16:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VO2MaxInput::readFrom(CMMsl::VO2MaxInput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 44) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 2u:
              *((_WORD *)this + 44) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 3u:
              *((_WORD *)this + 44) |= 0x200u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_108;
                  }
                  unint64_t v47 = v21++;
                  char v48 = *(unsigned char *)(v22 + v47);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_107:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_107;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_108;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_108:
              *((_DWORD *)this + 19) = v25;
              goto LABEL_119;
            case 4u:
              *((_WORD *)this + 44) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 5u:
              *((_WORD *)this + 44) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 6u:
              *((_WORD *)this + 44) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 7u:
              *((_WORD *)this + 44) |= 0x100u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_113;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_112:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_112;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_113;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_113:
              *((_DWORD *)this + 18) = v31;
              goto LABEL_119;
            case 8u:
              *((_WORD *)this + 44) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 9u:
              *((_WORD *)this + 44) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 0xAu:
              *((_WORD *)this + 44) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 84) = v34;
              goto LABEL_119;
            case 0xBu:
              *((_WORD *)this + 44) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *((unsigned char *)this + 85) = v36;
              goto LABEL_119;
            case 0xCu:
              *((_WORD *)this + 44) |= 0x400u;
              unint64_t v37 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v38 = *(void *)a2;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v41 = 0;
                if (v2 <= v37) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_118;
                  }
                  unint64_t v55 = v37++;
                  char v56 = *(unsigned char *)(v38 + v55);
                  *((void *)a2 + 1) = v37;
                  v41 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_117:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_117;
              }
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v2 = v37 + 1;
                *((void *)a2 + 1) = v37 + 1;
                char v42 = *(unsigned char *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_118;
                }
                v39 += 7;
                unint64_t v37 = v2;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_118:
              *((_DWORD *)this + 20) = v41;
LABEL_119:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xDu:
              *((_WORD *)this + 44) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v44 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v43 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v44 = v43 != 0;
              }
              *((unsigned char *)this + 86) = v44;
              goto LABEL_119;
            case 0xEu:
              *((_WORD *)this + 44) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
LABEL_103:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_74:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_119;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_119;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::VO2MaxInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 88);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 3u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 5u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 6u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 7u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 8u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 9u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 84), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 85), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 86), 0xDu);
    if ((*(_WORD *)(v3 + 88) & 0x10) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_29:
  double v5 = *(double *)(v3 + 40);

  return PB::Writer::write(a2, v5, 0xEu);
}

uint64_t CMMsl::VO2MaxInput::hash_value(CMMsl::VO2MaxInput *this)
{
  __int16 v1 = *((_WORD *)this + 44);
  if ((v1 & 0x80) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_33:
    double v3 = 0.0;
    if ((*((_WORD *)this + 44) & 0x200) != 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
  double v2 = *((double *)this + 8);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  double v3 = *((double *)this + 6);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x200) != 0)
  {
LABEL_6:
    uint64_t v4 = *((int *)this + 19);
    if ((v1 & 4) != 0) {
      goto LABEL_7;
    }
LABEL_35:
    double v5 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_10;
    }
LABEL_36:
    double v6 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_13;
    }
LABEL_37:
    double v7 = 0.0;
    if ((*((_WORD *)this + 44) & 0x100) != 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v4 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_35;
  }
LABEL_7:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_36;
  }
LABEL_10:
  double v6 = *((double *)this + 4);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_37;
  }
LABEL_13:
  double v7 = *((double *)this + 2);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x100) != 0)
  {
LABEL_16:
    uint64_t v8 = *((int *)this + 18);
    if (v1) {
      goto LABEL_17;
    }
LABEL_39:
    double v9 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_20;
    }
LABEL_40:
    double v10 = 0.0;
    if ((*((_WORD *)this + 44) & 0x800) != 0) {
      goto LABEL_23;
    }
    goto LABEL_41;
  }
LABEL_38:
  uint64_t v8 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_17:
  double v9 = *((double *)this + 1);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_40;
  }
LABEL_20:
  double v10 = *((double *)this + 7);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x800) != 0)
  {
LABEL_23:
    uint64_t v11 = *((unsigned __int8 *)this + 84);
    if ((*((_WORD *)this + 44) & 0x1000) != 0) {
      goto LABEL_24;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v11 = 0;
  if ((*((_WORD *)this + 44) & 0x1000) != 0)
  {
LABEL_24:
    uint64_t v12 = *((unsigned __int8 *)this + 85);
    if ((*((_WORD *)this + 44) & 0x400) != 0) {
      goto LABEL_25;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v12 = 0;
  if ((*((_WORD *)this + 44) & 0x400) != 0)
  {
LABEL_25:
    uint64_t v13 = *((int *)this + 20);
    if ((*((_WORD *)this + 44) & 0x2000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v13 = 0;
  if ((*((_WORD *)this + 44) & 0x2000) != 0)
  {
LABEL_26:
    uint64_t v14 = *((unsigned __int8 *)this + 86);
    if ((v1 & 0x10) != 0) {
      goto LABEL_27;
    }
LABEL_45:
    double v15 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(void *)&v15;
  }
LABEL_44:
  uint64_t v14 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_45;
  }
LABEL_27:
  double v15 = *((double *)this + 5);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(void *)&v15;
}

void CMMsl::VO2MaxModelInput::~VO2MaxModelInput(CMMsl::VO2MaxModelInput *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::VO2MaxModelInput::VO2MaxModelInput(CMMsl::VO2MaxModelInput *this, const CMMsl::VO2MaxModelInput *a2)
{
  *(void *)this = off_1003A9A40;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    char v3 = 4;
    *((unsigned char *)this + 40) = 4;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 4);
    *((unsigned char *)this + 40) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((unsigned char *)this + 40) = v3;
  *((double *)this + 1) = result;
  if ((*((unsigned char *)a2 + 40) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::VO2MaxModelInput::operator=(uint64_t a1, const CMMsl::VO2MaxModelInput *a2)
{
  if ((const CMMsl::VO2MaxModelInput *)a1 != a2)
  {
    CMMsl::VO2MaxModelInput::VO2MaxModelInput((CMMsl::VO2MaxModelInput *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VO2MaxModelInput *a2, CMMsl::VO2MaxModelInput *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::VO2MaxModelInput::VO2MaxModelInput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9A40;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9A40;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::VO2MaxModelInput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A9A40;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v11 = *(_DWORD *)(a1 + 40);
    long long v4 = *(_OWORD *)(a2 + 8);
    long long v9 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a1 + 24);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 24) = v6;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::VO2MaxModelInput::formatText(CMMsl::VO2MaxModelInput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "hr", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hrTime", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "time", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "vo2", *((double *)this + 4));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VO2MaxModelInput::readFrom(CMMsl::VO2MaxModelInput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 40) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((unsigned char *)this + 40) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 40) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VO2MaxModelInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
      if ((*(unsigned char *)(v3 + 40) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 32);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::VO2MaxModelInput::hash_value(CMMsl::VO2MaxModelInput *this)
{
  if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if (*((unsigned char *)this + 40)) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if (*((unsigned char *)this + 40))
  {
LABEL_6:
    double v3 = *((double *)this + 1);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v4 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
  }
LABEL_16:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v4 = *((double *)this + 4);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
}

void CMMsl::VO2MaxOutput::~VO2MaxOutput(CMMsl::VO2MaxOutput *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::VO2MaxOutput::VO2MaxOutput(uint64_t this, const CMMsl::VO2MaxOutput *a2)
{
  *(void *)this = off_1003A9A78;
  *(_DWORD *)(this + 72) = 0;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *((void *)a2 + 6);
    __int16 v3 = 32;
    *(_WORD *)(this + 72) = 32;
    *(void *)(this + 48) = v4;
    __int16 v2 = *((_WORD *)a2 + 36);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 72) = v3;
    *(void *)(this + 16) = v5;
    __int16 v2 = *((_WORD *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    int v6 = *((_DWORD *)a2 + 17);
    v3 |= 0x100u;
    *(_WORD *)(this + 72) = v3;
    *(_DWORD *)(this + 68) = v6;
    __int16 v2 = *((_WORD *)a2 + 36);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 8) = v7;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v8 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 32) = v8;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v9 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 40) = v9;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v10 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 56) = v10;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_20:
    int v12 = *((_DWORD *)a2 + 16);
    *(_WORD *)(this + 72) = v3 | 0x80;
    *(_DWORD *)(this + 64) = v12;
    return this;
  }
LABEL_19:
  uint64_t v11 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 72) = v3;
  *(void *)(this + 24) = v11;
  if ((*((_WORD *)a2 + 36) & 0x80) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::VO2MaxOutput::operator=(uint64_t a1, const CMMsl::VO2MaxOutput *a2)
{
  if ((const CMMsl::VO2MaxOutput *)a1 != a2)
  {
    CMMsl::VO2MaxOutput::VO2MaxOutput((uint64_t)&v10, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v5;
    *(void *)&long long v5 = v15;
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v5;
    int v8 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    int v16 = v8;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VO2MaxOutput *a2, CMMsl::VO2MaxOutput *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  int v6 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  int v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  return result;
}

double CMMsl::VO2MaxOutput::VO2MaxOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9A78;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

uint64_t CMMsl::VO2MaxOutput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::VO2MaxOutput::VO2MaxOutput((uint64_t)&v10, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v5;
    *(void *)&long long v5 = v15;
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v5;
    int v8 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    int v16 = v8;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::VO2MaxOutput::formatText(CMMsl::VO2MaxOutput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 36);
  if (v5)
  {
    PB::TextFormatter::format(a2, "durationInSeconds", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "estimatedVo2Max", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "filteredVo2Max", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "hrMax", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "hrMin", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "sessionType", *((_DWORD *)this + 16));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "variance", *((double *)this + 7));
  if ((*((_WORD *)this + 36) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 17));
LABEL_11:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VO2MaxOutput::readFrom(CMMsl::VO2MaxOutput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 36) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 2u:
              *((_WORD *)this + 36) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 3u:
              *((_WORD *)this + 36) |= 0x100u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_79;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_78:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_78;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_79;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_79:
              *((_DWORD *)this + 17) = v25;
              goto LABEL_85;
            case 4u:
              *((_WORD *)this + 36) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 5u:
              *((_WORD *)this + 36) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 6u:
              *((_WORD *)this + 36) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 7u:
              *((_WORD *)this + 36) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 8u:
              *((_WORD *)this + 36) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_74:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_51:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_85;
            case 9u:
              *((_WORD *)this + 36) |= 0x80u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_84;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_83:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_83;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_84;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_84:
              *((_DWORD *)this + 16) = v31;
LABEL_85:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_85;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::VO2MaxOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 72);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48), 1u);
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 3u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 5u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 6u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 8u);
    if ((*(_WORD *)(v3 + 72) & 0x80) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 7u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_19:
  int v5 = *(_DWORD *)(v3 + 64);

  return PB::Writer::writeVarInt(a2, v5, 9u);
}

uint64_t CMMsl::VO2MaxOutput::hash_value(CMMsl::VO2MaxOutput *this)
{
  __int16 v1 = *((_WORD *)this + 36);
  if ((v1 & 0x20) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_26:
    double v3 = 0.0;
    if ((*((_WORD *)this + 36) & 0x100) != 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
  double v2 = *((double *)this + 6);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_26;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((_WORD *)this + 36) & 0x100) != 0)
  {
LABEL_6:
    uint64_t v4 = *((int *)this + 17);
    if (v1) {
      goto LABEL_7;
    }
LABEL_28:
    double v5 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_10;
    }
LABEL_29:
    double v6 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_13;
    }
LABEL_30:
    double v7 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_16;
    }
LABEL_31:
    double v8 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_19;
    }
    goto LABEL_32;
  }
LABEL_27:
  uint64_t v4 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_7:
  double v5 = *((double *)this + 1);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_29;
  }
LABEL_10:
  double v6 = *((double *)this + 4);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_30;
  }
LABEL_13:
  double v7 = *((double *)this + 5);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_16:
  double v8 = *((double *)this + 7);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_19:
    double v9 = *((double *)this + 3);
    if (v9 == 0.0) {
      double v9 = 0.0;
    }
    if ((v1 & 0x80) != 0) {
      goto LABEL_22;
    }
LABEL_33:
    uint64_t v10 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10;
  }
LABEL_32:
  double v9 = 0.0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_33;
  }
LABEL_22:
  uint64_t v10 = *((int *)this + 16);
  return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10;
}

void CMMsl::VehicularFlagsData::~VehicularFlagsData(CMMsl::VehicularFlagsData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::VehicularFlagsData::VehicularFlagsData(uint64_t this, const CMMsl::VehicularFlagsData *a2)
{
  *(void *)this = off_1003A9AB0;
  *(_DWORD *)(this + 20) = 0;
  char v2 = *((unsigned char *)a2 + 20);
  if ((v2 & 0x10) != 0)
  {
    char v4 = *((unsigned char *)a2 + 15);
    char v3 = 16;
    *(unsigned char *)(this + 20) = 16;
    *(unsigned char *)(this + 15) = v4;
    char v2 = *((unsigned char *)a2 + 20);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 20) & 8) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 14);
    v3 |= 8u;
    *(unsigned char *)(this + 20) = v3;
    *(unsigned char *)(this + 14) = v5;
    char v2 = *((unsigned char *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    char v6 = *((unsigned char *)a2 + 12);
    v3 |= 2u;
    *(unsigned char *)(this + 20) = v3;
    *(unsigned char *)(this + 12) = v6;
    char v2 = *((unsigned char *)a2 + 20);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 16);
  v3 |= 0x20u;
  *(unsigned char *)(this + 20) = v3;
  *(unsigned char *)(this + 16) = v7;
  char v2 = *((unsigned char *)a2 + 20);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return this;
    }
LABEL_14:
    int v9 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 20) = v3 | 1;
    *(_DWORD *)(this + 8) = v9;
    return this;
  }
LABEL_13:
  char v8 = *((unsigned char *)a2 + 13);
  v3 |= 4u;
  *(unsigned char *)(this + 20) = v3;
  *(unsigned char *)(this + 13) = v8;
  if (*((unsigned char *)a2 + 20)) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::VehicularFlagsData::operator=(uint64_t a1, const CMMsl::VehicularFlagsData *a2)
{
  if ((const CMMsl::VehicularFlagsData *)a1 != a2)
  {
    CMMsl::VehicularFlagsData::VehicularFlagsData((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    int v12 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v11;
    char v11 = v3;
    int v5 = *(_DWORD *)(a1 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    int v6 = v10;
    *(_DWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 12) = v6;
    int v9 = v5;
    int v10 = v4;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::VehicularFlagsData *a2, CMMsl::VehicularFlagsData *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 15);
  *(unsigned char *)(this + 15) = *((unsigned char *)a2 + 15);
  *((unsigned char *)a2 + 15) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 14);
  *(unsigned char *)(this + 14) = *((unsigned char *)a2 + 14);
  *((unsigned char *)a2 + 14) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 12);
  *(unsigned char *)(this + 12) = *((unsigned char *)a2 + 12);
  *((unsigned char *)a2 + 12) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 13);
  *(unsigned char *)(this + 13) = *((unsigned char *)a2 + 13);
  *((unsigned char *)a2 + 13) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::VehicularFlagsData::VehicularFlagsData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A9AB0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(unsigned char *)(result + 15) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(result + 14) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(result + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(result + 13) = *(unsigned char *)(a2 + 13);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = off_1003A9AB0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(unsigned char *)(result + 15) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(result + 14) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(result + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(result + 13) = *(unsigned char *)(a2 + 13);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::VehicularFlagsData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v10 = off_1003A9AB0;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    char v4 = *(unsigned char *)(a2 + 16);
    int v14 = *(_DWORD *)(a1 + 20);
    char v13 = *(unsigned char *)(a1 + 16);
    int v5 = *(_DWORD *)(a2 + 8);
    int v6 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 20) = v3;
    *(unsigned char *)(a1 + 16) = v4;
    int v8 = *(_DWORD *)(a1 + 8);
    int v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 12) = v6;
    int v11 = v8;
    int v12 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::VehicularFlagsData::formatText(CMMsl::VehicularFlagsData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "basebandHint", *((unsigned char *)this + 12));
    char v5 = *((unsigned char *)this + 20);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 20) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "btHint", *((unsigned char *)this + 13));
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "gpsHint", *((unsigned char *)this + 14));
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "motionHint", *((unsigned char *)this + 15));
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "vehicularData", *((_DWORD *)this + 2));
  if ((*((unsigned char *)this + 20) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "wifiHint", *((unsigned char *)this + 16));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VehicularFlagsData::readFrom(CMMsl::VehicularFlagsData *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)a2 + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 20) |= 0x10u;
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              if (v3 >= v2)
              {
                BOOL v21 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)a2 + v3++);
                *((void *)a2 + 1) = v3;
                BOOL v21 = v20 != 0;
              }
              *((unsigned char *)this + 15) = v21;
              goto LABEL_64;
            case 2u:
              *((unsigned char *)this + 20) |= 8u;
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              if (v3 >= v2)
              {
                BOOL v24 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)a2 + v3++);
                *((void *)a2 + 1) = v3;
                BOOL v24 = v23 != 0;
              }
              *((unsigned char *)this + 14) = v24;
              goto LABEL_64;
            case 3u:
              *((unsigned char *)this + 20) |= 2u;
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              if (v3 >= v2)
              {
                BOOL v26 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)a2 + v3++);
                *((void *)a2 + 1) = v3;
                BOOL v26 = v25 != 0;
              }
              *((unsigned char *)this + 12) = v26;
              goto LABEL_64;
            case 4u:
              *((unsigned char *)this + 20) |= 0x20u;
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              if (v3 >= v2)
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v3++);
                *((void *)a2 + 1) = v3;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 16) = v28;
              goto LABEL_64;
            case 5u:
              *((unsigned char *)this + 20) |= 4u;
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              if (v3 >= v2)
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v3++);
                *((void *)a2 + 1) = v3;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 13) = v30;
              goto LABEL_64;
            case 6u:
              *((unsigned char *)this + 20) |= 1u;
              unint64_t v31 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v32 = *(void *)a2;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v35 = 0;
                if (v2 <= v31) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_63;
                  }
                  unint64_t v39 = v31++;
                  char v40 = *(unsigned char *)(v32 + v39);
                  *((void *)a2 + 1) = v31;
                  v35 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_62:
                    unint64_t v3 = v39 + 1;
                    goto LABEL_63;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_62;
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              do
              {
                unint64_t v3 = v31 + 1;
                *((void *)a2 + 1) = v31 + 1;
                char v36 = *(unsigned char *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_63;
                }
                v33 += 7;
                unint64_t v31 = v3;
                BOOL v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_63:
              *((_DWORD *)this + 2) = v35;
LABEL_64:
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              goto LABEL_64;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::VehicularFlagsData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(this + 15), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 20) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 14), 2u);
  char v4 = *(unsigned char *)(v3 + 20);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 12), 3u);
  char v4 = *(unsigned char *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 13), 5u);
    if ((*(unsigned char *)(v3 + 20) & 1) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 16), 4u);
  char v4 = *(unsigned char *)(v3 + 20);
  if ((v4 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_13:
  unsigned int v5 = *(_DWORD *)(v3 + 8);

  return PB::Writer::writeVarInt(a2, v5, 6u);
}

uint64_t CMMsl::VehicularFlagsData::hash_value(CMMsl::VehicularFlagsData *this)
{
  if ((*((unsigned char *)this + 20) & 0x10) != 0)
  {
    uint64_t v1 = *((unsigned __int8 *)this + 15);
    if ((*((unsigned char *)this + 20) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 14);
      if ((*((unsigned char *)this + 20) & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 20) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 20) & 2) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned __int8 *)this + 12);
    if ((*((unsigned char *)this + 20) & 0x20) != 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 20) & 0x20) != 0)
  {
LABEL_5:
    uint64_t v4 = *((unsigned __int8 *)this + 16);
    if ((*((unsigned char *)this + 20) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v5 = 0;
    if (*((unsigned char *)this + 20)) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v6 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_11:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 20) & 4) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v5 = *((unsigned __int8 *)this + 13);
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v6 = *((unsigned int *)this + 2);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6;
}

void CMMsl::VelocityEstimatorFusionState::~VelocityEstimatorFusionState(CMMsl::VelocityEstimatorFusionState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState(CMMsl::VelocityEstimatorFusionState *this, const CMMsl::VelocityEstimatorFusionState *a2)
{
  *(void *)this = off_1003A9AE8;
  *((_DWORD *)this + 15) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 30) = 1;
    *((double *)this + 1) = result;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 30) & 0x100) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 12);
    v3 |= 0x100u;
    *((_WORD *)this + 30) = v3;
    *((_DWORD *)this + 12) = LODWORD(result);
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 13);
    v3 |= 0x200u;
    *((_WORD *)this + 30) = v3;
    *((_DWORD *)this + 13) = LODWORD(result);
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x400u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  LODWORD(result) = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 9) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 10) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v5 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 6) = v5;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v6 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 7) = v6;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_24:
    double result = *((double *)a2 + 2);
    *((_WORD *)this + 30) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_23:
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 8) = v7;
  if ((*((_WORD *)a2 + 30) & 2) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::VelocityEstimatorFusionState::operator=(CMMsl *a1, const CMMsl::VelocityEstimatorFusionState *a2)
{
  if (a1 != a2)
  {
    CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState((CMMsl::VelocityEstimatorFusionState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VelocityEstimatorFusionState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VelocityEstimatorFusionState *a2, CMMsl::VelocityEstimatorFusionState *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9AE8;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::VelocityEstimatorFusionState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VelocityEstimatorFusionState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::VelocityEstimatorFusionState::formatText(CMMsl::VelocityEstimatorFusionState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "sourceX", *((_DWORD *)this + 6));
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sourceY", *((_DWORD *)this + 7));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "sourceZ", *((_DWORD *)this + 8));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "velocityUncX", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "velocityUncY", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "velocityUncZ", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "velocityX", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "velocityY", *((float *)this + 13));
  if ((*((_WORD *)this + 30) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "velocityZ", *((float *)this + 14));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VelocityEstimatorFusionState::readFrom(CMMsl::VelocityEstimatorFusionState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 30) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_92;
            case 2u:
              *((_WORD *)this + 30) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_45;
            case 3u:
              *((_WORD *)this + 30) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_45;
            case 4u:
              *((_WORD *)this + 30) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_45;
            case 5u:
              *((_WORD *)this + 30) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_45;
            case 6u:
              *((_WORD *)this + 30) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_45;
            case 7u:
              *((_WORD *)this + 30) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_69;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_45:
              unint64_t v2 = *((void *)a2 + 1) + 4;
              goto LABEL_93;
            case 8u:
              *((_WORD *)this + 30) |= 4u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_97:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_97;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_98:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_109;
            case 9u:
              *((_WORD *)this + 30) |= 8u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_102:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_102;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_103:
              *((_DWORD *)this + 7) = v31;
              goto LABEL_109;
            case 0xAu:
              *((_WORD *)this + 30) |= 0x10u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_108;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_107:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_107;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_108;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_108:
              *((_DWORD *)this + 8) = v37;
LABEL_109:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *((_WORD *)this + 30) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_92:
                unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_93:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_69:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_109;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_109;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::VelocityEstimatorFusionState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(this + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 3u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 4u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 5u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 6u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 7u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 8u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 0xAu);
    if ((*(_WORD *)(v3 + 60) & 2) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 9u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 0xBu);
}

uint64_t CMMsl::VelocityEstimatorFusionState::hash_value(CMMsl::VelocityEstimatorFusionState *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_3;
    }
LABEL_30:
    uint64_t v4 = 0;
    if ((*((_WORD *)this + 30) & 0x200) != 0) {
      goto LABEL_6;
    }
LABEL_31:
    uint64_t v6 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0) {
      goto LABEL_9;
    }
LABEL_32:
    uint64_t v8 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_12;
    }
LABEL_33:
    uint64_t v10 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_34:
    uint64_t v12 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_18;
    }
LABEL_35:
    uint64_t v14 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_21;
    }
    goto LABEL_36;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((_WORD *)this + 30) & 0x100) == 0) {
    goto LABEL_30;
  }
LABEL_3:
  float v3 = *((float *)this + 12);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x200) == 0) {
    goto LABEL_31;
  }
LABEL_6:
  float v5 = *((float *)this + 13);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x400) == 0) {
    goto LABEL_32;
  }
LABEL_9:
  float v7 = *((float *)this + 14);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_33;
  }
LABEL_12:
  float v9 = *((float *)this + 9);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_34;
  }
LABEL_15:
  float v11 = *((float *)this + 10);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_35;
  }
LABEL_18:
  float v13 = *((float *)this + 11);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_21:
    uint64_t v15 = *((unsigned int *)this + 6);
    if ((v1 & 8) != 0) {
      goto LABEL_22;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v15 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_22:
    uint64_t v16 = *((unsigned int *)this + 7);
    if ((v1 & 0x10) != 0) {
      goto LABEL_23;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v16 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_23:
    uint64_t v17 = *((unsigned int *)this + 8);
    if ((v1 & 2) != 0) {
      goto LABEL_24;
    }
LABEL_39:
    double v18 = 0.0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(void *)&v18;
  }
LABEL_38:
  uint64_t v17 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_39;
  }
LABEL_24:
  double v18 = *((double *)this + 2);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(void *)&v18;
}

void CMMsl::VibrationEvent::~VibrationEvent(CMMsl::VibrationEvent *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::VibrationEvent::VibrationEvent(uint64_t this, const CMMsl::VibrationEvent *a2)
{
  *(void *)this = off_1003A9B20;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::VibrationEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    float v7 = off_1003A9B20;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::VibrationEvent *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    float v7 = off_1003A9B20;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::VibrationEvent *a2, CMMsl::VibrationEvent *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::VibrationEvent::formatText(CMMsl::VibrationEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "isDeviceVibrating", *((unsigned char *)this + 8));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VibrationEvent::readFrom(CMMsl::VibrationEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 8) = v21;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VibrationEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(unsigned char *)(this + 8), 1u);
  }
  return this;
}

uint64_t CMMsl::VibrationEvent::hash_value(CMMsl::VibrationEvent *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

void CMMsl::ViewObstructedMachineLearningDecision::~ViewObstructedMachineLearningDecision(CMMsl::ViewObstructedMachineLearningDecision *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision(uint64_t this, const CMMsl::ViewObstructedMachineLearningDecision *a2)
{
  *(void *)this = off_1003A9B58;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::operator=(uint64_t a1, const CMMsl::ViewObstructedMachineLearningDecision *a2)
{
  if ((const CMMsl::ViewObstructedMachineLearningDecision *)a1 != a2)
  {
    CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ViewObstructedMachineLearningDecision *a2, CMMsl::ViewObstructedMachineLearningDecision *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A9B58;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = off_1003A9B58;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[0] = off_1003A9B58;
    v9[1] = v7;
    LOBYTE(v7) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::formatText(CMMsl::ViewObstructedMachineLearningDecision *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "shouldSuppress", *((unsigned char *)this + 16));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::readFrom(CMMsl::ViewObstructedMachineLearningDecision *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v28 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v28 = v27 != 0;
        }
        *((unsigned char *)this + 16) = v28;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v3)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v25 = 0;
          if (v3 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_48;
            }
            unint64_t v32 = v21++;
            char v33 = *(unsigned char *)(v22 + v32);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_47;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
LABEL_47:
          unint64_t v2 = v32 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_48:
        *((void *)this + 1) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::hash_value(CMMsl::ViewObstructedMachineLearningDecision *this)
{
  if (*((unsigned char *)this + 20))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ v1;
}

void CMMsl::ViewObstructedMachineLearningFeatures::~ViewObstructedMachineLearningFeatures(CMMsl::ViewObstructedMachineLearningFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures(CMMsl::ViewObstructedMachineLearningFeatures *this, const CMMsl::ViewObstructedMachineLearningFeatures *a2)
{
  *(void *)this = off_1003A9B90;
  *((_DWORD *)this + 29) = 0;
  int v2 = *((_DWORD *)a2 + 29);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 29) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 17);
    v3 |= 0x4000u;
    *((_DWORD *)this + 29) = v3;
    *((float *)this + 17) = result;
    int v2 = *((_DWORD *)a2 + 29);
  }
LABEL_6:
  if ((v2 & 0x8000) != 0)
  {
    float result = *((float *)a2 + 18);
    v3 |= 0x8000u;
    *((_DWORD *)this + 29) = v3;
    *((float *)this + 18) = result;
    int v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  float result = *((float *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 12) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  float result = *((float *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  float result = *((float *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  float result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  float result = *((float *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  float result = *((float *)a2 + 28);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 28) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  float result = *((float *)a2 + 21);
  v3 |= 0x40000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  float result = *((float *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  float result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 8) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  float result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  float result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  float result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  float result = *((float *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 9) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  float result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }
LABEL_47:
  float result = *((float *)a2 + 22);
  v3 |= 0x80000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 22) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100000) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }
LABEL_48:
  float result = *((float *)a2 + 23);
  v3 |= 0x100000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 23) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  float result = *((float *)a2 + 24);
  v3 |= 0x200000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 24) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  float result = *((float *)a2 + 25);
  v3 |= 0x400000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 25) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }
LABEL_51:
  float result = *((float *)a2 + 26);
  v3 |= 0x800000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 26) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
LABEL_52:
  float result = *((float *)a2 + 27);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 27) = result;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_54:
    float result = *((float *)a2 + 4);
    *((_DWORD *)this + 29) = v3 | 2;
    *((float *)this + 4) = result;
    return result;
  }
LABEL_53:
  float result = *((float *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 11) = result;
  if ((*((_DWORD *)a2 + 29) & 2) != 0) {
    goto LABEL_54;
  }
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningFeatures::operator=(CMMsl *a1, const CMMsl::ViewObstructedMachineLearningFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures((CMMsl::ViewObstructedMachineLearningFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ViewObstructedMachineLearningFeatures *a2, CMMsl::ViewObstructedMachineLearningFeatures *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v5;
  int v6 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  int v7 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v7;
  int v8 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  int v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  int v10 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  int v11 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v11;
  int v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  int v13 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v13;
  int v14 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v14;
  int v15 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v15;
  int v16 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v16;
  int v17 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v17;
  int v18 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v18;
  int v19 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v19;
  int v20 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v20;
  int v21 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v21;
  int v22 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v22;
  int v23 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v23;
  int v24 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v24;
  int v25 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v25;
  int v26 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v26;
  int v27 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v27;
  int v28 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v28;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9B90;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::formatText(CMMsl::ViewObstructedMachineLearningFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "absMeanGravX", *((float *)this + 4));
    int v5 = *((_DWORD *)this + 29);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelFFTBin1", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "accelFFTBin2", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "accelFFTBin3", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "accelFFTBin4", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "accelFFTBin5", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "accelFFTBin6", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "accelFFTBinDotPressureFFTBin", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "fFTBin1", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "fFTBin2", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "fFTBin3", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "fFTBin4", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "fFTBin5", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "meanGravX", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "meanGravY", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "meanGravZ", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "medianLux", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "medianPocketProbability", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "pressureFFTBin1", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "pressureFFTBin2", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "pressureFFTBin3", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "pressureFFTBin4", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "pressureFFTBin5", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "pressureFFTBin6", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "stdPressure", *((float *)this + 28));
  if (*((_DWORD *)this + 29)) {
LABEL_27:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
LABEL_28:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::readFrom(CMMsl::ViewObstructedMachineLearningFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 29) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_124;
                  }
                  unint64_t v29 = v20++;
                  char v30 = *(unsigned char *)(v21 + v29);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_123;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_123:
                unint64_t v2 = v29 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_124;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_124:
              *((void *)this + 1) = v24;
              goto LABEL_115;
            case 2u:
              *((_DWORD *)this + 29) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 3u:
              *((_DWORD *)this + 29) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 4u:
              *((_DWORD *)this + 29) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 5u:
              *((_DWORD *)this + 29) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 6u:
              *((_DWORD *)this + 29) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 7u:
              *((_DWORD *)this + 29) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 8u:
              *((_DWORD *)this + 29) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 9u:
              *((_DWORD *)this + 29) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0xAu:
              *((_DWORD *)this + 29) |= 0x2000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0xBu:
              *((_DWORD *)this + 29) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0xCu:
              *((_DWORD *)this + 29) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0xDu:
              *((_DWORD *)this + 29) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0xEu:
              *((_DWORD *)this + 29) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0xFu:
              *((_DWORD *)this + 29) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0x10u:
              *((_DWORD *)this + 29) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0x11u:
              *((_DWORD *)this + 29) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0x12u:
              *((_DWORD *)this + 29) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0x13u:
              *((_DWORD *)this + 29) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0x14u:
              *((_DWORD *)this + 29) |= 0x100000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0x15u:
              *((_DWORD *)this + 29) |= 0x200000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0x16u:
              *((_DWORD *)this + 29) |= 0x400000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0x17u:
              *((_DWORD *)this + 29) |= 0x800000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0x18u:
              *((_DWORD *)this + 29) |= 0x1000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0x19u:
              *((_DWORD *)this + 29) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_105;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_114;
            case 0x1Au:
              *((_DWORD *)this + 29) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_114:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_105:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_115;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
LABEL_115:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 116);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x8000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 2u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 3u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 4u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 5u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 6u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 7u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 8u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 9u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0xAu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xBu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xCu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0xDu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xEu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xFu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x10u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x11u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x12u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x13u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x14u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x15u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x16u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x17u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x19u);
    if ((*(_DWORD *)(v3 + 116) & 2) == 0) {
      return this;
    }
    goto LABEL_53;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x18u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_53:
  float v5 = *(float *)(v3 + 16);

  return PB::Writer::write(a2, v5, 0x1Au);
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::hash_value(CMMsl::ViewObstructedMachineLearningFeatures *this)
{
  int v1 = *((_DWORD *)this + 29);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_3;
    }
LABEL_79:
    uint64_t v4 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_6;
    }
LABEL_80:
    uint64_t v6 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_9;
    }
LABEL_81:
    uint64_t v8 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_82:
    uint64_t v10 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_15;
    }
LABEL_83:
    uint64_t v12 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_18;
    }
LABEL_84:
    uint64_t v14 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_21;
    }
LABEL_85:
    uint64_t v16 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_24;
    }
LABEL_86:
    uint64_t v18 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_27;
    }
LABEL_87:
    uint64_t v20 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_30;
    }
LABEL_88:
    uint64_t v22 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_33;
    }
LABEL_89:
    uint64_t v24 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_36;
    }
LABEL_90:
    uint64_t v26 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_39;
    }
LABEL_91:
    uint64_t v28 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_42;
    }
LABEL_92:
    uint64_t v30 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_45;
    }
LABEL_93:
    uint64_t v32 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_48;
    }
LABEL_94:
    uint64_t v34 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_51;
    }
LABEL_95:
    uint64_t v36 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_54;
    }
LABEL_96:
    uint64_t v38 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_57;
    }
LABEL_97:
    uint64_t v40 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_60;
    }
LABEL_98:
    uint64_t v42 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_63;
    }
LABEL_99:
    uint64_t v44 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_66;
    }
LABEL_100:
    uint64_t v46 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_69;
    }
LABEL_101:
    uint64_t v48 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_72;
    }
    goto LABEL_102;
  }
  uint64_t v2 = *((void *)this + 1);
  if ((v1 & 0x4000) == 0) {
    goto LABEL_79;
  }
LABEL_3:
  float v3 = *((float *)this + 17);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_80;
  }
LABEL_6:
  float v5 = *((float *)this + 18);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_81;
  }
LABEL_9:
  float v7 = *((float *)this + 19);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_82;
  }
LABEL_12:
  float v9 = *((float *)this + 12);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_83;
  }
LABEL_15:
  float v11 = *((float *)this + 13);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_84;
  }
LABEL_18:
  float v13 = *((float *)this + 14);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_85;
  }
LABEL_21:
  float v15 = *((float *)this + 15);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_86;
  }
LABEL_24:
  float v17 = *((float *)this + 16);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_87;
  }
LABEL_27:
  float v19 = *((float *)this + 28);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_88;
  }
LABEL_30:
  float v21 = *((float *)this + 21);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_89;
  }
LABEL_33:
  float v23 = *((float *)this + 20);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_90;
  }
LABEL_36:
  float v25 = *((float *)this + 5);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_91;
  }
LABEL_39:
  float v27 = *((float *)this + 6);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_92;
  }
LABEL_42:
  float v29 = *((float *)this + 7);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_93;
  }
LABEL_45:
  float v31 = *((float *)this + 8);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_94;
  }
LABEL_48:
  float v33 = *((float *)this + 9);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_95;
  }
LABEL_51:
  float v35 = *((float *)this + 10);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_96;
  }
LABEL_54:
  float v37 = *((float *)this + 22);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_97;
  }
LABEL_57:
  float v39 = *((float *)this + 23);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_98;
  }
LABEL_60:
  float v41 = *((float *)this + 24);
  uint64_t v42 = LODWORD(v41);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_99;
  }
LABEL_63:
  float v43 = *((float *)this + 25);
  uint64_t v44 = LODWORD(v43);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_100;
  }
LABEL_66:
  float v45 = *((float *)this + 26);
  uint64_t v46 = LODWORD(v45);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_101;
  }
LABEL_69:
  float v47 = *((float *)this + 27);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_72:
    float v49 = *((float *)this + 11);
    uint64_t v50 = LODWORD(v49);
    if (v49 == 0.0) {
      uint64_t v50 = 0;
    }
    if ((v1 & 2) != 0) {
      goto LABEL_75;
    }
LABEL_103:
    uint64_t v52 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
  }
LABEL_102:
  uint64_t v50 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_103;
  }
LABEL_75:
  float v51 = *((float *)this + 4);
  uint64_t v52 = LODWORD(v51);
  if (v51 == 0.0) {
    uint64_t v52 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
}

void CMMsl::ViewObstructedMachineLearningProbabilities::~ViewObstructedMachineLearningProbabilities(CMMsl::ViewObstructedMachineLearningProbabilities *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities(CMMsl::ViewObstructedMachineLearningProbabilities *this, const CMMsl::ViewObstructedMachineLearningProbabilities *a2)
{
  *(void *)this = off_1003A9BC8;
  *((_DWORD *)this + 16) = 0;
  __int16 v2 = *((_WORD *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 32) = 1;
    *((void *)this + 1) = v4;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 5);
    v3 |= 4u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 5) = result;
    __int16 v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    float result = *((float *)a2 + 7);
    v3 |= 0x10u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 7) = result;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  float result = *((float *)a2 + 9);
  v3 |= 0x40u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  float result = *((float *)a2 + 13);
  v3 |= 0x400u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 13) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  float result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 15) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  float result = *((float *)a2 + 12);
  v3 |= 0x200u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 12) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  float result = *((float *)a2 + 4);
  v3 |= 2u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  float result = *((float *)a2 + 14);
  v3 |= 0x800u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 14) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  float result = *((float *)a2 + 11);
  v3 |= 0x100u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 11) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_28:
    float result = *((float *)a2 + 10);
    *((_WORD *)this + 32) = v3 | 0x80;
    *((float *)this + 10) = result;
    return result;
  }
LABEL_27:
  float result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 6) = result;
  if ((*((_WORD *)a2 + 32) & 0x80) != 0) {
    goto LABEL_28;
  }
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningProbabilities::operator=(CMMsl *a1, const CMMsl::ViewObstructedMachineLearningProbabilities *a2)
{
  if (a1 != a2)
  {
    CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities((CMMsl::ViewObstructedMachineLearningProbabilities *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningProbabilities *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ViewObstructedMachineLearningProbabilities *a2, CMMsl::ViewObstructedMachineLearningProbabilities *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  int v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  int v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  int v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  int v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  int v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  int v13 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v13;
  int v14 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v14;
  int v15 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v15;
  float result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  return result;
}

float CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9BC8;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningProbabilities::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningProbabilities *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::formatText(CMMsl::ViewObstructedMachineLearningProbabilities *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "bagObstructed", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "closeCoveredBagObstructed", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "closeCoveredObstructed", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "closeCoveredPocketObstructed", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "inHandObstructed", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "looseCoveredBagObstructed", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "looseCoveredObstructed", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "looseCoveredPocketObstructed", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "obstructed", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "otherObstructed", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "pocketObstructed", *((float *)this + 14));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  if ((*((_WORD *)this + 32) & 0x1000) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "visible", *((float *)this + 15));
LABEL_15:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::readFrom(CMMsl::ViewObstructedMachineLearningProbabilities *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 32) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_80;
                  }
                  unint64_t v29 = v20++;
                  char v30 = *(unsigned char *)(v21 + v29);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_79;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_79:
                unint64_t v2 = v29 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_80;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_80:
              *((void *)this + 1) = v24;
              goto LABEL_81;
            case 2u:
              *((_WORD *)this + 32) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_75;
            case 3u:
              *((_WORD *)this + 32) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_75;
            case 4u:
              *((_WORD *)this + 32) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_75;
            case 5u:
              *((_WORD *)this + 32) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_75;
            case 6u:
              *((_WORD *)this + 32) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_75;
            case 7u:
              *((_WORD *)this + 32) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_75;
            case 8u:
              *((_WORD *)this + 32) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_75;
            case 9u:
              *((_WORD *)this + 32) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_75;
            case 0xAu:
              *((_WORD *)this + 32) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_75;
            case 0xBu:
              *((_WORD *)this + 32) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_75;
            case 0xCu:
              *((_WORD *)this + 32) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_66;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_75;
            case 0xDu:
              *((_WORD *)this + 32) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_75:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_66:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_81;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
LABEL_81:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 64);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 2u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 4u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 5u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 6u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 7u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 8u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 9u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xCu);
    if ((*(_WORD *)(v3 + 64) & 0x80) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_27:
  float v5 = *(float *)(v3 + 40);

  return PB::Writer::write(a2, v5, 0xDu);
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::hash_value(CMMsl::ViewObstructedMachineLearningProbabilities *this)
{
  __int16 v1 = *((_WORD *)this + 32);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_3;
    }
LABEL_40:
    uint64_t v4 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_41:
    uint64_t v6 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_42:
    uint64_t v8 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_43:
    uint64_t v10 = 0;
    if ((*((_WORD *)this + 32) & 0x400) != 0) {
      goto LABEL_15;
    }
LABEL_44:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 32) & 0x1000) != 0) {
      goto LABEL_18;
    }
LABEL_45:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0) {
      goto LABEL_21;
    }
LABEL_46:
    uint64_t v16 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_24;
    }
LABEL_47:
    uint64_t v18 = 0;
    if ((*((_WORD *)this + 32) & 0x800) != 0) {
      goto LABEL_27;
    }
LABEL_48:
    uint64_t v20 = 0;
    if ((*((_WORD *)this + 32) & 0x100) != 0) {
      goto LABEL_30;
    }
LABEL_49:
    uint64_t v22 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_33;
    }
    goto LABEL_50;
  }
  uint64_t v2 = *((void *)this + 1);
  if ((v1 & 4) == 0) {
    goto LABEL_40;
  }
LABEL_3:
  float v3 = *((float *)this + 5);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_41;
  }
LABEL_6:
  float v5 = *((float *)this + 7);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_42;
  }
LABEL_9:
  float v7 = *((float *)this + 8);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_43;
  }
LABEL_12:
  float v9 = *((float *)this + 9);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x400) == 0) {
    goto LABEL_44;
  }
LABEL_15:
  float v11 = *((float *)this + 13);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x1000) == 0) {
    goto LABEL_45;
  }
LABEL_18:
  float v13 = *((float *)this + 15);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x200) == 0) {
    goto LABEL_46;
  }
LABEL_21:
  float v15 = *((float *)this + 12);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_47;
  }
LABEL_24:
  float v17 = *((float *)this + 4);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x800) == 0) {
    goto LABEL_48;
  }
LABEL_27:
  float v19 = *((float *)this + 14);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x100) == 0) {
    goto LABEL_49;
  }
LABEL_30:
  float v21 = *((float *)this + 11);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 8) != 0)
  {
LABEL_33:
    float v23 = *((float *)this + 6);
    uint64_t v24 = LODWORD(v23);
    if (v23 == 0.0) {
      uint64_t v24 = 0;
    }
    if ((v1 & 0x80) != 0) {
      goto LABEL_36;
    }
LABEL_51:
    uint64_t v26 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26;
  }
LABEL_50:
  uint64_t v24 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_51;
  }
LABEL_36:
  float v25 = *((float *)this + 10);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26;
}

void CMMsl::ViewObstructedState::~ViewObstructedState(CMMsl::ViewObstructedState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::ViewObstructedState::ViewObstructedState(uint64_t this, const CMMsl::ViewObstructedState *a2)
{
  *(void *)this = off_1003A9C00;
  *(_DWORD *)(this + 84) = 0;
  int v2 = *((_DWORD *)a2 + 21);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *(_DWORD *)(this + 84) = 1;
    *(void *)(this + 8) = v4;
    int v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 80);
    v3 |= 0x20000u;
    *(_DWORD *)(this + 84) = v3;
    *(unsigned char *)(this + 80) = v5;
    int v2 = *((_DWORD *)a2 + 21);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_DWORD *)(this + 84) = v3;
    *(_DWORD *)(this + 20) = v6;
    int v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 64) = v7;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v8 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 60) = v8;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v9 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 48) = v9;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v10 = *((_DWORD *)a2 + 19);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 76) = v10;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v11 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 52) = v11;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v12 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 56) = v12;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 36) = v13;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v14 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 40) = v14;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v15 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 24) = v15;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v16 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 28) = v16;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v17 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 32) = v17;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v18 = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 68) = v18;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v19 = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 72) = v19;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v20 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 44) = v20;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 2) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0) {
      return this;
    }
LABEL_40:
    char v22 = *((unsigned char *)a2 + 81);
    *(_DWORD *)(this + 84) = v3 | 0x40000;
    *(unsigned char *)(this + 81) = v22;
    return this;
  }
LABEL_39:
  int v21 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 16) = v21;
  if ((*((_DWORD *)a2 + 21) & 0x40000) != 0) {
    goto LABEL_40;
  }
  return this;
}

CMMsl *CMMsl::ViewObstructedState::operator=(CMMsl *a1, const CMMsl::ViewObstructedState *a2)
{
  if (a1 != a2)
  {
    CMMsl::ViewObstructedState::ViewObstructedState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ViewObstructedState *a2, CMMsl::ViewObstructedState *a3)
{
  int v3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 80);
  *((unsigned char *)this + 80) = *((unsigned char *)a2 + 80);
  *((unsigned char *)a2 + 80) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  int v6 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  int v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  int v8 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  int v9 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v9;
  int v10 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v10;
  int v11 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v11;
  int v12 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v12;
  int v13 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v13;
  int v14 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v14;
  int v15 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v15;
  float result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 81);
  *((unsigned char *)this + 81) = *((unsigned char *)a2 + 81);
  *((unsigned char *)a2 + 81) = v4;
  return result;
}

float CMMsl::ViewObstructedState::ViewObstructedState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9C00;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  float result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return result;
}

CMMsl *CMMsl::ViewObstructedState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ViewObstructedState::ViewObstructedState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ViewObstructedState::formatText(CMMsl::ViewObstructedState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "currentEventTag", *((_DWORD *)this + 4));
    int v5 = *((_DWORD *)this + 21);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "currentState", *((_DWORD *)this + 5));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "filteredGravityX", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "filteredGravityY", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "filteredGravityZ", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "gravityAngle", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "gravityShift", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "isMovingFiltered", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "lux", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "luxBaseline", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "luxShift", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "motionType", *((_DWORD *)this + 15));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "orientation", *((_DWORD *)this + 16));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "pocketProbEnter", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "pocketProbExit", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "pocketProbability", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "shouldSuppress", *((unsigned char *)this + 80));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "sufficientMotion", *((unsigned char *)this + 81));
  if (*((_DWORD *)this + 21)) {
LABEL_20:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
LABEL_21:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ViewObstructedState::readFrom(CMMsl::ViewObstructedState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 21) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_144;
                  }
                  unint64_t v57 = v20++;
                  char v58 = *(unsigned char *)(v21 + v57);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_143;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_143:
                unint64_t v2 = v57 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_144;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_144:
              *((void *)this + 1) = v24;
              goto LABEL_165;
            case 2u:
              *((_DWORD *)this + 21) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 80) = v28;
              goto LABEL_165;
            case 3u:
              *((_DWORD *)this + 21) |= 4u;
              unint64_t v29 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v30 = *(void *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_149;
                  }
                  unint64_t v61 = v29++;
                  char v62 = *(unsigned char *)(v30 + v61);
                  *((void *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_148:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_149;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_148;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_149;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_149:
              *((_DWORD *)this + 5) = v33;
              goto LABEL_165;
            case 4u:
              *((_DWORD *)this + 21) |= 0x2000u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_154;
                  }
                  unint64_t v65 = v35++;
                  char v66 = *(unsigned char *)(v36 + v65);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_153:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_154;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_153;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_154;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_154:
              *((_DWORD *)this + 16) = v39;
              goto LABEL_165;
            case 5u:
              *((_DWORD *)this + 21) |= 0x1000u;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_159;
                  }
                  unint64_t v69 = v41++;
                  char v70 = *(unsigned char *)(v42 + v69);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_158:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_159;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_158;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_159;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_159:
              *((_DWORD *)this + 15) = v45;
              goto LABEL_165;
            case 6u:
              *((_DWORD *)this + 21) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_89;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_139;
            case 7u:
              *((_DWORD *)this + 21) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_89;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_139;
            case 8u:
              *((_DWORD *)this + 21) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_89;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_139;
            case 9u:
              *((_DWORD *)this + 21) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_89;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_139;
            case 0xAu:
              *((_DWORD *)this + 21) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_89;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_139;
            case 0xBu:
              *((_DWORD *)this + 21) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_89;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_139;
            case 0xCu:
              *((_DWORD *)this + 21) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_89;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_139;
            case 0xDu:
              *((_DWORD *)this + 21) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_89;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_139;
            case 0xEu:
              *((_DWORD *)this + 21) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_89;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_139;
            case 0xFu:
              *((_DWORD *)this + 21) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_89;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_139;
            case 0x10u:
              *((_DWORD *)this + 21) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_89;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_139;
            case 0x11u:
              *((_DWORD *)this + 21) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_139:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_89:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_165;
            case 0x12u:
              *((_DWORD *)this + 21) |= 2u;
              unint64_t v47 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v48 = *(void *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_164;
                  }
                  unint64_t v73 = v47++;
                  char v74 = *(unsigned char *)(v48 + v73);
                  *((void *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_163:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_164;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v51) = 0;
                }
                goto LABEL_163;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)a2 + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_164;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_164:
              *((_DWORD *)this + 4) = v51;
LABEL_165:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x13u:
              *((_DWORD *)this + 21) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v54 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v53 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v54 = v53 != 0;
              }
              *((unsigned char *)this + 81) = v54;
              goto LABEL_165;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_165;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 84);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 80), 2u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 4u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 5u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 6u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 7u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 8u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 9u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xAu);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xBu);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xCu);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xDu);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xEu);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xFu);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x10u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 2) == 0) {
      goto LABEL_19;
    }
LABEL_38:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 0x12u);
    if ((*(_DWORD *)(v3 + 84) & 0x40000) == 0) {
      return this;
    }
    goto LABEL_39;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x11u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) != 0) {
    goto LABEL_38;
  }
LABEL_19:
  if ((v4 & 0x40000) == 0) {
    return this;
  }
LABEL_39:
  char v5 = *(unsigned char *)(v3 + 81);

  return PB::Writer::write(a2, v5, 0x13u);
}

uint64_t CMMsl::ViewObstructedState::hash_value(CMMsl::ViewObstructedState *this)
{
  int v1 = *((_DWORD *)this + 21);
  if (v1)
  {
    uint64_t v2 = *((void *)this + 1);
    if ((v1 & 0x20000) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned __int8 *)this + 80);
      if ((v1 & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned int *)this + 5);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v4 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned int *)this + 16);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_6:
    uint64_t v6 = *((unsigned int *)this + 15);
    if ((v1 & 0x200) != 0) {
      goto LABEL_7;
    }
LABEL_50:
    uint64_t v8 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_10;
    }
LABEL_51:
    uint64_t v10 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_13;
    }
LABEL_52:
    uint64_t v12 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_16;
    }
LABEL_53:
    uint64_t v14 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_19;
    }
LABEL_54:
    uint64_t v16 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_22;
    }
LABEL_55:
    uint64_t v18 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_25;
    }
LABEL_56:
    uint64_t v20 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_28;
    }
LABEL_57:
    uint64_t v22 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_31;
    }
LABEL_58:
    uint64_t v24 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_34;
    }
LABEL_59:
    uint64_t v26 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_37;
    }
LABEL_60:
    uint64_t v28 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_40;
    }
LABEL_61:
    uint64_t v30 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_43;
    }
LABEL_62:
    uint64_t v31 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_44;
    }
LABEL_63:
    uint64_t v32 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32;
  }
LABEL_49:
  uint64_t v6 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_50;
  }
LABEL_7:
  float v7 = *((float *)this + 12);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_51;
  }
LABEL_10:
  float v9 = *((float *)this + 19);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_52;
  }
LABEL_13:
  float v11 = *((float *)this + 13);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_53;
  }
LABEL_16:
  float v13 = *((float *)this + 14);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_54;
  }
LABEL_19:
  float v15 = *((float *)this + 9);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_55;
  }
LABEL_22:
  float v17 = *((float *)this + 10);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_56;
  }
LABEL_25:
  float v19 = *((float *)this + 6);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_57;
  }
LABEL_28:
  float v21 = *((float *)this + 7);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_58;
  }
LABEL_31:
  float v23 = *((float *)this + 8);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_59;
  }
LABEL_34:
  float v25 = *((float *)this + 17);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_60;
  }
LABEL_37:
  float v27 = *((float *)this + 18);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_61;
  }
LABEL_40:
  float v29 = *((float *)this + 11);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_62;
  }
LABEL_43:
  uint64_t v31 = *((unsigned int *)this + 4);
  if ((v1 & 0x40000) == 0) {
    goto LABEL_63;
  }
LABEL_44:
  uint64_t v32 = *((unsigned __int8 *)this + 81);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32;
}

void CMMsl::VisionCompassBias::~VisionCompassBias(CMMsl::VisionCompassBias *this)
{
  *(void *)this = off_1003A9C38;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VisionCompassBias::~VisionCompassBias(this);

  operator delete();
}

CMMsl::VisionCompassBias *CMMsl::VisionCompassBias::VisionCompassBias(CMMsl::VisionCompassBias *this, const CMMsl::VisionCompassBias *a2)
{
  *(void *)this = off_1003A9C38;
  *((void *)this + 1) = 0;
  uint64_t v4 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 19) = 0;
  __int16 v5 = *((_WORD *)a2 + 38);
  if (v5)
  {
    uint64_t v7 = *((void *)a2 + 4);
    __int16 v6 = 1;
    *((_WORD *)this + 38) = 1;
    *((void *)this + 4) = v7;
    __int16 v5 = *((_WORD *)a2 + 38);
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = 0;
  if ((v5 & 2) != 0)
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 5);
    v6 |= 2u;
    *((_WORD *)this + 38) = v6;
    *((void *)this + 5) = v8;
    __int16 v5 = *((_WORD *)a2 + 38);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    int v13 = *((_DWORD *)a2 + 12);
    v6 |= 4u;
    *((_WORD *)this + 38) = v6;
    *((_DWORD *)this + 12) = v13;
    __int16 v5 = *((_WORD *)a2 + 38);
    if ((v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v5 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v14 = *((_DWORD *)a2 + 14);
  v6 |= 0x10u;
  *((_WORD *)this + 38) = v6;
  *((_DWORD *)this + 14) = v14;
  if ((*((_WORD *)a2 + 38) & 8) != 0)
  {
LABEL_9:
    int v9 = *((_DWORD *)a2 + 13);
    *((_WORD *)this + 38) = v6 | 8;
    *((_DWORD *)this + 13) = v9;
  }
LABEL_10:
  if (this != a2) {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v10 = *((_WORD *)a2 + 38);
  if ((v10 & 0x40) != 0)
  {
    int v15 = *((_DWORD *)a2 + 16);
    *((_WORD *)this + 38) |= 0x40u;
    *((_DWORD *)this + 16) = v15;
    __int16 v10 = *((_WORD *)a2 + 38);
    if ((v10 & 0x80) == 0)
    {
LABEL_14:
      if ((v10 & 0x100) == 0) {
        goto LABEL_15;
      }
LABEL_23:
      int v17 = *((_DWORD *)a2 + 18);
      *((_WORD *)this + 38) |= 0x100u;
      *((_DWORD *)this + 18) = v17;
      if ((*((_WORD *)a2 + 38) & 0x20) == 0) {
        return this;
      }
      goto LABEL_16;
    }
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_14;
  }
  int v16 = *((_DWORD *)a2 + 17);
  *((_WORD *)this + 38) |= 0x80u;
  *((_DWORD *)this + 17) = v16;
  __int16 v10 = *((_WORD *)a2 + 38);
  if ((v10 & 0x100) != 0) {
    goto LABEL_23;
  }
LABEL_15:
  if ((v10 & 0x20) != 0)
  {
LABEL_16:
    int v11 = *((_DWORD *)a2 + 15);
    *((_WORD *)this + 38) |= 0x20u;
    *((_DWORD *)this + 15) = v11;
  }
  return this;
}

CMMsl *CMMsl::VisionCompassBias::operator=(CMMsl *a1, const CMMsl::VisionCompassBias *a2)
{
  if (a1 != a2)
  {
    CMMsl::VisionCompassBias::VisionCompassBias((CMMsl::VisionCompassBias *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisionCompassBias *)v5, v3);
    CMMsl::VisionCompassBias::~VisionCompassBias((CMMsl::VisionCompassBias *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VisionCompassBias *a2, CMMsl::VisionCompassBias *a3)
{
  int v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  LODWORD(v5) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LODWORD(v5) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  float result = *((float *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((float *)a2 + 17) = result;
  LODWORD(v8) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v8;
  LODWORD(v8) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v8;
  return result;
}

uint64_t CMMsl::VisionCompassBias::VisionCompassBias(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9C38;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return a1;
}

CMMsl *CMMsl::VisionCompassBias::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VisionCompassBias::VisionCompassBias((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisionCompassBias *)v5, v3);
    CMMsl::VisionCompassBias::~VisionCompassBias((CMMsl::VisionCompassBias *)v5);
  }
  return a1;
}

uint64_t CMMsl::VisionCompassBias::formatText(CMMsl::VisionCompassBias *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "compassBias", *((float *)this + 12));
    __int16 v5 = *((_WORD *)this + 38);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "estimatedBiasUncertainty", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "estimatedHeading", *((float *)this + 14));
  if ((*((_WORD *)this + 38) & 0x20) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "globalReferenceFrame", *((_DWORD *)this + 15));
LABEL_6:
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "lslGlobalToDeviceFrameRotationMatrix", v8);
  }
  __int16 v9 = *((_WORD *)this + 38);
  if ((v9 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "lslHeadingAccuracy", *((float *)this + 16));
    __int16 v9 = *((_WORD *)this + 38);
    if ((v9 & 0x80) == 0)
    {
LABEL_10:
      if ((v9 & 1) == 0) {
        goto LABEL_11;
      }
      goto LABEL_23;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(a2, "lslHeadingConfidence", *((float *)this + 17));
  __int16 v9 = *((_WORD *)this + 38);
  if ((v9 & 1) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 4));
  __int16 v9 = *((_WORD *)this + 38);
  if ((v9 & 0x100) == 0)
  {
LABEL_12:
    if ((v9 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "roadID", *((_DWORD *)this + 18));
  if ((*((_WORD *)this + 38) & 2) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
LABEL_14:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VisionCompassBias::readFrom(CMMsl::VisionCompassBias *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 8);
    __int16 v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_WORD *)this + 38) |= 1u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
            goto LABEL_127;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v23);
          goto LABEL_31;
        case 2u:
          *((_WORD *)this + 38) |= 2u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
            goto LABEL_127;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v24);
LABEL_31:
          uint64_t v25 = *((void *)a2 + 1) + 8;
          goto LABEL_130;
        case 3u:
          *((_WORD *)this + 38) |= 4u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)a2 + 2)) {
            goto LABEL_127;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v26);
          goto LABEL_129;
        case 4u:
          *((_WORD *)this + 38) |= 0x10u;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)a2 + 2)) {
            goto LABEL_127;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v27);
          goto LABEL_129;
        case 5u:
          *((_WORD *)this + 38) |= 8u;
          unint64_t v28 = *((void *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)a2 + 2)) {
            goto LABEL_127;
          }
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v28);
          goto LABEL_129;
        case 6u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v29 = *((void *)a2 + 1);
            unint64_t v30 = *((void *)a2 + 2);
            while (v29 < v30 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v32 = (char *)*((void *)this + 2);
              unint64_t v31 = *((void *)this + 3);
              if ((unint64_t)v32 >= v31)
              {
                char v34 = (char *)*v8;
                uint64_t v35 = (v32 - (unsigned char *)*v8) >> 2;
                unint64_t v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 62) {
                  goto LABEL_141;
                }
                uint64_t v37 = v31 - (void)v34;
                if (v37 >> 1 > v36) {
                  unint64_t v36 = v37 >> 1;
                }
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v38 = v36;
                }
                if (v38)
                {
                  uint64_t v39 = (char *)sub_100024458((uint64_t)v9, v38);
                  char v34 = (char *)*((void *)this + 1);
                  uint64_t v32 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v39 = 0;
                }
                char v40 = &v39[4 * v35];
                *(_DWORD *)char v40 = 0;
                uint64_t v33 = v40 + 4;
                while (v32 != v34)
                {
                  int v41 = *((_DWORD *)v32 - 1);
                  v32 -= 4;
                  *((_DWORD *)v40 - 1) = v41;
                  v40 -= 4;
                }
                *((void *)this + 1) = v40;
                *((void *)this + 2) = v33;
                *((void *)this + 3) = &v39[4 * v38];
                if (v34) {
                  operator delete(v34);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v32 = 0;
                uint64_t v33 = v32 + 4;
              }
              *((void *)this + 2) = v33;
              unint64_t v42 = *((void *)a2 + 1);
              if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v33 - 1) = *(_DWORD *)(*(void *)a2 + v42);
              unint64_t v30 = *((void *)a2 + 2);
              unint64_t v29 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v29;
            }
            PB::Reader::recallMark();
          }
          else
          {
            char v62 = (char *)*((void *)this + 2);
            unint64_t v61 = *((void *)this + 3);
            if ((unint64_t)v62 >= v61)
            {
              unsigned int v72 = (char *)*v8;
              uint64_t v73 = (v62 - (unsigned char *)*v8) >> 2;
              unint64_t v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 62) {
LABEL_141:
              }
                sub_10000EE98();
              uint64_t v75 = v61 - (void)v72;
              if (v75 >> 1 > v74) {
                unint64_t v74 = v75 >> 1;
              }
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v74;
              }
              if (v76)
              {
                uint64_t v77 = (char *)sub_100024458((uint64_t)v9, v76);
                unsigned int v72 = (char *)*((void *)this + 1);
                char v62 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v77 = 0;
              }
              unint64_t v78 = &v77[4 * v73];
              *(_DWORD *)unint64_t v78 = 0;
              char v63 = v78 + 4;
              while (v62 != v72)
              {
                int v79 = *((_DWORD *)v62 - 1);
                v62 -= 4;
                *((_DWORD *)v78 - 1) = v79;
                v78 -= 4;
              }
              *((void *)this + 1) = v78;
              *((void *)this + 2) = v63;
              *((void *)this + 3) = &v77[4 * v76];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(_DWORD *)char v62 = 0;
              char v63 = v62 + 4;
            }
            *((void *)this + 2) = v63;
            unint64_t v80 = *((void *)a2 + 1);
            if (v80 <= 0xFFFFFFFFFFFFFFFBLL && v80 + 4 <= *((void *)a2 + 2))
            {
              *(v63 - 1) = *(_DWORD *)(*(void *)a2 + v80);
LABEL_129:
              uint64_t v25 = *((void *)a2 + 1) + 4;
LABEL_130:
              *((void *)a2 + 1) = v25;
            }
            else
            {
LABEL_127:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_131:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 7u:
          *((_WORD *)this + 38) |= 0x40u;
          unint64_t v43 = *((void *)a2 + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)a2 + 2)) {
            goto LABEL_127;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v43);
          goto LABEL_129;
        case 8u:
          *((_WORD *)this + 38) |= 0x80u;
          unint64_t v44 = *((void *)a2 + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)a2 + 2)) {
            goto LABEL_127;
          }
          *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v44);
          goto LABEL_129;
        case 9u:
          *((_WORD *)this + 38) |= 0x100u;
          unint64_t v45 = *((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
          uint64_t v47 = *(void *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)a2 + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_113;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v16 = v49++ > 8;
            }
            while (!v16);
LABEL_93:
            LODWORD(v50) = 0;
            goto LABEL_113;
          }
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v66 = v45 + 1;
              char v67 = *(unsigned char *)(v47 + v45);
              *((void *)a2 + 1) = v66;
              v50 |= (unint64_t)(v67 & 0x7F) << v64;
              if (v67 < 0)
              {
                v64 += 7;
                unint64_t v45 = v66;
                BOOL v16 = v65++ > 8;
                if (v16) {
                  goto LABEL_93;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v50) = 0;
              }
            }
            break;
          }
LABEL_113:
          *((_DWORD *)this + 18) = v50;
          goto LABEL_131;
        case 0xAu:
          *((_WORD *)this + 38) |= 0x20u;
          unint64_t v53 = *((void *)a2 + 1);
          unint64_t v54 = *((void *)a2 + 2);
          uint64_t v55 = *(void *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)a2 + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_116;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v16 = v57++ > 8;
            }
            while (!v16);
LABEL_100:
            LODWORD(v58) = 0;
            goto LABEL_116;
          }
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v70 = v53 + 1;
              char v71 = *(unsigned char *)(v55 + v53);
              *((void *)a2 + 1) = v70;
              v58 |= (unint64_t)(v71 & 0x7F) << v68;
              if (v71 < 0)
              {
                v68 += 7;
                unint64_t v53 = v70;
                BOOL v16 = v69++ > 8;
                if (v16) {
                  goto LABEL_100;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v58) = 0;
              }
            }
            break;
          }
LABEL_116:
          *((_DWORD *)this + 15) = v58;
          goto LABEL_131;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_131;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VisionCompassBias::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 76);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(float *)(v3 + 56), 4u);
    if ((*(_WORD *)(v3 + 76) & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 3u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x10) != 0) {
    goto LABEL_18;
  }
LABEL_5:
  if ((v4 & 8) != 0) {
LABEL_6:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 52), 5u);
LABEL_7:
  __int16 v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 6u);
  }
  __int16 v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 64), 7u);
    __int16 v8 = *(_WORD *)(v3 + 76);
    if ((v8 & 0x80) == 0)
    {
LABEL_12:
      if ((v8 & 0x100) == 0) {
        goto LABEL_13;
      }
LABEL_22:
      this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 9u);
      if ((*(_WORD *)(v3 + 76) & 0x20) == 0) {
        return this;
      }
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_12;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 8u);
  __int16 v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x100) != 0) {
    goto LABEL_22;
  }
LABEL_13:
  if ((v8 & 0x20) == 0) {
    return this;
  }
LABEL_23:
  unsigned int v9 = *(_DWORD *)(v3 + 60);

  return PB::Writer::writeVarInt(a2, v9, 0xAu);
}

uint64_t CMMsl::VisionCompassBias::hash_value(CMMsl::VisionCompassBias *this)
{
  __int16 v2 = *((_WORD *)this + 38);
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_22:
    uint64_t v4 = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_7;
    }
LABEL_23:
    uint64_t v6 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
  if (*((double *)this + 4) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 4);
  }
  if ((v2 & 2) == 0) {
    goto LABEL_22;
  }
LABEL_3:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *((void *)this + 5);
  }
  if ((v2 & 4) == 0) {
    goto LABEL_23;
  }
LABEL_7:
  float v5 = *((float *)this + 12);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = LODWORD(v5);
  }
  if ((v2 & 0x10) != 0)
  {
LABEL_11:
    float v7 = *((float *)this + 14);
    if (v7 == 0.0) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = LODWORD(v7);
    }
    if ((v2 & 8) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v10 = 0;
    goto LABEL_26;
  }
LABEL_24:
  uint64_t v8 = 0;
  if ((v2 & 8) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  float v9 = *((float *)this + 13);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = LODWORD(v9);
  }
LABEL_26:
  uint64_t v11 = PBHashBytes();
  __int16 v12 = *((_WORD *)this + 38);
  if ((v12 & 0x40) == 0)
  {
    uint64_t v13 = 0;
    if ((v12 & 0x80) != 0) {
      goto LABEL_28;
    }
LABEL_36:
    uint64_t v15 = 0;
    if ((*((_WORD *)this + 38) & 0x100) != 0) {
      goto LABEL_31;
    }
LABEL_37:
    uint64_t v16 = 0;
    if ((v12 & 0x20) != 0) {
      goto LABEL_32;
    }
LABEL_38:
    uint64_t v17 = 0;
    return v4 ^ v3 ^ v6 ^ v8 ^ v10 ^ v13 ^ v15 ^ v16 ^ v11 ^ v17;
  }
  float v18 = *((float *)this + 16);
  uint64_t v13 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v12 & 0x80) == 0) {
    goto LABEL_36;
  }
LABEL_28:
  float v14 = *((float *)this + 17);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((*((_WORD *)this + 38) & 0x100) == 0) {
    goto LABEL_37;
  }
LABEL_31:
  uint64_t v16 = *((unsigned int *)this + 18);
  if ((v12 & 0x20) == 0) {
    goto LABEL_38;
  }
LABEL_32:
  uint64_t v17 = *((unsigned int *)this + 15);
  return v4 ^ v3 ^ v6 ^ v8 ^ v10 ^ v13 ^ v15 ^ v16 ^ v11 ^ v17;
}

void CMMsl::VisualLocalization::~VisualLocalization(CMMsl::VisualLocalization *this)
{
  *(void *)this = off_1003A9C70;
  __int16 v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VisualLocalization::~VisualLocalization(this);

  operator delete();
}

CMMsl::VisualLocalization *CMMsl::VisualLocalization::VisualLocalization(CMMsl::VisualLocalization *this, const CMMsl::VisualLocalization *a2)
{
  *(void *)this = off_1003A9C70;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *((_DWORD *)this + 25) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  char v5 = *((unsigned char *)a2 + 100);
  if ((v5 & 0x10) != 0)
  {
    uint64_t v7 = *((void *)a2 + 11);
    char v6 = 16;
    *((unsigned char *)this + 100) = 16;
    *((void *)this + 11) = v7;
    char v5 = *((unsigned char *)a2 + 100);
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if ((*((unsigned char *)a2 + 100) & 4) != 0)
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 9);
    v6 |= 4u;
    *((unsigned char *)this + 100) = v6;
    *((void *)this + 9) = v8;
    char v5 = *((unsigned char *)a2 + 100);
  }
LABEL_6:
  if ((v5 & 8) != 0)
  {
    uint64_t v12 = *((void *)a2 + 10);
    v6 |= 8u;
    *((unsigned char *)this + 100) = v6;
    *((void *)this + 10) = v12;
    char v5 = *((unsigned char *)a2 + 100);
    if ((v5 & 1) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v13 = *((void *)a2 + 7);
  v6 |= 1u;
  *((unsigned char *)this + 100) = v6;
  *((void *)this + 7) = v13;
  if ((*((unsigned char *)a2 + 100) & 2) != 0)
  {
LABEL_9:
    uint64_t v9 = *((void *)a2 + 8);
    *((unsigned char *)this + 100) = v6 | 2;
    *((void *)this + 8) = v9;
  }
LABEL_10:
  if (this != a2)
  {
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if ((*((unsigned char *)a2 + 100) & 0x20) != 0)
  {
    int v10 = *((_DWORD *)a2 + 24);
    *((unsigned char *)this + 100) |= 0x20u;
    *((_DWORD *)this + 24) = v10;
  }
  return this;
}

CMMsl *CMMsl::VisualLocalization::operator=(CMMsl *a1, const CMMsl::VisualLocalization *a2)
{
  if (a1 != a2)
  {
    CMMsl::VisualLocalization::VisualLocalization((CMMsl::VisualLocalization *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualLocalization *)v5, v3);
    CMMsl::VisualLocalization::~VisualLocalization((CMMsl::VisualLocalization *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VisualLocalization *a2, CMMsl::VisualLocalization *a3)
{
  int v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v4;
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v5;
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v6;
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v12;
  uint64_t v13 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v13;
  uint64_t v14 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v14;
  float result = *((float *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((float *)a2 + 24) = result;
  return result;
}

uint64_t CMMsl::VisualLocalization::VisualLocalization(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9C70;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

CMMsl *CMMsl::VisualLocalization::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VisualLocalization::VisualLocalization((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualLocalization *)v5, v3);
    CMMsl::VisualLocalization::~VisualLocalization((CMMsl::VisualLocalization *)v5);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalization::formatText(CMMsl::VisualLocalization *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 100);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitudeOfLocalizedPoseInEcefCoordinate", *((double *)this + 7));
    char v5 = *((unsigned char *)this + 100);
  }
  if ((v5 & 0x20) != 0) {
    PB::TextFormatter::format(a2, "confidence", *((float *)this + 24));
  }
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "covariance", v8);
  }
  char v9 = *((unsigned char *)this + 100);
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "horizontalAccuracyOfLocalizedPoseInEcefCoordinate", *((double *)this + 8));
    char v9 = *((unsigned char *)this + 100);
    if ((v9 & 4) == 0)
    {
LABEL_9:
      if ((v9 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
  }
  else if ((*((unsigned char *)this + 100) & 4) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "latitudeOfLocalizedPoseInEcefCoordinate", *((double *)this + 9));
  char v9 = *((unsigned char *)this + 100);
  if ((v9 & 8) == 0)
  {
LABEL_10:
    if ((v9 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "longitudeOfLocalizedPoseInEcefCoordinate", *((double *)this + 10));
  if ((*((unsigned char *)this + 100) & 0x10) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 11));
LABEL_12:
  uint64_t v10 = (double *)*((void *)this + 4);
  uint64_t v11 = (double *)*((void *)this + 5);
  while (v10 != v11)
  {
    double v12 = *v10++;
    PB::TextFormatter::format(a2, "transformMatrixFromCameraToEcefCoordinate", v12);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VisualLocalization::readFrom(CMMsl::VisualLocalization *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 8);
    char v9 = (char *)this + 24;
    uint64_t v10 = (void **)((char *)this + 32);
    uint64_t v11 = (char *)this + 48;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 100) |= 0x10u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v25);
          goto LABEL_122;
        case 2u:
          *((unsigned char *)this + 100) |= 4u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v26);
          goto LABEL_122;
        case 3u:
          *((unsigned char *)this + 100) |= 8u;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v27);
          goto LABEL_122;
        case 4u:
          *((unsigned char *)this + 100) |= 1u;
          unint64_t v28 = *((void *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v28);
          goto LABEL_122;
        case 5u:
          *((unsigned char *)this + 100) |= 2u;
          unint64_t v29 = *((void *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v29);
          goto LABEL_122;
        case 6u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v30 = *((void *)a2 + 1);
            unint64_t v31 = *((void *)a2 + 2);
            while (v30 < v31 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v33 = (char *)*((void *)this + 5);
              unint64_t v32 = *((void *)this + 6);
              if ((unint64_t)v33 >= v32)
              {
                uint64_t v35 = (char *)*v10;
                uint64_t v36 = (v33 - (unsigned char *)*v10) >> 3;
                unint64_t v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 61) {
                  goto LABEL_143;
                }
                uint64_t v38 = v32 - (void)v35;
                if (v38 >> 2 > v37) {
                  unint64_t v37 = v38 >> 2;
                }
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v39 = v37;
                }
                if (v39)
                {
                  char v40 = (char *)sub_10000EEB0((uint64_t)v11, v39);
                  uint64_t v35 = (char *)*((void *)this + 4);
                  uint64_t v33 = (char *)*((void *)this + 5);
                }
                else
                {
                  char v40 = 0;
                }
                int v41 = &v40[8 * v36];
                *(void *)int v41 = 0;
                char v34 = v41 + 8;
                while (v33 != v35)
                {
                  uint64_t v42 = *((void *)v33 - 1);
                  v33 -= 8;
                  *((void *)v41 - 1) = v42;
                  v41 -= 8;
                }
                *((void *)this + 4) = v41;
                *((void *)this + 5) = v34;
                *((void *)this + 6) = &v40[8 * v39];
                if (v35) {
                  operator delete(v35);
                }
              }
              else
              {
                *(void *)uint64_t v33 = 0;
                char v34 = v33 + 8;
              }
              *((void *)this + 5) = v34;
              unint64_t v43 = *((void *)a2 + 1);
              if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((void *)a2 + 2)) {
                goto LABEL_95;
              }
              *(v34 - 1) = *(void *)(*(void *)a2 + v43);
              unint64_t v31 = *((void *)a2 + 2);
              unint64_t v30 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v30;
            }
            goto LABEL_96;
          }
          char v60 = (char *)*((void *)this + 5);
          unint64_t v59 = *((void *)this + 6);
          if ((unint64_t)v60 >= v59)
          {
            unsigned int v65 = (char *)*v10;
            uint64_t v66 = (v60 - (unsigned char *)*v10) >> 3;
            unint64_t v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 61) {
LABEL_143:
            }
              sub_10000EE98();
            uint64_t v68 = v59 - (void)v65;
            if (v68 >> 2 > v67) {
              unint64_t v67 = v68 >> 2;
            }
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v69 = v67;
            }
            if (v69)
            {
              unint64_t v70 = (char *)sub_10000EEB0((uint64_t)v11, v69);
              unsigned int v65 = (char *)*((void *)this + 4);
              char v60 = (char *)*((void *)this + 5);
            }
            else
            {
              unint64_t v70 = 0;
            }
            uint64_t v77 = &v70[8 * v66];
            *(void *)uint64_t v77 = 0;
            unint64_t v61 = v77 + 8;
            while (v60 != v65)
            {
              uint64_t v78 = *((void *)v60 - 1);
              v60 -= 8;
              *((void *)v77 - 1) = v78;
              v77 -= 8;
            }
            *((void *)this + 4) = v77;
            *((void *)this + 5) = v61;
            *((void *)this + 6) = &v70[8 * v69];
            if (v65) {
              operator delete(v65);
            }
          }
          else
          {
            *(void *)char v60 = 0;
            unint64_t v61 = v60 + 8;
          }
          *((void *)this + 5) = v61;
          unint64_t v79 = *((void *)a2 + 1);
          if (v79 <= 0xFFFFFFFFFFFFFFF7 && v79 + 8 <= *((void *)a2 + 2))
          {
            *(v61 - 1) = *(void *)(*(void *)a2 + v79);
LABEL_122:
            uint64_t v80 = *((void *)a2 + 1) + 8;
            goto LABEL_134;
          }
          goto LABEL_131;
        case 7u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v44 = *((void *)a2 + 1);
            unint64_t v45 = *((void *)a2 + 2);
            while (v44 < v45 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v47 = (char *)*((void *)this + 2);
              unint64_t v46 = *((void *)this + 3);
              if ((unint64_t)v47 >= v46)
              {
                unsigned int v49 = (char *)*v8;
                uint64_t v50 = (v47 - (unsigned char *)*v8) >> 2;
                unint64_t v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 62) {
                  goto LABEL_144;
                }
                uint64_t v52 = v46 - (void)v49;
                if (v52 >> 1 > v51) {
                  unint64_t v51 = v52 >> 1;
                }
                if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v53 = v51;
                }
                if (v53)
                {
                  unint64_t v54 = (char *)sub_100024458((uint64_t)v9, v53);
                  unsigned int v49 = (char *)*((void *)this + 1);
                  uint64_t v47 = (char *)*((void *)this + 2);
                }
                else
                {
                  unint64_t v54 = 0;
                }
                uint64_t v55 = &v54[4 * v50];
                *(_DWORD *)uint64_t v55 = 0;
                char v48 = v55 + 4;
                while (v47 != v49)
                {
                  int v56 = *((_DWORD *)v47 - 1);
                  v47 -= 4;
                  *((_DWORD *)v55 - 1) = v56;
                  v55 -= 4;
                }
                *((void *)this + 1) = v55;
                *((void *)this + 2) = v48;
                *((void *)this + 3) = &v54[4 * v53];
                if (v49) {
                  operator delete(v49);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v47 = 0;
                char v48 = v47 + 4;
              }
              *((void *)this + 2) = v48;
              unint64_t v57 = *((void *)a2 + 1);
              if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)a2 + 2))
              {
LABEL_95:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v48 - 1) = *(_DWORD *)(*(void *)a2 + v57);
              unint64_t v45 = *((void *)a2 + 2);
              unint64_t v44 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v44;
            }
LABEL_96:
            PB::Reader::recallMark();
          }
          else
          {
            char v63 = (char *)*((void *)this + 2);
            unint64_t v62 = *((void *)this + 3);
            if ((unint64_t)v63 >= v62)
            {
              char v71 = (char *)*v8;
              uint64_t v72 = (v63 - (unsigned char *)*v8) >> 2;
              unint64_t v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62) {
LABEL_144:
              }
                sub_10000EE98();
              uint64_t v74 = v62 - (void)v71;
              if (v74 >> 1 > v73) {
                unint64_t v73 = v74 >> 1;
              }
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v73;
              }
              if (v75)
              {
                unint64_t v76 = (char *)sub_100024458((uint64_t)v9, v75);
                char v71 = (char *)*((void *)this + 1);
                char v63 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v76 = 0;
              }
              unint64_t v81 = &v76[4 * v72];
              *(_DWORD *)unint64_t v81 = 0;
              char v64 = v81 + 4;
              while (v63 != v71)
              {
                int v82 = *((_DWORD *)v63 - 1);
                v63 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *((void *)this + 1) = v81;
              *((void *)this + 2) = v64;
              *((void *)this + 3) = &v76[4 * v75];
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *(_DWORD *)char v63 = 0;
              char v64 = v63 + 4;
            }
            *((void *)this + 2) = v64;
            unint64_t v83 = *((void *)a2 + 1);
            if (v83 <= 0xFFFFFFFFFFFFFFFBLL && v83 + 4 <= *((void *)a2 + 2))
            {
              *(v64 - 1) = *(_DWORD *)(*(void *)a2 + v83);
LABEL_133:
              uint64_t v80 = *((void *)a2 + 1) + 4;
LABEL_134:
              *((void *)a2 + 1) = v80;
            }
            else
            {
LABEL_131:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_135:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 8u:
          *((unsigned char *)this + 100) |= 0x20u;
          unint64_t v58 = *((void *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((void *)a2 + 2)) {
            goto LABEL_131;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v58);
          goto LABEL_133;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_135;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VisualLocalization::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 100);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 88), 1u);
    char v4 = *(unsigned char *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(unsigned char *)(this + 100) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 2u);
  char v4 = *(unsigned char *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(double *)(v3 + 56), 4u);
    if ((*(unsigned char *)(v3 + 100) & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 3u);
  char v4 = *(unsigned char *)(v3 + 100);
  if (v4) {
    goto LABEL_18;
  }
LABEL_5:
  if ((v4 & 2) != 0) {
LABEL_6:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 64), 5u);
LABEL_7:
  char v5 = *(double **)(v3 + 32);
  uint64_t v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 6u);
  }
  float v8 = *(float **)(v3 + 8);
  char v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10, 7u);
  }
  if ((*(unsigned char *)(v3 + 100) & 0x20) != 0)
  {
    float v11 = *(float *)(v3 + 96);
    return PB::Writer::write(a2, v11, 8u);
  }
  return this;
}

uint64_t CMMsl::VisualLocalization::hash_value(CMMsl::VisualLocalization *this)
{
  if ((*((unsigned char *)this + 100) & 0x10) == 0)
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 100) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_22:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 100) & 8) != 0) {
      goto LABEL_7;
    }
LABEL_23:
    uint64_t v4 = 0;
    if (*((unsigned char *)this + 100)) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
  if (*((double *)this + 11) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 11);
  }
  if ((*((unsigned char *)this + 100) & 4) == 0) {
    goto LABEL_22;
  }
LABEL_3:
  if (*((double *)this + 9) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 9);
  }
  if ((*((unsigned char *)this + 100) & 8) == 0) {
    goto LABEL_23;
  }
LABEL_7:
  if (*((double *)this + 10) == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *((void *)this + 10);
  }
  if (*((unsigned char *)this + 100))
  {
LABEL_11:
    if (*((double *)this + 7) == 0.0) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = *((void *)this + 7);
    }
    if ((*((unsigned char *)this + 100) & 2) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v6 = 0;
    goto LABEL_26;
  }
LABEL_24:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 100) & 2) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  if (*((double *)this + 8) == 0.0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *((void *)this + 8);
  }
LABEL_26:
  uint64_t v7 = PBHashBytes();
  uint64_t v8 = PBHashBytes();
  if ((*((unsigned char *)this + 100) & 0x20) != 0)
  {
    float v10 = *((float *)this + 24);
    uint64_t v9 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9;
}

void CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints(CMMsl::VisualLocalizationAttitudeConstraints *this)
{
  *(void *)this = off_1003A9CA8;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints(this);

  operator delete();
}

CMMsl::VisualLocalizationAttitudeConstraints *CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints(CMMsl::VisualLocalizationAttitudeConstraints *this, const CMMsl::VisualLocalizationAttitudeConstraints *a2)
{
  *(void *)this = off_1003A9CA8;
  *((void *)this + 1) = 0;
  uint64_t v4 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 15) = 0;
  char v5 = *((unsigned char *)a2 + 60);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 5);
    char v6 = 2;
    *((unsigned char *)this + 60) = 2;
    *((void *)this + 5) = v7;
    char v5 = *((unsigned char *)a2 + 60);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if (*((unsigned char *)a2 + 60))
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 4);
    v6 |= 1u;
    *((unsigned char *)this + 60) = v6;
    *((void *)this + 4) = v8;
    char v5 = *((unsigned char *)a2 + 60);
  }
LABEL_6:
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v12 = *((_DWORD *)a2 + 14);
  v6 |= 0x10u;
  *((unsigned char *)this + 60) = v6;
  *((_DWORD *)this + 14) = v12;
  if ((*((unsigned char *)a2 + 60) & 8) != 0)
  {
LABEL_8:
    int v9 = *((_DWORD *)a2 + 13);
    *((unsigned char *)this + 60) = v6 | 8;
    *((_DWORD *)this + 13) = v9;
  }
LABEL_9:
  if (this != a2) {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if ((*((unsigned char *)a2 + 60) & 4) != 0)
  {
    int v10 = *((_DWORD *)a2 + 12);
    *((unsigned char *)this + 60) |= 4u;
    *((_DWORD *)this + 12) = v10;
  }
  return this;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::operator=(uint64_t a1, const CMMsl::VisualLocalizationAttitudeConstraints *a2)
{
  if ((const CMMsl::VisualLocalizationAttitudeConstraints *)a1 != a2)
  {
    CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints((CMMsl::VisualLocalizationAttitudeConstraints *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    long long v12 = v4;
    int v5 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v14;
    int v14 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v7;
    *(void *)&long long v6 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v13;
    uint64_t v13 = v6;
    CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints((CMMsl::VisualLocalizationAttitudeConstraints *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VisualLocalizationAttitudeConstraints *a2, CMMsl::VisualLocalizationAttitudeConstraints *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  LODWORD(v5) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  float result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9CA8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    long long v12 = v4;
    int v5 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v14;
    int v14 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v7;
    *(void *)&long long v6 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v13;
    uint64_t v13 = v6;
    CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints((CMMsl::VisualLocalizationAttitudeConstraints *)&v9);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::formatText(CMMsl::VisualLocalizationAttitudeConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "deltaHeading", *((float *)this + 12));
    char v5 = *((unsigned char *)this + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)this + 60) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gravityZ", *((float *)this + 13));
  char v5 = *((unsigned char *)this + 60);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "lastStateTimestamp", *((double *)this + 4));
  if ((*((unsigned char *)this + 60) & 0x10) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "meanRotRate", *((float *)this + 14));
LABEL_6:
  long long v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "quaternion", v8);
  }
  if ((*((unsigned char *)this + 60) & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VisualLocalizationAttitudeConstraints::readFrom(CMMsl::VisualLocalizationAttitudeConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 60) |= 2u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
            goto LABEL_85;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v23);
          goto LABEL_31;
        case 2u:
          *((unsigned char *)this + 60) |= 1u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
            goto LABEL_85;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v24);
LABEL_31:
          uint64_t v25 = *((void *)a2 + 1) + 8;
          goto LABEL_88;
        case 3u:
          *((unsigned char *)this + 60) |= 0x10u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)a2 + 2)) {
            goto LABEL_85;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v26);
          goto LABEL_87;
        case 4u:
          *((unsigned char *)this + 60) |= 8u;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)a2 + 2)) {
            goto LABEL_85;
          }
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v27);
          goto LABEL_87;
        case 5u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v28 = *((void *)a2 + 1);
            unint64_t v29 = *((void *)a2 + 2);
            while (v28 < v29 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v31 = (char *)*((void *)this + 2);
              unint64_t v30 = *((void *)this + 3);
              if ((unint64_t)v31 >= v30)
              {
                uint64_t v33 = (char *)*v8;
                uint64_t v34 = (v31 - (unsigned char *)*v8) >> 2;
                unint64_t v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 62) {
                  goto LABEL_97;
                }
                uint64_t v36 = v30 - (void)v33;
                if (v36 >> 1 > v35) {
                  unint64_t v35 = v36 >> 1;
                }
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v37 = v35;
                }
                if (v37)
                {
                  uint64_t v38 = (char *)sub_100024458((uint64_t)v9, v37);
                  uint64_t v33 = (char *)*((void *)this + 1);
                  unint64_t v31 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v38 = 0;
                }
                unint64_t v39 = &v38[4 * v34];
                *(_DWORD *)unint64_t v39 = 0;
                unint64_t v32 = v39 + 4;
                while (v31 != v33)
                {
                  int v40 = *((_DWORD *)v31 - 1);
                  v31 -= 4;
                  *((_DWORD *)v39 - 1) = v40;
                  v39 -= 4;
                }
                *((void *)this + 1) = v39;
                *((void *)this + 2) = v32;
                *((void *)this + 3) = &v38[4 * v37];
                if (v33) {
                  operator delete(v33);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v31 = 0;
                unint64_t v32 = v31 + 4;
              }
              *((void *)this + 2) = v32;
              unint64_t v41 = *((void *)a2 + 1);
              if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
              unint64_t v29 = *((void *)a2 + 2);
              unint64_t v28 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v28;
            }
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v44 = (char *)*((void *)this + 2);
            unint64_t v43 = *((void *)this + 3);
            if ((unint64_t)v44 >= v43)
            {
              unint64_t v46 = (char *)*v8;
              uint64_t v47 = (v44 - (unsigned char *)*v8) >> 2;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62) {
LABEL_97:
              }
                sub_10000EE98();
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 1 > v48) {
                unint64_t v48 = v49 >> 1;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_100024458((uint64_t)v9, v50);
                unint64_t v46 = (char *)*((void *)this + 1);
                unint64_t v44 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v51 = 0;
              }
              uint64_t v52 = &v51[4 * v47];
              *(_DWORD *)uint64_t v52 = 0;
              unint64_t v45 = v52 + 4;
              while (v44 != v46)
              {
                int v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((void *)this + 1) = v52;
              *((void *)this + 2) = v45;
              *((void *)this + 3) = &v51[4 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v44 = 0;
              unint64_t v45 = v44 + 4;
            }
            *((void *)this + 2) = v45;
            unint64_t v54 = *((void *)a2 + 1);
            if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *((void *)a2 + 2))
            {
              *(v45 - 1) = *(_DWORD *)(*(void *)a2 + v54);
LABEL_87:
              uint64_t v25 = *((void *)a2 + 1) + 4;
LABEL_88:
              *((void *)a2 + 1) = v25;
            }
            else
            {
LABEL_85:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_89:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 6u:
          *((unsigned char *)this + 60) |= 4u;
          unint64_t v42 = *((void *)a2 + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)a2 + 2)) {
            goto LABEL_85;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v42);
          goto LABEL_87;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_89;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 60);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    char v4 = *(unsigned char *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
LABEL_13:
      this = PB::Writer::write(a2, *(float *)(v3 + 56), 3u);
      if ((*(unsigned char *)(v3 + 60) & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(this + 60) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 2u);
  char v4 = *(unsigned char *)(v3 + 60);
  if ((v4 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v4 & 8) != 0) {
LABEL_5:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 52), 4u);
LABEL_6:
  char v5 = *(float **)(v3 + 8);
  long long v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 5u);
  }
  if ((*(unsigned char *)(v3 + 60) & 4) != 0)
  {
    float v8 = *(float *)(v3 + 48);
    return PB::Writer::write(a2, v8, 6u);
  }
  return this;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::hash_value(CMMsl::VisualLocalizationAttitudeConstraints *this)
{
  if ((*((unsigned char *)this + 60) & 2) == 0)
  {
    uint64_t v2 = 0;
    if (*((unsigned char *)this + 60)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 60) & 0x10) != 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  if (*((double *)this + 5) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 5);
  }
  if ((*((unsigned char *)this + 60) & 1) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 4);
  }
  if ((*((unsigned char *)this + 60) & 0x10) != 0)
  {
LABEL_7:
    float v4 = *((float *)this + 14);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = LODWORD(v4);
    }
    if ((*((unsigned char *)this + 60) & 8) != 0) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v7 = 0;
    goto LABEL_21;
  }
LABEL_19:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 60) & 8) == 0) {
    goto LABEL_20;
  }
LABEL_11:
  float v6 = *((float *)this + 13);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = LODWORD(v6);
  }
LABEL_21:
  uint64_t v8 = PBHashBytes();
  if ((*((unsigned char *)this + 60) & 4) != 0)
  {
    float v10 = *((float *)this + 12);
    uint64_t v9 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v8;
}

void CMMsl::VisualLocalizationAttitudeCorrection::~VisualLocalizationAttitudeCorrection(CMMsl::VisualLocalizationAttitudeCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A9CE0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VisualLocalizationAttitudeCorrection::~VisualLocalizationAttitudeCorrection(this);

  operator delete();
}

void *CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(void *this, const CMMsl::VisualLocalizationAttitudeCorrection *a2)
{
  *this = off_1003A9CE0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::VisualLocalizationAttitudeCorrection *CMMsl::VisualLocalizationAttitudeCorrection::operator=(const CMMsl::VisualLocalizationAttitudeCorrection *a1, const CMMsl::VisualLocalizationAttitudeCorrection *a2)
{
  if (a1 != a2)
  {
    CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::VisualLocalizationAttitudeCorrection::~VisualLocalizationAttitudeCorrection((CMMsl::VisualLocalizationAttitudeCorrection *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::VisualLocalizationAttitudeCorrection *a2, CMMsl::VisualLocalizationAttitudeCorrection *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(void *a1, uint64_t a2)
{
  *a1 = off_1003A9CE0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A9CE0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A9CE0;
    v6[1] = v4;
    CMMsl::VisualLocalizationAttitudeCorrection::~VisualLocalizationAttitudeCorrection((CMMsl::VisualLocalizationAttitudeCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::formatText(CMMsl::VisualLocalizationAttitudeCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::readFrom(CMMsl::VisualLocalizationAttitudeCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::DeviceMotionCorrection *CMMsl::VisualLocalizationAttitudeCorrection::hash_value(CMMsl::VisualLocalizationAttitudeCorrection *this)
{
  uint64_t result = (CMMsl::DeviceMotionCorrection *)*((void *)this + 1);
  if (result) {
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::VisualStateMeasurement::~VisualStateMeasurement(CMMsl::VisualStateMeasurement *this)
{
  *(void *)this = off_1003A9D18;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::VisualStateMeasurement::~VisualStateMeasurement(this);

  operator delete();
}

CMMsl::VisualStateMeasurement *CMMsl::VisualStateMeasurement::VisualStateMeasurement(CMMsl::VisualStateMeasurement *this, const CMMsl::VisualStateMeasurement *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = off_1003A9D18;
  *((_DWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  if (*((unsigned char *)a2 + 96))
  {
    uint64_t v5 = *((void *)a2 + 10);
    *((unsigned char *)this + 96) = 1;
    *((void *)this + 10) = v5;
  }
  if (this != a2)
  {
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_1000330C4((char *)this + 56, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  char v6 = *((unsigned char *)a2 + 96);
  if ((v6 & 4) != 0)
  {
    char v7 = *((unsigned char *)a2 + 92);
    *((unsigned char *)this + 96) |= 4u;
    *((unsigned char *)this + 92) = v7;
    char v6 = *((unsigned char *)a2 + 96);
  }
  if ((v6 & 2) != 0)
  {
    int v8 = *((_DWORD *)a2 + 22);
    *((unsigned char *)this + 96) |= 2u;
    *((_DWORD *)this + 22) = v8;
  }
  return this;
}

CMMsl *CMMsl::VisualStateMeasurement::operator=(CMMsl *a1, const CMMsl::VisualStateMeasurement *a2)
{
  if (a1 != a2)
  {
    CMMsl::VisualStateMeasurement::VisualStateMeasurement((CMMsl::VisualStateMeasurement *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualStateMeasurement *)v5, v3);
    CMMsl::VisualStateMeasurement::~VisualStateMeasurement((CMMsl::VisualStateMeasurement *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VisualStateMeasurement *a2, CMMsl::VisualStateMeasurement *a3)
{
  int v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  double result = *((double *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((double *)a2 + 10) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 92);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
  *((unsigned char *)a2 + 92) = v13;
  LODWORD(v13) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v13;
  return result;
}

uint64_t CMMsl::VisualStateMeasurement::VisualStateMeasurement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9D18;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  sub_100274A30(v5, (__n128 *)(a2 + 56));
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return a1;
}

CMMsl *CMMsl::VisualStateMeasurement::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VisualStateMeasurement::VisualStateMeasurement((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualStateMeasurement *)v5, v3);
    CMMsl::VisualStateMeasurement::~VisualStateMeasurement((CMMsl::VisualStateMeasurement *)v5);
  }
  return a1;
}

uint64_t CMMsl::VisualStateMeasurement::formatText(CMMsl::VisualStateMeasurement *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  uint64_t v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  char v8 = *((unsigned char *)this + 96);
  if ((v8 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "isInitFinished", *((unsigned char *)this + 92));
    char v8 = *((unsigned char *)this + 96);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 2) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)this + 96) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  if ((*((unsigned char *)this + 96) & 2) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "trackingState", *((_DWORD *)this + 22));
LABEL_7:
  uint64_t v9 = (double *)*((void *)this + 4);
  uint64_t v10 = (double *)*((void *)this + 5);
  while (v9 != v10)
  {
    double v11 = *v9++;
    PB::TextFormatter::format(a2, "translation", v11);
  }
  uint64_t v12 = (double *)*((void *)this + 7);
  uint64_t v13 = (double *)*((void *)this + 8);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(a2, "velocity", v14);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VisualStateMeasurement::readFrom(CMMsl::VisualStateMeasurement *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)((char *)this + 56);
    uint64_t v119 = (char *)this + 72;
    uint64_t v9 = (void **)((char *)this + 32);
    uint64_t v10 = (char *)this + 48;
    double v11 = (void **)((char *)this + 8);
    uint64_t v12 = (char *)this + 24;
    while (1)
    {
      uint64_t v13 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        BOOL v19 = v15++ > 8;
        if (v19) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 96) |= 1u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
            goto LABEL_177;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v26);
          goto LABEL_179;
        case 2u:
          if (v25 != 2)
          {
            int v82 = (char *)*((void *)this + 2);
            unint64_t v81 = *((void *)this + 3);
            if ((unint64_t)v82 >= v81)
            {
              unint64_t v92 = (char *)*v11;
              uint64_t v93 = (v82 - (unsigned char *)*v11) >> 3;
              unint64_t v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 61) {
LABEL_190:
              }
                sub_10000EE98();
              uint64_t v95 = v81 - (void)v92;
              if (v95 >> 2 > v94) {
                unint64_t v94 = v95 >> 2;
              }
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v96 = v94;
              }
              if (v96)
              {
                v97 = (char *)sub_10000EEB0((uint64_t)v12, v96);
                unint64_t v92 = (char *)*((void *)this + 1);
                int v82 = (char *)*((void *)this + 2);
              }
              else
              {
                v97 = 0;
              }
              v110 = &v97[8 * v93];
              *(void *)v110 = 0;
              unint64_t v83 = v110 + 8;
              while (v82 != v92)
              {
                uint64_t v111 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v110 - 1) = v111;
                v110 -= 8;
              }
              *((void *)this + 1) = v110;
              *((void *)this + 2) = v83;
              *((void *)this + 3) = &v97[8 * v96];
              if (v92) {
                operator delete(v92);
              }
            }
            else
            {
              *(void *)int v82 = 0;
              unint64_t v83 = v82 + 8;
            }
            *((void *)this + 2) = v83;
            goto LABEL_175;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v27 = *((void *)a2 + 1);
          unint64_t v28 = *((void *)a2 + 2);
          while (v27 < v28 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v30 = (char *)*((void *)this + 2);
            unint64_t v29 = *((void *)this + 3);
            if ((unint64_t)v30 >= v29)
            {
              unint64_t v32 = (char *)*v11;
              uint64_t v33 = (v30 - (unsigned char *)*v11) >> 3;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 61) {
                goto LABEL_190;
              }
              uint64_t v35 = v29 - (void)v32;
              if (v35 >> 2 > v34) {
                unint64_t v34 = v35 >> 2;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                unint64_t v37 = (char *)sub_10000EEB0((uint64_t)v12, v36);
                unint64_t v32 = (char *)*((void *)this + 1);
                unint64_t v30 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v37 = 0;
              }
              uint64_t v38 = &v37[8 * v33];
              *(void *)uint64_t v38 = 0;
              unint64_t v31 = v38 + 8;
              while (v30 != v32)
              {
                uint64_t v39 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v38 - 1) = v39;
                v38 -= 8;
              }
              *((void *)this + 1) = v38;
              *((void *)this + 2) = v31;
              *((void *)this + 3) = &v37[8 * v36];
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(void *)unint64_t v30 = 0;
              unint64_t v31 = v30 + 8;
            }
            *((void *)this + 2) = v31;
            unint64_t v40 = *((void *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((void *)a2 + 2)) {
              goto LABEL_124;
            }
            *(v31 - 1) = *(void *)(*(void *)a2 + v40);
            unint64_t v28 = *((void *)a2 + 2);
            unint64_t v27 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v27;
          }
          goto LABEL_125;
        case 3u:
          if (v25 != 2)
          {
            uint64_t v85 = (char *)*((void *)this + 5);
            unint64_t v84 = *((void *)this + 6);
            if ((unint64_t)v85 >= v84)
            {
              v98 = (char *)*v9;
              uint64_t v99 = (v85 - (unsigned char *)*v9) >> 3;
              unint64_t v100 = v99 + 1;
              if ((unint64_t)(v99 + 1) >> 61) {
LABEL_191:
              }
                sub_10000EE98();
              uint64_t v101 = v84 - (void)v98;
              if (v101 >> 2 > v100) {
                unint64_t v100 = v101 >> 2;
              }
              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v100;
              }
              if (v102)
              {
                v103 = (char *)sub_10000EEB0((uint64_t)v10, v102);
                v98 = (char *)*((void *)this + 4);
                uint64_t v85 = (char *)*((void *)this + 5);
              }
              else
              {
                v103 = 0;
              }
              v112 = &v103[8 * v99];
              *(void *)v112 = 0;
              unint64_t v83 = v112 + 8;
              while (v85 != v98)
              {
                uint64_t v113 = *((void *)v85 - 1);
                v85 -= 8;
                *((void *)v112 - 1) = v113;
                v112 -= 8;
              }
              *((void *)this + 4) = v112;
              *((void *)this + 5) = v83;
              *((void *)this + 6) = &v103[8 * v102];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              *(void *)uint64_t v85 = 0;
              unint64_t v83 = v85 + 8;
            }
            *((void *)this + 5) = v83;
            goto LABEL_175;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          while (v41 < v42 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v44 = (char *)*((void *)this + 5);
            unint64_t v43 = *((void *)this + 6);
            if ((unint64_t)v44 >= v43)
            {
              unint64_t v46 = (char *)*v9;
              uint64_t v47 = (v44 - (unsigned char *)*v9) >> 3;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61) {
                goto LABEL_191;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 2 > v48) {
                unint64_t v48 = v49 >> 2;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_10000EEB0((uint64_t)v10, v50);
                unint64_t v46 = (char *)*((void *)this + 4);
                unint64_t v44 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v51 = 0;
              }
              uint64_t v52 = &v51[8 * v47];
              *(void *)uint64_t v52 = 0;
              unint64_t v45 = v52 + 8;
              while (v44 != v46)
              {
                uint64_t v53 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v52 - 1) = v53;
                v52 -= 8;
              }
              *((void *)this + 4) = v52;
              *((void *)this + 5) = v45;
              *((void *)this + 6) = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(void *)unint64_t v44 = 0;
              unint64_t v45 = v44 + 8;
            }
            *((void *)this + 5) = v45;
            unint64_t v54 = *((void *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)a2 + 2)) {
              goto LABEL_124;
            }
            *(v45 - 1) = *(void *)(*(void *)a2 + v54);
            unint64_t v42 = *((void *)a2 + 2);
            unint64_t v41 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v41;
          }
          goto LABEL_125;
        case 4u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v55 = *((void *)a2 + 1);
            unint64_t v56 = *((void *)a2 + 2);
            while (v55 < v56 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v58 = (char *)*((void *)this + 8);
              unint64_t v57 = *((void *)this + 9);
              if ((unint64_t)v58 >= v57)
              {
                char v60 = (char *)*v8;
                uint64_t v61 = (v58 - (unsigned char *)*v8) >> 3;
                unint64_t v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 61) {
                  goto LABEL_192;
                }
                uint64_t v63 = v57 - (void)v60;
                if (v63 >> 2 > v62) {
                  unint64_t v62 = v63 >> 2;
                }
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v64 = v62;
                }
                if (v64)
                {
                  unsigned int v65 = (char *)sub_10000EEB0((uint64_t)v119, v64);
                  char v60 = (char *)*((void *)this + 7);
                  unint64_t v58 = (char *)*((void *)this + 8);
                }
                else
                {
                  unsigned int v65 = 0;
                }
                uint64_t v66 = &v65[8 * v61];
                *(void *)uint64_t v66 = 0;
                unint64_t v59 = v66 + 8;
                while (v58 != v60)
                {
                  uint64_t v67 = *((void *)v58 - 1);
                  v58 -= 8;
                  *((void *)v66 - 1) = v67;
                  v66 -= 8;
                }
                *((void *)this + 7) = v66;
                *((void *)this + 8) = v59;
                *((void *)this + 9) = &v65[8 * v64];
                if (v60) {
                  operator delete(v60);
                }
              }
              else
              {
                *(void *)unint64_t v58 = 0;
                unint64_t v59 = v58 + 8;
              }
              *((void *)this + 8) = v59;
              unint64_t v68 = *((void *)a2 + 1);
              if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((void *)a2 + 2))
              {
LABEL_124:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v59 - 1) = *(void *)(*(void *)a2 + v68);
              unint64_t v56 = *((void *)a2 + 2);
              unint64_t v55 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v55;
            }
LABEL_125:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v87 = (char *)*((void *)this + 8);
            unint64_t v86 = *((void *)this + 9);
            if ((unint64_t)v87 >= v86)
            {
              v104 = (char *)*v8;
              uint64_t v105 = (v87 - (unsigned char *)*v8) >> 3;
              unint64_t v106 = v105 + 1;
              if ((unint64_t)(v105 + 1) >> 61) {
LABEL_192:
              }
                sub_10000EE98();
              uint64_t v107 = v86 - (void)v104;
              if (v107 >> 2 > v106) {
                unint64_t v106 = v107 >> 2;
              }
              if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v108 = v106;
              }
              if (v108)
              {
                unint64_t v109 = (char *)sub_10000EEB0((uint64_t)v119, v108);
                v104 = (char *)*((void *)this + 7);
                uint64_t v87 = (char *)*((void *)this + 8);
              }
              else
              {
                unint64_t v109 = 0;
              }
              unint64_t v114 = &v109[8 * v105];
              *(void *)unint64_t v114 = 0;
              unint64_t v83 = v114 + 8;
              while (v87 != v104)
              {
                uint64_t v115 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v114 - 1) = v115;
                v114 -= 8;
              }
              *((void *)this + 7) = v114;
              *((void *)this + 8) = v83;
              *((void *)this + 9) = &v109[8 * v108];
              if (v104) {
                operator delete(v104);
              }
            }
            else
            {
              *(void *)uint64_t v87 = 0;
              unint64_t v83 = v87 + 8;
            }
            *((void *)this + 8) = v83;
LABEL_175:
            unint64_t v116 = *((void *)a2 + 1);
            if (v116 <= 0xFFFFFFFFFFFFFFF7 && v116 + 8 <= *((void *)a2 + 2))
            {
              *(v83 - 1) = *(void *)(*(void *)a2 + v116);
LABEL_179:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_177:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_180:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 5u:
          *((unsigned char *)this + 96) |= 4u;
          unint64_t v69 = *((void *)a2 + 1);
          if (v69 >= *((void *)a2 + 2))
          {
            BOOL v72 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v70 = v69 + 1;
            int v71 = *(unsigned __int8 *)(*(void *)a2 + v69);
            *((void *)a2 + 1) = v70;
            BOOL v72 = v71 != 0;
          }
          *((unsigned char *)this + 92) = v72;
          goto LABEL_180;
        case 6u:
          *((unsigned char *)this + 96) |= 2u;
          unint64_t v73 = *((void *)a2 + 1);
          unint64_t v74 = *((void *)a2 + 2);
          uint64_t v75 = *(void *)a2;
          if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
          {
            char v76 = 0;
            unsigned int v77 = 0;
            uint64_t v78 = 0;
            do
            {
              unint64_t v79 = v73 + 1;
              *((void *)a2 + 1) = v73 + 1;
              char v80 = *(unsigned char *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0) {
                goto LABEL_153;
              }
              v76 += 7;
              unint64_t v73 = v79;
              BOOL v19 = v77++ > 8;
            }
            while (!v19);
LABEL_123:
            LODWORD(v78) = 0;
            goto LABEL_153;
          }
          char v88 = 0;
          unsigned int v89 = 0;
          uint64_t v78 = 0;
          if (v74 <= v73) {
            unint64_t v74 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v74 == v73)
            {
              LODWORD(v78) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v90 = v73 + 1;
              char v91 = *(unsigned char *)(v75 + v73);
              *((void *)a2 + 1) = v90;
              v78 |= (unint64_t)(v91 & 0x7F) << v88;
              if (v91 < 0)
              {
                v88 += 7;
                unint64_t v73 = v90;
                BOOL v19 = v89++ > 8;
                if (v19) {
                  goto LABEL_123;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v78) = 0;
              }
            }
            break;
          }
LABEL_153:
          *((_DWORD *)this + 22) = v78;
          goto LABEL_180;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_180;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VisualStateMeasurement::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 96)) {
    this = PB::Writer::write(a2, *(double *)(this + 80), 1u);
  }
  int v4 = *(double **)(v3 + 8);
  uint64_t v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  double v7 = *(double **)(v3 + 32);
  char v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  uint64_t v10 = *(double **)(v3 + 56);
  double v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    double v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  char v13 = *(unsigned char *)(v3 + 96);
  if ((v13 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 92), 5u);
    char v13 = *(unsigned char *)(v3 + 96);
  }
  if ((v13 & 2) != 0)
  {
    unsigned int v14 = *(_DWORD *)(v3 + 88);
    return PB::Writer::writeVarInt(a2, v14, 6u);
  }
  return this;
}

uint64_t CMMsl::VisualStateMeasurement::hash_value(CMMsl::VisualStateMeasurement *this)
{
  if (*((unsigned char *)this + 96))
  {
    if (*((double *)this + 10) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 10);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  if ((*((unsigned char *)this + 96) & 4) != 0)
  {
    uint64_t v6 = *((unsigned __int8 *)this + 92);
    if ((*((unsigned char *)this + 96) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v7 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
  }
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 96) & 2) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v7 = *((unsigned int *)this + 22);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::WakeGestureNotification::~WakeGestureNotification(CMMsl::WakeGestureNotification *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::WakeGestureNotification::WakeGestureNotification(CMMsl::WakeGestureNotification *this, const CMMsl::WakeGestureNotification *a2)
{
  *(void *)this = off_1003A9D50;
  *((_DWORD *)this + 11) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    char v3 = 2;
    *((unsigned char *)this + 44) = 2;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 44) = v3;
    *((void *)this + 3) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *((unsigned char *)this + 44) = v3;
    *((_DWORD *)this + 9) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 8) = v7;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_14:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 44) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_13:
  char v8 = *((unsigned char *)a2 + 40);
  v3 |= 0x20u;
  *((unsigned char *)this + 44) = v3;
  *((unsigned char *)this + 40) = v8;
  if (*((unsigned char *)a2 + 44)) {
    goto LABEL_14;
  }
  return result;
}

uint64_t CMMsl::WakeGestureNotification::operator=(uint64_t a1, const CMMsl::WakeGestureNotification *a2)
{
  if ((const CMMsl::WakeGestureNotification *)a1 != a2)
  {
    CMMsl::WakeGestureNotification::WakeGestureNotification((CMMsl::WakeGestureNotification *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    LOBYTE(v4) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v12;
    char v12 = v4;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WakeGestureNotification *a2, CMMsl::WakeGestureNotification *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  LODWORD(v5) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::WakeGestureNotification::WakeGestureNotification(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9D50;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9D50;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::WakeGestureNotification::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v11 = off_1003A9D50;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    char v5 = *(unsigned char *)(a2 + 40);
    int v16 = *(_DWORD *)(a1 + 44);
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v13 = v6;
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    uint64_t v14 = v7;
    LOBYTE(v4) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v5;
    char v15 = v4;
    long long v8 = *(_OWORD *)(a1 + 8);
    long long v9 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 8) = v9;
    long long v12 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::WakeGestureNotification::formatText(CMMsl::WakeGestureNotification *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "gestureType", *((_DWORD *)this + 8));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hostPowerState", *((unsigned char *)this + 40));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "machContinuousTime", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "receivedTime", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 9));
  if ((*((unsigned char *)this + 44) & 4) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "timestampPossible", *((void *)this + 3));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WakeGestureNotification::readFrom(CMMsl::WakeGestureNotification *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 44) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_52;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 2u:
              *((unsigned char *)this + 44) |= 4u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_82;
                  }
                  unint64_t v43 = v21++;
                  char v44 = *(unsigned char *)(v22 + v43);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  BOOL v14 = v42++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_81:
                    unint64_t v2 = v43 + 1;
                    goto LABEL_82;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_81;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_82;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_82:
              *((void *)this + 3) = v25;
              goto LABEL_93;
            case 3u:
              *((unsigned char *)this + 44) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_87;
                  }
                  unint64_t v47 = v27++;
                  char v48 = *(unsigned char *)(v28 + v47);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_86:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_86;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_87;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_87:
              *((_DWORD *)this + 9) = v31;
              goto LABEL_93;
            case 4u:
              *((unsigned char *)this + 44) |= 8u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_92;
                  }
                  unint64_t v51 = v33++;
                  char v52 = *(unsigned char *)(v34 + v51);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_91:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_91;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_92;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_92:
              *((_DWORD *)this + 8) = v37;
LABEL_93:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *((unsigned char *)this + 44) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *((unsigned char *)this + 40) = v40;
              goto LABEL_93;
            case 6u:
              *((unsigned char *)this + 44) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_77:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_52:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_93;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_93;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WakeGestureNotification::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 40), 5u);
    if ((*(unsigned char *)(v3 + 44) & 1) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 6u);
}

uint64_t CMMsl::WakeGestureNotification::hash_value(CMMsl::WakeGestureNotification *this)
{
  if ((*((unsigned char *)this + 44) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 3);
      if ((*((unsigned char *)this + 44) & 0x10) != 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 44) & 0x10) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 9);
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 44) & 8) != 0)
  {
LABEL_5:
    uint64_t v4 = *((int *)this + 8);
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 0x20) != 0)
  {
LABEL_6:
    uint64_t v5 = *((unsigned __int8 *)this + 40);
    if (*((unsigned char *)this + 44)) {
      goto LABEL_7;
    }
LABEL_17:
    double v6 = 0.0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 44) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_7:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ *(void *)&v6;
}

void CMMsl::WakeGestureSample::~WakeGestureSample(CMMsl::WakeGestureSample *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::WakeGestureSample::WakeGestureSample(uint64_t this, const CMMsl::WakeGestureSample *a2)
{
  *(void *)this = off_1003A9D88;
  *(_DWORD *)(this + 84) = 0;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    int v3 = 16;
    *(_DWORD *)(this + 84) = 16;
    *(void *)(this + 40) = v4;
    int v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 6);
    v3 |= 0x20u;
    *(_DWORD *)(this + 84) = v3;
    *(void *)(this + 48) = v5;
    int v2 = *((_DWORD *)a2 + 21);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    int v6 = *((_DWORD *)a2 + 17);
    v3 |= 0x200u;
    *(_DWORD *)(this + 84) = v3;
    *(_DWORD *)(this + 68) = v6;
    int v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 18);
  v3 |= 0x400u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 72) = v7;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  char v8 = *((unsigned char *)a2 + 76);
  v3 |= 0x800u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 76) = v8;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v9 = *((unsigned char *)a2 + 81);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 81) = v9;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  char v10 = *((unsigned char *)a2 + 79);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 79) = v10;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  char v11 = *((unsigned char *)a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 80) = v11;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  char v12 = *((unsigned char *)a2 + 78);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 78) = v12;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  char v13 = *((unsigned char *)a2 + 82);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 82) = v13;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  char v14 = *((unsigned char *)a2 + 77);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 84) = v3;
  *(unsigned char *)(this + 77) = v14;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v15 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 84) = v3;
  *(void *)(this + 16) = v15;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v16 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 84) = v3;
  *(void *)(this + 8) = v16;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v17 = *((_DWORD *)a2 + 15);
  v3 |= 0x80u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 60) = v17;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v18 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 84) = v3;
  *(void *)(this + 32) = v18;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v19 = *((_DWORD *)a2 + 16);
  v3 |= 0x100u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 64) = v19;
  int v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x40) == 0) {
      return this;
    }
LABEL_38:
    int v21 = *((_DWORD *)a2 + 14);
    *(_DWORD *)(this + 84) = v3 | 0x40;
    *(_DWORD *)(this + 56) = v21;
    return this;
  }
LABEL_37:
  uint64_t v20 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 84) = v3;
  *(void *)(this + 24) = v20;
  if ((*((_DWORD *)a2 + 21) & 0x40) != 0) {
    goto LABEL_38;
  }
  return this;
}

CMMsl *CMMsl::WakeGestureSample::operator=(CMMsl *a1, const CMMsl::WakeGestureSample *a2)
{
  if (a1 != a2)
  {
    CMMsl::WakeGestureSample::WakeGestureSample((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WakeGestureSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WakeGestureSample *a2, CMMsl::WakeGestureSample *a3)
{
  int v3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  int v7 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 76);
  *((unsigned char *)this + 76) = *((unsigned char *)a2 + 76);
  *((unsigned char *)a2 + 76) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 81);
  *((unsigned char *)this + 81) = *((unsigned char *)a2 + 81);
  *((unsigned char *)a2 + 81) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 79);
  *((unsigned char *)this + 79) = *((unsigned char *)a2 + 79);
  *((unsigned char *)a2 + 79) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 80);
  *((unsigned char *)this + 80) = *((unsigned char *)a2 + 80);
  *((unsigned char *)a2 + 80) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 78);
  *((unsigned char *)this + 78) = *((unsigned char *)a2 + 78);
  *((unsigned char *)a2 + 78) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 82);
  *((unsigned char *)this + 82) = *((unsigned char *)a2 + 82);
  *((unsigned char *)a2 + 82) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 77);
  *((unsigned char *)this + 77) = *((unsigned char *)a2 + 77);
  *((unsigned char *)a2 + 77) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  int v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  int v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  int v14 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v14;
  return result;
}

double CMMsl::WakeGestureSample::WakeGestureSample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9D88;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 79) = *(unsigned char *)(a2 + 79);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 78) = *(unsigned char *)(a2 + 78);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

CMMsl *CMMsl::WakeGestureSample::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::WakeGestureSample::WakeGestureSample((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WakeGestureSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::WakeGestureSample::formatText(CMMsl::WakeGestureSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "detectionMode", *((_DWORD *)this + 14));
    int v5 = *((_DWORD *)this + 21);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "detectorRunning", *((unsigned char *)this + 76));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "enableStateDetected", *((unsigned char *)this + 77));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "fireAll", *((unsigned char *)this + 78));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "gestureDetectionDelay", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "gyroInUse", *((unsigned char *)this + 79));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "hostAwake", *((unsigned char *)this + 80));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "hostWakeCount", *((_DWORD *)this + 15));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "hostWakeDelay", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "invertSensors", *((unsigned char *)this + 81));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 4) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "runningModeDuration", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "runningModeStartTime", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "runningSwitchCount", *((_DWORD *)this + 16));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 17));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "timestampPossible", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 18));
  if ((*((_DWORD *)this + 21) & 0x20000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(a2, "wakePending", *((unsigned char *)this + 82));
LABEL_20:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WakeGestureSample::readFrom(CMMsl::WakeGestureSample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 21) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 2u:
              *((_DWORD *)this + 21) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 3u:
              *((_DWORD *)this + 21) |= 0x200u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_146;
                  }
                  unint64_t v67 = v21++;
                  char v68 = *(unsigned char *)(v22 + v67);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_145:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_145;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_146;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_146:
              *((_DWORD *)this + 17) = v25;
              goto LABEL_167;
            case 4u:
              *((_DWORD *)this + 21) |= 0x400u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_151;
                  }
                  unint64_t v71 = v27++;
                  char v72 = *(unsigned char *)(v28 + v71);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_150:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_150;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_151;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_151:
              *((_DWORD *)this + 18) = v31;
              goto LABEL_167;
            case 5u:
              *((_DWORD *)this + 21) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 76) = v34;
              goto LABEL_167;
            case 6u:
              *((_DWORD *)this + 21) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *((unsigned char *)this + 81) = v36;
              goto LABEL_167;
            case 7u:
              *((_DWORD *)this + 21) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v38 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v37 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v38 = v37 != 0;
              }
              *((unsigned char *)this + 79) = v38;
              goto LABEL_167;
            case 8u:
              *((_DWORD *)this + 21) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *((unsigned char *)this + 80) = v40;
              goto LABEL_167;
            case 9u:
              *((_DWORD *)this + 21) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v42 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v42 = v41 != 0;
              }
              *((unsigned char *)this + 78) = v42;
              goto LABEL_167;
            case 0xAu:
              *((_DWORD *)this + 21) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v44 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v43 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v44 = v43 != 0;
              }
              *((unsigned char *)this + 82) = v44;
              goto LABEL_167;
            case 0xBu:
              *((_DWORD *)this + 21) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *((unsigned char *)this + 77) = v46;
              goto LABEL_167;
            case 0xCu:
              *((_DWORD *)this + 21) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 0xDu:
              *((_DWORD *)this + 21) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 0xEu:
              *((_DWORD *)this + 21) |= 0x80u;
              unint64_t v47 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v48 = *(void *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_156;
                  }
                  unint64_t v75 = v47++;
                  char v76 = *(unsigned char *)(v48 + v75);
                  *((void *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_155:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v51) = 0;
                }
                goto LABEL_155;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)a2 + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_156;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_156:
              *((_DWORD *)this + 15) = v51;
              goto LABEL_167;
            case 0xFu:
              *((_DWORD *)this + 21) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_83;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_141;
            case 0x10u:
              *((_DWORD *)this + 21) |= 0x100u;
              unint64_t v53 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v54 = *(void *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_161;
                  }
                  unint64_t v79 = v53++;
                  char v80 = *(unsigned char *)(v54 + v79);
                  *((void *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_160:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v57) = 0;
                }
                goto LABEL_160;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)a2 + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_161:
              *((_DWORD *)this + 16) = v57;
              goto LABEL_167;
            case 0x11u:
              *((_DWORD *)this + 21) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_141:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_83:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_167;
            case 0x12u:
              *((_DWORD *)this + 21) |= 0x40u;
              unint64_t v59 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v60 = *(void *)a2;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v63 = 0;
                if (v2 <= v59) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v59)
                  {
                    LODWORD(v63) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_166;
                  }
                  unint64_t v83 = v59++;
                  char v84 = *(unsigned char *)(v60 + v83);
                  *((void *)a2 + 1) = v59;
                  v63 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  BOOL v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v63) = 0;
LABEL_165:
                    unint64_t v2 = v83 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v63) = 0;
                }
                goto LABEL_165;
              }
              char v61 = 0;
              unsigned int v62 = 0;
              uint64_t v63 = 0;
              do
              {
                unint64_t v2 = v59 + 1;
                *((void *)a2 + 1) = v59 + 1;
                char v64 = *(unsigned char *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0) {
                  goto LABEL_166;
                }
                v61 += 7;
                unint64_t v59 = v2;
                BOOL v14 = v62++ > 8;
              }
              while (!v14);
              LODWORD(v63) = 0;
LABEL_166:
              *((_DWORD *)this + 14) = v63;
LABEL_167:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_167;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WakeGestureSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 84);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    int v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 2u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 3u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 4u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 76), 5u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 81), 6u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 79), 7u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 80), 8u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 78), 9u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 82), 0xAu);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 77), 0xBu);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xCu);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xDu);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0xEu);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xFu);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x11u);
    if ((*(_DWORD *)(v3 + 84) & 0x40) == 0) {
      return this;
    }
    goto LABEL_37;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 0x10u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) != 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_37:
  int v5 = *(_DWORD *)(v3 + 56);

  return PB::Writer::writeVarInt(a2, v5, 0x12u);
}

uint64_t CMMsl::WakeGestureSample::hash_value(CMMsl::WakeGestureSample *this)
{
  int v1 = *((_DWORD *)this + 21);
  if ((v1 & 0x10) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_33:
    double v3 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
  double v2 = *((double *)this + 5);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  double v3 = *((double *)this + 6);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x200) != 0)
  {
LABEL_6:
    uint64_t v4 = *((int *)this + 17);
    if ((v1 & 0x400) != 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v4 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_7:
    uint64_t v5 = *((int *)this + 18);
    if ((v1 & 0x800) != 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v5 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_8:
    uint64_t v6 = *((unsigned __int8 *)this + 76);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v6 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_9:
    uint64_t v7 = *((unsigned __int8 *)this + 81);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v7 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_10:
    uint64_t v8 = *((unsigned __int8 *)this + 79);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v8 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_11:
    uint64_t v9 = *((unsigned __int8 *)this + 80);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v9 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_12:
    uint64_t v10 = *((unsigned __int8 *)this + 78);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v10 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_13:
    uint64_t v11 = *((unsigned __int8 *)this + 82);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v11 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_14:
    uint64_t v12 = *((unsigned __int8 *)this + 77);
    if ((v1 & 2) != 0) {
      goto LABEL_15;
    }
LABEL_43:
    double v13 = 0.0;
    if (v1) {
      goto LABEL_18;
    }
LABEL_44:
    double v14 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_42:
  uint64_t v12 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_43;
  }
LABEL_15:
  double v13 = *((double *)this + 2);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_18:
  double v14 = *((double *)this + 1);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_21:
    uint64_t v15 = *((int *)this + 15);
    if ((v1 & 8) != 0) {
      goto LABEL_22;
    }
LABEL_46:
    double v16 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_25;
    }
    goto LABEL_47;
  }
LABEL_45:
  uint64_t v15 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_46;
  }
LABEL_22:
  double v16 = *((double *)this + 4);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_25:
    uint64_t v17 = *((int *)this + 16);
    if ((v1 & 4) != 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v17 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_26:
    double v18 = *((double *)this + 3);
    if (v18 == 0.0) {
      double v18 = 0.0;
    }
    if ((v1 & 0x40) != 0) {
      goto LABEL_29;
    }
LABEL_49:
    uint64_t v19 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ v15 ^ *(void *)&v16 ^ v17 ^ *(void *)&v18 ^ v19;
  }
LABEL_48:
  double v18 = 0.0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_49;
  }
LABEL_29:
  uint64_t v19 = *((int *)this + 14);
  return *(void *)&v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ v15 ^ *(void *)&v16 ^ v17 ^ *(void *)&v18 ^ v19;
}

void CMMsl::WalkingDetectionResult::~WalkingDetectionResult(CMMsl::WalkingDetectionResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::WalkingDetectionResult::WalkingDetectionResult(uint64_t this, const CMMsl::WalkingDetectionResult *a2)
{
  *(void *)this = off_1003A9DC0;
  *(_DWORD *)(this + 60) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    __int16 v3 = 8;
    *(_WORD *)(this + 60) = 8;
    *(_DWORD *)(this + 24) = v4;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 28) = v5;
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 32) = v6;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 36) = v7;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v8 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 48) = v8;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 44) = v9;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v10 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 52) = v10;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  char v11 = *((unsigned char *)a2 + 59);
  v3 |= 0x4000u;
  *(_WORD *)(this + 60) = v3;
  *(unsigned char *)(this + 59) = v11;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v12 = *((unsigned char *)a2 + 58);
  v3 |= 0x2000u;
  *(_WORD *)(this + 60) = v3;
  *(unsigned char *)(this + 58) = v12;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  char v13 = *((unsigned char *)a2 + 57);
  v3 |= 0x1000u;
  *(_WORD *)(this + 60) = v3;
  *(unsigned char *)(this + 57) = v13;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v14 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 60) = v3;
  *(void *)(this + 8) = v14;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_29:
  char v15 = *((unsigned char *)a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(this + 60) = v3;
  *(unsigned char *)(this + 56) = v15;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v16 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 16) = v16;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_32:
    int v18 = *((_DWORD *)a2 + 10);
    *(_WORD *)(this + 60) = v3 | 0x80;
    *(_DWORD *)(this + 40) = v18;
    return this;
  }
LABEL_31:
  int v17 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 20) = v17;
  if ((*((_WORD *)a2 + 30) & 0x80) != 0) {
    goto LABEL_32;
  }
  return this;
}

CMMsl *CMMsl::WalkingDetectionResult::operator=(CMMsl *a1, const CMMsl::WalkingDetectionResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::WalkingDetectionResult::WalkingDetectionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WalkingDetectionResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::WalkingDetectionResult *a2, CMMsl::WalkingDetectionResult *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  int v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  int v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  int v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  int v8 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  int v9 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v9;
  int v10 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v10;
  LOBYTE(v3) = *((unsigned char *)this + 59);
  *((unsigned char *)this + 59) = *((unsigned char *)a2 + 59);
  *((unsigned char *)a2 + 59) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 58);
  *((unsigned char *)this + 58) = *((unsigned char *)a2 + 58);
  *((unsigned char *)a2 + 58) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 57);
  *((unsigned char *)this + 57) = *((unsigned char *)a2 + 57);
  *((unsigned char *)a2 + 57) = v3;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  LOBYTE(v11) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v11;
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  LODWORD(v11) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  return result;
}

float CMMsl::WalkingDetectionResult::WalkingDetectionResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9DC0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 59);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

CMMsl *CMMsl::WalkingDetectionResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::WalkingDetectionResult::WalkingDetectionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WalkingDetectionResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::WalkingDetectionResult::formatText(CMMsl::WalkingDetectionResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dataRate", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((*((_WORD *)this + 30) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isInterpolated", *((unsigned char *)this + 56));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isMissingSamples", *((unsigned char *)this + 57));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "isWalkingFiltered", *((unsigned char *)this + 58));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "isWalkingRaw", *((unsigned char *)this + 59));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "maxSampleDeltaInSecond", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "pedEnergyPlane", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "pedEnergyZ", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "pedEnergyZByPlane", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "pedEnergyZPeak", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "reversedTimestampCounts", *((_DWORD *)this + 10));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "thetaPitchFaceDeg", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "thetaRollFaceDeg", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "thetaYawFaceDeg", *((float *)this + 13));
  if (*((_WORD *)this + 30)) {
LABEL_16:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
LABEL_17:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WalkingDetectionResult::readFrom(CMMsl::WalkingDetectionResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 30) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_65;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_96;
            case 2u:
              *((_WORD *)this + 30) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_65;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_96;
            case 3u:
              *((_WORD *)this + 30) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_65;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_96;
            case 4u:
              *((_WORD *)this + 30) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_65;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_96;
            case 5u:
              *((_WORD *)this + 30) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_65;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_96;
            case 6u:
              *((_WORD *)this + 30) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_65;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_96;
            case 7u:
              *((_WORD *)this + 30) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_65;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_96;
            case 8u:
              *((_WORD *)this + 30) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 59) = v22;
              goto LABEL_107;
            case 9u:
              *((_WORD *)this + 30) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *((unsigned char *)this + 58) = v24;
              goto LABEL_107;
            case 0xAu:
              *((_WORD *)this + 30) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *((unsigned char *)this + 57) = v26;
              goto LABEL_107;
            case 0xBu:
              *((_WORD *)this + 30) |= 1u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_101;
                  }
                  unint64_t v43 = v27++;
                  char v44 = *(unsigned char *)(v28 + v43);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  BOOL v14 = v42++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_100:
                    unint64_t v2 = v43 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_100;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_101;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_101:
              *((void *)this + 1) = v31;
              goto LABEL_107;
            case 0xCu:
              *((_WORD *)this + 30) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 56) = v34;
              goto LABEL_107;
            case 0xDu:
              *((_WORD *)this + 30) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_65;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_96;
            case 0xEu:
              *((_WORD *)this + 30) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_96:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_65:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_107;
            case 0xFu:
              *((_WORD *)this + 30) |= 0x80u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_106;
                  }
                  unint64_t v47 = v35++;
                  char v48 = *(unsigned char *)(v36 + v47);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_105:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_105;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_106;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_106:
              *((_DWORD *)this + 10) = v39;
LABEL_107:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_107;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WalkingDetectionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 3u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 4u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 5u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 6u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 7u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 59), 8u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 58), 9u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 57), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 56), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
LABEL_30:
    this = PB::Writer::write(a2, *(float *)(v3 + 20), 0xEu);
    if ((*(_WORD *)(v3 + 60) & 0x80) == 0) {
      return this;
    }
    goto LABEL_31;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0xDu);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) != 0) {
    goto LABEL_30;
  }
LABEL_15:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_31:
  unsigned int v5 = *(_DWORD *)(v3 + 40);

  return PB::Writer::writeVarInt(a2, v5, 0xFu);
}

uint64_t CMMsl::WalkingDetectionResult::hash_value(CMMsl::WalkingDetectionResult *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 8) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v4 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_37:
    uint64_t v6 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_9;
    }
LABEL_38:
    uint64_t v8 = 0;
    if ((*((_WORD *)this + 30) & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_39:
    uint64_t v10 = 0;
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_15;
    }
LABEL_40:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0) {
      goto LABEL_18;
    }
LABEL_41:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 30) & 0x4000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }
  float v25 = *((float *)this + 6);
  uint64_t v2 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_36;
  }
LABEL_3:
  float v3 = *((float *)this + 7);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_37;
  }
LABEL_6:
  float v5 = *((float *)this + 8);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_38;
  }
LABEL_9:
  float v7 = *((float *)this + 9);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x200) == 0) {
    goto LABEL_39;
  }
LABEL_12:
  float v9 = *((float *)this + 12);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x100) == 0) {
    goto LABEL_40;
  }
LABEL_15:
  float v11 = *((float *)this + 11);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x400) == 0) {
    goto LABEL_41;
  }
LABEL_18:
  float v13 = *((float *)this + 13);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x4000) != 0)
  {
LABEL_21:
    uint64_t v15 = *((unsigned __int8 *)this + 59);
    if ((*((_WORD *)this + 30) & 0x2000) != 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v15 = 0;
  if ((*((_WORD *)this + 30) & 0x2000) != 0)
  {
LABEL_22:
    uint64_t v16 = *((unsigned __int8 *)this + 58);
    if ((*((_WORD *)this + 30) & 0x1000) != 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v16 = 0;
  if ((*((_WORD *)this + 30) & 0x1000) != 0)
  {
LABEL_23:
    uint64_t v17 = *((unsigned __int8 *)this + 57);
    if (v1) {
      goto LABEL_24;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v17 = 0;
  if (v1)
  {
LABEL_24:
    uint64_t v18 = *((void *)this + 1);
    if ((*((_WORD *)this + 30) & 0x800) != 0) {
      goto LABEL_25;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v18 = 0;
  if ((*((_WORD *)this + 30) & 0x800) != 0)
  {
LABEL_25:
    uint64_t v19 = *((unsigned __int8 *)this + 56);
    if ((v1 & 2) != 0) {
      goto LABEL_26;
    }
LABEL_47:
    uint64_t v21 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_29;
    }
    goto LABEL_48;
  }
LABEL_46:
  uint64_t v19 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_47;
  }
LABEL_26:
  float v20 = *((float *)this + 4);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_29:
    float v22 = *((float *)this + 5);
    uint64_t v23 = LODWORD(v22);
    if (v22 == 0.0) {
      uint64_t v23 = 0;
    }
    if ((v1 & 0x80) != 0) {
      goto LABEL_32;
    }
LABEL_49:
    uint64_t v24 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v21 ^ v23 ^ v24;
  }
LABEL_48:
  uint64_t v23 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_49;
  }
LABEL_32:
  uint64_t v24 = *((unsigned int *)this + 10);
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v21 ^ v23 ^ v24;
}

void CMMsl::WalkingSteadinessClassification::~WalkingSteadinessClassification(CMMsl::WalkingSteadinessClassification *this)
{
  *(void *)this = off_1003A9DF8;
  uint64_t v2 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WalkingSteadinessClassification::~WalkingSteadinessClassification(this);

  operator delete();
}

uint64_t CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification(uint64_t this, const CMMsl::WalkingSteadinessClassification *a2)
{
  *(void *)this = off_1003A9DF8;
  *(void *)(this + 64) = 0;
  *(_OWORD *)(this + 88) = 0u;
  *(_DWORD *)(this + 244) = 0;
  *(_OWORD *)(this + 104) = 0u;
  *(_OWORD *)(this + 120) = 0u;
  *(_OWORD *)(this + 136) = 0u;
  *(_OWORD *)(this + 152) = 0u;
  *(void *)(this + 168) = 0;
  int v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x100) != 0)
  {
    uint64_t v4 = *((void *)a2 + 10);
    int v3 = 256;
    *(_DWORD *)(this + 244) = 256;
    *(void *)(this + 80) = v4;
    int v2 = *((_DWORD *)a2 + 61);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 9);
    v3 |= 0x80u;
    *(_DWORD *)(this + 244) = v3;
    *(void *)(this + 72) = v5;
    int v2 = *((_DWORD *)a2 + 61);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    int v12 = *((_DWORD *)a2 + 55);
    v3 |= 0x10000u;
    *(_DWORD *)(this + 244) = v3;
    *(_DWORD *)(this + 220) = v12;
    int v2 = *((_DWORD *)a2 + 61);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_62;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  int v13 = *((_DWORD *)a2 + 54);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 244) = v3;
  *(_DWORD *)(this + 216) = v13;
  int v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x40000) == 0)
  {
LABEL_9:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v14 = *((_DWORD *)a2 + 57);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 244) = v3;
  *(_DWORD *)(this + 228) = v14;
  int v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_64;
  }
LABEL_63:
  char v15 = *((unsigned char *)a2 + 241);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 244) = v3;
  *(unsigned char *)(this + 241) = v15;
  int v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x80000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v16 = *((_DWORD *)a2 + 58);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 244) = v3;
  *(_DWORD *)(this + 232) = v16;
  int v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_66;
  }
LABEL_65:
  char v17 = *((unsigned char *)a2 + 242);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 244) = v3;
  *(unsigned char *)(this + 242) = v17;
  int v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_66:
  uint64_t v18 = *((void *)a2 + 22);
  v3 |= 0x200u;
  *(_DWORD *)(this + 244) = v3;
  *(void *)(this + 176) = v18;
  if ((*((_DWORD *)a2 + 61) & 0x400000) != 0)
  {
LABEL_14:
    char v6 = *((unsigned char *)a2 + 238);
    *(_DWORD *)(this + 244) = v3 | 0x400000;
    *(unsigned char *)(this + 238) = v6;
  }
LABEL_15:
  if (*((void *)a2 + 8)) {
    operator new();
  }
  int v7 = *((_DWORD *)a2 + 61);
  if ((v7 & 0x800) != 0)
  {
    uint64_t v19 = *((void *)a2 + 24);
    *(_DWORD *)(this + 244) |= 0x800u;
    *(void *)(this + 192) = v19;
    int v7 = *((_DWORD *)a2 + 61);
    if ((v7 & 0x800000) == 0)
    {
LABEL_19:
      if ((v7 & 0x400) == 0) {
        goto LABEL_20;
      }
      goto LABEL_70;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_19;
  }
  char v20 = *((unsigned char *)a2 + 239);
  *(_DWORD *)(this + 244) |= 0x800000u;
  *(unsigned char *)(this + 239) = v20;
  int v7 = *((_DWORD *)a2 + 61);
  if ((v7 & 0x400) == 0)
  {
LABEL_20:
    if ((v7 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_70:
  uint64_t v21 = *((void *)a2 + 23);
  *(_DWORD *)(this + 244) |= 0x400u;
  *(void *)(this + 184) = v21;
  if ((*((_DWORD *)a2 + 61) & 0x200000) != 0)
  {
LABEL_21:
    char v8 = *((unsigned char *)a2 + 237);
    *(_DWORD *)(this + 244) |= 0x200000u;
    *(unsigned char *)(this + 237) = v8;
  }
LABEL_22:
  if (*((void *)a2 + 15)) {
    operator new();
  }
  if (*((void *)a2 + 14)) {
    operator new();
  }
  if (*((void *)a2 + 13)) {
    operator new();
  }
  if (*((void *)a2 + 12)) {
    operator new();
  }
  if (*((void *)a2 + 19)) {
    operator new();
  }
  if (*((void *)a2 + 18)) {
    operator new();
  }
  if (*((void *)a2 + 21)) {
    operator new();
  }
  if (*((void *)a2 + 20)) {
    operator new();
  }
  if ((*((unsigned char *)a2 + 246) & 0x10) != 0)
  {
    char v9 = *((unsigned char *)a2 + 236);
    *(_DWORD *)(this + 244) |= 0x100000u;
    *(unsigned char *)(this + 236) = v9;
  }
  if (*((void *)a2 + 11)) {
    operator new();
  }
  int v10 = *((_DWORD *)a2 + 61);
  if (v10)
  {
    uint64_t v22 = *((void *)a2 + 1);
    *(_DWORD *)(this + 244) |= 1u;
    *(void *)(this + 8) = v22;
    int v10 = *((_DWORD *)a2 + 61);
    if ((v10 & 8) == 0)
    {
LABEL_44:
      if ((v10 & 0x20000) == 0) {
        goto LABEL_45;
      }
      goto LABEL_74;
    }
  }
  else if ((v10 & 8) == 0)
  {
    goto LABEL_44;
  }
  uint64_t v23 = *((void *)a2 + 4);
  *(_DWORD *)(this + 244) |= 8u;
  *(void *)(this + 32) = v23;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x20000) == 0)
  {
LABEL_45:
    if ((v10 & 0x1000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_75;
  }
LABEL_74:
  int v24 = *((_DWORD *)a2 + 56);
  *(_DWORD *)(this + 244) |= 0x20000u;
  *(_DWORD *)(this + 224) = v24;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_76;
  }
LABEL_75:
  char v25 = *((unsigned char *)a2 + 240);
  *(_DWORD *)(this + 244) |= 0x1000000u;
  *(unsigned char *)(this + 240) = v25;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x1000) == 0)
  {
LABEL_47:
    if ((v10 & 0x40) == 0) {
      goto LABEL_48;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v26 = *((void *)a2 + 25);
  *(_DWORD *)(this + 244) |= 0x1000u;
  *(void *)(this + 200) = v26;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x40) == 0)
  {
LABEL_48:
    if ((v10 & 2) == 0) {
      goto LABEL_49;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t v27 = *((void *)a2 + 7);
  *(_DWORD *)(this + 244) |= 0x40u;
  *(void *)(this + 56) = v27;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 2) == 0)
  {
LABEL_49:
    if ((v10 & 0x10) == 0) {
      goto LABEL_50;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t v28 = *((void *)a2 + 2);
  *(_DWORD *)(this + 244) |= 2u;
  *(void *)(this + 16) = v28;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x10) == 0)
  {
LABEL_50:
    if ((v10 & 0x4000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t v29 = *((void *)a2 + 5);
  *(_DWORD *)(this + 244) |= 0x10u;
  *(void *)(this + 40) = v29;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x4000) == 0)
  {
LABEL_51:
    if ((v10 & 0x2000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_81;
  }
LABEL_80:
  int v30 = *((_DWORD *)a2 + 53);
  *(_DWORD *)(this + 244) |= 0x4000u;
  *(_DWORD *)(this + 212) = v30;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x2000) == 0)
  {
LABEL_52:
    if ((v10 & 0x20) == 0) {
      goto LABEL_53;
    }
    goto LABEL_82;
  }
LABEL_81:
  int v31 = *((_DWORD *)a2 + 52);
  *(_DWORD *)(this + 244) |= 0x2000u;
  *(_DWORD *)(this + 208) = v31;
  int v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x20) == 0)
  {
LABEL_53:
    if ((v10 & 4) == 0) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_82:
  uint64_t v32 = *((void *)a2 + 6);
  *(_DWORD *)(this + 244) |= 0x20u;
  *(void *)(this + 48) = v32;
  if ((*((_DWORD *)a2 + 61) & 4) != 0)
  {
LABEL_54:
    uint64_t v11 = *((void *)a2 + 3);
    *(_DWORD *)(this + 244) |= 4u;
    *(void *)(this + 24) = v11;
  }
LABEL_55:
  if (*((void *)a2 + 17)) {
    operator new();
  }
  if (*((void *)a2 + 16)) {
    operator new();
  }
  return this;
}

CMMsl *CMMsl::WalkingSteadinessClassification::operator=(CMMsl *a1, const CMMsl::WalkingSteadinessClassification *a2)
{
  if (a1 != a2)
  {
    CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WalkingSteadinessClassification *)v5, v3);
    CMMsl::WalkingSteadinessClassification::~WalkingSteadinessClassification((CMMsl::WalkingSteadinessClassification *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WalkingSteadinessClassification *a2, CMMsl::WalkingSteadinessClassification *a3)
{
  int v3 = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v3;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v5;
  int v6 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v6;
  int v7 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v7;
  LODWORD(v5) = *((_DWORD *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = v5;
  LOBYTE(v7) = *((unsigned char *)this + 241);
  *((unsigned char *)this + 241) = *((unsigned char *)a2 + 241);
  *((unsigned char *)a2 + 241) = v7;
  LODWORD(v5) = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v5;
  LOBYTE(v7) = *((unsigned char *)this + 242);
  *((unsigned char *)this + 242) = *((unsigned char *)a2 + 242);
  *((unsigned char *)a2 + 242) = v7;
  uint64_t v8 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v8;
  LOBYTE(v7) = *((unsigned char *)this + 238);
  *((unsigned char *)this + 238) = *((unsigned char *)a2 + 238);
  *((unsigned char *)a2 + 238) = v7;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v10;
  LOBYTE(v9) = *((unsigned char *)this + 239);
  *((unsigned char *)this + 239) = *((unsigned char *)a2 + 239);
  *((unsigned char *)a2 + 239) = v9;
  uint64_t v11 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v11;
  LOBYTE(v9) = *((unsigned char *)this + 237);
  *((unsigned char *)this + 237) = *((unsigned char *)a2 + 237);
  *((unsigned char *)a2 + 237) = v9;
  uint64_t v12 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v12;
  uint64_t v13 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v13;
  uint64_t v14 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v14;
  uint64_t v15 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v15;
  uint64_t v16 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v16;
  uint64_t v17 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v17;
  uint64_t v18 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v18;
  uint64_t v19 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v19;
  LOBYTE(v19) = *((unsigned char *)this + 236);
  *((unsigned char *)this + 236) = *((unsigned char *)a2 + 236);
  *((unsigned char *)a2 + 236) = v19;
  uint64_t v20 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v20;
  uint64_t v21 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v21;
  uint64_t v22 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v22;
  LODWORD(v22) = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v22;
  LOBYTE(v20) = *((unsigned char *)this + 240);
  *((unsigned char *)this + 240) = *((unsigned char *)a2 + 240);
  *((unsigned char *)a2 + 240) = v20;
  uint64_t v23 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v23;
  uint64_t v24 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v24;
  uint64_t v25 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v25;
  uint64_t v26 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v26;
  LODWORD(v20) = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v20;
  LODWORD(v20) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v20;
  uint64_t v27 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v27;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  uint64_t v29 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v29;
  uint64_t v30 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v30;
  return result;
}

uint64_t CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9DF8;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a2 + 244) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(unsigned char *)(a1 + 241) = *(unsigned char *)(a2 + 241);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 238) = *(unsigned char *)(a2 + 238);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 239) = *(unsigned char *)(a2 + 239);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 237) = *(unsigned char *)(a2 + 237);
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  uint64_t v7 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v9 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v11 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  uint64_t v13 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v12;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  uint64_t v15 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = v14;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = 0;
  uint64_t v17 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v16;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  uint64_t v19 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v18;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  uint64_t v21 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v20;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  *(unsigned char *)(a1 + 236) = *(unsigned char *)(a2 + 236);
  uint64_t v22 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  uint64_t v23 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v22;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v24 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  uint64_t v25 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v24;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  uint64_t v27 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v26;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  return a1;
}

CMMsl *CMMsl::WalkingSteadinessClassification::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WalkingSteadinessClassification *)v5, v3);
    CMMsl::WalkingSteadinessClassification::~WalkingSteadinessClassification((CMMsl::WalkingSteadinessClassification *)v5);
  }
  return a1;
}

uint64_t CMMsl::WalkingSteadinessClassification::formatText(CMMsl::WalkingSteadinessClassification *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x100000) != 0)
  {
    PB::TextFormatter::format(a2, "appliedBoutMetricCorrections", *((unsigned char *)this + 236));
    int v5 = *((_DWORD *)this + 61);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_60;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dailyFlights30daysMax", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "dailyFlights30daysMean", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "dailySteps30DaysTotal", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "dailySteps30daysMax", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "dailySteps30daysMean", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "dailySteps7DaysTotal", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "dailySteps7daysMean", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "daysWithSteps30Days", *((_DWORD *)this + 52));
  int v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "daysWithSteps7Days", *((_DWORD *)this + 53));
  if ((*((_DWORD *)this + 61) & 0x8000) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "errorStatus", *((_DWORD *)this + 54));
LABEL_13:
  uint64_t v6 = *((void *)this + 8);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "eventResult");
  }
  int v7 = *((_DWORD *)this + 61);
  if ((v7 & 0x200000) != 0)
  {
    PB::TextFormatter::format(a2, "fusionSuccess", *((unsigned char *)this + 237));
    int v7 = *((_DWORD *)this + 61);
    if ((v7 & 0x80) == 0)
    {
LABEL_17:
      if ((v7 & 0x100) == 0) {
        goto LABEL_18;
      }
      goto LABEL_71;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_17;
  }
  PB::TextFormatter::format(a2, "hkEndTime", *((double *)this + 9));
  int v7 = *((_DWORD *)this + 61);
  if ((v7 & 0x100) == 0)
  {
LABEL_18:
    if ((v7 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "hkStartTime", *((double *)this + 10));
  if ((*((_DWORD *)this + 61) & 0x400000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(a2, "isHistoricalCompute", *((unsigned char *)this + 238));
LABEL_20:
  uint64_t v8 = *((void *)this + 11);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "modelBalanceFeatures");
  }
  uint64_t v9 = *((void *)this + 12);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "modelContinuousWalkingFeatures");
  }
  uint64_t v10 = *((void *)this + 13);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "modelContinuousWalkingResult");
  }
  uint64_t v11 = *((void *)this + 14);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "modelGaitBaselineFeatures");
  }
  uint64_t v12 = *((void *)this + 15);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "modelGaitBaselineResult");
  }
  uint64_t v13 = *((void *)this + 16);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "modelHarmonicFeatures");
  }
  uint64_t v14 = *((void *)this + 17);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, a2, "modelHarmonicResult");
  }
  uint64_t v15 = *((void *)this + 18);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, a2, "modelTemporalDispersionFeatures");
  }
  uint64_t v16 = *((void *)this + 19);
  if (v16) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32))(v16, a2, "modelTemporalDispersionResult");
  }
  uint64_t v17 = *((void *)this + 20);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, a2, "modelTemporalEntropyFeatures");
  }
  uint64_t v18 = *((void *)this + 21);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32))(v18, a2, "modelTemporalEntropyResult");
  }
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "nextClassificationTime", *((double *)this + 22));
    int v19 = *((_DWORD *)this + 61);
    if ((v19 & 0x400) == 0)
    {
LABEL_44:
      if ((v19 & 0x10000) == 0) {
        goto LABEL_45;
      }
      goto LABEL_75;
    }
  }
  else if ((v19 & 0x400) == 0)
  {
    goto LABEL_44;
  }
  PB::TextFormatter::format(a2, "rawSteadiness", *((double *)this + 23));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x10000) == 0)
  {
LABEL_45:
    if ((v19 & 0x800) == 0) {
      goto LABEL_46;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "rejectionStatus", *((_DWORD *)this + 55));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x800) == 0)
  {
LABEL_46:
    if ((v19 & 0x800000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "steadinessScore", *((double *)this + 24));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x800000) == 0)
  {
LABEL_47:
    if ((v19 & 0x1000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "steadinessScoreIsValid", *((unsigned char *)this + 239));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x1000) == 0)
  {
LABEL_48:
    if ((v19 & 0x20000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "unadjustedScore", *((double *)this + 25));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x20000) == 0)
  {
LABEL_49:
    if ((v19 & 0x40000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "userAge", *((float *)this + 56));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x40000) == 0)
  {
LABEL_50:
    if ((v19 & 0x1000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "userHeight", *((float *)this + 57));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x1000000) == 0)
  {
LABEL_51:
    if ((v19 & 0x2000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "userIsAgeSet", *((unsigned char *)this + 240));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x2000000) == 0)
  {
LABEL_52:
    if ((v19 & 0x4000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "userIsHeightSet", *((unsigned char *)this + 241));
  int v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x4000000) == 0)
  {
LABEL_53:
    if ((v19 & 0x80000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "userIsWeightSet", *((unsigned char *)this + 242));
  if ((*((_DWORD *)this + 61) & 0x80000) != 0) {
LABEL_54:
  }
    PB::TextFormatter::format(a2, "userWeight", *((float *)this + 58));
LABEL_55:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WalkingSteadinessClassification::readFrom(CMMsl::WalkingSteadinessClassification *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 61) |= 0x100u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v20);
          goto LABEL_170;
        case 2u:
          *((_DWORD *)this + 61) |= 0x80u;
          unint64_t v21 = *((void *)a2 + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v21);
          goto LABEL_170;
        case 4u:
          *((_DWORD *)this + 61) |= 0x10000u;
          unint64_t v23 = *((void *)a2 + 1);
          unint64_t v24 = *((void *)a2 + 2);
          uint64_t v25 = *(void *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v28 = 0;
            do
            {
              unint64_t v29 = v23 + 1;
              *((void *)a2 + 1) = v23 + 1;
              char v30 = *(unsigned char *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0) {
                goto LABEL_175;
              }
              v26 += 7;
              unint64_t v23 = v29;
              BOOL v14 = v27++ > 8;
            }
            while (!v14);
LABEL_133:
            LODWORD(v28) = 0;
            goto LABEL_175;
          }
          char v98 = 0;
          unsigned int v99 = 0;
          uint64_t v28 = 0;
          if (v24 <= v23) {
            unint64_t v24 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v100 = v23 + 1;
              char v101 = *(unsigned char *)(v25 + v23);
              *((void *)a2 + 1) = v100;
              v28 |= (unint64_t)(v101 & 0x7F) << v98;
              if (v101 < 0)
              {
                v98 += 7;
                unint64_t v23 = v100;
                BOOL v14 = v99++ > 8;
                if (v14) {
                  goto LABEL_133;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v28) = 0;
              }
            }
            break;
          }
LABEL_175:
          *((_DWORD *)this + 55) = v28;
          goto LABEL_188;
        case 5u:
          *((_DWORD *)this + 61) |= 0x8000u;
          unint64_t v31 = *((void *)a2 + 1);
          unint64_t v32 = *((void *)a2 + 2);
          uint64_t v33 = *(void *)a2;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v36 = 0;
            do
            {
              unint64_t v37 = v31 + 1;
              *((void *)a2 + 1) = v31 + 1;
              char v38 = *(unsigned char *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0) {
                goto LABEL_179;
              }
              v34 += 7;
              unint64_t v31 = v37;
              BOOL v14 = v35++ > 8;
            }
            while (!v14);
LABEL_140:
            LODWORD(v36) = 0;
            goto LABEL_179;
          }
          char v102 = 0;
          unsigned int v103 = 0;
          uint64_t v36 = 0;
          if (v32 <= v31) {
            unint64_t v32 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v104 = v31 + 1;
              char v105 = *(unsigned char *)(v33 + v31);
              *((void *)a2 + 1) = v104;
              v36 |= (unint64_t)(v105 & 0x7F) << v102;
              if (v105 < 0)
              {
                v102 += 7;
                unint64_t v31 = v104;
                BOOL v14 = v103++ > 8;
                if (v14) {
                  goto LABEL_140;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v36) = 0;
              }
            }
            break;
          }
LABEL_179:
          *((_DWORD *)this + 54) = v36;
          goto LABEL_188;
        case 6u:
          *((_DWORD *)this + 61) |= 0x40000u;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((_DWORD *)this + 57) = *(_DWORD *)(*(void *)a2 + v39);
          goto LABEL_90;
        case 7u:
          *((_DWORD *)this + 61) |= 0x2000000u;
          unint64_t v40 = *((void *)a2 + 1);
          if (v40 >= *((void *)a2 + 2))
          {
            BOOL v43 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v41 = v40 + 1;
            int v42 = *(unsigned __int8 *)(*(void *)a2 + v40);
            *((void *)a2 + 1) = v41;
            BOOL v43 = v42 != 0;
          }
          *((unsigned char *)this + 241) = v43;
          goto LABEL_188;
        case 8u:
          *((_DWORD *)this + 61) |= 0x80000u;
          unint64_t v44 = *((void *)a2 + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((_DWORD *)this + 58) = *(_DWORD *)(*(void *)a2 + v44);
          goto LABEL_90;
        case 9u:
          *((_DWORD *)this + 61) |= 0x4000000u;
          unint64_t v45 = *((void *)a2 + 1);
          if (v45 >= *((void *)a2 + 2))
          {
            BOOL v48 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v46 = v45 + 1;
            int v47 = *(unsigned __int8 *)(*(void *)a2 + v45);
            *((void *)a2 + 1) = v46;
            BOOL v48 = v47 != 0;
          }
          *((unsigned char *)this + 242) = v48;
          goto LABEL_188;
        case 0xAu:
          *((_DWORD *)this + 61) |= 0x200u;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((void *)this + 22) = *(void *)(*(void *)a2 + v49);
          goto LABEL_170;
        case 0xBu:
          *((_DWORD *)this + 61) |= 0x400000u;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 >= *((void *)a2 + 2))
          {
            BOOL v53 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v51 = v50 + 1;
            int v52 = *(unsigned __int8 *)(*(void *)a2 + v50);
            *((void *)a2 + 1) = v51;
            BOOL v53 = v52 != 0;
          }
          *((unsigned char *)this + 238) = v53;
          goto LABEL_188;
        case 0xCu:
          operator new();
        case 0xDu:
          *((_DWORD *)this + 61) |= 0x800u;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((void *)this + 24) = *(void *)(*(void *)a2 + v54);
          goto LABEL_170;
        case 0xEu:
          *((_DWORD *)this + 61) |= 0x800000u;
          unint64_t v55 = *((void *)a2 + 1);
          if (v55 >= *((void *)a2 + 2))
          {
            BOOL v58 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v56 = v55 + 1;
            int v57 = *(unsigned __int8 *)(*(void *)a2 + v55);
            *((void *)a2 + 1) = v56;
            BOOL v58 = v57 != 0;
          }
          *((unsigned char *)this + 239) = v58;
          goto LABEL_188;
        case 0xFu:
          *((_DWORD *)this + 61) |= 0x400u;
          unint64_t v59 = *((void *)a2 + 1);
          if (v59 > 0xFFFFFFFFFFFFFFF7 || v59 + 8 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((void *)this + 23) = *(void *)(*(void *)a2 + v59);
          goto LABEL_170;
        case 0x10u:
          *((_DWORD *)this + 61) |= 0x200000u;
          unint64_t v60 = *((void *)a2 + 1);
          if (v60 >= *((void *)a2 + 2))
          {
            BOOL v63 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v61 = v60 + 1;
            int v62 = *(unsigned __int8 *)(*(void *)a2 + v60);
            *((void *)a2 + 1) = v61;
            BOOL v63 = v62 != 0;
          }
          *((unsigned char *)this + 237) = v63;
          goto LABEL_188;
        case 0x11u:
          operator new();
        case 0x12u:
          operator new();
        case 0x13u:
          operator new();
        case 0x14u:
          operator new();
        case 0x15u:
          operator new();
        case 0x16u:
          operator new();
        case 0x17u:
          operator new();
        case 0x18u:
          operator new();
        case 0x19u:
          *((_DWORD *)this + 61) |= 0x100000u;
          unint64_t v64 = *((void *)a2 + 1);
          if (v64 >= *((void *)a2 + 2))
          {
            BOOL v67 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v65 = v64 + 1;
            int v66 = *(unsigned __int8 *)(*(void *)a2 + v64);
            *((void *)a2 + 1) = v65;
            BOOL v67 = v66 != 0;
          }
          *((unsigned char *)this + 236) = v67;
          goto LABEL_188;
        case 0x1Au:
          operator new();
        case 0x1Bu:
          *((_DWORD *)this + 61) |= 1u;
          unint64_t v68 = *((void *)a2 + 1);
          if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v68);
          goto LABEL_170;
        case 0x1Cu:
          *((_DWORD *)this + 61) |= 8u;
          unint64_t v69 = *((void *)a2 + 1);
          if (v69 > 0xFFFFFFFFFFFFFFF7 || v69 + 8 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v69);
          goto LABEL_170;
        case 0x1Du:
          *((_DWORD *)this + 61) |= 0x20000u;
          unint64_t v70 = *((void *)a2 + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((_DWORD *)this + 56) = *(_DWORD *)(*(void *)a2 + v70);
LABEL_90:
          uint64_t v71 = *((void *)a2 + 1) + 4;
          goto LABEL_171;
        case 0x1Eu:
          *((_DWORD *)this + 61) |= 0x1000000u;
          unint64_t v72 = *((void *)a2 + 1);
          if (v72 >= *((void *)a2 + 2))
          {
            BOOL v75 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v73 = v72 + 1;
            int v74 = *(unsigned __int8 *)(*(void *)a2 + v72);
            *((void *)a2 + 1) = v73;
            BOOL v75 = v74 != 0;
          }
          *((unsigned char *)this + 240) = v75;
          goto LABEL_188;
        case 0x1Fu:
          *((_DWORD *)this + 61) |= 0x1000u;
          unint64_t v76 = *((void *)a2 + 1);
          if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((void *)this + 25) = *(void *)(*(void *)a2 + v76);
          goto LABEL_170;
        case 0x20u:
          *((_DWORD *)this + 61) |= 0x40u;
          unint64_t v77 = *((void *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v77);
          goto LABEL_170;
        case 0x21u:
          *((_DWORD *)this + 61) |= 2u;
          unint64_t v78 = *((void *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v78);
          goto LABEL_170;
        case 0x22u:
          *((_DWORD *)this + 61) |= 0x10u;
          unint64_t v79 = *((void *)a2 + 1);
          if (v79 > 0xFFFFFFFFFFFFFFF7 || v79 + 8 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v79);
          goto LABEL_170;
        case 0x23u:
          *((_DWORD *)this + 61) |= 0x4000u;
          unint64_t v80 = *((void *)a2 + 1);
          unint64_t v81 = *((void *)a2 + 2);
          uint64_t v82 = *(void *)a2;
          if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
          {
            char v83 = 0;
            unsigned int v84 = 0;
            uint64_t v85 = 0;
            do
            {
              unint64_t v86 = v80 + 1;
              *((void *)a2 + 1) = v80 + 1;
              char v87 = *(unsigned char *)(v82 + v80);
              v85 |= (unint64_t)(v87 & 0x7F) << v83;
              if ((v87 & 0x80) == 0) {
                goto LABEL_183;
              }
              v83 += 7;
              unint64_t v80 = v86;
              BOOL v14 = v84++ > 8;
            }
            while (!v14);
LABEL_161:
            LODWORD(v85) = 0;
            goto LABEL_183;
          }
          char v106 = 0;
          unsigned int v107 = 0;
          uint64_t v85 = 0;
          if (v81 <= v80) {
            unint64_t v81 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v81 == v80)
            {
              LODWORD(v85) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v108 = v80 + 1;
              char v109 = *(unsigned char *)(v82 + v80);
              *((void *)a2 + 1) = v108;
              v85 |= (unint64_t)(v109 & 0x7F) << v106;
              if (v109 < 0)
              {
                v106 += 7;
                unint64_t v80 = v108;
                BOOL v14 = v107++ > 8;
                if (v14) {
                  goto LABEL_161;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v85) = 0;
              }
            }
            break;
          }
LABEL_183:
          *((_DWORD *)this + 53) = v85;
          goto LABEL_188;
        case 0x24u:
          *((_DWORD *)this + 61) |= 0x2000u;
          unint64_t v88 = *((void *)a2 + 1);
          unint64_t v89 = *((void *)a2 + 2);
          uint64_t v90 = *(void *)a2;
          if (v88 <= 0xFFFFFFFFFFFFFFF5 && v88 + 10 <= v89)
          {
            char v91 = 0;
            unsigned int v92 = 0;
            uint64_t v93 = 0;
            do
            {
              unint64_t v94 = v88 + 1;
              *((void *)a2 + 1) = v88 + 1;
              char v95 = *(unsigned char *)(v90 + v88);
              v93 |= (unint64_t)(v95 & 0x7F) << v91;
              if ((v95 & 0x80) == 0) {
                goto LABEL_187;
              }
              v91 += 7;
              unint64_t v88 = v94;
              BOOL v14 = v92++ > 8;
            }
            while (!v14);
LABEL_168:
            LODWORD(v93) = 0;
            goto LABEL_187;
          }
          char v110 = 0;
          unsigned int v111 = 0;
          uint64_t v93 = 0;
          if (v89 <= v88) {
            unint64_t v89 = *((void *)a2 + 1);
          }
          break;
        case 0x25u:
          *((_DWORD *)this + 61) |= 0x20u;
          unint64_t v96 = *((void *)a2 + 1);
          if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((void *)a2 + 2)) {
            goto LABEL_124;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v96);
          goto LABEL_170;
        case 0x26u:
          *((_DWORD *)this + 61) |= 4u;
          unint64_t v97 = *((void *)a2 + 1);
          if (v97 <= 0xFFFFFFFFFFFFFFF7 && v97 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 3) = *(void *)(*(void *)a2 + v97);
LABEL_170:
            uint64_t v71 = *((void *)a2 + 1) + 8;
LABEL_171:
            *((void *)a2 + 1) = v71;
          }
          else
          {
LABEL_124:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_188;
        case 0x27u:
          operator new();
        case 0x28u:
          operator new();
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_188;
      }
      while (1)
      {
        if (v89 == v88)
        {
          LODWORD(v93) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_187;
        }
        unint64_t v112 = v88 + 1;
        char v113 = *(unsigned char *)(v90 + v88);
        *((void *)a2 + 1) = v112;
        v93 |= (unint64_t)(v113 & 0x7F) << v110;
        if ((v113 & 0x80) == 0) {
          break;
        }
        v110 += 7;
        unint64_t v88 = v112;
        BOOL v14 = v111++ > 8;
        if (v14) {
          goto LABEL_168;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v93) = 0;
      }
LABEL_187:
      *((_DWORD *)this + 52) = v93;
LABEL_188:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WalkingSteadinessClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 244);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 80), 1u);
    int v4 = *(_DWORD *)(v3 + 244);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_60;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 2u);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 220), 4u);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 216), 5u);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 228), 6u);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 241), 7u);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 232), 8u);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 242), 9u);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(double *)(v3 + 176), 0xAu);
  if ((*(_DWORD *)(v3 + 244) & 0x400000) != 0) {
LABEL_11:
  }
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 238), 0xBu);
LABEL_12:
  int v5 = *(const PB::Base **)(v3 + 64);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5, 0xCu);
  }
  int v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 192), 0xDu);
    int v6 = *(_DWORD *)(v3 + 244);
    if ((v6 & 0x800000) == 0)
    {
LABEL_16:
      if ((v6 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_70;
    }
  }
  else if ((v6 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 239), 0xEu);
  int v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x400) == 0)
  {
LABEL_17:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(double *)(v3 + 184), 0xFu);
  if ((*(_DWORD *)(v3 + 244) & 0x200000) != 0) {
LABEL_18:
  }
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 237), 0x10u);
LABEL_19:
  int v7 = *(const PB::Base **)(v3 + 120);
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7, 0x11u);
  }
  uint64_t v8 = *(const PB::Base **)(v3 + 112);
  if (v8) {
    this = PB::Writer::writeSubmessage(a2, v8, 0x12u);
  }
  char v9 = *(const PB::Base **)(v3 + 104);
  if (v9) {
    this = PB::Writer::writeSubmessage(a2, v9, 0x13u);
  }
  unsigned int v10 = *(const PB::Base **)(v3 + 96);
  if (v10) {
    this = PB::Writer::writeSubmessage(a2, v10, 0x14u);
  }
  unint64_t v11 = *(const PB::Base **)(v3 + 152);
  if (v11) {
    this = PB::Writer::writeSubmessage(a2, v11, 0x15u);
  }
  unint64_t v12 = *(const PB::Base **)(v3 + 144);
  if (v12) {
    this = PB::Writer::writeSubmessage(a2, v12, 0x16u);
  }
  char v13 = *(const PB::Base **)(v3 + 168);
  if (v13) {
    this = PB::Writer::writeSubmessage(a2, v13, 0x17u);
  }
  BOOL v14 = *(const PB::Base **)(v3 + 160);
  if (v14) {
    this = PB::Writer::writeSubmessage(a2, v14, 0x18u);
  }
  if ((*(unsigned char *)(v3 + 246) & 0x10) != 0) {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 236), 0x19u);
  }
  char v15 = *(const PB::Base **)(v3 + 88);
  if (v15) {
    this = PB::Writer::writeSubmessage(a2, v15, 0x1Au);
  }
  int v16 = *(_DWORD *)(v3 + 244);
  if (v16)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 0x1Bu);
    int v16 = *(_DWORD *)(v3 + 244);
    if ((v16 & 8) == 0)
    {
LABEL_41:
      if ((v16 & 0x20000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_74;
    }
  }
  else if ((v16 & 8) == 0)
  {
    goto LABEL_41;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0x1Cu);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20000) == 0)
  {
LABEL_42:
    if ((v16 & 0x1000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 224), 0x1Du);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v16 & 0x1000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 240), 0x1Eu);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000) == 0)
  {
LABEL_44:
    if ((v16 & 0x40) == 0) {
      goto LABEL_45;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(double *)(v3 + 200), 0x1Fu);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x40) == 0)
  {
LABEL_45:
    if ((v16 & 2) == 0) {
      goto LABEL_46;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0x20u);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 2) == 0)
  {
LABEL_46:
    if ((v16 & 0x10) == 0) {
      goto LABEL_47;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0x21u);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x10) == 0)
  {
LABEL_47:
    if ((v16 & 0x4000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0x22u);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x4000) == 0)
  {
LABEL_48:
    if ((v16 & 0x2000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 212), 0x23u);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x2000) == 0)
  {
LABEL_49:
    if ((v16 & 0x20) == 0) {
      goto LABEL_50;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 208), 0x24u);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20) == 0)
  {
LABEL_50:
    if ((v16 & 4) == 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0x25u);
  if ((*(_DWORD *)(v3 + 244) & 4) != 0) {
LABEL_51:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x26u);
LABEL_52:
  unint64_t v17 = *(const PB::Base **)(v3 + 136);
  if (v17) {
    this = PB::Writer::writeSubmessage(a2, v17, 0x27u);
  }
  char v18 = *(const PB::Base **)(v3 + 128);
  if (v18)
  {
    return PB::Writer::writeSubmessage(a2, v18, 0x28u);
  }
  return this;
}

unint64_t CMMsl::WalkingSteadinessClassification::hash_value(CMMsl::WalkingSteadinessClassification *this)
{
  int v2 = *((_DWORD *)this + 61);
  if ((v2 & 0x100) == 0)
  {
    double v68 = 0.0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_23:
    double v67 = 0.0;
    if ((v2 & 0x10000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
  double v9 = *((double *)this + 10);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  double v68 = v9;
  if ((v2 & 0x80) == 0) {
    goto LABEL_23;
  }
LABEL_3:
  double v3 = *((double *)this + 9);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v67 = v3;
  if ((v2 & 0x10000) != 0)
  {
LABEL_6:
    uint64_t v66 = *((unsigned int *)this + 55);
    if ((v2 & 0x8000) != 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v66 = 0;
  if ((v2 & 0x8000) != 0)
  {
LABEL_7:
    uint64_t v65 = *((unsigned int *)this + 54);
    if ((v2 & 0x40000) != 0) {
      goto LABEL_8;
    }
LABEL_26:
    uint64_t v64 = 0;
    if ((v2 & 0x2000000) != 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t v65 = 0;
  if ((v2 & 0x40000) == 0) {
    goto LABEL_26;
  }
LABEL_8:
  float v4 = *((float *)this + 57);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  uint64_t v64 = v5;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_11:
    uint64_t v63 = *((unsigned __int8 *)this + 241);
    if ((v2 & 0x80000) != 0) {
      goto LABEL_12;
    }
LABEL_28:
    uint64_t v62 = 0;
    if ((v2 & 0x4000000) != 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t v63 = 0;
  if ((v2 & 0x80000) == 0) {
    goto LABEL_28;
  }
LABEL_12:
  float v6 = *((float *)this + 58);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  uint64_t v62 = v7;
  if ((v2 & 0x4000000) != 0)
  {
LABEL_15:
    uint64_t v61 = *((unsigned __int8 *)this + 242);
    if ((v2 & 0x200) != 0) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v61 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_16:
    double v8 = *((double *)this + 22);
    if (v8 == 0.0) {
      double v8 = 0.0;
    }
    double v60 = v8;
    if ((v2 & 0x400000) != 0) {
      goto LABEL_19;
    }
    goto LABEL_31;
  }
LABEL_30:
  double v60 = 0.0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_19:
    uint64_t v59 = *((unsigned __int8 *)this + 238);
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v59 = 0;
LABEL_32:
  unsigned int v10 = (CMMsl::SteadinessEvent *)*((void *)this + 8);
  if (v10) {
    unsigned int v10 = (CMMsl::SteadinessEvent *)CMMsl::SteadinessEvent::hash_value(v10);
  }
  if ((v2 & 0x800) == 0)
  {
    double v58 = 0.0;
    if ((v2 & 0x800000) != 0) {
      goto LABEL_36;
    }
LABEL_43:
    uint64_t v57 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_37;
    }
LABEL_44:
    double v56 = 0.0;
    goto LABEL_45;
  }
  double v12 = *((double *)this + 24);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  double v58 = v12;
  if ((v2 & 0x800000) == 0) {
    goto LABEL_43;
  }
LABEL_36:
  uint64_t v57 = *((unsigned __int8 *)this + 239);
  if ((v2 & 0x400) == 0) {
    goto LABEL_44;
  }
LABEL_37:
  double v11 = *((double *)this + 23);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  double v56 = v11;
LABEL_45:
  unint64_t v72 = v10;
  if ((v2 & 0x200000) != 0) {
    uint64_t v55 = *((unsigned __int8 *)this + 237);
  }
  else {
    uint64_t v55 = 0;
  }
  char v13 = (CMMsl::SteadinessModelResult *)*((void *)this + 15);
  if (v13) {
    uint64_t v14 = CMMsl::SteadinessModelResult::hash_value(v13);
  }
  else {
    uint64_t v14 = 0;
  }
  char v15 = (CMMsl::SteadinessModelGaitBaselineFeatures *)*((void *)this + 14);
  if (v15) {
    uint64_t v16 = CMMsl::SteadinessModelGaitBaselineFeatures::hash_value(v15);
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v17 = (CMMsl::SteadinessModelResult *)*((void *)this + 13);
  if (v17) {
    uint64_t v18 = CMMsl::SteadinessModelResult::hash_value(v17);
  }
  else {
    uint64_t v18 = 0;
  }
  int v19 = (CMMsl::SteadinessModelContinuousWalkingFeatures *)*((void *)this + 12);
  if (v19) {
    uint64_t v20 = CMMsl::SteadinessModelContinuousWalkingFeatures::hash_value(v19);
  }
  else {
    uint64_t v20 = 0;
  }
  unint64_t v21 = (CMMsl::SteadinessModelResult *)*((void *)this + 19);
  if (v21) {
    uint64_t v22 = CMMsl::SteadinessModelResult::hash_value(v21);
  }
  else {
    uint64_t v22 = 0;
  }
  unint64_t v23 = (CMMsl::SteadinessModelTemporalDispersionFeatures *)*((void *)this + 18);
  if (v23) {
    uint64_t v24 = CMMsl::SteadinessModelTemporalDispersionFeatures::hash_value(v23);
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = (CMMsl::SteadinessModelResult *)*((void *)this + 21);
  if (v25) {
    uint64_t v26 = CMMsl::SteadinessModelResult::hash_value(v25);
  }
  else {
    uint64_t v26 = 0;
  }
  unsigned int v27 = (CMMsl::SteadinessModelTemporalEntropyFeatures *)*((void *)this + 20);
  if (v27) {
    unsigned int v27 = (CMMsl::SteadinessModelTemporalEntropyFeatures *)CMMsl::SteadinessModelTemporalEntropyFeatures::hash_value(v27);
  }
  unint64_t v69 = v27;
  if ((v2 & 0x100000) != 0) {
    uint64_t v54 = *((unsigned __int8 *)this + 236);
  }
  else {
    uint64_t v54 = 0;
  }
  uint64_t v28 = (CMMsl::SteadinessModelBalanceFeatures *)*((void *)this + 11);
  if (v28) {
    uint64_t v28 = (CMMsl::SteadinessModelBalanceFeatures *)CMMsl::SteadinessModelBalanceFeatures::hash_value(v28);
  }
  if ((v2 & 1) == 0)
  {
    double v53 = 0.0;
    if ((v2 & 8) != 0) {
      goto LABEL_78;
    }
LABEL_94:
    double v52 = 0.0;
    if ((v2 & 0x20000) != 0) {
      goto LABEL_81;
    }
LABEL_95:
    uint64_t v51 = 0;
    if ((v2 & 0x1000000) != 0) {
      goto LABEL_84;
    }
    goto LABEL_96;
  }
  double v34 = *((double *)this + 1);
  if (v34 == 0.0) {
    double v34 = 0.0;
  }
  double v53 = v34;
  if ((v2 & 8) == 0) {
    goto LABEL_94;
  }
LABEL_78:
  double v29 = *((double *)this + 4);
  if (v29 == 0.0) {
    double v29 = 0.0;
  }
  double v52 = v29;
  if ((v2 & 0x20000) == 0) {
    goto LABEL_95;
  }
LABEL_81:
  float v30 = *((float *)this + 56);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  uint64_t v51 = v31;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_84:
    uint64_t v50 = *((unsigned __int8 *)this + 240);
    if ((v2 & 0x1000) != 0) {
      goto LABEL_85;
    }
    goto LABEL_97;
  }
LABEL_96:
  uint64_t v50 = 0;
  if ((v2 & 0x1000) != 0)
  {
LABEL_85:
    double v32 = *((double *)this + 25);
    if (v32 == 0.0) {
      double v32 = 0.0;
    }
    double v49 = v32;
    if ((v2 & 0x40) != 0) {
      goto LABEL_88;
    }
LABEL_98:
    double v48 = 0.0;
    goto LABEL_99;
  }
LABEL_97:
  double v49 = 0.0;
  if ((v2 & 0x40) == 0) {
    goto LABEL_98;
  }
LABEL_88:
  double v33 = *((double *)this + 7);
  if (v33 == 0.0) {
    double v33 = 0.0;
  }
  double v48 = v33;
LABEL_99:
  uint64_t v71 = v16;
  if ((v2 & 2) != 0)
  {
    double v35 = *((double *)this + 2);
    if (v35 == 0.0) {
      double v35 = 0.0;
    }
    double v47 = v35;
  }
  else
  {
    double v47 = 0.0;
  }
  uint64_t v70 = v14;
  if ((v2 & 0x10) != 0)
  {
    double v37 = *((double *)this + 5);
    if (v37 == 0.0) {
      double v37 = 0.0;
    }
    double v46 = v37;
    if ((v2 & 0x4000) != 0)
    {
LABEL_106:
      uint64_t v45 = *((int *)this + 53);
      if ((v2 & 0x2000) != 0) {
        goto LABEL_107;
      }
      goto LABEL_115;
    }
  }
  else
  {
    double v46 = 0.0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_106;
    }
  }
  uint64_t v45 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_107:
    uint64_t v44 = *((int *)this + 52);
    if ((v2 & 0x20) != 0) {
      goto LABEL_108;
    }
    goto LABEL_116;
  }
LABEL_115:
  uint64_t v44 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_108:
    if (*((double *)this + 6) == 0.0) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = *((void *)this + 6);
    }
    goto LABEL_117;
  }
LABEL_116:
  uint64_t v36 = 0;
LABEL_117:
  char v38 = v28;
  if ((v2 & 4) != 0)
  {
    if (*((double *)this + 3) == 0.0) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = *((void *)this + 3);
    }
  }
  else
  {
    uint64_t v39 = 0;
  }
  unint64_t v40 = (CMMsl::SteadinessModelResult *)*((void *)this + 17);
  if (v40) {
    uint64_t v41 = CMMsl::SteadinessModelResult::hash_value(v40);
  }
  else {
    uint64_t v41 = 0;
  }
  unint64_t v42 = *((void *)this + 16);
  if (v42) {
    unint64_t v42 = CMMsl::SteadinessModelHarmonicFeatures::hash_value((CMMsl::SteadinessModelHarmonicFeatures *)v42);
  }
  return *(void *)&v67 ^ *(void *)&v68 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v61 ^ *(void *)&v60 ^ v59 ^ (unint64_t)v72 ^ *(void *)&v58 ^ v57 ^ *(void *)&v56 ^ v55 ^ v70 ^ v71 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ (unint64_t)v69 ^ v54 ^ (unint64_t)v38 ^ *(void *)&v53 ^ *(void *)&v52 ^ v51 ^ v50 ^ *(void *)&v49 ^ *(void *)&v48 ^ *(void *)&v47 ^ *(void *)&v46 ^ v45 ^ v44 ^ v36 ^ v39 ^ v41 ^ v42;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeEventResult(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelGaitBaselineResult(uint64_t this)
{
  if (!*(void *)(this + 120)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelGaitBaselineFeatures(uint64_t this)
{
  if (!*(void *)(this + 112)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelContinuousWalkingResult(uint64_t this)
{
  if (!*(void *)(this + 104)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelContinuousWalkingFeatures(uint64_t this)
{
  if (!*(void *)(this + 96)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelTemporalDispersionResult(uint64_t this)
{
  if (!*(void *)(this + 152)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelTemporalDispersionFeatures(uint64_t this)
{
  if (!*(void *)(this + 144)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelTemporalEntropyResult(uint64_t this)
{
  if (!*(void *)(this + 168)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelTemporalEntropyFeatures(uint64_t this)
{
  if (!*(void *)(this + 160)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelBalanceFeatures(uint64_t this)
{
  if (!*(void *)(this + 88)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelHarmonicResult(uint64_t this)
{
  if (!*(void *)(this + 136)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelHarmonicFeatures(uint64_t this)
{
  if (!*(void *)(this + 128)) {
    operator new();
  }
  return this;
}

void CMMsl::WatchActiveCalories::~WatchActiveCalories(CMMsl::WatchActiveCalories *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::WatchActiveCalories::WatchActiveCalories(CMMsl::WatchActiveCalories *this, const CMMsl::WatchActiveCalories *a2)
{
  *(void *)this = off_1003A9E30;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 6);
    char v3 = 4;
    *((unsigned char *)this + 28) = 4;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 28) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::WatchActiveCalories::operator=(uint64_t a1, const CMMsl::WatchActiveCalories *a2)
{
  if ((const CMMsl::WatchActiveCalories *)a1 != a2)
  {
    CMMsl::WatchActiveCalories::WatchActiveCalories((CMMsl::WatchActiveCalories *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v10;
    int v10 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchActiveCalories *a2, CMMsl::WatchActiveCalories *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::WatchActiveCalories::WatchActiveCalories(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9E30;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9E30;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::WatchActiveCalories::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v9 = off_1003A9E30;
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    int v12 = *(_DWORD *)(a1 + 28);
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WatchActiveCalories::formatText(CMMsl::WatchActiveCalories *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "calories_kCal", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WatchActiveCalories::readFrom(CMMsl::WatchActiveCalories *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_32;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_36:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_37;
      }
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        goto LABEL_38;
      }
      *((unsigned char *)this + 28) |= 4u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
      {
LABEL_32:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
      unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_37:
      *((void *)a2 + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 28) |= 1u;
    unint64_t v2 = *((void *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
      goto LABEL_32;
    }
    *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchActiveCalories::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
    if ((*(unsigned char *)(v3 + 28) & 1) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(float *)(this + 24), 1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 3u);
}

uint64_t CMMsl::WatchActiveCalories::hash_value(CMMsl::WatchActiveCalories *this)
{
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
    float v4 = *((float *)this + 6);
    uint64_t v1 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v1 = 0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 2);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if (*((unsigned char *)this + 28)) {
        goto LABEL_6;
      }
LABEL_13:
      double v3 = 0.0;
      return *(void *)&v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3;
}

void CMMsl::WatchBasalCalories::~WatchBasalCalories(CMMsl::WatchBasalCalories *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::WatchBasalCalories::WatchBasalCalories(CMMsl::WatchBasalCalories *this, const CMMsl::WatchBasalCalories *a2)
{
  *(void *)this = off_1003A9E68;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 6);
    char v3 = 4;
    *((unsigned char *)this + 28) = 4;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 28) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::WatchBasalCalories::operator=(uint64_t a1, const CMMsl::WatchBasalCalories *a2)
{
  if ((const CMMsl::WatchBasalCalories *)a1 != a2)
  {
    CMMsl::WatchBasalCalories::WatchBasalCalories((CMMsl::WatchBasalCalories *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v10;
    int v10 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchBasalCalories *a2, CMMsl::WatchBasalCalories *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::WatchBasalCalories::WatchBasalCalories(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9E68;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9E68;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::WatchBasalCalories::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v9 = off_1003A9E68;
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    int v12 = *(_DWORD *)(a1 + 28);
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WatchBasalCalories::formatText(CMMsl::WatchBasalCalories *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "calories_kCal", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WatchBasalCalories::readFrom(CMMsl::WatchBasalCalories *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_32;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_36:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_37;
      }
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        goto LABEL_38;
      }
      *((unsigned char *)this + 28) |= 4u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
      {
LABEL_32:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
      unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_37:
      *((void *)a2 + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 28) |= 1u;
    unint64_t v2 = *((void *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
      goto LABEL_32;
    }
    *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchBasalCalories::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
    if ((*(unsigned char *)(v3 + 28) & 1) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(float *)(this + 24), 1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 3u);
}

uint64_t CMMsl::WatchBasalCalories::hash_value(CMMsl::WatchBasalCalories *this)
{
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
    float v4 = *((float *)this + 6);
    uint64_t v1 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v1 = 0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 2);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if (*((unsigned char *)this + 28)) {
        goto LABEL_6;
      }
LABEL_13:
      double v3 = 0.0;
      return *(void *)&v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3;
}

void CMMsl::WatchEnclosureMaterial::~WatchEnclosureMaterial(CMMsl::WatchEnclosureMaterial *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial(uint64_t this, const CMMsl::WatchEnclosureMaterial *a2)
{
  *(void *)this = off_1003A9EA0;
  *(_DWORD *)(this + 24) = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) = 2;
    *(void *)(this + 16) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 1) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 24))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 24) = v2;
    *(void *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::WatchEnclosureMaterial::operator=(uint64_t a1, const CMMsl::WatchEnclosureMaterial *a2)
{
  if ((const CMMsl::WatchEnclosureMaterial *)a1 != a2)
  {
    CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchEnclosureMaterial *a2, CMMsl::WatchEnclosureMaterial *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return result;
}

double CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9EA0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9EA0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t CMMsl::WatchEnclosureMaterial::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4;
    v10[2] = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v5;
    v10[0] = off_1003A9EA0;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::WatchEnclosureMaterial::formatText(CMMsl::WatchEnclosureMaterial *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "enclosureMaterial", *((void *)this + 1));
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WatchEnclosureMaterial::readFrom(CMMsl::WatchEnclosureMaterial *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((void *)this + 1) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchEnclosureMaterial::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4)
  {
    unint64_t v5 = *(void *)(v3 + 8);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::WatchEnclosureMaterial::hash_value(CMMsl::WatchEnclosureMaterial *this)
{
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 24)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((void *)this + 1);
  return v2 ^ *(void *)&v1;
}

void CMMsl::WatchHeartRateData::~WatchHeartRateData(CMMsl::WatchHeartRateData *this)
{
  *(void *)this = off_1003A9ED8;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WatchHeartRateData::~WatchHeartRateData(this);

  operator delete();
}

uint64_t CMMsl::WatchHeartRateData::WatchHeartRateData(uint64_t this, const CMMsl::WatchHeartRateData *a2)
{
  *(void *)this = off_1003A9ED8;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  if ((*((unsigned char *)a2 + 32) & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 2);
    *(unsigned char *)(this + 32) = 2;
    *(void *)(this + 16) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 32) & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 32))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    *(unsigned char *)(this + 32) = v2;
    *(void *)(this + 8) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 3)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::WatchHeartRateData::operator=(uint64_t a1, const CMMsl::WatchHeartRateData *a2)
{
  if ((const CMMsl::WatchHeartRateData *)a1 != a2)
  {
    CMMsl::WatchHeartRateData::WatchHeartRateData((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    CMMsl::WatchHeartRateData::~WatchHeartRateData((CMMsl::WatchHeartRateData *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchHeartRateData *a2, CMMsl::WatchHeartRateData *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  return result;
}

uint64_t CMMsl::WatchHeartRateData::WatchHeartRateData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9ED8;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WatchHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::WatchHeartRateData::WatchHeartRateData((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    CMMsl::WatchHeartRateData::~WatchHeartRateData((CMMsl::WatchHeartRateData *)v7);
  }
  return a1;
}

uint64_t CMMsl::WatchHeartRateData::formatText(CMMsl::WatchHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 32);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WatchHeartRateData::readFrom(CMMsl::WatchHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v22);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_35;
        }
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
        {
LABEL_30:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_35;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v21);
      }
      *((void *)a2 + 1) += 8;
LABEL_35:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
  }
  if (v4) {
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  }
  char v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5, 3u);
  }
  return this;
}

unint64_t CMMsl::WatchHeartRateData::hash_value(CMMsl::WatchHeartRateData *this)
{
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
    if (*((double *)this + 2) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 2);
    }
    if (*((unsigned char *)this + 32)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v2 = 0;
    goto LABEL_11;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_10;
  }
LABEL_3:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 1);
  }
LABEL_11:
  unint64_t v3 = *((void *)this + 3);
  if (v3) {
    unint64_t v3 = CMMsl::OnsetHeartRateData::hash_value((CMMsl::OnsetHeartRateData *)v3);
  }
  return v2 ^ v1 ^ v3;
}

uint64_t CMMsl::WatchHeartRateData::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

void CMMsl::WatchOnWristState::~WatchOnWristState(CMMsl::WatchOnWristState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::WatchOnWristState::WatchOnWristState(uint64_t this, const CMMsl::WatchOnWristState *a2)
{
  *(void *)this = off_1003A9F10;
  *(_DWORD *)(this + 40) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 40) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(unsigned char *)(this + 40) = v3;
    *(_DWORD *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x10u;
    *(unsigned char *)(this + 40) = v3;
    *(_DWORD *)(this + 32) = v6;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(unsigned char *)(this + 40) = v3;
  *(_DWORD *)(this + 28) = v7;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  char v8 = *((unsigned char *)a2 + 37);
  v3 |= 0x40u;
  *(unsigned char *)(this + 40) = v3;
  *(unsigned char *)(this + 37) = v8;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  char v9 = *((unsigned char *)a2 + 36);
  v3 |= 0x20u;
  *(unsigned char *)(this + 40) = v3;
  *(unsigned char *)(this + 36) = v9;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_18:
    uint64_t v11 = *((void *)a2 + 2);
    *(unsigned char *)(this + 40) = v3 | 2;
    *(void *)(this + 16) = v11;
    return this;
  }
LABEL_17:
  char v10 = *((unsigned char *)a2 + 38);
  v3 |= 0x80u;
  *(unsigned char *)(this + 40) = v3;
  *(unsigned char *)(this + 38) = v10;
  if ((*((unsigned char *)a2 + 40) & 2) != 0) {
    goto LABEL_18;
  }
  return this;
}

uint64_t CMMsl::WatchOnWristState::operator=(uint64_t a1, const CMMsl::WatchOnWristState *a2)
{
  if ((const CMMsl::WatchOnWristState *)a1 != a2)
  {
    CMMsl::WatchOnWristState::WatchOnWristState((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v4;
    int v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v6;
    LOBYTE(v5) = *(unsigned char *)(a1 + 37);
    *(unsigned char *)(a1 + 37) = v15;
    char v15 = v5;
    LOBYTE(v5) = *(unsigned char *)(a1 + 36);
    *(unsigned char *)(a1 + 36) = v14;
    char v14 = v5;
    LOBYTE(v5) = *(unsigned char *)(a1 + 38);
    *(unsigned char *)(a1 + 38) = v16;
    char v16 = v5;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v11;
    uint64_t v11 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchOnWristState *a2, CMMsl::WatchOnWristState *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  int v7 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 37);
  *((unsigned char *)this + 37) = *((unsigned char *)a2 + 37);
  *((unsigned char *)a2 + 37) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 36);
  *((unsigned char *)this + 36) = *((unsigned char *)a2 + 36);
  *((unsigned char *)a2 + 36) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 38);
  *((unsigned char *)this + 38) = *((unsigned char *)a2 + 38);
  *((unsigned char *)a2 + 38) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  return result;
}

double CMMsl::WatchOnWristState::WatchOnWristState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9F10;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9F10;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return result;
}

uint64_t CMMsl::WatchOnWristState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v15[0] = off_1003A9F10;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 32);
    char v6 = *(unsigned char *)(a2 + 37);
    char v7 = *(unsigned char *)(a2 + 36);
    char v8 = *(unsigned char *)(a2 + 38);
    uint64_t v9 = *(void *)(a2 + 16);
    int v20 = *(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v15[1] = v10;
    int v16 = *(_DWORD *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 32) = v5;
    *(void *)(a1 + 24) = v12;
    v15[3] = v11;
    LOBYTE(v3) = *(unsigned char *)(a1 + 37);
    *(unsigned char *)(a1 + 37) = v6;
    char v18 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 36);
    *(unsigned char *)(a1 + 36) = v7;
    char v17 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 38);
    *(unsigned char *)(a1 + 38) = v8;
    char v19 = v3;
    uint64_t v13 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    v15[2] = v13;
    PB::Base::~Base((PB::Base *)v15);
  }
  return a1;
}

uint64_t CMMsl::WatchOnWristState::formatText(CMMsl::WatchOnWristState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "date", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)this + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isForcedOnWristEnabled", *((unsigned char *)this + 36));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "isOnCharger", *((unsigned char *)this + 37));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isWristDetectionEnabled", *((unsigned char *)this + 38));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "onWrist", *((_DWORD *)this + 6));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "onWristConfidence", *((_DWORD *)this + 7));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "onWristSensor", *((_DWORD *)this + 8));
  if ((*((unsigned char *)this + 40) & 2) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 2));
LABEL_10:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WatchOnWristState::readFrom(CMMsl::WatchOnWristState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 40) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_116;
            case 2u:
              *((unsigned char *)this + 40) |= 4u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_100;
                  }
                  unint64_t v53 = v21++;
                  char v54 = *(unsigned char *)(v22 + v53);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_99:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_100;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_99;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_100;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_100:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_116;
            case 3u:
              *((unsigned char *)this + 40) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_105;
                  }
                  unint64_t v57 = v27++;
                  char v58 = *(unsigned char *)(v28 + v57);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_104:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_105;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_104;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_105;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_105:
              *((_DWORD *)this + 8) = v31;
              goto LABEL_116;
            case 4u:
              *((unsigned char *)this + 40) |= 8u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_110;
                  }
                  unint64_t v61 = v33++;
                  char v62 = *(unsigned char *)(v34 + v61);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_109:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_109;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_110;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_110:
              *((_DWORD *)this + 7) = v37;
              goto LABEL_116;
            case 5u:
              *((unsigned char *)this + 40) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *((unsigned char *)this + 37) = v40;
              goto LABEL_116;
            case 6u:
              *((unsigned char *)this + 40) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v42 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v42 = v41 != 0;
              }
              *((unsigned char *)this + 36) = v42;
              goto LABEL_116;
            case 7u:
              *((unsigned char *)this + 40) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v44 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v43 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v44 = v43 != 0;
              }
              *((unsigned char *)this + 38) = v44;
              goto LABEL_116;
            case 8u:
              *((unsigned char *)this + 40) |= 2u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    uint64_t v49 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_115;
                  }
                  unint64_t v65 = v45++;
                  char v66 = *(unsigned char *)(v46 + v65);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v49 = 0;
LABEL_114:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v49 = 0;
                }
                goto LABEL_114;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_115;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              uint64_t v49 = 0;
LABEL_115:
              *((void *)this + 2) = v49;
LABEL_116:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_116;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchOnWristState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 3u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 4u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 37), 5u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 38), 7u);
    if ((*(unsigned char *)(v3 + 40) & 2) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 36), 6u);
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4 < 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_17:
  unint64_t v5 = *(void *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 8u);
}

uint64_t CMMsl::WatchOnWristState::hash_value(CMMsl::WatchOnWristState *this)
{
  if (*((unsigned char *)this + 40))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 40) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 6);
      if ((*((unsigned char *)this + 40) & 0x10) != 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 8);
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 40) & 8) != 0)
  {
LABEL_5:
    uint64_t v4 = *((unsigned int *)this + 7);
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 40) & 0x40) != 0)
  {
LABEL_6:
    uint64_t v5 = *((unsigned __int8 *)this + 37);
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 40) & 0x20) != 0)
  {
LABEL_7:
    uint64_t v6 = *((unsigned __int8 *)this + 36);
    if ((*((unsigned char *)this + 40) & 0x80) != 0) {
      goto LABEL_8;
    }
LABEL_18:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_19:
    uint64_t v8 = 0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_17:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 40) & 0x80) == 0) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v7 = *((unsigned __int8 *)this + 38);
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_19;
  }
LABEL_9:
  uint64_t v8 = *((void *)this + 2);
  return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::WatchOrientationSettings::~WatchOrientationSettings(CMMsl::WatchOrientationSettings *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::WatchOrientationSettings::WatchOrientationSettings(uint64_t this, const CMMsl::WatchOrientationSettings *a2)
{
  *(void *)this = off_1003A9F48;
  *(_DWORD *)(this + 16) = 0;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 16) = 2;
    *(_DWORD *)(this + 12) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 1) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 16))
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 16) = v2;
    *(_DWORD *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::WatchOrientationSettings::operator=(uint64_t a1, const CMMsl::WatchOrientationSettings *a2)
{
  if ((const CMMsl::WatchOrientationSettings *)a1 != a2)
  {
    CMMsl::WatchOrientationSettings::WatchOrientationSettings((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::WatchOrientationSettings *a2, CMMsl::WatchOrientationSettings *a3)
{
  int v3 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  int v5 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  return this;
}

uint64_t CMMsl::WatchOrientationSettings::WatchOrientationSettings(uint64_t result, _DWORD *a2)
{
  *(void *)uint64_t result = off_1003A9F48;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

{
  *(void *)uint64_t result = off_1003A9F48;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

uint64_t CMMsl::WatchOrientationSettings::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = off_1003A9F48;
    int v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::WatchOrientationSettings::formatText(CMMsl::WatchOrientationSettings *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "crown", *((_DWORD *)this + 2));
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "wrist", *((_DWORD *)this + 3));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WatchOrientationSettings::readFrom(CMMsl::WatchOrientationSettings *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          unint64_t v3 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 2) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_59:
          unint64_t v3 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v3 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v3;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 3) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchOrientationSettings::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 12), 1u);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 8);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::WatchOrientationSettings::hash_value(CMMsl::WatchOrientationSettings *this)
{
  if ((*((unsigned char *)this + 16) & 2) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 3);
    if (*((unsigned char *)this + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 2);
  return v2 ^ v1;
}

uint64_t CMMsl::WifiScanEntry::WifiScanEntry(uint64_t this)
{
  *(void *)this = off_1003A9F80;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A9F80;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::WifiScanEntry::~WifiScanEntry(CMMsl::WifiScanEntry *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::WifiScanEntry::WifiScanEntry(uint64_t this, const CMMsl::WifiScanEntry *a2)
{
  *(void *)this = off_1003A9F80;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    char v7 = *((unsigned char *)a2 + 28);
    *(unsigned char *)(this + 32) = v3 | 8;
    *(unsigned char *)(this + 28) = v7;
    return this;
  }
  uint64_t v6 = *((void *)a2 + 2);
  v3 |= 2u;
  *(unsigned char *)(this + 32) = v3;
  *(void *)(this + 16) = v6;
  if ((*((unsigned char *)a2 + 32) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::WifiScanEntry::operator=(uint64_t a1, const CMMsl::WifiScanEntry *a2)
{
  if ((const CMMsl::WifiScanEntry *)a1 != a2)
  {
    CMMsl::WifiScanEntry::WifiScanEntry((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    LOBYTE(v4) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v11;
    char v11 = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WifiScanEntry *a2, CMMsl::WifiScanEntry *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v4) = *((unsigned char *)this + 28);
  *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
  *((unsigned char *)a2 + 28) = v4;
  return result;
}

double CMMsl::WifiScanEntry::WifiScanEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9F80;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A9F80;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return result;
}

uint64_t CMMsl::WifiScanEntry::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 24);
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = *(unsigned char *)(a2 + 28);
    int v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v3;
    int v15 = v8;
    uint64_t v9 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v12[0] = off_1003A9F80;
    v12[1] = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v5;
    int v13 = v9;
    uint64_t v10 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v6;
    v12[2] = v10;
    LOBYTE(v9) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v7;
    char v14 = v9;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::WifiScanEntry::formatText(CMMsl::WifiScanEntry *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "entryId", *((void *)this + 1));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isMoving", *((unsigned char *)this + 28));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "rssi", *((_DWORD *)this + 6));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WifiScanEntry::readFrom(CMMsl::WifiScanEntry *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v35 = 0;
                unsigned int v36 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_64;
                  }
                  unint64_t v37 = v20++;
                  char v38 = *(unsigned char *)(v21 + v37);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  BOOL v14 = v36++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_63;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_63:
                unint64_t v2 = v37 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_64;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_64:
              *((void *)this + 1) = v24;
              goto LABEL_70;
            case 2u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_69;
                  }
                  unint64_t v41 = v27++;
                  char v42 = *(unsigned char *)(v28 + v41);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_68;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *((_DWORD *)this + 6) = -(v31 & 1) ^ ((int)v31 >> 1);
LABEL_70:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 3u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_70;
            case 4u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 28) = v34;
              goto LABEL_70;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_70;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WifiScanEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
      if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeSInt(a2, *(_DWORD *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  char v5 = *(unsigned char *)(v3 + 28);

  return PB::Writer::write(a2, v5, 4u);
}

BOOL CMMsl::WifiScanEntry::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 8) == 0;
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
    return (*(unsigned char *)(a2 + 32) & 8) != 0 && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28);
  }
  return v2;
}

uint64_t CMMsl::WifiScanEntry::hash_value(CMMsl::WifiScanEntry *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((int *)this + 6);
      if ((*((unsigned char *)this + 32) & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_4:
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v4 = 0;
    return v2 ^ v1 ^ *(void *)&v3 ^ v4;
  }
LABEL_10:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v4 = *((unsigned __int8 *)this + 28);
  return v2 ^ v1 ^ *(void *)&v3 ^ v4;
}

void CMMsl::WifiScanResults::~WifiScanResults(CMMsl::WifiScanResults *this)
{
  *(void *)this = off_1003A9FB8;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A9FB8;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A9FB8;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

void *CMMsl::WifiScanResults::WifiScanResults(void *this, const CMMsl::WifiScanResults *a2)
{
  this[1] = 0;
  *this = off_1003A9FB8;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_100263DF4();
  }
  return this;
}

void sub_100263DF4()
{
}

void sub_100263EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::WifiScanResults::operator=(uint64_t a1, const CMMsl::WifiScanResults *a2)
{
  if ((const CMMsl::WifiScanResults *)a1 != a2)
  {
    CMMsl::WifiScanResults::WifiScanResults(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = off_1003A9FB8;
    char v9 = (void **)&v7;
    sub_100274A84(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::WifiScanResults *a2, CMMsl::WifiScanResults *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::WifiScanResults::WifiScanResults(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A9FB8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = off_1003A9FB8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::WifiScanResults::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v9 = off_1003A9FB8;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_100274B44((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    unint64_t v12 = (void **)&v10;
    char v9 = off_1003A9FB8;
    sub_100274A84(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WifiScanResults::formatText(CMMsl::WifiScanResults *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "entries");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WifiScanResults::readFrom(CMMsl::WifiScanResults *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_1002643F8();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1002643F8()
{
}

void sub_100264510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::WifiScanResults::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    long long v5 = *v2++;
  return this;
}

BOOL sub_1002645A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::WifiScanEntry::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::WifiScanResults::hash_value(CMMsl::WifiScanResults *this)
{
  uint64_t v1 = (CMMsl::WifiScanEntry **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::WifiScanEntry **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::WifiScanEntry::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::WorkoutActivity::~WorkoutActivity(CMMsl::WorkoutActivity *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::WorkoutActivity::WorkoutActivity(uint64_t this, const CMMsl::WorkoutActivity *a2)
{
  *(void *)this = off_1003A9FF0;
  *(_DWORD *)(this + 16) = 0;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 16) = 2;
    *(_DWORD *)(this + 12) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 1) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 16))
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 16) = v2;
    *(_DWORD *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::WorkoutActivity::operator=(uint64_t a1, const CMMsl::WorkoutActivity *a2)
{
  if ((const CMMsl::WorkoutActivity *)a1 != a2)
  {
    CMMsl::WorkoutActivity::WorkoutActivity((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::WorkoutActivity *a2, CMMsl::WorkoutActivity *a3)
{
  int v3 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  int v5 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  return this;
}

uint64_t CMMsl::WorkoutActivity::WorkoutActivity(uint64_t result, _DWORD *a2)
{
  *(void *)BOOL result = off_1003A9FF0;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

{
  *(void *)BOOL result = off_1003A9FF0;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

uint64_t CMMsl::WorkoutActivity::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = off_1003A9FF0;
    int v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::WorkoutActivity::formatText(CMMsl::WorkoutActivity *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "activityType", *((_DWORD *)this + 2));
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "motionNotification", *((_DWORD *)this + 3));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutActivity::readFrom(CMMsl::WorkoutActivity *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          unint64_t v3 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 2) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_59:
          unint64_t v3 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v3 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v3;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 3) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 12), 1u);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 8);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::WorkoutActivity::hash_value(CMMsl::WorkoutActivity *this)
{
  if ((*((unsigned char *)this + 16) & 2) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 3);
    if (*((unsigned char *)this + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 2);
  return v2 ^ v1;
}

void CMMsl::WorkoutEvent::~WorkoutEvent(CMMsl::WorkoutEvent *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::WorkoutEvent::WorkoutEvent(uint64_t this, const CMMsl::WorkoutEvent *a2)
{
  *(void *)this = off_1003AA028;
  *(_DWORD *)(this + 64) = 0;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) != 0)
  {
    int v4 = *((_DWORD *)a2 + 15);
    __int16 v3 = 512;
    *(_WORD *)(this + 64) = 512;
    *(_DWORD *)(this + 60) = v4;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 10);
    v3 |= 0x10u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 40) = v5;
    __int16 v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 64) = v3;
    *(void *)(this + 16) = v6;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 32) = v7;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v8 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 8) = v8;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v9 = *((_DWORD *)a2 + 13);
  v3 |= 0x80u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v9;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v10 = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 56) = v10;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x40u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v11;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_22:
    int v13 = *((_DWORD *)a2 + 11);
    *(_WORD *)(this + 64) = v3 | 0x20;
    *(_DWORD *)(this + 44) = v13;
    return this;
  }
LABEL_21:
  uint64_t v12 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 24) = v12;
  if ((*((_WORD *)a2 + 32) & 0x20) != 0) {
    goto LABEL_22;
  }
  return this;
}

uint64_t CMMsl::WorkoutEvent::operator=(uint64_t a1, const CMMsl::WorkoutEvent *a2)
{
  if ((const CMMsl::WorkoutEvent *)a1 != a2)
  {
    CMMsl::WorkoutEvent::WorkoutEvent((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    uint64_t v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v4;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WorkoutEvent *a2, CMMsl::WorkoutEvent *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  int v4 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  int v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  int v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  int v10 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  int v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  int v13 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v13;
  return result;
}

double CMMsl::WorkoutEvent::WorkoutEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003AA028;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return result;
}

uint64_t CMMsl::WorkoutEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutEvent::WorkoutEvent((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    uint64_t v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v4;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::WorkoutEvent::formatText(CMMsl::WorkoutEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "endTime", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "eventTime", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "eventType", *((_DWORD *)this + 10));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "genericWorkoutLabel", *((_DWORD *)this + 11));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "poolLength", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "swimLocation", *((_DWORD *)this + 12));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "workoutLocationType", *((_DWORD *)this + 13));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "workoutMode", *((_DWORD *)this + 14));
  if ((*((_WORD *)this + 32) & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 15));
LABEL_12:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutEvent::readFrom(CMMsl::WorkoutEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 32) |= 0x200u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_126;
                  }
                  unint64_t v59 = v20++;
                  char v60 = *(unsigned char *)(v21 + v59);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_125;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_125:
                unint64_t v2 = v59 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_126;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_126:
              *((_DWORD *)this + 15) = v24;
              goto LABEL_152;
            case 2u:
              *((_WORD *)this + 32) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_131;
                  }
                  unint64_t v63 = v27++;
                  char v64 = *(unsigned char *)(v28 + v63);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_130:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_131;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_130;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_131;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_131:
              *((_DWORD *)this + 10) = v31;
              goto LABEL_152;
            case 3u:
              *((_WORD *)this + 32) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_70;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_121;
            case 4u:
              *((_WORD *)this + 32) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_70;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_121;
            case 5u:
              *((_WORD *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_70;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_121;
            case 6u:
              *((_WORD *)this + 32) |= 0x80u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_136;
                  }
                  unint64_t v67 = v33++;
                  char v68 = *(unsigned char *)(v34 + v67);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_135:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_136;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_135;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_136;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_136:
              *((_DWORD *)this + 13) = v37;
              goto LABEL_152;
            case 7u:
              *((_WORD *)this + 32) |= 0x100u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_141;
                  }
                  unint64_t v71 = v39++;
                  char v72 = *(unsigned char *)(v40 + v71);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_140:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_141;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_140;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_141;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_141:
              *((_DWORD *)this + 14) = v43;
              goto LABEL_152;
            case 8u:
              *((_WORD *)this + 32) |= 0x40u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_146;
                  }
                  unint64_t v75 = v45++;
                  char v76 = *(unsigned char *)(v46 + v75);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_145:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_145;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_146;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_146:
              *((_DWORD *)this + 12) = v49;
              goto LABEL_152;
            case 9u:
              *((_WORD *)this + 32) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_121:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_70:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_152;
            case 0xAu:
              *((_WORD *)this + 32) |= 0x20u;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_151;
                  }
                  unint64_t v79 = v51++;
                  char v80 = *(unsigned char *)(v52 + v79);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_150:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_150;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_151;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_151:
              *((_DWORD *)this + 11) = v55;
LABEL_152:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_152;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 60), 1u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 2u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 6u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 7u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 9u);
    if ((*(_WORD *)(v3 + 64) & 0x20) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 8u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_21:
  unsigned int v5 = *(_DWORD *)(v3 + 44);

  return PB::Writer::writeVarInt(a2, v5, 0xAu);
}

uint64_t CMMsl::WorkoutEvent::hash_value(CMMsl::WorkoutEvent *this)
{
  __int16 v1 = *((_WORD *)this + 32);
  if ((v1 & 0x200) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 15);
    if ((v1 & 0x10) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 10);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
LABEL_22:
      double v4 = 0.0;
      if ((v1 & 8) != 0) {
        goto LABEL_7;
      }
LABEL_23:
      double v5 = 0.0;
      if (v1) {
        goto LABEL_10;
      }
LABEL_24:
      double v6 = 0.0;
      if ((v1 & 0x80) != 0) {
        goto LABEL_13;
      }
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_22;
  }
LABEL_4:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_23;
  }
LABEL_7:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_10:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_13:
    uint64_t v7 = *((unsigned int *)this + 13);
    if ((*((_WORD *)this + 32) & 0x100) != 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 32) & 0x100) != 0)
  {
LABEL_14:
    uint64_t v8 = *((unsigned int *)this + 14);
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v8 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    uint64_t v9 = *((unsigned int *)this + 12);
    if ((v1 & 4) != 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v9 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_16:
    double v10 = *((double *)this + 3);
    if (v10 == 0.0) {
      double v10 = 0.0;
    }
    if ((v1 & 0x20) != 0) {
      goto LABEL_19;
    }
LABEL_29:
    uint64_t v11 = 0;
    return v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ v11;
  }
LABEL_28:
  double v10 = 0.0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v11 = *((unsigned int *)this + 11);
  return v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ v11;
}

uint64_t CMMsl::WorkoutPriorInformation::WorkoutPriorInformation(uint64_t this)
{
  *(void *)this = off_1003AA060;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003AA060;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::WorkoutPriorInformation::~WorkoutPriorInformation(CMMsl::WorkoutPriorInformation *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::WorkoutPriorInformation::WorkoutPriorInformation(uint64_t this, const CMMsl::WorkoutPriorInformation *a2)
{
  *(void *)this = off_1003AA060;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    int v4 = *((_DWORD *)a2 + 7);
    char v3 = 16;
    *(unsigned char *)(this + 32) = 16;
    *(_DWORD *)(this + 28) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 4);
      *(unsigned char *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 32) = v3;
  *(void *)(this + 8) = v7;
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::WorkoutPriorInformation::operator=(uint64_t a1, const CMMsl::WorkoutPriorInformation *a2)
{
  if ((const CMMsl::WorkoutPriorInformation *)a1 != a2)
  {
    CMMsl::WorkoutPriorInformation::WorkoutPriorInformation((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WorkoutPriorInformation *a2, CMMsl::WorkoutPriorInformation *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

double CMMsl::WorkoutPriorInformation::WorkoutPriorInformation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003AA060;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003AA060;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::WorkoutPriorInformation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003AA060;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::WorkoutPriorInformation::formatText(CMMsl::WorkoutPriorInformation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "genericWorkoutLabel", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "poolLength", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "swimLocation", *((_DWORD *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "workoutLocationType", *((_DWORD *)this + 6));
  if ((*((unsigned char *)this + 32) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 7));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutPriorInformation::readFrom(CMMsl::WorkoutPriorInformation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 0x10u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  unint64_t v47 = v20++;
                  char v48 = *(unsigned char *)(v21 + v47);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_87:
                unint64_t v2 = v47 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_88:
              *((_DWORD *)this + 7) = v24;
              goto LABEL_104;
            case 2u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *((_DWORD *)this + 6) = v31;
              goto LABEL_104;
            case 3u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *((_DWORD *)this + 5) = v37;
              goto LABEL_104;
            case 4u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *((_DWORD *)this + 4) = v43;
LABEL_104:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutPriorInformation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 28), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_11:
  unsigned int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 5u);
}

BOOL CMMsl::WorkoutPriorInformation::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::WorkoutPriorInformation::hash_value(CMMsl::WorkoutPriorInformation *this)
{
  if ((*((unsigned char *)this + 32) & 0x10) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 7);
    if ((*((unsigned char *)this + 32) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 6);
      if ((*((unsigned char *)this + 32) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 5);
    if (*((unsigned char *)this + 32)) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v3 = 0;
  if (*((unsigned char *)this + 32))
  {
LABEL_5:
    double v4 = *((double *)this + 1);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v5 = 0;
    return v2 ^ v1 ^ v3 ^ *(void *)&v4 ^ v5;
  }
LABEL_12:
  double v4 = 0.0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v5 = *((unsigned int *)this + 4);
  return v2 ^ v1 ^ v3 ^ *(void *)&v4 ^ v5;
}

void CMMsl::WorkoutRecorderALSData::~WorkoutRecorderALSData(CMMsl::WorkoutRecorderALSData *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA098;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderALSData::~WorkoutRecorderALSData(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(void *this, const CMMsl::WorkoutRecorderALSData *a2)
{
  *this = off_1003AA098;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderALSData *CMMsl::WorkoutRecorderALSData::operator=(const CMMsl::WorkoutRecorderALSData *a1, const CMMsl::WorkoutRecorderALSData *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderALSData::~WorkoutRecorderALSData((CMMsl::WorkoutRecorderALSData *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderALSData *a2, CMMsl::WorkoutRecorderALSData *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(void *a1, uint64_t a2)
{
  *a1 = off_1003AA098;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA098;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderALSData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA098;
    v6[1] = v4;
    CMMsl::WorkoutRecorderALSData::~WorkoutRecorderALSData((CMMsl::WorkoutRecorderALSData *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderALSData::formatText(CMMsl::WorkoutRecorderALSData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderALSData::readFrom(CMMsl::WorkoutRecorderALSData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

uint64_t CMMsl::WorkoutRecorderALSData::hash_value(CMMsl::WorkoutRecorderALSData *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  float v2 = *(float *)(v1 + 8);
  if (v2 == 0.0 || (*(unsigned char *)(v1 + 12) & 1) == 0) {
    return 0;
  }
  else {
    return LODWORD(v2);
  }
}

uint64_t CMMsl::WorkoutRecorderALSData::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderAccel::~WorkoutRecorderAccel(CMMsl::WorkoutRecorderAccel *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA0D0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderAccel::~WorkoutRecorderAccel(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(void *this, const CMMsl::WorkoutRecorderAccel *a2)
{
  *this = off_1003AA0D0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderAccel *CMMsl::WorkoutRecorderAccel::operator=(const CMMsl::WorkoutRecorderAccel *a1, const CMMsl::WorkoutRecorderAccel *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderAccel::~WorkoutRecorderAccel((CMMsl::WorkoutRecorderAccel *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderAccel *a2, CMMsl::WorkoutRecorderAccel *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(void *a1, uint64_t a2)
{
  *a1 = off_1003AA0D0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA0D0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAccel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA0D0;
    v6[1] = v4;
    CMMsl::WorkoutRecorderAccel::~WorkoutRecorderAccel((CMMsl::WorkoutRecorderAccel *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAccel::formatText(CMMsl::WorkoutRecorderAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderAccel::readFrom(CMMsl::WorkoutRecorderAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::Accel *CMMsl::WorkoutRecorderAccel::hash_value(CMMsl::WorkoutRecorderAccel *this)
{
  uint64_t result = (CMMsl::Accel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderAccel::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderAccel800::~WorkoutRecorderAccel800(CMMsl::WorkoutRecorderAccel800 *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA108;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderAccel800::~WorkoutRecorderAccel800(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(void *this, const CMMsl::WorkoutRecorderAccel800 *a2)
{
  *this = off_1003AA108;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderAccel800 *CMMsl::WorkoutRecorderAccel800::operator=(const CMMsl::WorkoutRecorderAccel800 *a1, const CMMsl::WorkoutRecorderAccel800 *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderAccel800::~WorkoutRecorderAccel800((CMMsl::WorkoutRecorderAccel800 *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderAccel800 *a2, CMMsl::WorkoutRecorderAccel800 *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(void *a1, uint64_t a2)
{
  *a1 = off_1003AA108;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA108;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAccel800::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA108;
    v6[1] = v4;
    CMMsl::WorkoutRecorderAccel800::~WorkoutRecorderAccel800((CMMsl::WorkoutRecorderAccel800 *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAccel800::formatText(CMMsl::WorkoutRecorderAccel800 *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderAccel800::readFrom(CMMsl::WorkoutRecorderAccel800 *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderAccel800::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::Accel *CMMsl::WorkoutRecorderAccel800::hash_value(CMMsl::WorkoutRecorderAccel800 *this)
{
  uint64_t result = (CMMsl::Accel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderAccel800::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderAveragedALSData::~WorkoutRecorderAveragedALSData(CMMsl::WorkoutRecorderAveragedALSData *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA140;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderAveragedALSData::~WorkoutRecorderAveragedALSData(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(void *this, const CMMsl::WorkoutRecorderAveragedALSData *a2)
{
  *this = off_1003AA140;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderAveragedALSData *CMMsl::WorkoutRecorderAveragedALSData::operator=(const CMMsl::WorkoutRecorderAveragedALSData *a1, const CMMsl::WorkoutRecorderAveragedALSData *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderAveragedALSData::~WorkoutRecorderAveragedALSData((CMMsl::WorkoutRecorderAveragedALSData *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderAveragedALSData *a2, CMMsl::WorkoutRecorderAveragedALSData *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(void *a1, uint64_t a2)
{
  *a1 = off_1003AA140;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA140;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA140;
    v6[1] = v4;
    CMMsl::WorkoutRecorderAveragedALSData::~WorkoutRecorderAveragedALSData((CMMsl::WorkoutRecorderAveragedALSData *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::formatText(CMMsl::WorkoutRecorderAveragedALSData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::readFrom(CMMsl::WorkoutRecorderAveragedALSData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::hash_value(CMMsl::WorkoutRecorderAveragedALSData *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  char v2 = *(unsigned char *)(v1 + 20);
  BOOL v3 = *(double *)(v1 + 8) == 0.0 || (v2 & 1) == 0;
  uint64_t v4 = *(void *)(v1 + 8);
  if (v3) {
    uint64_t v4 = 0;
  }
  int v5 = v2 & 2;
  float v6 = *(float *)(v1 + 16);
  BOOL v7 = v6 == 0.0 || v5 == 0;
  uint64_t v8 = LODWORD(v6);
  if (v7) {
    uint64_t v8 = 0;
  }
  return v8 ^ v4;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderBodyMetrics::~WorkoutRecorderBodyMetrics(CMMsl::WorkoutRecorderBodyMetrics *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA178;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderBodyMetrics::~WorkoutRecorderBodyMetrics(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(void *this, const CMMsl::WorkoutRecorderBodyMetrics *a2)
{
  *this = off_1003AA178;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderBodyMetrics *CMMsl::WorkoutRecorderBodyMetrics::operator=(const CMMsl::WorkoutRecorderBodyMetrics *a1, const CMMsl::WorkoutRecorderBodyMetrics *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderBodyMetrics::~WorkoutRecorderBodyMetrics((CMMsl::WorkoutRecorderBodyMetrics *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderBodyMetrics *a2, CMMsl::WorkoutRecorderBodyMetrics *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(void *a1, uint64_t a2)
{
  *a1 = off_1003AA178;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA178;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA178;
    v6[1] = v4;
    CMMsl::WorkoutRecorderBodyMetrics::~WorkoutRecorderBodyMetrics((CMMsl::WorkoutRecorderBodyMetrics *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::formatText(CMMsl::WorkoutRecorderBodyMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::readFrom(CMMsl::WorkoutRecorderBodyMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::BodyMetrics *CMMsl::WorkoutRecorderBodyMetrics::hash_value(CMMsl::WorkoutRecorderBodyMetrics *this)
{
  uint64_t result = (CMMsl::BodyMetrics *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BodyMetrics *)CMMsl::BodyMetrics::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderCompassCalibration::~WorkoutRecorderCompassCalibration(CMMsl::WorkoutRecorderCompassCalibration *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA1B0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderCompassCalibration::~WorkoutRecorderCompassCalibration(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(void *this, const CMMsl::WorkoutRecorderCompassCalibration *a2)
{
  *this = off_1003AA1B0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderCompassCalibration *CMMsl::WorkoutRecorderCompassCalibration::operator=(const CMMsl::WorkoutRecorderCompassCalibration *a1, const CMMsl::WorkoutRecorderCompassCalibration *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderCompassCalibration::~WorkoutRecorderCompassCalibration((CMMsl::WorkoutRecorderCompassCalibration *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderCompassCalibration *a2, CMMsl::WorkoutRecorderCompassCalibration *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(void *a1, uint64_t a2)
{
  *a1 = off_1003AA1B0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA1B0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA1B0;
    v6[1] = v4;
    CMMsl::WorkoutRecorderCompassCalibration::~WorkoutRecorderCompassCalibration((CMMsl::WorkoutRecorderCompassCalibration *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::formatText(CMMsl::WorkoutRecorderCompassCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::readFrom(CMMsl::WorkoutRecorderCompassCalibration *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::CompassCalibration *CMMsl::WorkoutRecorderCompassCalibration::hash_value(CMMsl::WorkoutRecorderCompassCalibration *this)
{
  uint64_t result = (CMMsl::CompassCalibration *)*((void *)this + 1);
  if (result) {
    return (CMMsl::CompassCalibration *)CMMsl::CompassCalibration::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderElevation::~WorkoutRecorderElevation(CMMsl::WorkoutRecorderElevation *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA1E8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderElevation::~WorkoutRecorderElevation(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(void *this, const CMMsl::WorkoutRecorderElevation *a2)
{
  *this = off_1003AA1E8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderElevation *CMMsl::WorkoutRecorderElevation::operator=(const CMMsl::WorkoutRecorderElevation *a1, const CMMsl::WorkoutRecorderElevation *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderElevation::~WorkoutRecorderElevation((CMMsl::WorkoutRecorderElevation *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderElevation *a2, CMMsl::WorkoutRecorderElevation *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(void *a1, uint64_t a2)
{
  *a1 = off_1003AA1E8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA1E8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderElevation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA1E8;
    v6[1] = v4;
    CMMsl::WorkoutRecorderElevation::~WorkoutRecorderElevation((CMMsl::WorkoutRecorderElevation *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderElevation::formatText(CMMsl::WorkoutRecorderElevation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderElevation::readFrom(CMMsl::WorkoutRecorderElevation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderElevation::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::ElevationChange *CMMsl::WorkoutRecorderElevation::hash_value(CMMsl::WorkoutRecorderElevation *this)
{
  uint64_t result = (CMMsl::ElevationChange *)*((void *)this + 1);
  if (result) {
    return (CMMsl::ElevationChange *)CMMsl::ElevationChange::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderElevation::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderFaceCovered::~WorkoutRecorderFaceCovered(CMMsl::WorkoutRecorderFaceCovered *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA220;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderFaceCovered::~WorkoutRecorderFaceCovered(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(void *this, const CMMsl::WorkoutRecorderFaceCovered *a2)
{
  *this = off_1003AA220;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderFaceCovered *CMMsl::WorkoutRecorderFaceCovered::operator=(const CMMsl::WorkoutRecorderFaceCovered *a1, const CMMsl::WorkoutRecorderFaceCovered *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderFaceCovered::~WorkoutRecorderFaceCovered((CMMsl::WorkoutRecorderFaceCovered *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderFaceCovered *a2, CMMsl::WorkoutRecorderFaceCovered *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(void *a1, uint64_t a2)
{
  *a1 = off_1003AA220;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA220;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA220;
    v6[1] = v4;
    CMMsl::WorkoutRecorderFaceCovered::~WorkoutRecorderFaceCovered((CMMsl::WorkoutRecorderFaceCovered *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::formatText(CMMsl::WorkoutRecorderFaceCovered *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::readFrom(CMMsl::WorkoutRecorderFaceCovered *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::hash_value(CMMsl::WorkoutRecorderFaceCovered *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(v1 + 20);
  BOOL v3 = *(double *)(v1 + 8) == 0.0 || (v2 & 1) == 0;
  uint64_t v4 = *(void *)(v1 + 8);
  if (v3) {
    uint64_t v4 = 0;
  }
  return v4 ^ (*(unsigned char *)(v1 + 16) & (v2 << 30 >> 31));
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderFitnessMachineData::~WorkoutRecorderFitnessMachineData(CMMsl::WorkoutRecorderFitnessMachineData *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA258;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderFitnessMachineData::~WorkoutRecorderFitnessMachineData(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(void *this, const CMMsl::WorkoutRecorderFitnessMachineData *a2)
{
  *this = off_1003AA258;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderFitnessMachineData *CMMsl::WorkoutRecorderFitnessMachineData::operator=(const CMMsl::WorkoutRecorderFitnessMachineData *a1, const CMMsl::WorkoutRecorderFitnessMachineData *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderFitnessMachineData::~WorkoutRecorderFitnessMachineData((CMMsl::WorkoutRecorderFitnessMachineData *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderFitnessMachineData *a2, CMMsl::WorkoutRecorderFitnessMachineData *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(void *a1, uint64_t a2)
{
  *a1 = off_1003AA258;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA258;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA258;
    v6[1] = v4;
    CMMsl::WorkoutRecorderFitnessMachineData::~WorkoutRecorderFitnessMachineData((CMMsl::WorkoutRecorderFitnessMachineData *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::formatText(CMMsl::WorkoutRecorderFitnessMachineData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::readFrom(CMMsl::WorkoutRecorderFitnessMachineData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::FitnessMachineData *CMMsl::WorkoutRecorderFitnessMachineData::hash_value(CMMsl::WorkoutRecorderFitnessMachineData *this)
{
  uint64_t result = (CMMsl::FitnessMachineData *)*((void *)this + 1);
  if (result) {
    return (CMMsl::FitnessMachineData *)CMMsl::FitnessMachineData::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderHealthKitInfo::~WorkoutRecorderHealthKitInfo(CMMsl::WorkoutRecorderHealthKitInfo *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::WorkoutRecorderHealthKitInfo::WorkoutRecorderHealthKitInfo(CMMsl::WorkoutRecorderHealthKitInfo *this, const CMMsl::WorkoutRecorderHealthKitInfo *a2)
{
  *(void *)this = off_1003AA290;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    char v3 = 4;
    *((unsigned char *)this + 28) = 4;
    *((_DWORD *)this + 6) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 28))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 28) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 28) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::operator=(uint64_t a1, const CMMsl::WorkoutRecorderHealthKitInfo *a2)
{
  if ((const CMMsl::WorkoutRecorderHealthKitInfo *)a1 != a2)
  {
    CMMsl::WorkoutRecorderHealthKitInfo::WorkoutRecorderHealthKitInfo((CMMsl::WorkoutRecorderHealthKitInfo *)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WorkoutRecorderHealthKitInfo *a2, CMMsl::WorkoutRecorderHealthKitInfo *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::WorkoutRecorderHealthKitInfo::WorkoutRecorderHealthKitInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003AA290;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003AA290;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = off_1003AA290;
    long long v3 = *(_OWORD *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    long long v5 = *(_OWORD *)(a1 + 8);
    *(void *)(a1 + 24) = v4;
    *(_OWORD *)(a1 + 8) = v3;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::formatText(CMMsl::WorkoutRecorderHealthKitInfo *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "restingHeartRate", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "walkingHeartRateAverage", *((double *)this + 2));
  if ((*((unsigned char *)this + 28) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "workoutActivityType", *((_DWORD *)this + 6));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::readFrom(CMMsl::WorkoutRecorderHealthKitInfo *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0;
          goto LABEL_20;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((unsigned char *)this + 28) |= 2u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_47:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if (v20 != 2)
      {
        if (v20 == 1)
        {
          *((unsigned char *)this + 28) |= 4u;
          unint64_t v21 = *((void *)a2 + 1);
          unint64_t v2 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v25 = 0;
            if (v2 <= v21) {
              unint64_t v2 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v2 == v21)
              {
                LODWORD(v25) = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_52;
              }
              unint64_t v30 = v21++;
              char v31 = *(unsigned char *)(v22 + v30);
              *((void *)a2 + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0) {
                break;
              }
              v28 += 7;
              BOOL v14 = v29++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_51;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v25) = 0;
            }
LABEL_51:
            unint64_t v2 = v30 + 1;
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              unint64_t v2 = v21 + 1;
              *((void *)a2 + 1) = v21 + 1;
              char v26 = *(unsigned char *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              unint64_t v21 = v2;
              BOOL v14 = v24++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                break;
              }
            }
          }
LABEL_52:
          *((_DWORD *)this + 6) = v25;
        }
        else
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
        }
        goto LABEL_53;
      }
      *((unsigned char *)this + 28) |= 1u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      }
    }
    *((unsigned char *)a2 + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
    if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 24), 1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 3u);
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::hash_value(CMMsl::WorkoutRecorderHealthKitInfo *this)
{
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 6);
    if (*((unsigned char *)this + 28))
    {
LABEL_3:
      double v2 = *((double *)this + 1);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 28) & 2) != 0) {
        goto LABEL_6;
      }
LABEL_11:
      double v3 = 0.0;
      return *(void *)&v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 28)) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3;
}

void CMMsl::WorkoutRecorderHeartRate::~WorkoutRecorderHeartRate(CMMsl::WorkoutRecorderHeartRate *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA2C8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderHeartRate::~WorkoutRecorderHeartRate(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(void *this, const CMMsl::WorkoutRecorderHeartRate *a2)
{
  *this = off_1003AA2C8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderHeartRate *CMMsl::WorkoutRecorderHeartRate::operator=(const CMMsl::WorkoutRecorderHeartRate *a1, const CMMsl::WorkoutRecorderHeartRate *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderHeartRate::~WorkoutRecorderHeartRate((CMMsl::WorkoutRecorderHeartRate *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderHeartRate *a2, CMMsl::WorkoutRecorderHeartRate *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(void *a1, uint64_t a2)
{
  *a1 = off_1003AA2C8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA2C8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderHeartRate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA2C8;
    v6[1] = v4;
    CMMsl::WorkoutRecorderHeartRate::~WorkoutRecorderHeartRate((CMMsl::WorkoutRecorderHeartRate *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderHeartRate::formatText(CMMsl::WorkoutRecorderHeartRate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderHeartRate::readFrom(CMMsl::WorkoutRecorderHeartRate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderHeartRate::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::OnsetHeartRateData *CMMsl::WorkoutRecorderHeartRate::hash_value(CMMsl::WorkoutRecorderHeartRate *this)
{
  uint64_t result = (CMMsl::OnsetHeartRateData *)*((void *)this + 1);
  if (result) {
    return (CMMsl::OnsetHeartRateData *)CMMsl::OnsetHeartRateData::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderHeartRate::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderMagnetometer::~WorkoutRecorderMagnetometer(CMMsl::WorkoutRecorderMagnetometer *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA300;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderMagnetometer::~WorkoutRecorderMagnetometer(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(void *this, const CMMsl::WorkoutRecorderMagnetometer *a2)
{
  *this = off_1003AA300;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderMagnetometer *CMMsl::WorkoutRecorderMagnetometer::operator=(const CMMsl::WorkoutRecorderMagnetometer *a1, const CMMsl::WorkoutRecorderMagnetometer *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderMagnetometer::~WorkoutRecorderMagnetometer((CMMsl::WorkoutRecorderMagnetometer *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderMagnetometer *a2, CMMsl::WorkoutRecorderMagnetometer *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(void *a1, uint64_t a2)
{
  *a1 = off_1003AA300;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA300;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA300;
    v6[1] = v4;
    CMMsl::WorkoutRecorderMagnetometer::~WorkoutRecorderMagnetometer((CMMsl::WorkoutRecorderMagnetometer *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::formatText(CMMsl::WorkoutRecorderMagnetometer *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::readFrom(CMMsl::WorkoutRecorderMagnetometer *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::Magnetometer *CMMsl::WorkoutRecorderMagnetometer::hash_value(CMMsl::WorkoutRecorderMagnetometer *this)
{
  uint64_t result = (CMMsl::Magnetometer *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Magnetometer *)CMMsl::Magnetometer::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderOdometer::~WorkoutRecorderOdometer(CMMsl::WorkoutRecorderOdometer *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA338;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderOdometer::~WorkoutRecorderOdometer(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(void *this, const CMMsl::WorkoutRecorderOdometer *a2)
{
  *this = off_1003AA338;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderOdometer *CMMsl::WorkoutRecorderOdometer::operator=(const CMMsl::WorkoutRecorderOdometer *a1, const CMMsl::WorkoutRecorderOdometer *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderOdometer::~WorkoutRecorderOdometer((CMMsl::WorkoutRecorderOdometer *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderOdometer *a2, CMMsl::WorkoutRecorderOdometer *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(void *a1, uint64_t a2)
{
  *a1 = off_1003AA338;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA338;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderOdometer::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA338;
    v6[1] = v4;
    CMMsl::WorkoutRecorderOdometer::~WorkoutRecorderOdometer((CMMsl::WorkoutRecorderOdometer *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderOdometer::formatText(CMMsl::WorkoutRecorderOdometer *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderOdometer::readFrom(CMMsl::WorkoutRecorderOdometer *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderOdometer::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::OdometerWithAltitude *CMMsl::WorkoutRecorderOdometer::hash_value(CMMsl::WorkoutRecorderOdometer *this)
{
  uint64_t result = (CMMsl::OdometerWithAltitude *)*((void *)this + 1);
  if (result) {
    return (CMMsl::OdometerWithAltitude *)CMMsl::OdometerWithAltitude::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderOdometer::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderPressure::~WorkoutRecorderPressure(CMMsl::WorkoutRecorderPressure *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA370;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderPressure::~WorkoutRecorderPressure(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(void *this, const CMMsl::WorkoutRecorderPressure *a2)
{
  *this = off_1003AA370;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderPressure *CMMsl::WorkoutRecorderPressure::operator=(const CMMsl::WorkoutRecorderPressure *a1, const CMMsl::WorkoutRecorderPressure *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderPressure::~WorkoutRecorderPressure((CMMsl::WorkoutRecorderPressure *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderPressure *a2, CMMsl::WorkoutRecorderPressure *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(void *a1, uint64_t a2)
{
  *a1 = off_1003AA370;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA370;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderPressure::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA370;
    v6[1] = v4;
    CMMsl::WorkoutRecorderPressure::~WorkoutRecorderPressure((CMMsl::WorkoutRecorderPressure *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderPressure::formatText(CMMsl::WorkoutRecorderPressure *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderPressure::readFrom(CMMsl::WorkoutRecorderPressure *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderPressure::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::Pressure *CMMsl::WorkoutRecorderPressure::hash_value(CMMsl::WorkoutRecorderPressure *this)
{
  uint64_t result = (CMMsl::Pressure *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderPressure::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderRotationRate::~WorkoutRecorderRotationRate(CMMsl::WorkoutRecorderRotationRate *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA3A8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderRotationRate::~WorkoutRecorderRotationRate(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(void *this, const CMMsl::WorkoutRecorderRotationRate *a2)
{
  *this = off_1003AA3A8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderRotationRate *CMMsl::WorkoutRecorderRotationRate::operator=(const CMMsl::WorkoutRecorderRotationRate *a1, const CMMsl::WorkoutRecorderRotationRate *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderRotationRate::~WorkoutRecorderRotationRate((CMMsl::WorkoutRecorderRotationRate *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderRotationRate *a2, CMMsl::WorkoutRecorderRotationRate *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(void *a1, uint64_t a2)
{
  *a1 = off_1003AA3A8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA3A8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderRotationRate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA3A8;
    v6[1] = v4;
    CMMsl::WorkoutRecorderRotationRate::~WorkoutRecorderRotationRate((CMMsl::WorkoutRecorderRotationRate *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderRotationRate::formatText(CMMsl::WorkoutRecorderRotationRate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderRotationRate::readFrom(CMMsl::WorkoutRecorderRotationRate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderRotationRate::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::RotationRate *CMMsl::WorkoutRecorderRotationRate::hash_value(CMMsl::WorkoutRecorderRotationRate *this)
{
  uint64_t result = (CMMsl::RotationRate *)*((void *)this + 1);
  if (result) {
    return (CMMsl::RotationRate *)CMMsl::RotationRate::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderRotationRate::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderWatchOnWristStatus::~WorkoutRecorderWatchOnWristStatus(CMMsl::WorkoutRecorderWatchOnWristStatus *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA3E0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderWatchOnWristStatus::~WorkoutRecorderWatchOnWristStatus(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(void *this, const CMMsl::WorkoutRecorderWatchOnWristStatus *a2)
{
  *this = off_1003AA3E0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderWatchOnWristStatus *CMMsl::WorkoutRecorderWatchOnWristStatus::operator=(const CMMsl::WorkoutRecorderWatchOnWristStatus *a1, const CMMsl::WorkoutRecorderWatchOnWristStatus *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderWatchOnWristStatus::~WorkoutRecorderWatchOnWristStatus((CMMsl::WorkoutRecorderWatchOnWristStatus *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWatchOnWristStatus *a2, CMMsl::WorkoutRecorderWatchOnWristStatus *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(void *a1, uint64_t a2)
{
  *a1 = off_1003AA3E0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA3E0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA3E0;
    v6[1] = v4;
    CMMsl::WorkoutRecorderWatchOnWristStatus::~WorkoutRecorderWatchOnWristStatus((CMMsl::WorkoutRecorderWatchOnWristStatus *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::formatText(CMMsl::WorkoutRecorderWatchOnWristStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::readFrom(CMMsl::WorkoutRecorderWatchOnWristStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::WatchOnWristState *CMMsl::WorkoutRecorderWatchOnWristStatus::hash_value(CMMsl::WorkoutRecorderWatchOnWristStatus *this)
{
  uint64_t result = (CMMsl::WatchOnWristState *)*((void *)this + 1);
  if (result) {
    return (CMMsl::WatchOnWristState *)CMMsl::WatchOnWristState::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderWatchOrientationSettings::~WorkoutRecorderWatchOrientationSettings(CMMsl::WorkoutRecorderWatchOrientationSettings *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA418;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderWatchOrientationSettings::~WorkoutRecorderWatchOrientationSettings(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(void *this, const CMMsl::WorkoutRecorderWatchOrientationSettings *a2)
{
  *this = off_1003AA418;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderWatchOrientationSettings *CMMsl::WorkoutRecorderWatchOrientationSettings::operator=(const CMMsl::WorkoutRecorderWatchOrientationSettings *a1, const CMMsl::WorkoutRecorderWatchOrientationSettings *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderWatchOrientationSettings::~WorkoutRecorderWatchOrientationSettings((CMMsl::WorkoutRecorderWatchOrientationSettings *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWatchOrientationSettings *a2, CMMsl::WorkoutRecorderWatchOrientationSettings *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(void *a1, uint64_t a2)
{
  *a1 = off_1003AA418;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA418;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA418;
    v6[1] = v4;
    CMMsl::WorkoutRecorderWatchOrientationSettings::~WorkoutRecorderWatchOrientationSettings((CMMsl::WorkoutRecorderWatchOrientationSettings *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::formatText(CMMsl::WorkoutRecorderWatchOrientationSettings *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::readFrom(CMMsl::WorkoutRecorderWatchOrientationSettings *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::hash_value(CMMsl::WorkoutRecorderWatchOrientationSettings *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  char v2 = *(unsigned char *)(v1 + 16);
  uint64_t v5 = v1 + 8;
  uint64_t v3 = *(unsigned int *)(v1 + 8);
  uint64_t v4 = *(unsigned int *)(v5 + 4);
  if ((v2 & 2) == 0) {
    uint64_t v4 = 0;
  }
  if ((v2 & 1) == 0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v4;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderWifiScanResults::~WorkoutRecorderWifiScanResults(CMMsl::WorkoutRecorderWifiScanResults *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA450;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderWifiScanResults::~WorkoutRecorderWifiScanResults(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(void *this, const CMMsl::WorkoutRecorderWifiScanResults *a2)
{
  *this = off_1003AA450;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderWifiScanResults *CMMsl::WorkoutRecorderWifiScanResults::operator=(const CMMsl::WorkoutRecorderWifiScanResults *a1, const CMMsl::WorkoutRecorderWifiScanResults *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderWifiScanResults::~WorkoutRecorderWifiScanResults((CMMsl::WorkoutRecorderWifiScanResults *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWifiScanResults *a2, CMMsl::WorkoutRecorderWifiScanResults *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(void *a1, uint64_t a2)
{
  *a1 = off_1003AA450;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA450;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA450;
    v6[1] = v4;
    CMMsl::WorkoutRecorderWifiScanResults::~WorkoutRecorderWifiScanResults((CMMsl::WorkoutRecorderWifiScanResults *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::formatText(CMMsl::WorkoutRecorderWifiScanResults *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::readFrom(CMMsl::WorkoutRecorderWifiScanResults *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::hash_value(CMMsl::WorkoutRecorderWifiScanResults *this)
{
  return sub_10015C0B8((uint64_t)&v2, (uint64_t *)this + 1);
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderWorkoutEvent::~WorkoutRecorderWorkoutEvent(CMMsl::WorkoutRecorderWorkoutEvent *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA488;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderWorkoutEvent::~WorkoutRecorderWorkoutEvent(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(void *this, const CMMsl::WorkoutRecorderWorkoutEvent *a2)
{
  *this = off_1003AA488;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderWorkoutEvent *CMMsl::WorkoutRecorderWorkoutEvent::operator=(const CMMsl::WorkoutRecorderWorkoutEvent *a1, const CMMsl::WorkoutRecorderWorkoutEvent *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderWorkoutEvent::~WorkoutRecorderWorkoutEvent((CMMsl::WorkoutRecorderWorkoutEvent *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWorkoutEvent *a2, CMMsl::WorkoutRecorderWorkoutEvent *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(void *a1, uint64_t a2)
{
  *a1 = off_1003AA488;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA488;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA488;
    v6[1] = v4;
    CMMsl::WorkoutRecorderWorkoutEvent::~WorkoutRecorderWorkoutEvent((CMMsl::WorkoutRecorderWorkoutEvent *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::formatText(CMMsl::WorkoutRecorderWorkoutEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::readFrom(CMMsl::WorkoutRecorderWorkoutEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::WorkoutEvent *CMMsl::WorkoutRecorderWorkoutEvent::hash_value(CMMsl::WorkoutRecorderWorkoutEvent *this)
{
  uint64_t result = (CMMsl::WorkoutEvent *)*((void *)this + 1);
  if (result) {
    return (CMMsl::WorkoutEvent *)CMMsl::WorkoutEvent::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutRecorderWorkoutSessionPriors::~WorkoutRecorderWorkoutSessionPriors(CMMsl::WorkoutRecorderWorkoutSessionPriors *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA4C0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::WorkoutRecorderWorkoutSessionPriors::~WorkoutRecorderWorkoutSessionPriors(this);

  operator delete();
}

void *CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(void *this, const CMMsl::WorkoutRecorderWorkoutSessionPriors *a2)
{
  *this = off_1003AA4C0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::WorkoutRecorderWorkoutSessionPriors *CMMsl::WorkoutRecorderWorkoutSessionPriors::operator=(const CMMsl::WorkoutRecorderWorkoutSessionPriors *a1, const CMMsl::WorkoutRecorderWorkoutSessionPriors *a2)
{
  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::WorkoutRecorderWorkoutSessionPriors::~WorkoutRecorderWorkoutSessionPriors((CMMsl::WorkoutRecorderWorkoutSessionPriors *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWorkoutSessionPriors *a2, CMMsl::WorkoutRecorderWorkoutSessionPriors *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(void *a1, uint64_t a2)
{
  *a1 = off_1003AA4C0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA4C0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA4C0;
    v6[1] = v4;
    CMMsl::WorkoutRecorderWorkoutSessionPriors::~WorkoutRecorderWorkoutSessionPriors((CMMsl::WorkoutRecorderWorkoutSessionPriors *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::formatText(CMMsl::WorkoutRecorderWorkoutSessionPriors *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::readFrom(CMMsl::WorkoutRecorderWorkoutSessionPriors *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::hash_value(CMMsl::WorkoutRecorderWorkoutSessionPriors *this)
{
  return sub_10015C27C((uint64_t)&v2, (uint64_t *)this + 1);
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::WorkoutSessionPriors::~WorkoutSessionPriors(CMMsl::WorkoutSessionPriors *this)
{
  *(void *)this = off_1003AA4F8;
  char v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003AA4F8;
  char v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003AA4F8;
  char v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

void *CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(void *this, const CMMsl::WorkoutSessionPriors *a2)
{
  this[1] = 0;
  *this = off_1003AA4F8;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_10026F114();
  }
  return this;
}

void sub_10026F114()
{
}

void sub_10026F218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::WorkoutSessionPriors::operator=(uint64_t a1, const CMMsl::WorkoutSessionPriors *a2)
{
  if ((const CMMsl::WorkoutSessionPriors *)a1 != a2)
  {
    CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = off_1003AA4F8;
    unsigned int v9 = (void **)&v7;
    sub_100274A84(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::WorkoutSessionPriors *a2, CMMsl::WorkoutSessionPriors *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003AA4F8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = off_1003AA4F8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::WorkoutSessionPriors::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v9 = off_1003AA4F8;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_100274B44((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    char v12 = (void **)&v10;
    unsigned int v9 = off_1003AA4F8;
    sub_100274A84(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WorkoutSessionPriors::formatText(CMMsl::WorkoutSessionPriors *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "workoutPriors");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutSessionPriors::readFrom(CMMsl::WorkoutSessionPriors *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        sub_10026F718();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_10026F718()
{
}

void sub_10026F830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::WorkoutSessionPriors::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (int i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 2u))
    long long v5 = *v2++;
  return this;
}

BOOL sub_10026F8C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::WorkoutPriorInformation::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::WorkoutSessionPriors::hash_value(CMMsl::WorkoutSessionPriors *this)
{
  uint64_t v1 = (CMMsl::WorkoutPriorInformation **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::WorkoutPriorInformation **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::WorkoutPriorInformation::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::ZeroVelocityCorrection::~ZeroVelocityCorrection(CMMsl::ZeroVelocityCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003AA530;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ZeroVelocityCorrection::~ZeroVelocityCorrection(this);

  operator delete();
}

void *CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(void *this, const CMMsl::ZeroVelocityCorrection *a2)
{
  *this = off_1003AA530;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::ZeroVelocityCorrection *CMMsl::ZeroVelocityCorrection::operator=(const CMMsl::ZeroVelocityCorrection *a1, const CMMsl::ZeroVelocityCorrection *a2)
{
  if (a1 != a2)
  {
    CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::ZeroVelocityCorrection::~ZeroVelocityCorrection((CMMsl::ZeroVelocityCorrection *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ZeroVelocityCorrection *a2, CMMsl::ZeroVelocityCorrection *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(void *a1, uint64_t a2)
{
  *a1 = off_1003AA530;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003AA530;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::ZeroVelocityCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003AA530;
    v6[1] = v4;
    CMMsl::ZeroVelocityCorrection::~ZeroVelocityCorrection((CMMsl::ZeroVelocityCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::ZeroVelocityCorrection::formatText(CMMsl::ZeroVelocityCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ZeroVelocityCorrection::readFrom(CMMsl::ZeroVelocityCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ZeroVelocityCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::DeviceMotionCorrection *CMMsl::ZeroVelocityCorrection::hash_value(CMMsl::ZeroVelocityCorrection *this)
{
  uint64_t result = (CMMsl::DeviceMotionCorrection *)*((void *)this + 1);
  if (result) {
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::ZeroVelocityCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

CMMsl::Writer *CMMsl::Writer::Writer(CMMsl::Writer *this)
{
  *(void *)this = 0;
  unint64_t v2 = dispatch_queue_create("CMMsl.Writer", 0);
  *((void *)this + 1) = v2;
  unint64_t v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v2);
  *((void *)this + 2) = v3;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 300;
  *((_DWORD *)this + 10) = -1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1002701AC;
  handler[3] = &unk_1003AA558;
  handler[4] = this;
  dispatch_source_set_event_handler(v3, handler);
  dispatch_source_set_timer(*((dispatch_source_t *)this + 2), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_resume(*((dispatch_object_t *)this + 2));
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  deflateInit_((z_streamp)((char *)this + 80), -1, "1.2.12", 112);
  return this;
}

void sub_100270188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002701AC(uint64_t a1)
{
}

void CMMsl::Writer::closeSensRecord(CMMsl::Writer *this)
{
  uint64_t v1 = (char *)this + 56;
  if (*((void *)this + 7))
  {
    unint64_t v3 = (z_stream *)((char *)this + 80);
    while (1)
    {
      int v4 = deflate(v3, 4);
      if (v4) {
        break;
      }
      CMMsl::Writer::growZlibStream((void **)this);
    }
    if (v4 == 1)
    {
      uint64_t v5 = *((void *)this + 15);
      uint64_t v6 = v5 + 28;
      size_t v7 = (v5 + 35) & 0xFFFFFFFFFFFFFFF8;
      *(_DWORD *)(*((void *)this + 7) + 12) = v5 + 12;
      if (v5 + 28 < v7)
      {
        do
          *(unsigned char *)(*(void *)v1 + v6++) = 0;
        while (v7 != v6);
      }
      char v8 = (const void *)*((void *)this + 7);
      if (*(void *)this)
      {
        (*(void (**)(void, const void *, size_t))(**(void **)this + 24))(*(void *)this, v8, v7);
        free(*(void **)v1);
      }
      else
      {
        unsigned int v9 = *((void *)this + 1);
        destructor[0] = _NSConcreteStackBlock;
        destructor[1] = 3221225472;
        destructor[2] = sub_100270D08;
        destructor[3] = &unk_1003AA558;
        destructor[4] = v8;
        unint64_t v10 = dispatch_data_create(v8, v7, v9, destructor);
        dispatch_io_write(*((dispatch_io_t *)this + 3), *((void *)this + 6), v10, *((dispatch_queue_t *)this + 1), &stru_1003AA628);
      }
      *((void *)this + 6) += v7;
      *((void *)v1 + 1) = 0;
      *((void *)v1 + 2) = 0;
      *(void *)uint64_t v1 = 0;
      deflateReset(v3);
      dispatch_source_set_timer(*((dispatch_source_t *)this + 2), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(1000000000 * *((void *)this + 4)) >> 1);
    }
    else
    {
      fprintf(__stderrp, "zstream status? Msl %d\n", v4);
    }
  }
}

void CMMsl::Writer::setFlushTimeoutSeconds(CMMsl::Writer *this, uint64_t a2)
{
  unint64_t v2 = *((void *)this + 1);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002703F4;
  v3[3] = &unk_1003AA578;
  v3[4] = this;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

uint64_t sub_1002703F4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_DWORD *)(v1 + 40) != -1) {
    sub_1002762E0();
  }
  *(void *)(v1 + 32) = *(void *)(result + 40);
  return result;
}

void CMMsl::Writer::~Writer(CMMsl::Writer *this)
{
  if (!*((void *)this + 3))
  {
    int v2 = *((_DWORD *)this + 10);
    if ((v2 & 0x80000000) == 0) {
      close(v2);
    }
  }
  free(*((void **)this + 7));
  deflateEnd((z_streamp)((char *)this + 80));
}

uint64_t CMMsl::Writer::open(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = 0;
  unsigned int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  unint64_t v3 = *(NSObject **)(a1 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100270540;
  v6[3] = &unk_1003AA5C0;
  v6[5] = a1;
  v6[6] = a2;
  int v7 = a3;
  v6[4] = &v8;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_100270540(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = open_dprotected_np(*(const char **)(a1 + 48), 16777730, *(_DWORD *)(a1 + 56), 0, 438);
  *(_DWORD *)(v2 + 40) = v3;
  if (v3 < 0)
  {
    int v7 = __stderrp;
    uint64_t v8 = "Cannot open Msl file\n";
    size_t v9 = 21;
  }
  else
  {
    off_t v4 = lseek(v3, 0, 2);
    if (v4 < 0)
    {
      int v7 = __stderrp;
      uint64_t v8 = "Cannot seek to end of Msl file\n";
      size_t v9 = 31;
    }
    else
    {
      off_t v5 = v4;
      if ((lseek(*(_DWORD *)(v2 + 40), 0, 0) & 0x8000000000000000) == 0)
      {
        if (v5)
        {
          uint64_t __buf = 0;
          if (pread(*(_DWORD *)(v2 + 40), &__buf, 8uLL, 0) == 8)
          {
            if (__buf == 0xE020C5BE006C536DLL)
            {
              unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
LABEL_15:
              *(void *)(v2 + 48) = v6;
              dispatch_fd_t v10 = *(_DWORD *)(v2 + 40);
              char v11 = *(NSObject **)(v2 + 8);
              cleanup_handler[0] = _NSConcreteStackBlock;
              cleanup_handler[1] = 3221225472;
              cleanup_handler[2] = sub_100270780;
              cleanup_handler[3] = &unk_1003AA598;
              dispatch_fd_t v18 = v10;
              dispatch_io_t v12 = dispatch_io_create(1uLL, v10, v11, cleanup_handler);
              char v13 = *(void **)(v2 + 24);
              *(void *)(v2 + 24) = v12;

              if (*(void *)(v2 + 24))
              {
                *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
                return;
              }
              char v14 = __stderrp;
              unsigned int v15 = "Cannot create dispatch_io for Msl file\n";
              size_t v16 = 39;
              goto LABEL_20;
            }
            char v14 = __stderrp;
            unsigned int v15 = "Bad signature in Msl file\n";
            size_t v16 = 26;
          }
          else
          {
            char v14 = __stderrp;
            unsigned int v15 = "Short signature in Msl file\n";
            size_t v16 = 28;
          }
LABEL_20:
          fwrite(v15, v16, 1uLL, v14);
          return;
        }
        unint64_t v6 = 8;
        pwrite(*(_DWORD *)(v2 + 40), &unk_10033A640, 8uLL, 0);
        goto LABEL_15;
      }
      int v7 = __stderrp;
      uint64_t v8 = "Cannot seek to start of Msl file\n";
      size_t v9 = 33;
    }
  }

  fwrite(v8, v9, 1uLL, v7);
}

uint64_t sub_100270780(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t CMMsl::Writer::open(void *a1, uint64_t a2, char a3)
{
  *a1 = a2;
  if ((a3 & 1) == 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 24))(a2, &unk_10033A640, 8);
    a1[6] = 8;
  }
  return 1;
}

void CMMsl::Writer::writeItem(CMMsl::Writer *this, const CMMsl::Item *a2)
{
  uint64_t v2 = *((void *)this + 1);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100270868;
  v3[3] = &unk_1003AA578;
  v3[4] = this;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_100270868(uint64_t a1)
{
  uint64_t v2 = *(CMMsl::Writer **)(a1 + 32);
  PB::Writer::Writer((PB::Writer *)&v5);
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), &v5);
  uint64_t v3 = *((void *)v2 + 7);
  if (!v3)
  {
    CMMsl::Writer::openSensRecord(v2);
    uint64_t v3 = *((void *)v2 + 7);
  }
  ++*(_DWORD *)(v3 + 16);
  *(_DWORD *)off_t v4 = v5 - v6;
  CMMsl::Writer::pumpZlib((void **)v2, v4, 4);
  CMMsl::Writer::pumpZlib((void **)v2, v6, v5 - v6);
  if (!*((void *)v2 + 9)) {
    CMMsl::Writer::closeSensRecord(v2);
  }
  PB::Writer::~Writer((PB::Writer *)&v5);
}

void sub_100270930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void CMMsl::Writer::openSensRecord(CMMsl::Writer *this)
{
  *((void *)this + 7) = malloc_type_malloc(0x8000uLL, 0x4A3B362DuLL);
  *((_OWORD *)this + 4) = xmmword_10033A610;
  gettimeofday(&v7, 0);
  uint64_t v2 = *((void *)this + 7);
  *(void *)uint64_t v2 = 0x5979AAB3D5E07959;
  *(void *)(v2 + 8) = 1936614771;
  int tv_sec = v7.tv_sec;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = tv_sec;
  *(_DWORD *)(v2 + 24) = 1000 * v7.tv_usec;
  *((void *)this + 13) = v2 + 28;
  *((_DWORD *)this + 28) = *((_DWORD *)this + 16) - 28;
  unint64_t v4 = 1000000000 * *((void *)this + 4);
  uint64_t v5 = *((void *)this + 2);
  dispatch_time_t v6 = dispatch_time(0, v4);

  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, v4 >> 1);
}

void **CMMsl::Writer::pumpZlib(void **this, const unsigned __int8 *a2, int a3)
{
  this[10] = (void *)a2;
  uint64_t v3 = (z_stream *)(this + 10);
  *((_DWORD *)this + 22) = a3;
  if (a3)
  {
    uint64_t v4 = (uint64_t)this;
    do
    {
      this = (void **)deflate(v3, 0);
      if (!this && !*(_DWORD *)(v4 + 112)) {
        this = CMMsl::Writer::growZlibStream((void **)v4);
      }
    }
    while (*(_DWORD *)(v4 + 88));
  }
  return this;
}

void CMMsl::Writer::flush(CMMsl::Writer *this)
{
  uint64_t v1 = *((void *)this + 1);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100270AF8;
  block[3] = &unk_1003AA558;
  block[4] = this;
  dispatch_sync(v1, block);
}

void sub_100270AF8(uint64_t a1)
{
}

void CMMsl::Writer::sync(CMMsl::Writer *this)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  uint64_t v3 = *((void *)this + 1);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100270B9C;
  v5[3] = &unk_1003AA5E8;
  dispatch_semaphore_t v6 = v2;
  timeval v7 = this;
  uint64_t v4 = v2;
  dispatch_sync(v3, v5);
}

void sub_100270B9C(uint64_t a1)
{
  dispatch_semaphore_t v2 = *(CMMsl::Writer **)(a1 + 40);
  CMMsl::Writer::closeSensRecord(v2);
  uint64_t v3 = *((void *)v2 + 3);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100270C50;
  v4[3] = &unk_1003AA5E8;
  dispatch_semaphore_t v6 = v2;
  id v5 = *(id *)(a1 + 32);
  dispatch_io_barrier(v3, v4);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
}

intptr_t sub_100270C50(uint64_t a1)
{
  fsync(*(_DWORD *)(*(void *)(a1 + 40) + 40));
  dispatch_semaphore_t v2 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v2);
}

void **CMMsl::Writer::growZlibStream(void **this)
{
  uint64_t v1 = this;
  uint64_t v3 = this[8];
  dispatch_semaphore_t v2 = (char *)this[9];
  if (v2)
  {
    *((_DWORD *)this + 28) += v2;
    this[8] = &v2[(void)v3];
    this[9] = 0;
  }
  else
  {
    this[8] = (void *)(2 * (void)v3);
    this = (void **)malloc_type_realloc(this[7], 2 * (void)v3, 0x59C50B5uLL);
    v1[7] = this;
    uint64_t v4 = (char *)v1[15];
    v1[13] = &v4[(void)this + 28];
    *((_DWORD *)v1 + 28) = *((_DWORD *)v1 + 16) - v4;
  }
  return this;
}

void sub_100270D08(uint64_t a1)
{
}

void sub_100270D10(id a1, BOOL a2, OS_dispatch_data *a3, int a4)
{
  if (a4 || !a2)
  {
    uint64_t v4 = __stderrp;
    id v5 = strerror(a4);
    fprintf(v4, "Msl dispatch io write error %s\n", v5);
  }
}

uint64_t CMMsl::Writer::totalSizeApproximatelyWritten(CMMsl::Writer *this)
{
  return *((void *)this + 15) + *((void *)this + 6);
}

void sub_100271180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_10027124C((uint64_t)&a17);

  _Unwind_Resume(a1);
}

uint64_t sub_10027124C(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_100271428(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_100271A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100271C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100271E00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_1002720A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100272304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_1002724D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_1002728AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100272A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100272BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100272D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100272F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100273108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_1002734DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100273688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100273CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_10027406C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CMMsl::Item::~Item((CMMsl::Item *)&a9);

  _Unwind_Resume(a1);
}

void sub_100274218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_10027438C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_10027459C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100274630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100274908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

__n128 sub_100274A30(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_100274A84(void ***a1)
{
  dispatch_semaphore_t v2 = *a1;
  if (*v2)
  {
    sub_100274AD8(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_100274AD8(void *result)
{
  uint64_t v1 = result;
  dispatch_semaphore_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    __n128 result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void sub_100274B44(void **a1)
{
  if (*a1)
  {
    sub_100274AD8(a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_100274B80(id a1)
{
  qword_1003DB788 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "MSLDataRecording");

  _objc_release_x1();
}

void ***sub_100274BC4(void ***result, void **a2)
{
  dispatch_semaphore_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    free(*v2);
    operator delete();
  }
  return result;
}

uint64_t sub_100274C24(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100274C9C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100274C9C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100274D34((uint64_t)v13);
  return v11;
}

uint64_t sub_100274D34(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

void *sub_100274D6C(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  dispatch_semaphore_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_100274DD4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_100274E0C(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_100274E80(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100274EF8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100274EF8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100274F90((uint64_t)v13);
  return v11;
}

uint64_t sub_100274F90(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_100274FC8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100275040((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100275040(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1002750D8((uint64_t)v13);
  return v11;
}

uint64_t sub_1002750D8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_100275110(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100275188((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100275188(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100275220((uint64_t)v13);
  return v11;
}

uint64_t sub_100275220(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_100275258(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1002752D0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1002752D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100275368((uint64_t)v13);
  return v11;
}

uint64_t sub_100275368(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_1002753A0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100275418((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100275418(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1002754B0((uint64_t)v13);
  return v11;
}

uint64_t sub_1002754B0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_1002754E8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100275560((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100275560(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1002755F8((uint64_t)v13);
  return v11;
}

uint64_t sub_1002755F8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_100275630(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1002756A8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1002756A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100275740((uint64_t)v13);
  return v11;
}

uint64_t sub_100275740(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_100275778(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1002757F0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1002757F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100275888((uint64_t)v13);
  return v11;
}

uint64_t sub_100275888(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_1002758C0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100275938((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100275938(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1002759D0((uint64_t)v13);
  return v11;
}

uint64_t sub_1002759D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_100275A08(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100275A80((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100275A80(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100275B18((uint64_t)v13);
  return v11;
}

uint64_t sub_100275B18(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_100275B50(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100275BC8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100275BC8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100275C60((uint64_t)v13);
  return v11;
}

uint64_t sub_100275C60(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_100275C98(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100275D10((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100275D10(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100275DA8((uint64_t)v13);
  return v11;
}

uint64_t sub_100275DA8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_100275DE0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100275E58((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100275E58(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100275EF0((uint64_t)v13);
  return v11;
}

uint64_t sub_100275EF0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_100275F28(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100275FA0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100275FA0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100276038((uint64_t)v13);
  return v11;
}

uint64_t sub_100276038(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

uint64_t sub_100276070(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1002760E8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1002760E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    size_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100276180((uint64_t)v13);
  return v11;
}

uint64_t sub_100276180(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100274D6C((void *)a1);
  }
  return a1;
}

void *sub_1002761B8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xD8uLL);
  uint64_t result = sub_100276204(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1002761F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100276204(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003AD2D0;
  CMMsl::Writer::Writer((CMMsl::Writer *)(a1 + 3));
  return a1;
}

void sub_10027624C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100276260(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003AD2D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100276280(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003AD2D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1002762D4(uint64_t a1)
{
}

void sub_1002762E0()
{
  __assert_rtn("setFlushTimeoutSeconds_block_invoke", "MSLWriter.cpp", 56, "(fFd == -1) && (\"Writer::setFlushTimeout() must be called before ::open().\")");
}

id KappaCompanion::serializeDeviceInfo(KappaCompanion *this, const CompanionDeviceInfo *a2)
{
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_1003AD310);
  }
  uint64_t v3 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(_DWORD *)this;
    if (*((char *)this + 31) >= 0) {
      uint64_t v5 = (char *)this + 8;
    }
    else {
      uint64_t v5 = (char *)*((void *)this + 1);
    }
    int v6 = *((_DWORD *)this + 8);
    int v7 = *((_DWORD *)this + 9);
    int v8 = *((_DWORD *)this + 10);
    int v9 = *((_DWORD *)this + 11);
    int v10 = *((_DWORD *)this + 12);
    int v11 = *((_DWORD *)this + 13);
    int v12 = *((_DWORD *)this + 14);
    *(_DWORD *)buf = 67176707;
    int v24 = v4;
    *(_WORD *)uint64_t v25 = 2081;
    *(void *)&v25[2] = v5;
    *(_WORD *)&v25[10] = 1025;
    int v26 = v6;
    LOWORD(v27) = 1025;
    *(_DWORD *)((char *)&v27 + 2) = v8;
    HIWORD(v27) = 1025;
    int v28 = v7;
    LOWORD(v29) = 1025;
    *(_DWORD *)((char *)&v29 + 2) = v9;
    HIWORD(v29) = 1025;
    int v30 = v10;
    __int16 v31 = 1025;
    int v32 = v11;
    __int16 v33 = 1025;
    int v34 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sending kappa device info %{private}d %{private}s %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d", buf, 0x3Cu);
  }
  PB::Writer::Writer((PB::Writer *)&v21);
  KappaCompanionDeviceInfo::KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)buf);
  int v13 = *(_DWORD *)this;
  LOBYTE(v31) = v31 | 1;
  *(_DWORD *)&v25[8] = v13;
  sub_100029B58((uint64_t)buf);
  std::string::operator=(*(std::string **)v25, (const std::string *)((char *)this + 8));
  int v14 = *((_DWORD *)this + 9);
  int v15 = *((_DWORD *)this + 10);
  int v16 = *((_DWORD *)this + 11);
  HIDWORD(v27) = *((_DWORD *)this + 8);
  int v28 = v15;
  HIDWORD(v29) = v14;
  int v30 = v16;
  int v17 = *((_DWORD *)this + 12);
  LODWORD(v29) = *((_DWORD *)this + 13);
  int v18 = *((_DWORD *)this + 14);
  LOBYTE(v31) = v31 | 0xFE;
  int v26 = v18;
  LODWORD(v27) = v17;
  KappaCompanionDeviceInfo::writeTo((uint64_t)buf, (PB::Writer *)&v21);
  char v19 = +[NSData dataWithBytes:v22 length:v21 - v22];
  KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)buf);
  PB::Writer::~Writer((PB::Writer *)&v21);

  return v19;
}

void sub_1002764F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)va1);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void KappaCompanion::deserializeDeviceInfo(KappaCompanion *this, const NSData *a2)
{
  uint64_t v2 = this;
  PB::Reader::Reader((PB::Reader *)v24, (const unsigned __int8 *)[(KappaCompanion *)v2 bytes], (unint64_t)[(KappaCompanion *)v2 length]);
  KappaCompanionDeviceInfo::KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)v13);
  int v8 = 0;
  *(_OWORD *)__p = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  int v12 = 0;
  KappaCompanionDeviceInfo::readFrom((KappaCompanionDeviceInfo *)v13, (PB::Reader *)v24);
  char v3 = v23;
  if (v23) {
    int v8 = v15;
  }
  if (__str)
  {
    std::string::operator=((std::string *)__p, __str);
    char v3 = v23;
  }
  int v4 = v18;
  int v5 = v21;
  if ((v3 & 8) == 0) {
    int v4 = -1;
  }
  if ((v3 & 0x40) == 0) {
    int v5 = -1;
  }
  *((void *)&v10 + 1) = __PAIR64__(v5, v4);
  if ((v3 & 0x10) != 0)
  {
    LODWORD(v11) = v19;
    if ((v3 & 0x80) == 0)
    {
LABEL_11:
      if ((v3 & 4) == 0) {
        goto LABEL_12;
      }
      goto LABEL_25;
    }
  }
  else if ((v3 & 0x80) == 0)
  {
    goto LABEL_11;
  }
  DWORD1(v11) = v22;
  if ((v3 & 4) == 0)
  {
LABEL_12:
    if ((v3 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  DWORD2(v11) = v17;
  if ((v3 & 0x20) == 0)
  {
LABEL_13:
    if ((v3 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_26:
  HIDWORD(v11) = v20;
  if ((v3 & 2) == 0)
  {
LABEL_15:
    if (qword_1003DB710 != -1) {
      dispatch_once(&qword_1003DB710, &stru_1003AD310);
    }
    uint64_t v6 = qword_1003DB718;
    if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
    {
      if ((SBYTE7(v10) & 0x80u) == 0) {
        int v7 = __p;
      }
      else {
        int v7 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67176707;
      int v26 = v8;
      __int16 v27 = 2081;
      int v28 = v7;
      __int16 v29 = 1025;
      int v30 = DWORD2(v10);
      __int16 v31 = 1025;
      int v32 = v11;
      __int16 v33 = 1025;
      int v34 = HIDWORD(v10);
      __int16 v35 = 1025;
      int v36 = DWORD1(v11);
      __int16 v37 = 1025;
      int v38 = DWORD2(v11);
      __int16 v39 = 1025;
      int v40 = HIDWORD(v11);
      __int16 v41 = 1025;
      int v42 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "receiving kappa device info %{private}d %{private}s %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d", buf, 0x3Cu);
    }
    operator new();
  }
LABEL_14:
  int v12 = v16;
  goto LABEL_15;
}

void sub_1002767E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

id KappaCompanion::serializeTrigger(float16x4_t *this, const CompanionTrigger *a2)
{
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_1003AD310);
  }
  char v3 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    int v4 = this[1].u8[0];
    int v5 = this[1].u8[1];
    int v6 = this[1].u16[1];
    __int32 v7 = this[1].i32[1];
    float16x4_t v8 = this[2];
    double v9 = *(float *)this[3].i32;
    double v10 = *(float *)&this[3].i32[1];
    __int32 v11 = this[4].i8[0];
    int v12 = this[4].i8[1];
    int v13 = this[4].i8[2];
    int v14 = this[4].i8[3];
    int v15 = this[4].i8[4];
    float16x4_t v16 = this[5];
    _H2 = this[6].i16[0];
    __asm { FCVT            D2, H2 }
    _H3 = this[6].i16[1];
    __asm { FCVT            D3, H3 }
    _H4 = this[6].i16[2];
    __asm { FCVT            D4, H4 }
    int v27 = this[6].u8[6];
    int v28 = this[6].u8[7];
    int v29 = this[7].u16[0];
    float16x4_t v30 = this[8];
    double v31 = *(float *)&this[11].i32[1];
    double v32 = *(float *)this[12].i32;
    *(_DWORD *)buf = 67180033;
    int v53 = v4;
    __int16 v54 = 1025;
    int v55 = v5;
    __int16 v56 = 1025;
    int v57 = v6;
    __int16 v58 = 1025;
    __int32 v59 = v7;
    __int16 v60 = 2049;
    *(float16x4_t *)char v61 = v8;
    *(_WORD *)&v61[8] = 2049;
    *(double *)&v61[10] = v9;
    *(_WORD *)&v61[18] = 2049;
    double v62 = v10;
    v63.i16[0] = 1025;
    *(__int32 *)((char *)v63.i32 + 2) = v11;
    v63.i16[3] = 1025;
    int v64 = v12;
    LOWORD(v65) = 1025;
    *(_DWORD *)((char *)&v65 + 2) = v13;
    HIWORD(v65) = 1025;
    int v66 = v14;
    LOWORD(v67) = 1025;
    *(_DWORD *)((char *)&v67 + 2) = v15;
    HIWORD(v67) = 2049;
    float16x4_t v68 = v16;
    *(_WORD *)char v69 = 2049;
    *(void *)&v69[2] = _D2;
    *(_WORD *)&v69[10] = 2049;
    unint64_t v70 = _D3;
    *(_WORD *)unint64_t v71 = 2049;
    *(void *)&v71[2] = _D4;
    __int16 v72 = 1025;
    int v73 = v27;
    __int16 v74 = 1025;
    int v75 = v28;
    __int16 v76 = 1025;
    int v77 = v29;
    __int16 v78 = 2049;
    float16x4_t v79 = v30;
    __int16 v80 = 2049;
    double v81 = v31;
    __int16 v82 = 2049;
    double v83 = v32;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sending kappa trigger info %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}d %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}f %{private}d %{private}d%{private}d %{private}llu%{private}f %{private}f", buf, 0xAEu);
  }
  PB::Writer::Writer((PB::Writer *)&v47);
  KappaTriggerSample::KappaTriggerSample((KappaTriggerSample *)buf);
  double v62 = *(double *)this;
  __int32 v33 = this[3].i32[1];
  HIDWORD(v65) = this[3].i32[0];
  unsigned int v34 = this[1].u8[1];
  __int32 v35 = this[1].u16[1];
  *(_DWORD *)&v69[4] = this[1].u8[0];
  v68.i32[0] = v35;
  __int32 v36 = this[1].i32[1];
  float16x4_t v63 = this[2];
  HIDWORD(v67) = v33;
  *(_DWORD *)&v69[8] = this[4].i8[0];
  unint64_t v70 = __PAIR64__(v36, v34);
  LODWORD(v67) = this[4].i8[1];
  int v37 = this[4].i8[2];
  *(void *)unint64_t v71 = __PAIR64__(*(unsigned int *)&v71[4], this[4].i8[3]) | 0x3E77E00000000;
  int v38 = this[4].i8[4];
  int v64 = v37;
  LODWORD(v65) = v38;
  float16x4_t v39 = this[5];
  unint64_t __src = vcvtq_f32_f16(this[6]).u64[0];
  _H0 = this[6].i16[2];
  __asm { FCVT            S0, H0 }
  *(float16x4_t *)&v61[12] = v39;
  int v50 = _S0;
  sub_100024308((char *)&v54, (char *)&__src, (uint64_t)&v51, 3uLL);
  int v42 = this[6].u8[6];
  __int32 v43 = this[7].u16[0];
  int v66 = this[6].u8[7];
  v68.i32[1] = v43;
  *(_DWORD *)char v69 = v42;
  float16x4_t v44 = this[8];
  *(_DWORD *)&v71[4] |= 0x1881u;
  *(float16x4_t *)&v61[4] = v44;
  KappaTriggerSample::writeTo((uint64_t)buf, (PB::Writer *)&v47);
  char v45 = +[NSData dataWithBytes:v48 length:v47 - v48];
  KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)buf);
  PB::Writer::~Writer((PB::Writer *)&v47);

  return v45;
}

void sub_100276B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)va1);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void KappaCompanion::deserializeTrigger(KappaCompanion *this, const NSData *a2)
{
  __int16 v60 = this;
  PB::Reader::Reader((PB::Reader *)v99, (const unsigned __int8 *)[(KappaCompanion *)v60 bytes], (unint64_t)[(KappaCompanion *)v60 length]);
  KappaTriggerSample::KappaTriggerSample((KappaTriggerSample *)v78);
  int v76 = 0;
  __int16 v77 = 0;
  long long v140 = 0u;
  long long v141 = 0u;
  long long v142 = 0u;
  KappaTriggerSample::readFrom((KappaTriggerSample *)v78, (PB::Reader *)v99);
  int v2 = v98;
  int v3 = v93;
  int v4 = v95;
  int v5 = v90;
  int v6 = v96;
  if ((v98 & 8) != 0) {
    uint64_t v7 = v83;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((v98 & 0x40) != 0) {
    float v8 = v86;
  }
  else {
    float v8 = 0.0;
  }
  if ((v98 & 0x200) != 0) {
    float v9 = v89;
  }
  else {
    float v9 = 0.0;
  }
  int v10 = v94;
  int v71 = v88;
  int v65 = v97;
  int v67 = v84;
  int v63 = v85;
  if ((v98 & 2) != 0) {
    uint64_t v11 = v82;
  }
  else {
    uint64_t v11 = 0;
  }
  __p = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  sub_100029BCC(&__p, v79, v80, (v80 - (uint64_t)v79) >> 2);
  int v54 = v10;
  int v55 = v5;
  int v61 = v4;
  int v69 = v3;
  int v56 = v6;
  uint64_t v58 = v11;
  uint64_t v59 = v7;
  _H11 = 0;
  _H12 = 0;
  _H13 = 0;
  if (v74 - (void)__p == 12)
  {
    _S0 = *(_DWORD *)__p;
    _S1 = *((_DWORD *)__p + 1);
    __asm
    {
      FCVT            H11, S0
      FCVT            H12, S1
    }
    _S0 = *((_DWORD *)__p + 2);
    __asm { FCVT            H13, S0 }
  }
  int v22 = v2 << 18;
  int v23 = v2 << 16;
  int v24 = v2 << 21;
  int v25 = v2 << 17;
  int v26 = v2 << 23;
  int v27 = v2 << 27;
  int v28 = v2 << 14;
  int v29 = v2 << 26;
  int v30 = v2 << 15;
  int v31 = v98 << 19;
  int v32 = v92;
  int v33 = v87;
  int v34 = v91;
  int v35 = v98 << 24;
  int v36 = v98 << 20;
  if (v98) {
    uint64_t v37 = v81;
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t v57 = v37;
  if (qword_1003DB710 != -1)
  {
    int v52 = v25;
    int v53 = v30;
    int v50 = v27;
    int v51 = v26;
    int v49 = v28;
    dispatch_once(&qword_1003DB710, &stru_1003AD310);
    int v28 = v49;
    int v27 = v50;
    int v26 = v51;
    int v25 = v52;
    int v30 = v53;
  }
  int v38 = v69 & (v22 >> 31);
  int v39 = v61 & (v23 >> 31);
  int v40 = v55 & (v24 >> 31);
  int v41 = v54 & (v25 >> 31);
  int v68 = v67 & (v27 >> 31);
  int v70 = v71 & (v26 >> 31);
  int v66 = v65 & (v28 >> 31);
  unsigned __int8 v62 = v39;
  int v64 = v63 & (v29 >> 31);
  int v42 = v32 & (v31 >> 31);
  int v43 = v33 & (v35 >> 31);
  int v72 = v34 & (v36 >> 31);
  float16x4_t v44 = qword_1003DB718;
  int v45 = v56 & (v30 >> 31);
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67179521;
    int v101 = v38;
    __int16 v102 = 1025;
    int v103 = v62;
    __int16 v104 = 1025;
    int v105 = (unsigned __int16)v40;
    __asm
    {
      FCVT            D2, H11
      FCVT            D3, H12
    }
    __int16 v106 = 1025;
    __asm { FCVT            D4, H13 }
    int v107 = v45;
    __int16 v108 = 2049;
    uint64_t v109 = v59;
    __int16 v110 = 2049;
    double v111 = v8;
    __int16 v112 = 2049;
    double v113 = v9;
    __int16 v114 = 1025;
    int v115 = (char)v41;
    __int16 v116 = 1025;
    int v117 = (char)v70;
    __int16 v118 = 1025;
    int v119 = (char)v68;
    __int16 v120 = 1025;
    int v121 = (char)v66;
    __int16 v122 = 1025;
    int v123 = (char)v64;
    __int16 v124 = 2049;
    uint64_t v125 = v58;
    __int16 v126 = 2049;
    uint64_t v127 = _D2;
    __int16 v128 = 2049;
    uint64_t v129 = _D3;
    __int16 v130 = 2049;
    uint64_t v131 = _D4;
    __int16 v132 = 1025;
    int v133 = v42;
    __int16 v134 = 1025;
    int v135 = v43;
    __int16 v136 = 1025;
    int v137 = (unsigned __int16)v72;
    __int16 v138 = 2049;
    uint64_t v139 = v57;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "receiving kappa trigger info %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}d %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}f %{private}d %{private}d%{private}d %{private}llu", buf, 0x9Au);
  }
  operator new();
}

void sub_100277054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)&a27);

  _Unwind_Resume(a1);
}

id KappaCompanion::serializeCompanionUUID(const std::string *this, const CompanionUUID *a2)
{
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_1003AD310);
  }
  int v3 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v4 = this;
    }
    else {
      int v4 = (const std::string *)this->__r_.__value_.__r.__words[0];
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sending kappa companion uuid %{public}s", (uint8_t *)&buf, 0xCu);
  }
  PB::Writer::Writer((PB::Writer *)&buf);
  KappaCompanionUUID::KappaCompanionUUID((KappaCompanionUUID *)&v7);
  sub_100029B58((uint64_t)&v7);
  std::string::operator=(v8, this);
  KappaCompanionUUID::writeTo((uint64_t)&v7, (PB::Writer *)&buf);
  int v5 = +[NSData dataWithBytes:*((void *)&buf + 1) length:(void)buf - *((void *)&buf + 1)];
  KappaCompanionUUID::~KappaCompanionUUID((KappaCompanionUUID *)&v7);
  PB::Writer::~Writer((PB::Writer *)&buf);

  return v5;
}

void sub_1002771E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void KappaCompanion::deserializeCompanionUUID(KappaCompanion *this, const NSData *a2)
{
  int v2 = this;
  PB::Reader::Reader((PB::Reader *)v8, (const unsigned __int8 *)[(KappaCompanion *)v2 bytes], (unint64_t)[(KappaCompanion *)v2 length]);
  KappaCompanionUUID::KappaCompanionUUID((KappaCompanionUUID *)v6);
  memset(&v5, 0, sizeof(v5));
  KappaCompanionUUID::readFrom((KappaCompanionUUID *)v6, (PB::Reader *)v8);
  if (__str) {
    std::string::operator=(&v5, __str);
  }
  if (qword_1003DB710 != -1) {
    dispatch_once(&qword_1003DB710, &stru_1003AD310);
  }
  int v3 = qword_1003DB718;
  if (os_log_type_enabled((os_log_t)qword_1003DB718, OS_LOG_TYPE_DEBUG))
  {
    int v4 = &v5;
    if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v4 = (std::string *)v5.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136446210;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "receiving kappa companion uuid %{public}s", buf, 0xCu);
  }
  operator new();
}

void sub_1002773B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_100277408(id a1)
{
  qword_1003DB718 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Companion");

  _objc_release_x1();
}

double CLKappaFeaturesAlgTriggerClustersResult::log(CLKappaFeaturesAlgTriggerClustersResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003ADF28);
  }
  int v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 4);
    int v5 = *((unsigned __int8 *)this + 40);
    int v6 = *((unsigned __int8 *)this + 41);
    int v7 = *((unsigned __int8 *)this + 42);
    uint64_t v8 = *((void *)this + 6);
    uint64_t v9 = *((void *)this + 7);
    uint64_t v10 = *((void *)this + 8);
    uint64_t v11 = *((void *)this + 9);
    uint64_t v12 = *((void *)this + 10);
    uint64_t v13 = *((void *)this + 11);
    int v14 = *((_DWORD *)this + 24);
    int v15 = *((unsigned __int8 *)this + 104);
    double v16 = *((float *)this + 4);
    int v17 = *((_DWORD *)this + 5);
    double v18 = *((float *)this + 6);
    int v19 = 134352640;
    uint64_t v20 = v4;
    __int16 v21 = 1026;
    int v22 = v5;
    __int16 v23 = 1026;
    int v24 = v6;
    __int16 v25 = 1026;
    int v26 = v7;
    __int16 v27 = 2050;
    uint64_t v28 = v8;
    __int16 v29 = 2050;
    uint64_t v30 = v9;
    __int16 v31 = 2050;
    uint64_t v32 = v10;
    __int16 v33 = 2050;
    uint64_t v34 = v11;
    __int16 v35 = 2050;
    uint64_t v36 = v12;
    __int16 v37 = 2050;
    uint64_t v38 = v13;
    __int16 v39 = 1026;
    int v40 = v14;
    __int16 v41 = 1026;
    int v42 = v15;
    __int16 v43 = 2048;
    double v44 = v16;
    __int16 v45 = 1026;
    int v46 = v17;
    __int16 v47 = 2050;
    double v48 = v18;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[TC] summary,A,%{public}llu,B,%{public}d,C,%{public}d,D,%{public}d,E,%{public}llu,debug-1,%{public}llu,debug-2,%{public}llu,debug-3,%{public}llu,debug-4,%{public}llu,debug-5,%{public}llu,debug-6,%{public}d,debug-7,%{public}u,config-1,%f,config-2,%{public}d,config-3,%{public}f", (uint8_t *)&v19, 0x80u);
  }
  return result;
}

void CLKappaFeaturesAlgTriggerClusters::CLKappaFeaturesAlgTriggerClusters(CLKappaFeaturesAlgTriggerClusters *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  *int v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 17) = 0;
  *((_WORD *)this + 72) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_WORD *)this + 64) = 0;
  int v6 = (char *)operator new(0x88uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_1003ADF58;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((void *)v6 + 16) = 0;
  *((void *)v6 + 3) = &off_1003A1A88;
  *((void *)v6 + 5) = 0x841F00000;
  *((_DWORD *)v6 + 12) = 1192009472;
  *((void *)v6 + 7) = 0;
  *(_DWORD *)(v6 + 63) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 113) = 0u;
  int v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v6 + 24;
  *((void *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    int v6 = (char *)*((void *)this + 2);
    uint64_t v10 = (char *)*((void *)this + 1);
    uint64_t v11 = (std::__shared_weak_count *)v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v10 = v6 + 24;
    uint64_t v11 = (std::__shared_weak_count *)v6;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_100277908((uint64_t)&v10, &v12);
  long long v8 = v12;
  long long v12 = 0uLL;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v12 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  if (v11) {
    sub_10000BB9C(v11);
  }
  (*(void (**)(CLKappaFeaturesAlgTriggerClusters *))(*(void *)this + 312))(this);
}

void sub_1002778CC(_Unwind_Exception *a1)
{
  sub_100010C84(v3);
  int v5 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v5) {
    sub_10000BB9C(v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v6) {
    sub_10000BB9C(v6);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_100277908@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgTriggerClusters::CLKappaFeaturesAlgTriggerClusters(CLKappaFeaturesAlgTriggerClusters *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 19) = off_10039A008;
  *((void *)this + 20) = off_10039A0D0;
  *((void *)this + 21) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003AD900);
  *(void *)uint64_t v2 = off_1003AD3E0;
  *(void *)(v2 + 152) = off_1003AD690;
  *(void *)(v2 + 160) = off_1003AD7D0;
  *(void *)(v2 + 168) = off_1003AD8B0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(void *)(v2 + 136) = 0;
  *(_WORD *)(v2 + 144) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_WORD *)(v2 + 128) = 0;
  int v3 = (char *)operator new(0x88uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)int v3 = off_1003ADF58;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((void *)v3 + 16) = 0;
  *((void *)v3 + 3) = &off_1003A1A88;
  *((void *)v3 + 5) = 0x841F00000;
  *((_DWORD *)v3 + 12) = 1192009472;
  *((void *)v3 + 7) = 0;
  *(_DWORD *)(v3 + 63) = 0;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 113) = 0u;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v3 + 24;
  *((void *)this + 2) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    int v3 = (char *)*((void *)this + 2);
    int v7 = (char *)*((void *)this + 1);
    long long v8 = (std::__shared_weak_count *)v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    int v7 = v3 + 24;
    long long v8 = (std::__shared_weak_count *)v3;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_100277908((uint64_t)&v7, &v9);
  long long v5 = v9;
  long long v9 = 0uLL;
  int v6 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v9 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  if (v8) {
    sub_10000BB9C(v8);
  }
  (*(void (**)(CLKappaFeaturesAlgTriggerClusters *))(*(void *)this + 312))(this);
}

void sub_100277C14(_Unwind_Exception *a1)
{
  sub_100010C84(v2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v4) {
    sub_10000BB9C(v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v5) {
    sub_10000BB9C(v5);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AD900);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgTriggerClusters::resetConfiguration(CLKappaFeaturesAlgTriggerClusters *this)
{
  id v17 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgTriggerClustersConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 1163984896;
  LODWORD(v4) = 5.0;
  LODWORD(v5) = 30.0;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v17 withMinValue:v4 maxValue:v3 defaultValue:v5];
  LODWORD(v18) = v6;

  int v7 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v8) = 1120403456;
  LODWORD(v9) = 2.0;
  LODWORD(v10) = 8.0;
  [v7 algorithmThresholdNumber:1 inArrayForKey:v17 withMinValue:v9 maxValue:v8 defaultValue:v10];
  HIDWORD(v18) = (int)v11;

  long long v12 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v13) = 1192009728;
  LODWORD(v14) = 1192009472;
  LODWORD(v15) = 15.0;
  [v12 algorithmThresholdNumber:2 inArrayForKey:v17 withMinValue:v15 maxValue:v13 defaultValue:v14];
  int v19 = v16;

  CLKappaFeaturesAlgTriggerClusters::setConfig((uint64_t)this, &v18);
}

void sub_100277D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgTriggerClusters::setConfig(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *a2;
  *(_DWORD *)(v3 + 24) = *((_DWORD *)a2 + 2);
  *(void *)(v3 + 16) = v4;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003ADF28);
  }
  double v5 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    double v8 = *(float *)(v7 + 16);
    int v9 = *(_DWORD *)(v7 + 20);
    double v10 = *(float *)(v7 + 24);
    int v11 = 134218496;
    double v12 = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    __int16 v15 = 2048;
    double v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[TC] config, %f, %d, %f", (uint8_t *)&v11, 0x1Cu);
  }
  return result;
}

uint64_t CLKappaFeaturesAlgTriggerClusters::reset(CLKappaFeaturesAlgTriggerClusters *this)
{
  (*(void (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4));
  uint64_t v2 = *((void *)this + 4);
  *(_DWORD *)(v2 + 39) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 48) = 0;
  uint64_t v3 = *((void *)this + 4);
  *(unsigned char *)(v3 + 104) = 0;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_100279078((uint64_t)this + 64, (uint64_t)v5);
  uint64_t result = sub_100010C84(v5);
  *((void *)this + 15) = 0;
  *((_WORD *)this + 64) = 0;
  *((_WORD *)this + 72) = 0;
  return result;
}

void CLKappaFeaturesAlgTriggerClusters::epochFinalize(int64x2_t *this, unint64_t a2)
{
  uint64_t v4 = this[2].i64[0];
  *(_DWORD *)(v4 + 39) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 48) = 0;
  uint64_t v5 = this[2].i64[0];
  *(unsigned char *)(v5 + 104) = 0;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  uint64_t v6 = this[2].i64[0];
  *(_DWORD *)(v6 + 100) = 0;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 32) = a2;
  uint64_t v7 = this[6].i64[1];
  if (v7)
  {
    uint64_t v8 = this[4].i64[1];
    unint64_t v9 = this[6].u64[0];
    *(void *)(v6 + 72) = *(void *)(*(void *)(v8 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF));
    uint64_t v10 = *(void *)(*(void *)(v8 + (((v7 + v9 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v7 + v9 - 1) & 0x1FF));
  }
  else
  {
    uint64_t v10 = 0;
    *(void *)(v6 + 72) = 0;
  }
  *(void *)(v6 + 80) = v10;
  *(_DWORD *)(v6 + 96) = v7;
  *(unsigned char *)(v6 + 42) = this[9].i8[1];
  unint64_t v11 = this[7].u64[1];
  this[7].i64[1] = a2;
  id v12 = *(id *)(this[3].i64[0] + 96);
  if (![v12 count]) {
    goto LABEL_32;
  }
  __int16 v13 = [v12 firstObject];
  *(void *)(this[2].i64[0] + 56) = *(v13.c_struct + 1);

  int v14 = [v12 lastObject];
  *(void *)(this[2].i64[0] + 64) = *(v14[c_struct] + 1);

  *(_DWORD *)(this[2].i64[0] + 100) = [v12 count];
  if (!this[9].i8[0])
  {
    this[9].i8[0] = 1;
    __int16 v15 = [v12 firstObject];
    this[8].i16[0] = *((_WORD *)[v15 c_struct] + 1);

    double v16 = [v12 firstObject];
    this[7].i64[0] = *[v16 c_struct];

    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003ADF28);
    }
    id v17 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v19 = this[8].u16[0];
      uint64_t v20 = this[7].i64[0];
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)&buf[8] = 2048;
      *(void *)&buf[10] = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[TC] setting armedDuration:%hu firstSessionTriggerTs:%llu", buf, 0x12u);
    }
    LOWORD(v18) = this[8].i16[0];
    this[8].i64[1] = (unint64_t)(float)((float)this[7].u64[0]
                                             + (float)((float)(*(float *)(this[2].i64[0] + 24) - (float)v18) * 1000000.0));
  }
  for (unint64_t i = 0; (unint64_t)[v12 count] > i; ++i)
  {
    *(void *)long long buf = 0;
    int v22 = [v12 objectAtIndexedSubscript:i];
    uint64_t v23 = *((v22->c_struct) + 1);

    *(void *)long long buf = v23;
    int v24 = this[1].u8[8];
    if (v24 == 2)
    {
      __int16 v27 = [v12 objectAtIndexedSubscript:i];
      BOOL v28 = (((*((unsigned char *)[v27 c_struct]) + 46) & 4) == 0);

      if (!v28) {
        continue;
      }
    }
    else
    {
      if (v24 != 1) {
        continue;
      }
      __int16 v25 = [v12 objectAtIndexedSubscript:i];
      BOOL v26 = (*((unsigned char *)[v25 c_struct] + 1) & 4) == 0;

      if (!v26) {
        continue;
      }
    }
    if (*(void *)buf >= v11 && *(void *)buf < a2)
    {
      sub_10000DD3C((int64x2_t *)this[4].i64, buf);
      __int16 v29 = [v12 objectAtIndexedSubscript:i];
      this[9].i8[1] |= *((unsigned char *)[v29 c_struct] + 28) == 1;

      uint64_t v30 = [v12 objectAtIndexedSubscript:i];
      *(unsigned char *)(this[2].i64[0] + 104) = *((unsigned char *)[v30 c_struct] + 28);

      __int16 v31 = [v12 objectAtIndexedSubscript:i];
      *(void *)(this[2].i64[0] + 88) = *((unsigned __int16 *)[v31 c_struct] + 1);
    }
  }
  uint64_t v32 = this[6].i64[1];
  if (v32)
  {
    unint64_t v33 = *(void *)(*(void *)(this[4].i64[1]
                                + (((unint64_t)(v32 + this[6].i64[0] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((v32 + this[6].i64[0] - 1) & 0x1FF));
    while (1)
    {
      unint64_t v34 = this[6].u64[1];
      if (!v34) {
        break;
      }
      uint64_t v35 = this[4].i64[1];
      unint64_t v36 = this[6].u64[0];
      unint64_t v37 = *(void *)(*(void *)(v35 + ((v36 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v36 & 0x1FF));
      uint64_t v38 = this[2].i64[0];
      if ((float)((float)v33 + (float)(*(float *)(v38 + 16) * -1000000.0)) <= (float)v37)
      {
        *(void *)(v38 + 72) = v37;
        *(void *)(v38 + 80) = *(void *)(*(void *)(v35 + (((v34 + v36 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                          + 8 * ((v34 + v36 - 1) & 0x1FF));
        *(_DWORD *)(v38 + 96) = v34;
        if (v34 > *(int *)(v38 + 20))
        {
          if (qword_1003DB6A0 != -1) {
            dispatch_once(&qword_1003DB6A0, &stru_1003ADF28);
          }
          __int16 v43 = qword_1003DB6A8;
          if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v44 = this[6].i64[1];
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = v44;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "[TC] found cluster - clusterSize:%lu", buf, 0xCu);
          }
          *(unsigned char *)(this[2].i64[0] + 40) = 1;
          if (qword_1003DB6A0 != -1) {
            dispatch_once(&qword_1003DB6A0, &stru_1003ADF28);
          }
          __int16 v45 = qword_1003DB6A8;
          if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v46 = this[8].i64[1];
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "[TC] cluster must be before ts:%llu", buf, 0xCu);
          }
          unint64_t v47 = this[8].u64[1];
          if (v33 <= v47)
          {
            uint64_t v48 = this[2].i64[0];
            *(unsigned char *)(v48 + 41) = 1;
            *(void *)(v48 + 48) = v47;
          }
          if (qword_1003DB6A0 != -1) {
            dispatch_once(&qword_1003DB6A0, &stru_1003ADF28);
          }
          int v49 = qword_1003DB6A8;
          if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v50 = this[2].i64[0];
            int v51 = *(unsigned __int8 *)(v50 + 41);
            uint64_t v52 = *(void *)(v50 + 48);
            *(_DWORD *)long long buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v51;
            *(_WORD *)&buf[8] = 2048;
            *(void *)&buf[10] = v52;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "[TC] isClusterInBeginningOfDrive:%d fArmedDurationThresholdTimestamp:%llu", buf, 0x12u);
          }
        }
        goto LABEL_32;
      }
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003ADF28);
      }
      __int16 v39 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v40 = *(void *)(*(void *)(this[4].i64[1] + (((unint64_t)this[6].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (this[6].i64[0] & 0x1FF));
        double v41 = *(float *)(this[2].i64[0] + 16);
        *(_DWORD *)long long buf = 134218496;
        *(void *)&uint8_t buf[4] = v40;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v33 - v40;
        __int16 v54 = 2048;
        double v55 = v41;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "[TC] removing trigger ts from cluster:%llu, timeFromFirstTrigger:%llu, windowDuration:%f", buf, 0x20u);
      }
      this[6] = vaddq_s64(this[6], (int64x2_t)xmmword_100338520);
      sub_1000125B8((uint64_t)this[4].i64, 1);
    }
  }
  uint64_t v42 = this[2].i64[0];
  *(_DWORD *)(v42 + 96) = 0;
  *(void *)(v42 + 72) = 0;
  *(void *)(v42 + 80) = 0;
LABEL_32:
}

void sub_100278668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void virtual thunk to'CLKappaFeaturesAlgTriggerClusters::epochFinalize(CLKappaFeaturesAlgTriggerClusters *this, unint64_t a2)
{
}

uint64_t CLKappaFeaturesAlgTriggerClusters::epochReset(CLKappaFeaturesAlgTriggerClusters *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

uint64_t virtual thunk to'CLKappaFeaturesAlgTriggerClusters::epochReset(CLKappaFeaturesAlgTriggerClusters *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 56) + 32) + 24))();
}

void sub_100278774(CLKappaAlgBlock *a1)
{
  *(void *)a1 = off_1003AD3E0;
  *((void *)a1 + 19) = off_1003AD690;
  *((void *)a1 + 20) = off_1003AD7D0;
  *(void *)((char *)a1 + *(void *)(*(void *)a1 - 176)) = off_1003AD8B0;
  sub_100010C84((void *)a1 + 8);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_1003AD900);
}

void sub_100278878(CLKappaAlgBlock *a1)
{
  *(void *)a1 = off_1003AD3E0;
  *((void *)a1 + 19) = off_1003AD690;
  *((void *)a1 + 20) = off_1003AD7D0;
  *((void *)a1 + 21) = off_1003AD8B0;
  sub_100010C84((void *)a1 + 8);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_1003AD900);

  operator delete();
}

void sub_100278968(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    sub_10000BB9C(v4);
  }
}

void sub_100278994(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AD3E0;
  *((void *)v1 + 19) = off_1003AD690;
  *((void *)v1 + 20) = off_1003AD7D0;
  *((void *)v1 + 21) = off_1003AD8B0;
  sub_100010C84((void *)v1 + 8);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AD900);
}

void sub_100278A80(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AD3E0;
  *((void *)v1 + 19) = off_1003AD690;
  *((void *)v1 + 20) = off_1003AD7D0;
  *((void *)v1 + 21) = off_1003AD8B0;
  sub_100010C84((void *)v1 + 8);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AD900);

  operator delete();
}

void sub_100278B80(void *a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 32);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 7);
  *((void *)v2 + 6) = v4;
  *((void *)v2 + 7) = v3;
  if (v5) {
    sub_10000BB9C(v5);
  }
}

void sub_100278BC0(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AD3E0;
  *((void *)v1 + 19) = off_1003AD690;
  *((void *)v1 + 20) = off_1003AD7D0;
  *((void *)v1 + 21) = off_1003AD8B0;
  sub_100010C84((void *)v1 + 8);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AD900);
}

void sub_100278CAC(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AD3E0;
  *((void *)v1 + 19) = off_1003AD690;
  *((void *)v1 + 20) = off_1003AD7D0;
  *((void *)v1 + 21) = off_1003AD8B0;
  sub_100010C84((void *)v1 + 8);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AD900);

  operator delete();
}

void sub_100278DAC(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AD3E0;
  *((void *)v1 + 19) = off_1003AD690;
  *((void *)v1 + 20) = off_1003AD7D0;
  *((void *)v1 + 21) = off_1003AD8B0;
  sub_100010C84((void *)v1 + 8);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AD900);
}

void sub_100278E98(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AD3E0;
  *((void *)v1 + 19) = off_1003AD690;
  *((void *)v1 + 20) = off_1003AD7D0;
  *((void *)v1 + 21) = off_1003AD8B0;
  sub_100010C84((void *)v1 + 8);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AD900);

  operator delete();
}

void sub_100278F98(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_100278FDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003ADF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100278FFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003ADF58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100279050(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100279078(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 256;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  sub_10027911C((void **)a1);
  uint64_t result = sub_1002792E4(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10027911C(void **a1)
{
  if (a1[5])
  {
    sub_1000125B8((uint64_t)a1, 0);
    sub_1002791A0(a1, 0);
  }
  else
  {
    uint64_t v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  sub_100279210(a1);
}

uint64_t sub_1002791A0(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_100279210(void **a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v10 = 0;
    int v7 = 0;
    goto LABEL_8;
  }
  int v7 = (char *)sub_10000EEB0(v2, v6);
  uint64_t v8 = a1[1];
  unint64_t v5 = a1[2];
  uint64_t v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    int v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  unint64_t v5 = a1[1];
  int v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  double v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_1002792E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_100279210((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t CLKappaFeaturesAlgShortAudioResult::reset(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 20) = -1;
  return this;
}

uint64_t CLKappaFeaturesAlgShortAudio::reset(CLKappaFeaturesAlgShortAudio *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

void CLKappaFeaturesAlgShortAudio::CLKappaFeaturesAlgShortAudio(CLKappaFeaturesAlgShortAudio *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  *uint64_t v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  unint64_t v6 = (std::__shared_weak_count *)operator new(0x38uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1003AEBA0;
  v6[1].__shared_weak_owners_ = 0;
  v6[2].__vftable = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1003A1908;
  v6[1].__shared_owners_ = 0;
  HIDWORD(v6[1].__shared_weak_owners_) = -1;
  int v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v6 + 1;
  *((void *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 1);
    uint64_t v11 = v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v10 = v6 + 1;
    uint64_t v11 = v6;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10027967C((uint64_t)&v10, &v12);
  long long v8 = v12;
  long long v12 = 0uLL;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v12 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  if (v11) {
    sub_10000BB9C(v11);
  }
  (*(void (**)(CLKappaFeaturesAlgShortAudio *))(*(void *)this + 312))(this);
}

void sub_100279644(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v4) {
    sub_10000BB9C(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v5) {
    sub_10000BB9C(v5);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10027967C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgShortAudio::CLKappaFeaturesAlgShortAudio(CLKappaFeaturesAlgShortAudio *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 8) = off_10039A008;
  *((void *)this + 9) = off_10039A0D0;
  *((void *)this + 10) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003AE568);
  *(void *)uint64_t v2 = off_1003AE048;
  *(void *)(v2 + 64) = off_1003AE2F8;
  *(void *)(v2 + 72) = off_1003AE438;
  *(void *)(v2 + 80) = off_1003AE518;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  uint64_t v3 = (std::__shared_weak_count *)operator new(0x38uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1003AEBA0;
  v3[1].__shared_weak_owners_ = 0;
  v3[2].__vftable = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1003A1908;
  v3[1].__shared_owners_ = 0;
  HIDWORD(v3[1].__shared_weak_owners_) = -1;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v3 + 1;
  *((void *)this + 2) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
    int v7 = (std::__shared_weak_count *)*((void *)this + 1);
    long long v8 = v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    int v7 = v3 + 1;
    long long v8 = v3;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10027967C((uint64_t)&v7, &v9);
  long long v5 = v9;
  long long v9 = 0uLL;
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v9 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  if (v8) {
    sub_10000BB9C(v8);
  }
  (*(void (**)(CLKappaFeaturesAlgShortAudio *))(*(void *)this + 312))(this);
}

void sub_100279934(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v3) {
    sub_10000BB9C(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AE568);
  _Unwind_Resume(a1);
}

uint64_t CLKappaFeaturesAlgShortAudio::setConfig(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(result + 32) + 16) = *a2;
  return result;
}

void CLKappaFeaturesAlgShortAudio::epochFinalize(CLKappaFeaturesAlgShortAudio *this)
{
  *(_DWORD *)(*((void *)this + 4) + 20) = -1;
  uint64_t v2 = +[CSPlatformInfo sharedInstance];
  unsigned int v3 = [v2 isMDevice];

  if (v3)
  {
    CLKappaFeaturesAlgShortAudio::extractFeaturesFromTrustedStream(this);
  }
  else
  {
    CLKappaFeaturesAlgShortAudio::computeFeaturesFromSPL(this);
  }
}

void sub_100279A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgShortAudio::extractFeaturesFromTrustedStream(CLKappaFeaturesAlgShortAudio *this)
{
  id v3 = *(id *)(*((void *)this + 6) + 88);
  if ([v3 count])
  {
    uint64_t v2 = [v3 lastObject];
    *(_DWORD *)(*((void *)this + 4) + 20) = *((_DWORD *)[v2 c_struct] + 47);
  }
}

void sub_100279A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgShortAudio::computeFeaturesFromSPL(CLKappaFeaturesAlgShortAudio *this)
{
  id v7 = *(id *)(*((void *)this + 6) + 80);
  uint64_t v2 = [v7 count];
  if (v2)
  {
    uint64_t v3 = 0;
    int v4 = -1;
    do
    {
      long long v5 = [v7 objectAtIndex:v3];
      float v6 = *((float *)[v5 c_struct] + 2);
      if ((LODWORD(v6) & 0x7FFFFFFFu) >= 0x7F800000) {
        float v6 = 0.0;
      }
      if (v6 < 0.0) {
        float v6 = 0.0;
      }
      if (v6 > 1.0) {
        float v6 = 1.0;
      }
      if (v6 > 0.5) {
        ++v4;
      }

      ++v3;
    }
    while (v2 != v3);
    *(_DWORD *)(*((void *)this + 4) + 20) = v4;
  }
}

void sub_100279BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void virtual thunk to'CLKappaFeaturesAlgShortAudio::epochFinalize(CLKappaFeaturesAlgShortAudio *this)
{
  CLKappaFeaturesAlgShortAudio::epochFinalize((CLKappaFeaturesAlgShortAudio *)((char *)this
                                                                             + *(void *)(*(void *)this - 48)));
}

uint64_t CLKappaFeaturesAlgShortAudio::epochReset(CLKappaFeaturesAlgShortAudio *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

uint64_t virtual thunk to'CLKappaFeaturesAlgShortAudio::epochReset(CLKappaFeaturesAlgShortAudio *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 56) + 32) + 24))();
}

void sub_100279C50(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003AE048;
  *((void *)this + 8) = off_1003AE2F8;
  *((void *)this + 9) = off_1003AE438;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_1003AE518;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003AE568);
}

void sub_100279D4C(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003AE048;
  *((void *)this + 8) = off_1003AE2F8;
  *((void *)this + 9) = off_1003AE438;
  *((void *)this + 10) = off_1003AE518;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003AE568);

  operator delete();
}

void sub_100279E30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    sub_10000BB9C(v4);
  }
}

void sub_100279E5C(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AE048;
  *((void *)v1 + 8) = off_1003AE2F8;
  *((void *)v1 + 9) = off_1003AE438;
  *((void *)v1 + 10) = off_1003AE518;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AE568);
}

void sub_100279F40(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AE048;
  *((void *)v1 + 8) = off_1003AE2F8;
  *((void *)v1 + 9) = off_1003AE438;
  *((void *)v1 + 10) = off_1003AE518;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AE568);

  operator delete();
}

void sub_10027A038(void *a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 32);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)v2 + 7);
  *((void *)v2 + 6) = v4;
  *((void *)v2 + 7) = v3;
  if (v5) {
    sub_10000BB9C(v5);
  }
}

void sub_10027A078(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AE048;
  *((void *)v1 + 8) = off_1003AE2F8;
  *((void *)v1 + 9) = off_1003AE438;
  *((void *)v1 + 10) = off_1003AE518;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AE568);
}

void sub_10027A15C(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AE048;
  *((void *)v1 + 8) = off_1003AE2F8;
  *((void *)v1 + 9) = off_1003AE438;
  *((void *)v1 + 10) = off_1003AE518;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AE568);

  operator delete();
}

void sub_10027A254(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AE048;
  *((void *)v1 + 8) = off_1003AE2F8;
  *((void *)v1 + 9) = off_1003AE438;
  *((void *)v1 + 10) = off_1003AE518;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AE568);
}

void sub_10027A338(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AE048;
  *((void *)v1 + 8) = off_1003AE2F8;
  *((void *)v1 + 9) = off_1003AE438;
  *((void *)v1 + 10) = off_1003AE518;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AE568);

  operator delete();
}

void sub_10027A430(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003AEBA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10027A450(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003AEBA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10027A4A4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t CLKappaEstimatesAlgHighSpeedCrashResult::reset(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(unsigned char *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(unsigned char *)(this + 48) = 0;
  *(void *)(this + 52) = 0;
  *(void *)(this + 68) = 0;
  *(void *)(this + 60) = 0;
  *(unsigned char *)(this + 76) = 0;
  return this;
}

void CLKappaEstimatesAlgHighSpeedCrashResult::log(CLKappaEstimatesAlgHighSpeedCrashResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003AF7D8);
  }
  uint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 5);
    int v4 = *((unsigned __int8 *)this + 32);
    double v5 = *((float *)this + 4);
    double v6 = *((float *)this + 5);
    int v7 = *((_DWORD *)this + 6);
    int v8 = *((unsigned __int8 *)this + 48);
    int v9 = *((_DWORD *)this + 13);
    int v10 = *((_DWORD *)this + 14);
    int v11 = *((_DWORD *)this + 15);
    int v12 = *((_DWORD *)this + 16);
    int v13 = *((_DWORD *)this + 17);
    int v14 = *((unsigned __int8 *)this + 72);
    int v15 = *((unsigned __int8 *)this + 73);
    int v16 = *((unsigned __int8 *)this + 74);
    int v17 = *((unsigned __int8 *)this + 75);
    int v18 = *((unsigned __int8 *)this + 76);
    int v19 = 134352896;
    uint64_t v20 = v3;
    __int16 v21 = 1026;
    int v22 = v4;
    __int16 v23 = 2050;
    double v24 = v5;
    __int16 v25 = 2050;
    double v26 = v6;
    __int16 v27 = 1026;
    int v28 = v7;
    __int16 v29 = 1026;
    int v30 = v8;
    __int16 v31 = 1026;
    int v32 = v9;
    __int16 v33 = 1026;
    int v34 = v10;
    __int16 v35 = 1026;
    int v36 = v11;
    __int16 v37 = 1026;
    int v38 = v12;
    __int16 v39 = 1026;
    int v40 = v13;
    __int16 v41 = 1026;
    int v42 = v14;
    __int16 v43 = 1026;
    int v44 = v15;
    __int16 v45 = 1026;
    int v46 = v16;
    __int16 v47 = 1026;
    int v48 = v17;
    __int16 v49 = 1026;
    int v50 = v18;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[HSC] summary,A,%{public}llu,B,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}u,debug-1,%{public}d,debug-2a,%{public}d,debug-2b,%{public}d,debug-2c,%{public}d,debug-2d,%{public}d,debug-2e,%{public}d,debug-3a,%{public}d,debug-3b,%{public}d,debug-3c,%{public}d,debug-3d,%{public}d,debug-3e,%{public}d\n", (uint8_t *)&v19, 0x6Eu);
  }
}

void CLKappaEstimatesAlgHighSpeedCrash::CLKappaEstimatesAlgHighSpeedCrash(CLKappaEstimatesAlgHighSpeedCrash *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  *double v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)((char *)this + 46) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = 0;
  *((_WORD *)this + 40) = 0;
  double v6 = (char *)operator new(0x68uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)double v6 = off_1003AF808;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((void *)v6 + 12) = 0;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((void *)v6 + 3) = &off_1003A1CC8;
  *((void *)v6 + 5) = 0x41700000C1C80000;
  *((_DWORD *)v6 + 12) = 9;
  *(void *)(v6 + 84) = 0;
  *(void *)(v6 + 92) = 0;
  v6[100] = 0;
  *(void *)(v6 + 76) = 0;
  int v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v6 + 24;
  *((void *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    double v6 = (char *)*((void *)this + 2);
    int v10 = (char *)*((void *)this + 1);
    int v11 = (std::__shared_weak_count *)v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    int v10 = v6 + 24;
    int v11 = (std::__shared_weak_count *)v6;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10027A988((uint64_t)&v10, &v12);
  long long v8 = v12;
  long long v12 = 0uLL;
  int v9 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v12 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  if (v11) {
    sub_10000BB9C(v11);
  }
  (*(void (**)(CLKappaEstimatesAlgHighSpeedCrash *))(*(void *)this + 312))(this);
}

void sub_10027A95C(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10027A988@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaEstimatesAlgHighSpeedCrash::CLKappaEstimatesAlgHighSpeedCrash(CLKappaEstimatesAlgHighSpeedCrash *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 11) = off_10039A008;
  *((void *)this + 12) = off_10039A0D0;
  *((void *)this + 13) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003AF1B0);
  *(void *)uint64_t v2 = off_1003AEC90;
  *(void *)(v2 + 88) = off_1003AEF40;
  *(void *)(v2 + 96) = off_1003AF080;
  *(void *)(v2 + 104) = off_1003AF160;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 46) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 56) = 0;
  *(_WORD *)(v2 + 80) = 0;
  uint64_t v3 = (char *)operator new(0x68uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = off_1003AF808;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((void *)v3 + 12) = 0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((void *)v3 + 3) = &off_1003A1CC8;
  *((void *)v3 + 5) = 0x41700000C1C80000;
  *((_DWORD *)v3 + 12) = 9;
  *(void *)(v3 + 84) = 0;
  *(void *)(v3 + 92) = 0;
  v3[100] = 0;
  *(void *)(v3 + 76) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v3 + 24;
  *((void *)this + 2) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    uint64_t v3 = (char *)*((void *)this + 2);
    int v7 = (char *)*((void *)this + 1);
    long long v8 = (std::__shared_weak_count *)v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    int v7 = v3 + 24;
    long long v8 = (std::__shared_weak_count *)v3;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10027A988((uint64_t)&v7, &v9);
  long long v5 = v9;
  long long v9 = 0uLL;
  double v6 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v9 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  if (v8) {
    sub_10000BB9C(v8);
  }
  (*(void (**)(CLKappaEstimatesAlgHighSpeedCrash *))(*(void *)this + 312))(this);
}

void sub_10027AC74(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AF1B0);
  _Unwind_Resume(a1);
}

void CLKappaEstimatesAlgHighSpeedCrash::resetConfiguration(CLKappaEstimatesAlgHighSpeedCrash *this)
{
  id v17 = +[CSPersistentConfiguration configBaseKey:"EstimatesAlgHighSpeedCrashConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = -30.0;
  LODWORD(v4) = -5.0;
  LODWORD(v5) = -25.0;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v17 withMinValue:v3 maxValue:v4 defaultValue:v5];
  LODWORD(v18) = v6;

  int v7 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v8) = 5.0;
  LODWORD(v9) = 30.0;
  LODWORD(v10) = 15.0;
  [v7 algorithmThresholdNumber:1 inArrayForKey:v17 withMinValue:v8 maxValue:v9 defaultValue:v10];
  HIDWORD(v18) = v11;

  long long v12 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v13) = 2.0;
  LODWORD(v14) = 15.0;
  LODWORD(v15) = 9.0;
  [v12 algorithmThresholdNumber:2 inArrayForKey:v17 withMinValue:v13 maxValue:v14 defaultValue:v15];
  unsigned int v19 = v16;

  CLKappaEstimatesAlgHighSpeedCrash::setConfig((uint64_t)this, &v18);
}

void sub_10027ADA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLKappaEstimatesAlgHighSpeedCrash::setConfig(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *a2;
  *(_DWORD *)(v3 + 24) = *((_DWORD *)a2 + 2);
  *(void *)(v3 + 16) = v4;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003AF7D8);
  }
  double v5 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    double v8 = *(float *)(v7 + 16);
    double v9 = *(float *)(v7 + 20);
    int v10 = 134218240;
    double v11 = v8;
    __int16 v12 = 2048;
    double v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[HSC] config, %f, %f", (uint8_t *)&v10, 0x16u);
  }
  return result;
}

uint64_t CLKappaEstimatesAlgHighSpeedCrash::reset(CLKappaEstimatesAlgHighSpeedCrash *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4));
  *((_WORD *)this + 26) = 0;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  return result;
}

uint64_t CLKappaEstimatesAlgHighSpeedCrash::resetCounters(uint64_t this)
{
  *(_WORD *)(this + 52) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 64) = 0;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void CLKappaEstimatesAlgHighSpeedCrash::epochFinalize(CLKappaEstimatesAlgHighSpeedCrash *this, uint64_t a2)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003AF7D8);
  }
  uint64_t v4 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
  {
    int v5 = *((unsigned __int8 *)this + 81);
    int v6 = *((unsigned __int8 *)this + 76);
    int v7 = *((unsigned __int8 *)this + 77);
    int v8 = *((unsigned __int8 *)this + 78);
    int v9 = *((unsigned __int8 *)this + 79);
    int v10 = *((unsigned __int8 *)this + 80);
    int v11 = *((unsigned __int8 *)this + 49);
    int v12 = *((unsigned __int8 *)this + 50);
    int v13 = *((unsigned __int8 *)this + 51);
    int v14 = *((unsigned __int8 *)this + 52);
    int v15 = *((unsigned __int8 *)this + 53);
    int v33 = 67111680;
    int v34 = v5;
    __int16 v35 = 1024;
    int v36 = v6;
    __int16 v37 = 1024;
    int v38 = v7;
    __int16 v39 = 1024;
    int v40 = v8;
    __int16 v41 = 1024;
    int v42 = v9;
    __int16 v43 = 1024;
    int v44 = v10;
    __int16 v45 = 1024;
    int v46 = v11;
    __int16 v47 = 1024;
    int v48 = v12;
    __int16 v49 = 1024;
    int v50 = v13;
    __int16 v51 = 1024;
    int v52 = v14;
    __int16 v53 = 1024;
    int v54 = v15;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[HSC] force %d %d %d %d %d %d is %d %d %d %d %d", (uint8_t *)&v33, 0x44u);
  }
  if (*((unsigned char *)this + 49))
  {
    int v16 = *(_DWORD *)(*((void *)this + 4) + 24);
  }
  else
  {
    int v17 = *((_DWORD *)this + 14);
    BOOL v18 = v17 != 0;
    int v16 = v17 - 1;
    if (!v18) {
      int v16 = 0;
    }
  }
  *((_DWORD *)this + 14) = v16;
  unsigned int v19 = (char *)this + 56;
  if (*((unsigned char *)this + 50))
  {
    int v20 = *(_DWORD *)(*((void *)this + 4) + 24);
  }
  else
  {
    int v21 = *((_DWORD *)this + 15);
    BOOL v18 = v21 != 0;
    int v20 = v21 - 1;
    if (!v18) {
      int v20 = 0;
    }
  }
  *((_DWORD *)this + 15) = v20;
  if (*((unsigned char *)this + 51))
  {
    int v22 = *(_DWORD *)(*((void *)this + 4) + 24);
  }
  else
  {
    int v23 = *((_DWORD *)this + 16);
    BOOL v18 = v23 != 0;
    int v22 = v23 - 1;
    if (!v18) {
      int v22 = 0;
    }
  }
  *((_DWORD *)this + 16) = v22;
  if (*((unsigned char *)this + 52))
  {
    int v24 = *(_DWORD *)(*((void *)this + 4) + 24);
  }
  else
  {
    int v25 = *((_DWORD *)this + 17);
    BOOL v18 = v25 != 0;
    int v24 = v25 - 1;
    if (!v18) {
      int v24 = 0;
    }
  }
  *((_DWORD *)this + 17) = v24;
  if (*((unsigned char *)this + 53))
  {
    int v26 = *(_DWORD *)(*((void *)this + 4) + 24);
  }
  else
  {
    int v27 = *((_DWORD *)this + 18);
    BOOL v18 = v27 != 0;
    int v26 = v27 - 1;
    if (!v18) {
      int v26 = 0;
    }
  }
  *((_DWORD *)this + 18) = v26;
  int v28 = *((unsigned __int8 *)this + 81);
  if (*((unsigned char *)this + 81)) {
    *((unsigned char *)this + 81) = 0;
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003AF7D8);
  }
  __int16 v29 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v33 = 67240192;
    int v34 = v28;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[HSC] decision %{public}d", (uint8_t *)&v33, 8u);
  }
  char v31 = *((unsigned char *)this + 48);
  int v30 = (char *)this + 48;
  uint64_t v32 = *((void *)v30 - 2);
  *(void *)(v32 + 40) = a2;
  *(unsigned char *)(v32 + 32) = v28;
  *(unsigned char *)(v32 + 48) = v31;
  *(_OWORD *)(v32 + 52) = *(_OWORD *)(v30 + 8);
  *(_DWORD *)(v32 + 68) = *((_DWORD *)v30 + 6);
  *(_DWORD *)(v32 + 72) = *(_DWORD *)(v30 + 1);
  *(unsigned char *)(v32 + 76) = v30[5];
  if (v28)
  {
    *((_WORD *)v30 + 2) = 0;
    *(_DWORD *)int v30 = 0;
    *(void *)unsigned int v19 = 0;
    *((void *)v19 + 1) = 0;
    *((_DWORD *)v19 + 4) = 0;
  }
}

void virtual thunk to'CLKappaEstimatesAlgHighSpeedCrash::epochFinalize(CLKappaEstimatesAlgHighSpeedCrash *this, uint64_t a2)
{
}

void CLKappaEstimatesAlgHighSpeedCrash::feedFeatures(uint64_t a1, unsigned char *a2)
{
  if (*(unsigned char *)(a1 + 76))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003AF7D8);
    }
    uint64_t v3 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[HSC] forcing pu", v4, 2u);
    }
    *(unsigned char *)(a1 + 49) = 1;
    *(unsigned char *)(a1 + 76) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 49) = *a2;
  }
}

void virtual thunk to'CLKappaEstimatesAlgHighSpeedCrash::feedFeatures(void *a1, unsigned char *a2)
{
}

void CLKappaEstimatesAlgHighSpeedCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 78))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003AF7D8);
    }
    uint64_t v3 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[HSC] forcing ba", v4, 2u);
    }
    *(unsigned char *)(a1 + 51) = 1;
    *(unsigned char *)(a1 + 78) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 52) != 0;
  }
}

{
  NSObject *v3;
  uint8_t v4[16];

  if (*(unsigned char *)(a1 + 77))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003AF7D8);
    }
    uint64_t v3 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[HSC] forcing ff", v4, 2u);
    }
    *(unsigned char *)(a1 + 50) = 1;
    *(unsigned char *)(a1 + 77) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 44);
  }
}

{
  NSObject *v3;
  uint8_t v4[16];

  if (*(unsigned char *)(a1 + 80))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003AF7D8);
    }
    uint64_t v3 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[HSC] forcing gp", v4, 2u);
    }
    *(unsigned char *)(a1 + 53) = 1;
    *(unsigned char *)(a1 + 80) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 8);
  }
}

void virtual thunk to'CLKappaEstimatesAlgHighSpeedCrash::feedFeatures(void *a1, uint64_t a2)
{
}

{
  CLKappaEstimatesAlgHighSpeedCrash::feedFeatures((unsigned char *)a1 + *(void *)(*a1 - 88), a2);
}

{
  CLKappaEstimatesAlgHighSpeedCrash::feedFeatures((uint64_t)a1 + *(void *)(*a1 - 112), a2);
}

{
  CLKappaEstimatesAlgHighSpeedCrash::feedFeatures((uint64_t)a1 + *(void *)(*a1 - 72), a2);
}

void CLKappaEstimatesAlgHighSpeedCrash::feedFeatures(unsigned char *a1, uint64_t a2)
{
  if (a1[79])
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003AF7D8);
    }
    uint64_t v4 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[HSC] forcing au", v5, 2u);
    }
    a1[52] = 1;
    a1[79] = 0;
  }
  else
  {
    a1[52] = *(unsigned char *)(a2 + 29);
  }
  a1[48] = *(float *)(a2 + 8) > 0.0;
}

uint64_t CLKappaEstimatesAlgHighSpeedCrash::epochReset(uint64_t this)
{
  if (!*(unsigned char *)(this + 76)) {
    *(unsigned char *)(this + 49) = 0;
  }
  if (!*(unsigned char *)(this + 77)) {
    *(unsigned char *)(this + 50) = 0;
  }
  if (!*(unsigned char *)(this + 78)) {
    *(unsigned char *)(this + 51) = 0;
  }
  if (!*(unsigned char *)(this + 79)) {
    *(unsigned char *)(this + 52) = 0;
  }
  if (!*(unsigned char *)(this + 80)) {
    *(unsigned char *)(this + 53) = 0;
  }
  *(unsigned char *)(this + 48) = 0;
  uint64_t v1 = *(void *)(this + 32);
  *(unsigned char *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 48) = 0;
  *(void *)(v1 + 52) = 0;
  *(void *)(v1 + 68) = 0;
  *(void *)(v1 + 60) = 0;
  *(unsigned char *)(v1 + 76) = 0;
  return this;
}

uint64_t virtual thunk to'CLKappaEstimatesAlgHighSpeedCrash::epochReset(CLKappaEstimatesAlgHighSpeedCrash *this)
{
  return CLKappaEstimatesAlgHighSpeedCrash::epochReset((uint64_t)this + *(void *)(*(void *)this - 56));
}

void sub_10027B6EC(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003AEC90;
  *((void *)this + 11) = off_1003AEF40;
  *((void *)this + 12) = off_1003AF080;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_1003AF160;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003AF1B0);
}

void sub_10027B7DC(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003AEC90;
  *((void *)this + 11) = off_1003AEF40;
  *((void *)this + 12) = off_1003AF080;
  *((void *)this + 13) = off_1003AF160;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003AF1B0);

  operator delete();
}

void sub_10027B8DC(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AEC90;
  *((void *)v1 + 11) = off_1003AEF40;
  *((void *)v1 + 12) = off_1003AF080;
  *((void *)v1 + 13) = off_1003AF160;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AF1B0);
}

void sub_10027B9B4(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AEC90;
  *((void *)v1 + 11) = off_1003AEF40;
  *((void *)v1 + 12) = off_1003AF080;
  *((void *)v1 + 13) = off_1003AF160;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AF1B0);

  operator delete();
}

void sub_10027BAA0(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AEC90;
  *((void *)v1 + 11) = off_1003AEF40;
  *((void *)v1 + 12) = off_1003AF080;
  *((void *)v1 + 13) = off_1003AF160;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AF1B0);
}

void sub_10027BB78(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AEC90;
  *((void *)v1 + 11) = off_1003AEF40;
  *((void *)v1 + 12) = off_1003AF080;
  *((void *)v1 + 13) = off_1003AF160;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AF1B0);

  operator delete();
}

void sub_10027BC88(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AEC90;
  *((void *)v1 + 11) = off_1003AEF40;
  *((void *)v1 + 12) = off_1003AF080;
  *((void *)v1 + 13) = off_1003AF160;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AF1B0);
}

void sub_10027BD60(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003AEC90;
  *((void *)v1 + 11) = off_1003AEF40;
  *((void *)v1 + 12) = off_1003AF080;
  *((void *)v1 + 13) = off_1003AF160;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AF1B0);

  operator delete();
}

void sub_10027BE4C(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_10027BE90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003AF808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10027BEB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003AF808;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10027BF04(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

double CLKappaFeaturesAlgLocalAudioResult::log(CLKappaFeaturesAlgLocalAudioResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B0440);
  }
  uint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((unsigned __int8 *)this + 101);
    double v5 = *((float *)this + 20);
    double v6 = *((float *)this + 21);
    double v7 = *((float *)this + 22);
    double v8 = *((float *)this + 23);
    int v9 = *((unsigned __int8 *)this + 96);
    int v10 = *((unsigned __int8 *)this + 97);
    int v11 = *((unsigned __int8 *)this + 98);
    int v12 = *((unsigned __int8 *)this + 99);
    int v13 = *((unsigned __int8 *)this + 100);
    int v14 = *((unsigned __int8 *)this + 168);
    int v15 = *((_DWORD *)this + 43);
    uint64_t v17 = *((void *)this + 22);
    uint64_t v16 = *((void *)this + 23);
    double v18 = *((float *)this + 52);
    double v19 = *((float *)this + 56);
    double v20 = *((float *)this + 4);
    double v21 = *((float *)this + 5);
    double v22 = *((float *)this + 6);
    double v23 = *((float *)this + 7);
    int v25 = *((_DWORD *)this + 8);
    int v24 = *((_DWORD *)this + 9);
    double v26 = *((float *)this + 16);
    int v27 = *((unsigned __int8 *)this + 121);
    double v28 = *((float *)this + 26);
    double v29 = *((float *)this + 27);
    double v30 = *((float *)this + 28);
    int v31 = *((unsigned __int8 *)this + 116);
    int v32 = *((unsigned __int8 *)this + 117);
    int v33 = *((unsigned __int8 *)this + 118);
    int v34 = *((unsigned __int8 *)this + 119);
    int v35 = *((unsigned __int8 *)this + 120);
    double v36 = *((float *)this + 60);
    double v37 = *((float *)this + 64);
    double v38 = *((float *)this + 10);
    double v39 = *((float *)this + 11);
    double v40 = *((float *)this + 12);
    double v41 = *((float *)this + 13);
    int v43 = *((_DWORD *)this + 14);
    int v42 = *((_DWORD *)this + 15);
    v44[0] = 67250176;
    v44[1] = v4;
    __int16 v45 = 2050;
    double v46 = v5;
    __int16 v47 = 2050;
    double v48 = v6;
    __int16 v49 = 2050;
    double v50 = v7;
    __int16 v51 = 2050;
    double v52 = v8;
    __int16 v53 = 1026;
    int v54 = v9;
    __int16 v55 = 1026;
    int v56 = v10;
    __int16 v57 = 1026;
    int v58 = v11;
    __int16 v59 = 1026;
    int v60 = v12;
    __int16 v61 = 1026;
    int v62 = v13;
    __int16 v63 = 1026;
    int v64 = v14;
    __int16 v65 = 1026;
    int v66 = v15;
    __int16 v67 = 2050;
    uint64_t v68 = v17;
    __int16 v69 = 2050;
    uint64_t v70 = v16;
    __int16 v71 = 2050;
    double v72 = v18;
    __int16 v73 = 2050;
    double v74 = v19;
    __int16 v75 = 2050;
    double v76 = v20;
    __int16 v77 = 2050;
    double v78 = v21;
    __int16 v79 = 2050;
    double v80 = v22;
    __int16 v81 = 2050;
    double v82 = v23;
    __int16 v83 = 1026;
    int v84 = v25;
    __int16 v85 = 1026;
    int v86 = v24;
    __int16 v87 = 2050;
    double v88 = v26;
    __int16 v89 = 1026;
    int v90 = v27;
    __int16 v91 = 2050;
    double v92 = v28;
    __int16 v93 = 2050;
    double v94 = v29;
    __int16 v95 = 2050;
    double v96 = v30;
    __int16 v97 = 1026;
    int v98 = v31;
    __int16 v99 = 1026;
    int v100 = v32;
    __int16 v101 = 1026;
    int v102 = v33;
    __int16 v103 = 1026;
    int v104 = v34;
    __int16 v105 = 1026;
    int v106 = v35;
    __int16 v107 = 2050;
    double v108 = v36;
    __int16 v109 = 2050;
    double v110 = v37;
    __int16 v111 = 2050;
    double v112 = v38;
    __int16 v113 = 2050;
    double v114 = v39;
    __int16 v115 = 2050;
    double v116 = v40;
    __int16 v117 = 2050;
    double v118 = v41;
    __int16 v119 = 1026;
    int v120 = v43;
    __int16 v121 = 1026;
    int v122 = v42;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[LA] summary,%{public}d,A,%{public}f,B,%{public}f,C,%{public}f,D,%{public}f,E,%{public}d,F,%{public}d,G,%{public}d,H,%{public}d,I,%{public}d,debug-1,%{public}d,debug-2,%{public}d,debug-3,%{public}llu,debug-4,%{public}llu,debug-5,%{public}f,debug-6,%{public}f,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,config-5,%{public}d,config-6,%{public}d,config-7,%{public}f,J,%{public}d,K,%{public}f,L,%{public}f,M,%{public}f,N,%{public}d,O,%{public}d,P,%{public}d,Q,%{public}d,R,%{public}d,debug-7,%{public}f,debug-8,%{public}f,config-8,%{public}f,config-9,%{public}f,config-10,%{public}f,config-11,%{public}f,config-12,%{public}d,config-13,%{public}d", (uint8_t *)v44, 0x14Au);
  }
  return result;
}

void CLKappaFeaturesAlgLocalAudio::CLKappaFeaturesAlgLocalAudio(CLKappaFeaturesAlgLocalAudio *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  *double v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((void *)this + 44) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  double v6 = (std::__shared_weak_count *)operator new(0x128uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1003B0470;
  sub_10027E658((uint64_t)&v6[1]);
  double v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v6 + 1;
  *((void *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    double v6 = (std::__shared_weak_count *)*((void *)this + 2);
    int v10 = (std::__shared_weak_count *)*((void *)this + 1);
    int v11 = v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    int v10 = v6 + 1;
    int v11 = v6;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10027C5CC((uint64_t)&v10, &v12);
  long long v8 = v12;
  long long v12 = 0uLL;
  int v9 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v12 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  if (v11) {
    sub_10000BB9C(v11);
  }
  (*(void (**)(CLKappaFeaturesAlgLocalAudio *))(*(void *)this + 312))(this);
}

void sub_10027C4D4(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)*((void *)v1 + 41);
  if (v4)
  {
    *((void *)v1 + 42) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)v1 + 38);
  if (v5)
  {
    *((void *)v1 + 39) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)v1 + 35);
  if (v6)
  {
    *((void *)v1 + 36) = v6;
    operator delete(v6);
  }
  double v7 = (void *)*((void *)v1 + 32);
  if (v7)
  {
    *((void *)v1 + 33) = v7;
    operator delete(v7);
  }
  long long v8 = (void *)*((void *)v1 + 29);
  if (v8)
  {
    *((void *)v1 + 30) = v8;
    operator delete(v8);
  }
  int v9 = (void *)*((void *)v1 + 26);
  if (v9)
  {
    *((void *)v1 + 27) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)v1 + 23);
  if (v10)
  {
    *((void *)v1 + 24) = v10;
    operator delete(v10);
  }
  int v11 = (void *)*((void *)v1 + 20);
  if (v11)
  {
    *((void *)v1 + 21) = v11;
    operator delete(v11);
  }
  long long v12 = (void *)*((void *)v1 + 17);
  if (v12)
  {
    *((void *)v1 + 18) = v12;
    operator delete(v12);
  }
  int v13 = (void *)*((void *)v1 + 14);
  if (v13)
  {
    *((void *)v1 + 15) = v13;
    operator delete(v13);
  }
  int v14 = (void *)*((void *)v1 + 11);
  if (v14)
  {
    *((void *)v1 + 12) = v14;
    operator delete(v14);
  }
  int v15 = (void *)*((void *)v1 + 8);
  if (v15)
  {
    *((void *)v1 + 9) = v15;
    operator delete(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v16) {
    sub_10000BB9C(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v17) {
    sub_10000BB9C(v17);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10027C5CC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgLocalAudio::CLKappaFeaturesAlgLocalAudio(CLKappaFeaturesAlgLocalAudio *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 45) = off_10039A008;
  *((void *)this + 46) = off_10039A0D0;
  *((void *)this + 47) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003AFE18);
  *(void *)uint64_t v2 = off_1003AF8F8;
  *(void *)(v2 + 360) = off_1003AFBA8;
  *(void *)(v2 + 368) = off_1003AFCE8;
  *(void *)(v2 + 376) = off_1003AFDC8;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(void *)(v2 + 352) = 0;
  uint64_t v3 = (std::__shared_weak_count *)operator new(0x128uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1003B0470;
  sub_10027E658((uint64_t)&v3[1]);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = v3 + 1;
  *((void *)this + 2) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
    double v7 = (std::__shared_weak_count *)*((void *)this + 1);
    long long v8 = v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    double v7 = v3 + 1;
    long long v8 = v3;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10027C5CC((uint64_t)&v7, &v9);
  long long v5 = v9;
  long long v9 = 0uLL;
  double v6 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v9 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  if (v8) {
    sub_10000BB9C(v8);
  }
  (*(void (**)(CLKappaFeaturesAlgLocalAudio *))(*(void *)this + 312))(this);
}

void sub_10027C88C(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)*((void *)v1 + 41);
  if (v3)
  {
    *((void *)v1 + 42) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)v1 + 38);
  if (v4)
  {
    *((void *)v1 + 39) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)v1 + 35);
  if (v5)
  {
    *((void *)v1 + 36) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)v1 + 32);
  if (v6)
  {
    *((void *)v1 + 33) = v6;
    operator delete(v6);
  }
  double v7 = (void *)*((void *)v1 + 29);
  if (v7)
  {
    *((void *)v1 + 30) = v7;
    operator delete(v7);
  }
  long long v8 = (void *)*((void *)v1 + 26);
  if (v8)
  {
    *((void *)v1 + 27) = v8;
    operator delete(v8);
  }
  long long v9 = (void *)*((void *)v1 + 23);
  if (v9)
  {
    *((void *)v1 + 24) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)v1 + 20);
  if (v10)
  {
    *((void *)v1 + 21) = v10;
    operator delete(v10);
  }
  int v11 = (void *)*((void *)v1 + 17);
  if (v11)
  {
    *((void *)v1 + 18) = v11;
    operator delete(v11);
  }
  long long v12 = (void *)*((void *)v1 + 14);
  if (v12)
  {
    *((void *)v1 + 15) = v12;
    operator delete(v12);
  }
  int v13 = (void *)*((void *)v1 + 11);
  if (v13)
  {
    *((void *)v1 + 12) = v13;
    operator delete(v13);
  }
  int v14 = (void *)*((void *)v1 + 8);
  if (v14)
  {
    *((void *)v1 + 9) = v14;
    operator delete(v14);
  }
  int v15 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v15) {
    sub_10000BB9C(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v16) {
    sub_10000BB9C(v16);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003AFE18);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgLocalAudio::resetConfiguration(CLKappaFeaturesAlgLocalAudio *this)
{
  id v57 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgLAConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = *(_DWORD *)"ff&?33s?";
  LODWORD(v4) = 10.0;
  LODWORD(v5) = 1028443341;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v57 withMinValue:v5 maxValue:v4 defaultValue:v3];
  LODWORD(v58) = v6;

  double v7 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v8) = 1140457472;
  LODWORD(v9) = 1112014848;
  LODWORD(v10) = 10.0;
  [v7 algorithmThresholdNumber:1 inArrayForKey:v57 withMinValue:v10 maxValue:v8 defaultValue:v9];
  DWORD1(v58) = v11;

  long long v12 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v13) = 1120403456;
  LODWORD(v14) = 1.0;
  LODWORD(v15) = 17.0;
  [v12 algorithmThresholdNumber:2 inArrayForKey:v57 withMinValue:v14 maxValue:v13 defaultValue:v15];
  DWORD2(v58) = v16;

  uint64_t v17 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v18) = 1140457472;
  LODWORD(v19) = 1120403456;
  LODWORD(v20) = 10.0;
  [v17 algorithmThresholdNumber:3 inArrayForKey:v57 withMinValue:v20 maxValue:v18 defaultValue:v19];
  HIDWORD(v58) = v21;

  double v22 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned int v59 = [v22 algorithmIntegerNumber:4 inArrayForKey:v57 withMinValue:3 maxValue:128 defaultValue:21];

  double v23 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned int v60 = [v23 algorithmIntegerNumber:5 inArrayForKey:v57 withMinValue:3 maxValue:2048 defaultValue:501];

  int v24 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v25) = *(_DWORD *)"33s?";
  LODWORD(v26) = 2.0;
  LODWORD(v27) = 1028443341;
  [v24 algorithmThresholdNumber:6 inArrayForKey:v57 withMinValue:v27 maxValue:v26 defaultValue:v25];
  int v67 = v28;

  double v29 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v30) = 10.0;
  LODWORD(v31) = 0.75;
  LODWORD(v32) = 1028443341;
  [v29 algorithmThresholdNumber:7 inArrayForKey:v57 withMinValue:v32 maxValue:v30 defaultValue:v31];
  int v61 = v33;

  int v34 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v35) = 1140457472;
  LODWORD(v36) = 1124204544;
  LODWORD(v37) = 10.0;
  [v34 algorithmThresholdNumber:8 inArrayForKey:v57 withMinValue:v37 maxValue:v35 defaultValue:v36];
  int v62 = v38;

  double v39 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v40) = 1120403456;
  LODWORD(v41) = 1109393408;
  LODWORD(v42) = 1.0;
  [v39 algorithmThresholdNumber:9 inArrayForKey:v57 withMinValue:v42 maxValue:v40 defaultValue:v41];
  int v63 = v43;

  int v44 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v45) = 1140457472;
  LODWORD(v46) = 1137180672;
  LODWORD(v47) = 10.0;
  [v44 algorithmThresholdNumber:10 inArrayForKey:v57 withMinValue:v47 maxValue:v45 defaultValue:v46];
  int v64 = v48;

  __int16 v49 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v50) = 3.0;
  LODWORD(v51) = 21.0;
  [v49 algorithmThresholdNumber:11 inArrayForKey:v57 withMinValue:v50 maxValue:5.62950094e14 defaultValue:v51];
  int v65 = (int)v52;

  __int16 v53 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v54) = *(_DWORD *)"";
  LODWORD(v55) = 3.0;
  [v53 algorithmThresholdNumber:12 inArrayForKey:v57 withMinValue:v55 maxValue:2.41785226e24 defaultValue:v54];
  int v66 = (int)v56;

  CLKappaFeaturesAlgLocalAudio::setConfig((uint64_t)this, &v58);
}

void sub_10027CCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgLocalAudio::setConfig(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(_DWORD *)(v3 + 64) = *((_DWORD *)a2 + 12);
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v6;
  *(_OWORD *)(v3 + 16) = v4;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B0440);
  }
  double v7 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v9 = *(float *)a2;
    double v10 = *((float *)a2 + 1);
    double v11 = *((float *)a2 + 2);
    double v12 = *((float *)a2 + 3);
    int v13 = *((_DWORD *)a2 + 4);
    int v14 = *((_DWORD *)a2 + 5);
    double v15 = *((float *)a2 + 12);
    double v16 = *((float *)a2 + 6);
    double v17 = *((float *)a2 + 7);
    double v18 = *((float *)a2 + 8);
    double v19 = *((float *)a2 + 9);
    int v20 = *((_DWORD *)a2 + 10);
    int v21 = *((_DWORD *)a2 + 11);
    int v22 = 134221056;
    double v23 = v9;
    __int16 v24 = 2048;
    double v25 = v10;
    __int16 v26 = 2048;
    double v27 = v11;
    __int16 v28 = 2048;
    double v29 = v12;
    __int16 v30 = 1024;
    int v31 = v13;
    __int16 v32 = 1024;
    int v33 = v14;
    __int16 v34 = 2048;
    double v35 = v15;
    __int16 v36 = 2048;
    double v37 = v16;
    __int16 v38 = 2048;
    double v39 = v17;
    __int16 v40 = 2048;
    double v41 = v18;
    __int16 v42 = 2048;
    double v43 = v19;
    __int16 v44 = 1024;
    int v45 = v20;
    __int16 v46 = 1024;
    int v47 = v21;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[LA] config, %f, %f, %f, %f, %d, %d, %f, %f, %f, %f, %f, %d, %d\n", (uint8_t *)&v22, 0x74u);
  }
  return result;
}

double CLKappaFeaturesAlgLocalAudio::reset(CLKappaFeaturesAlgLocalAudio *this)
{
  (*(void (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4));
  uint64_t v2 = *((void *)this + 4);
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 94) = 0;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 104) = 0;
  *(void *)(v2 + 112) = 0;
  *(_WORD *)(v2 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(void *)(v2 + 160) = 0;
  *((void *)this + 44) = 0;
  return result;
}

void CLKappaFeaturesAlgLocalAudio::epochFinalize(CLKappaFeaturesAlgLocalAudio *this, NSArray *a2)
{
  uint64_t v4 = *((void *)this + 4);
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 94) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;
  *(_WORD *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(void *)(v4 + 160) = 0;
  uint64_t v5 = *((void *)this + 44);
  uint64_t v6 = *((void *)this + 4);
  *(unsigned char *)(v6 + 168) = 0;
  *(_DWORD *)(v6 + 172) = 0;
  *(void *)(v6 + 176) = a2;
  *(void *)(v6 + 184) = v5;
  *(void *)(v6 + 216) = 0;
  *(_DWORD *)(v6 + 224) = 0;
  *(void *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 240) = 0;
  *(void *)(v6 + 248) = 0;
  *(_DWORD *)(v6 + 256) = 0;
  *(void *)(v6 + 264) = 0;
  *(void *)(v6 + 192) = 0;
  *(void *)(v6 + 200) = 0;
  *(_DWORD *)(v6 + 208) = 0;
  id v10 = *(id *)(*((void *)this + 6) + 96);
  if (!*((void *)this + 44) && [v10 count])
  {
    double v7 = [v10 objectAtIndex:0];
    *((void *)this + 44) = [v7 timestamp];
  }
  *(void *)(*((void *)this + 4) + 184) = *((void *)this + 44);
  double v8 = +[CSPlatformInfo sharedInstance];
  unsigned int v9 = [v8 isMDevice];

  if (v9) {
    CLKappaFeaturesAlgLocalAudio::extractFeaturesFromTrustedStream(this, a2);
  }
  else {
    CLKappaFeaturesAlgLocalAudio::computeFeaturesFromSPL(this);
  }
}

void sub_10027D078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgLocalAudio::extractFeaturesFromTrustedStream(CLKappaFeaturesAlgLocalAudio *this, NSArray *a2)
{
  uint64_t v4 = (TrustedAudioHelper *)*(id *)(*((void *)this + 6) + 88);
  uint64_t v5 = TrustedAudioHelper::selectTrustedAudioResult(v4, a2);
  uint64_t v6 = v5;
  if (v5)
  {
    double v7 = (char *)[v5 c_struct];
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B0440);
    }
    double v8 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 134218240;
      id v11 = [v6 timestamp];
      __int16 v12 = 2048;
      unint64_t v13 = +[CSTimeManager SPU_estimate_current_timestamp];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[LA] effts timestamp %llu now %llu", (uint8_t *)&v10, 0x16u);
    }

    uint64_t v9 = *((void *)this + 4);
    *(_DWORD *)(v9 + 80) = *((_DWORD *)v7 + 46);
    *(_DWORD *)(v9 + 84) = *((_DWORD *)v7 + 2);
    *(_DWORD *)(v9 + 88) = *((_DWORD *)v7 + 8);
    *(_DWORD *)(v9 + 92) = *((_DWORD *)v7 + 14);
    *(unsigned char *)(v9 + 101) = v7[80];
    *(_DWORD *)(v9 + 104) = *((_DWORD *)v7 + 22);
    *(_DWORD *)(v9 + 108) = *((_DWORD *)v7 + 28);
    *(_DWORD *)(v9 + 112) = *((_DWORD *)v7 + 34);
    *(unsigned char *)(v9 + 121) = v7[160];
    *(unsigned char *)(v9 + 168) = 1;
    *(_DWORD *)(v9 + 172) = *((_DWORD *)v7 + 48);
    *(_OWORD *)(v9 + 192) = *(_OWORD *)(v7 + 200);
    *(_DWORD *)(v9 + 208) = *((_DWORD *)v7 + 6);
    *(void *)(v9 + 216) = *((void *)v7 + 2);
    *(_DWORD *)(v9 + 224) = *((_DWORD *)v7 + 12);
    *(void *)(v9 + 232) = *((void *)v7 + 5);
    *(_DWORD *)(v9 + 240) = *((_DWORD *)v7 + 26);
    *(void *)(v9 + 248) = *((void *)v7 + 12);
    *(_DWORD *)(v9 + 256) = *((_DWORD *)v7 + 32);
    *(void *)(v9 + 264) = *((void *)v7 + 15);
  }
}

void sub_10027D280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgLocalAudio::computeFeaturesFromSPL(CLKappaFeaturesAlgLocalAudio *this)
{
  uint64_t v1 = this;
  id v2 = *(id *)(*((void *)this + 6) + 80);
  uint64_t v3 = *((void *)v1 + 4);
  float v174 = *(float *)(v3 + 64);
  float v4 = *(float *)(v3 + 16);
  float v163 = *(float *)(v3 + 24);
  float v164 = *(float *)(v3 + 20);
  float v162 = *(float *)(v3 + 28);
  int v5 = *(_DWORD *)(v3 + 32);
  int v6 = *(_DWORD *)(v3 + 36);
  float v7 = *(float *)(v3 + 40);
  float v8 = *(float *)(v3 + 44);
  float v9 = *(float *)(v3 + 48);
  float v10 = *(float *)(v3 + 52);
  int v12 = *(_DWORD *)(v3 + 56);
  int v11 = *(_DWORD *)(v3 + 60);
  if (v5 >= 0) {
    int v13 = v5;
  }
  else {
    int v13 = v5 + 1;
  }
  if (v6 >= 0) {
    int v14 = v6;
  }
  else {
    int v14 = v6 + 1;
  }
  if (v12 >= 0) {
    int v15 = v12;
  }
  else {
    int v15 = v12 + 1;
  }
  if (v11 >= 0) {
    int v16 = v11;
  }
  else {
    int v16 = v11 + 1;
  }
  id v184 = v2;
  id v17 = [v2 count];
  *(_DWORD *)(*((void *)v1 + 4) + 172) = v17;
  if (v17)
  {
    unint64_t v177 = (void *)((char *)v1 + 64);
    sub_10027DF80((uint64_t)v1 + 64, (int)v17);
    v180 = (void *)((char *)v1 + 88);
    sub_10027DF80((uint64_t)v1 + 88, (int)v17);
    v182 = (float **)((char *)v1 + 112);
    sub_10027DF80((uint64_t)v1 + 112, (int)v17);
    v167 = v1;
    int v183 = v14 >> 1;
    if ((int)v17 >= 1)
    {
      int v171 = v16;
      int v175 = v15;
      uint64_t v18 = 0;
      int v19 = v13 >> 1;
      int v20 = -(v13 >> 1);
      do
      {
        uint64_t v21 = v18 + 1;
        if (v19 + (int)v18 + 1 >= (int)v17) {
          signed int v22 = (int)v17;
        }
        else {
          signed int v22 = v19 + v18 + 1;
        }
        double v23 = [v184 objectAtIndex:(v18 - v19) & ~(((int)v18 - v19) >> 31)];
        float v24 = *((float *)[v23 c_struct] + 2);
        if ((LODWORD(v24) & 0x7FFFFFFFu) >= 0x7F800000) {
          float v24 = 0.0;
        }
        if (v24 < 0.0) {
          float v24 = 0.0;
        }
        if (v24 <= 1.0) {
          float v25 = v24;
        }
        else {
          float v25 = 1.0;
        }
        if (((v18 - v19) & ~(((int)v18 - v19) >> 31)) >= v22)
        {
          __int16 v28 = v23;
        }
        else
        {
          uint64_t v26 = v22;
          uint64_t v27 = v20 & ~(v20 >> 31);
          do
          {
            __int16 v28 = [v184 objectAtIndex:v27];

            float v29 = *((float *)[v28 c_struct] + 2);
            if ((LODWORD(v29) & 0x7FFFFFFFu) >= 0x7F800000) {
              float v29 = 0.0;
            }
            if (v29 < 0.0) {
              float v29 = 0.0;
            }
            if (v29 > 1.0) {
              float v29 = 1.0;
            }
            if (v25 < v29) {
              float v25 = v29;
            }
            ++v27;
            double v23 = v28;
          }
          while (v27 < v26);
        }
        *(float *)(*v177 + 4 * v18) = v25;
        *(float *)(*v180 + 4 * v18) = v25 * v25;

        ++v20;
        ++v18;
      }
      while (v21 != v17);
      uint64_t v30 = 0;
      int v31 = *v182;
      int v32 = -v183;
      uint64_t v1 = v167;
      int v15 = v175;
      int v16 = v171;
      do
      {
        uint64_t v33 = v30 + 1;
        int v34 = v183 + v30 + 1;
        if (v34 >= (int)v17) {
          int v34 = (int)v17;
        }
        float v35 = 0.0;
        if (((v30 - v183) & ~(((int)v30 - v183) >> 31)) < v34)
        {
          uint64_t v36 = v32 & ~(v32 >> 31);
          do
            float v35 = v35 + *(float *)(*v180 + 4 * v36++);
          while (v36 < v34);
        }
        v31[v30] = v35;
        ++v32;
        ++v30;
      }
      while (v33 != v17);
    }
    unint64_t v172 = (void *)((char *)v1 + 232);
    unint64_t v37 = (int)v17;
    sub_10027DF80((uint64_t)v1 + 232, (int)v17);
    unint64_t v178 = (void *)((char *)v1 + 256);
    sub_10027DF80((uint64_t)v1 + 256, (int)v17);
    v181 = (float **)((char *)v1 + 280);
    sub_10027DF80((uint64_t)v1 + 280, (int)v17);
    int v176 = v16 >> 1;
    if ((int)v17 >= 1)
    {
      uint64_t v38 = 0;
      int v39 = v15 >> 1;
      int v40 = -(v15 >> 1);
      do
      {
        uint64_t v41 = v38 + 1;
        if (v39 + (int)v38 + 1 >= (int)v17) {
          signed int v42 = (int)v17;
        }
        else {
          signed int v42 = v39 + v38 + 1;
        }
        double v43 = [v184 objectAtIndex:(v38 - v39) & ~(((int)v38 - v39) >> 31)];
        float v44 = *((float *)[v43 c_struct] + 2);
        if ((LODWORD(v44) & 0x7FFFFFFFu) >= 0x7F800000) {
          float v44 = 0.0;
        }
        if (v44 < 0.0) {
          float v44 = 0.0;
        }
        if (v44 <= 1.0) {
          float v45 = v44;
        }
        else {
          float v45 = 1.0;
        }
        if (((v38 - v39) & ~(((int)v38 - v39) >> 31)) >= v42)
        {
          int v47 = v43;
        }
        else
        {
          uint64_t v46 = v40 & ~(v40 >> 31);
          do
          {
            int v47 = [v184 objectAtIndex:v46];

            float v48 = *((float *)[v47 c_struct] + 2);
            if ((LODWORD(v48) & 0x7FFFFFFFu) >= 0x7F800000) {
              float v48 = 0.0;
            }
            if (v48 < 0.0) {
              float v48 = 0.0;
            }
            if (v48 > 1.0) {
              float v48 = 1.0;
            }
            if (v45 < v48) {
              float v45 = v48;
            }
            ++v46;
            double v43 = v47;
          }
          while (v46 < v42);
        }
        *(float *)(*v172 + 4 * v38) = v45;
        *(float *)(*v178 + 4 * v38) = v45 * v45;

        ++v40;
        ++v38;
      }
      while (v41 != v17);
      uint64_t v49 = 0;
      double v50 = *v181;
      int v51 = -v176;
      unint64_t v37 = (int)v17;
      uint64_t v1 = v167;
      do
      {
        uint64_t v52 = v49 + 1;
        int v53 = v176 + v49 + 1;
        if (v53 >= (int)v17) {
          int v53 = (int)v17;
        }
        float v54 = 0.0;
        if (((v49 - v176) & ~(((int)v49 - v176) >> 31)) < v53)
        {
          uint64_t v55 = v51 & ~(v51 >> 31);
          do
            float v54 = v54 + *(float *)(*v178 + 4 * v55++);
          while (v55 < v53);
        }
        v50[v49] = v54;
        ++v51;
        ++v49;
      }
      while (v52 != v17);
    }
    float v56 = (float **)((char *)v1 + 160);
    sub_10027DF80((uint64_t)v1 + 160, v37);
    id v57 = (void *)((char *)v1 + 136);
    sub_10027DF80((uint64_t)v1 + 136, v37);
    long long v58 = (float **)((char *)v1 + 304);
    sub_10027DF80((uint64_t)v1 + 304, v37);
    **((_DWORD **)v1 + 17) = 0;
    if ((int)v17 > 1)
    {
      uint64_t v59 = 1;
      do
      {
        unsigned int v60 = [v184 objectAtIndex:v59];
        uint64_t v61 = v59 - 1;
        int v62 = [v184 objectAtIndex:v59 - 1];
        float v63 = *((float *)[v60 c_struct] + 2);
        int v64 = (float *)[v62 c_struct];
        if ((LODWORD(v63) & 0x7FFFFFFFu) >= 0x7F800000) {
          float v65 = 0.0;
        }
        else {
          float v65 = v63;
        }
        if (v65 < 0.0) {
          float v65 = 0.0;
        }
        if (v65 > 1.0) {
          float v65 = 1.0;
        }
        float v66 = v64[2];
        if ((LODWORD(v66) & 0x7FFFFFFFu) >= 0x7F800000) {
          float v66 = 0.0;
        }
        if (v66 < 0.0) {
          float v66 = 0.0;
        }
        if (v66 > 1.0) {
          float v66 = 1.0;
        }
        *(float *)(*v57 + 4 * v59) = vabds_f32(v65, v66);

        ++v59;
      }
      while (v61 + 2 != v17);
    }
    float v160 = v8;
    float v161 = v7;
    float v158 = v10;
    float v159 = v9;
    float v157 = v4;
    if ((int)v17 < 1)
    {
      id v84 = 0;
      id v83 = 0;
      id v82 = 0;
      id v173 = 0;
      float v168 = 0.0;
      float v169 = 0.0;
      float v179 = 0.0;
      float v89 = 0.0;
      float v88 = 0.0;
      float v170 = 0.0;
      float v87 = 0.0;
      float v86 = 0.0;
      float v85 = 0.0;
    }
    else
    {
      uint64_t v67 = 0;
      uint64_t v68 = *v56;
      int v69 = -v183;
      do
      {
        uint64_t v70 = v67 + 1;
        int v71 = v183 + v67 + 1;
        if (v71 >= (int)v17) {
          int v71 = (int)v17;
        }
        float v72 = 0.0;
        if (((v67 - v183) & ~(((int)v67 - v183) >> 31)) < v71)
        {
          uint64_t v73 = v69 & ~(v69 >> 31);
          do
            float v72 = v72 + *(float *)(*v57 + 4 * v73++);
          while (v73 < v71);
        }
        v68[v67] = v72;
        ++v69;
        ++v67;
      }
      while (v70 != v17);
      uint64_t v74 = 0;
      __int16 v75 = *v58;
      int v76 = -v176;
      do
      {
        uint64_t v77 = v74 + 1;
        int v78 = v176 + v74 + 1;
        if (v78 >= (int)v17) {
          int v78 = (int)v17;
        }
        float v79 = 0.0;
        if (((v74 - v176) & ~(((int)v74 - v176) >> 31)) < v78)
        {
          uint64_t v80 = v76 & ~(v76 >> 31);
          do
            float v79 = v79 + *(float *)(*v57 + 4 * v80++);
          while (v80 < v78);
        }
        v75[v74] = v79;
        ++v76;
        ++v74;
      }
      while (v77 != v17);
      uint64_t v81 = 0;
      id v173 = 0;
      id v82 = 0;
      id v83 = 0;
      id v84 = 0;
      float v85 = 0.0;
      float v86 = 0.0;
      float v87 = 0.0;
      float v169 = 0.0;
      float v170 = 0.0;
      float v168 = 0.0;
      float v88 = 0.0;
      float v89 = 0.0;
      float v179 = 0.0;
      do
      {
        int v90 = [v184 objectAtIndex:v81];
        float v91 = *((float *)[v90 c_struct] + 2);
        if ((LODWORD(v91) & 0x7FFFFFFFu) >= 0x7F800000) {
          float v91 = 0.0;
        }
        if (v91 < 0.0) {
          float v91 = 0.0;
        }
        if (v91 > 1.0) {
          float v91 = 1.0;
        }
        if (v91 > v85) {
          float v85 = v91;
        }
        float v92 = (*v182)[v81];
        if (v92 > v86)
        {
          float v179 = (*v56)[v81];
          id v84 = [v90 timestamp];
          float v86 = v92;
        }
        float v93 = (*v181)[v81];
        if (v93 > v89)
        {
          float v170 = (*v58)[v81];
          id v173 = [v90 timestamp];
          float v89 = v93;
        }
        float v94 = (*v56)[v81];
        if (v94 > v87)
        {
          float v169 = (*v182)[v81];
          id v82 = [v90 timestamp];
          float v87 = v94;
        }
        float v95 = (*v58)[v81];
        if (v95 > v88)
        {
          float v168 = (*v181)[v81];
          id v83 = [v90 timestamp];
          float v88 = v95;
        }

        ++v81;
      }
      while (v17 != v81);
    }
    double v96 = (void *)((char *)v167 + 184);
    sub_10027DF80((uint64_t)v167 + 184, (int)v17);
    v166 = (float **)((char *)v167 + 208);
    sub_10027DF80((uint64_t)v167 + 208, (int)v17);
    unint64_t v165 = (float **)((char *)v167 + 328);
    sub_10027DF80((uint64_t)v167 + 328, (int)v17);
    if ((int)v17 < 1)
    {
      BOOL v140 = 0;
      char v119 = 0;
      char v120 = 0;
      char v121 = 0;
      char v122 = 0;
      char v123 = 0;
      char v139 = 0;
      char v138 = 0;
      LOBYTE(v127) = 0;
      char v137 = 0;
      char v136 = 0;
      float v106 = 0.0;
      float v114 = 0.0;
    }
    else
    {
      uint64_t v98 = 0;
      uint64_t v99 = v17;
      do
      {
        int v100 = [v184 objectAtIndex:v98];
        float v101 = *((float *)[v100 c_struct] + 2);
        if ((LODWORD(v101) & 0x7FFFFFFFu) >= 0x7F800000) {
          float v101 = 0.0;
        }
        if (v101 < 0.0) {
          float v101 = 0.0;
        }
        if (v101 > 1.0) {
          float v101 = 1.0;
        }
        if (v101 <= v174) {
          float v102 = 0.0;
        }
        else {
          float v102 = 1.0;
        }
        *(float *)(*v96 + 4 * v98) = v102;

        ++v98;
      }
      while (v17 != v98);
      uint64_t v103 = 0;
      int v104 = *v166;
      int v105 = -v183;
      float v106 = 0.0;
      do
      {
        uint64_t v107 = v103 + 1;
        int v108 = v183 + v103 + 1;
        if (v108 >= (int)v17) {
          int v108 = (int)v17;
        }
        float v109 = 0.0;
        if (((v103 - v183) & ~(((int)v103 - v183) >> 31)) < v108)
        {
          uint64_t v110 = v105 & ~(v105 >> 31);
          do
            float v109 = v109 + *(float *)(*v96 + 4 * v110++);
          while (v110 < v108);
        }
        v104[v103] = v109;
        if (v109 > v106) {
          float v106 = v109;
        }
        ++v105;
        ++v103;
      }
      while (v107 != v17);
      uint64_t v111 = 0;
      double v112 = *v165;
      int v113 = -v176;
      float v114 = 0.0;
      do
      {
        uint64_t v115 = v111 + 1;
        int v116 = v176 + v111 + 1;
        if (v116 >= (int)v17) {
          int v116 = (int)v17;
        }
        float v117 = 0.0;
        if (((v111 - v176) & ~(((int)v111 - v176) >> 31)) < v116)
        {
          uint64_t v118 = v113 & ~(v113 >> 31);
          do
            float v117 = v117 + *(float *)(*v96 + 4 * v118++);
          while (v118 < v116);
        }
        v112[v111] = v117;
        if (v117 > v114) {
          float v114 = v117;
        }
        ++v113;
        ++v111;
      }
      while (v115 != v17);
      char v119 = 0;
      char v120 = 0;
      char v121 = 0;
      char v122 = 0;
      char v123 = 0;
      __int16 v124 = *v182;
      uint64_t v125 = *v56;
      __int16 v126 = *v166;
      uint64_t v127 = v17;
      do
      {
        float v128 = *v124++;
        float v129 = v128;
        float v130 = *v125++;
        BOOL v131 = v130 > v163;
        float v132 = *v126++;
        BOOL v133 = v132 > v162;
        char v134 = v132 > v162 || v131;
        v120 |= v129 > v164;
        v121 |= v131;
        v123 |= v133;
        v122 |= v134;
        if (v129 > v164) {
          char v135 = v134;
        }
        else {
          char v135 = 0;
        }
        v119 |= v135;
        --v127;
      }
      while (v127);
      char v136 = 0;
      char v137 = 0;
      char v138 = 0;
      char v139 = 0;
      BOOL v140 = v119 != 0;
      if (v85 <= v157) {
        BOOL v140 = 0;
      }
      long long v141 = *v181;
      long long v142 = *v58;
      __int16 v97 = *v165;
      do
      {
        float v143 = *v141++;
        float v144 = v143;
        float v145 = *v142++;
        BOOL v146 = v145 > v159;
        float v147 = *v97++;
        BOOL v148 = v147 > v158;
        char v149 = v147 > v158 || v146;
        v138 |= v144 > v160;
        LOBYTE(v127) = v127 | v146;
        v137 |= v148;
        v136 |= v149;
        if (v144 > v160) {
          char v150 = v149;
        }
        else {
          char v150 = 0;
        }
        v139 |= v150;
        --v99;
      }
      while (v99);
    }
    uint64_t v151 = *((void *)v167 + 4);
    BOOL v152 = v139 != 0;
    if (v85 <= v161) {
      BOOL v152 = 0;
    }
    *(float *)(v151 + 80) = v85;
    *(float *)(v151 + 84) = v86;
    *(float *)(v151 + 88) = v87;
    *(float *)(v151 + 92) = v106;
    *(unsigned char *)(v151 + 96) = v120;
    *(unsigned char *)(v151 + 97) = v121;
    *(unsigned char *)(v151 + 98) = v123;
    *(unsigned char *)(v151 + 99) = v122;
    *(unsigned char *)(v151 + 100) = v119;
    *(unsigned char *)(v151 + 101) = v140;
    *(float *)(v151 + 104) = v89;
    *(float *)(v151 + 108) = v88;
    *(float *)(v151 + 112) = v114;
    *(unsigned char *)(v151 + 116) = v138;
    *(unsigned char *)(v151 + 117) = v127;
    *(unsigned char *)(v151 + 118) = v137;
    *(unsigned char *)(v151 + 119) = v136;
    *(unsigned char *)(v151 + 120) = v139;
    *(unsigned char *)(v151 + 121) = v152;
    v153 = [v184 objectAtIndex:0];
    v154 = [v184 objectAtIndex:(((void)v17 << 32) - 0x100000000) >> 32];
    *(unsigned char *)(*((void *)v167 + 4) + 168) = 1;
    *(void *)(*((void *)v167 + 4) + 192) = [v153 timestamp];
    id v155 = [v154 timestamp];
    uint64_t v156 = *((void *)v167 + 4);
    *(void *)(v156 + 200) = v155;
    *(float *)(v156 + 208) = v179;
    *(void *)(v156 + 216) = v84;
    *(float *)(v156 + 224) = v169;
    *(void *)(v156 + 232) = v82;
    *(float *)(v156 + 240) = v170;
    *(void *)(v156 + 248) = v173;
    *(float *)(v156 + 256) = v168;
    *(void *)(v156 + 264) = v83;
  }
}

void sub_10027DEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  _Unwind_Resume(a1);
}

void virtual thunk to'CLKappaFeaturesAlgLocalAudio::epochFinalize(CLKappaFeaturesAlgLocalAudio *this, NSArray *a2)
{
}

void sub_10027DF80(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_10027E224((char **)a1, a2 - v2);
  }
}

void sub_10027DFB0(CLKappaAlgBlock *a1)
{
}

void sub_10027DFBC(CLKappaAlgBlock *a1)
{
  operator delete();
}

void sub_10027E000(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  float v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    sub_10000BB9C(v4);
  }
}

void sub_10027E02C(void *a1)
{
}

void sub_10027E050(void *a1)
{
  operator delete();
}

void sub_10027E0A8(void *a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 32);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v5 = (std::__shared_weak_count *)*((void *)v2 + 7);
  *((void *)v2 + 6) = v4;
  *((void *)v2 + 7) = v3;
  if (v5) {
    sub_10000BB9C(v5);
  }
}

void sub_10027E0E8(void *a1)
{
}

void sub_10027E10C(void *a1)
{
  operator delete();
}

void sub_10027E164(void *a1)
{
}

void sub_10027E188(void *a1)
{
  operator delete();
}

void sub_10027E1E0(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_10027E224(char **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  float v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    float v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_10000EE98();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      int v14 = (char *)sub_100024458(v4, v13);
      float v8 = *a1;
      float v7 = a1[1];
    }
    else
    {
      int v14 = 0;
    }
    int v15 = &v14[4 * v11];
    int v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    id v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_10027E340(CLKappaAlgBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  int v5 = (void *)*((void *)this + 41);
  if (v5)
  {
    *((void *)this + 42) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 38);
  if (v6)
  {
    *((void *)this + 39) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 35);
  if (v7)
  {
    *((void *)this + 36) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)this + 32);
  if (v8)
  {
    *((void *)this + 33) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 29);
  if (v9)
  {
    *((void *)this + 30) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 26);
  if (v10)
  {
    *((void *)this + 27) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 23);
  if (v11)
  {
    *((void *)this + 24) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 20);
  if (v12)
  {
    *((void *)this + 21) = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)*((void *)this + 17);
  if (v13)
  {
    *((void *)this + 18) = v13;
    operator delete(v13);
  }
  int v14 = (void *)*((void *)this + 14);
  if (v14)
  {
    *((void *)this + 15) = v14;
    operator delete(v14);
  }
  int v15 = (void *)*((void *)this + 11);
  if (v15)
  {
    *((void *)this + 12) = v15;
    operator delete(v15);
  }
  int v16 = (void *)*((void *)this + 8);
  if (v16)
  {
    *((void *)this + 9) = v16;
    operator delete(v16);
  }
  id v17 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v17) {
    sub_10000BB9C(v17);
  }
  int v18 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v18) {
    sub_10000BB9C(v18);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, a2 + 1);
}

void sub_10027E5BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003B0470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10027E5DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003B0470;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10027E630(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

double sub_10027E658(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)a1 = &off_1003A17E8;
  *(_OWORD *)(a1 + 16) = xmmword_10033E1C0;
  *(void *)(a1 + 32) = 0x1F500000015;
  *(_OWORD *)(a1 + 40) = xmmword_10033E1B0;
  *(void *)(a1 + 56) = 0x7D100000015;
  *(_DWORD *)(a1 + 64) = 1064514355;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 94) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  return result;
}

void CLKappaDeescalatorMovingGps::CLKappaDeescalatorMovingGps(CLKappaDeescalatorMovingGps *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  uint64_t v2 = (char *)sub_100007BC0((void *)this + 6, "none");
  *(void *)this = &off_1003B04C0;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 74) = 0;
  *((_DWORD *)this + 19) = 0;
  *((unsigned char *)this + 80) = 0;
  *((_DWORD *)this + 21) = 0;
  *((unsigned char *)this + 88) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((void *)this + 7) = 7;
    uint64_t v2 = (char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 71) = 7;
  }
  strcpy(v2, "de-MGPS");
}

uint64_t CLKappaDeescalatorMovingGps::assertReady(CLKappaDeescalatorMovingGps *this, uint64_t a2, const char *a3)
{
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 74), (BOOL)"[de-MGPS] missing config", a3);
}

uint64_t CLKappaDeescalatorMovingGps::setConfig(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  if (!*(unsigned char *)(result + 74)) {
    *(unsigned char *)(result + 74) = 1;
  }
  *(_WORD *)(result + 72) = v2;
  return result;
}

void CLKappaDeescalatorMovingGps::resetConfiguration(CLKappaDeescalatorMovingGps *this)
{
  id v4 = +[CSPersistentConfiguration configBaseKey:"DeescalatorMGPSConfig" forFeatureMode:*((unsigned __int8 *)this + 32)];
  __int16 v2 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned __int16 v3 = (unsigned __int16)[v2 intThreshold:&CLKappaDeescalatorMovingGps::kConfigurationDefaults forKey:v4];
  if (!*((unsigned char *)this + 74)) {
    *((unsigned char *)this + 74) = 1;
  }
  *((_WORD *)this + 36) = v3;
  *((unsigned char *)this + 88) = CLKappaDeescalator::shouldForce(this, "ForceEscalateGPS");
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceMovingGps");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceMovingGps");
}

void sub_10027E8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLKappaDeescalatorMovingGps::log(CLKappaDeescalatorMovingGps *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 74)) {
    sub_100007D1C();
  }
  int v4 = *((_DWORD *)this + 19);
  int v5 = *((_DWORD *)this + 21);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B0540);
  }
  int v6 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *((_DWORD *)this + 6);
    int v8 = *((unsigned __int8 *)this + 32);
    int v9 = *((unsigned __int16 *)this + 36);
    int v10 = 134350336;
    uint64_t v11 = a2;
    __int16 v12 = 1026;
    int v13 = v7;
    __int16 v14 = 1026;
    int v15 = v8;
    __int16 v16 = 1026;
    int v17 = v9;
    __int16 v18 = 1026;
    int v19 = v4;
    __int16 v20 = 1026;
    int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[de-MGPS] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,config-1,%{public}u,debug-1a,%{public}u,debug-1b,%{public}u", (uint8_t *)&v10, 0x2Au);
  }
}

uint64_t CLKappaDeescalatorMovingGps::updateCountTotal(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 76);
  if (!*(unsigned char *)(this + 80)) {
    v1 += *(_DWORD *)(this + 84);
  }
  *(_DWORD *)(this + 84) = v1;
  return this;
}

uint64_t CLKappaDeescalatorMovingGps::updateWithFeatures(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 80) = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(result + 76) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CLKappaDeescalatorMovingGps::onEvaluateBetweenMinAndMaxHoldDuration(CLKappaDeescalatorMovingGps *this)
{
  if (*((unsigned char *)this + 88)) {
    return 0;
  }
  if (!*((unsigned char *)this + 74)) {
    sub_100007D1C();
  }
  return 4 * (*((_DWORD *)this + 21) >= *((unsigned __int8 *)this + 72));
}

uint64_t CLKappaDeescalatorMovingGps::onPreviousEpochMadeDecision(uint64_t this)
{
  *(unsigned char *)(this + 80) = 0;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

uint64_t CLKappaDeescalatorMovingGps::onEarlyCrashDetected(uint64_t this)
{
  *(_DWORD *)(this + 84) = 0;
  return this;
}

void sub_10027EAD0(void **a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

void sub_10027EB08(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void MartyCompanionUUID::MartyCompanionUUID(MartyCompanionUUID *this)
{
  *(void *)this = off_1003B0570;
  *((void *)this + 1) = 0;
}

{
  *(void *)this = off_1003B0570;
  *((void *)this + 1) = 0;
}

void MartyCompanionUUID::~MartyCompanionUUID(MartyCompanionUUID *this)
{
  *(void *)this = off_1003B0570;
  uint64_t v4 = *((void *)this + 1);
  __int16 v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *__int16 v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  MartyCompanionUUID::~MartyCompanionUUID(this);

  operator delete();
}

void MartyCompanionUUID::MartyCompanionUUID(MartyCompanionUUID *this, const MartyCompanionUUID *a2)
{
  *(void *)this = off_1003B0570;
  *((void *)this + 1) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
}

const MartyCompanionUUID *MartyCompanionUUID::operator=(const MartyCompanionUUID *a1, const MartyCompanionUUID *a2)
{
  if (a1 != a2)
  {
    MartyCompanionUUID::MartyCompanionUUID((MartyCompanionUUID *)&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    MartyCompanionUUID::~MartyCompanionUUID((MartyCompanionUUID *)&v5);
  }
  return a1;
}

uint64_t swap(uint64_t result, MartyCompanionUUID *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)(result + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v2;
  return result;
}

void *MartyCompanionUUID::MartyCompanionUUID(void *a1, uint64_t a2)
{
  *a1 = off_1003B0570;
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *v3;
  *uint64_t v3 = v4;
  if (v5) {
    sub_100012E84((uint64_t)v3, v5);
  }
  return a1;
}

uint64_t MartyCompanionUUID::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    MartyCompanionUUID::MartyCompanionUUID(&v5, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v6;
    uint64_t v6 = v3;
    MartyCompanionUUID::~MartyCompanionUUID((MartyCompanionUUID *)&v5);
  }
  return a1;
}

uint64_t MartyCompanionUUID::formatText(MartyCompanionUUID *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t MartyCompanionUUID::readFrom(MartyCompanionUUID *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t MartyCompanionUUID::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t MartyCompanionUUID::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  unint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t MartyCompanionUUID::hash_value(MartyCompanionUUID *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return sub_100012EE0((uint64_t)&v3, v1);
  }
  else {
    return 0;
  }
}

double CMOQuaternion::operator*@<D0>(uint64_t a1@<X0>, float *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q0>)
{
  float v4 = *(float *)(a1 + 8);
  a4.i32[0] = *(_DWORD *)(a1 + 12);
  float v5 = a2[1];
  float v6 = *(float *)(a1 + 4);
  float v7 = a2[2];
  float v8 = a2[3];
  float32_t v9 = (float)((float)((float)(v4 * v5) + (float)(a4.f32[0] * *a2)) - (float)(v6 * v7)) + (float)(*(float *)a1 * v8);
  float32_t v10 = (float)((float)((float)(a4.f32[0] * v5) - (float)(v4 * *a2)) + (float)(*(float *)a1 * v7)) + (float)(v6 * v8);
  float32_t v11 = (float)((float)((float)(v6 * *a2) - (float)(*(float *)a1 * v5)) + (float)(a4.f32[0] * v7)) + (float)(v4 * v8);
  float v12 = (float)((float)-(float)(v6 * v5) - (float)(*(float *)a1 * *a2)) - (float)(v4 * v7);
  a3->f32[0] = v9;
  a3->f32[1] = v10;
  a4.f32[0] = v12 + (float)(a4.f32[0] * v8);
  a3->f32[2] = v11;
  a3->i32[3] = a4.i32[0];
  *(void *)&double result = CMOQuaternion::normalize(a3, a4).u64[0];
  return result;
}

BOOL CMOQuaternion::operator==(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

double CMOQuaternion::conj@<D0>(float32x2_t *this@<X0>, float32x4_t *a2@<X8>, float32x4_t a3@<Q0>)
{
  __int32 v3 = this[1].i32[1];
  a3.f32[0] = -this[1].f32[0];
  *(float32x2_t *)a2->f32 = vneg_f32(*this);
  a2->i32[2] = a3.i32[0];
  a2->i32[3] = v3;
  *(void *)&double result = CMOQuaternion::normalize(a2, a3).u64[0];
  return result;
}

double CMOQuaternion::negate@<D0>(float32x4_t *this@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v2 = vnegq_f32(*this);
  *a2 = v2;
  *(void *)&double result = CMOQuaternion::normalize(a2, v2).u64[0];
  return result;
}

float32x4_t CMOQuaternion::forceScalarPositive@<Q0>(float32x4_t *this@<X0>, float32x4_t *a2@<X8>)
{
  if (this->f32[3] >= 0.0)
  {
    float32x4_t result = *this;
    *a2 = *this;
  }
  else
  {
    float32x4_t v2 = vnegq_f32(*this);
    *a2 = v2;
    result.i64[0] = CMOQuaternion::normalize(a2, v2).u64[0];
  }
  return result;
}

double CMOQuaternion::deltaTo@<D0>(float32x2_t *this@<X0>, const CMOQuaternion *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q0>)
{
  __int32 v6 = this[1].i32[1];
  a4.f32[0] = -this[1].f32[0];
  *(float32x2_t *)v9.f32 = vneg_f32(*this);
  v9.i64[1] = __PAIR64__(v6, a4.u32[0]);
  float32x4_t v7 = CMOQuaternion::normalize(&v9, a4);
  CMOQuaternion::operator*((uint64_t)a2, v9.f32, &v10, v7);
  *(void *)&double result = CMOQuaternion::forceScalarPositive(&v10, a3).u64[0];
  return result;
}

float CMOQuaternion::roll(CMOQuaternion *this)
{
  float v1 = *((float *)this + 1);
  float v2 = (float)(*(float *)this * *((float *)this + 2)) - (float)(*((float *)this + 3) * v1);
  return -atan2f(v2 + v2, (float)((float)((float)(v1 * v1) + (float)(*(float *)this * *(float *)this)) * -2.0) + 1.0);
}

float CMOQuaternion::pitch(CMOQuaternion *this)
{
  return asinf((float)((float)(*(float *)this * *((float *)this + 3)) + (float)(*((float *)this + 1) * *((float *)this + 2)))+ (float)((float)(*(float *)this * *((float *)this + 3)) + (float)(*((float *)this + 1) * *((float *)this + 2))));
}

float CMOQuaternion::yaw(CMOQuaternion *this)
{
  float v1 = *((float *)this + 2);
  float v2 = (float)(*(float *)this * *((float *)this + 1)) - (float)(*((float *)this + 3) * v1);
  return -atan2f(v2 + v2, (float)((float)((float)(v1 * v1) + (float)(*(float *)this * *(float *)this)) * -2.0) + 1.0);
}

float CMOQuaternion::gravity(CMOQuaternion *this)
{
  uint64_t v1 = 0;
  float v2 = *((float *)this + 2);
  float v3 = *((float *)this + 3);
  float v4 = *((float *)this + 1);
  float v5 = (float)((float)(v3 * v4) - (float)(*(float *)this * v2))
     + (float)((float)(v3 * v4) - (float)(*(float *)this * v2));
  float v6 = (float)-(float)(v3 * *(float *)this) - (float)(v4 * v2);
  float v7 = (float)((float)((float)(v4 * v4) + (float)(*(float *)this * *(float *)this)) * 2.0) + -1.0;
  *(float *)float32x4_t v10 = v5;
  *(float *)&v10[1] = v6 + v6;
  *(float *)&v10[2] = v7;
  float v8 = 0.0;
  do
  {
    float v8 = v8 + (float)(*(float *)&v10[v1] * *(float *)&v10[v1]);
    ++v1;
  }
  while (v1 != 3);
  return v5 / sqrtf(v8);
}

float CMOQuaternion::north(CMOQuaternion *this)
{
  uint64_t v1 = 0;
  float v2 = *((float *)this + 1);
  float v4 = *((float *)this + 2);
  float v3 = *((float *)this + 3);
  float v5 = (float)((float)((float)(*(float *)this * *(float *)this) + (float)(v3 * v3)) * 2.0) + -1.0;
  float v6 = (float)((float)(*(float *)this * v2) - (float)(v3 * v4))
     + (float)((float)(*(float *)this * v2) - (float)(v3 * v4));
  float v7 = (float)((float)(v3 * v2) + (float)(*(float *)this * v4))
     + (float)((float)(v3 * v2) + (float)(*(float *)this * v4));
  v10[0] = v5;
  v10[1] = v6;
  v10[2] = v7;
  float v8 = 0.0;
  do
  {
    float v8 = v8 + (float)(v10[v1] * v10[v1]);
    ++v1;
  }
  while (v1 != 3);
  return v5 / sqrtf(v8);
}

void CMOQuaternion::rotateVectorInPlace(CMOQuaternion *a1, uint64_t a2)
{
  CMOQuaternion::rotationMatrixShared(a1, 1.0, v5);
  *(float *)a2 = sub_10027F464((uint64_t)v5, (float *)a2);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
}

float sub_10027F464(uint64_t a1, float *a2)
{
  for (unint64_t i = 0; i != 3; ++i)
  {
    float v5 = sub_100280500(a1, i, 0) * *a2;
    *(float *)sub_100021EF8((uint64_t)&v11, i) = v5;
    for (unint64_t j = 1; j != 3; ++j)
    {
      float v7 = sub_100280500(a1, i, j);
      float v8 = sub_100023FE4((uint64_t)a2, j);
      float32x4_t v9 = (float *)sub_100021EF8((uint64_t)&v11, i);
      *float32x4_t v9 = *v9 + (float)(v7 * v8);
    }
  }
  return v11;
}

float CMOQuaternion::rotationMatrix@<S0>(CMOQuaternion *this@<X0>, float *a2@<X8>)
{
  return CMOQuaternion::rotationMatrixShared(this, 1.0, a2);
}

float CMOQuaternion::rotateVector(CMOQuaternion *a1, float a2, float a3, float a4)
{
  v5[0] = a2;
  v5[1] = a3;
  v5[2] = a4;
  CMOQuaternion::rotationMatrixShared(a1, 1.0, v6);
  return sub_10027F464((uint64_t)v6, v5);
}

void CMOQuaternion::rotateFrameInPlace(CMOQuaternion *a1, uint64_t a2)
{
  CMOQuaternion::rotationMatrixShared(a1, -1.0, v5);
  *(float *)a2 = sub_10027F464((uint64_t)v5, (float *)a2);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
}

float CMOQuaternion::rotationMatrixTranspose@<S0>(CMOQuaternion *this@<X0>, float *a2@<X8>)
{
  return CMOQuaternion::rotationMatrixShared(this, -1.0, a2);
}

float CMOQuaternion::rotateFrame(CMOQuaternion *a1, float a2, float a3, float a4)
{
  v5[0] = a2;
  v5[1] = a3;
  v5[2] = a4;
  CMOQuaternion::rotationMatrixShared(a1, -1.0, v6);
  return sub_10027F464((uint64_t)v6, v5);
}

double CMOQuaternion::angleAxis(float32x4_t *a1, float *a2)
{
  uint64_t v4 = 0;
  float v5 = 0.0;
  do
  {
    float v5 = v5 + (float)(a2[v4] * a2[v4]);
    ++v4;
  }
  while (v4 != 3);
  float v6 = sqrtf(v5);
  float v7 = 0.5;
  float v8 = v6 * 0.5;
  if ((float)(v6 * 0.5) > 0.0) {
    float v7 = (float)(sinf(v6 * 0.5) / v8) * 0.5;
  }
  a1->f32[0] = v7 * *a2;
  a1->f32[1] = v7 * a2[1];
  a1->f32[2] = v7 * a2[2];
  v9.f32[0] = cosf(v8);
  a1->i32[3] = v9.i32[0];

  *(void *)&double result = CMOQuaternion::normalize(a1, v9).u64[0];
  return result;
}

float32x4_t CMOQuaternion::normalize(float32x4_t *this, float32x4_t result)
{
  result.f32[0] = sqrtf((float)((float)((float)(this->f32[1] * this->f32[1]) + (float)(this->f32[0] * this->f32[0]))+ (float)(this->f32[2] * this->f32[2]))+ (float)(this->f32[3] * this->f32[3]));
  float v2 = result.f32[0] + -1.0;
  if ((float)(result.f32[0] + -1.0) <= 0.0) {
    float v2 = -(float)(result.f32[0] + -1.0);
  }
  if (v2 >= 0.00000011921)
  {
    if (result.f32[0] == 0.0)
    {
      this->i64[0] = 0;
      this->i64[1] = 0x3F80000000000000;
    }
    else
    {
      double result = vdivq_f32(*this, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 0));
      *this = result;
    }
  }
  return result;
}

float CMOQuaternion::angleAxis(float32x4_t *this)
{
  float32x4_t v8 = *this;
  CMOQuaternion::forceScalarPositive(&v8, &v7);
  uint64_t v1 = 0;
  float32x4_t v8 = v7;
  float v2 = v7.f32[0];
  float v3 = 0.0;
  do
  {
    float v3 = v3 + (float)(v7.f32[v1] * v7.f32[v1]);
    ++v1;
  }
  while (v1 != 3);
  float v4 = sqrtf(v3);
  if (v4 >= 0.00000011921)
  {
    float v5 = atan2f(v4, v8.f32[3]);
    return v2 * (float)((float)(v5 + v5) / v4);
  }
  return v2;
}

BOOL CMOQuaternion::northAndGravity(float *a1, float32x4_t *a2, uint64_t a3, float a4, float a5, float a6, float a7, float a8, float a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, float a18)
{
  float v153 = a4;
  float v154 = a5;
  float v155 = a6;
  float v150 = a7;
  float v151 = a8;
  float v152 = a9;
  uint64_t v148 = a17;
  float v149 = a18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DD6E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1003DD6E0))
  {
    dword_1003DD6D8 = 1043452116;
    __cxa_guard_release(&qword_1003DD6E0);
  }
  uint64_t v19 = 0;
  float v20 = 0.0;
  do
  {
    float v20 = v20 + (float)(*(float *)((char *)&v153 + v19) * *(float *)((char *)&v153 + v19));
    v19 += 4;
  }
  while (v19 != 12);
  if (sqrtf(v20) == 0.0) {
    return 0;
  }
  uint64_t v21 = 0;
  float v22 = 0.0;
  do
  {
    float v22 = v22 + (float)(*(float *)((char *)&v150 + v21) * *(float *)((char *)&v150 + v21));
    v21 += 4;
  }
  while (v21 != 12);
  if (sqrtf(v22) == 0.0) {
    return 0;
  }
  uint64_t v25 = 0;
  *(float *)long long buf = v153;
  *(float *)&uint8_t buf[4] = v154;
  *(float *)&buf[8] = v155;
  float v26 = 0.0;
  do
  {
    float v26 = v26 + (float)(*(float *)&buf[v25] * *(float *)&buf[v25]);
    v25 += 4;
  }
  while (v25 != 12);
  uint64_t v27 = 0;
  float v28 = sqrtf(v26);
  float v29 = v153 / v28;
  float v30 = v154 / v28;
  float v31 = v155 / v28;
  float v153 = v29;
  float v154 = v30;
  float v155 = v31;
  *(float *)long long buf = v150;
  *(float *)&uint8_t buf[4] = v151;
  *(float *)&buf[8] = v152;
  float v32 = 0.0;
  do
  {
    float v32 = v32 + (float)(*(float *)&buf[v27] * *(float *)&buf[v27]);
    v27 += 4;
  }
  while (v27 != 12);
  uint64_t v33 = 0;
  float v34 = sqrtf(v32);
  float v35 = v150 / v34;
  float v36 = v151 / v34;
  float v37 = v152 / v34;
  float v150 = v35;
  float v151 = v36;
  float v152 = v37;
  float v38 = (float)(v30 * v37) - (float)(v31 * v36);
  float v39 = (float)(v31 * v35) - (float)(v29 * v37);
  float v40 = (float)(v29 * v36) - (float)(v30 * v35);
  float v145 = v38;
  float v146 = v39;
  float v147 = v40;
  float v41 = 0.0;
  do
  {
    float v41 = v41 + (float)(*(float *)((char *)&v145 + v33) * *(float *)((char *)&v145 + v33));
    v33 += 4;
  }
  while (v33 != 12);
  float v42 = sqrtf(v41);
  if (v42 < *(float *)&dword_1003DD6D8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)long long buf = 134218498;
      *(CFAbsoluteTime *)&uint8_t buf[4] = Current;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<"
                            "float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)";
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(double *)&buf[24] = v42;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "STATUS,Generic,Time,%.3f,Function,\"%s\",n and g are too close %f\n", buf, 0x20u);
    }
    return 0;
  }
  uint64_t v44 = 0;
  float v45 = v38 / v42;
  float v46 = v39 / v42;
  float v145 = v38 / v42;
  float v146 = v39 / v42;
  float v47 = v40 / v42;
  float v147 = v40 / v42;
  float v48 = v149;
  *(void *)long long buf = v148;
  *(float *)&buf[8] = v149;
  float v49 = 0.0;
  do
  {
    float v49 = v49 + (float)(*(float *)&buf[v44] * *(float *)&buf[v44]);
    v44 += 4;
  }
  while (v44 != 12);
  uint64_t v50 = 0;
  float v51 = sqrtf(v49);
  float v52 = *((float *)&v148 + 1) / v51;
  *(float *)&uint64_t v148 = *(float *)&v148 / v51;
  *((float *)&v148 + 1) = v52;
  float v149 = v149 / v51;
  uint64_t v143 = 0;
  float v144 = -1.0;
  float v53 = (float)((float)(v48 / v51) * -0.0) - v52;
  float v54 = 0.0;
  *(float *)long long buf = v53;
  *(float *)&uint8_t buf[4] = *(float *)&v148 + (float)(v149 * 0.0);
  *(float *)&buf[8] = (float)(v52 * -0.0) + (float)(*(float *)&v148 * 0.0);
  do
  {
    float v54 = v54 + (float)(*(float *)&buf[v50] * *(float *)&buf[v50]);
    v50 += 4;
  }
  while (v50 != 12);
  uint64_t v55 = 0;
  float v56 = sqrtf(v54);
  v142[0] = v53 / v56;
  v142[1] = (float)(*(float *)&v148 + (float)(v149 * 0.0)) / v56;
  v142[2] = (float)((float)(v52 * -0.0) + (float)(*(float *)&v148 * 0.0)) / v56;
  float v57 = (float)(v36 * v47) - (float)(v37 * v46);
  float v58 = (float)(v37 * v45) - (float)(v35 * v47);
  float v59 = (float)(v35 * v46) - (float)(v36 * v45);
  *(float *)long long buf = v57;
  *(float *)&uint8_t buf[4] = v58;
  *(float *)&buf[8] = v59;
  float v60 = 0.0;
  do
  {
    float v60 = v60 + (float)(*(float *)&buf[v55] * *(float *)&buf[v55]);
    v55 += 4;
  }
  while (v55 != 12);
  float v61 = sqrtf(v60);
  float v153 = v57 / v61;
  float v154 = v58 / v61;
  float v155 = v59 / v61;
  sub_100280108((uint64_t)&v153, (uint64_t)&v148, (uint64_t)buf);
  sub_100280108((uint64_t)&v150, (uint64_t)&v143, (uint64_t)&v139);
  sub_100280108((uint64_t)&v145, (uint64_t)v142, (uint64_t)v137);
  float v62 = *a1;
  float v63 = (float)((float)(a1[1] * a1[1]) + (float)(v62 * v62)) + (float)((float)(v62 + v62) * a1[1]);
  if (v63 == 0.0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100280BA0();
    }
    __assert_rtn("northAndGravity", "CMOQuaternion.cpp", 214, "false");
  }
  v135[0] = v137[0];
  v135[1] = v137[1];
  int v136 = v138;
  long long v126 = *(_OWORD *)buf;
  long long v127 = *(_OWORD *)&buf[16];
  int v128 = v159;
  int v116 = 0;
  float v64 = sqrtf(v63);
  float v117 = v155;
  float v118 = -v154;
  float v119 = -v155;
  int v120 = 0;
  float v121 = v153;
  float v122 = v154;
  float v123 = -v153;
  int v124 = 0;
  sub_10028019C((uint64_t)&v116, (uint64_t)v137, (uint64_t)v125);
  int v108 = 0;
  float v109 = v149;
  float v110 = -*((float *)&v148 + 1);
  float v111 = -v149;
  int v112 = 0;
  uint64_t v113 = v148;
  float v114 = -*(float *)&v148;
  int v115 = 0;
  sub_10028019C((uint64_t)v125, (uint64_t)&v108, (uint64_t)v156);
  for (unint64_t i = 0; i != 9; ++i)
    *((float *)&v126 + i) = *((float *)&v126 + i) - sub_100280A90((uint64_t)v156, i);
  uint64_t v66 = 0;
  float v67 = 1.0 / v64;
  long long v129 = v126;
  long long v130 = v127;
  int v131 = v128;
  do
  {
    *(float *)((char *)&v129 + v66) = (float)(v62 * v67) * *(float *)((char *)&v129 + v66);
    v66 += 4;
  }
  while (v66 != 36);
  unint64_t v68 = 0;
  long long v132 = v129;
  long long v133 = v130;
  int v134 = v131;
  do
  {
    *((float *)v135 + v68) = sub_100280A90((uint64_t)&v132, v68) + *((float *)v135 + v68);
    ++v68;
  }
  while (v68 != 9);
  float v69 = a1[1];
  long long v102 = v139;
  long long v103 = v140;
  int v104 = v141;
  int v116 = 0;
  float v117 = v152;
  float v118 = -v151;
  float v119 = -v152;
  int v120 = 0;
  float v121 = v150;
  float v122 = v151;
  float v123 = -v150;
  int v124 = 0;
  sub_10028019C((uint64_t)&v116, (uint64_t)v137, (uint64_t)v125);
  int v108 = 0;
  float v109 = v144;
  float v110 = -*((float *)&v143 + 1);
  float v111 = -v144;
  int v112 = 0;
  uint64_t v113 = v143;
  float v114 = -*(float *)&v143;
  int v115 = 0;
  sub_10028019C((uint64_t)v125, (uint64_t)&v108, (uint64_t)v156);
  for (unint64_t j = 0; j != 9; ++j)
    *((float *)&v102 + j) = *((float *)&v102 + j) - sub_100280A90((uint64_t)v156, j);
  uint64_t v71 = 0;
  long long v105 = v102;
  long long v106 = v103;
  int v107 = v104;
  do
  {
    *(float *)((char *)&v105 + v71) = (float)(v67 * v69) * *(float *)((char *)&v105 + v71);
    v71 += 4;
  }
  while (v71 != 36);
  unint64_t v72 = 0;
  long long v132 = v105;
  long long v133 = v106;
  int v134 = v107;
  do
  {
    v73.f32[0] = sub_100280A90((uint64_t)&v132, v72) + *((float *)v135 + v72);
    *((_DWORD *)v135 + v72++) = v73.i32[0];
  }
  while (v72 != 9);
  CMOQuaternion::rotationMatrix(a2, (float *)v135, v73);
  uint64_t v74 = 0;
  float v75 = *a1;
  long long v96 = *(_OWORD *)buf;
  long long v97 = *(_OWORD *)&buf[16];
  int v98 = v159;
  do
  {
    *(float *)((char *)&v96 + v74) = v75 * *(float *)((char *)&v96 + v74);
    v74 += 4;
  }
  while (v74 != 36);
  uint64_t v76 = 0;
  int v101 = v98;
  long long v99 = v96;
  long long v100 = v97;
  float v77 = a1[1];
  int v95 = v141;
  long long v93 = v139;
  long long v94 = v140;
  do
  {
    *(float *)((char *)&v93 + v76) = v77 * *(float *)((char *)&v93 + v76);
    v76 += 4;
  }
  while (v76 != 36);
  unint64_t v78 = 0;
  *(_OWORD *)uint64_t v156 = v93;
  *(_OWORD *)&v156[16] = v94;
  int v157 = v95;
  do
  {
    *((float *)&v99 + v78) = sub_100280A90((uint64_t)v156, v78) + *((float *)&v99 + v78);
    ++v78;
  }
  while (v78 != 9);
  uint64_t v79 = 0;
  long long v132 = v99;
  long long v133 = v100;
  int v134 = v101;
  float v80 = 0.0;
  do
  {
    float v80 = v80 + (float)(*(float *)((char *)&v132 + v79) * *(float *)((char *)&v132 + v79));
    v79 += 4;
  }
  while (v79 != 36);
  float v81 = sqrtf(v80);
  float v82 = (float)(v63 - (float)(v81 * v81)) * 0.5;
  BOOL v23 = v82 != 0.0;
  if (v82 == 0.0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      CFAbsoluteTime v92 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)uint64_t v156 = 134218242;
      *(CFAbsoluteTime *)&v156[4] = v92;
      *(_WORD *)&v156[12] = 2080;
      *(void *)&v156[14] = "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector"
                             "<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)";
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "STATUS,Generic,Time,%.3f,Function,\"%s\",kappa zero!\n", v156, 0x16u);
    }
  }
  else
  {
    unint64_t v83 = 0;
    float v84 = v67 * (float)(1.0 / v82);
    do
    {
      for (unint64_t k = 0; k != 3; ++k)
      {
        unint64_t v86 = 0;
        *(_DWORD *)sub_100280448(a3, v83, k) = 0;
        do
        {
          float v87 = sub_100280500((uint64_t)&v132, v83, v86);
          float v88 = sub_100280500((uint64_t)&v132, k, v86);
          float v89 = (float *)sub_100280448(a3, v83, k);
          *float v89 = *v89 + (float)(v87 * v88);
          ++v86;
        }
        while (v86 != 3);
        int v90 = (float *)sub_100280448(a3, v83, k);
        *int v90 = v84 * *v90;
      }
      float v91 = (float *)sub_100280448(a3, v83, v83);
      *float v91 = v67 + *v91;
      ++v83;
    }
    while (v83 != 3);
  }
  return v23;
}

float *sub_100280108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  for (unint64_t i = 0; i != 3; ++i)
  {
    for (unint64_t j = 0; j != 3; ++j)
    {
      float v8 = sub_100023FE4(a1, i);
      float v9 = v8 * sub_100023FE4(a2, j);
      double result = (float *)sub_100280448(a3, i, j);
      *double result = v9;
    }
  }
  return result;
}

float *sub_10028019C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  for (unint64_t i = 0; i != 3; ++i)
  {
    for (unint64_t j = 0; j != 3; ++j)
    {
      float v8 = sub_100280500(a1, i, 0);
      float v9 = v8 * sub_100280500(a2, 0, j);
      *(float *)sub_100280448(a3, i, j) = v9;
      for (unint64_t k = 1; k != 3; ++k)
      {
        float v11 = sub_100280500(a1, i, k);
        float v12 = sub_100280500(a2, k, j);
        double result = (float *)sub_100280448(a3, i, j);
        *double result = *result + (float)(v11 * v12);
      }
    }
  }
  return result;
}

double CMOQuaternion::rotationMatrix(float32x4_t *a1, float *a2, float32x4_t a3)
{
  float v3 = *a2;
  float v4 = a2[4];
  float v5 = a2[8];
  float v6 = (float)(*a2 + v4) + v5;
  if (v6 <= 0.0)
  {
    if (v3 > v4)
    {
      BOOL v8 = v3 == v5;
      BOOL v9 = v3 < v5;
    }
    else
    {
      BOOL v8 = 1;
      BOOL v9 = 0;
    }
    if (v9 || v8)
    {
      if (v4 <= v5)
      {
        float v15 = (float)((float)((float)-v3 - v4) + v5) + 1.0;
        float v16 = 0.5 / sqrtf(v15);
        a1->f32[2] = v15 * v16;
        a1->f32[3] = v16 * (float)(a2[3] - a2[1]);
        a1->f32[0] = v16 * (float)(a2[2] + a2[6]);
        a3.f32[0] = v16 * (float)(a2[7] + a2[5]);
        a1->i32[1] = a3.i32[0];
      }
      else
      {
        float v10 = (float)((float)(v4 - v3) - v5) + 1.0;
        float v11 = 0.5 / sqrtf(v10);
        a1->f32[1] = v10 * v11;
        a1->f32[0] = v11 * (float)(a2[3] + a2[1]);
        a1->f32[3] = v11 * (float)(a2[2] - a2[6]);
        a3.f32[0] = v11 * (float)(a2[7] + a2[5]);
        a1->i32[2] = a3.i32[0];
      }
    }
    else
    {
      float v13 = (float)((float)(v3 - v4) - v5) + 1.0;
      float v14 = 0.5 / sqrtf(v13);
      a1->f32[0] = v13 * v14;
      a1->f32[1] = v14 * (float)(a2[3] + a2[1]);
      a1->f32[2] = v14 * (float)(a2[2] + a2[6]);
      a3.f32[0] = v14 * (float)(a2[7] - a2[5]);
      a1->i32[3] = a3.i32[0];
    }
  }
  else
  {
    float v7 = 0.5 / sqrtf(v6 + 1.0);
    a1->f32[3] = (float)(v6 + 1.0) * v7;
    a1->f32[2] = v7 * (float)(a2[3] - a2[1]);
    a1->f32[1] = v7 * (float)(a2[2] - a2[6]);
    a3.f32[0] = v7 * (float)(a2[7] - a2[5]);
    a1->i32[0] = a3.i32[0];
  }
  *(void *)&double result = CMOQuaternion::normalize(a1, a3).u64[0];
  return result;
}

uint64_t sub_100280448(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 >= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100280C2C();
    }
    __assert_rtn("operator()", "CMMatrix.h", 77, "false");
  }
  if (a3 >= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100280CB8();
    }
    __assert_rtn("operator()", "CMMatrix.h", 78, "false");
  }
  return a1 + 4 * (3 * a3 + a2);
}

float sub_100280500(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 >= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100280D44();
    }
    __assert_rtn("operator()", "CMMatrix.h", 70, "false");
  }
  if (a3 >= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100280DD0();
    }
    __assert_rtn("operator()", "CMMatrix.h", 71, "false");
  }
  return *(float *)(a1 + 4 * (3 * a3 + a2));
}

float CMOQuaternion::rotationMatrixShared@<S0>(CMOQuaternion *this@<X0>, float a2@<S0>, float *a3@<X8>)
{
  float v4 = *((float *)this + 2);
  float v3 = *((float *)this + 3);
  float v5 = v3 + v3;
  float v6 = *(float *)this;
  float v7 = *((float *)this + 1);
  float v8 = v7 + v7;
  float v9 = v3 * (float)(v3 + v3);
  float v10 = (float)((float)(v7 + v7) * v7) + -1.0;
  float v11 = (float)((float)(v4 + v4) * v4) + -1.0;
  float v12 = (float)(v6 + v6) * v7;
  float v13 = (float)(v6 + v6) * v4;
  float v14 = v3 * (float)(v6 + v6);
  float v15 = v8 * v4;
  float v16 = v3 * v8;
  float v17 = v5 * v4;
  float v18 = v9 + (float)((float)((float)(v6 + v6) * v6) + -1.0);
  float v19 = v12 - (float)(v17 * a2);
  float v20 = v13 + (float)(v16 * a2);
  float v21 = v12 + (float)(v17 * a2);
  float v22 = v9 + v10;
  float v23 = v15 - (float)(v14 * a2);
  float v24 = v13 - (float)(v16 * a2);
  float result = v15 + (float)(v14 * a2);
  *a3 = v18;
  a3[1] = v19;
  a3[2] = v20;
  a3[3] = v21;
  a3[4] = v22;
  a3[5] = v23;
  a3[6] = v24;
  a3[7] = result;
  a3[8] = v9 + v11;
  return result;
}

BOOL CMOQuaternion::inverted(CMOQuaternion *this)
{
  float v1 = CMOQuaternion::gravity(this);
  return v3 > sqrtf((float)(v2 * v2) + (float)(v1 * v1));
}

void CMOQuaternion::headingReference(CMOQuaternion *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1003DD6F0, memory_order_acquire) & 1) == 0)
  {
    float v17 = this;
    int v16 = __cxa_guard_acquire(&qword_1003DD6F0);
    this = v17;
    if (v16)
    {
      dword_1003DD6E8 = 1043452116;
      __cxa_guard_release(&qword_1003DD6F0);
      this = v17;
    }
  }
  float v2 = CMOQuaternion::gravity(this);
  float v4 = v3;
  uint64_t v5 = 0;
  float v6 = sqrtf((float)(v3 * v3) + (float)(v2 * v2));
  float v7 = 1.0;
  if (v1 <= v6) {
    float v7 = -1.0;
  }
  uint64_t v20 = 0x3F80000000000000;
  int v21 = 0;
  float v8 = v1 * v7;
  float v9 = (float)(v1 * -0.0) + (float)(v4 * v7);
  float v10 = -(float)(v2 * v7);
  float v11 = 0.0;
  float v12 = v10 + (float)(v1 * 0.0);
  float v13 = (float)(v4 * -0.0) + (float)(v2 * 0.0);
  *(float *)float v19 = v9;
  *(float *)&v19[1] = v12;
  *(float *)&v19[2] = v13;
  do
  {
    float v11 = v11 + (float)(*(float *)&v19[v5] * *(float *)&v19[v5]);
    ++v5;
  }
  while (v5 != 3);
  float v14 = sqrtf(v11);
  if (v14 > *(float *)&dword_1003DD6E8)
  {
    float v15 = (float)-atan2f(v6, v8) / v14;
    v22[0] = v9 * v15;
    v22[1] = v15 * v12;
    v22[2] = v15 * v13;
    CMOQuaternion::angleAxis(&v18, v22);
    CMOQuaternion::rotationMatrixShared((CMOQuaternion *)&v18, -1.0, v22);
    sub_10027F464((uint64_t)v22, (float *)&v20);
  }
}

float CMOQuaternion::heading(CMOQuaternion *this)
{
  CMOQuaternion::headingReference(this);
  float v5 = CMOQuaternion::rotateFrame(this, v2, v3, v4);
  for (float result = atan2f(-v6, v5) * 57.2957795; result < 0.0; float result = result + 360.0)
    ;
  for (; result >= 360.0; float result = result + -360.0)
    ;
  return result;
}

float *CMMath::wrap(float *this, float *a2)
{
  float v2 = *this;
  if (*this < 0.0)
  {
    do
      float v2 = v2 + 360.0;
    while (v2 < 0.0);
    *this = v2;
  }
  if (v2 >= 360.0)
  {
    do
      float v2 = v2 + -360.0;
    while (v2 >= 360.0);
    *this = v2;
  }
  return this;
}

double CMOQuaternion::slerp@<D0>(float32x4_t *this@<X0>, float32x4_t *a2@<X1>, float a3@<S0>, float32x4_t *a4@<X8>)
{
  if (a3 < 0.0 || a3 > 1.0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100280E5C();
    }
    __assert_rtn("slerp", "CMOQuaternion.cpp", 381, "false");
  }
  float32x4_t v28 = *this;
  CMOQuaternion::normalize(&v28, v28);
  float32x4_t v27 = *a2;
  CMOQuaternion::normalize(&v27, v27);
  uint64_t v10 = v27.i64[0];
  float v11 = v28.f32[2];
  uint64_t v12 = v27.i64[1];
  float v13 = fmaxf(fminf((float)((float)((float)(v28.f32[1] * v27.f32[1]) + (float)(v28.f32[0] * v27.f32[0]))+ (float)(v28.f32[2] * v27.f32[2]))+ (float)(v28.f32[3] * v27.f32[3]), 1.0), -1.0);
  float v14 = -v13;
  if (v13 > 0.0) {
    float v14 = v13;
  }
  float v15 = v14 + -1.0;
  if ((float)(v14 + -1.0) <= 0.0) {
    float v15 = -v15;
  }
  if (v15 >= 0.00000011921)
  {
    uint64_t v25 = v28.i64[0];
    float v26 = v28.f32[3];
    float v17 = acosf(v13);
    float v18 = sinf(v17);
    float v19 = sinf((float)(1.0 - a3) * v17);
    float v20 = v17 * a3;
    float v21 = v19 / v18;
    v23.f32[0] = sinf(v20) / v18;
    float32_t v22 = (float)(*(float *)&v12 * v23.f32[0]) + (float)(v21 * v11);
    a4->f32[0] = (float)(*(float *)&v10 * v23.f32[0]) + (float)(v21 * *(float *)&v25);
    a4->f32[1] = (float)(*((float *)&v10 + 1) * v23.f32[0]) + (float)(v21 * *((float *)&v25 + 1));
    v23.f32[0] = (float)(*((float *)&v12 + 1) * v23.f32[0]) + (float)(v21 * v26);
    a4->f32[2] = v22;
    a4->i32[3] = v23.i32[0];
    v16.i64[0] = CMOQuaternion::normalize(a4, v23).u64[0];
  }
  else
  {
    float32x4_t v16 = *this;
    *a4 = *this;
  }
  return *(double *)v16.i64;
}

float sub_100280A90(uint64_t a1, unint64_t a2)
{
  if (a2 >= 9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100280F74();
    }
    __assert_rtn("operator[]", "CMMatrix.h", 84, "false");
  }
  return *(float *)(a1 + 4 * a2);
}

void sub_100280AF8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

void sub_100280B14()
{
  CFAbsoluteTimeGetCurrent();
  sub_100024A44();
  sub_100024A58();
  sub_100280AF8((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid index %zu >= %zu\n", v1, v2, v3, v4, v5);
}

void sub_100280BA0()
{
  CFAbsoluteTimeGetCurrent();
  sub_100024A44();
  uint64_t v1 = "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const floa"
       "t *, CMOQuaternion &, CMMatrix<float, 3> &)";
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid weights\n", v0, 0x16u);
}

void sub_100280C2C()
{
  CFAbsoluteTimeGetCurrent();
  sub_100024A44();
  sub_100024A58();
  sub_100280AF8((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid row %zu > %zu\n", v1, v2, v3, v4, v5);
}

void sub_100280CB8()
{
  CFAbsoluteTimeGetCurrent();
  sub_100024A44();
  sub_100024A58();
  sub_100280AF8((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid col %zu > %zu\n", v1, v2, v3, v4, v5);
}

void sub_100280D44()
{
  CFAbsoluteTimeGetCurrent();
  sub_100024A44();
  sub_100024A58();
  sub_100280AF8((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid row %zu > %zu\n", v1, v2, v3, v4, v5);
}

void sub_100280DD0()
{
  CFAbsoluteTimeGetCurrent();
  sub_100024A44();
  sub_100024A58();
  sub_100280AF8((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid col %zu > %zu\n", v1, v2, v3, v4, v5);
}

void sub_100280E5C()
{
  CFAbsoluteTimeGetCurrent();
  sub_100024A44();
  uint64_t v1 = "static CMOQuaternion CMOQuaternion::slerp(const CMOQuaternion &, const CMOQuaternion &, const float)";
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",Invalid time t for slerp\n", v0, 0x16u);
}

void sub_100280EE8()
{
  CFAbsoluteTimeGetCurrent();
  sub_100024A44();
  sub_100024A58();
  sub_100280AF8((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid index %zu >= %zu\n", v1, v2, v3, v4, v5);
}

void sub_100280F74()
{
  CFAbsoluteTimeGetCurrent();
  sub_100024A44();
  sub_100280AF8((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid element %zu >= %zu\n", v1, v2, v3, v4, v5);
}

void CLKappaDeescalatorSteps::CLKappaDeescalatorSteps(CLKappaDeescalatorSteps *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  uint64_t v2 = (char *)sub_100007BC0((void *)this + 6, "none");
  *(void *)this = off_1003B05C0;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 88) = 0;
  *((void *)this + 12) = 0xC00000000;
  *((void *)this + 325) = 0x1100000000;
  *((void *)this + 329) = 0xB00000000;
  *((unsigned char *)this + 3080) = 0;
  *((unsigned char *)this + 3120) = 0;
  *((void *)this + 391) = 0;
  *(void *)((char *)this + 3133) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((void *)this + 7) = 8;
    uint64_t v2 = (char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 71) = 8;
  }
  strcpy(v2, "de-Steps");
}

uint64_t CLKappaDeescalatorSteps::assertReady(CLKappaDeescalatorSteps *this, uint64_t a2, const char *a3)
{
  CLKappaDeescalator::assertCrashTimestamp(this, a2, a3);
  uint64_t v5 = *((unsigned __int8 *)this + 88);

  return CLKappaDeescalator::raiseUnless(v5, (BOOL)"[de-Steps] missing config", v4);
}

double CLKappaDeescalatorSteps::prepareForNextEpoch(CLKappaDeescalatorSteps *this)
{
  double result = 0.0;
  *((void *)this + 391) = 0;
  *((_DWORD *)this + 784) = 0;
  return result;
}

uint64_t CLKappaDeescalatorSteps::setConfig(uint64_t result, _OWORD *a2)
{
  int v2 = *(unsigned __int8 *)(result + 88);
  *(_OWORD *)(result + 72) = *a2;
  if (!v2) {
    *(unsigned char *)(result + 88) = 1;
  }
  return result;
}

void CLKappaDeescalatorSteps::resetConfiguration(CLKappaDeescalatorSteps *this)
{
  id v10 = +[CSPersistentConfiguration configBaseKey:"DeescalatorStepsConfig" forFeatureMode:*((unsigned __int8 *)this + 32)];
  int v2 = +[CSPersistentConfiguration sharedConfiguration];
  [v2 floatThreshold:&CLKappaDeescalatorSteps::kConfigurationDefaults forKey:v10];
  int v4 = v3;
  [v2 floatThreshold:&unk_10033E330 forKey:v10];
  int v6 = v5;
  unsigned int v7 = [v2 intThreshold:&unk_10033E340 forKey:v10];
  unsigned int v8 = [v2 intThreshold:&unk_10033E350 forKey:v10];
  int v9 = *((unsigned __int8 *)this + 88);
  *((_DWORD *)this + 18) = v4;
  *((_DWORD *)this + 19) = v6;
  *((_DWORD *)this + 20) = v7;
  *((_DWORD *)this + 21) = v8;
  if (!v9) {
    *((unsigned char *)this + 88) = 1;
  }
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceSteps");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceSteps");
}

void sub_10028129C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLKappaDeescalatorSteps::log(CLKappaDeescalatorSteps *this, uint64_t a2)
{
  if (*((unsigned char *)this + 3120))
  {
    unsigned int v4 = *((float *)this + 774);
    int v5 = *((unsigned __int8 *)this + 3088);
    int v6 = *((unsigned __int8 *)this + 3104);
    uint64_t v7 = *((void *)this + 389);
    double v8 = *((float *)this + 775);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    double v8 = 0.0;
  }
  if (!*((unsigned char *)this + 88)) {
    sub_100007D1C();
  }
  float v9 = *((float *)this + 782);
  int v10 = *((unsigned __int16 *)this + 1317);
  float v11 = *((float *)this + 783);
  int v12 = *((_DWORD *)this + 784);
  int v13 = *((unsigned __int8 *)this + 3140);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B0640);
  }
  float v14 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *((_DWORD *)this + 6);
    int v16 = *((unsigned __int8 *)this + 32);
    double v17 = *((float *)this + 18);
    double v18 = *((float *)this + 19);
    int v19 = *((_DWORD *)this + 20);
    int v20 = *((_DWORD *)this + 21);
    int v21 = 134353152;
    uint64_t v22 = a2;
    __int16 v23 = 1026;
    int v24 = v15;
    __int16 v25 = 1026;
    int v26 = v16;
    __int16 v27 = 2050;
    double v28 = v17;
    __int16 v29 = 2050;
    double v30 = v18;
    __int16 v31 = 1026;
    int v32 = v19;
    __int16 v33 = 1026;
    int v34 = v20;
    __int16 v35 = 2050;
    double v36 = v8;
    __int16 v37 = 1026;
    unsigned int v38 = v4;
    __int16 v39 = 1026;
    int v40 = v5;
    __int16 v41 = 1026;
    int v42 = v6;
    __int16 v43 = 2050;
    double v44 = v9;
    __int16 v45 = 2050;
    uint64_t v46 = v7;
    __int16 v47 = 1026;
    int v48 = v10;
    __int16 v49 = 2050;
    double v50 = v11;
    __int16 v51 = 1026;
    int v52 = v12;
    __int16 v53 = 1026;
    int v54 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[de-Steps] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,config-1,%{public}f,config-2,%{public}f,config-3,%{public}u,config-4,%{public}u,debug-1a,%{public}f,debug-1b,%{public}u,debug-1c,%{public}u,debug-1d,%{public}u,debug-1e,%{public}f,debug-1f,%{public}llu,debug-1g,%{public}u,debug-1h,%{public}f,debug-1i,%{public}u,debug-1j,%{public}u", (uint8_t *)&v21, 0x84u);
  }
}

unsigned __int16 *CLKappaDeescalatorSteps::updateWithBaroFeatures(uint64_t a1, _OWORD *a2)
{
  return sub_100037DBC((unsigned __int16 *)(a1 + 96), a2);
}

uint64_t CLKappaDeescalatorSteps::updateWithHighSpeedCrash(uint64_t this, char a2)
{
  uint64_t v2 = *(unsigned __int16 *)(this + 2602);
  unint64_t v3 = *(unsigned int *)(this + 2604);
  uint64_t v4 = *(unsigned __int16 *)(this + 2600);
  if (v4 + v2 >= v3) {
    uint64_t v5 = *(unsigned int *)(this + 2604);
  }
  else {
    uint64_t v5 = 0;
  }
  *(unsigned char *)(this + 2600 + v4 + v2 - v5 + 8) = a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    *(_WORD *)(this + 2600) = v4 + 1 - v3;
  }
  else
  {
    *(_WORD *)(this + 2602) = v2 + 1;
  }
  return this;
}

unsigned __int16 *CLKappaDeescalatorSteps::updateWithStepsFeatures(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v3 = result;
  if (*(unsigned char *)(a2 + 8)) {
    double result = sub_100281574(result + 1316, (long long *)a2);
  }
  int v4 = *((unsigned __int8 *)v3 + 3120);
  uint64_t v5 = *(void *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 1540) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 1548) = v6;
  *((void *)v3 + 389) = v5;
  if (!v4) {
    *((unsigned char *)v3 + 3120) = 1;
  }
  return result;
}

unsigned __int16 *sub_100281574(unsigned __int16 *result, long long *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  int v4 = &result[20 * (v3 - v2)];
  long long v6 = *a2;
  long long v5 = a2[1];
  *((void *)v4 + 5) = *((void *)a2 + 4);
  *(_OWORD *)(v4 + 4) = v6;
  *(_OWORD *)(v4 + 12) = v5;
  unsigned int v7 = result[1];
  unint64_t v8 = *((unsigned int *)result + 1);
  if (v8 <= v7)
  {
    unint64_t v9 = *result + 1;
    if (v9 < v8) {
      LOWORD(v8) = 0;
    }
    *double result = v9 - v8;
  }
  else
  {
    result[1] = v7 + 1;
  }
  return result;
}

uint64_t CLKappaDeescalatorSteps::getAirbagDetectedStats(unsigned __int16 *a1)
{
  if (!a1[1]) {
    return 0;
  }
  unint64_t v2 = 0;
  char v3 = 0;
  do
  {
    if (*(unsigned char *)(sub_1000380EC(a1, v2) + 52)) {
      char v3 = 1;
    }
    ++v2;
  }
  while (v2 < a1[1]);
  return v3 & 1;
}

float CLKappaDeescalatorSteps::getStepsStats(unsigned __int16 *a1, unint64_t a2, float a3)
{
  uint64_t v3 = a1[1];
  float v4 = 0.0;
  if (a1[1])
  {
    if (*(void *)sub_100281858(a1, 0) <= a2)
    {
      int v8 = v3 - 1;
      unint64_t v9 = 1;
      while (v3 != v9)
      {
        int v10 = (unint64_t *)sub_100281858(a1, v9++);
        if (*v10 > a2)
        {
          int v8 = v9 - 2;
          break;
        }
      }
    }
    else
    {
      int v8 = -1;
    }
    if (v8 < 0)
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003B0640);
      }
      int v21 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__int16 v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Something is funny with steps history", v23, 2u);
      }
    }
    else
    {
      unint64_t v11 = 0;
      int v12 = v8 - 3;
      unint64_t v13 = (v8 + 6);
      int v14 = v8 - 2;
      unint64_t v15 = (v8 + 3);
      int64_t v16 = v14;
      int64_t v17 = v12;
      float v18 = 0.0;
      float v19 = 0.0;
      float v4 = 0.0;
      if (v3 <= 1) {
        uint64_t v3 = 1;
      }
      else {
        uint64_t v3 = v3;
      }
      do
      {
        if ((uint64_t)v11 >= v17 && v11 <= v13)
        {
          if ((uint64_t)v11 <= v16 || v11 >= v15)
          {
            uint64_t v20 = sub_100281858(a1, v11);
            if (v4 < *(float *)(v20 + 20)) {
              float v4 = *(float *)(v20 + 20);
            }
            if (*(float *)(sub_100281858(a1, v11) + 20) > a3 && !*(unsigned char *)(sub_100281858(a1, v11) + 24)) {
              float v19 = v19 + *(float *)(sub_100281858(a1, v11) + 16);
            }
          }
          float v18 = v18 + 2.56;
        }
        ++v11;
      }
      while (v3 != v11);
    }
  }
  return v4;
}

uint64_t sub_100281858(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      int v8 = *((_DWORD *)a1 + 1);
      int v9 = 134218754;
      CFAbsoluteTime v10 = Current;
      __int16 v11 = 2080;
      int v12 = "const T &CMQueue<CLKappaFeaturesAlgStepsOutput>::operator[](const size_t) const [T = CLKappaFeaturesAlgStepsOutput]";
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 1024;
      int v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  unint64_t v5 = *a1 + a2;
  if (v5 < v4) {
    unint64_t v4 = 0;
  }
  return (uint64_t)&a1[20 * (v5 - v4) + 4];
}

uint64_t CLKappaDeescalatorSteps::getStepsCountStats(unsigned __int16 *a1, int a2)
{
  uint64_t v2 = a1[1];
  if (!a1[1]) {
    return 0;
  }
  unint64_t v3 = (v2 - a2) & ~(((int)v2 - a2) >> 31);
  if (v3 >= v2) {
    return 0;
  }
  LODWORD(v5) = 0;
  do
    uint64_t v5 = (float)(*(float *)(sub_100281858(a1, v3++) + 16) + (float)v5);
  while (v2 != v3);
  return v5;
}

uint64_t CLKappaDeescalatorSteps::onEvaluateAtMinHoldDuration(CLKappaDeescalatorSteps *this)
{
  if (!*((unsigned char *)this + 88)) {
    sub_100007D1C();
  }
  float v3 = *((float *)this + 18);
  float v2 = *((float *)this + 19);
  unint64_t v4 = (unsigned __int16 *)((char *)this + 2632);
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  if (!*((unsigned char *)this + 16)) {
    uint64_t v5 = (unint64_t *)&unk_10033E388;
  }
  float StepsStats = CLKappaDeescalatorSteps::getStepsStats(v4, *v5, v2);
  float v8 = v7;
  char HighSpeedDetectedStats = CLKappaDeescalator::getHighSpeedDetectedStats((unsigned __int16 *)this + 1300);
  char AirbagDetectedStats = CLKappaDeescalatorSteps::getAirbagDetectedStats((unsigned __int16 *)this + 48);
  uint64_t result = 0;
  *((float *)this + 782) = StepsStats;
  *((float *)this + 783) = v8;
  BOOL v12 = v8 <= v3 || StepsStats <= v2;
  if (!v12 && (HighSpeedDetectedStats & 1) == 0 && (AirbagDetectedStats & 1) == 0)
  {
    *((unsigned char *)this + 3140) = 1;
    return 4;
  }
  return result;
}

uint64_t CLKappaDeescalatorSteps::onEvaluateAtSecondDeescalationOpportunity(CLKappaDeescalatorSteps *this)
{
  if (!*((unsigned char *)this + 88)) {
    sub_100007D1C();
  }
  unsigned int v2 = *((_DWORD *)this + 20);
  unsigned int StepsCountStats = CLKappaDeescalatorSteps::getStepsCountStats((unsigned __int16 *)this + 1316, *((_DWORD *)this + 21));
  *((_DWORD *)this + 784) = StepsCountStats;
  if (StepsCountStats <= v2) {
    return 1;
  }
  *((unsigned char *)this + 3140) = 2;
  return 4;
}

_DWORD *CLKappaDeescalatorSteps::onPreviousEpochMadeDecision(_DWORD *this)
{
  this[24] = 0;
  this[650] = 0;
  this[658] = 0;
  return this;
}

void sub_100281B18(void **this)
{
  *this = off_1003B05C0;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_100281B38(void **a1)
{
  *a1 = off_1003B05C0;
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

void sub_100281B8C(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void CLKappaDeescalatorMAP::CLKappaDeescalatorMAP(CLKappaDeescalatorMAP *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  unsigned int v2 = (char *)sub_100007BC0((void *)this + 6, "none");
  *(void *)this = off_1003B0670;
  *((_WORD *)this + 36) = 0;
  *(void *)((char *)this + 76) = 0xB00000000;
  *((void *)this + 12) = 0xB00000000;
  *((void *)this + 24) = 0xB00000000;
  *((_WORD *)this + 106) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((_WORD *)this + 116) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((void *)this + 7) = 6;
    unsigned int v2 = (char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 71) = 6;
  }
  strcpy(v2, "de-MAP");
}

uint64_t CLKappaDeescalatorMAP::assertReady(CLKappaDeescalatorMAP *this, uint64_t a2, const char *a3)
{
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 73), (BOOL)"[de-MAP] missing config", a3);
}

void CLKappaDeescalatorMAP::resetConfiguration(CLKappaDeescalatorMAP *this)
{
  id v4 = +[CSPersistentConfiguration configBaseKey:"DeescalatorMAPConfig" forFeatureMode:*((unsigned __int8 *)this + 32)];
  unsigned int v2 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned __int8 v3 = [v2 BOOLThreshold:&CLKappaDeescalatorMAP::kConfigurationDefaults forKey:v4];
  if (!*((unsigned char *)this + 73)) {
    *((unsigned char *)this + 73) = 1;
  }
  *((unsigned char *)this + 72) = v3;
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceMAP");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceMAP");
}

void sub_100281D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CLKappaDeescalatorMAP::setConfig(uint64_t result, char *a2)
{
  char v2 = *a2;
  if (!*(unsigned char *)(result + 73)) {
    *(unsigned char *)(result + 73) = 1;
  }
  *(unsigned char *)(result + 72) = v2;
  return result;
}

void CLKappaDeescalatorMAP::log(CLKappaDeescalatorMAP *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 73)) {
    sub_100007D1C();
  }
  int v4 = *((unsigned __int8 *)this + 212);
  int v5 = *((unsigned __int8 *)this + 213);
  uint64_t v7 = *((void *)this + 27);
  uint64_t v6 = *((void *)this + 28);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B06F0);
  }
  float v8 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *((_DWORD *)this + 6);
    int v10 = *((unsigned __int8 *)this + 32);
    int v11 = *((unsigned __int8 *)this + 72);
    int v12 = 134350848;
    uint64_t v13 = a2;
    __int16 v14 = 1026;
    int v15 = v9;
    __int16 v16 = 1026;
    int v17 = v10;
    __int16 v18 = 1026;
    int v19 = v11;
    __int16 v20 = 1026;
    int v21 = v4;
    __int16 v22 = 1026;
    int v23 = v5;
    __int16 v24 = 2050;
    uint64_t v25 = v7;
    __int16 v26 = 2050;
    uint64_t v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[de-MAP] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,config-1,%{public}u,debug-1a,%{public}u,debug-1b,%{public}u,debug-1c,%{public}llu,debug-1d,%{public}llu", (uint8_t *)&v12, 0x3Eu);
  }
}

uint64_t CLKappaDeescalatorMAP::prepareForNextEpoch(uint64_t this)
{
  *(void *)(this + 216) = 0;
  *(void *)(this + 224) = 0;
  return this;
}

unsigned __int16 *CLKappaDeescalatorMAP::updateWithIsMAP(uint64_t a1, uint64_t a2)
{
  sub_100281F5C((unsigned __int16 *)(a1 + 76), (unsigned char *)a2);
  *(unsigned char *)(a1 + 212) = *(unsigned char *)a2;

  return sub_100281FB0((unsigned __int16 *)(a1 + 96), (void *)(a2 + 8));
}

unsigned __int16 *sub_100281F5C(unsigned __int16 *result, unsigned char *a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = *((unsigned int *)result + 1);
  uint64_t v4 = *result;
  if (v4 + v2 >= v3) {
    uint64_t v5 = *((unsigned int *)result + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  *((unsigned char *)result + v4 + v2 - v5 + 8) = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    *uint64_t result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

unsigned __int16 *sub_100281FB0(unsigned __int16 *result, void *a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = *((unsigned int *)result + 1);
  uint64_t v4 = *result;
  if (v4 + v2 >= v3) {
    uint64_t v5 = *((unsigned int *)result + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  *(void *)&result[4 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    *uint64_t result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

unsigned __int16 *CLKappaDeescalatorMAP::updateWithFreeFall(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100281F5C((unsigned __int16 *)(a1 + 192), (unsigned char *)(a2 + 44));
  *(unsigned char *)(a1 + 213) = *(unsigned char *)(a2 + 44);
  return result;
}

uint64_t CLKappaDeescalatorMAP::onEvaluateAtMinHoldDuration(CLKappaDeescalatorMAP *this)
{
  if (!*((unsigned char *)this + 73)) {
    sub_100007D1C();
  }
  if (!*((unsigned char *)this + 72)) {
    return 1;
  }
  uint64_t v2 = (unint64_t *)((char *)this + 8);
  if (!*((unsigned char *)this + 16)) {
    uint64_t v2 = (unint64_t *)&unk_10033E3E0;
  }
  uint64_t v3 = 1;
  if (*((_WORD *)this + 39))
  {
    unint64_t v4 = 0;
    BOOL v5 = 0;
    unint64_t v6 = *v2;
    unint64_t v7 = *v2 + 8100000;
    do
    {
      if (*(void *)sub_100282278((unsigned __int16 *)this + 48, v4) + 5000000 >= v6
        && *(void *)sub_100282278((unsigned __int16 *)this + 48, v4) <= v7)
      {
        if (!*((unsigned char *)this + 232))
        {
          *((void *)this + 27) = *(void *)sub_100282278((unsigned __int16 *)this + 48, v4);
          *((unsigned char *)this + 232) = 1;
        }
        *((void *)this + 28) = *(void *)sub_100282278((unsigned __int16 *)this + 48, v4);
        if (v5)
        {
          BOOL v5 = 1;
        }
        else if (*(unsigned char *)sub_10002C20C((unsigned __int16 *)this + 38, v4))
        {
          BOOL v5 = *(unsigned char *)sub_10002C20C((unsigned __int16 *)this + 96, v4) == 0;
        }
        else
        {
          BOOL v5 = 0;
        }
      }
      ++v4;
    }
    while (v4 < *((unsigned __int16 *)this + 39));
    if (v5) {
      return 4;
    }
    else {
      return 1;
    }
  }
  return v3;
}

uint64_t CLKappaDeescalatorMAP::onPreviousEpochMadeDecision(uint64_t this)
{
  *(_DWORD *)(this + 76) = 0;
  *(_DWORD *)(this + 192) = 0;
  *(void *)(this + 216) = 0;
  *(void *)(this + 224) = 0;
  *(unsigned char *)(this + 232) = 0;
  return this;
}

void sub_1002821C0(void **this)
{
  *this = off_1003B0670;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_1002821E0(void **a1)
{
  *a1 = off_1003B0670;
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

void sub_100282234(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

uint64_t sub_100282278(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      int v8 = *((_DWORD *)a1 + 1);
      int v9 = 134218754;
      CFAbsoluteTime v10 = Current;
      __int16 v11 = 2080;
      int v12 = "const T &CMQueue<unsigned long long>::operator[](const size_t) const [T = unsigned long long]";
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 1024;
      int v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  unint64_t v5 = *a1 + a2;
  if (v5 < v4) {
    unint64_t v4 = 0;
  }
  return (uint64_t)&a1[4 * (v5 - v4) + 4];
}

void TrustedAudioHelper::summarizeTrusted(TrustedAudioHelper *this@<X0>, NSArray *a2@<X1>, NSArray *a3@<X2>, uint64_t a4@<X8>)
{
  CFAbsoluteTime v10 = this;
  unint64_t v7 = TrustedAudioHelper::selectTrustedAudioResult((TrustedAudioHelper *)a2, a3);
  int v8 = v7;
  if (v7) {
    uint64_t v9 = *((*(v7->c_struct) + 27));
  }
  else {
    uint64_t v9 = 0;
  }
  *(unsigned char *)a4 = [(TrustedAudioHelper *)v10 count] != 0;
  *(unsigned char *)(a4 + 1) = v8 != 0;
  *(void *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = a3;
}

void sub_100282448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id TrustedAudioHelper::selectTrustedAudioResult(TrustedAudioHelper *this, NSArray *a2)
{
  uint64_t v3 = this;
  if ([(TrustedAudioHelper *)v3 count])
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    unint64_t v4 = v3;
    id v5 = [(TrustedAudioHelper *)v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v11;
LABEL_4:
      uint64_t v7 = 0;
      while (1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(id *)(*((void *)&v10 + 1) + 8 * v7);
        if (objc_msgSend(v8, "timestamp", (void)v10) == a2) {
          break;
        }

        if (v5 == (id)++v7)
        {
          id v5 = [(TrustedAudioHelper *)v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
          if (v5) {
            goto LABEL_4;
          }
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      id v8 = 0;
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1002825A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TrustedAudioHelper::summarizeUntrusted@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = *(unsigned __int8 *)(a2 + 56);
  float v7 = *(float *)(a2 + 8);
  id result = [a1 count];
  BOOL v10 = v7 > 0.0 && v6 != 0;
  *(unsigned char *)a4 = result != 0;
  *(unsigned char *)(a4 + 1) = v10;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = a3;
  return result;
}

uint64_t TrustedAudioHelper::update(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)a2)
  {
    ++*(_DWORD *)(result + 8);
    if (!*(unsigned char *)(a2 + 1))
    {
      if (*(unsigned char *)result) {
        ++*(_DWORD *)(result + 16);
      }
      else {
        ++*(_DWORD *)(result + 12);
      }
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(a2 + 1))
  {
    goto LABEL_11;
  }
  ++*(_DWORD *)(result + 4);
  if (!*(unsigned char *)result)
  {
    unint64_t v2 = *(void *)(a2 + 16) - 4000000;
    if (*(void *)(a2 + 8) > v2) {
      unint64_t v2 = *(void *)(a2 + 8);
    }
    *(void *)(result + 24) = v2;
    *(unsigned char *)id result = 1;
  }
LABEL_11:
  *(void *)(result + 32) = *(void *)(a2 + 16);
  return result;
}

uint64_t TrustedAudioHelper::reset(uint64_t this)
{
  *(unsigned char *)this = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 12) = 0;
  *(void *)(this + 4) = 0;
  return this;
}

unint64_t TrustedAudioHelper::getStats(TrustedAudioHelper *this, uint64_t a2)
{
  unsigned int v4 = *((_DWORD *)this + 2);
  if (v4) {
    float v5 = (float)*((unsigned int *)this + 1) / (float)v4;
  }
  else {
    float v5 = -1.0;
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    float v7 = (float)(unint64_t)(a2 - v6) / 1000000.0;
  }
  else {
    float v7 = -3.4028e38;
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B0710);
  }
  id v8 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *((_DWORD *)this + 1);
    int v10 = *((_DWORD *)this + 2);
    int v11 = *((_DWORD *)this + 3);
    int v12 = *((_DWORD *)this + 4);
    uint64_t v13 = *((void *)this + 3);
    uint64_t v14 = *((void *)this + 4);
    v16[0] = 67111168;
    v16[1] = v9;
    __int16 v17 = 1024;
    int v18 = v10;
    __int16 v19 = 2048;
    double v20 = v5;
    __int16 v21 = 1024;
    int v22 = v11;
    __int16 v23 = 1024;
    int v24 = v12;
    __int16 v25 = 2048;
    uint64_t v26 = a2;
    __int16 v27 = 2048;
    uint64_t v28 = v13;
    __int16 v29 = 2048;
    double v30 = v7;
    __int16 v31 = 2048;
    uint64_t v32 = v14;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[TAH] %d %d %f %d %d %llu %llu %f %llu", (uint8_t *)v16, 0x4Cu);
  }
  return LODWORD(v5) | ((unint64_t)*((unsigned int *)this + 3) << 32);
}

void sub_100282870(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_100282908(id a1)
{
  if (qword_1003DB800 != -1) {
    dispatch_once(&qword_1003DB800, &stru_1003B0750);
  }
  uint64_t v1 = qword_1003DB808;
  if (os_log_type_enabled((os_log_t)qword_1003DB808, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "creating CSMapDataQuality shared instance", v6, 2u);
  }
  unint64_t v2 = [CSMapDataQuality alloc];
  uint64_t v3 = +[GEOCountryConfiguration sharedConfiguration];
  unsigned int v4 = [(CSMapDataQuality *)v2 initWithGEOCountryConfiguration:v3];
  float v5 = (void *)qword_1003DD6F8;
  qword_1003DD6F8 = (uint64_t)v4;
}

void sub_100282C64(id a1)
{
  qword_1003DB808 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "MapDataQuality");

  _objc_release_x1();
}

float CLSafetyAlgorithmsMath::computeSigmoidalThreshold(float *a1, float a2)
{
  float v3 = (float)(a2 - *a1) / a1[1];
  BOOL v4 = v3 < -20.0 || v3 > 20.0;
  if (v4)
  {
    BOOL v4 = v3 <= 20.0;
    float v5 = 1.0;
    if (!v4) {
      float v5 = 0.0;
    }
  }
  else
  {
    float v5 = 1.0 / (float)(expf(v3) + 1.0);
  }
  return a1[2] + (float)((float)(a1[3] - a1[2]) * v5);
}

void CLKappaFeaturesAlgGolfResult::reset(CLKappaFeaturesAlgGolfResult *this)
{
  float v3 = (char *)this + 120;
  unint64_t v2 = (void *)*((void *)this + 15);
  *((void *)v3 - 1) = 0;
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  *(void *)float v3 = 0;
  *((void *)v3 + 1) = 0;
  v3[24] = 0;
  *((void *)v3 + 2) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
}

void CLKappaFeaturesAlgGolfResult::log(CLKappaFeaturesAlgGolfResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B1368);
  }
  unint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 144);
    uint64_t v4 = *((void *)this + 13);
    uint64_t v5 = *((void *)this + 14);
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = *((void *)this + 3);
    uint64_t v8 = *((void *)this + 4);
    uint64_t v9 = *((void *)this + 5);
    uint64_t v10 = *((void *)this + 6);
    uint64_t v11 = *((void *)this + 7);
    uint64_t v13 = *((void *)this + 8);
    uint64_t v12 = *((void *)this + 9);
    uint64_t v14 = *((void *)this + 10);
    uint64_t v15 = *((void *)this + 11);
    uint64_t v16 = *((void *)this + 12);
    uint64_t v17 = *((void *)this + 19);
    uint64_t v18 = *((void *)this + 20);
    v19[0] = 67244032;
    v19[1] = v3;
    __int16 v20 = 2050;
    uint64_t v21 = v5;
    __int16 v22 = 2050;
    uint64_t v23 = v6;
    __int16 v24 = 2050;
    uint64_t v25 = v7;
    __int16 v26 = 2050;
    uint64_t v27 = v8;
    __int16 v28 = 2050;
    uint64_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = v10;
    __int16 v32 = 2050;
    uint64_t v33 = v11;
    __int16 v34 = 2050;
    uint64_t v35 = v13;
    __int16 v36 = 2050;
    uint64_t v37 = v16;
    __int16 v38 = 2050;
    uint64_t v39 = v12;
    __int16 v40 = 2050;
    uint64_t v41 = v14;
    __int16 v42 = 2050;
    uint64_t v43 = v15;
    __int16 v44 = 2050;
    uint64_t v45 = v4;
    __int16 v46 = 2050;
    uint64_t v47 = v17;
    __int16 v48 = 2050;
    uint64_t v49 = v18;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[GLF] AlgBlock summary,A,%{public}d,B,%{public}lluconfig-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,config-5,%{public}f,config-6,%{public}f,config-7,%{public}f,config-8,%{public}f,config-9,%{public}f,config-10,%{public}f,config-11,%{public}f,config-12,%{public}f,debug-1,%{public}lu,debug-2,%{public}lu", (uint8_t *)v19, 0x9Eu);
  }
}

void CLKappaFeaturesAlgGolf::CLKappaFeaturesAlgGolf(CLKappaFeaturesAlgGolf *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  *uint64_t v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  sub_100286094(&v13);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  unint64_t v7 = v13;
  long long v13 = 0uLL;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = __PAIR128__((unint64_t)v6, v7);
  if (v8)
  {
    sub_10000BB9C(v8);
    if (*((void *)&v13 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v13 + 1));
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  }
  uint64_t v11 = *((void *)this + 1);
  uint64_t v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10028316C((uint64_t)&v11, &v13);
  long long v9 = v13;
  long long v13 = 0uLL;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v9;
  if (v10)
  {
    sub_10000BB9C(v10);
    if (*((void *)&v13 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (v12) {
    sub_10000BB9C(v12);
  }
  (*(void (**)(CLKappaFeaturesAlgGolf *))(*(void *)this + 312))(this);
}

void sub_100283138(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v4) {
    sub_10000BB9C(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v5) {
    sub_10000BB9C(v5);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10028316C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgGolf::CLKappaFeaturesAlgGolf(CLKappaFeaturesAlgGolf *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 8) = off_10039A008;
  *((void *)this + 9) = off_10039A0D0;
  *((void *)this + 10) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003B0D40);
  *(void *)uint64_t v2 = off_1003B0820;
  *(void *)(v2 + 64) = off_1003B0AD0;
  *(void *)(v2 + 72) = off_1003B0C10;
  *(void *)(v2 + 80) = off_1003B0CF0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  sub_100286094(&v10);
  int v3 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  unint64_t v4 = v10;
  long long v10 = 0uLL;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = __PAIR128__((unint64_t)v3, v4);
  if (v5)
  {
    sub_10000BB9C(v5);
    if (*((void *)&v10 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v10 + 1));
    }
    int v3 = (std::__shared_weak_count *)*((void *)this + 2);
  }
  uint64_t v8 = *((void *)this + 1);
  long long v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10028316C((uint64_t)&v8, &v10);
  long long v6 = v10;
  long long v10 = 0uLL;
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    if (*((void *)&v10 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  if (v9) {
    sub_10000BB9C(v9);
  }
  (*(void (**)(CLKappaFeaturesAlgGolf *))(*(void *)this + 312))(this);
}

void sub_1002833E8(_Unwind_Exception *a1)
{
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v3) {
    sub_10000BB9C(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B0D40);
  _Unwind_Resume(a1);
}

uint64_t CLKappaFeaturesAlgGolf::reset(CLKappaFeaturesAlgGolf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

void CLKappaFeaturesAlgGolf::resetConfiguration(CLKappaFeaturesAlgGolf *this)
{
  id v50 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgGLFConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 1120403456;
  LODWORD(v4) = 10.0;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v50 withMinValue:0.0 maxValue:v3 defaultValue:v4];
  *(double *)(*((void *)this + 4) + 16) = v5;

  long long v6 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v7) = 1120403456;
  LODWORD(v8) = 1045220557;
  [v6 algorithmThresholdNumber:1 inArrayForKey:v50 withMinValue:0.0 maxValue:v7 defaultValue:v8];
  *(double *)(*((void *)this + 4) + 24) = v9;

  long long v10 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v11) = 1120403456;
  LODWORD(v12) = 15.0;
  [v10 algorithmThresholdNumber:2 inArrayForKey:v50 withMinValue:0.0 maxValue:v11 defaultValue:v12];
  *(double *)(*((void *)this + 4) + 32) = v13;

  uint64_t v14 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v15) = 1120403456;
  LODWORD(v16) = 1045220557;
  [v14 algorithmThresholdNumber:3 inArrayForKey:v50 withMinValue:0.0 maxValue:v15 defaultValue:v16];
  *(double *)(*((void *)this + 4) + 40) = v17;

  uint64_t v18 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v19) = 1114636288;
  LODWORD(v20) = 1176256512;
  [v18 algorithmThresholdNumber:4 inArrayForKey:v50 withMinValue:0.0 maxValue:v20 defaultValue:v19];
  *(double *)(*((void *)this + 4) + 48) = v21;

  __int16 v22 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v23) = 30.0;
  LODWORD(v24) = 1176256512;
  [v22 algorithmThresholdNumber:5 inArrayForKey:v50 withMinValue:0.0 maxValue:v24 defaultValue:v23];
  *(double *)(*((void *)this + 4) + 56) = v25;

  __int16 v26 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v27) = 1123024896;
  LODWORD(v28) = 1176256512;
  [v26 algorithmThresholdNumber:6 inArrayForKey:v50 withMinValue:0.0 maxValue:v28 defaultValue:v27];
  *(double *)(*((void *)this + 4) + 64) = v29;

  __int16 v30 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v31) = 10.0;
  LODWORD(v32) = 1041865114;
  [v30 algorithmThresholdNumber:7 inArrayForKey:v50 withMinValue:0.0 maxValue:v31 defaultValue:v32];
  *(double *)(*((void *)this + 4) + 72) = v33;

  __int16 v34 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v35) = 1034147594;
  LODWORD(v36) = 10.0;
  [v34 algorithmThresholdNumber:8 inArrayForKey:v50 withMinValue:0.0 maxValue:v36 defaultValue:v35];
  *(double *)(*((void *)this + 4) + 80) = v37;

  __int16 v38 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v39) = 10.0;
  LODWORD(v40) = 1041865114;
  [v38 algorithmThresholdNumber:9 inArrayForKey:v50 withMinValue:0.0 maxValue:v39 defaultValue:v40];
  *(double *)(*((void *)this + 4) + 88) = v41;

  __int16 v42 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v43) = *(_DWORD *)"ff&?33s?";
  LODWORD(v44) = 10.0;
  [v42 algorithmThresholdNumber:10 inArrayForKey:v50 withMinValue:0.0 maxValue:v44 defaultValue:v43];
  *(double *)(*((void *)this + 4) + 96) = v45;

  __int16 v46 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v47) = 1053609165;
  LODWORD(v48) = 10.0;
  [v46 algorithmThresholdNumber:11 inArrayForKey:v50 withMinValue:0.0 maxValue:v48 defaultValue:v47];
  *(double *)(*((void *)this + 4) + 104) = v49;
}

void sub_100283790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgGolf::setConfig(uint64_t a1, _OWORD *a2)
{
  double v3 = *(_OWORD **)(a1 + 32);
  long long v4 = a2[1];
  v3[1] = *a2;
  v3[2] = v4;
  long long v5 = a2[2];
  long long v6 = a2[3];
  long long v7 = a2[5];
  v3[5] = a2[4];
  void v3[6] = v7;
  v3[3] = v5;
  v3[4] = v6;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B1368);
  }
  double v8 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
  {
    float v9 = *(void **)(a1 + 32);
    uint64_t v10 = v9[2];
    uint64_t v11 = v9[3];
    uint64_t v12 = v9[4];
    uint64_t v13 = v9[5];
    uint64_t v14 = v9[6];
    uint64_t v15 = v9[7];
    uint64_t v16 = v9[8];
    uint64_t v17 = v9[9];
    uint64_t v19 = v9[10];
    uint64_t v18 = v9[11];
    uint64_t v20 = v9[12];
    uint64_t v21 = v9[13];
    int v22 = 134351872;
    uint64_t v23 = v10;
    __int16 v24 = 2050;
    uint64_t v25 = v11;
    __int16 v26 = 2050;
    uint64_t v27 = v12;
    __int16 v28 = 2050;
    uint64_t v29 = v13;
    __int16 v30 = 2050;
    uint64_t v31 = v14;
    __int16 v32 = 2050;
    uint64_t v33 = v15;
    __int16 v34 = 2050;
    uint64_t v35 = v16;
    __int16 v36 = 2050;
    uint64_t v37 = v20;
    __int16 v38 = 2050;
    uint64_t v39 = v17;
    __int16 v40 = 2050;
    uint64_t v41 = v19;
    __int16 v42 = 2050;
    uint64_t v43 = v18;
    __int16 v44 = 2050;
    uint64_t v45 = v21;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[GLF] config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,config-5,%{public}f,config-6,%{public}f,config-7,%{public}f,config-8,%{public}f,config-9,%{public}f,config-10,%{public}f,config-11,%{public}f,config-12,%{public}f", (uint8_t *)&v22, 0x7Au);
  }
}

BOOL CLKappaFeaturesAlgGolf::Window::peakInBounds(CLKappaFeaturesAlgGolf::Window *this, uint64_t a2)
{
  return *((void *)this + 2) <= (unint64_t)(a2 - 1000000)
      && (unint64_t)(a2 + 1000000) < *((void *)this + 3);
}

uint64_t CLKappaFeaturesAlgGolf::Window::sufficientData(id *this, unint64_t a2)
{
  if (a2 >= 0xE7EF0)
  {
    if ([*this count])
    {
      uint64_t v5 = 0;
      char v6 = 0;
      char v7 = 0;
      while (1)
      {
        double v8 = [*this objectAtIndexedSubscript:v5];
        id v9 = [v8 timestamp];

        uint64_t v10 = [*this objectAtIndexedSubscript:v5];
        v7 |= (unint64_t)v9 <= a2 - 950000;
        v6 |= (unint64_t)[v10 timestamp] >= a2 + 950000;

        if (v7 & 1) != 0 && (v6) {
          break;
        }
        if (++v5 >= (unint64_t)[*this count]) {
          goto LABEL_11;
        }
      }
      char v7 = 1;
      char v6 = 1;
    }
    else
    {
      char v7 = 0;
      char v6 = 0;
    }
LABEL_11:
    if ([this[1] count])
    {
      uint64_t v11 = 0;
      char v12 = 0;
      char v13 = 0;
      unint64_t v14 = a2 - 150000;
      unint64_t v15 = a2 + 150000;
      while (1)
      {
        uint64_t v16 = [this[1] objectAtIndexedSubscript:v11];
        id v17 = [v16 timestamp];

        uint64_t v18 = [this[1] objectAtIndexedSubscript:v11];
        v13 |= (unint64_t)v17 <= v14;
        v12 |= (unint64_t)[v18 timestamp] >= v15;

        if (v13 & 1) != 0 && (v12) {
          break;
        }
        if (++v11 >= (unint64_t)[this[1] count]) {
          goto LABEL_19;
        }
      }
      char v13 = 1;
      char v12 = 1;
    }
    else
    {
      char v13 = 0;
      char v12 = 0;
    }
LABEL_19:
    if (v7 & v6) {
      char v2 = v13 & v12;
    }
    else {
      char v2 = 0;
    }
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

void sub_100283B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t CLKappaFeaturesAlgGolf::Window::scrollToPeakTimestamp(CLKappaFeaturesAlgGolf::Window *this, unint64_t a2)
{
  if (*((void *)this + 2) > a2 - 1000000 || (unint64_t v4 = a2 + 1000000, a2 + 1000000 >= *((void *)this + 3)))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B1368);
    }
    uint64_t v5 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "[GLF] peakTimestamp out of bounds", buf, 2u);
    }
    unint64_t v4 = a2 + 1000000;
  }
  if (a2 >= 0xF4240) {
    unint64_t v6 = a2 - 1000000;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v7 = sub_100283D6C(*((void *)this + 5), v6, *(void **)this);
  *((void *)this + 5) = v7;
  unint64_t v8 = sub_100283D6C(v7, a2, *(void **)this);
  *((void *)this + 4) = v8;
  *((void *)this + 6) = sub_100283E0C(v8, v4, *(void **)this);
  id v9 = [*(id *)this objectAtIndexedSubscript:*((void *)this + 4)];
  id v10 = [v9 timestamp];

  if (v10 != (id)a2)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B1368);
    }
    uint64_t v11 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "[GLF] error locating peak in window", v19, 2u);
    }
  }
  if (a2 >= 0x249F0) {
    unint64_t v12 = a2 - 150000;
  }
  else {
    unint64_t v12 = 0;
  }
  unint64_t v13 = sub_100283D6C(*((void *)this + 8), v12, *((void **)this + 1));
  *((void *)this + 8) = v13;
  if (a2 >= 0x11170) {
    unint64_t v14 = a2 - 70000;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = sub_100283D6C(v13, v14, *((void **)this + 1));
  *((void *)this + 10) = v15;
  unint64_t v16 = sub_100283E0C(v15, a2, *((void **)this + 1));
  *((void *)this + 7) = v16;
  unint64_t v17 = sub_100283E0C(v16, a2 + 70000, *((void **)this + 1));
  *((void *)this + 11) = v17;
  unint64_t result = sub_100283E0C(v17, a2 + 150000, *((void **)this + 1));
  *((void *)this + 9) = result;
  return result;
}

void sub_100283D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_100283D6C(unint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  while (a1 < (unint64_t)[v5 count])
  {
    unint64_t v6 = [v5 objectAtIndexedSubscript:a1];
    id v7 = [v6 timestamp];

    if ((unint64_t)v7 >= a2) {
      break;
    }
    ++a1;
  }

  return a1;
}

void sub_100283DF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_100283E0C(unint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  while (a1 < (unint64_t)[v5 count])
  {
    unint64_t v6 = [v5 objectAtIndexedSubscript:a1];
    id v7 = [v6 timestamp];

    if ((unint64_t)v7 > a2) {
      break;
    }
    ++a1;
  }

  return a1 - 1;
}

void sub_100283E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgGolf::computeAccelFeatures(id *this, double a2, const CLKappaFeaturesAlgGolf::Window *a3)
{
  CLKappaFeaturesAlgGolf::computeWindowWeightedNorm(this, (uint64_t)__p);
  double v4 = CLKappaFeaturesAlgGolf::computeTBar(__p, (uint64_t)this);
  CLKappaFeaturesAlgGolf::computeTauDs(__p, (uint64_t)this, v4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_100283F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CLKappaFeaturesAlgGolf::computeWindowWeightedNorm(id *this@<X0>, uint64_t a2@<X8>)
{
  id v5 = *this;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v6 = (unsigned char *)this[6] - (unsigned char *)this[5] + 1;
  sub_100284478((void **)a2, v6);
  id v7 = (char *)this[5];
  if (v7 <= this[6])
  {
    do
    {
      id v9 = [v5 objectAtIndexedSubscript:v7];
      double v11 = CSAccelPeakDetectorResult::accelNorm(v9, v10);

      double v12 = 1.0 / (exp((v11 + -10.0) * -2.0) + 1.0) * v11;
      unint64_t v14 = *(double **)(a2 + 8);
      unint64_t v13 = *(void *)(a2 + 16);
      if ((unint64_t)v14 >= v13)
      {
        unint64_t v15 = *(double **)a2;
        uint64_t v16 = ((uint64_t)v14 - *(void *)a2) >> 3;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61) {
          sub_10000EE98();
        }
        uint64_t v18 = v13 - (void)v15;
        if (v18 >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          uint64_t v20 = (char *)sub_10000EEB0(a2 + 16, v19);
          unint64_t v15 = *(double **)a2;
          unint64_t v14 = *(double **)(a2 + 8);
        }
        else
        {
          uint64_t v20 = 0;
        }
        uint64_t v21 = (double *)&v20[8 * v16];
        *uint64_t v21 = v12;
        unint64_t v8 = v21 + 1;
        while (v14 != v15)
        {
          uint64_t v22 = *((void *)v14-- - 1);
          *((void *)v21-- - 1) = v22;
        }
        *(void *)a2 = v21;
        *(void *)(a2 + 8) = v8;
        *(void *)(a2 + 16) = &v20[8 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *unint64_t v14 = v12;
        unint64_t v8 = v14 + 1;
      }
      *(void *)(a2 + 8) = v8;
      ++v7;
    }
    while (v7 <= this[6]);
  }
  else
  {
    unint64_t v8 = *(double **)(a2 + 8);
  }
  if (v6 != ((uint64_t)v8 - *(void *)a2) >> 3)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B1368);
    }
    uint64_t v23 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
    {
      v24[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "[GLF] weightedNorm size error", (uint8_t *)v24, 2u);
    }
  }
}

void sub_100284170(_Unwind_Exception *a1)
{
  double v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgGolf::computeTBar(void *a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  unint64_t v5 = *(void *)(a2 + 40);
  if (v5 > *(void *)(a2 + 48)) {
    goto LABEL_5;
  }
  double v6 = 0.0;
  double v7 = 0.0;
  do
  {
    unint64_t v8 = [v4 objectAtIndexedSubscript:v5];
    double v9 = (double)(unint64_t)[v8 timestamp] * 0.000001;

    double v10 = *(double *)(*a1 - 8 * *(void *)(a2 + 40) + 8 * v5);
    double v6 = v6 + v10 * v9;
    double v7 = v7 + v10;
    ++v5;
  }
  while (v5 <= *(void *)(a2 + 48));
  if (v7 == 0.0)
  {
LABEL_5:
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B1368);
    }
    double v11 = qword_1003DB6A8;
    double v12 = 0.0;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "[GLF] tBarDenominator is zero", v14, 2u);
    }
  }
  else
  {
    double v12 = v6 / v7;
  }

  return v12;
}

void sub_1002842E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgGolf::computeTauDs(void *a1, uint64_t a2, double a3)
{
  id v6 = *(id *)a2;
  unint64_t v7 = *(void *)(a2 + 40);
  if (v7 > *(void *)(a2 + 48)) {
    goto LABEL_5;
  }
  double v8 = 0.0;
  double v9 = 0.0;
  do
  {
    double v10 = [v6 objectAtIndexedSubscript:v7];
    double v11 = (double)(unint64_t)[v10 timestamp] * 0.000001;

    double v12 = *(double *)(*a1 - 8 * *(void *)(a2 + 40) + 8 * v7);
    double v8 = v8 + v12 * ((v11 - a3) * (v11 - a3));
    double v9 = v9 + v12;
    ++v7;
  }
  while (v7 <= *(void *)(a2 + 48));
  if (v9 == 0.0)
  {
LABEL_5:
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B1368);
    }
    unint64_t v13 = qword_1003DB6A8;
    double v14 = 0.0;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "[GLF] tauDsDenominator is zero", v16, 2u);
    }
  }
  else
  {
    double v14 = sqrt(v8 / v9);
  }

  return v14;
}

void sub_10028445C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100284478(void **a1, unint64_t a2)
{
  id v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_10000EE98();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    id v6 = (char *)sub_10000EEB0(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    double v9 = &v6[8 * v8];
    double v10 = (char *)*a1;
    double v11 = (char *)a1[1];
    double v12 = v7;
    if (v11 != *a1)
    {
      double v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

long double CLKappaFeaturesAlgGolf::sigmoid(CLKappaFeaturesAlgGolf *this, double a2)
{
  return 1.0 / (exp(-a2) + 1.0);
}

void CLKappaFeaturesAlgGolf::WindowCrownOrientation::push(CLKappaFeaturesAlgGolf::WindowCrownOrientation *this, float32x4_t *a2)
{
  float v3 = CLKappaFeaturesAlgGolf::WindowCrownOrientation::crownFromDM(a2, (const DMSample *)a2);
  float v6 = v3;
  int v7 = v4;
  int v8 = v5;
  unint64_t v9 = *((void *)this + 2);
  unint64_t v10 = *((void *)this + 1);
  if (v10 >= v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(void *)this) >> 2);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x1555555555555555) {
      sub_10000EE98();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(void *)this) >> 2);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x1555555555555555;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      uint64_t v16 = (char *)sub_1000242C0((uint64_t)this + 16, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v17 = &v16[12 * v12];
    uint64_t v18 = &v16[12 * v15];
    *(float *)unint64_t v17 = v6;
    *((_DWORD *)v17 + 1) = v7;
    *((_DWORD *)v17 + 2) = v8;
    double v11 = (float *)(v17 + 12);
    uint64_t v20 = *(_DWORD **)this;
    unint64_t v19 = (_DWORD *)*((void *)this + 1);
    if (v19 != *(_DWORD **)this)
    {
      do
      {
        uint64_t v21 = *(void *)(v19 - 3);
        v19 -= 3;
        int v22 = v19[2];
        *(void *)(v17 - 12) = v21;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v22;
      }
      while (v19 != v20);
      unint64_t v19 = *(_DWORD **)this;
    }
    *(void *)this = v17;
    *((void *)this + 1) = v11;
    *((void *)this + 2) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *(float *)unint64_t v10 = v3;
    *(_DWORD *)(v10 + 4) = v4;
    double v11 = (float *)(v10 + 12);
    *(_DWORD *)(v10 + 8) = v5;
  }
  *((void *)this + 1) = v11;
  if ((float *)((char *)v11 - *(void *)this) != (float *)12)
  {
    unint64_t v26 = *((void *)this + 5);
    float v28 = *(v11 - 2);
    float v27 = *(v11 - 1);
    float v29 = *(v11 - 4);
    float v30 = *(v11 - 3);
    float v32 = *(v11 - 6);
    float v31 = *(v11 - 5);
    float v33 = (float)(v31 * v27) - (float)(v29 * v28);
    float v34 = (float)(v29 * v30) - (float)(v32 * v27);
    float v35 = (float)(v32 * v28) - (float)(v31 * v30);
    __int16 v36 = (float *)*((void *)this + 4);
    if ((unint64_t)v36 < v26)
    {
      *__int16 v36 = v33;
      v36[1] = v34;
      uint64_t v25 = v36 + 3;
      v36[2] = v35;
      goto LABEL_48;
    }
    uint64_t v37 = (_DWORD **)((char *)this + 24);
    uint64_t v44 = *((void *)this + 3);
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v36 - v44) >> 2);
    unint64_t v46 = v45 + 1;
    if (v45 + 1 <= 0x1555555555555555)
    {
      unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v44) >> 2);
      if (2 * v47 > v46) {
        unint64_t v46 = 2 * v47;
      }
      if (v47 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v48 = 0x1555555555555555;
      }
      else {
        unint64_t v48 = v46;
      }
      if (v48) {
        float v49 = (char *)sub_1000242C0((uint64_t)this + 40, v48);
      }
      else {
        float v49 = 0;
      }
      id v50 = (float *)&v49[12 * v45];
      __int16 v51 = &v49[12 * v48];
      *id v50 = v33;
      v50[1] = v34;
      v50[2] = v35;
      uint64_t v25 = v50 + 3;
      float v56 = (_DWORD *)*((void *)this + 3);
      int v52 = (_DWORD *)*((void *)this + 4);
      if (v52 == v56) {
        goto LABEL_46;
      }
      do
      {
        uint64_t v57 = *(void *)(v52 - 3);
        v52 -= 3;
        int v58 = v52[2];
        *(void *)(v50 - 3) = v57;
        v50 -= 3;
        *((_DWORD *)v50 + 2) = v58;
      }
      while (v52 != v56);
      goto LABEL_45;
    }
LABEL_55:
    sub_10000EE98();
  }
  unint64_t v23 = *((void *)this + 5);
  unint64_t v24 = *((void *)this + 4);
  if (v24 < v23)
  {
    *(void *)unint64_t v24 = 0;
    uint64_t v25 = (float *)(v24 + 12);
    *(_DWORD *)(v24 + 8) = 0;
    goto LABEL_48;
  }
  uint64_t v37 = (_DWORD **)((char *)this + 24);
  uint64_t v38 = *((void *)this + 3);
  unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v38) >> 2);
  unint64_t v40 = v39 + 1;
  if (v39 + 1 > 0x1555555555555555) {
    goto LABEL_55;
  }
  unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v38) >> 2);
  if (2 * v41 > v40) {
    unint64_t v40 = 2 * v41;
  }
  if (v41 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v42 = 0x1555555555555555;
  }
  else {
    unint64_t v42 = v40;
  }
  if (v42) {
    uint64_t v43 = (char *)sub_1000242C0((uint64_t)this + 40, v42);
  }
  else {
    uint64_t v43 = 0;
  }
  id v50 = (float *)&v43[12 * v39];
  __int16 v51 = &v43[12 * v42];
  *(void *)id v50 = 0;
  v50[2] = 0.0;
  uint64_t v25 = v50 + 3;
  __int16 v53 = (_DWORD *)*((void *)this + 3);
  int v52 = (_DWORD *)*((void *)this + 4);
  if (v52 == v53) {
    goto LABEL_46;
  }
  do
  {
    uint64_t v54 = *(void *)(v52 - 3);
    v52 -= 3;
    int v55 = v52[2];
    *(void *)(v50 - 3) = v54;
    v50 -= 3;
    *((_DWORD *)v50 + 2) = v55;
  }
  while (v52 != v53);
LABEL_45:
  int v52 = *v37;
LABEL_46:
  *((void *)this + 3) = v50;
  *((void *)this + 4) = v25;
  *((void *)this + 5) = v51;
  if (v52) {
    operator delete(v52);
  }
LABEL_48:
  *((void *)this + 4) = v25;
  if ((float *)(*((void *)this + 1) - *(void *)this) != (float *)((char *)v25 - *((void *)this + 3)))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B1368);
    }
    float v59 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
    {
      v60[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_FAULT, "[GLF] crown buffer size mismatch", (uint8_t *)v60, 2u);
    }
  }
}

float CLKappaFeaturesAlgGolf::WindowCrownOrientation::crownFromDM(float32x4_t *this, const DMSample *a2)
{
  float32x4_t v6 = *this;
  CMOQuaternion::normalize(&v6, v6);
  uint64_t v4 = 1065353216;
  int v5 = 0;
  CMOQuaternion::rotationMatrixTranspose((CMOQuaternion *)&v6, v3);
  return sub_10027F464((uint64_t)v3, (float *)&v4);
}

void CLKappaFeaturesAlgGolf::computeWindowCrownOrientation(id *this@<X0>, uint64_t a2@<X8>)
{
  id v5 = this[1];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)(a2 + 48) = *this;
  *(void *)(a2 + 56) = this[1];
  long long v6 = *((_OWORD *)this + 4);
  *(_OWORD *)(a2 + 96) = *((_OWORD *)this + 3);
  *(_OWORD *)(a2 + 112) = v6;
  *(_OWORD *)(a2 + 128) = *((_OWORD *)this + 5);
  long long v7 = *((_OWORD *)this + 2);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 1);
  *(_OWORD *)(a2 + 80) = v7;
  int v8 = (char *)this[8];
  if (v8 <= this[9])
  {
    do
    {
      double v11 = [v5 objectAtIndexedSubscript:v8];
      CLKappaFeaturesAlgGolf::WindowCrownOrientation::push((CLKappaFeaturesAlgGolf::WindowCrownOrientation *)a2, (float32x4_t *)[v11 c_struct]);

      ++v8;
    }
    while (v8 <= this[9]);
    unint64_t v10 = *(uint64_t **)a2;
    unint64_t v9 = *(uint64_t **)(a2 + 8);
  }
  else
  {
    unint64_t v9 = 0;
    unint64_t v10 = 0;
  }
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_100285FC0((char *)&v15, v10, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v10) >> 2));
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 2);
  uint64_t v13 = (unsigned char *)this[9] - (unsigned char *)this[8] + 1;
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  if (v12 != v13)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B1368);
    }
    unint64_t v14 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "[GLF] error building windowCrownOrientation", (uint8_t *)&v15, 2u);
    }
  }
}

void sub_100284AD4(_Unwind_Exception *a1)
{
  sub_100284AFC(v2);

  _Unwind_Resume(a1);
}

uint64_t sub_100284AFC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  float v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

double CLKappaFeaturesAlgGolf::computeSufficientSwing(void *a1)
{
  unint64_t v36 = 0;
  unint64_t v34 = 0;
  unint64_t v32 = 0;
  float v1 = 0.0;
  float v2 = 0.0;
  unint64_t v3 = a1[14];
  unint64_t v4 = a1[15];
  float v5 = 0.0;
  float v6 = 0.0;
  float v7 = 0.0;
  float v8 = 0.0;
  float v9 = 0.0;
  float v10 = 0.0;
  if (v3 <= v4)
  {
    float v11 = 0.0;
    float v12 = 0.0;
    unint64_t v13 = a1[13];
    unint64_t v14 = (float *)(a1[3] + 8);
    do
    {
      float v15 = *(v14 - 2);
      float v16 = *(v14 - 1);
      float v17 = *v14;
      v14 += 3;
      float v18 = v17;
      float v19 = v17 + v2;
      float v20 = v17 + v6;
      if (v3 <= v13)
      {
        float v6 = v20;
      }
      else
      {
        float v2 = v19;
        float v5 = v16 + v5;
      }
      if (v3 > v13) {
        float v9 = v15 + v9;
      }
      else {
        float v7 = v16 + v7;
      }
      if (v3 <= v13) {
        float v10 = v15 + v10;
      }
      float v8 = v15 + v8;
      float v12 = v16 + v12;
      float v11 = v18 + v11;
      ++v3;
    }
    while (v3 <= v4);
    unint64_t v36 = __PAIR64__(LODWORD(v6), LODWORD(v7));
    unint64_t v34 = __PAIR64__(LODWORD(v2), LODWORD(v5));
    unint64_t v32 = __PAIR64__(LODWORD(v11), LODWORD(v12));
  }
  uint64_t v21 = 0;
  float v35 = v10;
  float v33 = v9;
  float v31 = v8;
  float v37 = v10;
  float v38 = v7;
  float v39 = v6;
  do
  {
    float v1 = v1 + (float)(*(float *)((char *)&v37 + v21) * *(float *)((char *)&v37 + v21));
    v21 += 4;
  }
  while (v21 != 12);
  uint64_t v22 = 0;
  float v37 = v9;
  float v38 = v5;
  float v23 = 0.0;
  float v39 = v2;
  do
  {
    float v23 = v23 + (float)(*(float *)((char *)&v37 + v22) * *(float *)((char *)&v37 + v22));
    v22 += 4;
  }
  while (v22 != 12);
  uint64_t v24 = 0;
  float v25 = 0.0;
  do
  {
    float v25 = v25 + (float)(*(float *)((char *)&v35 + v24) * *(float *)((char *)&v35 + v24));
    v24 += 4;
  }
  while (v24 != 12);
  uint64_t v26 = 0;
  float v27 = 0.0;
  do
  {
    float v27 = v27 + (float)(*(float *)((char *)&v33 + v26) * *(float *)((char *)&v33 + v26));
    v26 += 4;
  }
  while (v26 != 12);
  uint64_t v28 = 0;
  float v29 = 0.0;
  do
  {
    float v29 = v29 + (float)(*(float *)((char *)&v31 + v28) * *(float *)((char *)&v31 + v28));
    v28 += 4;
  }
  while (v28 != 12);
  return sqrtf(v25) * 57.2957795;
}

double CLKappaFeaturesAlgGolf::computePlanarity@<D0>(uint64_t **this@<X0>, double *a2@<X8>)
{
  float32x2_t v56 = 0;
  int v57 = 0;
  float v5 = *this;
  float v6 = (uint64_t *)((char *)*this + 12 * ((char *)this[13] - (char *)this[14]) + 12);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)*this) >> 2);
  __int16 v53 = 0;
  uint64_t v54 = 0;
  __p = 0;
  sub_100285FC0((char *)&__p, v5, v6, v7);
  float v8 = sub_10028505C((uint64_t *)&__p, &v56, (uint64_t)v55);
  float v10 = v9;
  float v12 = v11;
  unint64_t v13 = *this;
  unint64_t v14 = (uint64_t *)((char *)*this + 12 * ((char *)this[13] - (char *)this[14]) + 12);
  uint64_t v15 = ((char *)v14 - (char *)*this) >> 2;
  id v50 = 0;
  uint64_t v51 = 0;
  float v49 = 0;
  sub_100285FC0((char *)&v49, v13, v14, 0xAAAAAAAAAAAAAAABLL * v15);
  float v16 = v49;
  float v17 = v50;
  if (v49)
  {
    id v50 = v49;
    operator delete(v49);
  }
  if (__p)
  {
    __int16 v53 = __p;
    operator delete(__p);
  }
  float v18 = this[1];
  float v19 = (uint64_t *)((char *)*this + 12 * ((char *)this[13] - (char *)this[14]) + 12);
  __int16 v53 = 0;
  uint64_t v54 = 0;
  __p = 0;
  sub_100285FC0((char *)&__p, v19, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v19) >> 2));
  float v20 = sub_10028505C((uint64_t *)&__p, &v56, (uint64_t)v55);
  float v22 = v21;
  float v24 = v23;
  float v25 = this[1];
  uint64_t v26 = (uint64_t *)((char *)*this + 12 * ((char *)this[13] - (char *)this[14]) + 12);
  id v50 = 0;
  uint64_t v51 = 0;
  float v49 = 0;
  sub_100285FC0((char *)&v49, v26, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v26) >> 2));
  float v48 = v10;
  float v27 = v49;
  uint64_t v28 = v50;
  if (v49)
  {
    id v50 = v49;
    operator delete(v49);
  }
  float v29 = v12;
  float v30 = v8;
  if (__p)
  {
    __int16 v53 = __p;
    operator delete(__p);
  }
  float v31 = *this;
  unint64_t v32 = this[1];
  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)*this) >> 2);
  __int16 v53 = 0;
  uint64_t v54 = 0;
  __p = 0;
  sub_100285FC0((char *)&__p, v31, v32, v33);
  float v34 = sub_10028505C((uint64_t *)&__p, &v56, (uint64_t)v55);
  float v36 = v35;
  float v38 = v37;
  float v39 = *this;
  unint64_t v40 = this[1];
  unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40 - (char *)*this) >> 2);
  id v50 = 0;
  uint64_t v51 = 0;
  float v49 = 0;
  sub_100285FC0((char *)&v49, v39, v40, v41);
  unint64_t v42 = v49;
  uint64_t v43 = v50;
  if (v49)
  {
    id v50 = v49;
    operator delete(v49);
  }
  if (__p)
  {
    __int16 v53 = __p;
    operator delete(__p);
  }
  float v44 = (float)(0xAAAAAAAAAAAAAAABLL * ((v28 - v27) >> 2));
  float v45 = (float)(0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 2));
  float v46 = (float)(0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 2));
  *a2 = (float)(v30 / v45);
  a2[1] = (float)(v20 / v44);
  a2[2] = (float)(v34 / v46);
  a2[3] = (float)(v48 / v45);
  a2[4] = (float)(v22 / v44);
  a2[5] = (float)(v36 / v46);
  a2[6] = (float)(v29 / v45);
  a2[7] = (float)(v24 / v44);
  double result = (float)(v38 / v46);
  a2[8] = result;
  return result;
}

void sub_10028502C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_10028505C(uint64_t *a1, float32x2_t *a2, uint64_t a3)
{
  int v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v7 = 0;
    do
    {
      float v8 = (float32x2_t *)(v4 + 12 * v7);
      float v9 = v8[1].f32[0] - a2[1].f32[0];
      float v18 = (_DWORD *)vsub_f32(*v8, *a2);
      *(float *)&uint64_t v19 = v9;
      sub_10028622C((uint64_t)&v18, (uint64_t)v20);
      for (unint64_t i = 0; i != 9; ++i)
        *((float *)&v15 + i) = sub_100280A90((uint64_t)v20, i) + *((float *)&v15 + i);
      ++v7;
      uint64_t v4 = *a1;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2));
  }
  v20[0] = v15;
  v20[1] = v16;
  int v21 = v17;
  sub_1002862B4((uint64_t)v20, a3);
  v22[0] = v11;
  v22[1] = v12;
  v22[2] = v13;
  float v18 = v22;
  uint64_t v19 = a3;
  sub_100286878((uint64_t *)&v18, 0, 1uLL);
  sub_100286878((uint64_t *)&v18, 0, 2uLL);
  sub_100286878((uint64_t *)&v18, 1uLL, 2uLL);
  return *(float *)v22;
}

void *CLKappaFeaturesAlgGolf::computeOrientation(void *result)
{
  unint64_t v1 = result[16];
  unint64_t v2 = result[17];
  double v3 = 0.0;
  if (v1 <= v2)
  {
    uint64_t v4 = (float *)(12 * v1 - 12 * result[14] + *result + 8);
    do
    {
      float v5 = *v4;
      v4 += 3;
      double v6 = fabsf(v5);
      if (v3 < v6) {
        double v3 = v6;
      }
      ++v1;
    }
    while (v1 <= v2);
  }
  return result;
}

void CLKappaFeaturesAlgGolf::computeDMFeatures(id *this@<X0>, uint64_t a2@<X8>)
{
  CLKappaFeaturesAlgGolf::computeWindowCrownOrientation(this, (uint64_t)v12);
  *(double *)a2 = CLKappaFeaturesAlgGolf::computeSufficientSwing(v12);
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  CLKappaFeaturesAlgGolf::computePlanarity((uint64_t **)v12, (double *)(a2 + 32));
  unint64_t v7 = v18;
  double v8 = 0.0;
  if (v18 <= v19)
  {
    float v9 = (float *)((char *)v12[0] + 12 * v18 - 12 * v17 + 8);
    do
    {
      float v10 = *v9;
      v9 += 3;
      double v11 = fabsf(v10);
      if (v8 < v11) {
        double v8 = v11;
      }
      ++v7;
    }
    while (v7 <= v19);
  }
  *(double *)(a2 + 104) = v8;

  if (__p)
  {
    unint64_t v14 = __p;
    operator delete(__p);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_1002852C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CLKappaFeaturesAlgGolf::epochFinalize(CLKappaFeaturesAlgGolf *this, uint64_t a2)
{
  id v4 = *(id *)(*((void *)this + 6) + 24);
  id v5 = *(id *)(*((void *)this + 6) + 72);
  CSAccelPeakDetectorResult::detectPeaks(v4, (uint64_t)v64, *(double *)(*((void *)this + 4) + 16), *(double *)(*((void *)this + 4) + 24));
  uint64_t v47 = a2;
  uint64_t v6 = (void *)*((void *)this + 6);
  uint64_t v7 = v6[2];
  if (v7 == -1)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = *(void *)(*((void *)this + 6) + 8) * v7;
    unint64_t v9 = v8 + *v6;
  }
  id v10 = v4;
  id v11 = v5;
  id v56 = v10;
  id v57 = v11;
  unint64_t v58 = v8;
  unint64_t v59 = v9;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  int v13 = v65;
  int v12 = v66;
  uint64_t v14 = (char *)v66 - (char *)v65;
  if ((unint64_t)((char *)v66 - (char *)v65) >= 5)
  {
    uint64_t v15 = 0;
    do
    {
      if (v67[v15 + 1] < v67[v15])
      {
        if (qword_1003DB6A0 != -1) {
          dispatch_once(&qword_1003DB6A0, &stru_1003B1368);
        }
        id v16 = qword_1003DB6A8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "[GLF] peak timestamps are not in increasing order", buf, 2u);
        }
        int v13 = v65;
        int v12 = v66;
      }
      ++v15;
      uint64_t v14 = (char *)v12 - (char *)v13;
    }
    while (v15 + 1 < (unint64_t)(v12 - v13));
  }
  if (v12 == v13)
  {
    unint64_t v42 = v14 >> 2;
    id v44 = v10;
    uint64_t v43 = v11;
  }
  else
  {
    unint64_t v17 = 0;
    do
    {
      unint64_t v18 = v67[v17];
      unint64_t v19 = v58;
      unint64_t v20 = v59;
      int v21 = CLKappaFeaturesAlgGolf::Window::sufficientData(&v56, v18);
      if (v19 <= v18 - 1000000 && v18 + 1000000 < v20 && ((v21 ^ 1) & 1) == 0)
      {
        CLKappaFeaturesAlgGolf::Window::scrollToPeakTimestamp((CLKappaFeaturesAlgGolf::Window *)&v56, v67[v17]);
        CLKappaFeaturesAlgGolf::computeAccelFeatures(&v56, v65[v17], v23);
        double v25 = v24;
        double v27 = v26;
        CLKappaFeaturesAlgGolf::computeDMFeatures(&v56, (uint64_t)buf);
        uint64_t v28 = *((void *)this + 4);
        if (v27 >= *(double *)(v28 + 32)
          && v25 <= *(double *)(v28 + 40)
          && *(double *)buf >= *(double *)(v28 + 48)
          && v49 >= *(double *)(v28 + 56)
          && v50 >= *(double *)(v28 + 64)
          && v51 >= *(double *)(v28 + 96)
          && v52 >= *(double *)(v28 + 72)
          && v53 >= *(double *)(v28 + 80)
          && v54 >= *(double *)(v28 + 88))
        {
          double v29 = *(double *)(v28 + 104);
          BOOL v30 = v55 < v29;
          *(unsigned char *)(v28 + 144) |= v55 >= v29;
          if (!v30)
          {
            unint64_t v31 = *(void *)(v28 + 136);
            unint64_t v32 = *(unint64_t **)(v28 + 128);
            if ((unint64_t)v32 >= v31)
            {
              float v34 = *(unint64_t **)(v28 + 120);
              uint64_t v35 = v32 - v34;
              if ((unint64_t)(v35 + 1) >> 61) {
                sub_10000EE98();
              }
              unint64_t v36 = v31 - (void)v34;
              unint64_t v37 = (uint64_t)(v31 - (void)v34) >> 2;
              if (v37 <= v35 + 1) {
                unint64_t v37 = v35 + 1;
              }
              if (v36 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v37;
              }
              if (v38)
              {
                float v39 = (char *)sub_10000EEB0(v28 + 136, v38);
                float v34 = *(unint64_t **)(v28 + 120);
                unint64_t v32 = *(unint64_t **)(v28 + 128);
              }
              else
              {
                float v39 = 0;
              }
              unint64_t v40 = (unint64_t *)&v39[8 * v35];
              *unint64_t v40 = v18;
              unint64_t v33 = v40 + 1;
              while (v32 != v34)
              {
                unint64_t v41 = *--v32;
                *--unint64_t v40 = v41;
              }
              *(void *)(v28 + 120) = v40;
              *(void *)(v28 + 128) = v33;
              *(void *)(v28 + 136) = &v39[8 * v38];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              *unint64_t v32 = v18;
              unint64_t v33 = v32 + 1;
            }
            *(void *)(v28 + 128) = v33;
          }
        }
      }
      ++v17;
      unint64_t v42 = v66 - v65;
    }
    while (v42 > v17);
    id v44 = v56;
    uint64_t v43 = v57;
  }
  float v45 = (void *)*((void *)this + 4);
  v45[14] = v47;
  uint64_t v46 = (uint64_t)(v45[16] - v45[15]) >> 3;
  v45[19] = v42;
  v45[20] = v46;

  if (v67)
  {
    unint64_t v68 = v67;
    operator delete(v67);
  }
  if (v65)
  {
    uint64_t v66 = v65;
    operator delete(v65);
  }
}

void sub_1002856D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27)
{
  sub_1000327E0((void *)(v28 - 168));
  _Unwind_Resume(a1);
}

void virtual thunk to'CLKappaFeaturesAlgGolf::epochFinalize(CLKappaFeaturesAlgGolf *this, uint64_t a2)
{
}

uint64_t CLKappaFeaturesAlgGolf::epochReset(CLKappaFeaturesAlgGolf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

uint64_t virtual thunk to'CLKappaFeaturesAlgGolf::epochReset(CLKappaFeaturesAlgGolf *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 56) + 32) + 24))();
}

void sub_10028579C(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003B0820;
  *((void *)this + 8) = off_1003B0AD0;
  *((void *)this + 9) = off_1003B0C10;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_1003B0CF0;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  double v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003B0D40);
}

void sub_100285898(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003B0820;
  *((void *)this + 8) = off_1003B0AD0;
  *((void *)this + 9) = off_1003B0C10;
  *((void *)this + 10) = off_1003B0CF0;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  double v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003B0D40);

  operator delete();
}

void sub_10028597C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  id v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    sub_10000BB9C(v4);
  }
}

void sub_1002859A8(void *a1)
{
  unint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)unint64_t v1 = off_1003B0820;
  *((void *)v1 + 8) = off_1003B0AD0;
  *((void *)v1 + 9) = off_1003B0C10;
  *((void *)v1 + 10) = off_1003B0CF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B0D40);
}

void sub_100285A8C(void *a1)
{
  unint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)unint64_t v1 = off_1003B0820;
  *((void *)v1 + 8) = off_1003B0AD0;
  *((void *)v1 + 9) = off_1003B0C10;
  *((void *)v1 + 10) = off_1003B0CF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B0D40);

  operator delete();
}

void sub_100285B84(void *a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 32);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  id v5 = (std::__shared_weak_count *)*((void *)v2 + 7);
  *((void *)v2 + 6) = v4;
  *((void *)v2 + 7) = v3;
  if (v5) {
    sub_10000BB9C(v5);
  }
}

void sub_100285BC4(void *a1)
{
  unint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)unint64_t v1 = off_1003B0820;
  *((void *)v1 + 8) = off_1003B0AD0;
  *((void *)v1 + 9) = off_1003B0C10;
  *((void *)v1 + 10) = off_1003B0CF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B0D40);
}

void sub_100285CA8(void *a1)
{
  unint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)unint64_t v1 = off_1003B0820;
  *((void *)v1 + 8) = off_1003B0AD0;
  *((void *)v1 + 9) = off_1003B0C10;
  *((void *)v1 + 10) = off_1003B0CF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B0D40);

  operator delete();
}

void sub_100285DA0(void *a1)
{
  unint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)unint64_t v1 = off_1003B0820;
  *((void *)v1 + 8) = off_1003B0AD0;
  *((void *)v1 + 9) = off_1003B0C10;
  *((void *)v1 + 10) = off_1003B0CF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B0D40);
}

void sub_100285E84(void *a1)
{
  unint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)unint64_t v1 = off_1003B0820;
  *((void *)v1 + 8) = off_1003B0AD0;
  *((void *)v1 + 9) = off_1003B0C10;
  *((void *)v1 + 10) = off_1003B0CF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B0D40);

  operator delete();
}

void sub_100285F7C(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

char *sub_100285FC0(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = sub_100286040(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2;
      *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v7 = v8;
      v7 += 12;
      a2 = (uint64_t *)((char *)a2 + 12);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_100286024(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100286040(void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_10000EE98();
  }
  double result = (char *)sub_1000242C0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void sub_100286094(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0xC0uLL);
  sub_1002860E0((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
}

void sub_1002860CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_1002860E0(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1003B1398;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 24) = off_1003A1668;
  *(_OWORD *)(a1 + 40) = xmmword_10033E410;
  *(_OWORD *)(a1 + 56) = xmmword_10033E420;
  *(_OWORD *)(a1 + 72) = xmmword_10033E430;
  *(_OWORD *)(a1 + 88) = xmmword_10033E440;
  *(_OWORD *)(a1 + 104) = xmmword_10033E450;
  *(_OWORD *)(a1 + 120) = xmmword_10033E460;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

void sub_100286190(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003B1398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002861B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003B1398;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100286204(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

float *sub_10028622C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  for (unint64_t i = 0; i != 3; ++i)
  {
    for (unint64_t j = 0; j != 3; ++j)
    {
      float v6 = sub_100023FE4(a1, i);
      float v7 = v6 * sub_100023FE4(a1, j);
      double result = (float *)sub_100280448(a2, i, j);
      *double result = v7;
    }
  }
  return result;
}

float *sub_1002862B4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0;
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  do
  {
    *(_DWORD *)sub_100280448(a2, v4, v4) = 1065353216;
    int v5 = *(_DWORD *)sub_100280448(a1, v4, v4);
    *(_DWORD *)sub_100021EF8((uint64_t)&v69, v4) = v5;
    int v6 = *(_DWORD *)sub_100280448(a1, v4, v4);
    *(_DWORD *)sub_100021EF8((uint64_t)&v67, v4) = v6;
    *(_DWORD *)sub_100021EF8((uint64_t)&v65, v4++) = 0;
  }
  while (v4 != 3);
  unint64_t v7 = 0;
  do
  {
    unint64_t v8 = 0;
    char v9 = 1;
    float v10 = 0.0;
    do
    {
      char v11 = v9;
      unint64_t v12 = v8 + 1;
      do
      {
        double result = (float *)sub_100280448(a1, v8, v12);
        float v14 = *result;
        if (*result < 0.0) {
          float v14 = -*result;
        }
        float v10 = v10 + v14;
        ++v12;
      }
      while (v12 != 3);
      char v9 = 0;
      unint64_t v8 = 1;
    }
    while ((v11 & 1) != 0);
    if (v10 == 0.0) {
      break;
    }
    float v15 = 0.0;
    if (v7 <= 2) {
      float v15 = (float)(v10 * 0.2) / 9.0;
    }
    char v16 = 0;
    unint64_t v17 = 0;
    unint64_t v64 = v7 + 1;
    char v18 = 1;
    do
    {
      char v19 = v18;
      unint64_t v20 = v17 + 1;
      do
      {
        int v21 = (float *)sub_100280448(a1, v17, v20);
        float v22 = *v21;
        if (*v21 < 0.0) {
          float v22 = -*v21;
        }
        float v23 = v22 * 100.0;
        if (v7 < 4) {
          goto LABEL_31;
        }
        double v24 = (float *)sub_100021EF8((uint64_t)&v69, v17);
        float v25 = v23 + *v24;
        if (v25 >= 0.0) {
          float v26 = v23 + *v24;
        }
        else {
          float v26 = -v25;
        }
        double v27 = (float *)sub_100021EF8((uint64_t)&v69, v17);
        float v28 = *v27;
        if (*v27 < 0.0) {
          float v28 = -*v27;
        }
        if (v26 != v28) {
          goto LABEL_31;
        }
        double v29 = (float *)sub_100021EF8((uint64_t)&v69, v20);
        float v30 = v23 + *v29;
        if (v30 >= 0.0) {
          float v31 = v23 + *v29;
        }
        else {
          float v31 = -v30;
        }
        unint64_t v32 = (float *)sub_100021EF8((uint64_t)&v69, v20);
        float v33 = *v32;
        if (*v32 < 0.0) {
          float v33 = -*v32;
        }
        if (v31 == v33)
        {
          double result = (float *)sub_100280448(a1, v17, v20);
          *double result = 0.0;
        }
        else
        {
LABEL_31:
          double result = (float *)sub_100280448(a1, v17, v20);
          float v34 = *result;
          if (*result < 0.0) {
            float v34 = -*result;
          }
          if (v34 > v15)
          {
            float v35 = *(float *)sub_100021EF8((uint64_t)&v69, v20);
            float v36 = v35 - *(float *)sub_100021EF8((uint64_t)&v69, v17);
            float v37 = v23 + v36;
            if ((float)(v23 + v36) < 0.0) {
              float v37 = -(float)(v23 + v36);
            }
            float v38 = -v36;
            if (v36 >= 0.0) {
              float v38 = v36;
            }
            if (v37 == v38)
            {
              float v39 = *(float *)sub_100280448(a1, v17, v20) / v36;
            }
            else
            {
              unint64_t v40 = (float *)sub_100280448(a1, v17, v20);
              float v41 = (float)(v36 * 0.5) / *v40;
              float v42 = -v41;
              BOOL v43 = v41 < 0.0;
              if (v41 >= 0.0) {
                float v42 = (float)(v36 * 0.5) / *v40;
              }
              float v44 = 1.0 / (float)(v42 + sqrtf((float)(v41 * v41) + 1.0));
              if (v43) {
                float v39 = -v44;
              }
              else {
                float v39 = v44;
              }
            }
            float v45 = 1.0 / sqrtf((float)(v39 * v39) + 1.0);
            float v46 = v39 * v45;
            float v47 = (float)(v39 * v45) / (float)(v45 + 1.0);
            float v48 = v39 * *(float *)sub_100280448(a1, v17, v20);
            double v49 = (float *)sub_100021EF8((uint64_t)&v65, v17);
            *double v49 = *v49 - v48;
            double v50 = (float *)sub_100021EF8((uint64_t)&v65, v20);
            *double v50 = v48 + *v50;
            double v51 = (float *)sub_100021EF8((uint64_t)&v69, v17);
            *double v51 = *v51 - v48;
            double v52 = (float *)sub_100021EF8((uint64_t)&v69, v20);
            *double v52 = v48 + *v52;
            *(_DWORD *)sub_100280448(a1, v17, v20) = 0;
            if (v16)
            {
              float v53 = *(float *)(a1 + 12);
              double v54 = (float *)sub_100280448(a1, 0, v20);
              float v55 = *v54;
              *(float *)(a1 + 12) = v53 - (float)(v46 * (float)(*v54 + (float)(v53 * v47)));
              *(float *)sub_100280448(a1, 0, v20) = v55 + (float)(v46 * (float)(v53 - (float)(v55 * v47)));
            }
            float v56 = -v46;
            if (v17 + 1 < v20)
            {
              do
              {
                float v57 = *(float *)sub_100280448(a1, v17, 1uLL);
                float v58 = *(float *)(a1 + 28);
                *(float *)sub_100280448(a1, v17, 1uLL) = v57 + (float)(v56 * (float)(v58 + (float)(v57 * v47)));
                *(float *)(a1 + 28) = v58 + (float)(v46 * (float)(v57 - (float)(v58 * v47)));
              }
              while (v20 > 2);
            }
            if (v20 <= 1)
            {
              float v59 = *(float *)sub_100280448(a1, v17, 2uLL);
              float v60 = *(float *)sub_100280448(a1, v20, 2uLL);
              *(float *)sub_100280448(a1, v17, 2uLL) = v59 + (float)(v56 * (float)(v60 + (float)(v59 * v47)));
              *(float *)sub_100280448(a1, v20, 2uLL) = v60 + (float)(v46 * (float)(v59 - (float)(v60 * v47)));
            }
            for (unint64_t i = 0; i != 3; ++i)
            {
              float v62 = *(float *)sub_100280448(a2, i, v17);
              float v63 = *(float *)sub_100280448(a2, i, v20);
              *(float *)sub_100280448(a2, i, v17) = v62 + (float)(v56 * (float)(v63 + (float)(v62 * v47)));
              double result = (float *)sub_100280448(a2, i, v20);
              *double result = v63 + (float)(v46 * (float)(v62 - (float)(v63 * v47)));
            }
          }
        }
        ++v20;
      }
      while (v20 != 3);
      char v18 = 0;
      char v16 = 1;
      unint64_t v17 = 1;
    }
    while ((v19 & 1) != 0);
    float32x2_t v67 = vadd_f32(v65, v67);
    float v68 = v66 + v68;
    float32x2_t v69 = v67;
    float v70 = v68;
    float v66 = 0.0;
    float32x2_t v65 = 0;
    ++v7;
  }
  while (v64 != 10);
  return result;
}

int *sub_100286878(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  float v6 = *(float *)sub_100021EF8(*a1, a2);
  double result = (int *)sub_100021EF8(*a1, a3);
  if (v6 < *(float *)result)
  {
    unint64_t v8 = (int *)sub_100021EF8(*a1, a2);
    char v9 = (int *)sub_100021EF8(*a1, a3);
    int v10 = *v8;
    *unint64_t v8 = *v9;
    *char v9 = v10;
    char v11 = (int *)sub_100280448(a1[1], 0, a2);
    unint64_t v12 = (int *)sub_100280448(a1[1], 0, a3);
    int v13 = *v11;
    *char v11 = *v12;
    *unint64_t v12 = v13;
    float v14 = (int *)sub_100280448(a1[1], 1uLL, a2);
    float v15 = (int *)sub_100280448(a1[1], 1uLL, a3);
    int v16 = *v14;
    *float v14 = *v15;
    *float v15 = v16;
    unint64_t v17 = (int *)sub_100280448(a1[1], 2uLL, a2);
    double result = (int *)sub_100280448(a1[1], 2uLL, a3);
    int v18 = *v17;
    *unint64_t v17 = *result;
    *double result = v18;
  }
  return result;
}

uint64_t CLKappaFeaturesAlgLackOfMotionResult::reset(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 60) = 0;
  *(_DWORD *)(this + 64) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 32) = 0;
  *(_WORD *)(this + 56) = 0;
  *(void *)(this + 72) = 0;
  *(void *)(this + 80) = 0;
  *(void *)(this + 85) = 0;
  return this;
}

void CLKappaFeaturesAlgLackOfMotionResult::log(CLKappaFeaturesAlgLackOfMotionResult *this)
{
}

void CLKappaFeaturesAlgLackOfMotionResult::logInternal(CLKappaFeaturesAlgLackOfMotionResult *this, int a2)
{
  if (a2)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B1FD0);
    }
    uint64_t v3 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *((void *)this + 4);
      uint64_t v5 = *((void *)this + 5);
      int v6 = *((_DWORD *)this + 12);
      int v7 = *((_DWORD *)this + 13);
      int v8 = *((unsigned __int8 *)this + 56);
      int v9 = *((unsigned __int8 *)this + 57);
      int v10 = *((_DWORD *)this + 15);
      int v11 = *((_DWORD *)this + 16);
      double v12 = *((float *)this + 4);
      double v13 = *((float *)this + 5);
      double v14 = *((float *)this + 6);
      uint64_t v16 = *((void *)this + 9);
      uint64_t v15 = *((void *)this + 10);
      double v17 = *((float *)this + 7);
      float v18 = *((float *)this + 22);
      int v19 = *((unsigned __int8 *)this + 92);
      int v20 = 134353664;
      uint64_t v21 = v4;
      __int16 v22 = 2050;
      uint64_t v23 = v5;
      __int16 v24 = 1026;
      int v25 = v6;
      __int16 v26 = 1026;
      int v27 = v7;
      __int16 v28 = 1026;
      int v29 = v8;
      __int16 v30 = 1026;
      int v31 = v9;
      __int16 v32 = 1026;
      int v33 = v10;
      __int16 v34 = 1026;
      int v35 = v11;
      __int16 v36 = 2050;
      double v37 = v12;
      __int16 v38 = 2050;
      double v39 = v13;
      __int16 v40 = 2050;
      double v41 = v14;
      __int16 v42 = 2050;
      double v43 = v17;
      __int16 v44 = 2050;
      uint64_t v45 = v16;
      __int16 v46 = 2050;
      uint64_t v47 = v15;
      __int16 v48 = 2050;
      double v49 = (double)v15 * 0.000001;
      __int16 v50 = 2050;
      double v51 = v18;
      __int16 v52 = 2050;
      double v53 = (float)(v18 / 0.44704);
      __int16 v54 = 1026;
      int v55 = v19;
      __int16 v56 = 1026;
      int v57 = 1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[LOM] summary,A,%{public}llu,B,%{public}llu,C,%{public}i,D,%{public}i,E,%{public}d,F,%{public}d,G,%{public}d,H,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,debug-1,%{public}llu,debug-2,%{public}llu,debug-3,%{public}f,debug-4,%{public}f,debug-5,%{public}f,debug-6,%{public}d,debug-7,%{public}d\n", (uint8_t *)&v20, 0xA0u);
    }
  }
}

void CLKappaFeaturesAlgLackOfMotion::CLKappaFeaturesAlgLackOfMotion(CLKappaFeaturesAlgLackOfMotion *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  *uint64_t v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0xA00000000;
  *((void *)this + 14) = 0xA00000000;
  *((void *)this + 17) = 0;
  *((_WORD *)this + 72) = 0;
  *((_DWORD *)this + 37) = 0;
  *((_DWORD *)this + 38) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  int v6 = (char *)operator new(0x78uLL);
  *((void *)v6 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_1003B2000;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((void *)v6 + 13) = 0;
  *((void *)v6 + 14) = 0;
  *((void *)v6 + 3) = &off_1003A1788;
  *(_OWORD *)(v6 + 40) = xmmword_10033E520;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 8) = 0;
  *((void *)v6 + 9) = 0;
  *((_WORD *)v6 + 40) = 0;
  *(void *)(v6 + 109) = 0;
  *((void *)v6 + 12) = 0;
  int v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v6 + 24;
  *((void *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    int v6 = (char *)*((void *)this + 2);
    int v10 = (char *)*((void *)this + 1);
    int v11 = (std::__shared_weak_count *)v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    int v10 = v6 + 24;
    int v11 = (std::__shared_weak_count *)v6;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_100286EC0((uint64_t)&v10, &v12);
  long long v8 = v12;
  long long v12 = 0uLL;
  int v9 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v12 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  if (v11) {
    sub_10000BB9C(v11);
  }
  (*(void (**)(CLKappaFeaturesAlgLackOfMotion *))(*(void *)this + 312))(this);
}

void sub_100286E88(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v4) {
    sub_10000BB9C(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v5) {
    sub_10000BB9C(v5);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_100286EC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgLackOfMotion::CLKappaFeaturesAlgLackOfMotion(CLKappaFeaturesAlgLackOfMotion *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 22) = off_10039A008;
  *((void *)this + 23) = off_10039A0D0;
  *((void *)this + 24) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003B19A8);
  *(void *)uint64_t v2 = off_1003B1488;
  *(void *)(v2 + 168) = 0;
  *(void *)(v2 + 176) = off_1003B1738;
  *(void *)(v2 + 184) = off_1003B1878;
  *(void *)(v2 + 192) = off_1003B1958;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 64) = 0xA00000000;
  *(void *)(v2 + 112) = 0xA00000000;
  *(void *)(v2 + 136) = 0;
  *(_WORD *)(v2 + 144) = 0;
  *(_DWORD *)(v2 + 148) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(void *)(v2 + 160) = 0;
  uint64_t v3 = (char *)operator new(0x78uLL);
  *((void *)v3 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = off_1003B2000;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((void *)v3 + 13) = 0;
  *((void *)v3 + 14) = 0;
  *((void *)v3 + 3) = &off_1003A1788;
  *(_OWORD *)(v3 + 40) = xmmword_10033E520;
  *((void *)v3 + 7) = 0;
  *((void *)v3 + 8) = 0;
  *((void *)v3 + 9) = 0;
  *((_WORD *)v3 + 40) = 0;
  *(void *)(v3 + 109) = 0;
  *((void *)v3 + 12) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v3 + 24;
  *((void *)this + 2) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    uint64_t v3 = (char *)*((void *)this + 2);
    int v7 = (char *)*((void *)this + 1);
    long long v8 = (std::__shared_weak_count *)v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    int v7 = v3 + 24;
    long long v8 = (std::__shared_weak_count *)v3;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_100286EC0((uint64_t)&v7, &v9);
  long long v5 = v9;
  long long v9 = 0uLL;
  int v6 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v9 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  if (v8) {
    sub_10000BB9C(v8);
  }
  (*(void (**)(CLKappaFeaturesAlgLackOfMotion *))(*(void *)this + 312))(this);
}

void sub_1002871C0(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v3) {
    sub_10000BB9C(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B19A8);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgLackOfMotion::resetConfiguration(CLKappaFeaturesAlgLackOfMotion *this)
{
  id v22 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgLOMConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 1106925439;
  LODWORD(v4) = 1091505517;
  LODWORD(v5) = 1074728301;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v22 withMinValue:v5 maxValue:v3 defaultValue:v4];
  LODWORD(v23) = v6;

  int v7 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v8) = 1027021677;
  LODWORD(v9) = 1087804452;
  LODWORD(v10) = 1074728301;
  [v7 algorithmThresholdNumber:1 inArrayForKey:v22 withMinValue:v8 maxValue:v9 defaultValue:v10];
  DWORD1(v23) = v11;

  long long v12 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v13) = 1138722042;
  LODWORD(v14) = 1076603318;
  LODWORD(v15) = 1074728301;
  [v12 algorithmThresholdNumber:2 inArrayForKey:v22 withMinValue:v15 maxValue:v13 defaultValue:v14];
  DWORD2(v23) = v16;

  double v17 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v18) = 1027021677;
  LODWORD(v19) = 1087804452;
  LODWORD(v20) = 1074728301;
  [v17 algorithmThresholdNumber:3 inArrayForKey:v22 withMinValue:v18 maxValue:v19 defaultValue:v20];
  HIDWORD(v23) = v21;

  CLKappaFeaturesAlgLackOfMotion::setConfig((uint64_t)this, &v23);
}

void sub_100287370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgLackOfMotion::setConfig(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(*(void *)(a1 + 32) + 16) = *a2;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B1FD0);
  }
  double v3 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *(float **)(a1 + 32);
    double v6 = v5[4];
    double v7 = v5[5];
    double v8 = v5[6];
    double v9 = v5[7];
    int v10 = 134218752;
    double v11 = v6;
    __int16 v12 = 2048;
    double v13 = v7;
    __int16 v14 = 2048;
    double v15 = v8;
    __int16 v16 = 2048;
    double v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[LOM] config, ,%f, %f, %f, %f", (uint8_t *)&v10, 0x2Au);
  }
  return result;
}

uint64_t CLKappaFeaturesAlgLackOfMotion::resetCounters(uint64_t this)
{
  *(_WORD *)(this + 144) = 0;
  *(_DWORD *)(this + 148) = 0;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

uint64_t CLKappaFeaturesAlgLackOfMotion::reset(CLKappaFeaturesAlgLackOfMotion *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4));
  *((_WORD *)this + 72) = 0;
  *((_DWORD *)this + 37) = 0;
  *((_DWORD *)this + 38) = 0;
  uint64_t v3 = *((void *)this + 17);
  *((void *)this + 20) = v3;
  *((void *)this + 2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v3;
  return result;
}

void CLKappaFeaturesAlgLackOfMotion::epochFinalize(CLKappaFeaturesAlgLackOfMotion *this, unint64_t a2)
{
  *(void *)(*((void *)this + 4) + 32) = a2;
}

void CLKappaFeaturesAlgLackOfMotion::fillGapsAsRequiredUpToTimestamp(CLKappaFeaturesAlgLackOfMotion *this, unint64_t a2)
{
  if (*((void *)this + 20) == *((void *)this + 17)) {
    *((void *)this + 20) = a2;
  }
  int v4 = 1001;
  while (1)
  {
    uint64_t v5 = *((void *)this + 20);
    if (v5 + 1500000 >= a2) {
      break;
    }
    *(void *)double v8 = v5 + 1000000;
    *(_DWORD *)&unsigned char v8[8] = 2143289344;
    LOBYTE(v9) = 0;
    CLKappaFeaturesAlgLackOfMotion::processGPS((uint64_t)this, (float *)v8);
    if (!--v4)
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003B1FD0);
      }
      double v6 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v7 = *((void *)this + 20);
        *(_DWORD *)double v8 = 134218496;
        *(void *)&v8[4] = v7;
        __int16 v9 = 2048;
        unint64_t v10 = a2;
        __int16 v11 = 2048;
        uint64_t v12 = 1000000;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[LOM] Something is funny with GPS stream, fLastGPSTimestamp:%llu, nextTimestamp:%llu, deltaTime:%llu", v8, 0x20u);
      }
      return;
    }
  }
}

void virtual thunk to'CLKappaFeaturesAlgLackOfMotion::epochFinalize(CLKappaFeaturesAlgLackOfMotion *this, unint64_t a2)
{
  uint64_t v3 = (CLKappaFeaturesAlgLackOfMotion *)((char *)this + *(void *)(*(void *)this - 48));
  CLKappaFeaturesAlgLackOfMotion::fillGapsAsRequiredUpToTimestamp(v3, a2);
  *(void *)(*((void *)v3 + 4) + 32) = a2;
}

uint64_t CLKappaFeaturesAlgLackOfMotion::epochReset(uint64_t this)
{
  *(_WORD *)(this + 144) = 0;
  *(_DWORD *)(this + 148) = 0;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

void *virtual thunk to'CLKappaFeaturesAlgLackOfMotion::epochReset(void *this)
{
  uint64_t v1 = (char *)this + *(void *)(*this - 56);
  *((_WORD *)v1 + 72) = 0;
  *((_DWORD *)v1 + 37) = 0;
  *((_DWORD *)v1 + 38) = 0;
  return this;
}

double CLKappaFeaturesAlgLackOfMotion::feedGPS(CLKappaFeaturesAlgLackOfMotion *this, const CSSPUGps_Struct *a2)
{
  unint64_t timestamp = a2->timestamp;
  if (timestamp <= *((void *)this + 20))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B1FD0);
    }
    double v6 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
    {
      double v7 = (double)a2->timestamp * 0.000001;
      double v8 = (double)*((unint64_t *)this + 20) * 0.000001;
      *(_DWORD *)__int16 v9 = 134218240;
      *(double *)&v9[4] = v7;
      __int16 v10 = 2048;
      double v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[LOM] Dropped GPS sample because we already move forward further than that sample (Sample timestamp:%lf)(Current timestamp:%lf)", v9, 0x16u);
    }
  }
  else
  {
    CLKappaFeaturesAlgLackOfMotion::fillGapsAsRequiredUpToTimestamp(this, timestamp);
    *(void *)__int16 v9 = a2->timestamp;
    *(float *)&unsigned char v9[8] = a2->speedMS;
    LOBYTE(v10) = 1;
    *(float *)&double result = CLKappaFeaturesAlgLackOfMotion::processGPS((uint64_t)this, (float *)v9);
  }
  return result;
}

float CLKappaFeaturesAlgLackOfMotion::processGPS(uint64_t a1, float *a2)
{
  float v4 = a2[2];
  BOOL v6 = v4 >= 0.0 && *((unsigned char *)a2 + 12) != 0;
  double v8 = (unsigned __int16 *)(a1 + 64);
  uint64_t v7 = *(unsigned __int16 *)(a1 + 64);
  uint64_t v9 = *(unsigned __int16 *)(a1 + 66);
  unint64_t v10 = *(unsigned int *)(a1 + 68);
  if (v7 + v9 >= v10) {
    uint64_t v11 = *(unsigned int *)(a1 + 68);
  }
  else {
    uint64_t v11 = 0;
  }
  *(float *)&v8[2 * (v7 + v9 - v11) + 4] = v4;
  if (v10 <= v9)
  {
    unint64_t v12 = v7 + 1;
    if (v12 < v10) {
      LOWORD(v10) = 0;
    }
    *double v8 = v12 - v10;
  }
  else
  {
    LOWORD(v9) = v9 + 1;
    *(_WORD *)(a1 + 66) = v9;
  }
  __int16 v14 = (_WORD *)(a1 + 112);
  uint64_t v13 = *(unsigned __int16 *)(a1 + 112);
  uint64_t v15 = *(unsigned __int16 *)(a1 + 114);
  unint64_t v16 = *(unsigned int *)(a1 + 116);
  if (v13 + v15 >= v16) {
    uint64_t v17 = *(unsigned int *)(a1 + 116);
  }
  else {
    uint64_t v17 = 0;
  }
  *((unsigned char *)v14 + v13 + v15 - v17 + 8) = v6;
  if (v16 <= v15)
  {
    unint64_t v18 = v13 + 1;
    if (v18 < v16) {
      LOWORD(v16) = 0;
    }
    *__int16 v14 = v18 - v16;
  }
  else
  {
    *(_WORD *)(a1 + 114) = v15 + 1;
  }
  if ((_WORD)v9)
  {
    unint64_t v19 = 0;
    int v20 = 0;
    do
    {
      if (!*(unsigned char *)sub_10002C20C((unsigned __int16 *)(a1 + 112), v19)
        || *(float *)sub_10003D860(v8, v19) <= *(float *)(*(void *)(a1 + 32) + 28))
      {
        ++v20;
      }
      ++v19;
    }
    while ((unsigned __int16)v9 != v19);
  }
  else
  {
    int v20 = 0;
  }
  uint64_t v21 = *(void *)(a1 + 32);
  if (v6)
  {
    if (v4 >= *(float *)(v21 + 24))
    {
      int v22 = *(_DWORD *)(a1 + 152) + 1;
      *(_DWORD *)(a1 + 152) = v22;
    }
    else
    {
      int v22 = 0;
      *(unsigned char *)(a1 + 145) = 1;
      *(_DWORD *)(a1 + 152) = 0;
    }
    if (v4 <= *(float *)(v21 + 28))
    {
      int v23 = *(_DWORD *)(a1 + 148) + 1;
      *(_DWORD *)(a1 + 148) = v23;
    }
    else
    {
      int v23 = 0;
      *(unsigned char *)(a1 + 144) = 1;
      *(_DWORD *)(a1 + 148) = 0;
    }
  }
  else
  {
    int v23 = *(_DWORD *)(a1 + 148);
    int v22 = *(_DWORD *)(a1 + 152);
  }
  *(void *)(v21 + 40) = *(void *)(a1 + 168);
  *(_WORD *)(v21 + 56) = *(_WORD *)(a1 + 144);
  *(_DWORD *)(v21 + 48) = v23;
  *(_DWORD *)(v21 + 52) = v22;
  *(_DWORD *)(v21 + 60) = (unsigned __int16)v9;
  *(_DWORD *)(v21 + 64) = v20;
  uint64_t v24 = *(void *)a2;
  *(void *)(v21 + 72) = *(void *)a2;
  float result = a2[2];
  *(float *)(v21 + 88) = result;
  *(unsigned char *)(v21 + 92) = *((unsigned char *)a2 + 12);
  *(void *)(a1 + 160) = v24;
  return result;
}

double virtual thunk to'CLKappaFeaturesAlgLackOfMotion::feedGPS(CLKappaFeaturesAlgLackOfMotion *this, const CSSPUGps_Struct *a2)
{
  return CLKappaFeaturesAlgLackOfMotion::feedGPS((CLKappaFeaturesAlgLackOfMotion *)((char *)this + *(void *)(*(void *)this - 96)), a2);
}

void CLKappaFeaturesAlgLackOfMotion::feedFastAccel(CLKappaFeaturesAlgLackOfMotion *this, const CSSPUTriad_Struct *a2)
{
}

void virtual thunk to'CLKappaFeaturesAlgLackOfMotion::feedFastAccel(CLKappaFeaturesAlgLackOfMotion *this, const CSSPUTriad_Struct *a2)
{
}

uint64_t CLKappaFeaturesAlgLackOfMotion::feedTrigger(uint64_t this, const TriggerSample *a2)
{
  int v2 = *(unsigned __int8 *)(this + 24);
  if (v2 == 2)
  {
    if ((a2[1].rmsSN & 0x100000) != 0) {
      return this;
    }
    goto LABEL_6;
  }
  if (v2 != 1 || (a2->path & 0x10) == 0) {
LABEL_6:
  }
    *(void *)(this + 168) = a2->timestamp;
  return this;
}

void *virtual thunk to'CLKappaFeaturesAlgLackOfMotion::feedTrigger(void *this, const TriggerSample *a2)
{
  int v2 = (char *)this + *(void *)(*this - 88);
  int v3 = v2[24];
  if (v3 == 2)
  {
    if ((a2[1].rmsSN & 0x100000) != 0) {
      return this;
    }
    goto LABEL_6;
  }
  if (v3 != 1 || (a2->path & 0x10) == 0) {
LABEL_6:
  }
    *((void *)v2 + 2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = a2->timestamp;
  return this;
}

void sub_100287B10(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003B1488;
  *((void *)this + 22) = off_1003B1738;
  *((void *)this + 23) = off_1003B1878;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_1003B1958;
  int v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003B19A8);
}

void sub_100287C0C(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003B1488;
  *((void *)this + 22) = off_1003B1738;
  *((void *)this + 23) = off_1003B1878;
  *((void *)this + 24) = off_1003B1958;
  int v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003B19A8);

  operator delete();
}

void sub_100287CF4(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B1488;
  *((void *)v1 + 22) = off_1003B1738;
  *((void *)v1 + 23) = off_1003B1878;
  *((void *)v1 + 24) = off_1003B1958;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B19A8);
}

void sub_100287DD8(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B1488;
  *((void *)v1 + 22) = off_1003B1738;
  *((void *)v1 + 23) = off_1003B1878;
  *((void *)v1 + 24) = off_1003B1958;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B19A8);

  operator delete();
}

void sub_100287ED0(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B1488;
  *((void *)v1 + 22) = off_1003B1738;
  *((void *)v1 + 23) = off_1003B1878;
  *((void *)v1 + 24) = off_1003B1958;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B19A8);
}

void sub_100287FB4(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B1488;
  *((void *)v1 + 22) = off_1003B1738;
  *((void *)v1 + 23) = off_1003B1878;
  *((void *)v1 + 24) = off_1003B1958;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B19A8);

  operator delete();
}

void sub_1002880AC(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B1488;
  *((void *)v1 + 22) = off_1003B1738;
  *((void *)v1 + 23) = off_1003B1878;
  *((void *)v1 + 24) = off_1003B1958;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B19A8);
}

void sub_100288190(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B1488;
  *((void *)v1 + 22) = off_1003B1738;
  *((void *)v1 + 23) = off_1003B1878;
  *((void *)v1 + 24) = off_1003B1958;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B19A8);

  operator delete();
}

void sub_100288288(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_1002882CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003B2000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002882EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003B2000;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100288340(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10028852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1002885A4(uint64_t a1, uint64_t *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  float v4 = WeakRetained;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [WeakRetained defaultMessageHandler:&v6];
  if (v7) {
    sub_10000BB9C(v7);
  }
}

void sub_10028860C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10000BB9C(a10);
  }

  _Unwind_Resume(a1);
}

void sub_100288628(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained interruptionHandler];
}

void sub_100288670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002887BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100288A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a10) {
    sub_10000BB9C(a10);
  }
  if (a13) {
    sub_10000BB9C(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100288C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a10) {
    sub_10000BB9C(a10);
  }
  if (a13) {
    sub_10000BB9C(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100288E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a11) {
    sub_10000BB9C(a11);
  }
  if (a13) {
    sub_10000BB9C(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100289080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a11) {
    sub_10000BB9C(a11);
  }
  if (a13) {
    sub_10000BB9C(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100289280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a11) {
    sub_10000BB9C(a11);
  }
  if (a13) {
    sub_10000BB9C(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002894D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a10) {
    sub_10000BB9C(a10);
  }
  if (a12) {
    sub_10000BB9C(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100289770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a10) {
    sub_10000BB9C(a10);
  }
  if (a12) {
    sub_10000BB9C(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1002897E4(id a1, shared_ptr<CLConnectionMessage> a2)
{
  ptr = (CLConnectionMessage **)a2.__ptr_;
  if (qword_1003DB720 != -1) {
    dispatch_once(&qword_1003DB720, &stru_1003B2128);
  }
  int v3 = qword_1003DB728;
  if (os_log_type_enabled((os_log_t)qword_1003DB728, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "response", buf, 2u);
  }
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v5, v6, objc_opt_class(), 0);
  uint64_t v7 = (NSSet *)objc_claimAutoreleasedReturnValue();
  if (!*ptr
    || (CLConnectionMessage::getDictionaryOfClasses(*ptr, v7), (double v8 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    if (qword_1003DB720 != -1) {
      dispatch_once(&qword_1003DB720, &stru_1003B2128);
    }
    uint64_t v9 = qword_1003DB728;
    if (os_log_type_enabled((os_log_t)qword_1003DB728, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "response is nil", v10, 2u);
    }
    double v8 = 0;
  }
}

void sub_100289974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100289B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a10) {
    sub_10000BB9C(a10);
  }
  if (a12) {
    sub_10000BB9C(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100289DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a10) {
    sub_10000BB9C(a10);
  }
  if (a12) {
    sub_10000BB9C(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100289E68(id a1)
{
  qword_1003DB728 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "CSConnection");

  _objc_release_x1();
}

void *sub_100289EAC@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x70uLL);
  float result = sub_100289F10(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100289EFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100289F10(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003B2158;
  CLConnectionMessage::CLConnectionMessage();
  return a1;
}

void sub_100289F5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100289F70(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003B2158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100289F90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003B2158;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100289FE4(uint64_t a1)
{
}

void *sub_100289FF0@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x70uLL);
  float result = sub_10028A04C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10028A038(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10028A04C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003B2158;
  CLConnectionMessage::CLConnectionMessage();
  return a1;
}

void sub_10028A094(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_10028A0A8@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x70uLL);
  float result = sub_10028A10C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10028A0F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10028A10C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003B2158;
  CLConnectionMessage::CLConnectionMessage();
  return a1;
}

void sub_10028A158(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void CLKappaDeescalatorQuiescence::CLKappaDeescalatorQuiescence(CLKappaDeescalatorQuiescence *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  int v2 = (char *)sub_100007BC0((void *)this + 6, "none");
  *(void *)this = off_1003B21A8;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 80) = 0;
  *(void *)((char *)this + 84) = 0x800000000;
  *(void *)((char *)this + 124) = 0x800000000;
  *((_DWORD *)this + 4CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 2143289344;
  *((void *)this + 2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((void *)this + 7) = 6;
    int v2 = (char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 7CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 6;
  }
  strcpy(v2, "de-Qui");
}

uint64_t CLKappaDeescalatorQuiescence::assertReady(CLKappaDeescalatorQuiescence *this, uint64_t a2, const char *a3)
{
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 80), (BOOL)"[de-Qui] missing config", a3);
  BOOL v5 = *((unsigned __int16 *)this + 43) == *((unsigned __int16 *)this + 63);

  return CLKappaDeescalator::raiseUnless(v5, (BOOL)"[de-Qui] buffer size mismatch", v4);
}

uint64_t CLKappaDeescalatorQuiescence::prepareForNextEpoch(uint64_t this)
{
  *(_DWORD *)(this + 168) = 0;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

uint64_t CLKappaDeescalatorQuiescence::setConfig(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*(unsigned char *)(result + 80)) {
    *(unsigned char *)(result + 80) = 1;
  }
  *(void *)(result + 72) = v2;
  return result;
}

void CLKappaDeescalatorQuiescence::resetConfiguration(CLKappaDeescalatorQuiescence *this)
{
  id v6 = +[CSPersistentConfiguration configBaseKey:"DeescalatorQuiConfig" forFeatureMode:*((unsigned __int8 *)this + 32)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  [v2 floatThreshold:&CLKappaDeescalatorQuiescence::kConfigurationDefaults forKey:v6];
  int v4 = v3;
  [v2 floatThreshold:&unk_10033E648 forKey:v6];
  if (!*((unsigned char *)this + 80)) {
    *((unsigned char *)this + 80) = 1;
  }
  *((_DWORD *)this + 18) = v5;
  *((_DWORD *)this + 19) = v4;
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceQuiescence");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceQuiescence");
}

void sub_10028A3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CLKappaDeescalatorQuiescence::log(CLKappaDeescalatorQuiescence *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 80)) {
    sub_100007D1C();
  }
  float v4 = *((float *)this + 41);
  float v5 = *((float *)this + 42);
  float v6 = *((float *)this + 43);
  float v7 = *((float *)this + 44);
  int v9 = *((_DWORD *)this + 45);
  int v8 = *((_DWORD *)this + 46);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B2228);
  }
  unint64_t v10 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *((_DWORD *)this + 6);
    int v12 = *((unsigned __int8 *)this + 32);
    double v13 = *((float *)this + 19);
    double v14 = *((float *)this + 18);
    int v15 = 134351616;
    uint64_t v16 = a2;
    __int16 v17 = 1026;
    int v18 = v11;
    __int16 v19 = 1026;
    int v20 = v12;
    __int16 v21 = 2050;
    double v22 = v13;
    __int16 v23 = 2050;
    double v24 = v14;
    __int16 v25 = 2050;
    double v26 = v4;
    __int16 v27 = 2050;
    double v28 = v5;
    __int16 v29 = 2050;
    double v30 = v6;
    __int16 v31 = 2050;
    double v32 = v7;
    __int16 v33 = 1026;
    int v34 = v9;
    __int16 v35 = 1026;
    int v36 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[de-Qui] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,config-1,%{public}f,config-2,%{public}f,debug-1a,%{public}f,debug-1b,%{public}f,debug-1c,%{public}f,debug-1d,%{public}f,debug-1e,%{public}d,debug-1f,%{public}d", (uint8_t *)&v15, 0x60u);
  }
}

float CLKappaDeescalatorQuiescence::updateWithPulseFeatures(uint64_t a1, uint64_t a2)
{
  sub_10003D6D8((unsigned __int16 *)(a1 + 84), (_DWORD *)(a2 + 16));
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 172) = result;
  *(_DWORD *)(a1 + 180) = *(unsigned __int16 *)(a1 + 86);
  return result;
}

float CLKappaDeescalatorQuiescence::updateWithSpinFeatures(uint64_t a1, uint64_t a2)
{
  sub_10003D6D8((unsigned __int16 *)(a1 + 124), (_DWORD *)(a2 + 12));
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 164) = result;
  *(_DWORD *)(a1 + 184) = *(unsigned __int16 *)(a1 + 126);
  return result;
}

float CLKappaDeescalatorQuiescence::getRobustHarmonicMean(unsigned __int16 *a1)
{
  if (!a1[1]) {
    return 0.0;
  }
  unint64_t v2 = 0;
  float v3 = 0.0;
  float v4 = 0.0;
  while ((*(_DWORD *)sub_10003D860(a1, v2) & 0x7FFFFFFFu) <= 0x7F7FFFFF && *(float *)sub_10003D860(a1, v2) > 0.000001)
  {
    float v4 = v4 + (float)(1.0 / *(float *)sub_10003D860(a1, v2++));
    unint64_t v5 = a1[1];
    if (v2 >= v5) {
      return (float)v5 / v4;
    }
  }
  return v3;
}

uint64_t CLKappaDeescalatorQuiescence::onEvaluateAtMinHoldDuration(CLKappaDeescalatorQuiescence *this)
{
  *((float *)this + 44) = CLKappaDeescalatorQuiescence::getRobustHarmonicMean((unsigned __int16 *)this + 42);
  float RobustHarmonicMean = CLKappaDeescalatorQuiescence::getRobustHarmonicMean((unsigned __int16 *)this + 62);
  *((float *)this + 42) = RobustHarmonicMean;
  if (!*((unsigned char *)this + 80)) {
    sub_100007D1C();
  }
  if (RobustHarmonicMean < *((float *)this + 18) && *((float *)this + 44) < *((float *)this + 19)) {
    return 1;
  }
  else {
    return 4;
  }
}

_DWORD *CLKappaDeescalatorQuiescence::onPreviousEpochMadeDecision(_DWORD *this)
{
  this[21] = 0;
  this[31] = 0;
  this[45] = 0;
  this[46] = 0;
  return this;
}

void sub_10028A714(void **this)
{
  *this = off_1003B21A8;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_10028A734(void **a1)
{
  *a1 = off_1003B21A8;
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

void sub_10028A788(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void CSKappaEpochBuffer::CSKappaEpochBuffer(CSKappaEpochBuffer *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = a2;
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = a3;
  *((void *)this + 2) = -1;
  *(_OWORD *)((char *)this + 24) = 0u;
  float v4 = (void **)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  id v5 = objc_alloc_init((Class)NSMutableArray);
  float v6 = *v4;
  *float v4 = v5;

  id v7 = objc_alloc_init((Class)NSMutableArray);
  int v8 = (void *)*((void *)this + 4);
  *((void *)this + 4) = v7;

  id v9 = objc_alloc_init((Class)NSMutableArray);
  unint64_t v10 = (void *)*((void *)this + 5);
  *((void *)this + 5) = v9;

  id v11 = objc_alloc_init((Class)NSMutableArray);
  int v12 = (void *)*((void *)this + 6);
  *((void *)this + 6) = v11;

  id v13 = objc_alloc_init((Class)NSMutableArray);
  double v14 = (void *)*((void *)this + 7);
  *((void *)this + 7) = v13;

  id v15 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v16 = (void *)*((void *)this + 8);
  *((void *)this + 8) = v15;

  id v17 = objc_alloc_init((Class)NSMutableArray);
  int v18 = (void *)*((void *)this + 9);
  *((void *)this + 9) = v17;

  id v19 = objc_alloc_init((Class)NSMutableArray);
  int v20 = (void *)*((void *)this + 10);
  *((void *)this + 10) = v19;

  id v21 = objc_alloc_init((Class)NSMutableArray);
  double v22 = (void *)*((void *)this + 11);
  *((void *)this + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v21;

  id v23 = objc_alloc_init((Class)NSMutableArray);
  double v24 = (void *)*((void *)this + 12);
  *((void *)this + 12) = v23;

  id v25 = objc_alloc_init((Class)NSMutableArray);
  double v26 = (void *)*((void *)this + 13);
  *((void *)this + 13) = v25;

  id v27 = objc_alloc_init((Class)NSMutableArray);
  double v28 = (void *)*((void *)this + 14);
  *((void *)this + 14) = v27;

  id v29 = objc_alloc_init((Class)NSMutableArray);
  double v30 = (void *)*((void *)this + 15);
  *((void *)this + 15) = v29;

  id v31 = objc_alloc_init((Class)NSMutableArray);
  double v32 = (void *)*((void *)this + 16);
  *((void *)this + 16) = v31;
}

void sub_10028A944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CSKappaEpochBuffer::feedFastAccel(id *this, const CSSPUAccel800 *a2)
{
  return [this[3] addObject:a2];
}

id CSKappaEpochBuffer::feedHgAccel(id *this, const CSSPUHgAccel *a2)
{
  return [this[4] addObject:a2];
}

id CSKappaEpochBuffer::feedAccel(id *this, const CSSPUAccel *a2)
{
  return [this[5] addObject:a2];
}

id CSKappaEpochBuffer::feedPressure(id *this, const CSSPUPressure *a2)
{
  return [this[8] addObject:a2];
}

id CSKappaEpochBuffer::feedDM(id *this, const CSSPUDM *a2)
{
  return [this[9] addObject:a2];
}

id CSKappaEpochBuffer::feedAudioRms(id *this, const CSSPUSpl *a2)
{
  return [this[10] addObject:a2];
}

id CSKappaEpochBuffer::feedTrustedAudioResult(id *this, const CSSPUTrustedAudioResult *a2)
{
  return [this[11] addObject:a2];
}

id CSKappaEpochBuffer::feedTrigger(id *this, const CSSPUKappaTrigger *a2)
{
  return [this[12] addObject:a2];
}

id CSKappaEpochBuffer::feedGPS(id *this, const CSSPUGps *a2)
{
  return [this[6] addObject:a2];
}

id CSKappaEpochBuffer::feedSteps(id *this, const CSSPUSteps *a2)
{
  return [this[7] addObject:a2];
}

id CSKappaEpochBuffer::feedRoads(id *this, const CSSPURoadInfo *a2)
{
  return [this[13] addObject:a2];
}

id CSKappaEpochBuffer::feedHertzSample(id *this, const CSSPUHertzSample *a2)
{
  return [this[14] addObject:a2];
}

id CSKappaEpochBuffer::feedCompanionStatus(id *this, const CSCompanionStatus *a2)
{
  return [this[15] addObject:a2];
}

id CSKappaEpochBuffer::feedRemoteSample(id *this, const CSRemoteSample *a2)
{
  return [this[16] addObject:a2];
}

id CSKappaEpochBuffer::reset(id *this)
{
  [this[3] removeAllObjects];
  [this[4] removeAllObjects];
  [this[5] removeAllObjects];
  [this[6] removeAllObjects];
  [this[7] removeAllObjects];
  [this[8] removeAllObjects];
  [this[9] removeAllObjects];
  [this[10] removeAllObjects];
  [this[11] removeAllObjects];
  [this[12] removeAllObjects];
  [this[13] removeAllObjects];
  [this[14] removeAllObjects];
  [this[15] removeAllObjects];
  id result = [this[16] removeAllObjects];
  this[2] = (id)-1;
  return result;
}

void CSKappaEpochBuffer::advanceStream(CSKappaEpochBuffer *this, NSMutableArray *a2)
{
  int v8 = a2;
  if ([(NSMutableArray *)v8 count])
  {
    uint64_t v4 = *((void *)this + 1);
    uint64_t v3 = *((void *)this + 2);
    id v5 = [(NSMutableArray *)v8 objectAtIndexedSubscript:0];
    unint64_t v6 = v4 * v3;
    while ((unint64_t)[v5 timestamp] < v6)
    {
      [(NSMutableArray *)v8 removeObjectAtIndex:0];
      if (![(NSMutableArray *)v8 count]) {
        break;
      }
      uint64_t v7 = [(NSMutableArray *)v8 objectAtIndexedSubscript:0];

      id v5 = (void *)v7;
    }
  }
}

void sub_10028ABC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CSKappaEpochBuffer::advanceEpoch(CSKappaEpochBuffer *this)
{
  unint64_t v2 = (NSMutableArray *)*((void *)this + 3);
  ++*((void *)this + 2);
  CSKappaEpochBuffer::advanceStream(this, v2);
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 4));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 5));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 6));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 7));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 8));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 9));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 10));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 11));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 12));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 13));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 14));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 15));
  uint64_t v3 = (NSMutableArray *)*((void *)this + 16);

  CSKappaEpochBuffer::advanceStream(this, v3);
}

void CSKappaEpochBuffer::dumpStreamStats(CSKappaEpochBuffer *this, NSMutableArray *a2)
{
  unint64_t v2 = a2;
  if ([(NSMutableArray *)v2 count])
  {
    uint64_t v3 = [(NSMutableArray *)v2 objectAtIndex:0];
    if ([(NSMutableArray *)v2 count] == (id)1)
    {
      if (qword_1003DB700 != -1) {
        dispatch_once(&qword_1003DB700, &stru_1003B2248);
      }
      uint64_t v4 = (id)qword_1003DB708;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 134217984;
        id v11 = [v3 timestamp];
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%llu", (uint8_t *)&v10, 0xCu);
      }
    }
    else
    {
      uint64_t v4 = [(NSMutableArray *)v2 objectAtIndex:(char *)[(NSMutableArray *)v2 count] - 1];
      if (qword_1003DB700 != -1) {
        dispatch_once(&qword_1003DB700, &stru_1003B2248);
      }
      unint64_t v6 = (id)qword_1003DB708;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        id v7 = [v3 timestamp];
        id v8 = [v4 timestamp];
        id v9 = [v4 timestamp];
        int v10 = 134218496;
        id v11 = v7;
        __int16 v12 = 2048;
        id v13 = v8;
        __int16 v14 = 2048;
        double v15 = (double)(unint64_t)(v9 - (unsigned char *)[v3 timestamp]) * 0.000001;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%llu %llu %f", (uint8_t *)&v10, 0x20u);
      }
    }
  }
  else
  {
    if (qword_1003DB700 != -1) {
      dispatch_once(&qword_1003DB700, &stru_1003B2248);
    }
    id v5 = qword_1003DB708;
    if (os_log_type_enabled((os_log_t)qword_1003DB708, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "insufficient info", (uint8_t *)&v10, 2u);
    }
  }
}

void sub_10028AF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CSKappaEpochBuffer::dumpStats(CSKappaEpochBuffer *this)
{
  if (qword_1003DB700 != -1) {
    dispatch_once(&qword_1003DB700, &stru_1003B2248);
  }
  unint64_t v2 = (id)qword_1003DB708;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = *((void *)this + 1) * v3;
    uint64_t v5 = *(void *)this + v4 - 1;
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v4;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&buf[24] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "epoch buffer stats: current: %llu,  min ts: %llu, max ts: %llu", buf, 0x20u);
  }

  __p = 0;
  unint64_t v217 = 0;
  unint64_t v218 = 0;
  if ([*((id *)this + 3) count])
  {
    unint64_t v6 = [*((id *)this + 3) objectAtIndex:0];
    id v7 = [v6 timestamp];
    int64_t v8 = (v217 - (unsigned char *)__p) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_10000EE98();
    }
    uint64_t v10 = v218 - (void)__p;
    if ((uint64_t)(v218 - (void)__p) >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      __int16 v12 = (char *)sub_10004684C((uint64_t)&v218, v11);
    }
    else {
      __int16 v12 = 0;
    }
    id v13 = &v12[16 * v8];
    __int16 v14 = &v12[16 * v11];
    *(void *)id v13 = v7;
    unsigned char v13[8] = 2;
    double v15 = v13 + 16;
    id v17 = (char *)__p;
    uint64_t v16 = v217;
    if (v217 != __p)
    {
      do
      {
        *((_OWORD *)v13 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v16 - 1);
        v13 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)__p;
    }
    __p = v13;
    unint64_t v217 = v15;
    unint64_t v218 = (unint64_t)v14;
    if (v16) {
      operator delete(v16);
    }
    unint64_t v217 = v15;
  }
  if ([*((id *)this + 4) count])
  {
    int v18 = [*((id *)this + 4) objectAtIndex:0];
    id v19 = [v18 timestamp];
    id v20 = v19;
    id v21 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v23 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v25 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v24) {
        unint64_t v24 = v25 >> 3;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        id v27 = (char *)sub_10004684C((uint64_t)&v218, v26);
      }
      else {
        id v27 = 0;
      }
      double v28 = &v27[16 * v23];
      id v29 = &v27[16 * v26];
      *(void *)double v28 = v20;
      v28[8] = 3;
      double v22 = v28 + 16;
      id v31 = (char *)__p;
      double v30 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v28 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v30 - 1);
          v28 -= 16;
          v30 -= 16;
        }
        while (v30 != v31);
        double v30 = (char *)__p;
      }
      __p = v28;
      unint64_t v217 = v22;
      unint64_t v218 = (unint64_t)v29;
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v19;
      v21[8] = 3;
      double v22 = v21 + 16;
    }
    unint64_t v217 = v22;
  }
  if ([*((id *)this + 5) count])
  {
    double v32 = [*((id *)this + 5) objectAtIndex:0];
    id v33 = [v32 timestamp];
    id v34 = v33;
    __int16 v35 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v37 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v39 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v38) {
        unint64_t v38 = v39 >> 3;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v38;
      }
      if (v40) {
        double v41 = (char *)sub_10004684C((uint64_t)&v218, v40);
      }
      else {
        double v41 = 0;
      }
      __int16 v42 = &v41[16 * v37];
      double v43 = &v41[16 * v40];
      *(void *)__int16 v42 = v34;
      v42[8] = 1;
      int v36 = v42 + 16;
      uint64_t v45 = (char *)__p;
      __int16 v44 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v42 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v44 - 1);
          v42 -= 16;
          v44 -= 16;
        }
        while (v44 != v45);
        __int16 v44 = (char *)__p;
      }
      __p = v42;
      unint64_t v217 = v36;
      unint64_t v218 = (unint64_t)v43;
      if (v44) {
        operator delete(v44);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v33;
      v35[8] = 1;
      int v36 = v35 + 16;
    }
    unint64_t v217 = v36;
  }
  if ([*((id *)this + 6) count])
  {
    __int16 v46 = [*((id *)this + 6) objectAtIndex:0];
    id v47 = [v46 timestamp];
    id v48 = v47;
    double v49 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v51 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v53 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v52) {
        unint64_t v52 = v53 >> 3;
      }
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v54 = v52;
      }
      if (v54) {
        int v55 = (char *)sub_10004684C((uint64_t)&v218, v54);
      }
      else {
        int v55 = 0;
      }
      __int16 v56 = &v55[16 * v51];
      int v57 = &v55[16 * v54];
      *(void *)__int16 v56 = v48;
      v56[8] = 4;
      __int16 v50 = v56 + 16;
      float v59 = (char *)__p;
      float v58 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v56 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v58 - 1);
          v56 -= 16;
          v58 -= 16;
        }
        while (v58 != v59);
        float v58 = (char *)__p;
      }
      __p = v56;
      unint64_t v217 = v50;
      unint64_t v218 = (unint64_t)v57;
      if (v58) {
        operator delete(v58);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v47;
      v49[8] = 4;
      __int16 v50 = v49 + 16;
    }
    unint64_t v217 = v50;
  }
  if ([*((id *)this + 7) count])
  {
    float v60 = [*((id *)this + 7) objectAtIndex:0];
    id v61 = [v60 timestamp];
    id v62 = v61;
    float v63 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v65 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v67 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v66) {
        unint64_t v66 = v67 >> 3;
      }
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v66;
      }
      if (v68) {
        float32x2_t v69 = (char *)sub_10004684C((uint64_t)&v218, v68);
      }
      else {
        float32x2_t v69 = 0;
      }
      float v70 = &v69[16 * v65];
      uint64_t v71 = &v69[16 * v68];
      *(void *)float v70 = v62;
      v70[8] = 5;
      unint64_t v64 = v70 + 16;
      float32x4_t v73 = (char *)__p;
      unint64_t v72 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v70 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v72 - 1);
          v70 -= 16;
          v72 -= 16;
        }
        while (v72 != v73);
        unint64_t v72 = (char *)__p;
      }
      __p = v70;
      unint64_t v217 = v64;
      unint64_t v218 = (unint64_t)v71;
      if (v72) {
        operator delete(v72);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v61;
      v63[8] = 5;
      unint64_t v64 = v63 + 16;
    }
    unint64_t v217 = v64;
  }
  if ([*((id *)this + 8) count])
  {
    uint64_t v74 = [*((id *)this + 8) objectAtIndex:0];
    id v75 = [v74 timestamp];
    id v76 = v75;
    float v77 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v79 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v81 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v80) {
        unint64_t v80 = v81 >> 3;
      }
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v82 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v82 = v80;
      }
      if (v82) {
        unint64_t v83 = (char *)sub_10004684C((uint64_t)&v218, v82);
      }
      else {
        unint64_t v83 = 0;
      }
      float v84 = &v83[16 * v79];
      float v85 = &v83[16 * v82];
      *(void *)float v84 = v76;
      v84[8] = 7;
      unint64_t v78 = v84 + 16;
      float v87 = (char *)__p;
      unint64_t v86 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v84 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v86 - 1);
          v84 -= 16;
          v86 -= 16;
        }
        while (v86 != v87);
        unint64_t v86 = (char *)__p;
      }
      __p = v84;
      unint64_t v217 = v78;
      unint64_t v218 = (unint64_t)v85;
      if (v86) {
        operator delete(v86);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v75;
      v77[8] = 7;
      unint64_t v78 = v77 + 16;
    }
    unint64_t v217 = v78;
  }
  if ([*((id *)this + 9) count])
  {
    float v88 = [*((id *)this + 9) objectAtIndex:0];
    id v89 = [v88 timestamp];
    id v90 = v89;
    float v91 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v93 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v94 = v93 + 1;
      if ((unint64_t)(v93 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v95 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v94) {
        unint64_t v94 = v95 >> 3;
      }
      if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v96 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v96 = v94;
      }
      if (v96) {
        long long v97 = (char *)sub_10004684C((uint64_t)&v218, v96);
      }
      else {
        long long v97 = 0;
      }
      int v98 = &v97[16 * v93];
      long long v99 = &v97[16 * v96];
      *(void *)int v98 = v90;
      v98[8] = 0;
      CFAbsoluteTime v92 = v98 + 16;
      int v101 = (char *)__p;
      long long v100 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v98 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v100 - 1);
          v98 -= 16;
          v100 -= 16;
        }
        while (v100 != v101);
        long long v100 = (char *)__p;
      }
      __p = v98;
      unint64_t v217 = v92;
      unint64_t v218 = (unint64_t)v99;
      if (v100) {
        operator delete(v100);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v89;
      v91[8] = 0;
      CFAbsoluteTime v92 = v91 + 16;
    }
    unint64_t v217 = v92;
  }
  if ([*((id *)this + 10) count])
  {
    long long v102 = [*((id *)this + 10) objectAtIndex:0];
    id v103 = [v102 timestamp];
    id v104 = v103;
    long long v105 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v107 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v108 = v107 + 1;
      if ((unint64_t)(v107 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v109 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v108) {
        unint64_t v108 = v109 >> 3;
      }
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v110 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v110 = v108;
      }
      if (v110) {
        float v111 = (char *)sub_10004684C((uint64_t)&v218, v110);
      }
      else {
        float v111 = 0;
      }
      int v112 = &v111[16 * v107];
      uint64_t v113 = &v111[16 * v110];
      *(void *)int v112 = v104;
      v112[8] = 8;
      long long v106 = v112 + 16;
      int v115 = (char *)__p;
      float v114 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v112 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v114 - 1);
          v112 -= 16;
          v114 -= 16;
        }
        while (v114 != v115);
        float v114 = (char *)__p;
      }
      __p = v112;
      unint64_t v217 = v106;
      unint64_t v218 = (unint64_t)v113;
      if (v114) {
        operator delete(v114);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v103;
      v105[8] = 8;
      long long v106 = v105 + 16;
    }
    unint64_t v217 = v106;
  }
  if ([*((id *)this + 11) count])
  {
    int v116 = [*((id *)this + 11) objectAtIndex:0];
    id v117 = [v116 timestamp];
    id v118 = v117;
    float v119 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v121 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v122 = v121 + 1;
      if ((unint64_t)(v121 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v123 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v122) {
        unint64_t v122 = v123 >> 3;
      }
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v124 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v124 = v122;
      }
      if (v124) {
        uint64_t v125 = (char *)sub_10004684C((uint64_t)&v218, v124);
      }
      else {
        uint64_t v125 = 0;
      }
      long long v126 = &v125[16 * v121];
      long long v127 = &v125[16 * v124];
      *(void *)long long v126 = v118;
      v126[8] = 8;
      int v120 = v126 + 16;
      long long v129 = (char *)__p;
      int v128 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v126 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v128 - 1);
          v126 -= 16;
          v128 -= 16;
        }
        while (v128 != v129);
        int v128 = (char *)__p;
      }
      __p = v126;
      unint64_t v217 = v120;
      unint64_t v218 = (unint64_t)v127;
      if (v128) {
        operator delete(v128);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v117;
      v119[8] = 8;
      int v120 = v119 + 16;
    }
    unint64_t v217 = v120;
  }
  if ([*((id *)this + 12) count])
  {
    long long v130 = [*((id *)this + 12) objectAtIndex:0];
    id v131 = [v130 timestamp];
    id v132 = v131;
    long long v133 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v135 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v136 = v135 + 1;
      if ((unint64_t)(v135 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v137 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v136) {
        unint64_t v136 = v137 >> 3;
      }
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v138 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v138 = v136;
      }
      if (v138) {
        long long v139 = (char *)sub_10004684C((uint64_t)&v218, v138);
      }
      else {
        long long v139 = 0;
      }
      long long v140 = &v139[16 * v135];
      int v141 = &v139[16 * v138];
      *(void *)long long v140 = v132;
      v140[8] = 6;
      int v134 = v140 + 16;
      uint64_t v143 = (char *)__p;
      long long v142 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v140 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v142 - 1);
          v140 -= 16;
          v142 -= 16;
        }
        while (v142 != v143);
        long long v142 = (char *)__p;
      }
      __p = v140;
      unint64_t v217 = v134;
      unint64_t v218 = (unint64_t)v141;
      if (v142) {
        operator delete(v142);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v131;
      v133[8] = 6;
      int v134 = v133 + 16;
    }
    unint64_t v217 = v134;
  }
  if ([*((id *)this + 13) count])
  {
    float v144 = [*((id *)this + 13) objectAtIndex:0];
    id v145 = [v144 timestamp];
    id v146 = v145;
    float v147 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v149 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v150 = v149 + 1;
      if ((unint64_t)(v149 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v151 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v150) {
        unint64_t v150 = v151 >> 3;
      }
      if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v152 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v152 = v150;
      }
      if (v152) {
        float v153 = (char *)sub_10004684C((uint64_t)&v218, v152);
      }
      else {
        float v153 = 0;
      }
      float v154 = &v153[16 * v149];
      float v155 = &v153[16 * v152];
      *(void *)float v154 = v146;
      v154[8] = 10;
      uint64_t v148 = v154 + 16;
      int v157 = (char *)__p;
      uint64_t v156 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v154 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v156 - 1);
          v154 -= 16;
          v156 -= 16;
        }
        while (v156 != v157);
        uint64_t v156 = (char *)__p;
      }
      __p = v154;
      unint64_t v217 = v148;
      unint64_t v218 = (unint64_t)v155;
      if (v156) {
        operator delete(v156);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v145;
      v147[8] = 10;
      uint64_t v148 = v147 + 16;
    }
    unint64_t v217 = v148;
  }
  if ([*((id *)this + 14) count])
  {
    float v158 = [*((id *)this + 14) objectAtIndex:0];
    id v159 = [v158 timestamp];
    id v160 = v159;
    float v161 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v163 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v164 = v163 + 1;
      if ((unint64_t)(v163 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v165 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v164) {
        unint64_t v164 = v165 >> 3;
      }
      if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v166 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v166 = v164;
      }
      if (v166) {
        v167 = (char *)sub_10004684C((uint64_t)&v218, v166);
      }
      else {
        v167 = 0;
      }
      float v168 = &v167[16 * v163];
      float v169 = &v167[16 * v166];
      *(void *)float v168 = v160;
      v168[8] = 11;
      float v162 = v168 + 16;
      int v171 = (char *)__p;
      float v170 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v168 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v170 - 1);
          v168 -= 16;
          v170 -= 16;
        }
        while (v170 != v171);
        float v170 = (char *)__p;
      }
      __p = v168;
      unint64_t v217 = v162;
      unint64_t v218 = (unint64_t)v169;
      if (v170) {
        operator delete(v170);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v159;
      v161[8] = 11;
      float v162 = v161 + 16;
    }
    unint64_t v217 = v162;
  }
  if ([*((id *)this + 15) count])
  {
    unint64_t v172 = [*((id *)this + 15) objectAtIndex:0];
    id v173 = [v172 timestamp];
    id v174 = v173;
    int v175 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v177 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v178 = v177 + 1;
      if ((unint64_t)(v177 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v179 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v178) {
        unint64_t v178 = v179 >> 3;
      }
      if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v180 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v180 = v178;
      }
      if (v180) {
        v181 = (char *)sub_10004684C((uint64_t)&v218, v180);
      }
      else {
        v181 = 0;
      }
      v182 = &v181[16 * v177];
      int v183 = &v181[16 * v180];
      *(void *)v182 = v174;
      v182[8] = 12;
      int v176 = v182 + 16;
      uint64_t v185 = (char *)__p;
      id v184 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v182 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v184 - 1);
          v182 -= 16;
          v184 -= 16;
        }
        while (v184 != v185);
        id v184 = (char *)__p;
      }
      __p = v182;
      unint64_t v217 = v176;
      unint64_t v218 = (unint64_t)v183;
      if (v184) {
        operator delete(v184);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v173;
      v175[8] = 12;
      int v176 = v175 + 16;
    }
    unint64_t v217 = v176;
  }
  if ([*((id *)this + 16) count])
  {
    unint64_t v186 = [*((id *)this + 16) objectAtIndex:0];
    id v187 = [v186 timestamp];
    id v188 = v187;
    uint64_t v189 = v217;
    if ((unint64_t)v217 >= v218)
    {
      int64_t v191 = (v217 - (unsigned char *)__p) >> 4;
      unint64_t v192 = v191 + 1;
      if ((unint64_t)(v191 + 1) >> 60) {
        sub_10000EE98();
      }
      uint64_t v193 = v218 - (void)__p;
      if ((uint64_t)(v218 - (void)__p) >> 3 > v192) {
        unint64_t v192 = v193 >> 3;
      }
      if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v194 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v194 = v192;
      }
      if (v194) {
        v195 = (char *)sub_10004684C((uint64_t)&v218, v194);
      }
      else {
        v195 = 0;
      }
      v196 = &v195[16 * v191];
      uint64_t v197 = &v195[16 * v194];
      *(void *)v196 = v188;
      v196[8] = 13;
      unint64_t v190 = v196 + 16;
      uint64_t v199 = (char *)__p;
      unint64_t v198 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v196 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((_OWORD *)v198 - 1);
          v196 -= 16;
          v198 -= 16;
        }
        while (v198 != v199);
        unint64_t v198 = (char *)__p;
      }
      __p = v196;
      unint64_t v217 = v190;
      unint64_t v218 = (unint64_t)v197;
      if (v198) {
        operator delete(v198);
      }
    }
    else
    {
      *(void *)unint64_t v217 = v187;
      v189[8] = 13;
      unint64_t v190 = v189 + 16;
    }
    unint64_t v217 = v190;
  }
  *(_DWORD *)long long buf = 2;
  sub_100007BC0(&buf[8], "accel800");
  *(_DWORD *)&unsigned char buf[32] = 3;
  sub_100007BC0(v221, "hgacc");
  int v222 = 1;
  sub_100007BC0(v223, "accel");
  int v224 = 0;
  sub_100007BC0(v225, "dm");
  int v226 = 4;
  sub_100007BC0(v227, "gps");
  int v228 = 5;
  sub_100007BC0(v229, "steps");
  int v230 = 6;
  sub_100007BC0(v231, "trigger");
  int v232 = 7;
  sub_100007BC0(v233, "pressure");
  int v234 = 8;
  sub_100007BC0(v235, "audio");
  int v236 = 9;
  sub_100007BC0(v237, "trustedaudioresult");
  int v238 = 10;
  sub_100007BC0(v239, "roads");
  int v240 = 11;
  sub_100007BC0(v241, "hertz");
  int v242 = 12;
  sub_100007BC0(v243, "companionstatus");
  int v244 = 13;
  sub_100007BC0(v245, "remotesample");
  sub_10028DA78((uint64_t)v215, (int *)buf, 14);
  uint64_t v200 = 448;
  do
  {
    if ((char)buf[v200 - 1] < 0) {
      operator delete(*(void **)((char *)&v218 + v200));
    }
    v200 -= 32;
  }
  while (v200);
  unint64_t v201 = 126 - 2 * __clz((v217 - (unsigned char *)__p) >> 4);
  *(void *)long long buf = sub_10028C4AC;
  if (v217 == __p) {
    uint64_t v202 = 0;
  }
  else {
    uint64_t v202 = v201;
  }
  sub_10028CA20((char *)__p, v217, (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))buf, v202, 1);
  uint64_t v203 = *(void *)__p;
  if (qword_1003DB700 != -1) {
    dispatch_once(&qword_1003DB700, &stru_1003B2248);
  }
  unint64_t v204 = (id)qword_1003DB708;
  if (os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG))
  {
    int v214 = *((unsigned __int8 *)__p + 8);
    unint64_t v219 = &v214;
    unint64_t v205 = sub_10028DE94(v215, &v214, (uint64_t)&std::piecewise_construct, &v219);
    unint64_t v206 = v205 + 5;
    if (*((char *)v205 + 63) < 0) {
      unint64_t v206 = (void *)*v206;
    }
    uint64_t v207 = *(void *)__p;
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v206;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v207;
    _os_log_impl((void *)&_mh_execute_header, v204, OS_LOG_TYPE_DEBUG, "0 %s %llu\n", buf, 0x16u);
  }

  if ((unint64_t)(v217 - (unsigned char *)__p) >= 0x11)
  {
    uint64_t v208 = 0;
    unint64_t v209 = 1;
    do
    {
      if (qword_1003DB700 != -1) {
        dispatch_once(&qword_1003DB700, &stru_1003B2248);
      }
      unint64_t v210 = (id)qword_1003DB708;
      if (os_log_type_enabled(v210, OS_LOG_TYPE_DEBUG))
      {
        int v214 = *((unsigned __int8 *)__p + v208 + 24);
        unint64_t v219 = &v214;
        char v211 = sub_10028DE94(v215, &v214, (uint64_t)&std::piecewise_construct, &v219);
        unint64_t v212 = v211 + 5;
        if (*((char *)v211 + 63) < 0) {
          unint64_t v212 = (void *)*v212;
        }
        uint64_t v213 = *(void *)((char *)__p + v208 + 16);
        *(_DWORD *)long long buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v209;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = v212;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v213;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = (float)((float)(unint64_t)(v213 - v203) / 1000000.0);
        _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEBUG, "%d %s %llu %f\n", buf, 0x26u);
      }

      ++v209;
      v208 += 16;
    }
    while (v209 < (v217 - (unsigned char *)__p) >> 4);
  }
  sub_10028DE30((uint64_t)v215, (char *)v215[1]);
  if (__p)
  {
    unint64_t v217 = (char *)__p;
    operator delete(__p);
  }
}

void sub_10028C2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_10028DE30((uint64_t)&a13, a14);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10028C4AC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return a1 < a3;
}

double CSKappaEpochBufferIterator::CSKappaEpochBufferIterator(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

{
  uint64_t v2;
  double result;

  uint64_t v2 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

id CSKappaEpochBufferIterator::getNextSample(CSKappaEpochBufferIterator *this)
{
  uint64_t v2 = 0;
  int v3 = 0;
  uint64_t v4 = 0;
  unint64_t v40 = (int *)((char *)this + 64);
  double v41 = (int *)((char *)this + 68);
  unint64_t v38 = (int *)((char *)this + 56);
  uint64_t v39 = (int *)((char *)this + 60);
  int v36 = (int *)((char *)this + 44);
  int64_t v37 = (int *)((char *)this + 48);
  id v34 = (int *)((char *)this + 52);
  __int16 v35 = (int *)((char *)this + 36);
  double v32 = (int *)((char *)this + 28);
  id v33 = (int *)((char *)this + 32);
  id v31 = (int *)((char *)this + 40);
  uint64_t v5 = (int *)((char *)this + 20);
  unint64_t v6 = (int *)((char *)this + 24);
  id v7 = (int *)((char *)this + 16);
  unint64_t v8 = -1;
  int v9 = -1;
  do
  {
    switch(v3)
    {
      case 0:
        unint64_t v10 = *((int *)this + 10);
        if ((unint64_t)[*(id *)(*(void *)this + 72) count] > v10)
        {
          unint64_t v11 = (id *)(*(void *)this + 72);
          __int16 v12 = v31;
          goto LABEL_31;
        }
        break;
      case 1:
        unint64_t v13 = *((int *)this + 6);
        if ((unint64_t)[*(id *)(*(void *)this + 40) count] > v13)
        {
          unint64_t v11 = (id *)(*(void *)this + 40);
          __int16 v12 = v6;
          goto LABEL_31;
        }
        break;
      case 2:
        unint64_t v14 = *((int *)this + 4);
        if ((unint64_t)[*(id *)(*(void *)this + 24) count] > v14)
        {
          unint64_t v11 = (id *)(*(void *)this + 24);
          __int16 v12 = v7;
          goto LABEL_31;
        }
        break;
      case 3:
        unint64_t v15 = *((int *)this + 5);
        if ((unint64_t)[*(id *)(*(void *)this + 32) count] > v15)
        {
          unint64_t v11 = (id *)(*(void *)this + 32);
          __int16 v12 = v5;
          goto LABEL_31;
        }
        break;
      case 4:
        unint64_t v16 = *((int *)this + 7);
        if ((unint64_t)[*(id *)(*(void *)this + 48) count] > v16)
        {
          unint64_t v11 = (id *)(*(void *)this + 48);
          __int16 v12 = v32;
          goto LABEL_31;
        }
        break;
      case 5:
        unint64_t v17 = *((int *)this + 8);
        if ((unint64_t)[*(id *)(*(void *)this + 56) count] > v17)
        {
          unint64_t v11 = (id *)(*(void *)this + 56);
          __int16 v12 = v33;
          goto LABEL_31;
        }
        break;
      case 6:
        unint64_t v18 = *((int *)this + 13);
        if ((unint64_t)[*(id *)(*(void *)this + 96) count] > v18)
        {
          unint64_t v11 = (id *)(*(void *)this + 96);
          __int16 v12 = v34;
          goto LABEL_31;
        }
        break;
      case 7:
        unint64_t v19 = *((int *)this + 9);
        if ((unint64_t)[*(id *)(*(void *)this + 64) count] > v19)
        {
          unint64_t v11 = (id *)(*(void *)this + 64);
          __int16 v12 = v35;
          goto LABEL_31;
        }
        break;
      case 8:
        unint64_t v20 = *((int *)this + 11);
        if ((unint64_t)[*(id *)(*(void *)this + 80) count] > v20)
        {
          unint64_t v11 = (id *)(*(void *)this + 80);
          __int16 v12 = v36;
          goto LABEL_31;
        }
        break;
      case 9:
        unint64_t v21 = *((int *)this + 12);
        if ((unint64_t)[*(id *)(*(void *)this + 88) count] > v21)
        {
          unint64_t v11 = (id *)(*(void *)this + 88);
          __int16 v12 = v37;
          goto LABEL_31;
        }
        break;
      case 10:
        unint64_t v22 = *((int *)this + 14);
        if ((unint64_t)[*(id *)(*(void *)this + 104) count] > v22)
        {
          unint64_t v11 = (id *)(*(void *)this + 104);
          __int16 v12 = v38;
          goto LABEL_31;
        }
        break;
      case 11:
        unint64_t v23 = *((int *)this + 15);
        if ((unint64_t)[*(id *)(*(void *)this + 112) count] > v23)
        {
          unint64_t v11 = (id *)(*(void *)this + 112);
          __int16 v12 = v39;
          goto LABEL_31;
        }
        break;
      case 12:
        unint64_t v24 = *((int *)this + 16);
        if ((unint64_t)[*(id *)(*(void *)this + 120) count] > v24)
        {
          unint64_t v11 = (id *)(*(void *)this + 120);
          __int16 v12 = v40;
          goto LABEL_31;
        }
        break;
      case 13:
        unint64_t v25 = *((int *)this + 17);
        if ((unint64_t)[*(id *)(*(void *)this + 128) count] > v25)
        {
          unint64_t v11 = (id *)(*(void *)this + 128);
          __int16 v12 = v41;
LABEL_31:
          uint64_t v26 = [*v11 objectAtIndexedSubscript:*v12];

          uint64_t v2 = (void *)v26;
        }
        break;
      default:
        break;
    }
    if (v2 && (unint64_t)[v2 timestamp] < v8)
    {
      unint64_t v8 = (unint64_t)[v2 timestamp];
      id v27 = v2;

      uint64_t v4 = v27;
      int v9 = v3;
    }
    ++v3;
  }
  while (v3 != 14);
  id v28 = 0;
  switch(v9)
  {
    case -1:
      goto LABEL_53;
    case 0:
      id v29 = v31;
      goto LABEL_51;
    case 1:
      ++*v6;
      break;
    case 2:
      ++*v7;
      break;
    case 3:
      ++*v5;
      break;
    case 4:
      id v29 = v32;
      goto LABEL_51;
    case 5:
      id v29 = v33;
      goto LABEL_51;
    case 6:
      id v29 = v34;
      goto LABEL_51;
    case 7:
      id v29 = v35;
      goto LABEL_51;
    case 8:
      id v29 = v36;
      goto LABEL_51;
    case 9:
      id v29 = v37;
      goto LABEL_51;
    case 10:
      id v29 = v38;
      goto LABEL_51;
    case 11:
      id v29 = v39;
      goto LABEL_51;
    case 12:
      id v29 = v40;
      goto LABEL_51;
    case 13:
      id v29 = v41;
LABEL_51:
      ++*v29;
      break;
    default:
      break;
  }
  id v28 = v4;
LABEL_53:

  return v28;
}

void sub_10028C954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028C9DC(id a1)
{
  qword_1003DB708 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Epoch");

  _objc_release_x1();
}

void sub_10028CA20(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v21 = *((void *)a2 - 2);
          uint64_t v22 = *((void *)a2 - 1);
          unint64_t v23 = a2 - 16;
          if ((*a3)(v21, v22, *(void *)v11, *((void *)v11 + 1)))
          {
            long long v25 = *(_OWORD *)v11;
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v23;
            *(_OWORD *)unint64_t v23 = v25;
          }
          break;
        case 3uLL:
          sub_10028CF80(v11, (void *)v11 + 2, (void *)a2 - 2, a3);
          break;
        case 4uLL:
          sub_10028D4C8(v11, (void *)v11 + 2, (void *)v11 + 4, (void *)a2 - 2, a3);
          break;
        case 5uLL:
          sub_10028D584(v11, (void *)v11 + 2, (void *)v11 + 4, (void *)v11 + 6, (void *)a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        sub_10028D668(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[16 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      sub_10028CF80(v11, &v11[16 * (v15 >> 1)], (void *)a2 - 2, a3);
      sub_10028CF80((void *)v11 + 2, (void *)v17 - 2, (void *)a2 - 4, a3);
      sub_10028CF80((void *)v11 + 4, &v11[16 * v16 + 16], (void *)a2 - 6, a3);
      sub_10028CF80((void *)v17 - 2, v17, &v11[16 * v16 + 16], a3);
      long long v24 = *(_OWORD *)v11;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v24;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_10028CF80(&v11[16 * (v15 >> 1)], v11, (void *)a2 - 2, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(*((void *)v11 - 2), *((void *)v11 - 1), *(void *)v11, *((void *)v11 + 1)) & 1) == 0)
    {
      unint64_t v11 = (char *)sub_10028D080(v11, a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v18 = (char *)sub_10028D1B8((uint64_t *)v11, (uint64_t *)a2, a3);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v20 = sub_10028D2EC(v11, v18, a3);
    unint64_t v11 = v18 + 16;
    if (sub_10028D2EC(v18 + 16, a2, a3))
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      sub_10028CA20(a1, v18, a3, -v13, a5 & 1);
      unint64_t v11 = v18 + 16;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_10028CDF8((uint64_t)v11, a2, a3);
  }
  else
  {
    sub_10028CED0((uint64_t)v11, a2, a3);
  }
}

uint64_t sub_10028CDF8(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t, void, void))
{
  if ((void *)result != a2)
  {
    uint64_t v4 = (void *)result;
    char v5 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = (void *)result;
      do
      {
        int v9 = v5;
        double result = (*a3)(v8[2], v8[3], *v8, v8[1]);
        if (result)
        {
          uint64_t v10 = *v9;
          uint64_t v11 = v8[3];
          uint64_t v12 = v7;
          while (1)
          {
            *(_OWORD *)((char *)v4 + v12 + 16) = *(_OWORD *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            double result = (*a3)(v10, v11, *(void *)((char *)v4 + v12 - 16), *(void *)((char *)v4 + v12 - 8));
            v12 -= 16;
            if ((result & 1) == 0)
            {
              uint64_t v13 = (void *)((char *)v4 + v12 + 16);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v10;
          v13[1] = v11;
        }
        char v5 = v9 + 2;
        v7 += 16;
        unint64_t v8 = v9;
      }
      while (v9 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_10028CED0(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t, void, void))
{
  if ((void *)result != a2)
  {
    uint64_t v4 = (void *)result;
    char v5 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      do
      {
        uint64_t v7 = v5;
        double result = (*a3)(v4[2], v4[3], *v4, v4[1]);
        if (result)
        {
          uint64_t v8 = *v7;
          uint64_t v9 = v4[3];
          uint64_t v10 = v7;
          do
          {
            uint64_t v11 = v10 - 1;
            *uint64_t v10 = *(v10 - 1);
            double result = (*a3)(v8, v9, *((void *)v10 - 4), *((void *)v10 - 3));
            uint64_t v10 = v11;
          }
          while ((result & 1) != 0);
          *uint64_t v11 = v8;
          v11[1] = v9;
        }
        char v5 = v7 + 2;
        uint64_t v4 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_10028CF80(void *a1, void *a2, void *a3, uint64_t (**a4)(void, void, void, void))
{
  char v8 = (*a4)(*a2, a2[1], *a1, a1[1]);
  uint64_t result = (*a4)(*a3, a3[1], *a2, a2[1]);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    long long v11 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v11;
    if (!(*a4)(*a2, a2[1], *a1, a1[1])) {
      return 1;
    }
    long long v12 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v12;
    return 2;
  }
  if (!result)
  {
    long long v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    if (!(*a4)(*a3, a3[1], *a2, a2[1])) {
      return 1;
    }
    long long v14 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v14;
    return 2;
  }
  long long v10 = *(_OWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v10;
  return 1;
}

void *sub_10028D080(void *a1, _OWORD *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((*a3)(*a1, v7, *((void *)a2 - 2), *((void *)a2 - 1)))
  {
    char v8 = a1;
    do
    {
      uint64_t v9 = v8[2];
      uint64_t v10 = v8[3];
      v8 += 2;
    }
    while (((*a3)(v6, v7, v9, v10) & 1) == 0);
  }
  else
  {
    long long v11 = a1 + 2;
    do
    {
      char v8 = v11;
      if (v11 >= (void *)v4) {
        break;
      }
      int v12 = (*a3)(v6, v7, *v11, v11[1]);
      long long v11 = v8 + 2;
    }
    while (!v12);
  }
  if (v8 < (void *)v4)
  {
    do
    {
      uint64_t v13 = *((void *)v4 - 2);
      uint64_t v14 = *((void *)v4-- - 1);
    }
    while (((*a3)(v6, v7, v13, v14) & 1) != 0);
  }
  while (v8 < (void *)v4)
  {
    long long v20 = *(_OWORD *)v8;
    *(_OWORD *)char v8 = *v4;
    *uint64_t v4 = v20;
    do
    {
      uint64_t v15 = v8[2];
      uint64_t v16 = v8[3];
      v8 += 2;
    }
    while (!(*a3)(v6, v7, v15, v16));
    do
    {
      uint64_t v17 = *((void *)v4 - 2);
      uint64_t v18 = *((void *)v4-- - 1);
    }
    while (((*a3)(v6, v7, v17, v18) & 1) != 0);
  }
  if (v8 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
  }
  *(v8 - 2) = v6;
  *(v8 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v7;
  return v8;
}

uint64_t *sub_10028D1B8(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  do
  {
    char v9 = (*a3)(a1[v6 + 2], a1[v6 + 3], v7, v8);
    v6 += 2;
  }
  while ((v9 & 1) != 0);
  uint64_t v10 = &a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v10 >= a2) {
        break;
      }
      uint64_t v13 = *(a2 - 2);
      uint64_t v14 = *(a2 - 1);
      a2 -= 2;
    }
    while (((*a3)(v13, v14, v7, v8) & 1) == 0);
  }
  else
  {
    do
    {
      uint64_t v11 = *(a2 - 2);
      uint64_t v12 = *(a2 - 1);
      a2 -= 2;
    }
    while (!(*a3)(v11, v12, v7, v8));
  }
  uint64_t v15 = &a1[v6];
  if (v10 < a2)
  {
    uint64_t v16 = a2;
    do
    {
      long long v17 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v17;
      do
      {
        uint64_t v18 = v15[2];
        uint64_t v19 = v15[3];
        v15 += 2;
      }
      while (((*a3)(v18, v19, v7, v8) & 1) != 0);
      do
      {
        uint64_t v20 = *(v16 - 2);
        uint64_t v21 = *(v16 - 1);
        v16 -= 2;
      }
      while (!(*a3)(v20, v21, v7, v8));
    }
    while (v15 < v16);
  }
  uint64_t result = v15 - 2;
  if (v15 - 2 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)result;
  }
  *(v15 - 2) = v7;
  *(v15 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v8;
  return result;
}

BOOL sub_10028D2EC(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t, void, void))
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = a2 - 16;
      if ((*a3)(*((void *)a2 - 2), *((void *)a2 - 1), *(void *)a1, *((void *)a1 + 1)))
      {
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)uint64_t v8 = v9;
      }
      return 1;
    case 3:
      sub_10028CF80(a1, (void *)a1 + 2, (void *)a2 - 2, a3);
      return 1;
    case 4:
      sub_10028D4C8(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a2 - 2, a3);
      return 1;
    case 5:
      sub_10028D584(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a1 + 6, (void *)a2 - 2, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      sub_10028CF80(a1, (void *)a1 + 2, (void *)a1 + 4, a3);
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(void *)v11, *((void *)v11 + 1), *(void *)v10, *((void *)v10 + 1)))
    {
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = *((void *)v11 + 1);
      uint64_t v16 = v12;
      while (1)
      {
        long long v17 = &a1[v16];
        *(_OWORD *)&a1[v16 + 48] = *(_OWORD *)&a1[v16 + 32];
        if (v16 == -32) {
          break;
        }
        v16 -= 16;
        if (((*a3)(v14, v15, *((void *)v17 + 2), *((void *)v17 + 3)) & 1) == 0)
        {
          uint64_t v18 = &a1[v16 + 48];
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *((void *)v18 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v15;
      if (++v13 == 8) {
        return v11 + 16 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_10028D4C8(void *a1, void *a2, void *a3, void *a4, uint64_t (**a5)(void, void, void, void))
{
  sub_10028CF80(a1, a2, a3, a5);
  if ((*a5)(*a4, a4[1], *a3, a3[1]))
  {
    long long v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v11;
    if ((*a5)(*a3, a3[1], *a2, a2[1]))
    {
      long long v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v12;
      if ((*a5)(*a2, a2[1], *a1, a1[1]))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_10028D584(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t (**a6)(void, void, void, void))
{
  __n128 v12 = sub_10028D4C8(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(void, void, void, void, __n128))*a6)(*a5, a5[1], *a4, a4[1], v12))
  {
    long long v14 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v14;
    if ((*a6)(*a4, a4[1], *a3, a3[1]))
    {
      long long v15 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v15;
      if ((*a6)(*a3, a3[1], *a2, a2[1]))
      {
        long long v16 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v16;
        if ((*a6)(*a2, a2[1], *a1, a1[1]))
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

char *sub_10028D668(char *a1, char *a2, char *a3, uint64_t (**a4)(void, void, uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      __n128 v12 = &a1[16 * v10];
      do
      {
        sub_10028D7D4((uint64_t)a1, (unsigned int (**)(void, void, void, void))a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if ((*a4)(*(void *)v14, *((void *)v14 + 1), *(void *)a1, *((void *)a1 + 1)))
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)long long v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          sub_10028D7D4((uint64_t)a1, (unsigned int (**)(void, void, void, void))a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      long long v17 = a2 - 16;
      do
      {
        long long v21 = *(_OWORD *)a1;
        uint64_t v18 = (char *)sub_10028D918(a1, (unsigned int (**)(void, void, void, void))a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)uint64_t v18 = v21;
        }
        else
        {
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v17;
          *(_OWORD *)long long v17 = v21;
          sub_10028D9CC((uint64_t)a1, (uint64_t)(v18 + 16), a4, (v18 + 16 - a1) >> 4);
        }
        v17 -= 16;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_10028D7D4(uint64_t result, unsigned int (**a2)(void, void, void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v17 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v9 = ((uint64_t)a4 - result) >> 3;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (void *)(result + 16 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3 && (*a2)(*v11, v11[1], v11[2], v11[3]))
      {
        v11 += 2;
        uint64_t v10 = v12;
      }
      __n128 result = ((uint64_t (*)(void, void, void, void))*a2)(*v11, v11[1], *v5, v5[1]);
      if ((result & 1) == 0)
      {
        uint64_t v13 = *v5;
        uint64_t v14 = v5[1];
        do
        {
          long long v15 = v11;
          *(_OWORD *)char v5 = *(_OWORD *)v11;
          if (v17 < v10) {
            break;
          }
          uint64_t v16 = (2 * v10) | 1;
          unint64_t v11 = (void *)(v6 + 16 * v16);
          if (2 * v10 + 2 < a3)
          {
            if ((*a2)(*v11, v11[1], v11[2], v11[3]))
            {
              v11 += 2;
              uint64_t v16 = 2 * v10 + 2;
            }
          }
          __n128 result = ((uint64_t (*)(void, void, uint64_t, uint64_t))*a2)(*v11, v11[1], v13, v14);
          char v5 = v15;
          uint64_t v10 = v16;
        }
        while (!result);
        *long long v15 = v13;
        v15[1] = v14;
      }
    }
  }
  return result;
}

_OWORD *sub_10028D918(_OWORD *a1, unsigned int (**a2)(void, void, void, void), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*a2)(*(void *)&a1[v6 + 1], *((void *)&a1[v6 + 1] + 1), *(void *)&a1[v6 + 2], *((void *)&a1[v6 + 2] + 1)))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t sub_10028D9CC(uint64_t result, uint64_t a2, uint64_t (**a3)(void, void, uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (void *)(result + 16 * (v4 >> 1));
    uint64_t v10 = (_OWORD *)(a2 - 16);
    __n128 result = (*a3)(*v9, v9[1], *(void *)(a2 - 16), *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v11 = *(void *)(a2 - 16);
      uint64_t v12 = *(void *)(a2 - 8);
      do
      {
        uint64_t v13 = v9;
        *uint64_t v10 = *(_OWORD *)v9;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (void *)(v7 + 16 * v8);
        __n128 result = (*a3)(*v9, v9[1], v11, v12);
        uint64_t v10 = v13;
      }
      while ((result & 1) != 0);
      *uint64_t v13 = v11;
      v13[1] = v12;
    }
  }
  return result;
}

uint64_t sub_10028DA78(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_10028DAF8((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_10028DAE0(_Unwind_Exception *a1)
{
  sub_10028DE30(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10028DAF8(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_10028DB7C(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    sub_10028DD24((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10005ACDC(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_10028DB7C(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  char v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          char v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        char v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          char v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        char v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_10028DD24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  unsigned char v6[8] = *(_DWORD *)a2;
  __n128 result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    __n128 result = sub_100012DE4(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__n128 result = *(_OWORD *)(a2 + 8);
    result[2] = *(void *)(a2 + 24);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10028DDB4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10028DDD0(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10028DDD0(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0) {
      operator delete(__p[5]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_10028DE30(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10028DE30(a1, *(void *)a2);
    sub_10028DE30(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

uint64_t **sub_10028DE94(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    sub_10005ACDC(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_10028E084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028E1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int64_t sub_10028E1F0(id a1, CSTimestampedSample *a2, CSTimestampedSample *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = a3;
  id v6 = [(CSTimestampedSample *)v4 timestamp];
  if (v6 <= [(CSTimestampedSample *)v5 timestamp])
  {
    id v8 = [(CSTimestampedSample *)v4 timestamp];
    if (v8 >= [(CSTimestampedSample *)v5 timestamp]) {
      int64_t v7 = 0;
    }
    else {
      int64_t v7 = -1;
    }
  }
  else
  {
    int64_t v7 = 1;
  }

  return v7;
}

void sub_10028E274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028E304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028E39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10028E440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10028EA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_10028EBDC(id a1)
{
  qword_1003DB6B8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "AOP");

  _objc_release_x1();
}

uint64_t CLKappaFeaturesAlgRemoteAudioResult::reset(CLKappaFeaturesAlgRemoteAudioResult *this)
{
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *(void *)((char *)this + 54) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((_WORD *)this + 40) = 0;
  *((void *)this + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  return _objc_release_x1();
}

void CLKappaFeaturesAlgRemoteAudioResult::log(CLKappaFeaturesAlgRemoteAudioResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
  }
  uint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 61);
    int v4 = *((unsigned __int8 *)this + 81);
    double v5 = *((float *)this + 10);
    int v6 = *((_DWORD *)this + 4);
    double v7 = *((float *)this + 5);
    double v8 = *((float *)this + 6);
    uint64_t v9 = *((void *)this + 4);
    *(_DWORD *)long long buf = 67241728;
    *(_DWORD *)unint64_t v23 = v3;
    *(_WORD *)&v23[4] = 1026;
    *(_DWORD *)&v23[6] = v4;
    *(_WORD *)long long v24 = 2050;
    *(double *)&v24[2] = v5;
    LOWORD(v25) = 1026;
    *(_DWORD *)((char *)&v25 + 2) = v6;
    HIWORD(v25) = 2050;
    *(double *)uint64_t v26 = v7;
    *(_WORD *)&v26[8] = 2050;
    *(double *)id v27 = v8;
    *(_WORD *)&v27[8] = 2050;
    uint64_t v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[RA] AlgBlock summary,A,%{public}d,B,%{public}d,C,%{public}f,config-1,%{public}d,config-2,%{public}f,config-3,%{public}f,debug-1,%{public}llu", buf, 0x3Cu);
  }
  if ([*((id *)this + 11) count])
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    __int16 v21 = 0;
    uint64_t v17 = 0;
    memset(v18, 0, 14);
    int v10 = [*((id *)this + 11) objectAtIndexedSubscript:0];
    [v10 getBytes:&v16 length:96];

    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
    }
    uint64_t v11 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134222848;
      *(void *)unint64_t v23 = v16;
      *(_WORD *)&v23[8] = 2048;
      *(double *)long long v24 = *(float *)&v17;
      *(_WORD *)&__int16 v24[8] = 2048;
      double v25 = *((float *)&v17 + 1);
      *(_WORD *)uint64_t v26 = 2048;
      *(double *)&v26[2] = *(float *)v18;
      *(_WORD *)id v27 = 2048;
      *(double *)&v27[2] = *((float *)v18 + 1);
      LOWORD(v28) = 1024;
      *(_DWORD *)((char *)&v28 + 2) = LOBYTE(v18[1]);
      HIWORD(v28) = 1024;
      int v29 = BYTE1(v18[1]);
      __int16 v30 = 1024;
      int v31 = BYTE2(v18[1]);
      __int16 v32 = 1024;
      int v33 = BYTE3(v18[1]);
      __int16 v34 = 1024;
      int v35 = BYTE4(v18[1]);
      __int16 v36 = 1024;
      int v37 = BYTE4(v18[1]);
      __int16 v38 = 2048;
      double v39 = *(float *)&v19;
      __int16 v40 = 2048;
      double v41 = *((float *)&v19 + 1);
      __int16 v42 = 2048;
      double v43 = *(float *)&v20;
      __int16 v44 = 1024;
      int v45 = BYTE4(v20);
      __int16 v46 = 1024;
      int v47 = BYTE5(v20);
      __int16 v48 = 1024;
      int v49 = BYTE6(v20);
      __int16 v50 = 1024;
      int v51 = HIBYTE(v20);
      __int16 v52 = 1024;
      int v53 = v21;
      __int16 v54 = 1024;
      int v55 = v21;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[RemoteAudioBuffer0] AlgBlock summary,A,%llu,B,%f,C,%f,D,%f,E,%f,F,%d,G,%d,H,%d,I,%d,J,%d,K,%d,L,%f,M,%f,N,%f,O,%d,P,%d,Q,%d,R,%d,S,%d,T,%d", buf, 0x9Au);
    }
  }
  if ((unint64_t)[*((id *)this + 11) count] >= 2)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    __int16 v21 = 0;
    uint64_t v17 = 0;
    memset(v18, 0, 14);
    uint64_t v12 = [*((id *)this + 11) objectAtIndexedSubscript:1];
    [v12 getBytes:&v16 length:96];

    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
    }
    uint64_t v13 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134222848;
      *(void *)unint64_t v23 = v16;
      *(_WORD *)&v23[8] = 2048;
      *(double *)long long v24 = *(float *)&v17;
      *(_WORD *)&__int16 v24[8] = 2048;
      double v25 = *((float *)&v17 + 1);
      *(_WORD *)uint64_t v26 = 2048;
      *(double *)&v26[2] = *(float *)v18;
      *(_WORD *)id v27 = 2048;
      *(double *)&v27[2] = *((float *)v18 + 1);
      LOWORD(v28) = 1024;
      *(_DWORD *)((char *)&v28 + 2) = LOBYTE(v18[1]);
      HIWORD(v28) = 1024;
      int v29 = BYTE1(v18[1]);
      __int16 v30 = 1024;
      int v31 = BYTE2(v18[1]);
      __int16 v32 = 1024;
      int v33 = BYTE3(v18[1]);
      __int16 v34 = 1024;
      int v35 = BYTE4(v18[1]);
      __int16 v36 = 1024;
      int v37 = BYTE4(v18[1]);
      __int16 v38 = 2048;
      double v39 = *(float *)&v19;
      __int16 v40 = 2048;
      double v41 = *((float *)&v19 + 1);
      __int16 v42 = 2048;
      double v43 = *(float *)&v20;
      __int16 v44 = 1024;
      int v45 = BYTE4(v20);
      __int16 v46 = 1024;
      int v47 = BYTE5(v20);
      __int16 v48 = 1024;
      int v49 = BYTE6(v20);
      __int16 v50 = 1024;
      int v51 = HIBYTE(v20);
      __int16 v52 = 1024;
      int v53 = v21;
      __int16 v54 = 1024;
      int v55 = v21;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[RemoteAudioBuffer1] AlgBlock summary,A,%llu,B,%f,C,%f,D,%f,E,%f,F,%d,G,%d,H,%d,I,%d,J,%d,K,%d,L,%f,M,%f,N,%f,O,%d,P,%d,Q,%d,R,%d,S,%d,T,%d", buf, 0x9Au);
    }
  }
  if ((unint64_t)[*((id *)this + 11) count] >= 3)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    __int16 v21 = 0;
    uint64_t v17 = 0;
    memset(v18, 0, 14);
    BOOL v14 = [*((id *)this + 11) objectAtIndexedSubscript:2];
    [v14 getBytes:&v16 length:96];

    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
    }
    int v15 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134222848;
      *(void *)unint64_t v23 = v16;
      *(_WORD *)&v23[8] = 2048;
      *(double *)long long v24 = *(float *)&v17;
      *(_WORD *)&__int16 v24[8] = 2048;
      double v25 = *((float *)&v17 + 1);
      *(_WORD *)uint64_t v26 = 2048;
      *(double *)&v26[2] = *(float *)v18;
      *(_WORD *)id v27 = 2048;
      *(double *)&v27[2] = *((float *)v18 + 1);
      LOWORD(v28) = 1024;
      *(_DWORD *)((char *)&v28 + 2) = LOBYTE(v18[1]);
      HIWORD(v28) = 1024;
      int v29 = BYTE1(v18[1]);
      __int16 v30 = 1024;
      int v31 = BYTE2(v18[1]);
      __int16 v32 = 1024;
      int v33 = BYTE3(v18[1]);
      __int16 v34 = 1024;
      int v35 = BYTE4(v18[1]);
      __int16 v36 = 1024;
      int v37 = BYTE4(v18[1]);
      __int16 v38 = 2048;
      double v39 = *(float *)&v19;
      __int16 v40 = 2048;
      double v41 = *((float *)&v19 + 1);
      __int16 v42 = 2048;
      double v43 = *(float *)&v20;
      __int16 v44 = 1024;
      int v45 = BYTE4(v20);
      __int16 v46 = 1024;
      int v47 = BYTE5(v20);
      __int16 v48 = 1024;
      int v49 = BYTE6(v20);
      __int16 v50 = 1024;
      int v51 = HIBYTE(v20);
      __int16 v52 = 1024;
      int v53 = v21;
      __int16 v54 = 1024;
      int v55 = v21;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[RemoteAudioBuffer2] AlgBlock summary,A,%llu,B,%f,C,%f,D,%f,E,%f,F,%d,G,%d,H,%d,I,%d,J,%d,K,%d,L,%f,M,%f,N,%f,O,%d,P,%d,Q,%d,R,%d,S,%d,T,%d", buf, 0x9Au);
    }
  }
}

void sub_10028F274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgRemoteAudio::CLKappaFeaturesAlgRemoteAudio(CLKappaFeaturesAlgRemoteAudio *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  *double v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 80) = 0;
  *((unsigned char *)this + 88) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((unsigned char *)this + 64) = 0;
  int v6 = (char *)operator new(0x78uLL);
  *((void *)v6 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_1003B2F30;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((void *)v6 + 3) = off_1003A18A8;
  *((void *)v6 + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *((void *)v6 + 12) = 0;
  *((_WORD *)v6 + 52) = 0;
  *((void *)v6 + 8) = 0;
  *((void *)v6 + 9) = 0;
  *(void *)(v6 + 78) = 0;
  *((void *)v6 + 14) = 0;
  double v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v6 + 24;
  *((void *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    int v6 = (char *)*((void *)this + 2);
    BOOL v14 = (char *)*((void *)this + 1);
    int v15 = (std::__shared_weak_count *)v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v14 = v6 + 24;
    int v15 = (std::__shared_weak_count *)v6;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10028F5F0((uint64_t)&v14, &v16);
  long long v8 = v16;
  long long v16 = 0uLL;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v16 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v16 + 1));
    }
  }
  if (v15) {
    sub_10000BB9C(v15);
  }
  id v10 = objc_alloc((Class)NSMutableArray);
  id v11 = [v10 initWithCapacity:20, v14];
  uint64_t v12 = *((void *)this + 4);
  uint64_t v13 = *(void **)(v12 + 88);
  *(void *)(v12 + 88) = v11;

  if (*((unsigned char *)this + 72)) {
    *((unsigned char *)this + 72) = 0;
  }
  if (*((unsigned char *)this + 88)) {
    *((unsigned char *)this + 88) = 0;
  }
  (*(void (**)(CLKappaFeaturesAlgRemoteAudio *))(*(void *)this + 312))(this);
}

void sub_10028F5B8(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10028F5F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgRemoteAudio::CLKappaFeaturesAlgRemoteAudio(CLKappaFeaturesAlgRemoteAudio *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 12) = off_10039A008;
  *((void *)this + 13) = off_10039A0D0;
  *((void *)this + 14) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003B2898);
  *(void *)uint64_t v2 = off_1003B2378;
  *(void *)(v2 + 96) = off_1003B2628;
  *(void *)(v2 + 104) = off_1003B2768;
  *(void *)(v2 + 112) = off_1003B2848;
  *(unsigned char *)(v2 + 72) = 0;
  *(unsigned char *)(v2 + 80) = 0;
  *(unsigned char *)(v2 + 88) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(unsigned char *)(v2 + 64) = 0;
  int v3 = (char *)operator new(0x78uLL);
  *((void *)v3 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)int v3 = off_1003B2F30;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((void *)v3 + 3) = off_1003A18A8;
  *((void *)v3 + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *((void *)v3 + 12) = 0;
  *((_WORD *)v3 + 52) = 0;
  *((void *)v3 + 8) = 0;
  *((void *)v3 + 9) = 0;
  *(void *)(v3 + 78) = 0;
  *((void *)v3 + 14) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v3 + 24;
  *((void *)this + 2) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    int v3 = (char *)*((void *)this + 2);
    id v11 = (char *)*((void *)this + 1);
    uint64_t v12 = (std::__shared_weak_count *)v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    id v11 = v3 + 24;
    uint64_t v12 = (std::__shared_weak_count *)v3;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_10028F5F0((uint64_t)&v11, &v13);
  long long v5 = v13;
  long long v13 = 0uLL;
  int v6 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v13 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (v12) {
    sub_10000BB9C(v12);
  }
  id v7 = objc_alloc((Class)NSMutableArray);
  id v8 = [v7 initWithCapacity:20, v11];
  uint64_t v9 = *((void *)this + 4);
  id v10 = *(void **)(v9 + 88);
  *(void *)(v9 + 88) = v8;

  if (*((unsigned char *)this + 72)) {
    *((unsigned char *)this + 72) = 0;
  }
  if (*((unsigned char *)this + 88)) {
    *((unsigned char *)this + 88) = 0;
  }
  (*(void (**)(CLKappaFeaturesAlgRemoteAudio *))(*(void *)this + 312))(this);
}

void sub_10028F90C(_Unwind_Exception *a1)
{
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B2898);
  _Unwind_Resume(a1);
}

uint64_t CLKappaFeaturesAlgRemoteAudio::reset(CLKappaFeaturesAlgRemoteAudio *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

id CLKappaFeaturesAlgRemoteAudio::resetAudioOutputBuffer(CLKappaFeaturesAlgRemoteAudio *this)
{
  return [*(id *)(*((void *)this + 4) + 88) removeAllObjects];
}

void CLKappaFeaturesAlgRemoteAudio::resetConfiguration(CLKappaFeaturesAlgRemoteAudio *this)
{
  id v8 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgRAConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  [v2 algorithmThresholdNumber:0 inArrayForKey:v8 withMinValue:0.0 maxValue:0.0 defaultValue:0.0];
  *(_DWORD *)(*((void *)this + 4) + 16) = (int)v3;

  uint64_t v4 = +[CSPersistentConfiguration sharedConfiguration];
  [v4 algorithmThresholdNumber:1 inArrayForKey:v8 withMinValue:0.0 maxValue:0.0 defaultValue:0.0];
  *(_DWORD *)(*((void *)this + 4) + 20) = v5;

  int v6 = +[CSPersistentConfiguration sharedConfiguration];
  [v6 algorithmThresholdNumber:2 inArrayForKey:v8 withMinValue:0.0 maxValue:0.0 defaultValue:0.0];
  *(_DWORD *)(*((void *)this + 4) + 24) = v7;
}

void sub_10028FA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgRemoteAudio::setConfig(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *a2;
  *(_DWORD *)(v3 + 24) = *((_DWORD *)a2 + 2);
  *(void *)(v3 + 16) = v4;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
  }
  int v5 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)a2;
    double v8 = *((float *)a2 + 1);
    double v9 = *((float *)a2 + 2);
    v10[0] = 67109632;
    v10[1] = v7;
    __int16 v11 = 2048;
    double v12 = v8;
    __int16 v13 = 2048;
    double v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[RA] config-1,%d,config-2,%f,config-3,%f", (uint8_t *)v10, 0x1Cu);
  }
  return result;
}

void CLKappaFeaturesAlgRemoteAudio::epochFinalize(CLKappaFeaturesAlgRemoteAudio *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 4);
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 54) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  *(_WORD *)(v4 + 80) = 0;
  id v5 = *(id *)(v4 + 88);
  int v6 = v5;
  if (*((unsigned char *)this + 88))
  {
    if (*((unsigned char *)this + 72))
    {
      uint64_t v7 = *((void *)this + 4);
      float v9 = *(float *)(v7 + 20);
      float v8 = *(float *)(v7 + 24);
      CLKappaFeaturesAlgRemoteAudio::logAudioBufferPhoneAOPTimes(v5, @"before filtering");
      if (!*((unsigned char *)this + 72) || !*((unsigned char *)this + 88)) {
        sub_100007D1C();
      }
      id v10 = CLKappaFeaturesAlgRemoteAudio::filterOldRemoteAudioElements(v6, *((void *)this + 8), *((void *)this + 10), a2, v9);

      CLKappaFeaturesAlgRemoteAudio::logAudioBufferPhoneAOPTimes(v10, @"after filtering old");
      if (!*((unsigned char *)this + 72) || !*((unsigned char *)this + 88)) {
        sub_100007D1C();
      }
      __int16 v11 = CLKappaFeaturesAlgRemoteAudio::filterFutureRemoteAudioElements(v10, *((void *)this + 8), *((void *)this + 10), a2, v8);
      CLKappaFeaturesAlgRemoteAudio::logAudioBufferPhoneAOPTimes(v11, @"to use this epoch");
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      id v12 = v11;
      id v13 = [v12 countByEnumeratingWithState:&v29 objects:v33 count:16];
      if (v13)
      {
        BOOL v14 = 0;
        BOOL v15 = 0;
        uint64_t v16 = *(void *)v30;
        float v17 = 0.0;
        do
        {
          for (unint64_t i = 0; i != v13; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v30 != v16) {
              objc_enumerationMutation(v12);
            }
            uint64_t v19 = *(void **)(*((void *)&v29 + 1) + 8 * i);
            uint64_t v26 = 0;
            uint64_t v27 = 0;
            __int16 v28 = 0;
            uint64_t v24 = 0;
            memset(v25, 0, sizeof(v25));
            [v19 getBytes:buf length:96];
            BOOL v14 = (v25[13] | v14) != 0;
            BOOL v15 = (HIBYTE(v28) | v15) != 0;
            if (*(float *)&v24 >= v17) {
              float v17 = *(float *)&v24;
            }
          }
          id v13 = [v12 countByEnumeratingWithState:&v29 objects:v33 count:16];
        }
        while (v13);
      }
      else
      {
        BOOL v14 = 0;
        BOOL v15 = 0;
        float v17 = 0.0;
      }

      uint64_t v22 = *((void *)this + 4);
      *(float *)(v22 + 40) = v17;
      *(unsigned char *)(v22 + 6CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v14;
      *(unsigned char *)(v22 + 8CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v15;
      objc_storeStrong((id *)(v22 + 88), v10);

      int v6 = v10;
      goto LABEL_29;
    }
    if ([v5 count])
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
      }
      uint64_t v20 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        __int16 v21 = "[RA] non-empty buffer but no first trigger timestamp";
        goto LABEL_26;
      }
    }
  }
  else
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
    }
    uint64_t v20 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      __int16 v21 = "[RA] trigger time not set before epochFinalize";
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, v21, buf, 2u);
    }
  }
LABEL_29:
}

void sub_10028FF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgRemoteAudio::logAudioBufferPhoneAOPTimes(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v5 = v3;
  id v13 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v21 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    do
    {
      float v8 = 0;
      float v9 = v4;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v14 + 1) + 8 * (void)v8);
        _DWORD v19[2] = 0;
        _DWORD v19[3] = 0;
        __int16 v20 = 0;
        *((void *)&buf + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
        v19[0] = 0;
        *(void *)((char *)v19 + 6) = 0;
        [v10 getBytes:&buf length:96];
        id v4 = +[NSString stringWithFormat:@"%@, %llu", v9, (void)buf];

        float v8 = (char *)v8 + 1;
        float v9 = v4;
      }
      while (v6 != v8);
      id v6 = [v5 countByEnumeratingWithState:&v14 objects:v21 count:16];
    }
    while (v6);
  }

  __int16 v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@, now %llu", v4, +[CSTimeManager SPU_estimate_current_timestamp]);

  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
  }
  id v12 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&buf, 0xCu);
  }
}

void sub_100290178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

id CLKappaFeaturesAlgRemoteAudio::filterOldRemoteAudioElements(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  id v15 = a1;
  id v16 = objc_alloc_init((Class)NSMutableArray);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v9 = v15;
  id v10 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v21;
    do
    {
      for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v11) {
          objc_enumerationMutation(v9);
        }
        id v13 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        void v18[2] = 0;
        v18[3] = 0;
        __int16 v19 = 0;
        v17[1] = 0;
        v18[0] = 0;
        *(void *)((char *)v18 + 6) = 0;
        [v13 getBytes:v17 length:96];
        if (CLKappaFeaturesAlgRemoteAudio::computeAOPTimeDelta(v17, a2, a3, a4) >= a5) {
          [v16 addObject:v13];
        }
      }
      id v10 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v10);
  }

  return v16;
}

void sub_100290354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

id CLKappaFeaturesAlgRemoteAudio::filterFutureRemoteAudioElements(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  id v15 = a1;
  id v16 = objc_alloc_init((Class)NSMutableArray);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v9 = v15;
  id v10 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v21;
    do
    {
      for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v11) {
          objc_enumerationMutation(v9);
        }
        id v13 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        void v18[2] = 0;
        v18[3] = 0;
        __int16 v19 = 0;
        v17[1] = 0;
        v18[0] = 0;
        *(void *)((char *)v18 + 6) = 0;
        [v13 getBytes:v17 length:96];
        if (CLKappaFeaturesAlgRemoteAudio::computeAOPTimeDelta(v17, a2, a3, a4) <= a5) {
          [v16 addObject:v13];
        }
      }
      id v10 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v10);
  }

  return v16;
}

void sub_100290528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void virtual thunk to'CLKappaFeaturesAlgRemoteAudio::epochFinalize(CLKappaFeaturesAlgRemoteAudio *this, uint64_t a2)
{
}

float CLKappaFeaturesAlgRemoteAudio::computeAOPTimeDelta(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2 - a3;
  uint64_t v8 = *a1 - (a2 - a3);
  float v9 = (float)(v8 - a4);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
  }
  id v10 = qword_1003DB6A8;
  float v11 = v9 / 1000000.0;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = a1[11];
    uint64_t v13 = *a1;
    int v15 = 134219520;
    uint64_t v16 = a3;
    __int16 v17 = 2048;
    uint64_t v18 = v12;
    __int16 v19 = 2048;
    uint64_t v20 = v7;
    __int16 v21 = 2048;
    uint64_t v22 = v8;
    __int16 v23 = 2048;
    double v24 = v11;
    __int16 v25 = 2048;
    uint64_t v26 = v13;
    __int16 v27 = 2048;
    uint64_t v28 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[RA] trigger %llu companion trigger %llu delta-aop %llu remote-adj %llu deltaTime %f remote aop epoch %llu our ts %llu", (uint8_t *)&v15, 0x48u);
  }
  return v11;
}

id CLKappaFeaturesAlgRemoteAudio::sortedRemoteAudio(void *a1)
{
  uint64_t v1 = [a1 sortedArrayUsingComparator:&stru_1003B2900];
  id v2 = [objc_alloc((Class)NSMutableArray) initWithArray:v1];

  return v2;
}

void sub_100290730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int64_t sub_100290740(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  v13[2] = 0;
  void v13[3] = 0;
  __int16 v14 = 0;
  v12[1] = 0;
  v13[0] = 0;
  *(void *)((char *)v13 + 6) = 0;
  _DWORD v10[2] = 0;
  float v10[3] = 0;
  __int16 v11 = 0;
  v9[1] = 0;
  v10[0] = 0;
  *(void *)((char *)v10 + 6) = 0;
  [v4 getBytes:v12 length:96];
  [v5 getBytes:v9 length:96];
  if (v12[0] >= v9[0]) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = -1;
  }
  if (v12[0] > v9[0]) {
    int64_t v7 = 1;
  }
  else {
    int64_t v7 = v6;
  }

  return v7;
}

void sub_1002907E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgRemoteAudio::logAudioInput(float *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
    }
    id v4 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)a1;
      uint64_t v7 = *((void *)a1 + 10);
      uint64_t v6 = *((void *)a1 + 11);
      double v8 = a1[2];
      double v9 = a1[3];
      double v10 = a1[4];
      double v11 = a1[5];
      int v12 = *((unsigned __int8 *)a1 + 24);
      int v13 = *((unsigned __int8 *)a1 + 25);
      int v14 = *((unsigned __int8 *)a1 + 26);
      int v15 = *((unsigned __int8 *)a1 + 27);
      int v16 = *((unsigned __int8 *)a1 + 29);
      double v17 = a1[8];
      double v18 = a1[9];
      double v19 = a1[10];
      int v20 = *((unsigned __int8 *)a1 + 44);
      int v21 = *((unsigned __int8 *)a1 + 45);
      int v22 = *((unsigned __int8 *)a1 + 46);
      int v23 = *((unsigned __int8 *)a1 + 47);
      int v24 = *((unsigned __int8 *)a1 + 49);
      int v25 = 138417410;
      id v26 = v3;
      __int16 v27 = 2048;
      uint64_t v28 = v5;
      __int16 v29 = 2048;
      uint64_t v30 = v6;
      __int16 v31 = 2048;
      uint64_t v32 = v7;
      __int16 v33 = 2048;
      double v34 = v8;
      __int16 v35 = 2048;
      double v36 = v9;
      __int16 v37 = 2048;
      double v38 = v10;
      __int16 v39 = 2048;
      double v40 = v11;
      __int16 v41 = 1024;
      int v42 = v12;
      __int16 v43 = 1024;
      int v44 = v13;
      __int16 v45 = 1024;
      int v46 = v14;
      __int16 v47 = 1024;
      int v48 = v15;
      __int16 v49 = 1024;
      int v50 = v16;
      __int16 v51 = 2048;
      double v52 = v17;
      __int16 v53 = 2048;
      double v54 = v18;
      __int16 v55 = 2048;
      double v56 = v19;
      __int16 v57 = 1024;
      int v58 = v20;
      __int16 v59 = 1024;
      int v60 = v21;
      __int16 v61 = 1024;
      int v62 = v22;
      __int16 v63 = 1024;
      int v64 = v23;
      __int16 v65 = 1024;
      int v66 = v24;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@ audio result %llu %llu %llu %f %f %f %f %d %d %d %d %d %f %f %f %d %d %d %d %d", (uint8_t *)&v25, 0xACu);
    }
  }
}

uint64_t CLKappaFeaturesAlgRemoteAudio::getDelayBufferSize(CLKappaFeaturesAlgRemoteAudio *this)
{
  return *(unsigned int *)(*((void *)this + 4) + 16);
}

void CLKappaFeaturesAlgRemoteAudio::feedRemoteAudio(uint64_t a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (Current - *(double *)(a2 + 64) <= 60.0)
  {
    CLKappaFeaturesAlgRemoteAudio::logAudioInput((float *)a2, @"feed [RA]");
    id v7 = *(id *)(*(void *)(a1 + 32) + 88);
    double v8 = +[NSData dataWithBytes:a2 length:96];
    [v7 addObject:v8];

    if ((unint64_t)[v7 count] >= 0x15)
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
      }
      double v9 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "[RA] maximum buffer size reached!", (uint8_t *)&buf, 2u);
      }
    }
    double v10 = CLKappaFeaturesAlgRemoteAudio::sortedRemoteAudio(v7);

    *(void *)(a1 + 64) = *(void *)(a2 + 88);
    *(unsigned char *)(a1 + 72) = 1;
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
    }
    double v11 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      if (!*(unsigned char *)(a1 + 72)) {
        sub_100007D1C();
      }
      uint64_t v12 = *(void *)(a1 + 64);
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[RA] firstPhoneTriggerAOPTime %llu", (uint8_t *)&buf, 0xCu);
    }

    for (unint64_t i = 0; (unint64_t)[v10 count] > i; ++i)
    {
      v23[2] = 0;
      v23[3] = 0;
      __int16 v24 = 0;
      *((void *)&buf + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
      v23[0] = 0;
      *(void *)((char *)v23 + 6) = 0;
      int v14 = [v10 objectAtIndexedSubscript:i];
      [v14 getBytes:&buf length:96];
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
      }
      int v15 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)double v18 = 67109376;
        int v19 = i;
        __int16 v20 = 2048;
        uint64_t v21 = buf;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "i %d ts %llu", v18, 0x12u);
      }
    }
    uint64_t v16 = *(void *)(a1 + 32);
    double v17 = *(void **)(v16 + 88);
    *(void *)(v16 + 88) = v10;
  }
  else
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
    }
    uint64_t v5 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
    {
      double v6 = Current - *(double *)(a2 + 64);
      LODWORD(buf) = 134349056;
      *(double *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[RA] refusing to feed audio sample with age %{public}f", (uint8_t *)&buf, 0xCu);
    }
  }
}

void sub_100290D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgRemoteAudio::setFirstWatchAOPTriggerTimestamp(CLKappaFeaturesAlgRemoteAudio *this, uint64_t a2)
{
  *((void *)this + 10) = a2;
  *((unsigned char *)this + 88) = 1;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B2F00);
  }
  id v3 = (id)qword_1003DB6A8;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (!*((unsigned char *)this + 88)) {
      sub_100007D1C();
    }
    uint64_t v4 = *((void *)this + 10);
    int v5 = 134217984;
    uint64_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[RA] fFirstWatchTriggerAOPTime %llu", (uint8_t *)&v5, 0xCu);
  }
}

void sub_100290EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100290EE0(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003B2378;
  *((void *)this + 12) = off_1003B2628;
  *((void *)this + 13) = off_1003B2768;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_1003B2848;
  id v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  id v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003B2898);
}

void sub_100290FDC(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003B2378;
  *((void *)this + 12) = off_1003B2628;
  *((void *)this + 13) = off_1003B2768;
  *((void *)this + 14) = off_1003B2848;
  id v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  id v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003B2898);

  operator delete();
}

void sub_1002910C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    sub_10000BB9C(v4);
  }
}

void sub_1002910F0(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B2378;
  *((void *)v1 + 12) = off_1003B2628;
  *((void *)v1 + 13) = off_1003B2768;
  *((void *)v1 + 14) = off_1003B2848;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B2898);
}

void sub_1002911D4(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B2378;
  *((void *)v1 + 12) = off_1003B2628;
  *((void *)v1 + 13) = off_1003B2768;
  *((void *)v1 + 14) = off_1003B2848;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B2898);

  operator delete();
}

void sub_1002912CC(void *a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 32);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v5 = (std::__shared_weak_count *)*((void *)v2 + 7);
  *((void *)v2 + 6) = v4;
  *((void *)v2 + 7) = v3;
  if (v5) {
    sub_10000BB9C(v5);
  }
}

void sub_10029130C(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B2378;
  *((void *)v1 + 12) = off_1003B2628;
  *((void *)v1 + 13) = off_1003B2768;
  *((void *)v1 + 14) = off_1003B2848;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B2898);
}

void sub_1002913F0(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B2378;
  *((void *)v1 + 12) = off_1003B2628;
  *((void *)v1 + 13) = off_1003B2768;
  *((void *)v1 + 14) = off_1003B2848;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B2898);

  operator delete();
}

void sub_1002914E8(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B2378;
  *((void *)v1 + 12) = off_1003B2628;
  *((void *)v1 + 13) = off_1003B2768;
  *((void *)v1 + 14) = off_1003B2848;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B2898);
}

void sub_1002915CC(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B2378;
  *((void *)v1 + 12) = off_1003B2628;
  *((void *)v1 + 13) = off_1003B2768;
  *((void *)v1 + 14) = off_1003B2848;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B2898);

  operator delete();
}

void sub_1002916C4(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_100291708(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003B2F30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100291728(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003B2F30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10029177C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void CLKappaDeescalatorSkiLift::CLKappaDeescalatorSkiLift(CLKappaDeescalatorSkiLift *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  uint64_t v2 = (char *)sub_100007BC0((void *)this + 6, "none");
  *(void *)this = &off_1003B2F80;
  *((void *)this + 9) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((void *)this + 7) = 10;
    uint64_t v2 = (char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 7CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 10;
  }
  strcpy(v2, "de-SkiLift");
}

unint64_t CLKappaDeescalatorSkiLift::resetConfiguration(CLKappaDeescalatorSkiLift *this)
{
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceSkiLift");
  unint64_t result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceSkiLift");
  *((_DWORD *)this + 9) = result;
  return result;
}

void CLKappaDeescalatorSkiLift::log(CLKappaDeescalatorSkiLift *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 9);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3000);
  }
  int v5 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((_DWORD *)this + 6);
    int v7 = *((unsigned __int8 *)this + 32);
    int v8 = 134350080;
    uint64_t v9 = a2;
    __int16 v10 = 1026;
    int v11 = v6;
    __int16 v12 = 1026;
    int v13 = v7;
    __int16 v14 = 1026;
    int v15 = v4;
    __int16 v16 = 1026;
    int v17 = HIDWORD(v4);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[de-SkiLift] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,debug-1a,%{public}u,debug-1b,%{public}u", (uint8_t *)&v8, 0x24u);
  }
}

void CLKappaDeescalatorSkiLift::updateWithTrigger(CLKappaDeescalatorSkiLift *this, const TriggerSample *a2)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3000);
  }
  uint64_t v4 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int path = a2->path;
    int v6 = BYTE2(a2[1].rmsSN);
    int v11 = 67109376;
    int v12 = path;
    __int16 v13 = 1024;
    int v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[de-SkiLift] feedTrigger path %u martyPath %u", (uint8_t *)&v11, 0xEu);
  }
  if (*((unsigned char *)this + 32) == 1 && (a2->path & 0x20) != 0)
  {
    ++*((_DWORD *)this + 18);
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B3000);
    }
    int v7 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *((_DWORD *)this + 18);
      int v11 = 67109120;
      int v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[de-SkiLift] feedTrigger found ski lift trigger, count:%d", (uint8_t *)&v11, 8u);
    }
  }
  if (a2->btHint == 1)
  {
    ++*((_DWORD *)this + 19);
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B3000);
    }
    uint64_t v9 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *((_DWORD *)this + 19);
      int v11 = 67109120;
      int v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[de-SkiLift] feedTrigger found true btHint in trigger, count:%d", (uint8_t *)&v11, 8u);
    }
  }
}

uint64_t CLKappaDeescalatorSkiLift::onEvaluateBetweenMinAndMaxHoldDuration(CLKappaDeescalatorSkiLift *this)
{
  if (*((_DWORD *)this + 19) || !*((_DWORD *)this + 18)) {
    return 0;
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3000);
  }
  uint64_t v3 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = (uint64_t *)((char *)this + 8);
    if (!*((unsigned char *)this + 16)) {
      uint64_t v4 = (uint64_t *)&unk_10033E768;
    }
    uint64_t v5 = *v4;
    BOOL v6 = *((_DWORD *)this + 7) != 0;
    int v7 = *((_DWORD *)this + 18);
    int v8 = *((_DWORD *)this + 19);
    int v9 = 134218752;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    BOOL v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[de-SkiLift] deescalated, crashTimestamp:%llu, numDeescalationSkiLift:%d, numTriggersWithRecentSkiLiftDetected:%d, numTriggersWithTrueBtHint:%d", (uint8_t *)&v9, 0x1Eu);
  }
  return 4;
}

uint64_t CLKappaDeescalatorSkiLift::onEvaluateAtBoundary(CLKappaDeescalatorSkiLift *this)
{
  if (*((_DWORD *)this + 19) || !*((_DWORD *)this + 18)) {
    return 0;
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3000);
  }
  uint64_t v3 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = (uint64_t *)((char *)this + 8);
    if (!*((unsigned char *)this + 16)) {
      uint64_t v4 = (uint64_t *)&unk_10033E768;
    }
    uint64_t v5 = *v4;
    BOOL v6 = *((_DWORD *)this + 7) != 0;
    int v7 = *((_DWORD *)this + 18);
    int v8 = *((_DWORD *)this + 19);
    int v9 = 134218752;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    BOOL v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[de-SkiLift] deescalated at boundary, crashTimestamp:%llu, numDeescalationSkiLift:%d, numTriggersWithRecentSkiLiftDetected:%d, numTriggersWithTrueBtHint:%d", (uint8_t *)&v9, 0x1Eu);
  }
  return 4;
}

void sub_100291E2C(void **a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

void sub_100291E64(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void CLKappaDeescalatorSkiing::CLKappaDeescalatorSkiing(CLKappaDeescalatorSkiing *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  uint64_t v2 = (char *)sub_100007BC0((void *)this + 6, "none");
  *(void *)this = off_1003B3030;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 80) = 0;
  *(void *)((char *)this + 84) = 0xA00000000;
  *((void *)this + 13) = 0xA00000000;
  *((_WORD *)this + 76) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((void *)this + 7) = 6;
    uint64_t v2 = (char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 7CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 6;
  }
  strcpy(v2, "de-Ski");
}

uint64_t CLKappaDeescalatorSkiing::assertReady(CLKappaDeescalatorSkiing *this, uint64_t a2, const char *a3)
{
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 80), (BOOL)"[de-Ski] missing config", a3);
}

uint64_t CLKappaDeescalatorSkiing::prepareForNextEpoch(uint64_t this)
{
  *(_WORD *)(this + 152) = 0;
  return this;
}

uint64_t CLKappaDeescalatorSkiing::setConfig(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*(unsigned char *)(result + 80)) {
    *(unsigned char *)(result + 80) = 1;
  }
  *(void *)(result + 72) = v2;
  return result;
}

void CLKappaDeescalatorSkiing::resetConfiguration(CLKappaDeescalatorSkiing *this)
{
  id v6 = +[CSPersistentConfiguration configBaseKey:"DeescalatorSkiConfig" forFeatureMode:*((unsigned __int8 *)this + 32)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  unsigned __int8 v3 = [v2 intThreshold:&CLKappaDeescalatorSkiing::kConfigurationDefaults forKey:v6];
  unsigned __int8 v4 = [v2 intThreshold:&unk_10033E798 forKey:v6];
  [v2 floatThreshold:&unk_10033E7A8 forKey:v6];
  if (!*((unsigned char *)this + 80)) {
    *((unsigned char *)this + 80) = 1;
  }
  *((_DWORD *)this + 18) = v3 | (v4 << 8);
  *((_DWORD *)this + 19) = v5;
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceSkiing");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceSkiing");
}

void sub_1002920C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLKappaDeescalatorSkiing::log(CLKappaDeescalatorSkiing *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 80)) {
    sub_100007D1C();
  }
  int v4 = *((unsigned __int8 *)this + 152);
  int v5 = *((unsigned __int8 *)this + 153);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B30B0);
  }
  id v6 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *((_DWORD *)this + 6);
    int v9 = *((unsigned __int8 *)this + 32);
    int v10 = *((unsigned __int8 *)this + 72);
    int v11 = *((unsigned __int8 *)this + 73);
    double v12 = *((float *)this + 19);
    int v13 = 134350848;
    uint64_t v14 = a2;
    __int16 v15 = 1026;
    int v16 = v8;
    __int16 v17 = 1026;
    int v18 = v9;
    __int16 v19 = 1026;
    int v20 = v10;
    __int16 v21 = 1026;
    int v22 = v11;
    __int16 v23 = 2050;
    double v24 = v12;
    __int16 v25 = 1026;
    int v26 = v4;
    __int16 v27 = 1026;
    int v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[de-Ski] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,config-1,%{public}u,config-2,%{public}u,config-3,%{public}f,debug-1a,%{public}d,debug-1b,%{public}d", (uint8_t *)&v13, 0x3Au);
  }
  return result;
}

uint64_t CLKappaDeescalatorSkiing::updateWithAudioTPQ(uint64_t this, char a2)
{
  uint64_t v2 = *(unsigned __int16 *)(this + 84);
  uint64_t v3 = *(unsigned __int16 *)(this + 86);
  unint64_t v4 = *(unsigned int *)(this + 88);
  if (v2 + v3 >= v4) {
    uint64_t v5 = *(unsigned int *)(this + 88);
  }
  else {
    uint64_t v5 = 0;
  }
  *(unsigned char *)(this + 84 + v2 + v3 - v5 + 8) = a2;
  if (v4 <= v3)
  {
    unint64_t v6 = v2 + 1;
    if (v6 < v4) {
      LOWORD(v4) = 0;
    }
    *(_WORD *)(this + 84) = v6 - v4;
  }
  else
  {
    *(_WORD *)(this + 86) = v3 + 1;
  }
  return this;
}

uint64_t CLKappaDeescalatorSkiing::updateWithPressureMedian(uint64_t this, float a2)
{
  uint64_t v2 = *(unsigned __int16 *)(this + 104);
  uint64_t v3 = *(unsigned __int16 *)(this + 106);
  unint64_t v4 = *(unsigned int *)(this + 108);
  if (v2 + v3 >= v4) {
    uint64_t v5 = *(unsigned int *)(this + 108);
  }
  else {
    uint64_t v5 = 0;
  }
  *(float *)(this + 104 + 4 * (v2 + v3 - v5) + 8) = a2;
  if (v4 <= v3)
  {
    unint64_t v6 = v2 + 1;
    if (v6 < v4) {
      LOWORD(v4) = 0;
    }
    *(_WORD *)(this + 104) = v6 - v4;
  }
  else
  {
    *(_WORD *)(this + 106) = v3 + 1;
  }
  return this;
}

uint64_t CLKappaDeescalatorSkiing::getNumAudioSkiing(unsigned __int16 *a1)
{
  if (a1[1])
  {
    unint64_t v2 = 0;
    unsigned __int8 v3 = 0;
    do
      v3 += *(unsigned char *)sub_10002C20C(a1, v2++);
    while (v2 < a1[1]);
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t CLKappaDeescalatorSkiing::getNumBaroIncreasesSkiing(unsigned __int16 *a1, float a2)
{
  if (a1[1] == 1)
  {
    return 0;
  }
  else
  {
    unint64_t v5 = 0;
    unsigned __int8 v2 = 0;
    do
    {
      unint64_t v6 = v5 + 1;
      float v7 = *(float *)sub_10003D860(a1, v5 + 1);
      if ((float)(v7 - *(float *)sub_10003D860(a1, v5)) > a2) {
        ++v2;
      }
      ++v5;
    }
    while ((unint64_t)a1[1] - 1 > v6);
  }
  return v2;
}

uint64_t CLKappaDeescalatorSkiing::onEvaluateBetweenMinAndMaxHoldDuration(CLKappaDeescalatorSkiing *this)
{
  *((unsigned char *)this + 152) = CLKappaDeescalatorSkiing::getNumAudioSkiing((unsigned __int16 *)this + 42);
  if (!*((unsigned char *)this + 80)) {
    sub_100007D1C();
  }
  unsigned int v2 = *((unsigned __int8 *)this + 72);
  unsigned int v3 = *((unsigned __int8 *)this + 73);
  unsigned int NumBaroIncreasesSkiing = CLKappaDeescalatorSkiing::getNumBaroIncreasesSkiing((unsigned __int16 *)this + 52, *((float *)this + 19));
  *((unsigned char *)this + 153) = NumBaroIncreasesSkiing;
  if (NumBaroIncreasesSkiing >= v3 && *((unsigned __int8 *)this + 152) >= v2) {
    return 4;
  }
  else {
    return 0;
  }
}

uint64_t CLKappaDeescalatorSkiing::onPreviousEpochMadeDecision(uint64_t this)
{
  *(_DWORD *)(this + 84) = 0;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

void sub_100292448(void **this)
{
  *this = off_1003B3030;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_100292468(void **a1)
{
  *a1 = off_1003B3030;
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

void sub_1002924BC(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

double CLKappaEstimatesAlgRolloverCrashResult::reset(CLKappaEstimatesAlgRolloverCrashResult *this)
{
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 136) = 0;
  *((void *)this + 35) = 0;
  double result = 0.0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  return result;
}

void CLKappaEstimatesAlgRolloverCrashResult::log(CLKappaEstimatesAlgRolloverCrashResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
  }
  unsigned int v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    double v3 = *((float *)this + 72);
    double v4 = *((float *)this + 73);
    double v5 = *((float *)this + 75);
    double v6 = *((float *)this + 76);
    double v7 = *((float *)this + 80);
    double v8 = *((float *)this + 81);
    int v71 = 134370048;
    double v9 = *((float *)this + 82);
    double v76 = v3;
    double v10 = *((float *)this + 90);
    double v78 = v4;
    double v84 = v5;
    double v11 = *((float *)this + 4);
    double v12 = *((float *)this + 5);
    double v86 = v6;
    double v92 = v7;
    double v13 = *((float *)this + 6);
    double v14 = *((float *)this + 7);
    double v94 = v8;
    double v96 = v9;
    LODWORD(v8) = *((_DWORD *)this + 9);
    double v15 = *((float *)this + 8);
    double v106 = v10;
    double v112 = v11;
    double v16 = *((float *)this + 12);
    double v17 = *((float *)this + 13);
    double v114 = v12;
    double v116 = v13;
    double v18 = *((float *)this + 14);
    double v19 = *((float *)this + 15);
    double v118 = v14;
    double v120 = v15;
    LODWORD(v13) = *((_DWORD *)this + 17);
    double v20 = *((float *)this + 16);
    double v122 = v16;
    double v124 = v17;
    double v21 = *((float *)this + 30);
    double v22 = *((float *)this + 31);
    double v126 = v18;
    double v128 = v19;
    double v23 = *((float *)this + 32);
    double v24 = *((float *)this + 33);
    double v130 = v20;
    double v132 = v21;
    double v25 = *((float *)this + 34);
    double v26 = *((float *)this + 35);
    double v134 = v22;
    double v136 = v23;
    double v27 = *((float *)this + 36);
    double v28 = *((float *)this + 37);
    double v138 = v24;
    double v140 = v25;
    double v29 = *((float *)this + 38);
    double v30 = *((float *)this + 39);
    double v142 = v26;
    double v144 = v27;
    double v31 = *((float *)this + 40);
    double v32 = *((float *)this + 41);
    double v146 = v28;
    double v148 = v29;
    double v33 = *((float *)this + 28);
    double v34 = *((float *)this + 29);
    double v150 = v30;
    double v152 = v31;
    double v35 = *((float *)this + 20);
    double v36 = *((float *)this + 21);
    double v154 = v32;
    double v156 = v33;
    double v37 = *((float *)this + 22);
    double v38 = *((float *)this + 23);
    double v158 = v34;
    double v160 = v35;
    LODWORD(v33) = *((_DWORD *)this + 25);
    double v39 = *((float *)this + 24);
    double v162 = v36;
    double v164 = v37;
    double v40 = *((float *)this + 42);
    double v41 = *((float *)this + 43);
    double v166 = v38;
    double v168 = v39;
    double v42 = *((float *)this + 44);
    double v43 = *((float *)this + 45);
    double v170 = v40;
    double v172 = v41;
    double v44 = *((float *)this + 46);
    double v45 = *((float *)this + 47);
    double v174 = v42;
    double v176 = v43;
    double v46 = *((float *)this + 48);
    double v47 = *((float *)this + 49);
    double v178 = v44;
    double v180 = v45;
    LODWORD(v45) = *((_DWORD *)this + 52);
    double v48 = *((float *)this + 53);
    double v182 = v46;
    double v184 = v47;
    double v49 = *((float *)this + 54);
    double v50 = *((float *)this + 55);
    double v186 = v48;
    double v188 = v49;
    double v51 = *((float *)this + 56);
    double v52 = *((float *)this + 57);
    double v190 = v50;
    double v192 = v51;
    double v53 = *((float *)this + 58);
    double v54 = *((float *)this + 59);
    double v194 = v52;
    double v196 = v53;
    LODWORD(v52) = *((_DWORD *)this + 61);
    double v55 = *((float *)this + 60);
    double v198 = v54;
    double v56 = *((float *)this + 64);
    double v200 = v55;
    double v57 = *((float *)this + 65);
    double v202 = v56;
    double v58 = *((float *)this + 66);
    double v204 = v57;
    double v206 = v58;
    LODWORD(v58) = *((_DWORD *)this + 11);
    double v59 = *((float *)this + 10);
    double v208 = *(float *)&v8;
    double v210 = v59;
    LODWORD(v59) = *((_DWORD *)this + 51);
    double v212 = *((float *)this + 50);
    double v214 = *(float *)&v59;
    double v216 = *(float *)&v13;
    LODWORD(v13) = *((_DWORD *)this + 19);
    double v218 = *((float *)this + 18);
    double v220 = *(float *)&v52;
    LODWORD(v59) = *((_DWORD *)this + 63);
    double v222 = *((float *)this + 62);
    double v224 = *(float *)&v33;
    LODWORD(v33) = *((_DWORD *)this + 27);
    double v226 = *((float *)this + 26);
    double v228 = *(float *)&v58;
    double v230 = *(float *)&v45;
    double v232 = *(float *)&v13;
    double v234 = *(float *)&v59;
    double v236 = *(float *)&v33;
    int v60 = *((unsigned __int8 *)this + 272);
    int v61 = *((unsigned __int8 *)this + 296);
    int v62 = *((unsigned __int8 *)this + 297);
    int v63 = *((unsigned __int8 *)this + 308);
    int v64 = *((_DWORD *)this + 78);
    int v65 = *((unsigned __int8 *)this + 344);
    int v66 = *((unsigned __int8 *)this + 345);
    int v67 = *((unsigned __int8 *)this + 346);
    int v68 = *((unsigned __int8 *)this + 273);
    int v69 = *((_DWORD *)this + 87);
    int v70 = *((unsigned __int8 *)this + 352);
    uint64_t v72 = *((void *)this + 35);
    __int16 v73 = 1026;
    int v74 = v60;
    __int16 v75 = 2050;
    __int16 v77 = 2050;
    __int16 v79 = 1026;
    int v80 = v61;
    __int16 v81 = 1026;
    int v82 = v62;
    __int16 v83 = 2050;
    __int16 v85 = 2050;
    __int16 v87 = 1026;
    int v88 = v63;
    __int16 v89 = 1026;
    int v90 = v64;
    __int16 v91 = 2050;
    __int16 v93 = 2050;
    __int16 v95 = 2050;
    __int16 v97 = 1026;
    int v98 = v65;
    __int16 v99 = 1026;
    int v100 = v66;
    __int16 v101 = 1026;
    int v102 = v67;
    __int16 v103 = 1026;
    int v104 = v68;
    __int16 v105 = 2050;
    __int16 v107 = 1026;
    int v108 = v69;
    __int16 v109 = 1026;
    int v110 = v70;
    __int16 v111 = 2050;
    __int16 v113 = 2050;
    __int16 v115 = 2050;
    __int16 v117 = 2050;
    __int16 v119 = 2050;
    __int16 v121 = 2050;
    __int16 v123 = 2050;
    __int16 v125 = 2050;
    __int16 v127 = 2050;
    __int16 v129 = 2050;
    __int16 v131 = 2050;
    __int16 v133 = 2050;
    __int16 v135 = 2050;
    __int16 v137 = 2050;
    __int16 v139 = 2050;
    __int16 v141 = 2050;
    __int16 v143 = 2050;
    __int16 v145 = 2050;
    __int16 v147 = 2050;
    __int16 v149 = 2050;
    __int16 v151 = 2050;
    __int16 v153 = 2050;
    __int16 v155 = 2050;
    __int16 v157 = 2050;
    __int16 v159 = 2050;
    __int16 v161 = 2050;
    __int16 v163 = 2050;
    __int16 v165 = 2050;
    __int16 v167 = 2050;
    __int16 v169 = 2050;
    __int16 v171 = 2050;
    __int16 v173 = 2050;
    __int16 v175 = 2050;
    __int16 v177 = 2050;
    __int16 v179 = 2050;
    __int16 v181 = 2050;
    __int16 v183 = 2050;
    __int16 v185 = 2050;
    __int16 v187 = 2050;
    __int16 v189 = 2050;
    __int16 v191 = 2050;
    __int16 v193 = 2050;
    __int16 v195 = 2050;
    __int16 v197 = 2050;
    __int16 v199 = 2050;
    __int16 v201 = 2050;
    __int16 v203 = 2050;
    __int16 v205 = 2050;
    __int16 v207 = 2050;
    __int16 v209 = 2050;
    __int16 v211 = 2050;
    __int16 v213 = 2050;
    __int16 v215 = 2050;
    __int16 v217 = 2050;
    __int16 v219 = 2050;
    __int16 v221 = 2050;
    __int16 v223 = 2050;
    __int16 v225 = 2050;
    __int16 v227 = 2050;
    __int16 v229 = 2050;
    __int16 v231 = 2050;
    __int16 v233 = 2050;
    __int16 v235 = 2050;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[RC] AlgBlock summary,A,%{public}llu,B,%{public}d,C,%{public}f,D,%{public}f,E,%{public}d,F,%{public}d,G,%{public}f,H,%{public}f,I,%{public}d,J,%{public}d,K,%{public}f,L,%{public}f,M,%{public}f,N,%{public}d,O,%{public}d,P,%{public}d,Q,%{public}d,R,%{public}f,S,%{public}d,T,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,config-5,%{public}f,config-6,%{public}f,config-7,%{public}f,config-8,%{public}f,config-9,%{public}f,config-10,%{public}f,config-11,%{public}f,config-12,%{public}f,config-13,%{public}f,config-14,%{public}f,config-15,%{public}f,config-16,%{public}f,config-17,%{public}f,config-18,%{public}f,config-19,%{public}f,config-20,%{public}f,config-21,%{public}f,config-22,%{public}f,config-23,%{public}f,config-24,%{public}f,config-25,%{public}f,config-26,%{public}f,config-27,%{public}f,config-28,%{public}f,config-29,%{public}f,config-30,%{public}f,config-31,%{public}f,config-32,%{public}f,config-33,%{public}f,config-34,%{public}f,config-35,%{public}f,config-36,%{public}f,config-37,%{public}f,config-38,%{public}f,config-39,%{public}f,config-40,%{public}f,config-41,%{public}f,config-42,%{public}f,config-43,%{public}f,config-44,%{public}f,config-45,%{public}f,config-46,%{public}f,config-47,%{public}f,config-48,%{public}f,config-49,%{public}f,config-50,%{public}f,config-51,%{public}f,config-52,%{public}f,config-53,%{public}f,config-54,%{public}f,config-55,%{public}f,config-56,%{public}f,config-57,%{public}f,config-58,%{public}f,config-59,%{public}f,config-60,%{public}f,config-61,%{public}f,config-62,%{public}f,config-63,%{public}f\n", (uint8_t *)&v71, 0x314u);
  }
}

void CLKappaEstimatesAlgRolloverCrash::CLKappaEstimatesAlgRolloverCrash(CLKappaEstimatesAlgRolloverCrash *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  *double v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0x80000000800000;
  *((_DWORD *)this + 14) = 0;
  *(void *)&long long v6 = 0x80000000800000;
  *((void *)&v6 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0x80000000800000;
  *(_OWORD *)((char *)this + 60) = v6;
  *((_DWORD *)this + 19) = 0x800000;
  *((_WORD *)this + 40) = 0;
  *((_DWORD *)this + 2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0x800000;
  *((unsigned char *)this + 88) = 0;
  *(void *)((char *)this + 92) = 0xFFFFFFFF00800000;
  *((unsigned char *)this + 100) = 0;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = -1;
  double v7 = (std::__shared_weak_count *)operator new(0x188uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_1003B3CF8;
  sub_100295884((uint64_t)&v7[1]);
  double v8 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v7 + 1;
  *((void *)this + 2) = v7;
  if (v8)
  {
    sub_10000BB9C(v8);
    double v7 = (std::__shared_weak_count *)*((void *)this + 2);
    double v11 = (std::__shared_weak_count *)*((void *)this + 1);
    double v12 = v7;
    if (!v7) {
      goto LABEL_6;
    }
  }
  else
  {
    double v11 = v7 + 1;
    double v12 = v7;
  }
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_100292DB8((uint64_t)&v11, &v13);
  long long v9 = v13;
  long long v13 = 0uLL;
  double v10 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v9;
  if (v10)
  {
    sub_10000BB9C(v10);
    if (*((void *)&v13 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (v12) {
    sub_10000BB9C(v12);
  }
  (*(void (**)(CLKappaEstimatesAlgRolloverCrash *))(*(void *)this + 312))(this);
}

void sub_100292D8C(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_100292DB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaEstimatesAlgRolloverCrash::CLKappaEstimatesAlgRolloverCrash(CLKappaEstimatesAlgRolloverCrash *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 15) = off_10039A008;
  *((void *)this + 16) = off_10039A0D0;
  *((void *)this + 17) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003B36A0);
  *(void *)uint64_t v2 = off_1003B3180;
  *(void *)(v2 + 120) = off_1003B3430;
  *(void *)(v2 + 128) = off_1003B3570;
  *(void *)(v2 + 136) = off_1003B3650;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0x80000000800000;
  *(_DWORD *)(v2 + 56) = 0;
  *(void *)&long long v3 = 0x80000000800000;
  *((void *)&v3 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0x80000000800000;
  *(_OWORD *)(v2 + 60) = v3;
  *(_DWORD *)(v2 + 76) = 0x800000;
  *(_WORD *)(v2 + 80) = 0;
  *(_DWORD *)(v2 + 84) = 0x800000;
  *(unsigned char *)(v2 + 88) = 0;
  *(void *)(v2 + 92) = 0xFFFFFFFF00800000;
  *(unsigned char *)(v2 + 100) = 0;
  *(void *)(v2 + 104) = 0;
  *(_DWORD *)(v2 + 112) = -1;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x188uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1003B3CF8;
  sub_100295884((uint64_t)&v4[1]);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v4 + 1;
  *((void *)this + 2) = v4;
  if (v5)
  {
    sub_10000BB9C(v5);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
    double v8 = (std::__shared_weak_count *)*((void *)this + 1);
    long long v9 = v4;
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    double v8 = v4 + 1;
    long long v9 = v4;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_100292DB8((uint64_t)&v8, &v10);
  long long v6 = v10;
  long long v10 = 0uLL;
  double v7 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    if (*((void *)&v10 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  if (v9) {
    sub_10000BB9C(v9);
  }
  (*(void (**)(CLKappaEstimatesAlgRolloverCrash *))(*(void *)this + 312))(this);
}

void sub_100293090(_Unwind_Exception *a1)
{
  long long v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B36A0);
  _Unwind_Resume(a1);
}

void CLKappaEstimatesAlgRolloverCrash::resetConfiguration(CLKappaEstimatesAlgRolloverCrash *this)
{
  id v264 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgRolloverCrashConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  int v269 = 1176255488;
  long long v274 = xmmword_10033E820;
  long long v279 = xmmword_10033E840;
  int v304 = 1176255488;
  long long v312 = xmmword_10033E8D0;
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 0.5;
  LODWORD(v4) = 3.0;
  LODWORD(v5) = 1193033728;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v264 withMinValue:v3 maxValue:v5 defaultValue:v4];
  LODWORD(v265) = v6;

  double v7 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v8) = 1091829760;
  LODWORD(v9) = 0.5;
  LODWORD(v10) = 1193033728;
  [v7 algorithmThresholdNumber:1 inArrayForKey:v264 withMinValue:v9 maxValue:v10 defaultValue:v8];
  DWORD1(v265) = v11;

  double v12 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v13) = 1120403456;
  LODWORD(v14) = 1145569280;
  LODWORD(v15) = 1128792064;
  [v12 algorithmThresholdNumber:3 inArrayForKey:v264 withMinValue:v13 maxValue:v14 defaultValue:v15];
  HIDWORD(v265) = v16;

  double v17 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v18) = 1120403456;
  LODWORD(v19) = 10.0;
  LODWORD(v20) = 15.0;
  [v17 algorithmThresholdNumber:2 inArrayForKey:v264 withMinValue:v19 maxValue:v18 defaultValue:v20];
  DWORD2(v265) = v21;

  double v22 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v23) = 1008981770;
  LODWORD(v24) = 1045220557;
  LODWORD(v25) = 1022739087;
  [v22 algorithmThresholdNumber:4 inArrayForKey:v264 withMinValue:v23 maxValue:v24 defaultValue:v25];
  int v266 = v26;

  double v27 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v28) = 0.5;
  LODWORD(v29) = 3.0;
  LODWORD(v30) = 1193033728;
  [v27 algorithmThresholdNumber:5 inArrayForKey:v264 withMinValue:v28 maxValue:v30 defaultValue:v29];
  int v270 = v31;

  double v32 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v33) = 2139095039;
  LODWORD(v34) = 0.5;
  LODWORD(v35) = 2139095039;
  [v32 algorithmThresholdNumber:6 inArrayForKey:v264 withMinValue:v34 maxValue:v33 defaultValue:v35];
  int v271 = v36;

  double v37 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v38) = 1120403456;
  LODWORD(v39) = 1145569280;
  LODWORD(v40) = 1133903872;
  [v37 algorithmThresholdNumber:8 inArrayForKey:v264 withMinValue:v38 maxValue:v39 defaultValue:v40];
  int v273 = v41;

  double v42 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v43) = 1120403456;
  LODWORD(v44) = 10.0;
  LODWORD(v45) = 15.0;
  [v42 algorithmThresholdNumber:7 inArrayForKey:v264 withMinValue:v44 maxValue:v43 defaultValue:v45];
  int v272 = v46;

  double v47 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v48) = 1008981770;
  LODWORD(v49) = 1045220557;
  LODWORD(v50) = 1022739087;
  [v47 algorithmThresholdNumber:9 inArrayForKey:v264 withMinValue:v48 maxValue:v49 defaultValue:v50];
  LODWORD(v274) = v51;

  double v52 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v53) = 1120403456;
  LODWORD(v54) = 8.0;
  [v52 algorithmThresholdNumber:22 inArrayForKey:v264 withMinValue:0.0 maxValue:v53 defaultValue:v54];
  int v280 = v55;

  double v56 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v57) = 1145569280;
  LODWORD(v58) = 1125515264;
  [v56 algorithmThresholdNumber:23 inArrayForKey:v264 withMinValue:0.0 maxValue:v57 defaultValue:v58];
  int v281 = v59;

  int v60 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v6CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 2139095039;
  LODWORD(v62) = 0.5;
  LODWORD(v63) = 3.0;
  [v60 algorithmThresholdNumber:24 inArrayForKey:v264 withMinValue:v62 maxValue:v61 defaultValue:v63];
  int v275 = v64;

  int v65 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v66) = 2139095039;
  LODWORD(v67) = 10.0;
  LODWORD(v68) = 2139095039;
  [v65 algorithmThresholdNumber:25 inArrayForKey:v264 withMinValue:v67 maxValue:v66 defaultValue:v68];
  int v276 = v69;

  int v70 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v7CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 1120403456;
  LODWORD(v72) = 1145569280;
  LODWORD(v73) = 1133903872;
  [v70 algorithmThresholdNumber:27 inArrayForKey:v264 withMinValue:v71 maxValue:v72 defaultValue:v73];
  int v278 = v74;

  __int16 v75 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v76) = 1120403456;
  LODWORD(v77) = 10.0;
  LODWORD(v78) = 15.0;
  [v75 algorithmThresholdNumber:26 inArrayForKey:v264 withMinValue:v77 maxValue:v76 defaultValue:v78];

  __int16 v79 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v80) = 1008981770;
  LODWORD(v8CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 1045220557;
  LODWORD(v82) = 1022739087;
  [v79 algorithmThresholdNumber:28 inArrayForKey:v264 withMinValue:v80 maxValue:v81 defaultValue:v82];
  LODWORD(v279) = v83;

  double v84 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v85) = 1120403456;
  LODWORD(v86) = 1093533696;
  [v84 algorithmThresholdNumber:10 inArrayForKey:v264 withMinValue:0.0 maxValue:v85 defaultValue:v86];
  int v282 = v87;

  int v88 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v89) = 20.0;
  LODWORD(v90) = 0.40625;
  [v88 algorithmThresholdNumber:11 inArrayForKey:v264 withMinValue:0.0 maxValue:v89 defaultValue:v90];
  int v283 = v91;

  double v92 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v93) = 1165623296;
  LODWORD(v94) = 1123680256;
  [v92 algorithmThresholdNumber:12 inArrayForKey:v264 withMinValue:0.0 maxValue:v93 defaultValue:v94];
  int v284 = v95;

  double v96 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v97) = 1165623296;
  LODWORD(v98) = 1134723072;
  [v96 algorithmThresholdNumber:13 inArrayForKey:v264 withMinValue:0.0 maxValue:v97 defaultValue:v98];
  int v285 = v99;

  int v100 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v10CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 1120403456;
  LODWORD(v102) = 1093533696;
  [v100 algorithmThresholdNumber:14 inArrayForKey:v264 withMinValue:0.0 maxValue:v101 defaultValue:v102];
  int v286 = v103;

  int v104 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v105) = 20.0;
  LODWORD(v106) = 0.40625;
  [v104 algorithmThresholdNumber:15 inArrayForKey:v264 withMinValue:0.0 maxValue:v105 defaultValue:v106];
  int v287 = v107;

  int v108 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v109) = 1165623296;
  LODWORD(v110) = 1109393408;
  [v108 algorithmThresholdNumber:16 inArrayForKey:v264 withMinValue:0.0 maxValue:v109 defaultValue:v110];
  int v288 = v111;

  double v112 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v113) = 1165623296;
  LODWORD(v114) = 1120403456;
  [v112 algorithmThresholdNumber:17 inArrayForKey:v264 withMinValue:0.0 maxValue:v113 defaultValue:v114];
  int v289 = v115;

  double v116 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v117) = 1120403456;
  LODWORD(v118) = 1093533696;
  [v116 algorithmThresholdNumber:18 inArrayForKey:v264 withMinValue:0.0 maxValue:v117 defaultValue:v118];
  int v290 = v119;

  double v120 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v12CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 20.0;
  LODWORD(v122) = 0.40625;
  [v120 algorithmThresholdNumber:19 inArrayForKey:v264 withMinValue:0.0 maxValue:v121 defaultValue:v122];
  int v291 = v123;

  double v124 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v125) = 1061997773;
  LODWORD(v126) = 2.0;
  [v124 algorithmThresholdNumber:20 inArrayForKey:v264 withMinValue:0.0 maxValue:v126 defaultValue:v125];
  int v292 = v127;

  double v128 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v129) = *(_DWORD *)"fff?";
  LODWORD(v130) = 2.0;
  [v128 algorithmThresholdNumber:21 inArrayForKey:v264 withMinValue:0.0 maxValue:v130 defaultValue:v129];
  int v293 = v131;

  double v132 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v133) = 0.5;
  LODWORD(v134) = 3.0;
  LODWORD(v135) = 1193033728;
  [v132 algorithmThresholdNumber:29 inArrayForKey:v264 withMinValue:v133 maxValue:v135 defaultValue:v134];
  int v294 = v136;

  __int16 v137 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v138) = 1091829760;
  LODWORD(v139) = 0.5;
  LODWORD(v140) = 1193033728;
  [v137 algorithmThresholdNumber:30 inArrayForKey:v264 withMinValue:v139 maxValue:v140 defaultValue:v138];
  int v295 = v141;

  double v142 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v143) = 1120403456;
  LODWORD(v144) = 1112014848;
  LODWORD(v145) = 10.0;
  [v142 algorithmThresholdNumber:31 inArrayForKey:v264 withMinValue:v145 maxValue:v143 defaultValue:v144];
  int v296 = v146;

  __int16 v147 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v148) = 1120403456;
  LODWORD(v149) = 1145569280;
  LODWORD(v150) = 1133903872;
  [v147 algorithmThresholdNumber:32 inArrayForKey:v264 withMinValue:v148 maxValue:v149 defaultValue:v150];
  int v297 = v151;

  double v152 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v153) = 1008981770;
  LODWORD(v154) = 1045220557;
  LODWORD(v155) = 1034147594;
  [v152 algorithmThresholdNumber:33 inArrayForKey:v264 withMinValue:v153 maxValue:v154 defaultValue:v155];
  int v298 = v156;

  __int16 v157 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v158) = 1120403456;
  LODWORD(v159) = 1148846080;
  LODWORD(v160) = *(_DWORD *)"";
  [v157 algorithmThresholdNumber:34 inArrayForKey:v264 withMinValue:v158 maxValue:v160 defaultValue:v159];
  int v299 = v161;

  double v162 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v163) = 0.5;
  LODWORD(v164) = 3.0;
  LODWORD(v165) = 1193033728;
  [v162 algorithmThresholdNumber:37 inArrayForKey:v264 withMinValue:v163 maxValue:v165 defaultValue:v164];
  int v305 = v166;

  __int16 v167 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v168) = 2139095039;
  LODWORD(v169) = 0.5;
  LODWORD(v170) = 2139095039;
  [v167 algorithmThresholdNumber:38 inArrayForKey:v264 withMinValue:v169 maxValue:v168 defaultValue:v170];
  int v306 = v171;

  double v172 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v173) = 1120403456;
  LODWORD(v174) = 1112014848;
  LODWORD(v175) = 10.0;
  [v172 algorithmThresholdNumber:39 inArrayForKey:v264 withMinValue:v175 maxValue:v173 defaultValue:v174];
  int v307 = v176;

  __int16 v177 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v178) = 1120403456;
  LODWORD(v179) = 1145569280;
  LODWORD(v180) = 1133903872;
  [v177 algorithmThresholdNumber:40 inArrayForKey:v264 withMinValue:v178 maxValue:v179 defaultValue:v180];
  int v308 = v181;

  double v182 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v183) = 1008981770;
  LODWORD(v184) = 1045220557;
  LODWORD(v185) = 1034147594;
  [v182 algorithmThresholdNumber:41 inArrayForKey:v264 withMinValue:v183 maxValue:v184 defaultValue:v185];
  int v309 = v186;

  __int16 v187 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v188) = 1120403456;
  LODWORD(v189) = 1148846080;
  LODWORD(v190) = *(_DWORD *)"";
  [v187 algorithmThresholdNumber:42 inArrayForKey:v264 withMinValue:v188 maxValue:v190 defaultValue:v189];
  int v310 = v191;

  double v192 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v193) = 1120403456;
  LODWORD(v194) = 8.0;
  [v192 algorithmThresholdNumber:35 inArrayForKey:v264 withMinValue:0.0 maxValue:v193 defaultValue:v194];
  int v300 = v195;

  double v196 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v197) = 1120403456;
  LODWORD(v198) = 8.0;
  [v196 algorithmThresholdNumber:43 inArrayForKey:v264 withMinValue:0.0 maxValue:v197 defaultValue:v198];
  int v311 = v199;

  double v200 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v20CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 1145569280;
  LODWORD(v202) = 1125515264;
  [v200 algorithmThresholdNumber:36 inArrayForKey:v264 withMinValue:0.0 maxValue:v201 defaultValue:v202];
  int v301 = v203;

  double v204 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v205) = 1145569280;
  LODWORD(v206) = 1125515264;
  [v204 algorithmThresholdNumber:44 inArrayForKey:v264 withMinValue:0.0 maxValue:v205 defaultValue:v206];
  LODWORD(v312) = v207;

  double v208 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v209) = 1148846080;
  LODWORD(v210) = 1123024896;
  LODWORD(v21CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = -1138501878;
  [v208 algorithmThresholdNumber:45 inArrayForKey:v264 withMinValue:v211 maxValue:v209 defaultValue:v210];
  int v313 = v212;

  __int16 v213 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v214) = 1148846080;
  LODWORD(v215) = 1138819072;
  LODWORD(v216) = -1138501878;
  [v213 algorithmThresholdNumber:46 inArrayForKey:v264 withMinValue:v216 maxValue:v214 defaultValue:v215];
  int v314 = v217;

  double v218 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v219) = 1120403456;
  LODWORD(v220) = 7.0;
  LODWORD(v22CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = -1138501878;
  [v218 algorithmThresholdNumber:47 inArrayForKey:v264 withMinValue:v221 maxValue:v219 defaultValue:v220];
  int v315 = v222;

  __int16 v223 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v224) = 5.0;
  LODWORD(v225) = 1176256512;
  LODWORD(v226) = 1176255488;
  [v223 algorithmThresholdNumber:48 inArrayForKey:v264 withMinValue:v224 maxValue:v225 defaultValue:v226];
  int v267 = v227;

  double v228 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v229) = 1112014848;
  LODWORD(v230) = 1176256512;
  [v228 algorithmThresholdNumber:49 inArrayForKey:v264 withMinValue:0.0 maxValue:v230 defaultValue:v229];
  int v268 = v231;

  double v232 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v233) = 1108082688;
  LODWORD(v234) = 5.0;
  LODWORD(v235) = 1176256512;
  [v232 algorithmThresholdNumber:50 inArrayForKey:v264 withMinValue:v234 maxValue:v235 defaultValue:v233];
  int v302 = v236;

  v237 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v238) = 1112014848;
  LODWORD(v239) = 1176256512;
  [v237 algorithmThresholdNumber:51 inArrayForKey:v264 withMinValue:0.0 maxValue:v239 defaultValue:v238];
  int v303 = v240;

  unint64_t v241 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v242) = 5.0;
  LODWORD(v243) = 1176256512;
  LODWORD(v244) = 1176255488;
  [v241 algorithmThresholdNumber:52 inArrayForKey:v264 withMinValue:v242 maxValue:v243 defaultValue:v244];

  unint64_t v245 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v246) = 1112014848;
  LODWORD(v247) = 1176256512;
  [v245 algorithmThresholdNumber:53 inArrayForKey:v264 withMinValue:0.0 maxValue:v247 defaultValue:v246];

  v248 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v249) = 1108082688;
  LODWORD(v250) = 5.0;
  LODWORD(v25CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 1176256512;
  [v248 algorithmThresholdNumber:54 inArrayForKey:v264 withMinValue:v250 maxValue:v251 defaultValue:v249];

  uint64_t v252 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v253) = 1112014848;
  LODWORD(v254) = 1176256512;
  [v252 algorithmThresholdNumber:55 inArrayForKey:v264 withMinValue:0.0 maxValue:v254 defaultValue:v253];
  DWORD2(v274) = v255;

  uint64_t v256 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v257) = 5.0;
  LODWORD(v258) = 1176256512;
  LODWORD(v259) = 1176255488;
  [v256 algorithmThresholdNumber:56 inArrayForKey:v264 withMinValue:v257 maxValue:v258 defaultValue:v259];

  v260 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v26CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 1176256512;
  LODWORD(v262) = 1176255488;
  [v260 algorithmThresholdNumber:57 inArrayForKey:v264 withMinValue:0.0 maxValue:v261 defaultValue:v262];
  int v277 = v263;

  CLKappaEstimatesAlgRolloverCrash::setConfig((uint64_t)this, &v265);
}

void sub_100293E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLKappaEstimatesAlgRolloverCrash::setConfig(uint64_t a1, long long *a2)
{
  double v3 = *(_OWORD **)(a1 + 32);
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[3];
  v3[3] = a2[2];
  v3[4] = v6;
  v3[1] = v4;
  v3[2] = v5;
  long long v7 = a2[4];
  long long v8 = a2[5];
  long long v9 = a2[7];
  v3[7] = a2[6];
  v3[8] = v9;
  v3[5] = v7;
  void v3[6] = v8;
  long long v10 = a2[8];
  long long v11 = a2[9];
  long long v12 = a2[11];
  v3[11] = a2[10];
  v3[12] = v12;
  float v3[9] = v10;
  v3[10] = v11;
  long long v13 = a2[12];
  long long v14 = a2[13];
  long long v15 = a2[14];
  *(_OWORD *)((char *)v3 + 252) = *(long long *)((char *)a2 + 236);
  v3[14] = v14;
  v3[15] = v15;
  v3[13] = v13;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
  }
  int v16 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v17 = *(float **)(a1 + 32);
    double v18 = v17[4];
    double v19 = v17[5];
    double v20 = v17[7];
    double v21 = v17[6];
    double v22 = v17[8];
    int v96 = 134219008;
    double v97 = v18;
    __int16 v98 = 2048;
    double v99 = v19;
    __int16 v100 = 2048;
    double v101 = v20;
    __int16 v102 = 2048;
    double v103 = v21;
    __int16 v104 = 2048;
    double v105 = v22;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[RC] config-1,%f,config-2,%f,config-3,%f,config-4,%f,config-5,%f", (uint8_t *)&v96, 0x34u);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
  }
  double v23 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v24 = *(float **)(a1 + 32);
    double v25 = v24[12];
    double v26 = v24[13];
    double v27 = v24[15];
    double v28 = v24[14];
    double v29 = v24[16];
    int v96 = 134219008;
    double v97 = v25;
    __int16 v98 = 2048;
    double v99 = v26;
    __int16 v100 = 2048;
    double v101 = v27;
    __int16 v102 = 2048;
    double v103 = v28;
    __int16 v104 = 2048;
    double v105 = v29;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "[RC] config-6,%f,config-7,%f,config-8,%f,config-9,%f,config-10,%f", (uint8_t *)&v96, 0x34u);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
  }
  double v30 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v31 = *(float **)(a1 + 32);
    double v32 = v31[30];
    double v33 = v31[31];
    double v34 = v31[32];
    double v35 = v31[33];
    double v36 = v31[34];
    double v37 = v31[35];
    double v38 = v31[36];
    double v39 = v31[37];
    double v40 = v31[38];
    double v41 = v31[39];
    double v42 = v31[40];
    double v43 = v31[41];
    double v44 = v31[28];
    double v45 = v31[29];
    int v96 = 134221312;
    double v97 = v32;
    __int16 v98 = 2048;
    double v99 = v33;
    __int16 v100 = 2048;
    double v101 = v34;
    __int16 v102 = 2048;
    double v103 = v35;
    __int16 v104 = 2048;
    double v105 = v36;
    __int16 v106 = 2048;
    double v107 = v37;
    __int16 v108 = 2048;
    double v109 = v38;
    __int16 v110 = 2048;
    double v111 = v39;
    __int16 v112 = 2048;
    double v113 = v40;
    __int16 v114 = 2048;
    double v115 = v41;
    __int16 v116 = 2048;
    double v117 = v42;
    __int16 v118 = 2048;
    double v119 = v43;
    __int16 v120 = 2048;
    double v121 = v44;
    __int16 v122 = 2048;
    double v123 = v45;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "[RC] config-11,%f,config-12,%f,config-13,%f,config-14,%f,config-15,%f,config-16,%f,config-17,%f,config-18,%f,config-19,%f,config-20,%f,config-21,%f,config-22,%f,config-23,%f,config-24,%f", (uint8_t *)&v96, 0x8Eu);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
  }
  int v46 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v47 = *(float **)(a1 + 32);
    double v48 = v47[20];
    double v49 = v47[21];
    double v50 = v47[23];
    double v51 = v47[22];
    double v52 = v47[24];
    int v96 = 134219008;
    double v97 = v48;
    __int16 v98 = 2048;
    double v99 = v49;
    __int16 v100 = 2048;
    double v101 = v50;
    __int16 v102 = 2048;
    double v103 = v51;
    __int16 v104 = 2048;
    double v105 = v52;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "[RC] config-25,%f,config-26,%f,config-27,%f,config-28,%f,config-29,%f", (uint8_t *)&v96, 0x34u);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
  }
  double v53 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v54 = *(float **)(a1 + 32);
    double v55 = v54[42];
    double v56 = v54[43];
    double v57 = v54[44];
    double v58 = v54[45];
    double v59 = v54[46];
    double v60 = v54[47];
    double v61 = v54[48];
    double v62 = v54[49];
    int v96 = 134219776;
    double v97 = v55;
    __int16 v98 = 2048;
    double v99 = v56;
    __int16 v100 = 2048;
    double v101 = v57;
    __int16 v102 = 2048;
    double v103 = v58;
    __int16 v104 = 2048;
    double v105 = v59;
    __int16 v106 = 2048;
    double v107 = v60;
    __int16 v108 = 2048;
    double v109 = v61;
    __int16 v110 = 2048;
    double v111 = v62;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "[RC] config-30,%f,config-31,%f,config-32,%f,config-33,%f,config-34,%f,config-35,%f,config-36,%f,config-37,%f", (uint8_t *)&v96, 0x52u);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
  }
  double v63 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v64 = *(float **)(a1 + 32);
    double v65 = v64[53];
    double v66 = v64[54];
    double v67 = v64[55];
    double v68 = v64[56];
    double v69 = v64[57];
    double v70 = v64[58];
    double v71 = v64[59];
    double v72 = v64[60];
    int v96 = 134219776;
    double v97 = v65;
    __int16 v98 = 2048;
    double v99 = v66;
    __int16 v100 = 2048;
    double v101 = v67;
    __int16 v102 = 2048;
    double v103 = v68;
    __int16 v104 = 2048;
    double v105 = v69;
    __int16 v106 = 2048;
    double v107 = v70;
    __int16 v108 = 2048;
    double v109 = v71;
    __int16 v110 = 2048;
    double v111 = v72;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "[RC] config-38,%f,config-39,%f,config-40,%f,config-41,%f,config-42,%f,config-43,%f,config-44,%f,config-45,%f", (uint8_t *)&v96, 0x52u);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
  }
  double v73 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v74 = *(float **)(a1 + 32);
    double v75 = v74[64];
    double v76 = v74[65];
    double v77 = v74[66];
    int v96 = 134218496;
    double v97 = v75;
    __int16 v98 = 2048;
    double v99 = v76;
    __int16 v100 = 2048;
    double v101 = v77;
    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "[RC] config-46,%f,config-47,%f,config-48,%f", (uint8_t *)&v96, 0x20u);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
  }
  double v78 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v80 = *(float **)(a1 + 32);
    double v81 = v80[9];
    double v82 = v80[10];
    double v83 = v80[50];
    double v84 = v80[51];
    double v85 = v80[17];
    double v86 = v80[18];
    double v87 = v80[61];
    double v88 = v80[62];
    double v89 = v80[25];
    double v90 = v80[26];
    double v91 = v80[11];
    double v92 = v80[52];
    double v93 = v80[19];
    double v94 = v80[63];
    double v95 = v80[27];
    int v96 = 134221568;
    double v97 = v81;
    __int16 v98 = 2048;
    double v99 = v82;
    __int16 v100 = 2048;
    double v101 = v83;
    __int16 v102 = 2048;
    double v103 = v84;
    __int16 v104 = 2048;
    double v105 = v85;
    __int16 v106 = 2048;
    double v107 = v86;
    __int16 v108 = 2048;
    double v109 = v87;
    __int16 v110 = 2048;
    double v111 = v88;
    __int16 v112 = 2048;
    double v113 = v89;
    __int16 v114 = 2048;
    double v115 = v90;
    __int16 v116 = 2048;
    double v117 = v91;
    __int16 v118 = 2048;
    double v119 = v92;
    __int16 v120 = 2048;
    double v121 = v93;
    __int16 v122 = 2048;
    double v123 = v94;
    __int16 v124 = 2048;
    double v125 = v95;
    _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "[RC] config-49,%f,config-50,%f,config-51,%f,config-52,%f,config-53,%f,,config-54,%f,config-55,%f,config-56,%f,config-57,%f,config-58,%f,config-59,%f,config-60,%f,config-61,%f,config-62,%f,config-63,%f", (uint8_t *)&v96, 0x98u);
  }
  return result;
}

uint64_t CLKappaEstimatesAlgRolloverCrash::reset(CLKappaEstimatesAlgRolloverCrash *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

uint64_t CLKappaEstimatesAlgRolloverCrash::lowSensitivityDetector(CLKappaEstimatesAlgRolloverCrash *this, int a2)
{
  uint64_t v2 = (float *)*((void *)this + 4);
  double v3 = v2 + 53;
  long long v4 = v2 + 54;
  long long v5 = v2 + 55;
  long long v6 = v2 + 56;
  long long v7 = v2 + 57;
  long long v8 = v2 + 58;
  long long v9 = v2 + 59;
  long long v10 = v2 + 61;
  long long v11 = v2 + 62;
  long long v12 = v2 + 63;
  long long v13 = v2 + 42;
  long long v14 = v2 + 43;
  long long v15 = v2 + 44;
  int v16 = v2 + 45;
  double v17 = v2 + 46;
  double v18 = v2 + 47;
  double v19 = v2 + 48;
  double v20 = v2 + 51;
  double v21 = v2 + 52;
  if (a2)
  {
    long long v10 = v2 + 50;
    double v22 = v2 + 49;
  }
  else
  {
    double v22 = v2 + 60;
  }
  if (a2)
  {
    long long v9 = v19;
    long long v8 = v18;
    long long v7 = v17;
    long long v6 = v16;
    long long v5 = v15;
    long long v4 = v14;
    double v23 = v13;
  }
  else
  {
    double v23 = v3;
  }
  if (a2)
  {
    long long v11 = v20;
    double v24 = v21;
  }
  else
  {
    double v24 = v12;
  }
  float v25 = *v11;
  float v26 = *((float *)this + 13);
  float v27 = *((float *)this + 15);
  if (v26 >= *v6 && v27 >= *v5)
  {
    BOOL v29 = 1;
  }
  else
  {
    int v28 = *((unsigned __int8 *)this + 100);
    if (!*((unsigned char *)this + 100)) {
      goto LABEL_20;
    }
    BOOL v29 = v27 >= *v10 && *((float *)this + 26) >= v25;
  }
  int v28 = (a2 ^ 1) & v29;
  if (((a2 ^ 1) & 1) == 0 && v29) {
    int v28 = *((unsigned char *)this + 59) != 0;
  }
LABEL_20:
  if (*((float *)this + 16) < *v7) {
    int v28 = 0;
  }
  float v30 = *((float *)this + 12);
  if (v30 >= *v23)
  {
    if (v30 >= *v4) {
      int v31 = 2;
    }
    else {
      int v31 = 1;
    }
  }
  else
  {
    int v31 = 0;
  }
  if (*((unsigned char *)this + 80) && *((float *)this + 21) >= *v8)
  {
    float v35 = *v22;
    BOOL v32 = v26 >= *v22;
    if (v27 < *v9) {
      BOOL v32 = 0;
    }
    if (v26 < v35 || v27 < *v24)
    {
      unsigned int v34 = 0;
    }
    else
    {
      unsigned int v34 = *((unsigned __int8 *)this + 100);
      if (*((unsigned char *)this + 100)) {
        unsigned int v34 = *((float *)this + 26) >= v25;
      }
    }
    int v33 = 1;
  }
  else
  {
    BOOL v32 = 0;
    int v33 = 0;
    unsigned int v34 = 0;
  }
  if (v31 == 2) {
    return v28 | v32 | v34;
  }
  if (v31 == 1) {
    return v28 & v33;
  }
  return 0;
}

void CLKappaEstimatesAlgRolloverCrash::epochFinalize(CLKappaEstimatesAlgRolloverCrash *this, uint64_t a2)
{
  if (*((unsigned char *)this + 57))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
    }
    long long v4 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v49) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[RC] using audio thresholds", (uint8_t *)&v49, 2u);
    }
    long long v5 = (float *)*((void *)this + 4);
    long long v6 = v5 + 4;
    long long v7 = v5 + 5;
    long long v8 = v5 + 6;
    long long v9 = v5 + 7;
    long long v10 = v5 + 8;
    long long v11 = v5 + 9;
    long long v12 = v5 + 10;
    long long v13 = v5 + 11;
  }
  else
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
    }
    long long v14 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v49) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[RC] without audio thresholds", (uint8_t *)&v49, 2u);
    }
    long long v5 = (float *)*((void *)this + 4);
    long long v6 = v5 + 12;
    long long v7 = v5 + 13;
    long long v8 = v5 + 14;
    long long v9 = v5 + 15;
    long long v10 = v5 + 16;
    long long v11 = v5 + 17;
    long long v12 = v5 + 18;
    long long v13 = v5 + 19;
  }
  float v15 = *v12;
  float v16 = *((float *)this + 13);
  float v17 = *((float *)this + 15);
  BOOL v18 = v17 >= *v11;
  if (v16 < *v9 || v17 < *v8)
  {
    if (!*((unsigned char *)this + 100) || *((float *)this + 26) < v15) {
      BOOL v18 = 0;
    }
  }
  else
  {
    BOOL v18 = 1;
  }
  if (!*((unsigned char *)this + 80))
  {
    BOOL v21 = 0;
LABEL_31:
    BOOL v23 = 0;
    goto LABEL_32;
  }
  float v20 = v5[29];
  BOOL v21 = v16 >= v20 && v17 >= v5[28];
  BOOL v22 = v17 < *v13 || v16 < v20;
  if (v22 || !*((unsigned char *)this + 100)) {
    goto LABEL_31;
  }
  BOOL v23 = *((float *)this + 26) >= v15;
LABEL_32:
  float v24 = *v6;
  float v25 = *v7;
  float v26 = *v10;
  float v27 = CLSafetyAlgorithmsMath::computeSigmoidalThreshold(v5 + 30, *((float *)this + 12));
  float v28 = CLSafetyAlgorithmsMath::computeSigmoidalThreshold((float *)(*((void *)this + 4) + 136), *((float *)this + 12));
  float v29 = CLSafetyAlgorithmsMath::computeSigmoidalThreshold((float *)(*((void *)this + 4) + 152), *((float *)this + 12));
  BOOL v30 = *((float *)this + 17) >= v27 && *((float *)this + 18) >= v28 && *((float *)this + 19) >= v29;
  *((unsigned char *)this + 58) = v30;
  if (!*((unsigned char *)this + 56)) {
    BOOL v30 = 0;
  }
  int v31 = *((_DWORD *)this + 24);
  BOOL v33 = 0;
  if (v31 != -1)
  {
    BOOL v32 = (float *)*((void *)this + 4);
    if (v32[64] > (float)v31 && *((float *)this + 21) < v32[65] && *((float *)this + 23) < v32[66]) {
      BOOL v33 = 1;
    }
  }
  int v34 = v30 && !v33;
  *((unsigned char *)this + 59) = v34;
  if (!*((unsigned char *)this + 57)) {
    int v34 = 1;
  }
  int v35 = v18 & v34;
  if (*((float *)this + 16) >= v26) {
    int v36 = v35;
  }
  else {
    int v36 = 0;
  }
  float v37 = *((float *)this + 12);
  if (v37 >= v24)
  {
    if (v37 >= v25) {
      int v38 = 2;
    }
    else {
      int v38 = 1;
    }
  }
  else
  {
    int v38 = 0;
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
  }
  double v39 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_INFO))
  {
    int v40 = *((unsigned __int8 *)this + 108);
    int v41 = *((unsigned __int8 *)this + 111);
    int v42 = *((unsigned __int8 *)this + 109);
    int v43 = *((_DWORD *)this + 28);
    int v49 = 67109888;
    int v50 = v40;
    __int16 v51 = 1024;
    int v52 = v41;
    __int16 v53 = 1024;
    int v54 = v42;
    __int16 v55 = 1024;
    int v56 = v43;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "[RC] force %d %d %d re %d", (uint8_t *)&v49, 0x1Au);
  }
  if (*((unsigned char *)this + 111))
  {
    *((unsigned char *)this + 11CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
    int v36 = 1;
  }
  int v44 = *((_DWORD *)this + 28);
  if (v44 != -1)
  {
    *((_DWORD *)this + 28) = -1;
    int v38 = v44;
  }
  if (v38 == 2)
  {
    int v45 = v36 | v21 | v23;
  }
  else if (v38 == 1)
  {
    if (*((unsigned char *)this + 80)) {
      int v45 = v36;
    }
    else {
      int v45 = 0;
    }
  }
  else
  {
    int v45 = 0;
  }
  int v46 = CLKappaEstimatesAlgRolloverCrash::lowSensitivityDetector(this, *((unsigned __int8 *)this + 57));
  if (*((unsigned char *)this + 108))
  {
    *((unsigned char *)this + 108) = 0;
    int v45 = 1;
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3CC8);
  }
  double v47 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v49 = 67240704;
    int v50 = v45;
    __int16 v51 = 1026;
    int v52 = v38;
    __int16 v53 = 1026;
    int v54 = v46;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "[RC] de %{public}d re %{public}d low %{public}d", (uint8_t *)&v49, 0x14u);
  }
  uint64_t v48 = *((void *)this + 4);
  *(unsigned char *)(v48 + 272) = v45;
  *(void *)(v48 + 280) = a2;
  *(unsigned char *)(v48 + 273) = v46;
  *(void *)(v48 + 288) = *((void *)this + 6);
  *(_WORD *)(v48 + 296) = *((_WORD *)this + 28);
  *(void *)(v48 + 300) = *(void *)((char *)this + 60);
  *(unsigned char *)(v48 + 308) = *((unsigned char *)this + 80);
  *(_DWORD *)(v48 + 312) = v38;
  *(unsigned char *)(v48 + 316) = 0;
  *(void *)(v48 + 320) = *(void *)((char *)this + 68);
  *(_DWORD *)(v48 + 328) = *((_DWORD *)this + 19);
  *(float *)(v48 + 332) = v27;
  *(float *)(v48 + 336) = v28;
  *(float *)(v48 + 340) = v29;
  *(unsigned char *)(v48 + 344) = *((unsigned char *)this + 58);
  *(unsigned char *)(v48 + 345) = *((unsigned char *)this + 59);
  *(unsigned char *)(v48 + 346) = *((unsigned char *)this + 81);
  *(_DWORD *)(v48 + 348) = *((_DWORD *)this + 24);
  *(unsigned char *)(v48 + 352) = v33;
  *(_DWORD *)(v48 + 356) = *((_DWORD *)this + 21);
  *(_DWORD *)(v48 + 360) = *((_DWORD *)this + 23);
}

void virtual thunk to'CLKappaEstimatesAlgRolloverCrash::epochFinalize(CLKappaEstimatesAlgRolloverCrash *this, uint64_t a2)
{
}

float CLKappaEstimatesAlgRolloverCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 88);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 92) = result;
  return result;
}

{
  BOOL v2;
  float result;

  if (*(unsigned char *)(a1 + 109))
  {
    *(unsigned char *)(a1 + 109) = 0;
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = *(unsigned char *)(a2 + 52) != 0;
  }
  *(unsigned char *)(a1 + 80) = v2;
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 84) = result;
  return result;
}

{
  float result;
  int v3;

  float result = *(float *)(a2 + 20);
  double v3 = *(_DWORD *)(a2 + 28);
  *(float *)(a1 + 60) = result;
  *(_DWORD *)(a1 + 64) = v3;
  return result;
}

{
  float result;

  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 16);
  float result = *(float *)(a2 + 40);
  *(float *)(a1 + 104) = result;
  return result;
}

float virtual thunk to'CLKappaEstimatesAlgRolloverCrash::feedFeatures(void *a1, uint64_t a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 32);
  *((_DWORD *)v2 + 12) = *(_DWORD *)(a2 + 88);
  float result = *(float *)(a2 + 16);
  *((float *)v2 + 23) = result;
  return result;
}

{
  float *v2;
  BOOL v3;
  float result;

  uint64_t v2 = (float *)((char *)a1 + *(void *)(*a1 - 56));
  if (*((unsigned char *)v2 + 109))
  {
    *((unsigned char *)v2 + 109) = 0;
    double v3 = 1;
  }
  else
  {
    double v3 = *(unsigned char *)(a2 + 52) != 0;
  }
  *((unsigned char *)v2 + 80) = v3;
  float result = *(float *)(a2 + 32);
  v2[21] = result;
  return result;
}

{
  float *v2;
  float result;
  int v4;

  uint64_t v2 = (float *)((char *)a1 + *(void *)(*a1 - 112));
  float result = *(float *)(a2 + 20);
  long long v4 = *(_DWORD *)(a2 + 28);
  v2[15] = result;
  *((_DWORD *)v2 + 16) = v4;
  return result;
}

{
  char *v2;
  float result;

  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 96);
  *((_DWORD *)v2 + 13) = *(_DWORD *)(a2 + 12);
  v2[100] = *(unsigned char *)(a2 + 16);
  float result = *(float *)(a2 + 40);
  *((float *)v2 + 26) = result;
  return result;
}

uint64_t CLKappaEstimatesAlgRolloverCrash::feedFeatures(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 56) = *(unsigned char *)(a2 + 49);
  float v2 = *(float *)(a2 + 8);
  *(unsigned char *)(result + 57) = v2 > 0.0;
  *(void *)(result + 68) = *(void *)(a2 + 32);
  *(float *)(result + 76) = v2;
  return result;
}

void *virtual thunk to'CLKappaEstimatesAlgRolloverCrash::feedFeatures(void *result, uint64_t a2)
{
  float v2 = (char *)result + *(void *)(*result - 88);
  v2[56] = *(unsigned char *)(a2 + 49);
  float v3 = *(float *)(a2 + 8);
  v2[57] = v3 > 0.0;
  *(void *)(v2 + 68) = *(void *)(a2 + 32);
  *((float *)v2 + 19) = v3;
  return result;
}

uint64_t CLKappaEstimatesAlgRolloverCrash::feedFeatures(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 96) = *a2;
  return result;
}

void *virtual thunk to'CLKappaEstimatesAlgRolloverCrash::feedFeatures(void *result, _DWORD *a2)
{
  *(_DWORD *)((char *)result + *(void *)(*result - 144) + 96) = *a2;
  return result;
}

void sub_10029504C(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003B3180;
  *((void *)this + 15) = off_1003B3430;
  *((void *)this + 16) = off_1003B3570;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_1003B3650;
  float v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003B36A0);
}

void sub_10029513C(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003B3180;
  *((void *)this + 15) = off_1003B3430;
  *((void *)this + 16) = off_1003B3570;
  *((void *)this + 17) = off_1003B3650;
  float v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003B36A0);

  operator delete();
}

void sub_100295238(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B3180;
  *((void *)v1 + 15) = off_1003B3430;
  *((void *)v1 + 16) = off_1003B3570;
  *((void *)v1 + 17) = off_1003B3650;
  float v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B36A0);
}

void sub_100295310(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B3180;
  *((void *)v1 + 15) = off_1003B3430;
  *((void *)v1 + 16) = off_1003B3570;
  *((void *)v1 + 17) = off_1003B3650;
  float v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B36A0);

  operator delete();
}

void sub_1002953FC(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B3180;
  *((void *)v1 + 15) = off_1003B3430;
  *((void *)v1 + 16) = off_1003B3570;
  *((void *)v1 + 17) = off_1003B3650;
  float v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B36A0);
}

void sub_1002954D4(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B3180;
  *((void *)v1 + 15) = off_1003B3430;
  *((void *)v1 + 16) = off_1003B3570;
  *((void *)v1 + 17) = off_1003B3650;
  float v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B36A0);

  operator delete();
}

void sub_1002955E0(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B3180;
  *((void *)v1 + 15) = off_1003B3430;
  *((void *)v1 + 16) = off_1003B3570;
  *((void *)v1 + 17) = off_1003B3650;
  float v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B36A0);
}

void sub_1002956B8(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B3180;
  *((void *)v1 + 15) = off_1003B3430;
  *((void *)v1 + 16) = off_1003B3570;
  *((void *)v1 + 17) = off_1003B3650;
  float v2 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v2) {
    sub_10000BB9C(v2);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B36A0);

  operator delete();
}

void sub_1002957A4(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_1002957E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003B3CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100295808(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003B3CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10029585C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

double sub_100295884(uint64_t a1)
{
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)a1 = &off_1003A1C68;
  *(_OWORD *)(a1 + 16) = xmmword_10033E810;
  *(_OWORD *)(a1 + 32) = xmmword_10033E820;
  *(_OWORD *)(a1 + 48) = xmmword_10033E830;
  *(_OWORD *)(a1 + 64) = xmmword_10033E820;
  *(_OWORD *)(a1 + 80) = xmmword_10033E830;
  *(_OWORD *)(a1 + 96) = xmmword_10033E840;
  *(_OWORD *)(a1 + 112) = xmmword_10033E850;
  *(_OWORD *)(a1 + 128) = xmmword_10033E860;
  *(_OWORD *)(a1 + 144) = xmmword_10033E870;
  *(_OWORD *)(a1 + 160) = xmmword_10033E880;
  *(_OWORD *)(a1 + 176) = xmmword_10033E890;
  *(_OWORD *)(a1 + 192) = xmmword_10033E8A0;
  *(_OWORD *)(a1 + 208) = xmmword_10033E8B0;
  *(_OWORD *)(a1 + 224) = xmmword_10033E8C0;
  *(_OWORD *)(a1 + 240) = xmmword_10033E8D0;
  double result = 9.79983509e18;
  *(void *)(a1 + 256) = 0x43E1000042F00000;
  *(_DWORD *)(a1 + 264) = 1088421888;
  return result;
}

void CLKappaDeescalatorUsha::CLKappaDeescalatorUsha(CLKappaDeescalatorUsha *this)
{
  *(void *)this = off_10039C308;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((unsigned char *)this + 40) = 0;
  float v2 = (char *)sub_100007BC0((void *)this + 6, "none");
  *(void *)this = off_1003B3D48;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 84) = 0;
  *((void *)this + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0xB00000000;
  *(void *)((char *)this + 108) = 0xB00000000;
  *((void *)this + 20) = 0xB00000000;
  *((_DWORD *)this + 53) = 0;
  *((unsigned char *)this + 216) = 0;
  *(void *)((char *)this + 220) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((void *)this + 7) = 7;
    float v2 = (char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 7CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 7;
  }
  strcpy(v2, "de-USHA");
}

uint64_t CLKappaDeescalatorUsha::assertReady(CLKappaDeescalatorUsha *this, uint64_t a2, const char *a3)
{
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 84), (BOOL)"[de-USHA] missing config", a3);
  CLKappaDeescalator::raiseUnless(*((unsigned __int16 *)this + 45) == *((unsigned __int16 *)this + 55), (BOOL)"[de-USHA] buffer size mismatch", v4);
  BOOL v6 = *((unsigned __int16 *)this + 45) == *((unsigned __int16 *)this + 81);

  return CLKappaDeescalator::raiseUnless(v6, (BOOL)"[de-USHA] buffer size mismatch", v5);
}

uint64_t CLKappaDeescalatorUsha::prepareForNextEpoch(uint64_t this)
{
  *(_DWORD *)(this + 220) = 0;
  *(_DWORD *)(this + 224) = 0;
  return this;
}

uint64_t CLKappaDeescalatorUsha::setConfig(uint64_t result, uint64_t *a2)
{
  float v2 = (void *)(result + 72);
  uint64_t v3 = *a2;
  if (*(unsigned char *)(result + 84))
  {
    *(_WORD *)(result + 80) = *((_WORD *)a2 + 4);
    *float v2 = v3;
  }
  else
  {
    *(_DWORD *)(result + 80) = *((_DWORD *)a2 + 2);
    *float v2 = v3;
    *(unsigned char *)(result + 84) = 1;
  }
  return result;
}

void CLKappaDeescalatorUsha::resetConfiguration(CLKappaDeescalatorUsha *this)
{
  id v9 = +[CSPersistentConfiguration configBaseKey:"DeescalatorUSHAConfig" forFeatureMode:*((unsigned __int8 *)this + 32)];
  float v2 = +[CSPersistentConfiguration sharedConfiguration];
  [v2 floatThreshold:&CLKappaDeescalatorUsha::kConfigurationDefaults forKey:v9];
  int v4 = v3;
  [v2 floatThreshold:&unk_10033E9BC forKey:v9];
  int v6 = v5;
  unsigned __int8 v7 = [v2 intThreshold:&unk_10033E9CC forKey:v9];
  unsigned __int8 v8 = [v2 intThreshold:&unk_10033E9DC forKey:v9];
  if (!*((unsigned char *)this + 84)) {
    *((unsigned char *)this + 84) = 1;
  }
  *((_DWORD *)this + 18) = v4;
  *((_DWORD *)this + 19) = v6;
  *((unsigned char *)this + 80) = v7;
  *((unsigned char *)this + 8CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v8;
  *((unsigned char *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceUsha");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceUsha");
}

void sub_100295C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLKappaDeescalatorUsha::log(CLKappaDeescalatorUsha *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 84)) {
    sub_100007D1C();
  }
  uint64_t v4 = *(void *)((char *)this + 220);
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B3DC8);
  }
  int v5 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *((_DWORD *)this + 6);
    int v8 = *((unsigned __int8 *)this + 32);
    double v9 = *((float *)this + 18);
    double v10 = *((float *)this + 19);
    int v11 = *((unsigned __int8 *)this + 80);
    int v12 = *((unsigned __int8 *)this + 81);
    int v13 = 134351104;
    uint64_t v14 = a2;
    __int16 v15 = 1026;
    int v16 = v7;
    __int16 v17 = 1026;
    int v18 = v8;
    __int16 v19 = 2050;
    double v20 = v9;
    __int16 v21 = 2050;
    double v22 = v10;
    __int16 v23 = 1026;
    int v24 = v11;
    __int16 v25 = 1026;
    int v26 = v12;
    __int16 v27 = 1026;
    int v28 = v4;
    __int16 v29 = 1026;
    int v30 = HIDWORD(v4);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[de-USHA] summary,A,%{public}llu,B,%{public}u,mode,%{public}u,config-1,%{public}f,config-2,%{public}f,config-3,%{public}u,config-4,%{public}u,debug-1a,%{public}d,debug-1b,%{public}d", (uint8_t *)&v13, 0x44u);
  }
  return result;
}

unsigned __int16 *CLKappaDeescalatorUsha::updateWithIsAudioRollover(uint64_t a1, uint64_t a2)
{
  double result = sub_100281F5C((unsigned __int16 *)(a1 + 88), (unsigned char *)(a2 + 49));
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 49);
  return result;
}

unsigned __int16 *CLKappaDeescalatorUsha::updateWithCumulativeRotation(uint64_t a1, uint64_t a2)
{
  return sub_10003D6D8((unsigned __int16 *)(a1 + 108), (_DWORD *)(a2 + 12));
}

float CLKappaDeescalatorUsha::updateWithPeakPressure(uint64_t a1, uint64_t a2)
{
  sub_10003D6D8((unsigned __int16 *)(a1 + 160), (_DWORD *)(a2 + 32));
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 212) = result;
  return result;
}

uint64_t CLKappaDeescalatorUsha::getNumUshaFPEpoch(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (!a2[1]) {
    return 0;
  }
  unint64_t v6 = 0;
  LODWORD(v7) = 0;
  do
  {
    int v8 = (float *)sub_10003D860(a3, v6);
    if (!*(unsigned char *)(a1 + 84)) {
      sub_100007D1C();
    }
    float v9 = *v8;
    float v10 = *(float *)(a1 + 72);
    int v11 = *(unsigned __int8 *)sub_10002C20C(a2, v6);
    if (v9 > v10 || v11 == 0) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = (v7 + 1);
    }
    ++v6;
  }
  while (v6 < a2[1]);
  return v7;
}

uint64_t CLKappaDeescalatorUsha::getNumUshaCPEpoch(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  if (!a2[1]) {
    return 0;
  }
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  do
  {
    float v10 = (float *)sub_10003D860(a3, v8);
    if (!*(unsigned char *)(a1 + 84)
      || (float v11 = *v10, v12 = *(float *)(a1 + 72), v13 = (float *)sub_10003D860(a4, v8), !*(unsigned char *)(a1 + 84)))
    {
      sub_100007D1C();
    }
    float v14 = *v13;
    float v15 = *(float *)(a1 + 76);
    if (*(unsigned char *)sub_10002C20C(a2, v8))
    {
      BOOL v16 = v11 > v12;
      if (v14 > v15) {
        BOOL v16 = 1;
      }
      uint64_t v9 = v9 + v16;
    }
    ++v8;
  }
  while (v8 < a2[1]);
  return v9;
}

uint64_t CLKappaDeescalatorUsha::onEvaluateAtMinHoldDuration(CLKappaDeescalatorUsha *this)
{
  float v2 = (unsigned __int16 *)((char *)this + 88);
  int v3 = (unsigned __int16 *)((char *)this + 108);
  uint64_t v4 = (unsigned __int16 *)((char *)this + 160);
  *((_DWORD *)this + 55) = CLKappaDeescalatorUsha::getNumUshaFPEpoch((uint64_t)this, (unsigned __int16 *)this + 44, (unsigned __int16 *)this + 54);
  int NumUshaCPEpoch = CLKappaDeescalatorUsha::getNumUshaCPEpoch((uint64_t)this, v2, v3, v4);
  *((_DWORD *)this + 56) = NumUshaCPEpoch;
  if (!*((unsigned char *)this + 84)) {
    sub_100007D1C();
  }
  LOBYTE(v6) = *((unsigned char *)this + 80);
  float v7 = (float)v6;
  if ((float)*((int *)this + 55) < v7) {
    return 1;
  }
  LOBYTE(v7) = *((unsigned char *)this + 81);
  if ((float)NumUshaCPEpoch >= (float)LODWORD(v7)) {
    return 1;
  }
  else {
    return 4;
  }
}

_DWORD *CLKappaDeescalatorUsha::onPreviousEpochMadeDecision(_DWORD *this)
{
  this[22] = 0;
  this[27] = 0;
  this[40] = 0;
  return this;
}

void sub_10029607C(void **this)
{
  *this = off_1003B3D48;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_10029609C(void **a1)
{
  *a1 = off_1003B3D48;
  CLKappaDeescalator::~CLKappaDeescalator(a1);

  operator delete();
}

void sub_1002960F0(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_1002961A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100296228(id a1)
{
  qword_1003DD708 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CSAnomalyEventServiceSilo"];

  _objc_release_x1();
}

void sub_100296468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002965A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 40));

  _Unwind_Resume(a1);
}

void sub_1002965C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_error)
  {
    int v5 = xpc_copy_description(v3);
    if (qword_1003DB7F0 != -1) {
      dispatch_once(&qword_1003DB7F0, &stru_1003B3E38);
    }
    unsigned int v6 = qword_1003DB7F8;
    if (!os_log_type_enabled((os_log_t)qword_1003DB7F8, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_12;
    }
    int v13 = 136315138;
    uint64_t v14 = (uint64_t)v5;
    float v7 = "Connection received error: %s";
    goto LABEL_11;
  }
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_dictionary)
  {
    int v5 = xpc_copy_description(v3);
    if (qword_1003DB7F0 != -1) {
      dispatch_once(&qword_1003DB7F0, &stru_1003B3E38);
    }
    unsigned int v6 = qword_1003DB7F8;
    if (!os_log_type_enabled((os_log_t)qword_1003DB7F8, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_12;
    }
    int v13 = 136315138;
    uint64_t v14 = (uint64_t)v5;
    float v7 = "Connection received object: %s";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, v7, (uint8_t *)&v13, 0xCu);
LABEL_12:
    free(v5);
    goto LABEL_22;
  }
  if (qword_1003DB7F0 != -1) {
    dispatch_once(&qword_1003DB7F0, &stru_1003B3E38);
  }
  unint64_t v8 = qword_1003DB7F8;
  if (os_log_type_enabled((os_log_t)qword_1003DB7F8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v13) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "received xpc trigger connection", (uint8_t *)&v13, 2u);
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(v3, "seq");
  if (qword_1003DB7F0 != -1) {
    dispatch_once(&qword_1003DB7F0, &stru_1003B3E38);
  }
  float v10 = qword_1003DB7F8;
  if (os_log_type_enabled((os_log_t)qword_1003DB7F8, OS_LOG_TYPE_DEBUG))
  {
    int v13 = 134217984;
    uint64_t v14 = uint64;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Connection received seq: %llu", (uint8_t *)&v13, 0xCu);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(v3);
  uint64_t v12 = dword_1003DD718++;
  xpc_dictionary_set_uint64(reply, "seq", v12);
  [WeakRetained[17] addObject:reply];

LABEL_22:
}

void sub_100296898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100296A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100296AB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_1003DB7F0 != -1) {
    dispatch_once(&qword_1003DB7F0, &stru_1003B3E38);
  }
  int v5 = qword_1003DB7F8;
  if (os_log_type_enabled((os_log_t)qword_1003DB7F8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "received xpc trigger event", (uint8_t *)&v8, 2u);
  }
  [WeakRetained[13] createPowerAssertion:@"AOP Trigger"];
  ++*((_DWORD *)WeakRetained + 24);
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_connection)
  {
    [WeakRetained[18] addObject:v3];
    [WeakRetained handleConnection:v3];
  }
  else
  {
    unsigned int v6 = xpc_copy_description(v3);
    if (qword_1003DB7F0 != -1) {
      dispatch_once(&qword_1003DB7F0, &stru_1003B3E38);
    }
    float v7 = qword_1003DB7F8;
    if (os_log_type_enabled((os_log_t)qword_1003DB7F8, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136315138;
      uint64_t v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "received object: %s", (uint8_t *)&v8, 0xCu);
    }
    free(v6);
  }
}

void sub_100296C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002971A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002971E4()
{
  operator delete();
}

id sub_100297210()
{
  if (qword_1003DB680 != -1) {
    dispatch_once(&qword_1003DB680, &stru_1003B3E58);
  }
  uint64_t v0 = (void *)qword_1003DB688;

  return v0;
}

void sub_100297360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002973D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100297554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10029781C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002982DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002985A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100298834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100298AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100299048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002996D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100299928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10029A164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    operator delete();
  }

  _Unwind_Resume(a1);
}

void sub_10029A478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10029A7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10029AAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10029AC80(id a1)
{
  qword_1003DB7F8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "XPC");

  _objc_release_x1();
}

void sub_10029ACC4(id a1)
{
  qword_1003DB688 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "AnomalyEvent");

  _objc_release_x1();
}

BOOL sub_10029AD08(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_INFO);
}

BOOL sub_10029AD20(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_FAULT);
}

uint64_t sub_10029AD38()
{
  uint64_t v1 = sub_100297210();
  if (sub_10029AD20(v1))
  {
    sub_10000BDD8();
    sub_10002CCEC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"UUID cannot be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v22, v23, v24, v25, v26);
  }

  int v8 = sub_100297210();
  if (os_signpost_enabled(v8))
  {
    sub_10000BDD8();
    sub_10002CCA0((void *)&_mh_execute_header, v9, v10, v11, "UUID cannot be nil", "{\"msg%{public}.0s\":\"UUID cannot be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v22, v23, v24, v25, v26);
  }

  uint64_t v14 = sub_100297210();
  if (sub_10029AD08(v14))
  {
    sub_10000BDD8();
    sub_10002CCCC((void *)&_mh_execute_header, v15, v16, "{\"msg%{public}.0s\":\"UUID cannot be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v22, v23, v24, v25, v26);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t sub_10029AE64()
{
  uint64_t v1 = sub_100297210();
  if (sub_10029AD20(v1))
  {
    sub_10000BDD8();
    sub_10002CCEC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"invalid mode\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v23, v24, v25, v26, v27);
  }

  int v8 = sub_100297210();
  if (os_signpost_enabled(v8))
  {
    sub_10000BDD8();
    sub_10002CCA0((void *)&_mh_execute_header, v9, v10, v11, "invalid mode", "{\"msg%{public}.0s\":\"invalid mode\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v23, v24, v25, v26, v27);
  }

  uint64_t v14 = sub_100297210();
  if (sub_10029AD08(v14))
  {
    sub_10000BDD8();
    sub_10002CCCC((void *)&_mh_execute_header, v15, v16, "{\"msg%{public}.0s\":\"invalid mode\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v23, v24, v25, v26, v27);
  }

  uint64_t v21 = abort_report_np();
  return sub_10029AF88(v21);
}

uint64_t sub_10029AF88()
{
  uint64_t v1 = sub_100297210();
  if (sub_10029AD20(v1))
  {
    sub_10000BDD8();
    sub_10002CCEC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"invalid mode\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v23, v24, v25, v26, v27);
  }

  int v8 = sub_100297210();
  if (os_signpost_enabled(v8))
  {
    sub_10000BDD8();
    sub_10002CCA0((void *)&_mh_execute_header, v9, v10, v11, "invalid mode", "{\"msg%{public}.0s\":\"invalid mode\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v23, v24, v25, v26, v27);
  }

  uint64_t v14 = sub_100297210();
  if (sub_10029AD08(v14))
  {
    sub_10000BDD8();
    sub_10002CCCC((void *)&_mh_execute_header, v15, v16, "{\"msg%{public}.0s\":\"invalid mode\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v23, v24, v25, v26, v27);
  }

  uint64_t v21 = abort_report_np();
  return sub_10029B0AC(v21);
}

uint64_t sub_10029B0AC()
{
  uint64_t v1 = sub_100297210();
  if (sub_10029AD20(v1))
  {
    sub_10000BDD8();
    sub_10002CCEC((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"No _aop to tell about companion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v25, v26, v27, v28, v29);
  }

  int v8 = sub_100297210();
  if (os_signpost_enabled(v8))
  {
    sub_10000BDD8();
    sub_10002CCA0((void *)&_mh_execute_header, v9, v10, v11, "No _aop to tell about companion", "{\"msg%{public}.0s\":\"No _aop to tell about companion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v25, v26, v27, v28, v29);
  }

  uint64_t v14 = sub_100297210();
  if (sub_10029AD08(v14))
  {
    sub_10000BDD8();
    sub_10002CCCC((void *)&_mh_execute_header, v15, v16, "{\"msg%{public}.0s\":\"No _aop to tell about companion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v25, v26, v27, v28, v29);
  }

  uint64_t v21 = (CSAOPSvc::Idle *)abort_report_np();
  return CSAOPSvc::Idle::trigger(v21, v22, v23);
}

CSAOPSvc::Idle *CSAOPSvc::Idle::trigger(CSAOPSvc::Idle *this, uint64_t a2, const void *a3)
{
  if (a2 != 1) {
    return 0;
  }
  int v3 = this;
  if ((*((unsigned char *)objc_msgSend(*(id *)(*((void *)this + 6) + 40), "c_struct", a3) + 1) & 0x10) == 0)
  {
    if (!*((unsigned char *)objc_msgSend(*(id *)(*((void *)v3 + 6) + 40), "c_struct") + 1)
      && (*((unsigned char *)objc_msgSend(*(id *)(*((void *)v3 + 6) + 40), "c_struct") + 46) & 0x10) != 0)
    {
      if ((*((unsigned char *)objc_msgSend(*(id *)(*((void *)v3 + 6) + 40), "c_struct") + 93) & 2) == 0)
      {
        if (qword_1003DB6B0 != -1) {
          dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
        }
        int v4 = qword_1003DB6B8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
        {
          __int16 v9 = 0;
          int v5 = "Ignoring post riding marty trigger";
          int v6 = (uint8_t *)&v9;
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, v5, v6, 2u);
          return v3;
        }
        return v3;
      }
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      int v7 = qword_1003DB6B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Letting post riding marty trigger since it is remotely armed", v10, 2u);
      }
    }
    [*(id *)(*((void *)v3 + 6) + 1088) addObject:*(void *)(*((void *)v3 + 6) + 40)];
    return (CSAOPSvc::Idle *)(*((void *)v3 + 6) + 120);
  }
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  int v4 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    int v5 = "ignore post driving kappa trigger";
    int v6 = buf;
    goto LABEL_15;
  }
  return v3;
}

id sub_10029B398()
{
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  uint64_t v0 = (void *)qword_1003DB6B8;

  return v0;
}

void CSAOPSvc::Idle::action(CSAOPSvc::Idle *this, uint64_t a2, const void *a3)
{
  if (a2 == 1)
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    int v4 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(*((void *)this + 6) + 40);
      int v21 = 138412290;
      *(void *)unint64_t v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "triggered data %@", (uint8_t *)&v21, 0xCu);
    }
    uint64_t v6 = *((void *)this + 6);
    int v7 = *(void **)(v6 + 1032);
    *(void *)(v6 + 1032) = 0;

    double v8 = CSAOPSvc::resetTriggerSessionStats(*((CSAOPSvc **)this + 6));
    uint64_t v9 = *((void *)this + 6);
    *(unsigned char *)(v9 + 1074) = 0;
    int v10 = *((unsigned __int8 *)[*(id *)(v9 + 40) c_struct:v8] + 1);
    if (*((unsigned char *)objc_msgSend(*(id *)(*((void *)this + 6) + 40), "c_struct") + 1)) {
      BOOL v11 = (((*(unsigned char *)(*((void *)this + 6) + 40)) & 0x10) == 0);
    }
    else {
      BOOL v11 = 0;
    }
    if (*((unsigned char *)objc_msgSend(*(id *)(*((void *)this + 6) + 40), "c_struct") + 46)) {
      BOOL v12 = (((*(unsigned char *)(*((id *)(*((void *)this + 6) + 40)) + 46)) & 0x10) == 0);
    }
    else {
      BOOL v12 = 0;
    }
    if (!*((unsigned char *)objc_msgSend(*(id *)(*((void *)this + 6) + 40), "c_struct") + 1)
      && (*((unsigned char *)objc_msgSend(*(id *)(*((void *)this + 6) + 40), "c_struct") + 46) & 0x10) != 0)
    {
      int v13 = (((*((unsigned __int8 *)objc_msgSend(*(id *)(*((void *)this + 6) + 40), "c_struct") + 93) >> 1) & 1) ? 1 : 0);
    }
    else
    {
      int v13 = 0;
    }
    int v14 = *((unsigned __int8 *)[*(id *)(*((void *)this + 6) + 40) c_struct] + 46);
    int v15 = *((unsigned __int8 *)[*(id *)(*((void *)this + 6) + 40) c_struct] + 64);
    if (v10 | v14) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v15 == 0;
    }
    char v17 = !v16;
    *(unsigned char *)(*((void *)this + 6) + 1056) = v17;
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    int v18 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
    {
      int v21 = 67109632;
      *(_DWORD *)unint64_t v22 = v11;
      *(_WORD *)&v22[4] = 1024;
      *(_DWORD *)&v22[6] = v12;
      __int16 v23 = 1024;
      int v24 = v15;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "isKappaNotPostDriving %d isMartyNotPostRiding %d isIgneous %d", (uint8_t *)&v21, 0x14u);
    }
    if (v11 || v12 || v15) {
      goto LABEL_32;
    }
    if (v13)
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      int v19 = qword_1003DB6B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Letting post riding marty action since it is remotely armed", (uint8_t *)&v21, 2u);
      }
LABEL_32:
      [*(id *)(*((void *)this + 6) + 16) triggered:*(void *)(*((void *)this + 6) + 40)];
      return;
    }
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    int v20 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "ignoring post driving kappa trigger in action", (uint8_t *)&v21, 2u);
    }
  }
}

double CSAOPSvc::resetTriggerSessionStats(CSAOPSvc *this)
{
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  int v2 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)double v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "trigger session stats (reset)", v8, 2u);
  }
  *((void *)this + 115) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 232) = 0;
  *((unsigned char *)this + 932) = 0;
  *((void *)this + 118) = 0;
  *((void *)this + 117) = 0;
  *((void *)this + 119) = 0xBF80000000000000;
  __asm { FMOV            V0.2S, #-1.0 }
  *((double *)this + 120) = result;
  *((void *)this + 12CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0xBFF0000000000000;
  *((_DWORD *)this + 244) = -1;
  *((unsigned char *)this + 980) = 0;
  *((double *)this + 123) = result;
  *((_DWORD *)this + 248) = -1082130432;
  *((_WORD *)this + 498) = 0;
  *((unsigned char *)this + 998) = 0;
  return result;
}

CSAOPSvc::Reading *CSAOPSvc::Reading::Reading(CSAOPSvc::Reading *this, CSAOPSvc *a2, CLSilo *a3)
{
  uint64_t v5 = a3;
  CSHSM::State::State(this, "reading");
  *(void *)this = &off_1003B3E88;
  *((void *)this + 6) = a2;
  uint64_t v6 = v5;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = v6;
  id v7 = [(CLSilo *)v6 newTimer];
  *((void *)this + 13) = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10029B978;
  v9[3] = &unk_1003AA558;
  v9[4] = this;
  [v7 setHandler:v9];

  return this;
}

void sub_10029B90C(_Unwind_Exception *a1)
{
  *(void *)uint64_t v2 = &off_1003BB190;
  int v4 = *(void **)(v2 + 16);
  if (v4)
  {
    *(void *)(v2 + 24) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void sub_10029B978(uint64_t a1)
{
}

uint64_t CSAOPSvc::Reading::getMaxCollectionTimeInSecondsConfig(CSAOPSvc::Reading *this)
{
  uint64_t v1 = +[CSPersistentConfiguration sharedConfiguration];
  uint64_t v2 = [v1 objectForKey:@"CSCollectionTimeInSeconds"];
  if (v2)
  {
    uint64_t v3 = (uint64_t)[v1 integerForKey:@"CSCollectionTimeInSeconds"];
    if (v3 >= 600) {
      uint64_t v4 = 600;
    }
    else {
      uint64_t v4 = v3;
    }
  }
  else
  {
    uint64_t v4 = 85;
  }

  return v4;
}

void sub_10029BA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::Reading::entry(CSAOPSvc::Reading *this, unint64_t a2, const void *a3)
{
  *((_WORD *)this + 40) = 0;
  *(void *)((char *)this + 84) = 0x25800000000;
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  uint64_t v4 = qword_1003DB6B8;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG);
  if (v5)
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v41 = 660000000;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "kExpirationDuration %llu", buf, 0xCu);
  }
  int MaxCollectionTimeInSecondsConfig = CSAOPSvc::Reading::getMaxCollectionTimeInSecondsConfig((CSAOPSvc::Reading *)v5);
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  id v7 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v4CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = MaxCollectionTimeInSecondsConfig;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "configuring collection to be %d seconds", buf, 8u);
  }
  *((_DWORD *)this + 23) = MaxCollectionTimeInSecondsConfig + 2;
  uint64_t v8 = +[CSPower sharedInstance];
  uint64_t v9 = *((void *)this + 6);
  int v10 = *(void **)(v9 + 1064);
  *(void *)(v9 + 1064) = v8;

  [*(id *)(*((void *)this + 6) + 1064) createPowerAssertion:@"AOP Trigger"];
  [*(id *)(*((void *)this + 6) + 1064) powerlogActivity:5 state:CFAbsoluteTimeGetCurrent()];
  *(_WORD *)(*((void *)this + 6) + 1075) = 0;
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  BOOL v11 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(*((void *)this + 6) + 32);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v41 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "opening fastpaths device %p", buf, 0xCu);
  }
  CSAOPSvc::openFastpaths(*((void **)this + 6), *(void **)(*((void *)this + 6) + 32));
  int v13 = +[CSPermissions sharedInstance];
  *((unsigned char *)this + 96) = [v13 isAuthorizedToCollectData];

  int v14 = +[CSPlatformInfo sharedInstance];
  unsigned int v15 = [v14 isInternalInstall];

  if (v15) {
    *((unsigned char *)this + 96) = (*((unsigned __int8 *)this + 96) | *((unsigned __int8 *)[*(id *)(*((void *)this + 6)+ 40) c_struct] + 46)) != 0;
  }
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  BOOL v16 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    int v17 = *((unsigned __int8 *)this + 96);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v4CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "_authorizedToCollectData %d", buf, 8u);
  }
  CSAOPSvc::resetFastpaths(*((CSAOPSvc **)this + 6));
  [*(id *)(*((void *)this + 6) + 1096) reset];
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  int v18 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Scheduling fastpath periodic check", buf, 2u);
  }
  [*((id *)this + 13) setNextFireDelay:0.0 interval:1.0];
  id v19 = objc_alloc((Class)BMBiomeScheduler);
  int v20 = [*((id *)this + 7) queue];
  id v21 = [v19 initWithIdentifier:@"com.apple.anomalydetectiond.AppLaunch" targetQueue:v20 waking:0];

  unint64_t v22 = +[BMStreams appLaunch];
  __int16 v23 = [v22 publisher];
  int v24 = [v23 subscribeOn:v21];
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_10029CBB8;
  v39[3] = &unk_1003B3F00;
  v39[4] = this;
  uint64_t v25 = [v24 sinkWithCompletion:&stru_1003B3EE0 receiveInput:v39];
  uint64_t v26 = (void *)*((void *)this + 8);
  *((void *)this + 8) = v25;

  id v27 = objc_alloc((Class)BMBiomeScheduler);
  uint64_t v28 = [*((id *)this + 7) queue];
  id v29 = [v27 initWithIdentifier:@"com.apple.anomalydetectiond.Unlock" targetQueue:v28 waking:0];

  int v30 = BiomeLibrary();
  int v31 = [v30 Device];
  BOOL v32 = [v31 ScreenLocked];
  BOOL v33 = [v32 DSLPublisher];
  int v34 = [v33 filterWithKeyPath:@"eventBody.starting" value:&__kCFBooleanFalse];
  int v35 = [v34 subscribeOn:v29];
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_10029CDC0;
  v38[3] = &unk_1003B3F00;
  v38[4] = this;
  uint64_t v36 = [v35 sinkWithCompletion:&stru_1003B3F20 receiveInput:v38];
  float v37 = (void *)*((void *)this + 9);
  *((void *)this + 9) = v36;
}

void sub_10029BFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::openFastpaths(void *a1, void *a2)
{
  kern_return_t ParentEntry;
  NSObject *v6;
  const char *v7;
  kern_return_t ChildIterator;
  io_object_t v9;
  CFStringRef v10;
  kern_return_t ChildEntry;
  NSObject *v12;
  CFStringRef v13;
  kern_return_t Name;
  uint64_t v15;
  uint8_t *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  uint32_t v20;
  uint64_t v21;
  int v22;
  size_t v23;
  unsigned char *v24;
  BOOL v25;
  int v26;
  CSFastpathGlue *v27;
  int v28;
  size_t v29;
  unsigned char *v30;
  BOOL v31;
  int v32;
  size_t v33;
  unsigned char *v34;
  BOOL v35;
  int v36;
  size_t v37;
  unsigned char *v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  NSObject *v52;
  io_registry_entry_t child;
  io_registry_entry_t parent[2];
  unsigned char __p[18];
  unsigned __int8 v56;
  uint8_t buf[16];
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;

  id v3 = a2;
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  *(void *)parent = 0;
  uint64_t v4 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "opening fastpaths", buf, 2u);
  }
  ParentEntry = IORegistryEntryGetParentEntry((io_registry_entry_t)[v3 service], "IOService", &parent[1]);
  if (ParentEntry)
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    uint64_t v6 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = ParentEntry;
      id v7 = "IORegistryEntryGetParentEntry failed 0x%0x";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, v7, buf, 8u);
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  ChildIterator = IORegistryEntryGetChildIterator(parent[1], "IOService", parent);
  if (!ChildIterator)
  {
    uint64_t v9 = IOIteratorNext(parent[0]);
    if (!v9) {
      goto LABEL_16;
    }
    while (1)
    {
      int v10 = IOObjectCopyClass(v9);
      if (CFEqual(@"AppleSPUFastpathInterface", v10))
      {
        CFRelease(v10);
        child = 0;
        ChildEntry = IORegistryEntryGetChildEntry(v9, "IOService", &child);
        if (!ChildEntry)
        {
          int v13 = IOObjectCopyClass(child);
          if (!CFEqual(v13, @"AppleSPUFastpathDriver"))
          {
            if (qword_1003DB6B0 != -1) {
              dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
            }
            id v21 = qword_1003DB6B8;
            if (!os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT)) {
              goto LABEL_134;
            }
            *(_WORD *)long long buf = 0;
            BOOL v16 = buf;
            int v17 = v21;
            int v18 = OS_LOG_TYPE_FAULT;
            id v19 = "unexpected child class";
            int v20 = 2;
            goto LABEL_133;
          }
          double v63 = 0u;
          int v64 = 0u;
          double v61 = 0u;
          double v62 = 0u;
          double v59 = 0u;
          double v60 = 0u;
          *(_OWORD *)long long buf = 0u;
          double v58 = 0u;
          Name = IORegistryEntryGetName(child, (char *)buf);
          if (Name)
          {
            if (qword_1003DB6B0 != -1) {
              dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
            }
            unsigned int v15 = qword_1003DB6B8;
            if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)__p = 67109120;
              *(_DWORD *)&__p[4] = Name;
              BOOL v16 = __p;
              int v17 = v15;
              int v18 = OS_LOG_TYPE_FAULT;
              id v19 = "IORegistryEntryGetName failed 0x%0x";
              int v20 = 8;
              goto LABEL_133;
            }
LABEL_134:
            if (v13) {
              CFRelease(v13);
            }
            IOObjectRelease(child);
            goto LABEL_137;
          }
          sub_100007BC0(__p, "Acc800Fp");
          unint64_t v22 = (char)v56;
          if ((v56 & 0x80u) == 0) {
            __int16 v23 = v56;
          }
          else {
            __int16 v23 = *(void *)&__p[8];
          }
          if (v23 == strlen((const char *)buf))
          {
            if ((v56 & 0x80u) == 0) {
              int v24 = __p;
            }
            else {
              int v24 = *(unsigned char **)__p;
            }
            uint64_t v25 = memcmp(v24, buf, v23) == 0;
            if (v22 < 0) {
LABEL_45:
            }
              operator delete(*(void **)__p);
          }
          else
          {
            uint64_t v25 = 0;
            if ((char)v56 < 0) {
              goto LABEL_45;
            }
          }
          if (v25)
          {
            uint64_t v26 = 0;
            id v27 = (CSFastpathGlue *)(a1 + 37);
LABEL_123:
            if (*((void *)v27 + 2))
            {
              if (qword_1003DB6B0 != -1) {
                dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
              }
              int v49 = qword_1003DB6B8;
              if (!os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO)) {
                goto LABEL_134;
              }
              *(_DWORD *)__p = 136315138;
              *(void *)&__p[4] = buf;
              BOOL v16 = __p;
              int v17 = v49;
              int v18 = OS_LOG_TYPE_INFO;
              id v19 = "Fastpath %s already opened.";
              int v20 = 12;
            }
            else
            {
              int v50 = CSFastpathGlue::open(v27, v26, child);
              if (!v50) {
                goto LABEL_134;
              }
              if (qword_1003DB6B0 != -1) {
                dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
              }
              __int16 v51 = qword_1003DB6B8;
              if (!os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_ERROR)) {
                goto LABEL_134;
              }
              *(_DWORD *)__p = 136315394;
              *(void *)&__p[4] = buf;
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = v50;
              BOOL v16 = __p;
              int v17 = v51;
              int v18 = OS_LOG_TYPE_ERROR;
              id v19 = "Failed to open %s, error 0x%x";
              int v20 = 18;
            }
LABEL_133:
            _os_log_impl((void *)&_mh_execute_header, v17, v18, v19, v16, v20);
            goto LABEL_134;
          }
          sub_100007BC0(__p, "Acc100Fp");
          uint64_t v28 = (char)v56;
          if ((v56 & 0x80u) == 0) {
            id v29 = v56;
          }
          else {
            id v29 = *(void *)&__p[8];
          }
          if (v29 == strlen((const char *)buf))
          {
            if ((v56 & 0x80u) == 0) {
              int v30 = __p;
            }
            else {
              int v30 = *(unsigned char **)__p;
            }
            int v31 = memcmp(v30, buf, v29) == 0;
            if (v28 < 0) {
LABEL_58:
            }
              operator delete(*(void **)__p);
          }
          else
          {
            int v31 = 0;
            if ((char)v56 < 0) {
              goto LABEL_58;
            }
          }
          if (v31)
          {
            uint64_t v26 = 7;
            id v27 = (CSFastpathGlue *)(a1 + 79);
          }
          else
          {
            sub_100007BC0(__p, "HgAccFp");
            BOOL v32 = (char)v56;
            if ((v56 & 0x80u) == 0) {
              BOOL v33 = v56;
            }
            else {
              BOOL v33 = *(void *)&__p[8];
            }
            if (v33 == strlen((const char *)buf))
            {
              if ((v56 & 0x80u) == 0) {
                int v34 = __p;
              }
              else {
                int v34 = *(unsigned char **)__p;
              }
              int v35 = memcmp(v34, buf, v33) == 0;
            }
            else
            {
              int v35 = 0;
            }
            if (v32 < 0) {
              operator delete(*(void **)__p);
            }
            if (v35)
            {
              uint64_t v26 = 5;
              id v27 = (CSFastpathGlue *)(a1 + 67);
            }
            else
            {
              sub_100007BC0(__p, "DmFp");
              uint64_t v36 = (char)v56;
              if ((v56 & 0x80u) == 0) {
                float v37 = v56;
              }
              else {
                float v37 = *(void *)&__p[8];
              }
              if (v37 == strlen((const char *)buf))
              {
                if ((v56 & 0x80u) == 0) {
                  int v38 = __p;
                }
                else {
                  int v38 = *(unsigned char **)__p;
                }
                double v39 = memcmp(v38, buf, v37) == 0;
              }
              else
              {
                double v39 = 0;
              }
              if (v36 < 0) {
                operator delete(*(void **)__p);
              }
              if (v39)
              {
                uint64_t v26 = 1;
                id v27 = (CSFastpathGlue *)(a1 + 43);
              }
              else
              {
                sub_100007BC0(__p, "PressureFp");
                int v40 = sub_1002A1EA0((const void **)__p, (char *)buf);
                if ((char)v56 < 0) {
                  operator delete(*(void **)__p);
                }
                if (v40)
                {
                  uint64_t v26 = 2;
                  id v27 = (CSFastpathGlue *)(a1 + 49);
                }
                else
                {
                  sub_100007BC0(__p, "GpsFp");
                  uint64_t v41 = sub_1002A1EA0((const void **)__p, (char *)buf);
                  if ((char)v56 < 0) {
                    operator delete(*(void **)__p);
                  }
                  if (v41)
                  {
                    uint64_t v26 = 3;
                    id v27 = (CSFastpathGlue *)(a1 + 55);
                  }
                  else
                  {
                    sub_100007BC0(__p, "RmsFp");
                    int v42 = sub_1002A1EA0((const void **)__p, (char *)buf);
                    if ((char)v56 < 0) {
                      operator delete(*(void **)__p);
                    }
                    if (v42)
                    {
                      uint64_t v26 = 4;
                      id v27 = (CSFastpathGlue *)(a1 + 61);
                    }
                    else
                    {
                      sub_100007BC0(__p, "StepsFp");
                      int v43 = sub_1002A1EA0((const void **)__p, (char *)buf);
                      if ((char)v56 < 0) {
                        operator delete(*(void **)__p);
                      }
                      if (v43)
                      {
                        uint64_t v26 = 6;
                        id v27 = (CSFastpathGlue *)(a1 + 73);
                      }
                      else
                      {
                        sub_100007BC0(__p, "RoadsFp");
                        int v44 = sub_1002A1EA0((const void **)__p, (char *)buf);
                        if ((char)v56 < 0) {
                          operator delete(*(void **)__p);
                        }
                        if (v44)
                        {
                          uint64_t v26 = 8;
                          id v27 = (CSFastpathGlue *)(a1 + 85);
                        }
                        else
                        {
                          sub_100007BC0(__p, "AudioFp");
                          int v45 = sub_1002A1EA0((const void **)__p, (char *)buf);
                          if ((char)v56 < 0) {
                            operator delete(*(void **)__p);
                          }
                          if (v45)
                          {
                            uint64_t v26 = 9;
                            id v27 = (CSFastpathGlue *)(a1 + 91);
                          }
                          else
                          {
                            sub_100007BC0(__p, "ActivityFp");
                            int v46 = sub_1002A1EA0((const void **)__p, (char *)buf);
                            if ((char)v56 < 0) {
                              operator delete(*(void **)__p);
                            }
                            if (v46)
                            {
                              uint64_t v26 = 10;
                              id v27 = (CSFastpathGlue *)(a1 + 97);
                            }
                            else
                            {
                              sub_100007BC0(__p, "HertzFp");
                              double v47 = sub_1002A1EA0((const void **)__p, (char *)buf);
                              if ((char)v56 < 0) {
                                operator delete(*(void **)__p);
                              }
                              if (v47)
                              {
                                uint64_t v26 = 11;
                                id v27 = (CSFastpathGlue *)(a1 + 103);
                              }
                              else
                              {
                                sub_100007BC0(__p, "MagFp");
                                uint64_t v48 = sub_1002A1EA0((const void **)__p, (char *)buf);
                                if ((char)v56 < 0) {
                                  operator delete(*(void **)__p);
                                }
                                if (!v48)
                                {
                                  int v52 = sub_10029B398();
                                  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
                                  {
                                    *(_DWORD *)__p = 136315138;
                                    *(void *)&__p[4] = buf;
                                    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "Unexpected AppleSPUFastpathDriver %s", __p, 0xCu);
                                  }

                                  goto LABEL_134;
                                }
                                uint64_t v26 = 12;
                                id v27 = (CSFastpathGlue *)(a1 + 109);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_123;
        }
        if (qword_1003DB6B0 != -1) {
          dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
        }
        uint64_t v12 = qword_1003DB6B8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = ChildEntry;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "IORegistryEntryGetChildEntry failed for AppleSPUFastpathInterface 0x%0x", buf, 8u);
        }
      }
      else
      {
        CFRelease(v10);
      }
LABEL_137:
      if (!IOObjectRelease(v9))
      {
        uint64_t v9 = IOIteratorNext(parent[0]);
        if (!v9) {
          goto LABEL_16;
        }
      }
    }
  }
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  uint64_t v6 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = ChildIterator;
    id v7 = "IORegistryEntryGetChildIterator failed 0x%0x";
    goto LABEL_15;
  }
LABEL_16:
}

void sub_10029CA90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::resetFastpaths(CSAOPSvc *this)
{
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  uint64_t v2 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)BOOL v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "reset fastpaths", v5, 2u);
  }
  uint64_t v3 = 0;
  uint64_t v4 = (char *)this + 296;
  do
  {
    if (v3 != 240) {
      CSFastpathGlue::reset((uint64_t)&v4[v3]);
    }
    v3 += 48;
  }
  while (v3 != 624);
}

id CSAOPSvc::resetAPEventsBuffer(id *this)
{
  return [this[137] reset];
}

void sub_10029CBB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(void *)(*(void *)(v4 + 48) + 1008);
  [v3 timestamp];
  double v7 = v6;
  double v8 = *(double *)(*(void *)(v4 + 48) + 1080);
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  uint64_t v9 = (id)qword_1003DB6B8;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v10 = [v3 eventBody];
    id v11 = [v10 bundleID];
    id v12 = [v11 UTF8String];
    int v13 = [v3 eventBody];
    unsigned int v14 = [v13 isStarting];
    [v3 timestamp];
    BOOL v16 = "closed";
    int v17 = 136315906;
    id v18 = v12;
    if (v14) {
      BOOL v16 = "launched";
    }
    __int16 v19 = 2082;
    int v20 = v16;
    __int16 v21 = 2050;
    uint64_t v22 = v15;
    __int16 v23 = 2050;
    unint64_t v24 = (unint64_t)((double)v5 + (v7 - v8) * 1000000.0);
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "App %s %{public}s at %{public}.1f = %{public}llu", (uint8_t *)&v17, 0x2Au);
  }
}

void sub_10029CD74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10029CDC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(void *)(*(void *)(v4 + 48) + 1008);
  [v3 timestamp];
  double v7 = v6;
  double v8 = *(double *)(*(void *)(v4 + 48) + 1080);
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  uint64_t v9 = (id)qword_1003DB6B8;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    [v3 timestamp];
    int v11 = 134349312;
    uint64_t v12 = v10;
    __int16 v13 = 2050;
    unint64_t v14 = (unint64_t)((double)v5 + (v7 - v8) * 1000000.0);
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Screen unlock at %{public}.1f = %{public}llu", (uint8_t *)&v11, 0x16u);
  }
}

void sub_10029CEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CSAOPSvc::Reading::exit(CSAOPSvc::Reading *this, unint64_t a2, const void *a3)
{
  uint64_t v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    [v4 cancel:a3];
    unint64_t v5 = (void *)*((void *)this + 8);
    *((void *)this + 8) = 0;
  }
  double v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    [v6 cancel:a3];
    double v7 = (void *)*((void *)this + 9);
    *((void *)this + 9) = 0;
  }
  [*((id *)this + 13) setNextFireDelay:a3 interval:1.79769313e308];
  if (qword_1003DB690 != -1) {
    dispatch_once(&qword_1003DB690, &stru_1003B4078);
  }
  double v8 = qword_1003DB698;
  if (os_log_type_enabled((os_log_t)qword_1003DB698, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Notifying streaming timeout", v11, 2u);
  }
  id result = [*(id *)(*((void *)this + 6) + 1088) reset];
  uint64_t v10 = *((void *)this + 6);
  if (*(unsigned char *)(v10 + 1024)) {
    *(unsigned char *)(v10 + 1024) = 0;
  }
  return result;
}

void CSAOPSvc::restartSessionInternal(id *this)
{
  if (CSHSM::isIn((CSHSM *)this, (CSHSM::State *)(this + 15)))
  {
    if (qword_1003DB6B0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1002A3B50();
  }
  dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
LABEL_3:
  uint64_t v2 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "forcefully restarting the session; any recordings will be discarded",
      v5,
      2u);
  }
  *((_DWORD *)this + 5CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  [this[129] stopAndKeep:0];
  id v3 = this[129];
  this[129] = 0;

  CSAOPSvc::resetFastpaths((CSAOPSvc *)this);
  [this[137] reset];
  *((unsigned char *)this + 200) = 0;
  [this[136] reset];
  id v4 = [this[5] timestamp];
  if (v4 && !*((unsigned char *)this + 1024))
  {
    this[127] = v4;
    *((unsigned char *)this + 1024) = 1;
  }
  [this[136] addObject:this[5]];
  *((unsigned char *)this + 1074) = 0;
  objc_storeStrong(this + 129, this[130]);
}

void CSAOPSvc::restartSession(CSAOPSvc *this, CSMSLDataRecording *a2)
{
  *((unsigned char *)this + 1074) = 1;
  objc_storeStrong((id *)this + 130, a2);
}

void CSAOPSvc::wasLendedCompanionPunchThru(CSAOPSvc *this)
{
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  uint64_t v2 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "was lended punch thru", v3, 2u);
  }
  *((unsigned char *)this + 1075) = 1;
}

void CSAOPSvc::wasRetractedCompanionPunchThru(CSAOPSvc *this)
{
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  uint64_t v2 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "was retracted punch thru", v3, 2u);
  }
  *((unsigned char *)this + 1075) = 0;
}

BOOL CSAOPSvc::punchThruCollectionShouldBeAborted(CSAOPSvc *this)
{
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  uint64_t v2 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *((unsigned __int8 *)this + 1075);
    int v4 = *((unsigned __int8 *)this + 1076);
    v6[0] = 67109376;
    v6[1] = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "lended punch thru %d force stopped %d", (uint8_t *)v6, 0xEu);
  }
  return *((unsigned char *)this + 1075) && *((unsigned char *)this + 1076) != 0;
}

void CSAOPSvc::forceStopCollection(CSAOPSvc *this)
{
  if (*((unsigned char *)this + 1075))
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    uint64_t v2 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "refusing to stop the collection, the recording was lent a punch through by the companion", buf, 2u);
    }
    *((unsigned char *)this + 1076) = 1;
  }
  else
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    int v3 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "forcefully stopping the collection", v5, 2u);
    }
    *((_DWORD *)this + 53) = 0;
    [*((id *)this + 129) stopAndKeep:0];
    int v4 = (void *)*((void *)this + 129);
    *((void *)this + 129) = 0;

    [*((id *)this + 2) abortSession];
  }
}

CSAOPSvc::Reading *CSAOPSvc::Reading::trigger(CSAOPSvc::Reading *this, uint64_t a2, const void *a3)
{
  int v4 = this;
  if (a2 == 3)
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    int v31 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v33) = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "aop timeout command", (uint8_t *)&v33, 2u);
    }
    *((_WORD *)v4 + 40) = 257;
    return (CSAOPSvc::Reading *)(*((void *)v4 + 6) + 232);
  }
  if (a2 == 2)
  {
    uint64_t v23 = *((void *)this + 6);
    if (*(unsigned char *)(v23 + 1074)) {
      CSAOPSvc::restartSessionInternal((id *)v23);
    }
    unsigned int v24 = *((_DWORD *)v4 + 21) + 1;
    *((_DWORD *)v4 + 2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v24;
    if (v24 >= *((_DWORD *)v4 + 23) || !*((unsigned char *)v4 + 96)) {
      *((unsigned char *)v4 + 8CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 1;
    }
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    uint64_t v25 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
    {
      int v26 = *((_DWORD *)v4 + 21);
      int v27 = *((_DWORD *)v4 + 22);
      int v28 = *((_DWORD *)v4 + 23);
      int v29 = *((unsigned __int8 *)v4 + 80);
      int v30 = *((unsigned __int8 *)v4 + 81);
      int v33 = 67110144;
      *(_DWORD *)int v34 = v26;
      *(_WORD *)&v34[4] = 1024;
      *(_DWORD *)&v34[6] = v27;
      *(_WORD *)int v35 = 1024;
      *(_DWORD *)&v35[2] = v28;
      *(_WORD *)uint64_t v36 = 1024;
      *(_DWORD *)&v36[2] = v29;
      LOWORD(v37) = 1024;
      *(_DWORD *)((char *)&v37 + 2) = v30;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "_Nsec %d _NsecToRead %d _NsecToCollect %d _doneRunningAlgs %d _doneCollecting %d", (uint8_t *)&v33, 0x20u);
    }
    if (*((_DWORD *)v4 + 21) < *((_DWORD *)v4 + 22) && (!*((unsigned char *)v4 + 81) || !*((unsigned char *)v4 + 80)))
    {
      CSAOPSvc::readFastpaths(*((CSAOPSvc **)v4 + 6));
      CSAOPSvc::readAPEventsBuffer(*((id **)v4 + 6));
      CSAOPSvc::dispatchSamples(*((id **)v4 + 6), *((unsigned char *)v4 + 81) == 0);
      return v4;
    }
    return (CSAOPSvc::Reading *)(*((void *)v4 + 6) + 232);
  }
  if (a2 != 1) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 6);
  if (!*(void *)(v5 + 40))
  {
    sub_1002A3C8C();
    __break(1u);
    goto LABEL_37;
  }
  [*(id *)(v5 + 1088) addObject:];
  p_info = GPBUInt32Array.info;
  if (qword_1003DB6B0 != -1) {
LABEL_37:
  }
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  double v6 = (id)qword_1003DB6B8;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [*(id *)(*((void *)v4 + 6) + 40) timestamp];
    int v8 = *((unsigned __int8 *)[*(id *)(*((void *)v4 + 6) + 40) c_struct] + 1);
    _H8 = *((_WORD *)[*(id *)(*((void *)v4 + 6) + 40) c_struct] + 49);
    _H9 = *((_WORD *)[*(id *)(*((void *)v4 + 6) + 40) c_struct] + 50);
    _H10 = *((_WORD *)[*(id *)(*((void *)v4 + 6) + 40) c_struct] + 51);
    uint64_t v12 = (unsigned __int8 *)[*(id *)(*((void *)v4 + 6) + 40) c_struct];
    __asm { FCVT            D0, H8 }
    int v18 = v12[104];
    __asm
    {
      FCVT            D1, H9
      FCVT            D3, H10
    }
    int v33 = 134350592;
    *(void *)int v34 = v7;
    *(_WORD *)&v34[8] = 1026;
    *(_DWORD *)int v35 = v8;
    *(_WORD *)&v35[4] = 1026;
    *(_DWORD *)uint64_t v36 = 112;
    *(_WORD *)&v36[4] = 2050;
    uint64_t v37 = _D0;
    __int16 v38 = 2050;
    uint64_t v39 = _D1;
    __int16 v40 = 2050;
    uint64_t v41 = _D3;
    __int16 v42 = 1026;
    int v43 = v18;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "trigger %{public}llu path %{public}d size %{public}d metrics %{public}f,%{public}f,%{public}f,%{public}d", (uint8_t *)&v33, 0x3Cu);
  }

  if ((*((unsigned char *)objc_msgSend(*(id *)(*((void *)v4 + 6) + 40), "c_struct") + 1) & 0x10) == 0
    && (*((unsigned char *)objc_msgSend(*(id *)(*((void *)v4 + 6) + 40), "c_struct") + 46) & 0x10) == 0)
  {
    *((_DWORD *)v4 + 22) = *((_DWORD *)v4 + 21) + 600;
    if (p_info[214] != (__objc2_class_ro *)-1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    __int16 v21 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO))
    {
      int v22 = *((_DWORD *)v4 + 22);
      int v33 = 67109120;
      *(_DWORD *)int v34 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Extend reading to %u sec", (uint8_t *)&v33, 8u);
    }
    *((unsigned char *)v4 + 80) = 0;
    [*(id *)(*((void *)v4 + 6) + 16) triggered:*(void *)(*((void *)v4 + 6) + 40)];
  }
  return v4;
}

void sub_10029D8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::readFastpaths(CSAOPSvc *this)
{
  uint64_t v165 = __chkstk_darwin(this);
  if (*(void *)(v165 + 840))
  {
    for (uint64_t i = 0; i != 240; i += 8)
    {
      uint64_t v2 = &v173[i];
      *(void *)uint64_t v2 = 0;
      v2[4] = 0;
      *((unsigned char *)v2 + 10) = 0;
    }
    unsigned int v3 = CSFastpathGlue::read((CSFastpathGlue *)(v165 + 824), (unsigned __int8 *)v173, 30);
    unsigned int v4 = v3;
    if (v3)
    {
      uint64_t v5 = *(void *)&v173[8 * v3 - 8];
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      double v6 = (id)qword_1003DB6B8;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)int v171 = v4;
        *(_WORD *)&v171[4] = 2048;
        *(void *)&v171[6] = *(void *)v173;
        *(_WORD *)&v171[14] = 2048;
        *(void *)&v171[16] = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%u HzSamples %llu %llu", buf, 0x1Cu);
      }

      uint64_t v7 = v4;
      int v8 = v173;
      do
      {
        if (*(void *)v8 >= (unint64_t)(*(void *)(v165 + 1008) - 30000000))
        {
          uint64_t v9 = [[CSSPUHertzSample alloc] initWithTimestamp:*(void *)v8 dramDurationMs:(unsigned __int16)v8[4] vehicularFlags:*((unsigned __int8 *)v8 + 10)];
          [*(id *)(v165 + 1088) addObject:v9];
        }
        v8 += 8;
        --v7;
      }
      while (v7);
    }
  }
  if (*(void *)(v165 + 312))
  {
    unsigned int v10 = CSFastpathGlue::read((CSFastpathGlue *)(v165 + 296), (unsigned __int8 *)v173, 2400);
    if (v10)
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      int v11 = (id)qword_1003DB6B8;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)int v171 = v10;
        *(_WORD *)&v171[4] = 2048;
        *(void *)&v171[6] = *(void *)&v173[6];
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%u acc800 %llu", buf, 0x12u);
      }

      uint64_t v12 = v10;
      __int16 v13 = &v173[6];
      do
      {
        if (*v13 >= (unint64_t)(*(void *)(v165 + 1008) - 3000000))
        {
          unint64_t v14 = [CSSPUAccel800 alloc];
          LODWORD(v15) = *((_DWORD *)v13 - 3);
          LODWORD(v16) = *((_DWORD *)v13 - 2);
          LODWORD(v17) = *((_DWORD *)v13 - 1);
          int v18 = [(CSSPUAccel800 *)v14 initWithTimestamp:*v13 x:v15 y:v16 z:v17];
          [*(id *)(v165 + 1088) addObject:v18];
        }
        __int16 v13 = (void *)((char *)v13 + 20);
        --v12;
      }
      while (v12);
    }
  }
  if (*(void *)(v165 + 648))
  {
    unsigned int v19 = CSFastpathGlue::read((CSFastpathGlue *)(v165 + 632), (unsigned __int8 *)v173, 3000);
    if (v19)
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      int v20 = (id)qword_1003DB6B8;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)int v171 = v19;
        *(_WORD *)&v171[4] = 2048;
        *(void *)&v171[6] = *(void *)&v173[6];
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%u acc100 %llu", buf, 0x12u);
      }

      uint64_t v21 = v19;
      int v22 = &v173[6];
      do
      {
        if (*v22 >= (unint64_t)(*(void *)(v165 + 1008) - 30000000))
        {
          uint64_t v23 = [CSSPUAccel alloc];
          LODWORD(v24) = *((_DWORD *)v22 - 3);
          LODWORD(v25) = *((_DWORD *)v22 - 2);
          LODWORD(v26) = *((_DWORD *)v22 - 1);
          int v27 = [(CSSPUTriad *)v23 initWithTimestamp:*v22 x:v24 y:v25 z:v26];
          [*(id *)(v165 + 1088) addObject:v27];
        }
        int v22 = (void *)((char *)v22 + 20);
        --v21;
      }
      while (v21);
    }
  }
  if (*(void *)(v165 + 552))
  {
    unsigned int v28 = CSFastpathGlue::read((CSFastpathGlue *)(v165 + 536), (unsigned __int8 *)v173, 800);
    if (v28)
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      int v29 = (id)qword_1003DB6B8;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)int v171 = v28;
        *(_WORD *)&v171[4] = 2048;
        *(void *)&v171[6] = *(void *)&v173[3];
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "%u hgacc %llu", buf, 0x12u);
      }

      uint64_t v30 = v28;
      int v31 = &v173[3];
      do
      {
        if (*v31 >= (unint64_t)(*(void *)(v165 + 1008) - 3000000))
        {
          BOOL v32 = [CSSPUHgAccel alloc];
          *(float *)&double v33 = (float)*((__int16 *)v31 - 3) * 0.03125;
          *(float *)&double v34 = (float)*((__int16 *)v31 - 2) * 0.03125;
          *(float *)&double v35 = (float)*((__int16 *)v31 - 1) * 0.03125;
          uint64_t v36 = [(CSSPUHgAccel *)v32 initWithTimestamp:*v31 x:v33 y:v34 z:v35];
          [*(id *)(v165 + 1088) addObject:v36];
        }
        int v31 = (void *)((char *)v31 + 14);
        --v30;
      }
      while (v30);
    }
  }
  uint64_t v37 = +[CSPlatformInfo sharedInstance];
  unsigned int v38 = [v37 isExtendedPretriggerMagDevice];

  if (v38 && *(void *)(v165 + 888)) {
    operator new[]();
  }
  if (*(void *)(v165 + 360)) {
    operator new[]();
  }
  if (*(void *)(v165 + 504))
  {
    unsigned int v39 = CSFastpathGlue::read((CSFastpathGlue *)(v165 + 488), (unsigned __int8 *)v173, 3000);
    if (v39)
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      __int16 v40 = (id)qword_1003DB6B8;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)int v171 = v39;
        *(_WORD *)&v171[4] = 1024;
        *(_DWORD *)&v171[6] = *(_DWORD *)&v173[4];
        *(_WORD *)&v171[10] = 2048;
        *(double *)&v171[12] = *(float *)&v173[6];
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "%u SPL, sn = 0x%08x, %g", buf, 0x18u);
      }

      uint64_t v41 = v39;
      __int16 v42 = (float *)&v173[6];
      do
      {
        unsigned int v43 = *((_DWORD *)v42 - 1);
        if (*(unsigned char *)(v165 + 1000) == v43 >> 28)
        {
          uint64_t v44 = *(void *)(v165 + 1008);
          unint64_t v45 = v44 + 1000 * ((v43 & 0xFFFFFFF) - (uint64_t)*(int *)(v165 + 1004));
          if (v45 >= v44 - 3000000)
          {
            int v46 = [CSSPUSpl alloc];
            *(float *)&double v47 = sqrtf(*v42);
            uint64_t v48 = [(CSSPUSpl *)v46 initWithTimestamp:v45 rms:v47];
            [*(id *)(v165 + 1088) addObject:v48];
          }
        }
        v42 += 4;
        --v41;
      }
      while (v41);
    }
  }
  if (*(void *)(v165 + 408))
  {
    unsigned int v49 = CSFastpathGlue::read((CSFastpathGlue *)(v165 + 392), (unsigned __int8 *)v173, 360);
    if (v49)
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      int v50 = (id)qword_1003DB6B8;
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)int v171 = v49;
        *(_WORD *)&v171[4] = 2048;
        *(void *)&v171[6] = *(void *)v173;
        *(_WORD *)&v171[14] = 2048;
        *(double *)&v171[16] = *(float *)&v173[4];
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "%u pressure, batch[0] = %llu %f", buf, 0x1Cu);
      }

      uint64_t v51 = v49;
      int v52 = v173;
      do
      {
        if (*(void *)v52 >= (unint64_t)(*(void *)(v165 + 1008) - 3000000))
        {
          __int16 v53 = [CSSPUPressure alloc];
          LODWORD(v54) = *((_DWORD *)v52 + 2);
          LODWORD(v55) = *((_DWORD *)v52 + 3);
          int v56 = [(CSSPUPressure *)v53 initWithTimestamp:*(void *)v52 pressure:v54 temperature:v55];
          [*(id *)(v165 + 1088) addObject:v56];
        }
        v52 += 8;
        --v51;
      }
      while (v51);
    }
  }
  if (*(void *)(v165 + 456))
  {
    for (uint64_t j = 12; j != 972; j += 32)
      *(void *)&v173[j] = -1;
    unsigned int v58 = CSFastpathGlue::read((CSFastpathGlue *)(v165 + 440), (unsigned __int8 *)v173, 30);
    if (v58)
    {
      unint64_t v59 = 0;
      unint64_t v60 = (unint64_t)v58 << 6;
      do
      {
        double v61 = &v173[v59 / 2];
        if (*(void *)&v177[v59 / 4 - 4] >= (unint64_t)(*(void *)(v165 + 1008) - 30000000))
        {
          if (qword_1003DB6B0 != -1) {
            dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
          }
          double v62 = (id)qword_1003DB6B8;
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v63 = *((void *)v61 + 5);
            double v64 = *(float *)v61;
            *(_DWORD *)long long buf = 134218240;
            *(void *)int v171 = v63;
            *(_WORD *)&v171[8] = 2048;
            *(double *)&v171[10] = v64;
            _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "GPS, %llu %f...", buf, 0x16u);
          }

          double v65 = [CSSPUGps alloc];
          LODWORD(v66) = *(_DWORD *)&v173[v59 / 2];
          LODWORD(v67) = *(_DWORD *)&v173[v59 / 2 + 2];
          LODWORD(v68) = *(_DWORD *)&v173[v59 / 2 + 4];
          LODWORD(v69) = *(_DWORD *)&v173[v59 / 2 + 6];
          LODWORD(v70) = *(_DWORD *)&v173[v59 / 2 + 8];
          LODWORD(v7CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *(_DWORD *)&v173[v59 / 2 + 10];
          LODWORD(v72) = v177[v59 / 4 - 2];
          LODWORD(v160) = v177[v59 / 4];
          double v73 = -[CSSPUGps initWithTimestamp:doubleTS:speedMS:speedAccuracyMS:courseDeg:courseAccuracyDeg:latitude:longitude:wayForm:roadClass:signalEnvironment:horizontalAccuracy:demNumContiguousFlatPoints:demConfidence:type:](v65, "initWithTimestamp:doubleTS:speedMS:speedAccuracyMS:courseDeg:courseAccuracyDeg:latitude:longitude:wayForm:roadClass:signalEnvironment:horizontalAccuracy:demNumContiguousFlatPoints:demConfidence:type:", (double)*((unint64_t *)v61 + 5), v66, v67, v68, v69, v70, v71, v72, v160);
          [*(id *)(v165 + 1088) addObject:v73];
        }
        v59 += 64;
      }
      while (v60 != v59);
    }
  }
  if (*(void *)(v165 + 600))
  {
    unsigned int v74 = CSFastpathGlue::read((CSFastpathGlue *)(v165 + 584), (unsigned __int8 *)v173, 4);
    if (v74)
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      double v75 = (id)qword_1003DB6B8;
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67110400;
        *(_DWORD *)int v171 = v74;
        *(_WORD *)&v171[4] = 2048;
        *(void *)&v171[6] = *(void *)v173;
        *(_WORD *)&v171[14] = 1024;
        *(_DWORD *)&v171[16] = *(_DWORD *)&v173[4];
        *(_WORD *)&v171[20] = 1024;
        *(_DWORD *)&v171[22] = *(_DWORD *)&v173[6];
        *(_WORD *)&v171[26] = 2048;
        *(double *)&v171[28] = *(float *)&v173[8];
        *(_WORD *)double v172 = 1024;
        *(_DWORD *)&v172[2] = LOBYTE(v173[10]);
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "%u steps, batch[0] = %llu %i %i %f %d", buf, 0x2Eu);
      }

      uint64_t v76 = v74;
      double v77 = v173;
      do
      {
        if (*(void *)v77 >= (unint64_t)(*(void *)(v165 + 1008) - 12800000))
        {
          double v78 = [CSSPUSteps alloc];
          LODWORD(v79) = *((_DWORD *)v77 + 4);
          double v80 = [(CSSPUSteps *)v78 initWithTimestamp:*(void *)v77 stepCount:*((unsigned int *)v77 + 2) deltaSteps:*((unsigned int *)v77 + 3) currentCadence:*((unsigned __int8 *)v77 + 20) pedometerArmConstrainedState:v79];
          [*(id *)(v165 + 1088) addObject:v80];
        }
        v77 += 12;
        --v76;
      }
      while (v76);
    }
  }
  if (*(void *)(v165 + 696))
  {
    unsigned int v81 = CSFastpathGlue::read((CSFastpathGlue *)(v165 + 680), (unsigned __int8 *)v173, 1);
    if (v81)
    {
      unint64_t v82 = 0;
      uint64_t v83 = 96 * v81;
      do
      {
        if (*(void *)v173 >= (unint64_t)(*(void *)(v165 + 1008) - 3000000))
        {
          if (qword_1003DB6B0 != -1) {
            dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
          }
          double v86 = (id)qword_1003DB6B8;
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 134218240;
            *(void *)int v171 = *(void *)v173;
            *(_WORD *)&v171[8] = 2048;
            *(double *)&v171[10] = *(float *)&v173[4];
            _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "Roads, %llu %f...", buf, 0x16u);
          }

          double v87 = [CSSPURoadInfo alloc];
          uint64_t v88 = *(void *)v173;
          float v89 = *(float *)&v173[4];
          uint64_t v90 = LOBYTE(v173[6]);
          int v91 = *(_DWORD *)&v173[8];
          uint64_t v92 = v173[10];
          id v93 = [objc_alloc((Class)NSString) initWithBytes:&v173[v82 / 2 + 11] length:strnlen((const char *)&v173[v82 / 2 + 11], 0x40uLL) encoding:1];
          LODWORD(v94) = v91;
          double v84 = [(CSSPURoadInfo *)v87 initWithTimestamp:v88 distanceToNearestRoad:v90 roadClass:v92 horizontalAccuracy:v93 numRoadFeaturesEvaluated:v178 GEOHandlerErrorDomain:v89 GEOHandlerErrorCode:v94];

          if (qword_1003DB6B0 != -1) {
            dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
          }
          double v95 = (id)qword_1003DB6B8;
          if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 134219522;
            *(void *)int v171 = *(void *)v173;
            *(_WORD *)&v171[8] = 2048;
            *(double *)&v171[10] = *(float *)&v173[4];
            *(_WORD *)&v171[18] = 1024;
            *(_DWORD *)&v171[20] = LOBYTE(v173[6]);
            *(_WORD *)&v171[24] = 2048;
            *(double *)&v171[26] = *(float *)&v173[8];
            *(_WORD *)&v171[34] = 1024;
            *(_DWORD *)double v172 = v173[10];
            *(_WORD *)&v172[4] = 2080;
            *(void *)&v172[6] = &v173[v82 / 2 + 11];
            *(_WORD *)&v172[14] = 2048;
            *(void *)&v172[16] = v178;
            _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "road info %llu %f %d %f %d %s %ld", buf, 0x40u);
          }

          [*(id *)(v165 + 1088) addObject:v84];
        }
        else
        {
          if (qword_1003DB6B0 != -1) {
            dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
          }
          double v84 = (id)qword_1003DB6B8;
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v85 = *(void *)(v165 + 1008);
            *(_DWORD *)long long buf = 134218496;
            *(void *)int v171 = *(void *)v173;
            *(_WORD *)&v171[8] = 2048;
            *(void *)&v171[10] = v85;
            *(_WORD *)&v171[18] = 2048;
            *(double *)&v171[20] = (double)(unint64_t)(v85 - *(void *)v173 - 3000000) / 1000000.0;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "DROPPED Roads: %llu < %llu by %f seconds", buf, 0x20u);
          }
        }

        v82 += 96;
      }
      while (v83 != v82);
    }
  }
  if (*(unsigned char *)(v165 + 1024))
  {
    int v96 = 1;
  }
  else
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    double v97 = (id)qword_1003DB6B8;
    if (os_log_type_enabled(v97, OS_LOG_TYPE_FAULT))
    {
      v173[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_FAULT, "missing _firstTriggerTimestamp", (uint8_t *)v173, 2u);
    }

    int v96 = *(unsigned __int8 *)(v165 + 1024);
  }
  BOOL v98 = v96 == 0;
  uint64_t v99 = 1016;
  if (v98) {
    uint64_t v99 = 1008;
  }
  uint64_t v163 = *(void *)(v165 + v99);
  __int16 v100 = +[CSPlatformInfo sharedInstance];
  unsigned int v101 = [v100 isMDevice];

  if (v101)
  {
    if (*(void *)(v165 + 744))
    {
      for (uint64_t k = 0; k != 248; k += 124)
      {
        double v103 = &v173[k];
        *(void *)double v103 = 0;
        *((_DWORD *)v103 + 2) = 0;
        *((_DWORD *)v103 + 22) = 0;
        *((_DWORD *)v103 + 44) = 0;
        *((void *)v103 + 2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
        *((void *)v103 + 2) = 0;
        *((void *)v103 + 3) = 0;
        *((_DWORD *)v103 + 8) = 0;
        *((void *)v103 + 5) = 0;
        *((void *)v103 + 6) = 0;
        *((_DWORD *)v103 + 14) = 0;
        *((void *)v103 + 8) = 0;
        *((void *)v103 + 9) = 0;
        *((unsigned char *)v103 + 80) = 0;
        *((void *)v103 + 12) = 0;
        *((void *)v103 + 13) = 0;
        *((_DWORD *)v103 + 28) = 0;
        *((_DWORD *)v103 + 34) = 0;
        *((void *)v103 + 15) = 0;
        *((void *)v103 + 16) = 0;
        *((void *)v103 + 18) = 0;
        *((void *)v103 + 19) = 0;
        *((unsigned char *)v103 + 160) = 0;
        *(_OWORD *)(v103 + 92) = 0uLL;
        *(_OWORD *)(v103 + 100) = 0uLL;
        *(_OWORD *)(v103 + 108) = 0uLL;
        *(_OWORD *)(v103 + 114) = 0uLL;
      }
      unsigned int v104 = CSFastpathGlue::read((CSFastpathGlue *)(v165 + 728), (unsigned __int8 *)v173, 2);
      if (v104)
      {
        unint64_t v105 = 0;
        unint64_t v106 = v163 - 3000000;
        uint64_t v107 = 248 * v104;
        p_info = GPBUInt32Array.info;
        double v109 = GPBUInt32Array.info;
        __int16 v110 = (mach_header_64 *)&_mh_execute_header;
        double v111 = CSSPUPressure;
        uint64_t v161 = v107;
        do
        {
          __int16 v112 = (uint64_t *)&v173[v105 / 2];
          double v113 = p_info[214];
          if (*(void *)&v173[v105 / 2] >= v106)
          {
            if (v113 != (__objc2_class_ro *)-1) {
              dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
            }
            double v117 = v109[215];
            if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
            {
              __int16 v118 = v110;
              uint64_t v119 = *(void *)&v173[v105 / 2];
              int v120 = *(_DWORD *)&v179[v105];
              uint64_t v122 = *(void *)&v179[v105 + 24];
              uint64_t v121 = *(void *)&v179[v105 + 32];
              uint64_t v123 = *(void *)&v179[v105 + 40];
              uint64_t v124 = *(void *)&v179[v105 + 48];
              unint64_t v125 = +[CSTimeManager SPU_estimate_current_timestamp];
              *(_DWORD *)long long buf = 134219520;
              *(void *)int v171 = v119;
              *(_WORD *)&v171[8] = 1024;
              *(_DWORD *)&v171[10] = v120;
              *(_WORD *)&v171[14] = 2048;
              *(void *)&v171[16] = v122;
              *(_WORD *)&v171[24] = 2048;
              *(void *)&v171[26] = v121;
              *(_WORD *)&v171[34] = 2048;
              *(void *)double v172 = v123;
              *(_WORD *)&v172[8] = 2048;
              *(void *)&v172[10] = v124;
              *(_WORD *)&v172[18] = 2048;
              *(void *)&v172[20] = v125;
              __int16 v110 = v118;
              _os_log_impl(v118, v117, OS_LOG_TYPE_DEBUG, "AudioResult, %llu %d dram %llu,%llu calc %llu wr %llu now %llu", buf, 0x44u);
              unint64_t v106 = v163 - 3000000;
              uint64_t v107 = v161;
              p_info = (__objc2_class_ro **)(GPBUInt32Array + 32);
              double v109 = (__objc2_class_ro **)(GPBUInt32Array + 32);
              double v111 = CSSPUPressure;
            }

            __int16 v114 = [objc_alloc(&v111[10]) initWithSPUPacketStruct:&v173[v105 / 2]];
            [*(id *)(v165 + 1088) addObject:v114];
          }
          else
          {
            if (v113 != (__objc2_class_ro *)-1) {
              dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
            }
            __int16 v114 = v109[215];
            if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v115 = *v112;
              double v116 = (double)(v106 - *v112);
              *(_DWORD *)long long buf = 134218496;
              *(void *)int v171 = v115;
              *(_WORD *)&v171[8] = 2048;
              *(void *)&v171[10] = v163;
              *(_WORD *)&v171[18] = 2048;
              *(double *)&v171[20] = v116 / 1000000.0;
              _os_log_impl(v110, v114, OS_LOG_TYPE_DEBUG, "DROPPED AudioResult: %llu < %llu by %f seconds", buf, 0x20u);
            }
          }

          v105 += 248;
        }
        while (v107 != v105);
      }
    }
    else
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      double v126 = (id)qword_1003DB6B8;
      if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
      {
        v173[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEBUG, "AudioResult glue invalid", (uint8_t *)v173, 2u);
      }
    }
  }
  if (*(void *)(v165 + 792))
  {
    int v174 = 0;
    uint64_t v175 = 0;
    *(void *)double v173 = 0;
    *(void *)&v173[4] = 0;
    *(void *)((char *)&v173[6] + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
    long long v176 = 0u;
    memset(v177, 0, 28);
    int v127 = CSFastpathGlue::read((CSFastpathGlue *)(v165 + 776), (unsigned __int8 *)v173, 1);
    if (v127)
    {
      HIDWORD(v128) = 0;
      do
      {
        if (*(void *)v173 >= (unint64_t)(*(void *)(v165 + 1008) - 3000000))
        {
          LODWORD(v128) = *(_DWORD *)&v173[4];
          int v131 = +[NSNumber numberWithFloat:v128];
          v169[0] = v131;
          LODWORD(v132) = *(_DWORD *)&v173[6];
          double v133 = +[NSNumber numberWithFloat:v132];
          v169[1] = v133;
          LODWORD(v134) = *(_DWORD *)&v173[8];
          double v135 = +[NSNumber numberWithFloat:v134];
          v169[2] = v135;
          double v164 = +[NSArray arrayWithObjects:v169 count:3];

          LODWORD(v136) = v174;
          __int16 v137 = +[NSNumber numberWithFloat:v136];
          v168[0] = v137;
          LODWORD(v138) = v175;
          double v139 = +[NSNumber numberWithFloat:v138];
          v168[1] = v139;
          LODWORD(v140) = HIDWORD(v175);
          int v141 = +[NSNumber numberWithFloat:v140];
          v168[2] = v141;
          double v162 = +[NSArray arrayWithObjects:v168 count:3];

          double v142 = +[NSNumber numberWithUnsignedShort:WORD4(v176)];
          v167[0] = v142;
          double v143 = +[NSNumber numberWithUnsignedShort:WORD5(v176)];
          v167[1] = v143;
          double v144 = +[NSNumber numberWithUnsignedShort:WORD6(v176)];
          v167[2] = v144;
          double v145 = +[NSNumber numberWithUnsignedShort:HIWORD(v176)];
          v167[3] = v145;
          int v146 = +[NSNumber numberWithUnsignedShort:LOWORD(v177[0])];
          v167[4] = v146;
          __int16 v147 = +[NSArray arrayWithObjects:v167 count:5];

          double v148 = +[NSNumber numberWithUnsignedShort:HIWORD(v177[0])];
          v166[0] = v148;
          double v149 = +[NSNumber numberWithUnsignedShort:LOWORD(v177[1])];
          v166[1] = v149;
          double v150 = +[NSNumber numberWithUnsignedShort:HIWORD(v177[1])];
          v166[2] = v150;
          int v151 = +[NSNumber numberWithUnsignedShort:LOWORD(v177[2])];
          v166[3] = v151;
          double v152 = +[NSNumber numberWithUnsignedShort:HIWORD(v177[2])];
          v166[4] = v152;
          double v153 = +[NSArray arrayWithObjects:v166 count:5];

          double v154 = [CSSPUActivityPhone alloc];
          LODWORD(v155) = v177[3];
          LODWORD(v156) = v177[4];
          LODWORD(v157) = v177[5];
          LODWORD(v158) = v177[6];
          double v159 = [(CSSPUActivityPhone *)v154 initWithTimestamp:*(void *)v173 armTimeImuConfidences:v164 armTimeActivityHints:LOBYTE(v173[10]) windowAfterArmImuConfidences:v162 triggerTimeLastHighImuDrivingConfidenceTimestamp:(void)v176 sessionSwivelAngleDegHistogram:v147 sessionTiltAngleDegHistogram:v155 sessionImuHintPercentage:v156 sessionBtHintPercentage:v157 sessionGpsHintPercentage:v158 sessionWifiHintPercentage:v153];
          [*(id *)(v165 + 1088) addObject:v159];
        }
        else
        {
          if (qword_1003DB6B0 != -1) {
            dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
          }
          double v129 = (id)qword_1003DB6B8;
          double v164 = v129;
          if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v130 = *(void *)(v165 + 1008);
            *(_DWORD *)long long buf = 134218496;
            *(void *)int v171 = *(void *)v173;
            *(_WORD *)&v171[8] = 2048;
            *(void *)&v171[10] = v130;
            *(_WORD *)&v171[18] = 2048;
            *(double *)&v171[20] = (double)(unint64_t)(v130 - *(void *)v173 - 3000000) / 1000000.0;
            _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEBUG, "DROPPED Activity: %llu < %llu by %f seconds", buf, 0x20u);
          }
        }

        --v127;
      }
      while (v127);
    }
  }
}

void sub_10029F048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
}

void CSAOPSvc::readAPEventsBuffer(id *this)
{
  id v2 = [this[137] readSamples];
  [this[136] addObjectsFromArray:];
}

void sub_10029F274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::dispatchSamples(id *this, int a2)
{
  unsigned int v4 = [this[136] getNextSortedArray];
  CSAOPSvc::recordStreams(this, v4, a2);
  if (!*((unsigned char *)this + 200)) {
    [this[2] feedSortedSamples:v4];
  }
}

void sub_10029F2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CSAOPSvc::Done *CSAOPSvc::Done::Done(CSAOPSvc::Done *this, id *a2)
{
  unsigned int v4 = CSHSM::State::State(this, "done");
  *(void *)unsigned int v4 = &off_1003B3F50;
  *((void *)v4 + 6) = a2;
  id v5 = [a2[6] newTimer];
  *((void *)this + 7) = v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10029F410;
  v7[3] = &unk_1003AA558;
  v7[4] = this;
  [v5 setHandler:v7];
  return this;
}

void sub_10029F3C8(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &off_1003BB190;
  unsigned int v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(void *)(v1 + 24) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_10029F410(uint64_t a1)
{
}

id CSAOPSvc::Done::entry(CSAOPSvc::Done *this, unint64_t a2, const void *a3)
{
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  unsigned int v4 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "enter the done state", v8, 2u);
  }
  CSAOPSvc::updateMetadataAtEnd(*((CSAOPSvc **)this + 6));
  [*(id *)(*((void *)this + 6) + 1088) reset];
  uint64_t v5 = *((void *)this + 6);
  if (*(unsigned char *)(v5 + 1024)) {
    *(unsigned char *)(v5 + 1024) = 0;
  }
  *(unsigned char *)(v5 + 1072) = 0;
  double v6 = *(void **)(v5 + 1032);
  *(void *)(v5 + 1032) = 0;

  CSAOPSvc::stopAOPReading(*((CSAOPSvc **)this + 6));
  CSAOPSvc::closeFastpaths(*((CSAOPSvc **)this + 6));
  [*((id *)this + 7) setNextFireDelay:1.0 interval:1.79769313e308];
  [*(id *)(*((void *)this + 6) + 1064) releasePowerAssertion];
  [*(id *)(*((void *)this + 6) + 1064) powerlogActivity:5 state:CFAbsoluteTimeGetCurrent()];
  return [*(id *)(*((void *)this + 6) + 16) replyToXPCMessage];
}

void CSAOPSvc::updateMetadataAtEnd(CSAOPSvc *this)
{
  id v2 = +[CSPlatformInfo sharedInstance];
  uint64_t v63 = v2;
  if ([v2 isKappaDetectionDevice]) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = [v2 isKappaLoggingDevice] - 1;
  }
  uint64_t v4 = *((unsigned int *)this + 230);
  int v5 = *((_DWORD *)this + 231);
  char v6 = *((unsigned char *)this + 928);
  uint64_t v7 = *((unsigned __int8 *)this + 929);
  uint64_t v8 = *((unsigned __int8 *)this + 930);
  uint64_t v9 = *((unsigned __int8 *)this + 931);
  uint64_t v10 = *((unsigned __int8 *)this + 932);
  uint64_t v11 = *((void *)this + 118);
  uint64_t v12 = *((unsigned __int16 *)this + 476);
  unsigned int v61 = *((unsigned __int16 *)this + 477);
  int v13 = *((_DWORD *)this + 239);
  int v14 = *((_DWORD *)this + 240);
  int v15 = *((_DWORD *)this + 241);
  double v16 = *((double *)this + 121);
  unsigned int v58 = *((_DWORD *)this + 244);
  unsigned int v59 = *((unsigned __int8 *)this + 980);
  int v17 = *((_DWORD *)this + 246);
  int v18 = *((_DWORD *)this + 247);
  int v19 = *((_DWORD *)this + 248);
  unsigned int v55 = *((unsigned __int8 *)this + 997);
  unsigned int v56 = *((unsigned __int8 *)this + 996);
  unsigned int v54 = *((unsigned __int8 *)this + 998);
  if (v5 >= 1000) {
    int v5 = 1000;
  }
  unsigned int v57 = v5;
  __int16 v53 = (void *)*((void *)this + 129);
  v64[0] = @"hasGPS";
  uint64_t v51 = +[NSNumber numberWithInt:v4];
  v65[0] = v51;
  v64[1] = @"recordingUUID";
  int v52 = [*((id *)this + 131) UUIDString];
  v65[1] = v52;
  v64[2] = @"systemReleaseType";
  int v50 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v63 getSystemReleaseType]);
  v65[2] = v50;
  v64[3] = @"HW";
  unsigned int v49 = [v63 getSystemModel];
  v65[3] = v49;
  v64[4] = @"osVersionBuild";
  uint64_t v48 = [v63 getSystemVersionDescription];
  v65[4] = v48;
  v64[5] = @"kappaDeviceType";
  double v47 = +[NSNumber numberWithInt:v3];
  v65[5] = v47;
  v64[6] = @"martyDeviceType";
  int v46 = +[NSNumber numberWithInt:0];
  v65[6] = v46;
  v64[7] = @"hasAudio";
  unint64_t v45 = +[NSNumber numberWithBool:v6 & 1];
  v65[7] = v45;
  char v64[8] = @"trigger";
  uint64_t v44 = +[NSNumber numberWithUnsignedLongLong:v11];
  v65[8] = v44;
  v64[9] = @"kappaTriggerPathBitmap";
  unsigned int v43 = +[NSNumber numberWithUnsignedChar:v7];
  v65[9] = v43;
  v64[10] = @"martyTriggerPathBitmap";
  __int16 v42 = +[NSNumber numberWithUnsignedChar:v8];
  v65[10] = v42;
  v64[11] = @"btHint";
  uint64_t v41 = +[NSNumber numberWithUnsignedChar:v9];
  v65[11] = v41;
  v64[12] = @"gpsHint";
  __int16 v40 = +[NSNumber numberWithUnsignedChar:v10];
  v65[12] = v40;
  v64[13] = @"kappaArmedSeconds";
  unsigned int v39 = +[NSNumber numberWithUnsignedShort:v12];
  v65[13] = v39;
  v64[14] = @"martyArmedSeconds";
  double v62 = +[NSNumber numberWithUnsignedShort:v61];
  v65[14] = v62;
  v64[15] = @"enableMode";
  unint64_t v60 = +[NSNumber numberWithUnsignedChar:v59];
  v65[15] = v60;
  v64[16] = @"IMU0";
  LODWORD(v20) = v13;
  unsigned int v38 = +[NSNumber numberWithFloat:v20];
  v65[16] = v38;
  v64[17] = @"IMU1";
  LODWORD(v2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v14;
  uint64_t v37 = +[NSNumber numberWithFloat:v21];
  v65[17] = v37;
  v64[18] = @"IMU2";
  LODWORD(v22) = v15;
  uint64_t v36 = +[NSNumber numberWithFloat:v22];
  v65[18] = v36;
  v64[19] = @"deltaMaxIMUToTriggerTime";
  double v35 = +[NSNumber numberWithDouble:v16];
  v65[19] = v35;
  v64[20] = @"deltaMaxIMUToTriggerTimeIMU";
  uint64_t v23 = +[NSNumber numberWithInt:v58];
  v65[20] = v23;
  v64[21] = @"distToRoad";
  double v24 = +[NSNumber numberWithInt:v57];
  v65[21] = v24;
  v64[22] = @"maxAudioMeanTenMinPreFirstTrigger";
  LODWORD(v25) = v17;
  double v26 = +[NSNumber numberWithFloat:v25];
  v65[22] = v26;
  v64[23] = @"lastCompletedAudio15sWindowMeanFirstTrigger";
  LODWORD(v27) = v18;
  unsigned int v28 = +[NSNumber numberWithFloat:v27];
  v65[23] = v28;
  v64[24] = @"currentAudioWindowMeanFirstTrigger";
  LODWORD(v29) = v19;
  uint64_t v30 = +[NSNumber numberWithFloat:v29];
  v65[24] = v30;
  v64[25] = @"numAudioMaxEnvelopesFirstTrigger";
  int v31 = +[NSNumber numberWithUnsignedChar:v56];
  v65[25] = v31;
  v64[26] = @"locallyArmed";
  BOOL v32 = +[NSNumber numberWithUnsignedChar:v55];
  v65[26] = v32;
  v64[27] = @"overrideMode";
  double v33 = +[NSNumber numberWithUnsignedChar:v54];
  v65[27] = v33;
  double v34 = +[NSDictionary dictionaryWithObjects:v65 forKeys:v64 count:28];
  [v53 updateMetadata:v34];
}

void sub_10029FB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::stopAOPReading(CSAOPSvc *this)
{
  if (qword_1003DB690 != -1) {
    dispatch_once(&qword_1003DB690, &stru_1003B4078);
  }
  id v2 = qword_1003DB698;
  if (os_log_type_enabled((os_log_t)qword_1003DB698, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "stopping the aop streaming", buf, 2u);
  }
  unsigned __int8 v3 = 5;
  CSAOPSvc::sendCommand(this, &v3, 1u);
}

uint64_t CSAOPSvc::closeFastpaths(CSAOPSvc *this)
{
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  id v2 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "closing fastpaths", v5, 2u);
  }
  for (uint64_t i = 296; i != 920; i += 48)
    uint64_t result = CSFastpathGlue::close((CSAOPSvc *)((char *)this + i));
  return result;
}

uint64_t CSAOPSvc::Done::trigger(CSAOPSvc::Done *this, uint64_t a2, const void *a3)
{
  if (a2 != 4) {
    return 0;
  }
  [*(id *)(*((void *)this + 6) + 16) finishSession:a3];
  return *((void *)this + 6) + 64;
}

void CSAOPSvc::CSAOPSvc(CSAOPSvc *this, CSAnomalyEventService *a2, CLSilo *a3)
{
  int v5 = a2;
  char v6 = a3;
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  id v7 = (id)qword_1003DB6B8;
  *(void *)this = 0;
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v7;
  uint64_t v8 = v5;
  *((void *)this + 2) = v8;
  uint64_t v9 = objc_opt_new();
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = v9;
  uint64_t v10 = v6;
  *((void *)this + 6) = v10;
  *((void *)this + 7) = 0;
  CSHSM::State::State((CSAOPSvc *)((char *)this + 64), "idle");
  *((void *)this + 8) = &off_1003B3FD8;
  *((void *)this + 14) = this;
  CSAOPSvc::Reading::Reading((CSAOPSvc *)((char *)this + 120), this, v10);
  CSAOPSvc::Done::Done((CSAOPSvc *)((char *)this + 232), (id *)this);
  for (uint64_t i = 328; i != 952; i += 48)
    *(void *)((char *)this + i) = 0;
  *((unsigned char *)this + 1016) = 0;
  *((unsigned char *)this + 1024) = 0;
  *((void *)this + 133) = 0;
  *((unsigned char *)this + 1072) = 0;
  *(_WORD *)((char *)this + 1075) = 0;
  *((void *)this + 129) = 0;
  *((void *)this + 13CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *((void *)this + 130) = 0;
  *((unsigned char *)this + 1056) = 0;
  *((void *)this + 136) = objc_alloc_init(CSSyncQueue);
  *((void *)this + 137) = objc_alloc_init(CSAPEventsBuffer);
  bzero((char *)this + 296, 0x270uLL);
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  uint64_t v12 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "init", v13, 2u);
  }
}

void sub_1002A00CC(_Unwind_Exception *a1)
{
  sub_1002A01A4(v5);
  sub_1002A01FC(v4);
  *(void *)(v1 + 64) = &off_1003BB190;
  id v7 = *(void **)(v1 + 80);
  if (v7)
  {
    *(void *)(v1 + 88) = v7;
    operator delete(v7);
  }

  _Unwind_Resume(a1);
}

void sub_1002A019C()
{
}

uint64_t sub_1002A01A4(uint64_t a1)
{
  *(void *)a1 = &off_1003BB190;
  id v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1002A01FC(uint64_t a1)
{
  *(void *)a1 = &off_1003BB190;
  id v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_1002A026C(void *a1)
{
  *a1 = &off_1003BB190;
  id v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void CSAOPSvc::sendCommand(CSAOPSvc *this, const unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v4 = (void *)*((void *)this + 4);
  id v9 = 0;
  unsigned __int8 v5 = [v4 setReport:a2 reportLength:a3 withIdentifier:0 forType:1 error:&v9];
  id v6 = v9;
  if ((v5 & 1) == 0)
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    id v7 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
    {
      int v8 = *a2;
      *(_DWORD *)long long buf = 67109378;
      int v11 = v8;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "cmd(%u) HIDDevice setReport failed %@", buf, 0x12u);
    }
  }
}

uint64_t CSAOPSvc::stopDetection(uint64_t this)
{
  *(unsigned char *)(this + 200) = 1;
  return this;
}

uint64_t CSAOPSvc::stopCollection(uint64_t this)
{
  *(unsigned char *)(this + 20CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 1;
  return this;
}

void CSAOPSvc::suppressTriggers(CSAOPSvc *this, int a2)
{
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  uint64_t v4 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "suppressing triggers %d", (uint8_t *)v5, 8u);
  }
  *((unsigned char *)this + 1073) = a2;
}

id CSAOPSvc::reset(id *this)
{
  if (qword_1003DB690 != -1) {
    dispatch_once(&qword_1003DB690, &stru_1003B4078);
  }
  id v2 = qword_1003DB698;
  if (os_log_type_enabled((os_log_t)qword_1003DB698, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "go back to idle state", v4, 2u);
  }
  CSHSM::signal((CSHSM *)this, 4, 0);
  id result = [this[136] reset];
  if (*((unsigned char *)this + 1024)) {
    *((unsigned char *)this + 1024) = 0;
  }
  *((unsigned char *)this + 1072) = 0;
  *((unsigned char *)this + 1056) = 0;
  return result;
}

id CSAOPSvc::getArmedState(id *this, CSArmedSeconds *a2)
{
  unsigned __int8 v3 = a2;
  if (v3)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)int v14 = 0u;
    long long v15 = 0u;
    v14[0] = 4;
    id v10 = 0;
    uint64_t v11 = 128;
    id v4 = [this[4] getReport:v14 reportLength:&v11 withIdentifier:4 forType:1 error:&v10];
    id v5 = v10;
    if (v4)
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      id v6 = qword_1003DB6B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v13) = v15;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "armed seconds %d", buf, 8u);
      }
      [(CSArmedSeconds *)v3 setArmedSeconds:v15];
      [(CSArmedSeconds *)v3 setIsArmed:BYTE4(v15)];
    }
    else
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      int v8 = qword_1003DB6B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "getReport failed %@", buf, 0xCu);
      }
    }
  }
  else
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    id v7 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "query nil", v14, 2u);
    }
    id v4 = 0;
  }

  return v4;
}

void sub_1002A07C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CSAOPSvc::getArmedClients(id *this, CSArmedClients *a2)
{
  unsigned __int8 v3 = a2;
  if (v3)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)long long v18 = 0u;
    long long v19 = 0u;
    v18[0] = 5;
    id v10 = 0;
    uint64_t v11 = 128;
    id v4 = [this[4] getReport:v18 reportLength:&v11 withIdentifier:5 forType:1 error:&v10];
    id v5 = v10;
    if (v4)
    {
      [(CSArmedClients *)v3 setKappaArmedSeconds:v19];
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      id v6 = qword_1003DB6B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109888;
        *(_DWORD *)id v13 = v19;
        *(_WORD *)&void v13[4] = 1024;
        *(_DWORD *)&v13[6] = DWORD1(v19);
        __int16 v14 = 1024;
        int v15 = DWORD2(v19);
        __int16 v16 = 1024;
        int v17 = v20;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "clients %d %d %d %d", buf, 0x1Au);
      }
      [(CSArmedClients *)v3 setMartyArmedSecondsLocal:DWORD1(v19)];
      [(CSArmedClients *)v3 setMartyArmedSecondsRemote:DWORD2(v19)];
      [(CSArmedClients *)v3 setEnableMode:v20];
    }
    else
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      int v8 = qword_1003DB6B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)id v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "getReport failed %@", buf, 0xCu);
      }
    }
  }
  else
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    id v7 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "query nil", v18, 2u);
    }
    id v4 = 0;
  }

  return v4;
}

void sub_1002A0A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CSAOPSvc::getStat(CSAOPSvc *this, CSCAStat *a2)
{
  id v4 = a2;
  id v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    int v8 = (void *)*((void *)this + 7);
    id v7 = (id *)((char *)this + 56);
    id v6 = v8;
    if (v8)
    {
      -[CSCAStat setUserAge:](v4, "setUserAge:", [v6 userAge]);
      -[CSCAStat setSex:](v4, "setSex:", [*v7 sex]);
      -[CSCAStat setMcc1:](v4, "setMcc1:", [*v7 mcc1]);
      -[CSCAStat setMnc1:](v4, "setMnc1:", [*v7 mnc1]);
      -[CSCAStat setMcc2:](v4, "setMcc2:", [*v7 mcc2]);
      -[CSCAStat setMnc2:](v4, "setMnc2:", [*v7 mnc2]);
      -[CSCAStat setArmedSec:](v4, "setArmedSec:", [*v7 armedSec]);
      -[CSCAStat setArmedSecMartyLocal:](v4, "setArmedSecMartyLocal:", [*v7 armedSecMartyLocal]);
      -[CSCAStat setArmedSecMartyRemote:](v4, "setArmedSecMartyRemote:", [*v7 armedSecMartyRemote]);
      -[CSCAStat setArmedSecMartyBicycle:](v4, "setArmedSecMartyBicycle:", [*v7 armedSecMartyBicycle]);
      uint64_t v9 = 1;
    }
    else
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v28 = 0u;
      buf[0] = 3;
      id v19 = 0;
      uint64_t v20 = 128;
      uint64_t v9 = (uint64_t)[v5 getReport:buf reportLength:&v20 withIdentifier:3 forType:1 error:&v19];
      id v11 = v19;
      if (v9)
      {
        [(CSCAStat *)v4 setUserAge:(char)v28];
        [(CSCAStat *)v4 setSex:BYTE1(v28)];
        [(CSCAStat *)v4 setMcc1:SWORD1(v28)];
        [(CSCAStat *)v4 setMnc1:SWORD2(v28)];
        [(CSCAStat *)v4 setMcc2:SWORD3(v28)];
        [(CSCAStat *)v4 setMnc2:SWORD4(v28)];
        [(CSCAStat *)v4 setArmedSec:WORD5(v28)];
        [(CSCAStat *)v4 setArmedSecMartyLocal:HIWORD(v28)];
        [(CSCAStat *)v4 setArmedSecMartyRemote:(unsigned __int16)v29];
        [(CSCAStat *)v4 setArmedSecMartyBicycle:WORD6(v28)];
        objc_storeStrong(v7, a2);
        if (qword_1003DB6B0 != -1) {
          dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
        }
        __int16 v12 = (id)qword_1003DB6B8;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v13 = [(CSCAStat *)v4 armedSec];
          unsigned int v14 = [(CSCAStat *)v4 armedSecMartyLocal];
          unsigned int v15 = [(CSCAStat *)v4 armedSecMartyRemote];
          unsigned int v16 = [(CSCAStat *)v4 armedSecMartyBicycle];
          *(_DWORD *)long long v21 = 67109888;
          *(_DWORD *)long long v22 = v13;
          *(_WORD *)&v22[4] = 1024;
          *(_DWORD *)&v22[6] = v14;
          __int16 v23 = 1024;
          unsigned int v24 = v15;
          __int16 v25 = 1024;
          unsigned int v26 = v16;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "kappa sec %d marty local %d remote %d bicycle %d", v21, 0x1Au);
        }
      }
      else
      {
        if (qword_1003DB6B0 != -1) {
          dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
        }
        int v17 = qword_1003DB6B8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long v21 = 138412290;
          *(void *)long long v22 = v11;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "getReport failed %@", v21, 0xCu);
        }
      }
    }
  }
  else
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    id v10 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Invalid _device", buf, 2u);
    }
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1002A0E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CSAOPSvc::clearStat(CSAOPSvc *this)
{
  *((void *)this + 7) = 0;
  return _objc_release_x1();
}

void CSAOPSvc::begin(CSAOPSvc *this)
{
  CSHSM::initial(this, (CSAOPSvc *)((char *)this + 64));

  CSAOPSvc::openHidManager(this);
}

void CSAOPSvc::openHidManager(CSAOPSvc *this)
{
  id v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    [v2 open];
    [*((id *)this + 3) setDeviceMatching:&off_1003C34A0];
    unsigned __int8 v3 = (void *)*((void *)this + 3);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1002A1080;
    v9[3] = &unk_1003B3F88;
    v9[4] = this;
    [v3 setDeviceNotificationHandler:v9];
    id v4 = (void *)*((void *)this + 3);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1002A1858;
    void v8[3] = &unk_1003B3FA8;
    v8[4] = this;
    [v4 setInputReportHandler:v8];
    id v5 = (void *)*((void *)this + 3);
    id v6 = [*((id *)this + 6) queue];
    [v5 setDispatchQueue:v6];

    [*((id *)this + 3) activate];
  }
  else
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    id v7 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "NULL IOHIDManager", buf, 2u);
    }
  }
}

void sub_1002A1070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A1080(uint64_t a1, void *a2, int a3)
{
  kern_return_t RegistryEntryID;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t entryID;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  CSAOPSvc *v19;

  id v5 = a2;
  id v6 = *(CSAOPSvc **)(a1 + 32);
  entryID = 0;
  RegistryEntryID = IORegistryEntryGetRegistryEntryID((io_registry_entry_t)[v5 service], &entryID);
  if (RegistryEntryID)
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    int v8 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v17) = RegistryEntryID;
      uint64_t v9 = "IORegistryEntryGetRegistryEntryID failed 0x%x";
      id v10 = v8;
      id v11 = OS_LOG_TYPE_FAULT;
      __int16 v12 = 8;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, buf, v12);
    }
  }
  else
  {
    if (!a3)
    {
      CSAOPSvc::onServiceRemoved(v6);
      goto LABEL_19;
    }
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    unsigned int v13 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134218240;
      int v17 = entryID;
      long long v18 = 2048;
      id v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "A new safety device entry ID %llu, this %p", buf, 0x16u);
    }
    if (!*((void *)v6 + 4))
    {
      CSAOPSvc::onServiceAdded((uint64_t)v6, v5);
      goto LABEL_19;
    }
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    unsigned int v14 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v9 = "unexpected duplicate safety device";
      id v10 = v14;
      id v11 = OS_LOG_TYPE_ERROR;
      __int16 v12 = 2;
      goto LABEL_6;
    }
  }
LABEL_19:
}

void sub_1002A1290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::onServiceAdded(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(a1 + 32), a2);
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  id v5 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "setting fastpaths device %p", buf, 0xCu);
  }
  long long v48 = 0u;
  long long v49 = 0u;
  long long v47 = 0u;
  long long v45 = 0u;
  memset(v46, 0, sizeof(v46));
  *(_OWORD *)long long buf = 0u;
  long long v44 = 0u;
  id v35 = 0;
  uint64_t v36 = 128;
  unsigned __int8 v7 = [v4 getReport:buf reportLength:&v36 withIdentifier:0 forType:1 error:&v35];
  id v8 = v35;
  if (v7)
  {
    if (((char)v44 & 0x80000000) == 0)
    {
      unsigned int v9 = DWORD1(v44);
      *(_DWORD *)(a1 + 1004) = DWORD1(v44) & 0xFFFFFFF;
      *(unsigned char *)(a1 + 1000) = v9 >> 28;
      uint64_t v10 = *((void *)&v44 + 1);
      *(void *)(a1 + 1008) = *((void *)&v44 + 1);
      if (v10 && !*(unsigned char *)(a1 + 1024))
      {
        *(void *)(a1 + 1016) = v10;
        *(unsigned char *)(a1 + 1024) = 1;
      }
      *(CFAbsoluteTime *)(a1 + 1080) = CFAbsoluteTimeGetCurrent();
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      id v11 = qword_1003DB6B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 1008);
        int v13 = *(unsigned __int8 *)(a1 + 1000);
        int v14 = *(_DWORD *)(a1 + 1004);
        *(_DWORD *)uint64_t v37 = 134218752;
        *(void *)unsigned int v38 = v12;
        *(_WORD *)&v38[8] = 2048;
        uint64_t v39 = *(void *)&buf[8];
        *(_WORD *)__int16 v40 = 1024;
        *(_DWORD *)&v40[2] = v13;
        __int16 v41 = 1024;
        int v42 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Service added trigger timestamp %llu, now %llu, RMS session %u SN %d", v37, 0x22u);
      }
      if (*(void *)&buf[8] - *(void *)(a1 + 1008) <= 0x1E847FuLL)
      {
        unsigned int v15 = [CSSPUKappaTrigger alloc];
        LODWORD(v17) = DWORD1(v45);
        LODWORD(v16) = v45;
        LOWORD(v19) = WORD2(v49);
        LOWORD(v18) = WORD1(v49);
        LOWORD(v20) = WORD3(v49);
        LODWORD(v22) = DWORD2(v48);
        LODWORD(v2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = DWORD1(v48);
        BYTE4(v34) = BYTE12(v48);
        WORD1(v34) = v49;
        LOWORD(v34) = *(_WORD *)((char *)&v48 + 13);
        BYTE1(v33) = v47;
        LOBYTE(v33) = BYTE8(v49);
        LODWORD(v32) = *(_DWORD *)((char *)v46 + 14);
        BYTE2(v3CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = BYTE12(v45);
        LOWORD(v3CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = WORD5(v45);
        __int16 v23 = -[CSSPUKappaTrigger initWithTimestamp:meta:decel:impact:path:armedSec:motionHint:gpsHint:basebandHint:wifiHint:btHint:lastValidImuTimestamp:vehicleProbabilityLongTermMean:martyPath:enableMode:martyArmedSec:companionAopTs:maxMeanTenMinPreTrigger:lastCompleted15sWindowMean:currentWindowMean:numMaxEnvelopes:igneousPath:igneousGUID:martyImpactMagnitude:martyRotationMagnitude:overrideMode:martyIsBicycle:martyArmedSecBicycle:locallyArmed:](v15, "initWithTimestamp:meta:decel:impact:path:armedSec:motionHint:gpsHint:basebandHint:wifiHint:btHint:lastValidImuTimestamp:vehicleProbabilityLongTermMean:martyPath:enableMode:martyArmedSec:companionAopTs:maxMeanTenMinPreTrigger:lastCompleted15sWindowMean:currentWindowMean:numMaxEnvelopes:igneousPath:igneousGUID:martyImpactMagnitude:martyRotationMagnitude:overrideMode:martyIsBicycle:martyArmedSecBicycle:locallyArmed:", *((void *)&v44 + 1), v44, BYTE1(v44), WORD1(v44), SBYTE8(v45), SBYTE9(v45), v16, v17, v18, v19, v20, v21, v22, v31,
                *(void *)&v46[0],
                (char *)v46 + 8,
                v32,
                *((void *)&v46[1] + 1),
                v33,
                (char *)&v47 + 1,
                v34);
        if (*(unsigned char *)(a1 + 1073))
        {
          if (qword_1003DB6B0 != -1) {
            dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
          }
          unsigned int v24 = qword_1003DB6B8;
          if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v37 = 0;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "suppressing trigger until detection service is ready", v37, 2u);
          }
        }
        else
        {
          objc_storeStrong((id *)(a1 + 40), v23);
          if (qword_1003DB6B0 != -1) {
            dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
          }
          unsigned int v26 = (id)qword_1003DB6B8;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            int v27 = *((unsigned __int8 *)[(CSSPUKappaTrigger *)v23 c_struct] + 1);
            int v28 = *((unsigned __int8 *)[(CSSPUKappaTrigger *)v23 c_struct] + 46);
            int v29 = *((unsigned __int8 *)[(CSSPUKappaTrigger *)v23 c_struct] + 64);
            int v30 = *((unsigned __int8 *)[(CSSPUKappaTrigger *)v23 c_struct] + 47);
            *(_DWORD *)uint64_t v37 = 67109888;
            *(_DWORD *)unsigned int v38 = v27;
            *(_WORD *)&v38[4] = 1024;
            *(_DWORD *)&v38[6] = v28;
            LOWORD(v39) = 1024;
            *(_DWORD *)((char *)&v39 + 2) = v29;
            HIWORD(v39) = 1024;
            *(_DWORD *)__int16 v40 = v30;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "aop trigger path %d marty path %d igneous path %d enabledMode %d", v37, 0x1Au);
          }

          CSHSM::signal((CSHSM *)a1, 1, 0);
        }
      }
    }
  }
  else
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    __int16 v25 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v37 = 138412290;
      *(void *)unsigned int v38 = v8;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "getReport failed %@", v37, 0xCu);
    }
  }
}

void sub_1002A1758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::onServiceRemoved(CSAOPSvc *this)
{
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  id v2 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "safety service disappeared!", v5, 2u);
  }
  for (uint64_t i = 296; i != 920; i += 48)
    CSFastpathGlue::close((CSAOPSvc *)((char *)this + i));
  id v4 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
}

void sub_1002A1858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v8 = a6;
  if (!a4) {
    CSAOPSvc::onInputReport(*(CSAOPSvc **)(a1 + 32), v8);
  }
}

void sub_1002A18B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::onInputReport(CSAOPSvc *this, NSData *a2)
{
  unsigned __int8 v3 = a2;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v49 = 0u;
  long long v47 = 0u;
  memset(v48, 0, sizeof(v48));
  long long __dst = 0u;
  long long v46 = 0u;
  int v4 = [(NSData *)v3 length];
  if (v4 >= 129)
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    id v5 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)__int16 v40 = v4;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&unsigned char v40[6] = 128;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "mismatch between report and nsdata sizes %d %d", buf, 0xEu);
    }
  }
  uint64_t v6 = v3;
  id v7 = [(NSData *)v6 bytes];
  if (v4 >= 128) {
    int v8 = 128;
  }
  else {
    int v8 = v4;
  }
  memcpy(&__dst, v7, v8);
  int v9 = __dst;
  switch((char)__dst)
  {
    case 0:
      unsigned int v10 = DWORD1(v46);
      *((_DWORD *)this + 25CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = DWORD1(v46) & 0xFFFFFFF;
      *((unsigned char *)this + 1000) = v10 >> 28;
      uint64_t v11 = *((void *)&v46 + 1);
      *((void *)this + 126) = *((void *)&v46 + 1);
      if (v11 && !*((unsigned char *)this + 1024))
      {
        *((void *)this + 127) = v11;
        *((unsigned char *)this + 1024) = 1;
      }
      *((CFAbsoluteTime *)this + 135) = CFAbsoluteTimeGetCurrent();
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      uint64_t v12 = qword_1003DB6B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *((void *)this + 126);
        uint64_t v14 = *((void *)&__dst + 1);
        int v15 = *((unsigned __int8 *)this + 1000);
        int v16 = *((_DWORD *)this + 251);
        *(_DWORD *)long long buf = 134218752;
        *(void *)__int16 v40 = v13;
        *(_WORD *)&v40[8] = 2048;
        uint64_t v41 = *((void *)&__dst + 1);
        *(_WORD *)int v42 = 1024;
        *(_DWORD *)&v42[2] = v15;
        __int16 v43 = 1024;
        int v44 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "trigger timestamp %llu, now %llu, RMS session %u SN %d", buf, 0x22u);
      }
      else
      {
        uint64_t v14 = *((void *)&__dst + 1);
      }
      if ((unint64_t)(v14 - *((void *)this + 126)) <= 0x1E847F)
      {
        double v20 = [CSSPUKappaTrigger alloc];
        LODWORD(v22) = DWORD1(v47);
        LODWORD(v2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v47;
        LOWORD(v24) = WORD2(v51);
        LOWORD(v23) = WORD1(v51);
        LOWORD(v25) = WORD3(v51);
        LODWORD(v27) = DWORD2(v50);
        LODWORD(v26) = DWORD1(v50);
        BYTE4(v38) = BYTE12(v50);
        WORD1(v38) = v51;
        LOWORD(v38) = *(_WORD *)((char *)&v50 + 13);
        BYTE1(v37) = v49;
        LOBYTE(v37) = BYTE8(v51);
        LODWORD(v36) = *(_DWORD *)((char *)v48 + 14);
        BYTE2(v35) = BYTE12(v47);
        LOWORD(v35) = WORD5(v47);
        int v28 = -[CSSPUKappaTrigger initWithTimestamp:meta:decel:impact:path:armedSec:motionHint:gpsHint:basebandHint:wifiHint:btHint:lastValidImuTimestamp:vehicleProbabilityLongTermMean:martyPath:enableMode:martyArmedSec:companionAopTs:maxMeanTenMinPreTrigger:lastCompleted15sWindowMean:currentWindowMean:numMaxEnvelopes:igneousPath:igneousGUID:martyImpactMagnitude:martyRotationMagnitude:overrideMode:martyIsBicycle:martyArmedSecBicycle:locallyArmed:](v20, "initWithTimestamp:meta:decel:impact:path:armedSec:motionHint:gpsHint:basebandHint:wifiHint:btHint:lastValidImuTimestamp:vehicleProbabilityLongTermMean:martyPath:enableMode:martyArmedSec:companionAopTs:maxMeanTenMinPreTrigger:lastCompleted15sWindowMean:currentWindowMean:numMaxEnvelopes:igneousPath:igneousGUID:martyImpactMagnitude:martyRotationMagnitude:overrideMode:martyIsBicycle:martyArmedSecBicycle:locallyArmed:", v11, v46, BYTE1(v46), WORD1(v46), SBYTE8(v47), SBYTE9(v47), v21, v22, v23, v24, v25, v26, v27, v35,
                *(void *)&v48[0],
                (char *)v48 + 8,
                v36,
                *((void *)&v48[1] + 1),
                v37,
                (char *)&v49 + 1,
                v38);
        if (*((unsigned char *)this + 1073))
        {
          if (qword_1003DB6B0 != -1) {
            dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
          }
          int v29 = qword_1003DB6B8;
          if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "suppressing trigger until detection service is ready", buf, 2u);
          }
        }
        else
        {
          objc_storeStrong((id *)this + 5, v28);
          if (qword_1003DB6B0 != -1) {
            dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
          }
          int v30 = (id)qword_1003DB6B8;
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            int v31 = *((unsigned __int8 *)[(CSSPUKappaTrigger *)v28 c_struct] + 1);
            int v32 = *((unsigned __int8 *)[(CSSPUKappaTrigger *)v28 c_struct] + 46);
            int v33 = *((unsigned __int8 *)[(CSSPUKappaTrigger *)v28 c_struct] + 64);
            int v34 = *((unsigned __int8 *)[(CSSPUKappaTrigger *)v28 c_struct] + 47);
            *(_DWORD *)long long buf = 67109888;
            *(_DWORD *)__int16 v40 = v31;
            *(_WORD *)&v40[4] = 1024;
            *(_DWORD *)&unsigned char v40[6] = v32;
            LOWORD(v4CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 1024;
            *(_DWORD *)((char *)&v41 + 2) = v33;
            HIWORD(v4CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 1024;
            *(_DWORD *)int v42 = v34;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "aop trigger path %d marty path %d igneous path %d enabledMode %d", buf, 0x1Au);
          }

          CSHSM::signal(this, 1, 0);
        }
      }
      break;
    case 1:
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      double v18 = qword_1003DB6B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO))
      {
        unint64_t v19 = *((void *)&__dst + 1);
        *(_DWORD *)long long buf = 134217984;
        *(void *)__int16 v40 = *((void *)&__dst + 1);
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "stream stopped at %llu", buf, 0xCu);
      }
      else
      {
        unint64_t v19 = *((void *)&__dst + 1);
      }
      if (v19 > *((void *)this + 126)) {
        CSHSM::signal(this, 3, 0);
      }
      break;
    case 2:
      [*((id *)this + 2) sosActivated];
      break;
    case 3:
      break;
    default:
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      double v17 = qword_1003DB6B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)__int16 v40 = v9;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Unexpected input report %u", buf, 8u);
      }
      break;
  }
}

void sub_1002A1E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1002A1EA0(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

char *CSAOPSvc::recordStreams(id *this, NSMutableArray *a2, int a3)
{
  size_t v5 = a2;
  uint64_t v6 = (char *)[(NSMutableArray *)v5 count];
  if (!v6)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v14 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    int v9 = 0;
    int v8 = 0;
    int v7 = 0;
    goto LABEL_72;
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v7 = 0;
  int v8 = 0;
  int v9 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v22 = 0;
  while (1)
  {
    unsigned int v10 = [(NSMutableArray *)v5 objectAtIndexedSubscript:v9];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      break;
    }
    if (a3) {
      [this[129] recordSoundPressureLevel:v10];
    }
    ++v8;
    *((unsigned char *)this + 928) = 1;
LABEL_7:

    if (v6 == ++v9)
    {
      int v9 = v6;
      goto LABEL_70;
    }
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    ++v7;
    if (a3) {
      [this[129] recordAccel800:v10];
    }
    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    ++HIDWORD(v29);
    if (a3) {
      [this[129] recordHgAccel:v10];
    }
    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    LODWORD(v29) = v29 + 1;
    if (a3) {
      [this[129] recordDeviceMotion:v10];
    }
    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    ++HIDWORD(v28);
    if (a3) {
      [this[129] recordPressure:v10];
    }
    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    LODWORD(v28) = v28 + 1;
    if (a3) {
      [this[129] recordAccel:v10];
    }
    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (a3) {
      [this[129] recordGPS:v10];
    }
    CSAOPSvc::processSample((CSAOPSvc *)this, v10);
    ++HIDWORD(v27);
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      double v21 = +[CSPersistentConfiguration sharedConfiguration];
      unsigned int v13 = [(CSSPUKappaTrigger *)v21 BOOLForKey:@"CSKappaRecordSteps"];

      ++v22;
      if ((v13 & a3) == 1) {
        [this[129] recordSteps:v10];
      }
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        LODWORD(v27) = v27 + 1;
        if (a3) {
          [this[129] recordMag:v10];
        }
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          ++HIDWORD(v26);
          if (a3) {
            [this[129] recordPressureCalibration:v10];
          }
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            LODWORD(v26) = v26 + 1;
            if (a3) {
              [this[129] recordSignificantUserInteraction:v10];
            }
          }
          else
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              if (a3) {
                [this[129] recordRoadInfo:v10];
              }
              CSAOPSvc::processSample((CSAOPSvc *)this, (CSSPURoadInfo *)v10);
              ++HIDWORD(v25);
            }
            else
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                LODWORD(v25) = v25 + 1;
                if (a3) {
                  [this[129] recordTrustedAudio:v10];
                }
              }
              else
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  ++HIDWORD(v24);
                  if (a3) {
                    [this[129] recordActivityPhone:v10];
                  }
                }
                else
                {
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
                    LODWORD(v24) = v24 + 1;
                    if (a3) {
                      [this[129] recordSafetyHertzSample:v10];
                    }
                  }
                  else
                  {
                    objc_opt_class();
                    if (objc_opt_isKindOfClass())
                    {
                      ++HIDWORD(v23);
                      if (a3) {
                        [this[129] recordCompanionStatus:v10];
                      }
                    }
                    else
                    {
                      objc_opt_class();
                      if (objc_opt_isKindOfClass())
                      {
                        LODWORD(v23) = v23 + 1;
                        if (a3) {
                          [this[129] recordRemoteSample:v10];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_7;
  }
  double v20 = v10;
  if (((char)[(CSSPUKappaTrigger *)v20 meta] & 0x80000000) == 0)
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    uint64_t v11 = (id)qword_1003DB6B8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v19 = [(CSSPUKappaTrigger *)v20 timestamp];
      int v12 = *((unsigned __int8 *)[(CSSPUKappaTrigger *)v20 c_struct] + 1);
      *(_DWORD *)long long buf = 134349568;
      *(void *)int v31 = v19;
      *(_WORD *)&v31[8] = 2048;
      int v32 = v20;
      *(_WORD *)int v33 = 1024;
      *(_DWORD *)&v33[2] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Notifying trigger %{public}llu %p %d", buf, 0x1Cu);
    }

    goto LABEL_42;
  }
  if ((id)[(CSSPUKappaTrigger *)v20 timestamp] <= this[126])
  {
LABEL_42:
    if (a3) {
      [this[129] recordKappaTrigger:v20];
    }
    CSAOPSvc::processSample((CSAOPSvc *)this, v20);

    goto LABEL_7;
  }
  double v17 = sub_10029B398();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v18 = [(CSSPUKappaTrigger *)v20 timestamp];
    *(_DWORD *)long long buf = 134349056;
    *(void *)int v31 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Notifying streaming finish %{public}llu", buf, 0xCu);
  }

LABEL_70:
  int v14 = v22;
LABEL_72:
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  int v15 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67113472;
    *(_DWORD *)int v31 = v7;
    *(_WORD *)&v31[4] = 1024;
    *(_DWORD *)&v31[6] = v29;
    LOWORD(v32) = 1024;
    *(_DWORD *)((char *)&v32 + 2) = HIDWORD(v28);
    HIWORD(v32) = 1024;
    *(_DWORD *)int v33 = v8;
    *(_WORD *)&v33[4] = 1024;
    int v34 = HIDWORD(v27);
    __int16 v35 = 1024;
    int v36 = HIDWORD(v29);
    __int16 v37 = 1024;
    int v38 = v14;
    __int16 v39 = 1024;
    int v40 = v28;
    __int16 v41 = 1024;
    int v42 = v27;
    __int16 v43 = 1024;
    int v44 = HIDWORD(v26);
    __int16 v45 = 1024;
    int v46 = v26;
    __int16 v47 = 1024;
    int v48 = HIDWORD(v25);
    __int16 v49 = 1024;
    int v50 = HIDWORD(v24);
    __int16 v51 = 1024;
    int v52 = 0;
    __int16 v53 = 1024;
    int v54 = v24;
    __int16 v55 = 1024;
    int v56 = HIDWORD(v23);
    __int16 v57 = 1024;
    int v58 = v23;
    __int16 v59 = 1024;
    int v60 = v25;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Sorted %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u", buf, 0x6Eu);
  }

  return v9;
}

void sub_1002A2734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t CSAOPSvc::processSample(uint64_t this, CSSPUSpl *a2)
{
  *(unsigned char *)(this + 928) = 1;
  return this;
}

void CSAOPSvc::processSample(CSAOPSvc *this, CSSPUGps *a2)
{
  unsigned __int8 v3 = a2;
  int v4 = *((_DWORD *)this + 230);
  if (!v4)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    LODWORD(Current) = sunElevationDeg(Current, *((float *)[(CSSPUGps *)v3 c_struct] + 4), *((float *)[(CSSPUGps *)v3 c_struct] + 5));
    uint64_t v6 = *((unsigned __int8 *)[(CSSPUGps *)v3 c_struct] + 32);
    int v7 = (void *)*((void *)this + 129);
    v12[0] = @"sunElevation";
    LODWORD(v8) = LODWORD(Current);
    int v9 = +[NSNumber numberWithFloat:v8];
    v12[1] = @"signalEnvironment";
    v13[0] = v9;
    unsigned int v10 = +[NSNumber numberWithUnsignedChar:v6];
    v13[1] = v10;
    uint64_t v11 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:2];
    [v7 updateMetadata:v11];

    int v4 = *((_DWORD *)this + 230);
  }
  *((_DWORD *)this + 230) = v4 + 1;
}

void sub_1002A2908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::processSample(CSAOPSvc *this, CSSPUKappaTrigger *a2)
{
  unsigned __int8 v3 = a2;
  int v4 = v3;
  if (!*((void *)this + 117))
  {
    _H0 = *((_WORD *)[(CSSPUKappaTrigger *)v3 c_struct] + 49);
    __asm { FCVT            S0, H0 }
    *((_DWORD *)this + 246) = _S0;
    _H0 = *((_WORD *)[(CSSPUKappaTrigger *)v4 c_struct] + 50);
    __asm { FCVT            S0, H0 }
    *((_DWORD *)this + 247) = _S0;
    _H0 = *((_WORD *)[(CSSPUKappaTrigger *)v4 c_struct] + 51);
    __asm { FCVT            S0, H0 }
    *((_DWORD *)this + 248) = _S0;
    *((unsigned char *)this + 996) = *((unsigned char *)[(CSSPUKappaTrigger *)v4 c_struct] + 104);
  }
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  int v15 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO))
  {
    double v16 = *((float *)this + 246);
    double v17 = *((float *)this + 247);
    double v18 = *((float *)this + 248);
    int v19 = *((unsigned __int8 *)this + 996);
    int v39 = 134218752;
    double v40 = v16;
    __int16 v41 = 2048;
    double v42 = v17;
    __int16 v43 = 2048;
    double v44 = v18;
    __int16 v45 = 1024;
    LODWORD(v46) = v19;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "historical loudness stats %f / %f / %f / %i", (uint8_t *)&v39, 0x26u);
  }
  if (!*((void *)this + 117))
  {
    *((void *)this + 117) = (unint64_t)CFAbsoluteTimeGetCurrent();
    *((void *)this + 118) = *((void *)[(CSSPUKappaTrigger *)v4 c_struct] + 1);
    *((unsigned char *)this + 93CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *((unsigned char *)[(CSSPUKappaTrigger *)v4 c_struct] + 28);
    *((unsigned char *)this + 932) = *((unsigned char *)[(CSSPUKappaTrigger *)v4 c_struct] + 25);
    *((_WORD *)this + 476) = *((_WORD *)[(CSSPUKappaTrigger *)v4 c_struct] + 1);
    *((_WORD *)this + 477) = *((_WORD *)[(CSSPUKappaTrigger *)v4 c_struct] + 24);
    *((unsigned char *)this + 998) = *((unsigned char *)[(CSSPUKappaTrigger *)v4 c_struct] + 93);
    *((unsigned char *)this + 997) = *((unsigned char *)[(CSSPUKappaTrigger *)v4 c_struct] + 92);
  }
  *((unsigned char *)this + 929) |= *((unsigned char *)[(CSSPUKappaTrigger *)v4 c_struct] + 1);
  *((unsigned char *)this + 930) |= *((unsigned char *)[(CSSPUKappaTrigger *)v4 c_struct] + 46);
  *((unsigned char *)this + 980) |= *((unsigned char *)[(CSSPUKappaTrigger *)v4 c_struct] + 47);
  _H0 = *((_WORD *)[(CSSPUKappaTrigger *)v4 c_struct] + 20);
  __asm { FCVT            S0, H0 }
  if (*((float *)this + 239) >= _S0)
  {
    int v22 = -1;
  }
  else
  {
    int v22 = 0;
    _H0 = *((_WORD *)[(CSSPUKappaTrigger *)v4 c_struct] + 20);
    __asm { FCVT            S0, H0 }
    *((_DWORD *)this + 239) = _S0;
  }
  _H0 = *((_WORD *)[(CSSPUKappaTrigger *)v4 c_struct] + 21);
  __asm { FCVT            S0, H0 }
  if (*((float *)this + 240) < _S0)
  {
    _H0 = *((_WORD *)[(CSSPUKappaTrigger *)v4 c_struct] + 21);
    __asm { FCVT            S0, H0 }
    *((_DWORD *)this + 240) = _S0;
    int v22 = 1;
  }
  _H0 = *((_WORD *)[(CSSPUKappaTrigger *)v4 c_struct] + 22);
  __asm { FCVT            S0, H0 }
  if (*((float *)this + 241) >= _S0)
  {
    if (v22 == -1) {
      goto LABEL_19;
    }
  }
  else
  {
    _H0 = *((_WORD *)[(CSSPUKappaTrigger *)v4 c_struct] + 22);
    __asm { FCVT            S0, H0 }
    *((_DWORD *)this + 24CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = _S0;
    int v22 = 2;
  }
  if (*((double *)this + 135) > 0.0)
  {
    *((double *)this + 12CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = (double)(unint64_t)(*((void *)[(CSSPUKappaTrigger *)v4 c_struct] + 1)
                                                       - *((void *)this + 117));
    *((_DWORD *)this + 244) = v22;
  }
LABEL_19:
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  int v33 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_INFO))
  {
    double v34 = *((float *)this + 239);
    double v35 = *((float *)this + 240);
    double v36 = *((float *)this + 241);
    uint64_t v37 = *((void *)this + 121);
    int v38 = *((_DWORD *)this + 244);
    int v39 = 134219008;
    double v40 = v34;
    __int16 v41 = 2048;
    double v42 = v35;
    __int16 v43 = 2048;
    double v44 = v36;
    __int16 v45 = 2048;
    uint64_t v46 = v37;
    __int16 v47 = 1024;
    int v48 = v38;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "trigger session stats %f / %f / %f / %f / %d", (uint8_t *)&v39, 0x30u);
  }
}

void sub_1002A2D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::processSample(CSAOPSvc *this, CSSPURoadInfo *a2)
{
  unsigned __int8 v3 = a2;
  int v4 = (void *)*((void *)this + 129);
  v16[0] = @"roadClass";
  size_t v5 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)[(CSSPURoadInfo *)v3 c_struct] + 16)];
  v17[0] = v5;
  v16[1] = @"distToRoadHorizontalAccuracy";
  *(float *)&double v6 = roundf(*((float *)[(CSSPURoadInfo *)v3 c_struct] + 5));
  int v7 = +[NSNumber numberWithFloat:v6];
  v17[1] = v7;
  _DWORD v16[2] = @"numRoadFeaturesEvaluated";
  double v8 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)[(CSSPURoadInfo *)v3 c_struct] + 12)];
  uint64_t v17[2] = v8;
  v16[3] = @"GEOHandlerErrorDomain";
  id v9 = [[objc_alloc((Class)NSString) initWithBytes:((char *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 26), strnlen((const char *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 26, 0x40uLL), 1];
  v17[3] = v9;
  v16[4] = @"GEOHandlerErrorCode";
  unsigned int v10 = +[NSNumber numberWithLong:*((void *)[(CSSPURoadInfo *)v3 c_struct] + 12)];
  v17[4] = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:5];
  [v4 updateMetadata:v11];

  if (*((unsigned char *)[(CSSPURoadInfo *)v3 c_struct] + 16) != 9)
  {
    int v12 = *((_DWORD *)this + 231);
    if (v12 == -1 || *((double *)[(CSSPURoadInfo *)v3 c_struct] + 1) > (double)v12)
    {
      float v13 = *((double *)[(CSSPURoadInfo *)v3 c_struct] + 1);
      *((_DWORD *)this + 23CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = llroundf(v13);
    }
    else
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
      }
      int v14 = qword_1003DB6B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Received road info more than once per session.", v15, 2u);
      }
    }
  }
}

void sub_1002A2FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::setRecording(id *this, CSMSLDataRecording *a2, NSUUID *a3, char a4)
{
  double v8 = a2;
  id v9 = a3;
  if ((a4 & 1) == 0 && !CSHSM::isIn((CSHSM *)this, (CSHSM::State *)(this + 8)))
  {
    sub_1002A3DD0((NSObject **)buf);

    abort_report_np();
    __break(1u);
  }
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  unsigned int v10 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "setting msl recording for %@", buf, 0xCu);
  }
  objc_storeStrong(this + 129, a2);
  objc_storeStrong(this + 131, a3);
  *((unsigned char *)this + 1072) = 1;
  [this[129] updateMetadata:&off_1003C34C8];
}

void sub_1002A31DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CSAOPSvc::updateMetadataAtBegin(id *this)
{
  return [this[129] updateMetadata:&off_1003C34C8];
}

uint64_t CSAOPSvc::isRecording(CSAOPSvc *this)
{
  return *((unsigned __int8 *)this + 1072);
}

void CSAOPSvc::onCompanionStatusUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
  }
  double v6 = qword_1003DB6B8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    __int16 v9 = 2048;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CSCompanionStatus status=%d t=%llu", (uint8_t *)v8, 0x12u);
  }
  int v7 = [[CSCompanionStatus alloc] initWithTimestamp:a3 code:a2];
  [*(id *)(a1 + 1096) addObject:v7];
}

void sub_1002A3320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CSAOPSvc::onSafetyRemoteSample(id *this, const CSRemoteSample_Struct *a2)
{
  unint64_t v4 = +[CSTimeManager SPU_estimate_current_timestamp];
  long long v5 = *(_OWORD *)&a2->createdAtTimestamp;
  long long v7 = *(_OWORD *)&a2->mode;
  long long v8 = v5;
  long long v9 = *(_OWORD *)&a2->lastRealTriggerTimestamp;
  *((void *)&v8 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v4;
  double v6 = [[CSRemoteSample alloc] initWithStruct:&v7];
  [this[137] addObject:v6, v7, v8, v9];
}

void sub_1002A33AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A33BC(void *a1)
{
  *a1 = &off_1003BB190;
  id v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1002A342C(uint64_t a1)
{
  *(void *)a1 = &off_1003BB190;
  id v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1002A34BC(uint64_t a1)
{
  *(void *)a1 = &off_1003BB190;
  id v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1002A3534(id a1)
{
  qword_1003DB6B8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "AOP");

  _objc_release_x1();
}

void sub_1002A3578(id a1)
{
  qword_1003DB698 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Flow");

  _objc_release_x1();
}

void sub_1002A35C0()
{
}

void *sub_1002A35D4(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1003B40A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1002A361C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1003B40A8;
  a2[1] = v2;
  return result;
}

void sub_1002A3648(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if (v3)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = *(void *)(a1 + 8);
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    double v6 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(v4 + 16);
      v9[0] = 67109376;
      v9[1] = v3;
      __int16 v10 = 2048;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%u mag100 %llu", (uint8_t *)v9, 0x12u);
    }
    do
    {
      if (!*(unsigned char *)(v5 + 1056) && (unint64_t)(*(void *)(v4 + 16) + 180000000) >= *(void *)(v5 + 1008))
      {
        long long v8 = [[CSSPUMag alloc] initWithStruct:v4];
        [*(id *)(v5 + 1088) addObject:v8];
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
}

void sub_1002A3794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002A37AC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002A37EC()
{
}

BOOL sub_1002A37F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *sub_1002A3848(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1002A38D0()
{
}

void *sub_1002A38E4(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_1003B4138;
  result[1] = v3;
  return result;
}

uint64_t sub_1002A392C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1003B4138;
  a2[1] = v2;
  return result;
}

void sub_1002A3958(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if (v3)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = *(void *)(a1 + 8);
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B4058);
    }
    double v6 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(v4 + 92);
      v11[0] = 67109376;
      v11[1] = v3;
      __int16 v12 = 2048;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%u DM200 %llu", (uint8_t *)v11, 0x12u);
    }
    uint64_t v8 = v4 + 28;
    do
    {
      if (*(unsigned char *)(v5 + 1056)) {
        uint64_t v9 = 90000000;
      }
      else {
        uint64_t v9 = 180000000;
      }
      if ((unint64_t)(v9 + *(void *)(v8 + 14)) >= *(void *)(v5 + 1008))
      {
        __int16 v10 = [[CSSPUDM alloc] initWithTimestamp:*(void *)(v8 + 14) quaternion:v8 - 28 rate:v8 - 12 userAccel:v8];
        [*(id *)(v5 + 1088) addObject:v10];
      }
      v8 += 50;
      --v3;
    }
    while (v3);
  }
}

void sub_1002A3AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002A3AE0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002A3B20()
{
}

void sub_1002A3B2C(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, a2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, a7, 0x26u);
}

uint64_t sub_1002A3B50()
{
  uint64_t v0 = sub_10029B398();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    sub_10000BDD8();
    sub_10002CCEC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"restartSession can only happen in reading\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v19, v20, v21, v22, v23[0]);
  }

  uint64_t v7 = sub_10029B398();
  if (os_signpost_enabled(v7))
  {
    sub_10000BDD8();
    sub_1002A3B2C((void *)&_mh_execute_header, v7, v8, v9, "restartSession can only happen in reading", "{\"msg%{public}.0s\":\"restartSession can only happen in reading\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v23);
  }

  __int16 v10 = sub_10029B398();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    sub_10000BDD8();
    sub_10002CCCC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"restartSession can only happen in reading\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v19, v20, v21, v22, v23[0]);
  }

  uint64_t v17 = abort_report_np();
  return sub_1002A3C8C(v17);
}

uint64_t sub_1002A3C8C()
{
  uint64_t v0 = sub_10029B398();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    sub_10000BDD8();
    sub_10002CCEC((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"trigger is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v18, v19, v20, v21, v22[0]);
  }

  uint64_t v7 = sub_10029B398();
  if (os_signpost_enabled(v7))
  {
    sub_10000BDD8();
    sub_1002A3B2C((void *)&_mh_execute_header, v7, v8, v9, "trigger is null", "{\"msg%{public}.0s\":\"trigger is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v22);
  }

  __int16 v10 = sub_10029B398();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    sub_10000BDD8();
    sub_10002CCCC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"trigger is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v18, v19, v20, v21, v22[0]);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void sub_1002A3DD0(NSObject **a1)
{
  int v2 = sub_10029B398();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    sub_10001A968();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"recording details can only be set in idle\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7, 0x26u);
  }

  int v3 = sub_10029B398();
  if (os_signpost_enabled(v3))
  {
    sub_10001A968();
    sub_1002A3B2C((void *)&_mh_execute_header, v3, v4, v5, "recording details can only be set in idle", "{\"msg%{public}.0s\":\"recording details can only be set in idle\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }

  int v6 = sub_10029B398();
  *a1 = v6;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    sub_10001A968();
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"recording details can only be set in idle\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7, 0x26u);
  }
}

unint64_t CLRobustMaxAccelNorm::findPreviousChunkBoundary(unint64_t this)
{
  return 50000 * (this / 0xC350);
}

int64x2_t CLRobustMaxAccelNorm::resetChunks(CLRobustMaxAccelNorm *this, unint64_t a2)
{
  unint64_t v2 = 50000 * (a2 / 0xC350);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 2) = v2;
  *((void *)this + 3) = v2 + 100000;
  int64x2_t result = vaddq_s64(vdupq_n_s64(v2), (int64x2_t)xmmword_10033EBC0);
  *(int64x2_t *)this = result;
  return result;
}

BOOL CLRobustMaxAccelNorm::currentChunkBoundaryExceeded(CLRobustMaxAccelNorm *this, unint64_t a2)
{
  return *((void *)this + 1) <= a2;
}

BOOL CLRobustMaxAccelNorm::nextChunkBoundaryExceeded(CLRobustMaxAccelNorm *this, unint64_t a2)
{
  return *((void *)this + 3) <= a2;
}

float CLRobustMaxAccelNorm::currentChunkMaxAccelNorm(CLRobustMaxAccelNorm *this)
{
  return sqrtf((float)((float)(*((float *)this + 9) * *((float *)this + 9))+ (float)(*((float *)this + 8) * *((float *)this + 8)))+ (float)(*((float *)this + 10) * *((float *)this + 10)));
}

int8x8_t CLRobustMaxAccelNorm::updateMaxes(CLRobustMaxAccelNorm *this, int8x16_t a2, int8x16_t a3, float a4)
{
  *(float *)a2.i32 = fabsf(*(float *)a2.i32);
  *(float *)&a3.i32[1] = a4;
  *(float32x2_t *)a3.i8 = vabs_f32(*(float32x2_t *)a3.i8);
  float32x4_t v4 = (float32x4_t)vextq_s8(vextq_s8(a2, a2, 4uLL), a3, 0xCuLL);
  v4.i32[3] = v4.i32[0];
  *((int8x16_t *)this + 2) = vbslq_s8((int8x16_t)vcgtq_f32(v4, *((float32x4_t *)this + 2)), (int8x16_t)v4, *((int8x16_t *)this + 2));
  int8x8_t result = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a3.i8, *(float32x2_t *)((char *)this + 48)), *(int8x8_t *)a3.i8, *(int8x8_t *)((char *)this + 48));
  *((int8x8_t *)this + 6) = result;
  return result;
}

__n128 CLRobustMaxAccelNorm::switchChunks(CLRobustMaxAccelNorm *this)
{
  *((void *)this + 4) = *(void *)((char *)this + 44);
  *((_DWORD *)this + 10) = *((_DWORD *)this + 13);
  __n128 result = *((__n128 *)this + 1);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *(__n128 *)this = result;
  *((int64x2_t *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = vaddq_s64(vdupq_lane_s64(result.n128_i64[0], 0), (int64x2_t)xmmword_10033EBD0);
  return result;
}

float CLRobustMaxAccelNorm::run(uint64_t a1, void *a2)
{
  id v3 = a2;
  float32x4_t v4 = (char *)[v3 count];
  if (v4)
  {
    uint64_t v5 = 0;
    float v6 = 0.0;
    int64x2_t v24 = (int64x2_t)xmmword_10033EBD0;
    do
    {
      uint64_t v7 = [v3 objectAtIndex:v5 *(_OWORD *)&v24];
      unint64_t v8 = [v7 c_struct];
      unint64_t v9 = *(void *)(a1 + 24);
      if (v9 <= v8)
      {
        float v11 = sqrtf((float)((float)(*(float *)(a1 + 36) * *(float *)(a1 + 36))+ (float)(*(float *)(a1 + 32) * *(float *)(a1 + 32)))+ (float)(*(float *)(a1 + 40) * *(float *)(a1 + 40)));
        if (v6 < v11) {
          float v6 = v11;
        }
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        unint64_t v12 = 50000 * (v8 / 0xC350);
        unint64_t v9 = v12 + 100000;
        *(void *)(a1 + 16) = v12;
        *(void *)(a1 + 24) = v12 + 100000;
        unint64_t v13 = v12 - 50000;
        unint64_t v10 = v12 + 50000;
        *(void *)a1 = v13;
        *(void *)(a1 + 8) = v10;
      }
      else
      {
        unint64_t v10 = *(void *)(a1 + 8);
      }
      if (v10 <= v8)
      {
        float v14 = sqrtf((float)((float)(*(float *)(a1 + 36) * *(float *)(a1 + 36))+ (float)(*(float *)(a1 + 32) * *(float *)(a1 + 32)))+ (float)(*(float *)(a1 + 40) * *(float *)(a1 + 40)));
        if (v6 < v14) {
          float v6 = v14;
        }
        *(void *)(a1 + 32) = *(void *)(a1 + 44);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 52);
        unint64_t v15 = *(void *)(a1 + 16);
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v9;
        *(void *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 44) = 0;
        *(int64x2_t *)(a1 + 16) = vaddq_s64(vdupq_n_s64(v15), v24);
      }
      __int32 v16 = *((_DWORD *)[v7 c_struct] + 2);
      __int32 v17 = *((_DWORD *)[v7 c_struct] + 3);
      uint64_t v18 = (float *)[v7 c_struct];
      v19.i32[0] = v16;
      v20.i32[0] = v17;
      CLRobustMaxAccelNorm::updateMaxes((CLRobustMaxAccelNorm *)a1, v19, v20, v18[4]);

      ++v5;
    }
    while (v4 != v5);
  }
  else
  {
    float v6 = 0.0;
  }
  float v21 = sqrtf((float)((float)(*(float *)(a1 + 36) * *(float *)(a1 + 36)) + (float)(*(float *)(a1 + 32) * *(float *)(a1 + 32)))+ (float)(*(float *)(a1 + 40) * *(float *)(a1 + 40)));
  if (v6 >= v21) {
    float v22 = v6;
  }
  else {
    float v22 = v21;
  }

  return v22;
}

void sub_1002A4238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float CLRobustMaxAccelNorm::robustMaxAccelNorm(void *a1)
{
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  return CLRobustMaxAccelNorm::run((uint64_t)v2, a1);
}

double CLMartyInferencesAlgSevereCrashResult::reset(CLMartyInferencesAlgSevereCrashResult *this)
{
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)((char *)this + 45) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((_WORD *)this + 40) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *(_OWORD *)((char *)this + 130) = 0u;
  return result;
}

void CLMartyInferencesAlgSevereCrashResult::log(CLMartyInferencesAlgSevereCrashResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
  }
  unint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *((void *)this + 5);
    int v5 = *((unsigned __int8 *)this + 49);
    int v6 = *((unsigned __int8 *)this + 48);
    int v7 = *((unsigned __int8 *)this + 50);
    int v8 = *((unsigned __int8 *)this + 51);
    int v9 = *((unsigned __int8 *)this + 52);
    int v10 = *((_DWORD *)this + 14);
    double v11 = *((float *)this + 4);
    double v12 = *((float *)this + 5);
    double v13 = *((float *)this + 6);
    double v14 = *((float *)this + 7);
    int v15 = *((unsigned __int8 *)this + 64);
    int v16 = *((unsigned __int8 *)this + 65);
    int v17 = *((unsigned __int8 *)this + 66);
    int v18 = *((unsigned __int8 *)this + 68);
    int v19 = *((unsigned __int8 *)this + 69);
    int v20 = *((unsigned __int8 *)this + 70);
    int v21 = *((unsigned __int8 *)this + 71);
    int v22 = *((unsigned __int8 *)this + 72);
    int v23 = *((unsigned __int8 *)this + 73);
    int v24 = *((unsigned __int8 *)this + 74);
    int v25 = *((unsigned __int8 *)this + 75);
    int v26 = *((unsigned __int8 *)this + 76);
    int v27 = *((unsigned __int8 *)this + 77);
    int v28 = *((unsigned __int8 *)this + 79);
    int v29 = *((unsigned __int8 *)this + 144);
    int v30 = *((unsigned __int8 *)this + 145);
    int v31 = *((unsigned __int8 *)this + 80);
    int v32 = *((unsigned __int8 *)this + 78);
    int v33 = *((unsigned __int8 *)this + 81);
    int v34 = *((_DWORD *)this + 37);
    *(_DWORD *)long long buf = 134356992;
    uint64_t v36 = v3;
    __int16 v37 = 2050;
    uint64_t v38 = v4;
    __int16 v39 = 1026;
    int v40 = v5;
    __int16 v41 = 1026;
    int v42 = v6;
    __int16 v43 = 1026;
    int v44 = v7;
    __int16 v45 = 1026;
    int v46 = v8;
    __int16 v47 = 1026;
    int v48 = v9;
    __int16 v49 = 1026;
    int v50 = v10;
    __int16 v51 = 2050;
    double v52 = v11;
    __int16 v53 = 2050;
    double v54 = v12;
    __int16 v55 = 2050;
    double v56 = v13;
    __int16 v57 = 2050;
    double v58 = v14;
    __int16 v59 = 1026;
    int v60 = v15;
    __int16 v61 = 1026;
    int v62 = v16;
    __int16 v63 = 1026;
    int v64 = v17;
    __int16 v65 = 1026;
    int v66 = v18;
    __int16 v67 = 1026;
    int v68 = v19;
    __int16 v69 = 1026;
    int v70 = v20;
    __int16 v71 = 1026;
    int v72 = v21;
    __int16 v73 = 1026;
    int v74 = v22;
    __int16 v75 = 1026;
    int v76 = v23;
    __int16 v77 = 1026;
    int v78 = v24;
    __int16 v79 = 1026;
    int v80 = v25;
    __int16 v81 = 1026;
    int v82 = v26;
    __int16 v83 = 1026;
    int v84 = v27;
    __int16 v85 = 1026;
    int v86 = v28;
    __int16 v87 = 1026;
    int v88 = v29;
    __int16 v89 = 1026;
    int v90 = v30;
    __int16 v91 = 1026;
    int v92 = v31;
    __int16 v93 = 1026;
    int v94 = v32;
    __int16 v95 = 1026;
    int v96 = v33;
    __int16 v97 = 1026;
    int v98 = v34;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[M][SC] AlgBlock summary,A,%{public}llu,B,%{public}llu,C,%{public}d,D,%{public}d,E,%{public}d,F,%{public}d,G,%{public}d,H,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,debug-1a,%{public}u,debug-1b,%{public}u,debug-1c,%{public}u,debug-2a,%{public}u,debug-2b,%{public}u,debug-2c,%{public}u,debug-2d,%{public}u,debug-2e,%{public}u,debug-2f,%{public}u,debug-2g,%{public}u,debug-2h,%{public}u,debug-2i,%{public}u,debug-2j,%{public}u,debug-2k,%{public}u,debug-2l,%{public}u,debug-2m,%{public}u,debug-2n,%{public}u,debug-2o,%{public}u,debug-2p,%{public}u,debug-2q,%{public}u", buf, 0xDAu);
  }
}

void CLMartyInferencesAlgSevereCrash::CLMartyInferencesAlgSevereCrash(CLMartyInferencesAlgSevereCrash *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  *int v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 444) = 0u;
  *(_OWORD *)((char *)this + 460) = 0u;
  *(_OWORD *)((char *)this + 412) = 0u;
  *(_OWORD *)((char *)this + 428) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *(_OWORD *)((char *)this + 396) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  *(_OWORD *)((char *)this + 316) = 0u;
  *(_OWORD *)((char *)this + 332) = 0u;
  *(_OWORD *)((char *)this + 284) = 0u;
  *(_OWORD *)((char *)this + 300) = 0u;
  *(_OWORD *)((char *)this + 252) = 0u;
  *(_OWORD *)((char *)this + 268) = 0u;
  *(_OWORD *)((char *)this + 220) = 0u;
  *(_OWORD *)((char *)this + 236) = 0u;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 204) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(void *)((char *)this + 476) = 0;
  *(void *)((char *)this + 484) = 0x500000000;
  *((unsigned char *)this + 528) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 63) = 0;
  *((unsigned char *)this + 520) = 0;
  *((void *)this + 67) = 0;
  *(_DWORD *)((char *)this + 543) = 0;
  int v6 = (char *)operator new(0xB0uLL);
  *((void *)v6 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_1003B4DD0;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((void *)v6 + 3) = &off_1003A1EA8;
  *(_OWORD *)(v6 + 40) = xmmword_100338D00;
  *(void *)(v6 + 69) = 0;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 8) = 0;
  *((_WORD *)v6 + 52) = 0;
  *((void *)v6 + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *((void *)v6 + 12) = 0;
  *(_OWORD *)(v6 + 154) = 0u;
  *(_OWORD *)(v6 + 140) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_OWORD *)(v6 + 108) = 0u;
  int v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v6 + 24;
  *((void *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    int v6 = (char *)*((void *)this + 2);
    __int16 v69 = (char *)*((void *)this + 1);
    int v70 = (std::__shared_weak_count *)v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    __int16 v69 = v6 + 24;
    int v70 = (std::__shared_weak_count *)v6;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_1002A4EC0((uint64_t)&v69, buf);
  long long v8 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  int v9 = (std::__shared_weak_count *)*((void *)this + 64);
  *(_OWORD *)((char *)this + 504) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (v70) {
    sub_10000BB9C(v70);
  }
  sub_10003BDEC(buf);
  uint64_t v11 = *(void *)buf;
  uint64_t v10 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  double v12 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = v11;
  *((void *)this + 5) = v10;
  if (v12)
  {
    sub_10000BB9C(v12);
    uint64_t v11 = *((void *)this + 4);
    uint64_t v10 = *((void *)this + 5);
  }
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  double v13 = (std::__shared_weak_count *)*((void *)this + 33);
  *((void *)this + 32) = v11;
  *((void *)this + 33) = v10;
  if (v13) {
    sub_10000BB9C(v13);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003BF30(buf);
  uint64_t v15 = *(void *)buf;
  uint64_t v14 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v16 = (std::__shared_weak_count *)*((void *)this + 7);
  *((void *)this + 6) = v15;
  *((void *)this + 7) = v14;
  if (v16)
  {
    sub_10000BB9C(v16);
    uint64_t v15 = *((void *)this + 6);
    uint64_t v14 = *((void *)this + 7);
  }
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  int v17 = (std::__shared_weak_count *)*((void *)this + 35);
  *((void *)this + 34) = v15;
  *((void *)this + 35) = v14;
  if (v17) {
    sub_10000BB9C(v17);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C074(buf);
  uint64_t v19 = *(void *)buf;
  uint64_t v18 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v20 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = v19;
  *((void *)this + 9) = v18;
  if (v20)
  {
    sub_10000BB9C(v20);
    uint64_t v19 = *((void *)this + 8);
    uint64_t v18 = *((void *)this + 9);
  }
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  int v21 = (std::__shared_weak_count *)*((void *)this + 37);
  *((void *)this + 36) = v19;
  *((void *)this + 37) = v18;
  if (v21) {
    sub_10000BB9C(v21);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C1B8(buf);
  uint64_t v23 = *(void *)buf;
  uint64_t v22 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v24 = (std::__shared_weak_count *)*((void *)this + 11);
  *((void *)this + 10) = v23;
  *((void *)this + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v22;
  if (v24)
  {
    sub_10000BB9C(v24);
    uint64_t v23 = *((void *)this + 10);
    uint64_t v22 = *((void *)this + 11);
  }
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  int v25 = (std::__shared_weak_count *)*((void *)this + 39);
  *((void *)this + 38) = v23;
  *((void *)this + 39) = v22;
  if (v25) {
    sub_10000BB9C(v25);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C440(buf);
  uint64_t v27 = *(void *)buf;
  uint64_t v26 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v28 = (std::__shared_weak_count *)*((void *)this + 13);
  *((void *)this + 12) = v27;
  *((void *)this + 13) = v26;
  if (v28)
  {
    sub_10000BB9C(v28);
    uint64_t v27 = *((void *)this + 12);
    uint64_t v26 = *((void *)this + 13);
  }
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  int v29 = (std::__shared_weak_count *)*((void *)this + 41);
  *((void *)this + 40) = v27;
  *((void *)this + 4CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v26;
  if (v29) {
    sub_10000BB9C(v29);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C584(buf);
  uint64_t v31 = *(void *)buf;
  uint64_t v30 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v32 = (std::__shared_weak_count *)*((void *)this + 19);
  *((void *)this + 18) = v31;
  *((void *)this + 19) = v30;
  if (v32)
  {
    sub_10000BB9C(v32);
    uint64_t v31 = *((void *)this + 18);
    uint64_t v30 = *((void *)this + 19);
  }
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  int v33 = (std::__shared_weak_count *)*((void *)this + 43);
  *((void *)this + 42) = v31;
  *((void *)this + 43) = v30;
  if (v33) {
    sub_10000BB9C(v33);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C6C8(buf);
  uint64_t v35 = *(void *)buf;
  uint64_t v34 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  uint64_t v36 = (std::__shared_weak_count *)*((void *)this + 15);
  *((void *)this + 14) = v35;
  *((void *)this + 15) = v34;
  if (v36)
  {
    sub_10000BB9C(v36);
    uint64_t v35 = *((void *)this + 14);
    uint64_t v34 = *((void *)this + 15);
  }
  if (v34) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v37 = (std::__shared_weak_count *)*((void *)this + 45);
  *((void *)this + 44) = v35;
  *((void *)this + 45) = v34;
  if (v37) {
    sub_10000BB9C(v37);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C80C(buf);
  uint64_t v39 = *(void *)buf;
  uint64_t v38 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v40 = (std::__shared_weak_count *)*((void *)this + 17);
  *((void *)this + 16) = v39;
  *((void *)this + 17) = v38;
  if (v40)
  {
    sub_10000BB9C(v40);
    uint64_t v39 = *((void *)this + 16);
    uint64_t v38 = *((void *)this + 17);
  }
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v41 = (std::__shared_weak_count *)*((void *)this + 47);
  *((void *)this + 46) = v39;
  *((void *)this + 47) = v38;
  if (v41) {
    sub_10000BB9C(v41);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003CBD8(buf);
  uint64_t v43 = *(void *)buf;
  uint64_t v42 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v44 = (std::__shared_weak_count *)*((void *)this + 21);
  *((void *)this + 20) = v43;
  *((void *)this + 2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v42;
  if (v44)
  {
    sub_10000BB9C(v44);
    uint64_t v43 = *((void *)this + 20);
    uint64_t v42 = *((void *)this + 21);
  }
  if (v42) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v45 = (std::__shared_weak_count *)*((void *)this + 49);
  *((void *)this + 48) = v43;
  *((void *)this + 49) = v42;
  if (v45) {
    sub_10000BB9C(v45);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003CD1C(buf);
  uint64_t v47 = *(void *)buf;
  uint64_t v46 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v48 = (std::__shared_weak_count *)*((void *)this + 23);
  *((void *)this + 22) = v47;
  *((void *)this + 23) = v46;
  if (v48)
  {
    sub_10000BB9C(v48);
    uint64_t v47 = *((void *)this + 22);
    uint64_t v46 = *((void *)this + 23);
  }
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v49 = (std::__shared_weak_count *)*((void *)this + 51);
  *((void *)this + 50) = v47;
  *((void *)this + 5CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v46;
  if (v49) {
    sub_10000BB9C(v49);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003CE60(buf);
  uint64_t v51 = *(void *)buf;
  uint64_t v50 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  double v52 = (std::__shared_weak_count *)*((void *)this + 25);
  *((void *)this + 24) = v51;
  *((void *)this + 25) = v50;
  if (v52)
  {
    sub_10000BB9C(v52);
    uint64_t v51 = *((void *)this + 24);
    uint64_t v50 = *((void *)this + 25);
  }
  if (v50) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v53 = (std::__shared_weak_count *)*((void *)this + 53);
  *((void *)this + 52) = v51;
  *((void *)this + 53) = v50;
  if (v53) {
    sub_10000BB9C(v53);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1002A787C(buf);
  uint64_t v55 = *(void *)buf;
  uint64_t v54 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  double v56 = (std::__shared_weak_count *)*((void *)this + 31);
  *((void *)this + 30) = v55;
  *((void *)this + 3CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v54;
  if (v56)
  {
    sub_10000BB9C(v56);
    uint64_t v55 = *((void *)this + 30);
    uint64_t v54 = *((void *)this + 31);
  }
  if (v54) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v57 = (std::__shared_weak_count *)*((void *)this + 55);
  *((void *)this + 54) = v55;
  *((void *)this + 55) = v54;
  if (v57) {
    sub_10000BB9C(v57);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1002A79C0(buf);
  uint64_t v59 = *(void *)buf;
  uint64_t v58 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v60 = (std::__shared_weak_count *)*((void *)this + 27);
  *((void *)this + 26) = v59;
  *((void *)this + 27) = v58;
  if (v60)
  {
    sub_10000BB9C(v60);
    uint64_t v59 = *((void *)this + 26);
    uint64_t v58 = *((void *)this + 27);
  }
  if (v58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v61 = (std::__shared_weak_count *)*((void *)this + 57);
  *((void *)this + 56) = v59;
  *((void *)this + 57) = v58;
  if (v61) {
    sub_10000BB9C(v61);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C950(buf);
  uint64_t v63 = *(void *)buf;
  uint64_t v62 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v64 = (std::__shared_weak_count *)*((void *)this + 29);
  *((void *)this + 28) = v63;
  *((void *)this + 29) = v62;
  if (v64)
  {
    sub_10000BB9C(v64);
    uint64_t v63 = *((void *)this + 28);
    uint64_t v62 = *((void *)this + 29);
  }
  if (v62) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v65 = (std::__shared_weak_count *)*((void *)this + 59);
  *((void *)this + 58) = v63;
  *((void *)this + 59) = v62;
  if (v65) {
    sub_10000BB9C(v65);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (*((void *)this + 58) != *((void *)this + 28))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
    }
    int v66 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "Two-level de-escalator is not the last one", buf, 2u);
    }
  }
  char v67 = *((unsigned char *)this + 24);
  for (uint64_t i = 256; i != 480; i += 16)
    *(unsigned char *)(*(void *)((char *)this + i) + 32) = v67;
}

void sub_1002A4DA0(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 64);
  if (v4) {
    sub_10000BB9C(v4);
  }
  uint64_t v5 = 472;
  while (1)
  {
    int v6 = *(std::__shared_weak_count **)((char *)v1 + v5);
    if (v6) {
      sub_10000BB9C(v6);
    }
    v5 -= 16;
    if (v5 == 248)
    {
      int v7 = (std::__shared_weak_count *)*((void *)v1 + 31);
      if (v7) {
        sub_10000BB9C(v7);
      }
      long long v8 = (std::__shared_weak_count *)*((void *)v1 + 29);
      if (v8) {
        sub_10000BB9C(v8);
      }
      int v9 = (std::__shared_weak_count *)*((void *)v1 + 27);
      if (v9) {
        sub_10000BB9C(v9);
      }
      uint64_t v10 = (std::__shared_weak_count *)*((void *)v1 + 25);
      if (v10) {
        sub_10000BB9C(v10);
      }
      uint64_t v11 = (std::__shared_weak_count *)*((void *)v1 + 23);
      if (v11) {
        sub_10000BB9C(v11);
      }
      double v12 = (std::__shared_weak_count *)*((void *)v1 + 21);
      if (v12) {
        sub_10000BB9C(v12);
      }
      double v13 = (std::__shared_weak_count *)*((void *)v1 + 19);
      if (v13) {
        sub_10000BB9C(v13);
      }
      uint64_t v14 = (std::__shared_weak_count *)*((void *)v1 + 17);
      if (v14) {
        sub_10000BB9C(v14);
      }
      uint64_t v15 = (std::__shared_weak_count *)*((void *)v1 + 15);
      if (v15) {
        sub_10000BB9C(v15);
      }
      int v16 = (std::__shared_weak_count *)*((void *)v1 + 13);
      if (v16) {
        sub_10000BB9C(v16);
      }
      int v17 = (std::__shared_weak_count *)*((void *)v1 + 11);
      if (v17) {
        sub_10000BB9C(v17);
      }
      uint64_t v18 = (std::__shared_weak_count *)*((void *)v1 + 9);
      if (v18) {
        sub_10000BB9C(v18);
      }
      uint64_t v19 = (std::__shared_weak_count *)*((void *)v1 + 7);
      if (v19) {
        sub_10000BB9C(v19);
      }
      int v20 = (std::__shared_weak_count *)*((void *)v1 + 5);
      if (v20) {
        sub_10000BB9C(v20);
      }
      CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
      _Unwind_Resume(a1);
    }
  }
}

void *sub_1002A4EC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t CLMartyInferencesAlgSevereCrash::setDeescalatorsMode(uint64_t this)
{
  uint64_t v1 = 0;
  char v2 = *(unsigned char *)(this + 24);
  do
  {
    *(unsigned char *)(*(void *)(this + 256 + v1) + 32) = v2;
    v1 += 16;
  }
  while (v1 != 224);
  return this;
}

void CLMartyInferencesAlgSevereCrash::CLMartyInferencesAlgSevereCrash(CLMartyInferencesAlgSevereCrash *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 69) = off_10039A008;
  *((void *)this + 70) = off_10039A0D0;
  *((void *)this + 7CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003B4778);
  *(void *)uint64_t v2 = off_1003B4258;
  *(void *)(v2 + 552) = off_1003B4508;
  *(void *)(v2 + 560) = off_1003B4648;
  *(void *)(v2 + 568) = off_1003B4728;
  *(_OWORD *)(v2 + 44) = 0u;
  *(_OWORD *)(v2 + 60) = 0u;
  *(_OWORD *)(v2 + 76) = 0u;
  *(_OWORD *)(v2 + 92) = 0u;
  *(_OWORD *)(v2 + 108) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  *(_OWORD *)(v2 + 140) = 0u;
  *(_OWORD *)(v2 + 156) = 0u;
  *(_OWORD *)(v2 + 172) = 0u;
  *(_OWORD *)(v2 + 188) = 0u;
  *(_OWORD *)(v2 + 204) = 0u;
  *(_OWORD *)(v2 + 220) = 0u;
  *(_OWORD *)(v2 + 236) = 0u;
  *(_OWORD *)(v2 + 28) = 0u;
  *(_OWORD *)(v2 + 252) = 0u;
  *(_OWORD *)(v2 + 268) = 0u;
  *(_OWORD *)(v2 + 284) = 0u;
  *(_OWORD *)(v2 + 300) = 0u;
  *(_OWORD *)(v2 + 316) = 0u;
  *(_OWORD *)(v2 + 332) = 0u;
  *(_OWORD *)(v2 + 348) = 0u;
  *(_OWORD *)(v2 + 364) = 0u;
  *(_OWORD *)(v2 + 380) = 0u;
  *(_OWORD *)(v2 + 396) = 0u;
  *(_OWORD *)(v2 + 412) = 0u;
  *(_OWORD *)(v2 + 428) = 0u;
  *(_OWORD *)(v2 + 444) = 0u;
  *(_OWORD *)(v2 + 460) = 0u;
  *(void *)(v2 + 476) = 0;
  *(void *)(v2 + 484) = 0x500000000;
  *(unsigned char *)(v2 + 528) = 0;
  *(void *)(v2 + 504) = 0;
  *(void *)(v2 + 512) = 0;
  *(unsigned char *)(v2 + 520) = 0;
  *(void *)(v2 + 536) = 0;
  *(_DWORD *)(v2 + 543) = 0;
  uint64_t v3 = (char *)operator new(0xB0uLL);
  *((void *)v3 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = off_1003B4DD0;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((void *)v3 + 3) = &off_1003A1EA8;
  *(_OWORD *)(v3 + 40) = xmmword_100338D00;
  *(void *)(v3 + 69) = 0;
  *((void *)v3 + 7) = 0;
  *((void *)v3 + 8) = 0;
  *((_WORD *)v3 + 52) = 0;
  *((void *)v3 + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  *((void *)v3 + 12) = 0;
  *(_OWORD *)(v3 + 154) = 0u;
  *(_OWORD *)(v3 + 140) = 0u;
  *(_OWORD *)(v3 + 124) = 0u;
  *(_OWORD *)(v3 + 108) = 0u;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v3 + 24;
  *((void *)this + 2) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    uint64_t v3 = (char *)*((void *)this + 2);
    int v66 = (char *)*((void *)this + 1);
    char v67 = (std::__shared_weak_count *)v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    int v66 = v3 + 24;
    char v67 = (std::__shared_weak_count *)v3;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_1002A4EC0((uint64_t)&v66, buf);
  long long v5 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  int v6 = (std::__shared_weak_count *)*((void *)this + 64);
  *(_OWORD *)((char *)this + 504) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*(void *)&buf[8]) {
      sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (v67) {
    sub_10000BB9C(v67);
  }
  sub_10003BDEC(buf);
  uint64_t v8 = *(void *)buf;
  uint64_t v7 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v9 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = v8;
  *((void *)this + 5) = v7;
  if (v9)
  {
    sub_10000BB9C(v9);
    uint64_t v8 = *((void *)this + 4);
    uint64_t v7 = *((void *)this + 5);
  }
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 33);
  *((void *)this + 32) = v8;
  *((void *)this + 33) = v7;
  if (v10) {
    sub_10000BB9C(v10);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003BF30(buf);
  uint64_t v12 = *(void *)buf;
  uint64_t v11 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  double v13 = (std::__shared_weak_count *)*((void *)this + 7);
  *((void *)this + 6) = v12;
  *((void *)this + 7) = v11;
  if (v13)
  {
    sub_10000BB9C(v13);
    uint64_t v12 = *((void *)this + 6);
    uint64_t v11 = *((void *)this + 7);
  }
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 35);
  *((void *)this + 34) = v12;
  *((void *)this + 35) = v11;
  if (v14) {
    sub_10000BB9C(v14);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C074(buf);
  uint64_t v16 = *(void *)buf;
  uint64_t v15 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v17 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = v16;
  *((void *)this + 9) = v15;
  if (v17)
  {
    sub_10000BB9C(v17);
    uint64_t v16 = *((void *)this + 8);
    uint64_t v15 = *((void *)this + 9);
  }
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 37);
  *((void *)this + 36) = v16;
  *((void *)this + 37) = v15;
  if (v18) {
    sub_10000BB9C(v18);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C1B8(buf);
  uint64_t v20 = *(void *)buf;
  uint64_t v19 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v21 = (std::__shared_weak_count *)*((void *)this + 11);
  *((void *)this + 10) = v20;
  *((void *)this + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v19;
  if (v21)
  {
    sub_10000BB9C(v21);
    uint64_t v20 = *((void *)this + 10);
    uint64_t v19 = *((void *)this + 11);
  }
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 39);
  *((void *)this + 38) = v20;
  *((void *)this + 39) = v19;
  if (v22) {
    sub_10000BB9C(v22);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C440(buf);
  uint64_t v24 = *(void *)buf;
  uint64_t v23 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v25 = (std::__shared_weak_count *)*((void *)this + 13);
  *((void *)this + 12) = v24;
  *((void *)this + 13) = v23;
  if (v25)
  {
    sub_10000BB9C(v25);
    uint64_t v24 = *((void *)this + 12);
    uint64_t v23 = *((void *)this + 13);
  }
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = (std::__shared_weak_count *)*((void *)this + 41);
  *((void *)this + 40) = v24;
  *((void *)this + 4CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v23;
  if (v26) {
    sub_10000BB9C(v26);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C584(buf);
  uint64_t v28 = *(void *)buf;
  uint64_t v27 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v29 = (std::__shared_weak_count *)*((void *)this + 19);
  *((void *)this + 18) = v28;
  *((void *)this + 19) = v27;
  if (v29)
  {
    sub_10000BB9C(v29);
    uint64_t v28 = *((void *)this + 18);
    uint64_t v27 = *((void *)this + 19);
  }
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = (std::__shared_weak_count *)*((void *)this + 43);
  *((void *)this + 42) = v28;
  *((void *)this + 43) = v27;
  if (v30) {
    sub_10000BB9C(v30);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C6C8(buf);
  uint64_t v32 = *(void *)buf;
  uint64_t v31 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  int v33 = (std::__shared_weak_count *)*((void *)this + 15);
  *((void *)this + 14) = v32;
  *((void *)this + 15) = v31;
  if (v33)
  {
    sub_10000BB9C(v33);
    uint64_t v32 = *((void *)this + 14);
    uint64_t v31 = *((void *)this + 15);
  }
  if (v31) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = (std::__shared_weak_count *)*((void *)this + 45);
  *((void *)this + 44) = v32;
  *((void *)this + 45) = v31;
  if (v34) {
    sub_10000BB9C(v34);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C80C(buf);
  uint64_t v36 = *(void *)buf;
  uint64_t v35 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  __int16 v37 = (std::__shared_weak_count *)*((void *)this + 17);
  *((void *)this + 16) = v36;
  *((void *)this + 17) = v35;
  if (v37)
  {
    sub_10000BB9C(v37);
    uint64_t v36 = *((void *)this + 16);
    uint64_t v35 = *((void *)this + 17);
  }
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v38 = (std::__shared_weak_count *)*((void *)this + 47);
  *((void *)this + 46) = v36;
  *((void *)this + 47) = v35;
  if (v38) {
    sub_10000BB9C(v38);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003CBD8(buf);
  uint64_t v40 = *(void *)buf;
  uint64_t v39 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  __int16 v41 = (std::__shared_weak_count *)*((void *)this + 21);
  *((void *)this + 20) = v40;
  *((void *)this + 2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v39;
  if (v41)
  {
    sub_10000BB9C(v41);
    uint64_t v40 = *((void *)this + 20);
    uint64_t v39 = *((void *)this + 21);
  }
  if (v39) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v42 = (std::__shared_weak_count *)*((void *)this + 49);
  *((void *)this + 48) = v40;
  *((void *)this + 49) = v39;
  if (v42) {
    sub_10000BB9C(v42);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003CD1C(buf);
  uint64_t v44 = *(void *)buf;
  uint64_t v43 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  __int16 v45 = (std::__shared_weak_count *)*((void *)this + 23);
  *((void *)this + 22) = v44;
  *((void *)this + 23) = v43;
  if (v45)
  {
    sub_10000BB9C(v45);
    uint64_t v44 = *((void *)this + 22);
    uint64_t v43 = *((void *)this + 23);
  }
  if (v43) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v46 = (std::__shared_weak_count *)*((void *)this + 51);
  *((void *)this + 50) = v44;
  *((void *)this + 5CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v43;
  if (v46) {
    sub_10000BB9C(v46);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003CE60(buf);
  uint64_t v48 = *(void *)buf;
  uint64_t v47 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  __int16 v49 = (std::__shared_weak_count *)*((void *)this + 25);
  *((void *)this + 24) = v48;
  *((void *)this + 25) = v47;
  if (v49)
  {
    sub_10000BB9C(v49);
    uint64_t v48 = *((void *)this + 24);
    uint64_t v47 = *((void *)this + 25);
  }
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v50 = (std::__shared_weak_count *)*((void *)this + 53);
  *((void *)this + 52) = v48;
  *((void *)this + 53) = v47;
  if (v50) {
    sub_10000BB9C(v50);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1002A787C(buf);
  uint64_t v52 = *(void *)buf;
  uint64_t v51 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  __int16 v53 = (std::__shared_weak_count *)*((void *)this + 31);
  *((void *)this + 30) = v52;
  *((void *)this + 3CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v51;
  if (v53)
  {
    sub_10000BB9C(v53);
    uint64_t v52 = *((void *)this + 30);
    uint64_t v51 = *((void *)this + 31);
  }
  if (v51) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v54 = (std::__shared_weak_count *)*((void *)this + 55);
  *((void *)this + 54) = v52;
  *((void *)this + 55) = v51;
  if (v54) {
    sub_10000BB9C(v54);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1002A79C0(buf);
  uint64_t v56 = *(void *)buf;
  uint64_t v55 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  __int16 v57 = (std::__shared_weak_count *)*((void *)this + 27);
  *((void *)this + 26) = v56;
  *((void *)this + 27) = v55;
  if (v57)
  {
    sub_10000BB9C(v57);
    uint64_t v56 = *((void *)this + 26);
    uint64_t v55 = *((void *)this + 27);
  }
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v58 = (std::__shared_weak_count *)*((void *)this + 57);
  *((void *)this + 56) = v56;
  *((void *)this + 57) = v55;
  if (v58) {
    sub_10000BB9C(v58);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10003C950(buf);
  uint64_t v60 = *(void *)buf;
  uint64_t v59 = *(void *)&buf[8];
  memset(buf, 0, sizeof(buf));
  __int16 v61 = (std::__shared_weak_count *)*((void *)this + 29);
  *((void *)this + 28) = v60;
  *((void *)this + 29) = v59;
  if (v61)
  {
    sub_10000BB9C(v61);
    uint64_t v60 = *((void *)this + 28);
    uint64_t v59 = *((void *)this + 29);
  }
  if (v59) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v62 = (std::__shared_weak_count *)*((void *)this + 59);
  *((void *)this + 58) = v60;
  *((void *)this + 59) = v59;
  if (v62) {
    sub_10000BB9C(v62);
  }
  if (*(void *)&buf[8]) {
    sub_10000BB9C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (*((void *)this + 58) != *((void *)this + 28))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
    }
    uint64_t v63 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "Two-level de-escalator is not the last one", buf, 2u);
    }
  }
  char v64 = *((unsigned char *)this + 24);
  for (uint64_t i = 256; i != 480; i += 16)
    *(unsigned char *)(*(void *)((char *)this + i) + 32) = v64;
}

void sub_1002A575C(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 64);
  if (v3) {
    sub_10000BB9C(v3);
  }
  uint64_t v4 = 472;
  while (1)
  {
    long long v5 = *(std::__shared_weak_count **)((char *)v1 + v4);
    if (v5) {
      sub_10000BB9C(v5);
    }
    v4 -= 16;
    if (v4 == 248)
    {
      int v6 = (std::__shared_weak_count *)*((void *)v1 + 31);
      if (v6) {
        sub_10000BB9C(v6);
      }
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v1 + 29);
      if (v7) {
        sub_10000BB9C(v7);
      }
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v1 + 27);
      if (v8) {
        sub_10000BB9C(v8);
      }
      int v9 = (std::__shared_weak_count *)*((void *)v1 + 25);
      if (v9) {
        sub_10000BB9C(v9);
      }
      uint64_t v10 = (std::__shared_weak_count *)*((void *)v1 + 23);
      if (v10) {
        sub_10000BB9C(v10);
      }
      uint64_t v11 = (std::__shared_weak_count *)*((void *)v1 + 21);
      if (v11) {
        sub_10000BB9C(v11);
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)v1 + 19);
      if (v12) {
        sub_10000BB9C(v12);
      }
      double v13 = (std::__shared_weak_count *)*((void *)v1 + 17);
      if (v13) {
        sub_10000BB9C(v13);
      }
      uint64_t v14 = (std::__shared_weak_count *)*((void *)v1 + 15);
      if (v14) {
        sub_10000BB9C(v14);
      }
      uint64_t v15 = (std::__shared_weak_count *)*((void *)v1 + 13);
      if (v15) {
        sub_10000BB9C(v15);
      }
      uint64_t v16 = (std::__shared_weak_count *)*((void *)v1 + 11);
      if (v16) {
        sub_10000BB9C(v16);
      }
      int v17 = (std::__shared_weak_count *)*((void *)v1 + 9);
      if (v17) {
        sub_10000BB9C(v17);
      }
      uint64_t v18 = (std::__shared_weak_count *)*((void *)v1 + 7);
      if (v18) {
        sub_10000BB9C(v18);
      }
      uint64_t v19 = (std::__shared_weak_count *)*((void *)v1 + 5);
      if (v19) {
        sub_10000BB9C(v19);
      }
      CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B4778);
      _Unwind_Resume(a1);
    }
  }
}

void CLMartyInferencesAlgSevereCrash::resetConfiguration(CLMartyInferencesAlgSevereCrash *this)
{
  id v20 = +[CSPersistentConfiguration configBaseKey:"InferencesAlgSCConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 3.0;
  LODWORD(v4) = 15.0;
  LODWORD(v5) = 1142308864;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v20 withMinValue:v3 maxValue:v5 defaultValue:v4];
  LODWORD(v2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v6;
  LODWORD(v7) = 1110704128;
  LODWORD(v8) = 3.0;
  LODWORD(v9) = 1142308864;
  [v2 algorithmThresholdNumber:1 inArrayForKey:v20 withMinValue:v8 maxValue:v9 defaultValue:v7];
  DWORD1(v2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v10;
  LODWORD(v1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 10.0;
  LODWORD(v12) = 1142308864;
  [v2 algorithmThresholdNumber:2 inArrayForKey:v20 withMinValue:0.0 maxValue:v12 defaultValue:v11];
  DWORD2(v2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v13;
  LODWORD(v14) = 3.0;
  LODWORD(v15) = 25.0;
  LODWORD(v16) = 1142308864;
  [v2 algorithmThresholdNumber:3 inArrayForKey:v20 withMinValue:v14 maxValue:v16 defaultValue:v15];
  HIDWORD(v2CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v17;
  for (uint64_t i = 256; i != 480; i += 16)
    (*(void (**)(void))(**(void **)((char *)this + i) + 16))(*(void *)((char *)this + i));
  uint64_t v19 = [v2 objectForKey:@"MartyForceLowSenseDetected"];
  if (v19) {
    *(_WORD *)((char *)this + 545) = (unsigned __int16)[v2 BOOLForKey:@"MartyForceLowSenseDetected"] | 0x100;
  }
  CLMartyInferencesAlgSevereCrash::setConfig((uint64_t)this, &v21);
}

void sub_1002A5A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLMartyInferencesAlgSevereCrash::setConfig(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(*(void *)(a1 + 504) + 16) = *a2;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
  }
  double v3 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *(float **)(a1 + 504);
    double v6 = v5[4];
    double v7 = v5[5];
    double v8 = v5[6];
    double v9 = v5[7];
    int v10 = 134218752;
    double v11 = v6;
    __int16 v12 = 2048;
    double v13 = v7;
    __int16 v14 = 2048;
    double v15 = v8;
    __int16 v16 = 2048;
    double v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[M][SC] config, %f, %f, %f, %f", (uint8_t *)&v10, 0x2Au);
  }
  return result;
}

uint64_t CLMartyInferencesAlgSevereCrash::reset(CLMartyInferencesAlgSevereCrash *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 63) + 24))(*((void *)this + 63));
  if (*((unsigned char *)this + 528)) {
    *((unsigned char *)this + 528) = 0;
  }
  *(_WORD *)((char *)this + 537) = 0;
  *((unsigned char *)this + 539) = 0;
  *((_DWORD *)this + 12CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  return result;
}

void CLMartyInferencesAlgSevereCrash::epochFinalize(CLMartyInferencesAlgSevereCrash *this, uint64_t a2)
{
  double v4 = +[CSPersistentConfiguration sharedConfiguration];
  double v5 = (int *)((char *)this + 28);
  if (CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 7)))
  {
    for (uint64_t i = 0; i != 224; i += 16)
      CLKappaDeescalator::previousEpochMadeDecision(*(CLKappaDeescalator **)((char *)this + i + 256));
    if (*((unsigned char *)this + 528)) {
      *((unsigned char *)this + 528) = 0;
    }
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
  }
  double v7 = (id)qword_1003DB6A8;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = *((unsigned __int8 *)this + 537);
    int v9 = *((unsigned __int8 *)this + 538);
    int v10 = *((unsigned __int8 *)this + 539);
    int isDecidedForOption = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 7));
    BOOL shouldDeescalateForOption = CLKappaDeescalator::shouldDeescalateForOption(*v5);
    *(_DWORD *)long long buf = 67110144;
    BOOL v75 = v8;
    __int16 v76 = 1024;
    *(_DWORD *)__int16 v77 = v9;
    *(_WORD *)&v77[4] = 1024;
    *(_DWORD *)&v77[6] = v10;
    __int16 v78 = 1024;
    int v79 = isDecidedForOption;
    __int16 v80 = 1024;
    BOOL v81 = shouldDeescalateForOption;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[M][SC] is %u %u %u %u %u", buf, 0x20u);
  }

  CLKappaDeescalationDecision::reset((_DWORD *)this + 7);
  if (*((unsigned char *)this + 537)) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = *((unsigned char *)this + 538) != 0;
  }
  __int16 v14 = (_WORD *)((char *)this + 484);
  if (*((unsigned char *)this + 540)) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = *((unsigned char *)this + 541) != 0;
  }
  uint64_t v16 = *((unsigned __int16 *)this + 243);
  unint64_t v17 = *((unsigned int *)this + 122);
  uint64_t v18 = *((unsigned __int16 *)this + 242);
  if (v18 + v16 >= v17) {
    uint64_t v19 = *((unsigned int *)this + 122);
  }
  else {
    uint64_t v19 = 0;
  }
  *((unsigned char *)v14 + v18 + v16 - v19 + 8) = v15;
  if (v17 <= v16)
  {
    if (v18 + 1 < v17) {
      LOWORD(v17) = 0;
    }
    *__int16 v14 = v18 + 1 - v17;
  }
  else
  {
    *((_WORD *)this + 243) = v16 + 1;
  }
  int v20 = *((unsigned __int8 *)this + 544);
  if (*((unsigned char *)this + 543)) {
    v20 |= 2u;
  }
  if (*((unsigned char *)this + 539)) {
    int v21 = v20 | 4;
  }
  else {
    int v21 = v20;
  }
  unsigned __int16 v22 = (unsigned __int16)[v4 getBooleanDefault:@"MartyForceEarlyCrashInSevereBlock"];
  if (v22 >= 0x100u && (_BYTE)v22 && !*((unsigned char *)this + 528) && !*((unsigned char *)this + 536))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
    }
    int v70 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "[M][SC] forcing early crash decision", buf, 2u);
    }

    *((void *)this + 65) = a2;
    *((unsigned char *)this + 528) = 1;
    *((unsigned char *)this + 536) = 1;
    goto LABEL_34;
  }
  if (v13)
  {
LABEL_34:
    *((_DWORD *)this + 120) = 0;
    if (*((_WORD *)this + 243))
    {
      unint64_t v23 = 0;
      while (!*(unsigned char *)sub_10002C20C((unsigned __int16 *)this + 242, v23))
      {
        if (++v23 >= *((unsigned __int16 *)this + 243)) {
          goto LABEL_38;
        }
      }
      int v24 = 1;
    }
    else
    {
LABEL_38:
      int v24 = 0;
    }
    if (*((unsigned char *)this + 546))
    {
      if (*((unsigned char *)this + 545))
      {
        if (qword_1003DB6A0 != -1) {
          dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
        }
        int v25 = (id)qword_1003DB6A8;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "[M][SC] force low sense high", buf, 2u);
        }
        int v24 = 1;
      }
      else
      {
        if (qword_1003DB6A0 != -1) {
          dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
        }
        int v25 = (id)qword_1003DB6A8;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "[M][SC] force low sense low", buf, 2u);
        }
        int v24 = 0;
      }
    }
    BOOL v73 = v24 != 0;
    sub_100006DBC(*((void *)this + 28), v24);
    uint64_t v26 = 0;
    *((void *)this + 65) = a2;
    *((unsigned char *)this + 528) = 1;
    do
    {
      CLKappaDeescalator::earlyCrashDetected(*(CLKappaDeescalator **)((char *)this + v26 + 256), a2);
      v26 += 16;
    }
    while (v26 != 224);
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
    }
    uint64_t v27 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109376;
      BOOL v75 = v13;
      __int16 v76 = 2048;
      *(void *)__int16 v77 = a2;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "[M][SC] anyCrashDetectorDecision:%d, crashTimestamp:%llu", buf, 0x12u);
    }

    goto LABEL_61;
  }
  BOOL v73 = 0;
LABEL_61:
  CLKappaDeescalatorAutocorrelation::updateWithAnyCrashDetected(*((void *)this + 6), v13);
  char v72 = *((unsigned char *)this + 528);
  if (!v72) {
    goto LABEL_111;
  }
  uint64_t v28 = *((void *)this + 65);
  CLKappaDeescalatorStaticGps::updateCountTotal(*((void *)this + 18));
  float v29 = (double)(unint64_t)(a2 - v28) * 0.000001;
  uint64_t v30 = (float *)*((void *)this + 63);
  if (v30[6] < v29)
  {
    CLKappaDeescalatorMovingGps::updateCountTotal(*((void *)this + 8));
    uint64_t v30 = (float *)*((void *)this + 63);
  }
  if (v30[4] >= v29) {
    goto LABEL_111;
  }
  if (v30[5] > v29)
  {
    uint64_t v31 = v4;
    if (!*((_DWORD *)this + 120))
    {
      for (uint64_t j = 0; j != 224; j += 16)
      {
        int v33 = CLKappaDeescalator::evaluateAtMinHoldDuration(*(CLKappaDeescalator **)((char *)this + j + 256));
        CLKappaDeescalationDecision::update((_DWORD *)this + 7, v33);
      }
      *((_DWORD *)this + 120) = 1;
    }
    uint64_t v34 = 0;
    uint64_t v35 = (char *)this + 256;
    while (1)
    {
      int v36 = CLKappaDeescalator::evaluateBetweenMinAndMaxHoldDuration(*(CLKappaDeescalator **)&v35[v34]);
      CLKappaDeescalationDecision::update((_DWORD *)this + 7, v36);
      if (v36 == 3) {
        break;
      }
      if (v36 == 2)
      {
        if (qword_1003DB6A0 != -1) {
          dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
        }
        __int16 v37 = qword_1003DB6A8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "[M][SC] two-level feed is escalation candidate", buf, 2u);
        }
        char v38 = 1;
        *(unsigned char *)(*((void *)this + 63) + 145) = 1;
LABEL_83:
        sub_100006DC4(*((void *)this + 28), v38);
      }
      v34 += 16;
      if (v34 == 224)
      {
        uint64_t v48 = *((void *)this + 63);
        if (*(float *)(v48 + 28) >= v29 && !*(unsigned char *)(v48 + 145))
        {
          char v47 = 0;
          double v4 = v31;
          goto LABEL_112;
        }
        double v4 = v31;
        if (*((_DWORD *)this + 120) == 1)
        {
          for (uint64_t k = 0; k != 224; k += 16)
          {
            int v50 = CLKappaDeescalator::evaluateAtSecondDeescalationOpportunity(*(CLKappaDeescalator **)&v35[k]);
            CLKappaDeescalationDecision::update((_DWORD *)this + 7, v50);
          }
          char v47 = 0;
          *((_DWORD *)this + 120) = 2;
          goto LABEL_112;
        }
LABEL_111:
        char v47 = 0;
        goto LABEL_112;
      }
    }
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
    }
    uint64_t v39 = qword_1003DB6A8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "[M][SC] two-level feed is no longer escalation candidate", buf, 2u);
    }
    char v38 = 0;
    goto LABEL_83;
  }
  __int16 v71 = v4;
  for (uint64_t m = 0; m != 224; m += 16)
  {
    int v41 = CLKappaDeescalator::evaluateAtBoundary(*(CLKappaDeescalator **)((char *)this + m + 256));
    CLKappaDeescalationDecision::update((_DWORD *)this + 7, v41);
    if (v41 == 3)
    {
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
      }
      uint64_t v44 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "[M][SC] two-level feed is no longer escalation candidate", buf, 2u);
      }
      char v43 = 0;
    }
    else
    {
      if (v41 != 2) {
        continue;
      }
      if (qword_1003DB6A0 != -1) {
        dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
      }
      uint64_t v42 = qword_1003DB6A8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "[M][SC] two-level feed is escalation candidate", buf, 2u);
      }
      char v43 = 1;
      *(unsigned char *)(*((void *)this + 63) + 145) = 1;
    }
    sub_100006DC4(*((void *)this + 28), v43);
  }
  double v4 = v71;
  if (*((unsigned char *)this + 536) && (CLKappaDeescalator::isDecidedForOption(*v5) & 1) == 0) {
    CLKappaDeescalationDecision::update((_DWORD *)this + 7, 5);
  }
  uint64_t v45 = CLKappaDeescalator::isDecidedForOption(*v5);
  CLKappaDeescalator::raiseUnless(v45, (BOOL)"[M][SC] Reached boundary condition but made no decision", v46);
  char v47 = 1;
LABEL_112:
  if (CLKappaDeescalator::isDecidedForOption(*v5))
  {
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
    }
    uint64_t v51 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      int v52 = sub_10003AC7C((unsigned int *)this + 7);
      *(_DWORD *)long long buf = 67109120;
      BOOL v75 = v52;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "[M][SC] deescalation decision decided %d", buf, 8u);
    }

    if (sub_10003AC7C((unsigned int *)this + 7))
    {
      for (uint64_t n = 0; n != 224; n += 16)
      {
        int v54 = CLKappaDeescalator::evaluateFollowingEscalation(*(CLKappaDeescalator **)((char *)this + n + 256));
        CLKappaDeescalationDecision::update((_DWORD *)this + 7, v54);
      }
    }
    int v55 = sub_10003AC7C((unsigned int *)this + 7);
    BOOL v56 = (v55 & 1) == 0 && *(unsigned char *)(*((void *)this + 63) + 145) != 0;
    if (qword_1003DB6A0 != -1) {
      dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
    }
    __int16 v57 = (id)qword_1003DB6A8;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      BOOL v75 = v55;
      __int16 v76 = 1026;
      *(_DWORD *)__int16 v77 = v56;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "[M][SC] de %{public}d suppress %{public}d", buf, 0xEu);
    }
  }
  else
  {
    LOBYTE(v55) = 0;
    LOBYTE(v56) = 0;
  }
  uint64_t v58 = *((void *)this + 63);
  *(void *)(v58 + 32) = a2;
  *(unsigned char *)(v58 + 48) = v55;
  if (*((unsigned char *)this + 528)) {
    uint64_t v59 = *((void *)this + 65);
  }
  else {
    uint64_t v59 = 0;
  }
  *(void *)(v58 + 40) = v59;
  *(unsigned char *)(v58 + 49) = v72;
  *(unsigned char *)(*((void *)this + 63) + 50) = CLKappaDeescalator::isDecidedForOption(*v5);
  BOOL v60 = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 7));
  uint64_t v61 = *((void *)this + 63);
  *(unsigned char *)(v61 + 5CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v60;
  *(unsigned char *)(v61 + 52) = v56;
  *(_DWORD *)(v61 + 56) = v21;
  *(unsigned char *)(v61 + 64) = *((unsigned char *)this + 537);
  *(_WORD *)(v61 + 65) = *((_WORD *)this + 269);
  *(unsigned char *)(v61 + 67) = v73;
  *(unsigned char *)(*((void *)this + 63) + 68) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 4) + 24));
  *(unsigned char *)(*((void *)this + 63) + 69) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 6) + 24));
  *(unsigned char *)(*((void *)this + 63) + 70) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 8) + 24));
  *(unsigned char *)(*((void *)this + 63) + 7CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 10) + 24));
  *(unsigned char *)(*((void *)this + 63) + 72) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 12) + 24));
  *(unsigned char *)(*((void *)this + 63) + 73) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 14) + 24));
  *(unsigned char *)(*((void *)this + 63) + 74) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 16) + 24));
  *(unsigned char *)(*((void *)this + 63) + 75) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 18) + 24));
  *(unsigned char *)(*((void *)this + 63) + 76) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 20) + 24));
  *(unsigned char *)(*((void *)this + 63) + 77) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 22) + 24));
  *(unsigned char *)(*((void *)this + 63) + 80) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 24) + 24));
  *(unsigned char *)(*((void *)this + 63) + 79) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 28) + 24));
  *(unsigned char *)(*((void *)this + 63) + 78) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 30) + 24));
  BOOL v62 = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((void *)this + 26) + 24));
  uint64_t v63 = *((void *)this + 63);
  *(unsigned char *)(v63 + 8CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v62;
  *(unsigned char *)(v63 + 144) = v47;
  *(_DWORD *)(v63 + 84) = *(_DWORD *)(*((void *)this + 4) + 28) != 0;
  *(_DWORD *)(v63 + 88) = *(_DWORD *)(*((void *)this + 6) + 28) != 0;
  *(_DWORD *)(v63 + 92) = *(_DWORD *)(*((void *)this + 8) + 28) != 0;
  *(_DWORD *)(v63 + 96) = *(_DWORD *)(*((void *)this + 10) + 28) != 0;
  *(_DWORD *)(v63 + 100) = *(_DWORD *)(*((void *)this + 12) + 28) != 0;
  *(_DWORD *)(v63 + 104) = *(_DWORD *)(*((void *)this + 14) + 28) != 0;
  *(_DWORD *)(v63 + 108) = *(_DWORD *)(*((void *)this + 16) + 28) != 0;
  *(_DWORD *)(v63 + 112) = *(_DWORD *)(*((void *)this + 18) + 28) != 0;
  *(_DWORD *)(v63 + 116) = *(_DWORD *)(*((void *)this + 20) + 28) != 0;
  *(_DWORD *)(v63 + 120) = *(_DWORD *)(*((void *)this + 22) + 28) != 0;
  *(_DWORD *)(v63 + 124) = *(_DWORD *)(*((void *)this + 30) + 28) != 0;
  uint64_t v64 = *((void *)this + 28);
  int v65 = *(_DWORD *)(v64 + 28);
  *(_DWORD *)(v63 + 136) = *(_DWORD *)(*((void *)this + 24) + 28) != 0;
  *(_DWORD *)(v63 + 140) = *(_DWORD *)(*((void *)this + 26) + 28) != 0;
  *(void *)(v63 + 128) = 0;
  if (v65)
  {
    int v66 = sub_100007244(v64);
    if (v66 == 1)
    {
      *(_DWORD *)(*((void *)this + 63) + 128) = 1;
    }
    else if (v66 == 2)
    {
      *(_DWORD *)(*((void *)this + 63) + 132) = 1;
    }
  }
  uint64_t v67 = 0;
  int v68 = (char *)this + 256;
  do
  {
    (*(void (**)(void, uint64_t))(**(void **)&v68[v67] + 32))(*(void *)&v68[v67], a2);
    (*(void (**)(void))(**(void **)&v68[v67] + 24))(*(void *)&v68[v67]);
    v67 += 16;
  }
  while (v67 != 224);
  __int16 v69 = (_DWORD *)*((void *)this + 63);
  if (v69[28]) {
    v69[37] |= 1u;
  }
  if (v69[23]) {
    v69[37] |= 2u;
  }
  if (v69[26]) {
    v69[37] |= 4u;
  }
  if (v69[24]) {
    v69[37] |= 8u;
  }
  if (v69[22]) {
    v69[37] |= 0x10u;
  }
  if (v69[27]) {
    v69[37] |= 0x20u;
  }
  if (v69[25]) {
    v69[37] |= 0x80u;
  }
  if (v69[21]) {
    v69[37] |= 0x200u;
  }
  if (v69[30]) {
    v69[37] |= 0x1000u;
  }
  if (v69[32]) {
    v69[37] |= 0x400u;
  }
  if (v69[33]) {
    v69[37] |= 0x800u;
  }
  if (v69[34]) {
    v69[37] |= 0x2000u;
  }
  if (v69[29]) {
    v69[37] |= 0x4000u;
  }
  if (v69[31]) {
    v69[37] |= 0x8000u;
  }
  if (v69[35]) {
    v69[37] |= 0x10000u;
  }
}

void sub_1002A6A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void virtual thunk to'CLMartyInferencesAlgSevereCrash::epochFinalize(CLMartyInferencesAlgSevereCrash *this, uint64_t a2)
{
}

void CLMartyInferencesAlgSevereCrash::feedTrigger(CLMartyInferencesAlgSevereCrash *this, TriggerSample *a2)
{
  CLKappaDeescalatorAOI::updateWithTrigger(*((CLKappaDeescalatorAOI **)this + 4), a2);
  CLKappaDeescalatorSkiLift::updateWithTrigger(*((CLKappaDeescalatorSkiLift **)this + 12), a2);
  sub_1000075A8(*((void *)this + 28), (float16x4_t *)a2);
  double v4 = (CLKappaDeescalatorWaterProxy *)*((void *)this + 20);

  CLKappaDeescalatorWaterProxy::updateWithTrigger(v4, a2);
}

void virtual thunk to'CLMartyInferencesAlgSevereCrash::feedTrigger(CLMartyInferencesAlgSevereCrash *this, TriggerSample *a2)
{
}

void CLMartyInferencesAlgSevereCrash::feedGPS(CLKappaDeescalatorAOI **this, const CSSPUGps_Struct *a2)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
  }
  double v4 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double latitude = a2->latitude;
    double longitude = a2->longitude;
    int v7 = 134218240;
    double v8 = latitude;
    __int16 v9 = 2048;
    double v10 = longitude;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[M][SC] lat %f long %f", (uint8_t *)&v7, 0x16u);
  }
  CLKappaDeescalatorAOI::updateWithCurrentLocation(this[4], a2);
  CLKappaDeescalatorWaterProxy::updateWithCurrentLocation(this[20], a2);
}

void virtual thunk to'CLMartyInferencesAlgSevereCrash::feedGPS(CLMartyInferencesAlgSevereCrash *this, const CSSPUGps_Struct *a2)
{
}

void CLMartyInferencesAlgSevereCrash::feedRoads(uint64_t a1, uint64_t a2)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B4DA0);
  }
  double v4 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = 134217984;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[M][SC] feedRoads distanceToNearestRoad:%f", (uint8_t *)&v6, 0xCu);
  }
  sub_1000078BC(*(void *)(a1 + 224), a2);
  CLKappaDeescalatorWaterProxy::updateWithRoadInfo(*(void *)(a1 + 160), a2);
}

void virtual thunk to'CLMartyInferencesAlgSevereCrash::feedRoads(void *a1, uint64_t a2)
{
}

void CLMartyInferencesAlgSevereCrash::feedRemoteSample(CLSafetyDeescalatorJointDetection **this, const CSRemoteSample_Struct *a2)
{
}

void virtual thunk to'CLMartyInferencesAlgSevereCrash::feedRemoteSample(CLMartyInferencesAlgSevereCrash *this, const CSRemoteSample_Struct *a2)
{
}

uint64_t CLMartyInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  CLKappaDeescalatorStaticGps::updateWithFeatures(*(void *)(a1 + 144), a2);
  uint64_t v4 = *(void *)(a1 + 64);

  return CLKappaDeescalatorMovingGps::updateWithFeatures(v4, a2);
}

uint64_t virtual thunk to'CLMartyInferencesAlgSevereCrash::feedFeatures(void *a1, uint64_t a2)
{
  double v3 = (char *)a1 + *(void *)(*a1 - 48);
  CLKappaDeescalatorStaticGps::updateWithFeatures(*((void *)v3 + 18), a2);
  uint64_t v4 = *((void *)v3 + 8);

  return CLKappaDeescalatorMovingGps::updateWithFeatures(v4, a2);
}

unsigned __int16 *CLMartyInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  return CLKappaDeescalatorSteps::updateWithStepsFeatures(*(unsigned __int16 **)(a1 + 112), a2);
}

{
  return CLKappaDeescalatorMAP::updateWithIsMAP(*(void *)(a1 + 176), a2);
}

unsigned __int16 *virtual thunk to'CLMartyInferencesAlgSevereCrash::feedFeatures(void *a1, uint64_t a2)
{
  return CLKappaDeescalatorSteps::updateWithStepsFeatures(*(unsigned __int16 **)((char *)a1 + *(void *)(*a1 - 104) + 112), a2);
}

{
  return CLKappaDeescalatorMAP::updateWithIsMAP(*(void *)((char *)a1 + *(void *)(*a1 - 136) + 176), a2);
}

float CLMartyInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  CLKappaDeescalatorQuiescence::updateWithPulseFeatures(*(void *)(a1 + 80), a2);
  uint64_t v4 = *(void *)(a1 + 240);

  return CLSafetyDeescalatorProjectilePhone::updateWithPulseFeatures(v4, a2);
}

{
  uint64_t v4;
  uint64_t vars8;

  CLKappaDeescalatorQuiescence::updateWithSpinFeatures(*(void *)(a1 + 80), a2);
  uint64_t v4 = *(void *)(a1 + 240);

  return CLSafetyDeescalatorProjectilePhone::updateWithSpinFeatures(v4, a2);
}

{
  return CLKappaDeescalatorTriggerClusters::updateWithTriggerClustersFeatures(*(void *)(a1 + 128), a2);
}

{
  uint64_t v4;
  uint64_t vars8;

  CLKappaDeescalatorMAP::updateWithFreeFall(*(void *)(a1 + 176), a2);
  uint64_t v4 = *(void *)(a1 + 240);

  return CLSafetyDeescalatorProjectilePhone::updateWithFreeFallFeatures(v4, a2);
}

float virtual thunk to'CLMartyInferencesAlgSevereCrash::feedFeatures(void *a1, uint64_t a2)
{
  double v3 = (char *)a1 + *(void *)(*a1 - 32);
  CLKappaDeescalatorQuiescence::updateWithPulseFeatures(*((void *)v3 + 10), a2);
  uint64_t v4 = *((void *)v3 + 30);

  return CLSafetyDeescalatorProjectilePhone::updateWithPulseFeatures(v4, a2);
}

{
  char *v3;
  uint64_t v4;
  uint64_t vars8;

  double v3 = (char *)a1 + *(void *)(*a1 - 96);
  CLKappaDeescalatorQuiescence::updateWithSpinFeatures(*((void *)v3 + 10), a2);
  uint64_t v4 = *((void *)v3 + 30);

  return CLSafetyDeescalatorProjectilePhone::updateWithSpinFeatures(v4, a2);
}

{
  return CLKappaDeescalatorTriggerClusters::updateWithTriggerClustersFeatures(*(void *)((char *)a1 + *(void *)(*a1 - 128) + 128), a2);
}

{
  char *v3;
  uint64_t v4;
  uint64_t vars8;

  double v3 = (char *)a1 + *(void *)(*a1 - 112);
  CLKappaDeescalatorMAP::updateWithFreeFall(*((void *)v3 + 22), a2);
  uint64_t v4 = *((void *)v3 + 30);

  return CLSafetyDeescalatorProjectilePhone::updateWithFreeFallFeatures(v4, a2);
}

unsigned __int16 *CLMartyInferencesAlgSevereCrash::feedFeatures(uint64_t a1, _OWORD *a2)
{
  return CLKappaDeescalatorAutocorrelation::updateWithAutocorrelationFeatures(*(void *)(a1 + 48), a2);
}

unsigned __int16 *virtual thunk to'CLMartyInferencesAlgSevereCrash::feedFeatures(void *a1, _OWORD *a2)
{
  return CLKappaDeescalatorAutocorrelation::updateWithAutocorrelationFeatures(*(void *)((char *)a1 + *(void *)(*a1 - 80) + 48), a2);
}

char *CLMartyInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  return CLSafetyDeescalatorGolf::updateWithGolfFeatures(*(void *)(a1 + 208), a2);
}

char *virtual thunk to'CLMartyInferencesAlgSevereCrash::feedFeatures(void *a1, uint64_t a2)
{
  return CLSafetyDeescalatorGolf::updateWithGolfFeatures(*(void *)((char *)a1 + *(void *)(*a1 - 64) + 208), a2);
}

void CLMartyInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
}

void virtual thunk to'CLMartyInferencesAlgSevereCrash::feedFeatures(void *a1, uint64_t a2)
{
}

uint64_t CLMartyInferencesAlgSevereCrash::feedEstimates(uint64_t a1, char *a2)
{
  char v2 = *a2;
  *(unsigned char *)(a1 + 537) = *a2;
  *(unsigned char *)(a1 + 540) = a2[1];
  *(unsigned char *)(a1 + 544) = a2[2];
  return CLSafetyDeescalatorProjectilePhone::updateWithCoupledCrash(*(void *)(a1 + 240), v2);
}

{
  char v2;

  char v2 = *a2;
  *(unsigned char *)(a1 + 538) = *a2;
  *(unsigned char *)(a1 + 54CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = a2[1];
  *(unsigned char *)(a1 + 543) = a2[2];
  return CLSafetyDeescalatorProjectilePhone::updateWithUncoupledCrash(*(void *)(a1 + 240), v2);
}

{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t vars8;

  double v3 = *a2;
  *(unsigned char *)(a1 + 539) = *a2;
  *(unsigned char *)(a1 + 542) = a2[1];
  CLKappaDeescalatorAutocorrelation::updateWithHighSpeedCrash(*(void *)(a1 + 48), v3);
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(unsigned char *)(a1 + 539);

  return CLKappaDeescalatorSteps::updateWithHighSpeedCrash(v4, v5);
}

uint64_t virtual thunk to'CLMartyInferencesAlgSevereCrash::feedEstimates(void *a1, char *a2)
{
  char v2 = (char *)a1 + *(void *)(*a1 - 64);
  char v3 = *a2;
  v2[537] = *a2;
  v2[540] = a2[1];
  v2[544] = a2[2];
  return CLSafetyDeescalatorProjectilePhone::updateWithCoupledCrash(*((void *)v2 + 30), v3);
}

{
  char *v2;
  char v3;

  char v2 = (char *)a1 + *(void *)(*a1 - 72);
  char v3 = *a2;
  v2[538] = *a2;
  v2[541] = a2[1];
  v2[543] = a2[2];
  return CLSafetyDeescalatorProjectilePhone::updateWithUncoupledCrash(*((void *)v2 + 30), v3);
}

{
  return CLMartyInferencesAlgSevereCrash::feedEstimates((uint64_t)a1 + *(void *)(*a1 - 80), a2);
}

double CLMartyInferencesAlgSevereCrash::epochReset(CLMartyInferencesAlgSevereCrash *this)
{
  uint64_t v1 = *((void *)this + 63);
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 45) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  uint64_t v2 = *((void *)this + 63);
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(_WORD *)(v2 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(v2 + 84) = 0u;
  *(_OWORD *)(v2 + 100) = 0u;
  *(_OWORD *)(v2 + 116) = 0u;
  *(_OWORD *)(v2 + 130) = 0u;
  return result;
}

double virtual thunk to'CLMartyInferencesAlgSevereCrash::epochReset(CLMartyInferencesAlgSevereCrash *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 56);
  uint64_t v2 = *((void *)v1 + 63);
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 45) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  uint64_t v3 = *((void *)v1 + 63);
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(_WORD *)(v3 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 84) = 0u;
  *(_OWORD *)(v3 + 100) = 0u;
  *(_OWORD *)(v3 + 116) = 0u;
  *(_OWORD *)(v3 + 130) = 0u;
  return result;
}

void sub_1002A72A4(CLKappaAlgBlock *a1)
{
}

void sub_1002A72B0(CLKappaAlgBlock *a1)
{
  operator delete();
}

BOOL sub_1002A72F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (unint64_t *)(a1 + 520);
  if (!*(unsigned char *)(a1 + 528)) {
    uint64_t v4 = (unint64_t *)&unk_10033EC20;
  }
  BOOL result = CLKappaAlgBlock::isActiveInferences((CLKappaAlgBlock *)a1, a2, *v4);
  if (result)
  {
    if (*(unsigned char *)(a1 + 528) && (CLKappaDeescalator::isDecidedForOption(*(_DWORD *)(a1 + 28)) & 1) == 0)
    {
      if (!*(unsigned char *)(a1 + 528)) {
        sub_100007D1C();
      }
      return *(void *)(a1 + 520) + (unint64_t)(float)(*(float *)(*(void *)(a1 + 504) + 20) * 1000000.0) > a2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002A7388(uint64_t result, char a2)
{
  uint64_t v2 = 0;
  *(unsigned char *)(result + 24) = a2;
  do
  {
    *(unsigned char *)(*(void *)(result + 256 + v2) + 32) = a2;
    v2 += 16;
  }
  while (v2 != 224);
  return result;
}

void sub_1002A73AC(void *a1)
{
}

void sub_1002A73D0(void *a1)
{
  operator delete();
}

void sub_1002A7428(void *a1)
{
}

void sub_1002A744C(void *a1)
{
  operator delete();
}

void sub_1002A74A4(void *a1)
{
}

void sub_1002A74C8(void *a1)
{
  operator delete();
}

void sub_1002A7520(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_1002A7564(CLKappaAlgBlock *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v5) {
    sub_10000BB9C(v5);
  }
  for (uint64_t i = 472; i != 248; i -= 16)
  {
    uint64_t v7 = *(std::__shared_weak_count **)((char *)this + i);
    if (v7) {
      sub_10000BB9C(v7);
    }
  }
  double v8 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v8) {
    sub_10000BB9C(v8);
  }
  __int16 v9 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v9) {
    sub_10000BB9C(v9);
  }
  double v10 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v10) {
    sub_10000BB9C(v10);
  }
  double v11 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v11) {
    sub_10000BB9C(v11);
  }
  __int16 v12 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v12) {
    sub_10000BB9C(v12);
  }
  BOOL v13 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v13) {
    sub_10000BB9C(v13);
  }
  __int16 v14 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v14) {
    sub_10000BB9C(v14);
  }
  BOOL v15 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v15) {
    sub_10000BB9C(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v16) {
    sub_10000BB9C(v16);
  }
  unint64_t v17 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v17) {
    sub_10000BB9C(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v18) {
    sub_10000BB9C(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v19) {
    sub_10000BB9C(v19);
  }
  int v20 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v20) {
    sub_10000BB9C(v20);
  }
  int v21 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v21) {
    sub_10000BB9C(v21);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, a2 + 1);
}

void sub_1002A77E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003B4DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002A7800(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003B4DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002A7854(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1002A787C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x180uLL);
  BOOL result = sub_1002A78C8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1002A78B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002A78C8(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003B4E20;
  CLSafetyDeescalatorProjectilePhone::CLSafetyDeescalatorProjectilePhone((CLSafetyDeescalatorProjectilePhone *)(a1 + 3));
  return a1;
}

void sub_1002A7910(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002A7924(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003B4E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002A7944(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003B4E20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002A7998(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1002A79C0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xB8uLL);
  BOOL result = sub_1002A7A0C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1002A79F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002A7A0C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003B4E70;
  CLSafetyDeescalatorGolf::CLSafetyDeescalatorGolf((CLSafetyDeescalatorGolf *)(a1 + 3));
  return a1;
}

void sub_1002A7A54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002A7A68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003B4E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002A7A88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003B4E70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002A7ADC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t CLSafetyFeaturesAlgJointDetectionResult::reset(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

void CLSafetyFeaturesAlgJointDetectionResult::log(CLSafetyFeaturesAlgJointDetectionResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B5AA8);
  }
  uint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 3);
    uint64_t v4 = *((void *)this + 4);
    int v5 = 134349312;
    uint64_t v6 = v3;
    __int16 v7 = 2050;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[JD] AlgBlock summary,A,%{public}llu,B,%{public}llu\n", (uint8_t *)&v5, 0x16u);
  }
}

void CLSafetyFeaturesAlgJointDetection::CLSafetyFeaturesAlgJointDetection(CLSafetyFeaturesAlgJointDetection *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  *int v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((unsigned char *)this + 72) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((unsigned char *)this + 64) = 0;
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x48uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1003B5AD8;
  v6[1].__shared_weak_owners_ = 0;
  v6[2].__vftable = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1003A1B48;
  v6[1].__shared_owners_ = 0;
  v6[2].__shared_owners_ = 0;
  v6[2].__shared_weak_owners_ = 0;
  __int16 v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v6 + 1;
  *((void *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
    double v10 = (std::__shared_weak_count *)*((void *)this + 1);
    double v11 = v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    double v10 = v6 + 1;
    double v11 = v6;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_100045438((uint64_t)&v10, &v12);
  long long v8 = v12;
  long long v12 = 0uLL;
  __int16 v9 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v12 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  if (v11) {
    sub_10000BB9C(v11);
  }
  (*(void (**)(CLSafetyFeaturesAlgJointDetection *))(*(void *)this + 312))(this);
}

void sub_1002A7EA4(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v4) {
    sub_10000BB9C(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v5) {
    sub_10000BB9C(v5);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void CLSafetyFeaturesAlgJointDetection::CLSafetyFeaturesAlgJointDetection(CLSafetyFeaturesAlgJointDetection *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 10) = off_10039A008;
  *((void *)this + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = off_10039A0D0;
  *((void *)this + 12) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003B5480);
  *(void *)uint64_t v2 = off_1003B4F60;
  *(void *)(v2 + 80) = off_1003B5210;
  *(void *)(v2 + 88) = off_1003B5350;
  *(void *)(v2 + 96) = off_1003B5430;
  *(unsigned char *)(v2 + 72) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(unsigned char *)(v2 + 64) = 0;
  uint64_t v3 = (std::__shared_weak_count *)operator new(0x48uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1003B5AD8;
  v3[1].__shared_weak_owners_ = 0;
  v3[2].__vftable = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1003A1B48;
  v3[1].__shared_owners_ = 0;
  v3[2].__shared_owners_ = 0;
  v3[2].__shared_weak_owners_ = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v3 + 1;
  *((void *)this + 2) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
    __int16 v7 = (std::__shared_weak_count *)*((void *)this + 1);
    long long v8 = v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    __int16 v7 = v3 + 1;
    long long v8 = v3;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_100045438((uint64_t)&v7, &v9);
  long long v5 = v9;
  long long v9 = 0uLL;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v9 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  if (v8) {
    sub_10000BB9C(v8);
  }
  (*(void (**)(CLSafetyFeaturesAlgJointDetection *))(*(void *)this + 312))(this);
}

void sub_1002A8108(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v3) {
    sub_10000BB9C(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B5480);
  _Unwind_Resume(a1);
}

void CLSafetyFeaturesAlgJointDetection::reset(CLSafetyFeaturesAlgJointDetection *this)
{
  (*(void (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4));
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B5AA8);
  }
  uint64_t v1 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "[JD] reset", v2, 2u);
  }
}

void CLSafetyFeaturesAlgJointDetection::feedTrigger(CLSafetyFeaturesAlgJointDetection *this, const TriggerSample *a2)
{
  int v3 = *((unsigned __int8 *)this + 24);
  if (v3 == 2)
  {
    if ((a2[1].rmsSN & 0x10000) == 0) {
      return;
    }
    goto LABEL_6;
  }
  if (v3 == 1)
  {
    if ((a2->path & 3) == 0) {
      return;
    }
LABEL_6:
    *((void *)this + 8) = a2->timestamp;
    *((unsigned char *)this + 72) = 1;
    return;
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B5AA8);
  }
  uint64_t v4 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
  {
    int v5 = *((unsigned __int8 *)this + 24);
    v6[0] = 67109120;
    v6[1] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[JD] unsupported feature mode %u", (uint8_t *)v6, 8u);
  }
}

void virtual thunk to'CLSafetyFeaturesAlgJointDetection::feedTrigger(CLSafetyFeaturesAlgJointDetection *this, const TriggerSample *a2)
{
}

uint64_t CLSafetyFeaturesAlgJointDetection::epochFinalize(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 32);
  *(void *)(v2 + 24) = a2;
  if (*(unsigned char *)(this + 72)) {
    uint64_t v3 = *(void *)(this + 64);
  }
  else {
    uint64_t v3 = 0;
  }
  *(void *)(v2 + 32) = v3;
  return this;
}

void *virtual thunk to'CLSafetyFeaturesAlgJointDetection::epochFinalize(void *this, uint64_t a2)
{
  uint64_t v2 = (char *)this + *(void *)(*this - 48);
  uint64_t v3 = *((void *)v2 + 4);
  *(void *)(v3 + 24) = a2;
  if (v2[72]) {
    uint64_t v4 = *((void *)v2 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)(v3 + 32) = v4;
  return this;
}

uint64_t CLSafetyFeaturesAlgJointDetection::epochReset(CLSafetyFeaturesAlgJointDetection *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

uint64_t virtual thunk to'CLSafetyFeaturesAlgJointDetection::epochReset(CLSafetyFeaturesAlgJointDetection *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 56) + 32) + 24))();
}

void sub_1002A83F0(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003B4F60;
  *((void *)this + 10) = off_1003B5210;
  *((void *)this + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = off_1003B5350;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_1003B5430;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003B5480);
}

void sub_1002A84EC(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003B4F60;
  *((void *)this + 10) = off_1003B5210;
  *((void *)this + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = off_1003B5350;
  *((void *)this + 12) = off_1003B5430;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003B5480);

  operator delete();
}

void sub_1002A85D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    sub_10000BB9C(v4);
  }
}

void sub_1002A8600(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B4F60;
  *((void *)v1 + 10) = off_1003B5210;
  *((void *)v1 + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = off_1003B5350;
  *((void *)v1 + 12) = off_1003B5430;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B5480);
}

void sub_1002A86E4(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B4F60;
  *((void *)v1 + 10) = off_1003B5210;
  *((void *)v1 + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = off_1003B5350;
  *((void *)v1 + 12) = off_1003B5430;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B5480);

  operator delete();
}

void sub_1002A87DC(void *a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 32);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v5 = (std::__shared_weak_count *)*((void *)v2 + 7);
  *((void *)v2 + 6) = v4;
  *((void *)v2 + 7) = v3;
  if (v5) {
    sub_10000BB9C(v5);
  }
}

void sub_1002A881C(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B4F60;
  *((void *)v1 + 10) = off_1003B5210;
  *((void *)v1 + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = off_1003B5350;
  *((void *)v1 + 12) = off_1003B5430;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B5480);
}

void sub_1002A8900(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B4F60;
  *((void *)v1 + 10) = off_1003B5210;
  *((void *)v1 + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = off_1003B5350;
  *((void *)v1 + 12) = off_1003B5430;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B5480);

  operator delete();
}

void sub_1002A89F8(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B4F60;
  *((void *)v1 + 10) = off_1003B5210;
  *((void *)v1 + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = off_1003B5350;
  *((void *)v1 + 12) = off_1003B5430;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B5480);
}

void sub_1002A8ADC(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B4F60;
  *((void *)v1 + 10) = off_1003B5210;
  *((void *)v1 + 1CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = off_1003B5350;
  *((void *)v1 + 12) = off_1003B5430;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B5480);

  operator delete();
}

void sub_1002A8BD4(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_1002A8C18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003B5AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002A8C38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003B5AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002A8C8C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

float CSAccelPeakDetectorResult::maxNormValue(CSAccelPeakDetectorResult *this)
{
  if (*((unsigned char *)this + 4)) {
    return *(float *)(*((void *)this + 1) + 4 * *(int *)this);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B5B18);
  }
  uint64_t v2 = qword_1003DB6A8;
  float v1 = 0.0;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "[PD] Attempted to access max of empty vector", v4, 2u);
  }
  return v1;
}

uint64_t CSAccelPeakDetectorResult::maxNormTimestamp(CSAccelPeakDetectorResult *this)
{
  if (*((unsigned char *)this + 4)) {
    return *(void *)(*((void *)this + 4) + 8 * *(int *)this);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B5B18);
  }
  uint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "[PD] Attempted to access max of empty vector", v3, 2u);
  }
  return 0;
}

void CSAccelPeakDetectorResult::pushPeak(CSAccelPeakDetectorResult *this, float a2, uint64_t a3)
{
  uint64_t v6 = (char *)this + 24;
  unint64_t v7 = *((void *)this + 3);
  long long v8 = (float *)*((void *)this + 2);
  if ((unint64_t)v8 >= v7)
  {
    double v10 = (float *)*((void *)this + 1);
    uint64_t v11 = v8 - v10;
    if ((unint64_t)(v11 + 1) >> 62) {
      sub_10000EE98();
    }
    unint64_t v12 = v7 - (void)v10;
    unint64_t v13 = (uint64_t)(v7 - (void)v10) >> 1;
    if (v13 <= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      BOOL v15 = (char *)sub_100024458((uint64_t)v6, v14);
      double v10 = (float *)*((void *)this + 1);
      long long v8 = (float *)*((void *)this + 2);
    }
    else
    {
      BOOL v15 = 0;
    }
    uint64_t v16 = (float *)&v15[4 * v11];
    unint64_t v17 = &v15[4 * v14];
    *uint64_t v16 = a2;
    long long v9 = v16 + 1;
    while (v8 != v10)
    {
      int v18 = *((_DWORD *)v8-- - 1);
      *((_DWORD *)v16-- - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v18;
    }
    *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v16;
    *((void *)this + 2) = v9;
    *((void *)this + 3) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *long long v8 = a2;
    long long v9 = v8 + 1;
  }
  unint64_t v19 = *((void *)this + 6);
  *((void *)this + 2) = v9;
  int v20 = (char *)*((void *)this + 5);
  if ((unint64_t)v20 >= v19)
  {
    unsigned __int16 v22 = (char *)*((void *)this + 4);
    uint64_t v23 = (v20 - v22) >> 3;
    if ((unint64_t)(v23 + 1) >> 61) {
      sub_10000EE98();
    }
    unint64_t v24 = v19 - (void)v22;
    unint64_t v25 = (uint64_t)(v19 - (void)v22) >> 2;
    if (v25 <= v23 + 1) {
      unint64_t v25 = v23 + 1;
    }
    if (v24 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26)
    {
      uint64_t v27 = (char *)sub_10000EEB0((uint64_t)this + 48, v26);
      unsigned __int16 v22 = (char *)*((void *)this + 4);
      int v20 = (char *)*((void *)this + 5);
    }
    else
    {
      uint64_t v27 = 0;
    }
    uint64_t v28 = &v27[8 * v23];
    float v29 = &v27[8 * v26];
    *(void *)uint64_t v28 = a3;
    int v21 = v28 + 8;
    while (v20 != v22)
    {
      uint64_t v30 = *((void *)v20 - 1);
      v20 -= 8;
      *((void *)v28 - CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v30;
      v28 -= 8;
    }
    *((void *)this + 4) = v28;
    *((void *)this + 5) = v21;
    *((void *)this + 6) = v29;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)int v20 = a3;
    int v21 = v20 + 8;
  }
  *((void *)this + 5) = v21;
  if (CSAccelPeakDetectorResult::maxNormValue(this) < a2)
  {
    unint64_t v31 = *((void *)this + 2) - *((void *)this + 1);
    if (!*((unsigned char *)this + 4)) {
      *((unsigned char *)this + 4) = 1;
    }
    *(_DWORD *)this = (v31 >> 2) - 1;
  }
}

void CSAccelPeakDetectorResult::detectPeaks(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  id v7 = a1;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)(a2 + 48) = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v9)
  {
    double v10 = 0;
    int v11 = 0;
    unint64_t v12 = (unint64_t)(a4 * 1000000.0);
    uint64_t v13 = *(void *)v21;
    double v14 = 0.0;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v13) {
          objc_enumerationMutation(v8);
        }
        uint64_t v16 = (CSAccelPeakDetectorResult *)*(id *)(*((void *)&v20 + 1) + 8 * i);
        double v18 = CSAccelPeakDetectorResult::accelNorm(v16, v17);
        if (v14 < v18)
        {
          double v10 = (char *)[(CSAccelPeakDetectorResult *)v16 timestamp];
          double v14 = v18;
        }
        if (v18 >= a3 || ((v11 ^ 1) & 1) != 0)
        {
          v11 |= v18 >= a3;
        }
        else if ([(CSAccelPeakDetectorResult *)v16 timestamp] > &v10[v12])
        {
          float v19 = v14;
          CSAccelPeakDetectorResult::pushPeak((CSAccelPeakDetectorResult *)a2, v19, (uint64_t)v10);
          double v10 = 0;
          int v11 = 0;
          double v14 = 0.0;
        }
      }
      id v9 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v9);
  }
}

void sub_1002A91A8(_Unwind_Exception *a1)
{
  sub_1000327E0(v1);
  _Unwind_Resume(a1);
}

float CSAccelPeakDetectorResult::accelNorm(CSAccelPeakDetectorResult *this, const CSSPUAccel800 *a2)
{
  uint64_t v2 = this;
  float v3 = sqrtf((float)((float)(*((float *)[(CSAccelPeakDetectorResult *)v2 c_struct] + 3)* *((float *)[(CSAccelPeakDetectorResult *)v2 c_struct] + 3))+ (float)(*((float *)[(CSAccelPeakDetectorResult *)v2 c_struct] + 2)* *((float *)[(CSAccelPeakDetectorResult *)v2 c_struct] + 2)))+ (float)(*((float *)[(CSAccelPeakDetectorResult *)v2 c_struct] + 4)* *((float *)[(CSAccelPeakDetectorResult *)v2 c_struct] + 4)));

  return v3;
}

void sub_1002A9278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002A9288(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

double CLKappaFeaturesAlgGravityAutoCorrelationResult::log(CLKappaFeaturesAlgGravityAutoCorrelationResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B6730);
  }
  uint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 4);
    int v5 = *((unsigned __int8 *)this + 40);
    int v6 = *((unsigned __int8 *)this + 41);
    int v7 = *((_DWORD *)this + 4);
    double v8 = *((float *)this + 5);
    int v9 = *((_DWORD *)this + 6);
    double v10 = *((float *)this + 7);
    uint64_t v11 = *((void *)this + 6);
    uint64_t v12 = *((void *)this + 7);
    int v13 = *((_DWORD *)this + 16);
    double v14 = *((float *)this + 17);
    int v15 = *((_DWORD *)this + 18);
    int v16 = 134351872;
    uint64_t v17 = v4;
    __int16 v18 = 1026;
    int v19 = v5;
    __int16 v20 = 1026;
    int v21 = v6;
    __int16 v22 = 1026;
    int v23 = v7;
    __int16 v24 = 2050;
    double v25 = v8;
    __int16 v26 = 1026;
    int v27 = v9;
    __int16 v28 = 2050;
    double v29 = v10;
    __int16 v30 = 2050;
    uint64_t v31 = v11;
    __int16 v32 = 2050;
    uint64_t v33 = v12;
    __int16 v34 = 1026;
    int v35 = v13;
    __int16 v36 = 2050;
    double v37 = v14;
    __int16 v38 = 1026;
    int v39 = v15;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[GravityAC] AlgBlock summary,A,%{public}llu,B,%{public}d,C,%{public}d,config-1,%{public}d,config-2,%{public}f,config-3,%{public}d,config-4,%{public}f,debug-1,%{public}llu,debug-2,%{public}llu,debug-3,%{public}d,debug-4,%{public}f,debug-5,%{public}d", (uint8_t *)&v16, 0x62u);
  }
  return result;
}

void CLKappaFeaturesAlgGravityAutoCorrelation::CLKappaFeaturesAlgGravityAutoCorrelation(CLKappaFeaturesAlgGravityAutoCorrelation *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  uint64_t v4 = *a2;
  *int v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  int v6 = (std::__shared_weak_count *)operator new(0x68uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1003B6760;
  *(_OWORD *)&v6[1].__shared_owners_ = 0u;
  v6[2].std::__shared_count = 0u;
  *(_OWORD *)&v6[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[3].__shared_owners_ = 0u;
  v6[4].__vftable = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1003A1728;
  v6[1].__shared_weak_owners_ = 0x3D4CCCCD00000064;
  v6[2].__vftable = (std::__shared_weak_count_vtbl *)0x3E99999A00000006;
  v6[3].__vftable = 0;
  v6[3].__shared_owners_ = 0;
  LODWORD(v6[3].__shared_weak_owners_) = 0x7FFFFFFF;
  int v7 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v6 + 1;
  *((void *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    int v6 = (std::__shared_weak_count *)*((void *)this + 2);
    double v10 = (std::__shared_weak_count *)*((void *)this + 1);
    uint64_t v11 = v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    double v10 = v6 + 1;
    uint64_t v11 = v6;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_1002A9740((uint64_t)&v10, &v12);
  long long v8 = v12;
  long long v12 = 0uLL;
  int v9 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v8;
  if (v9)
  {
    sub_10000BB9C(v9);
    if (*((void *)&v12 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  if (v11) {
    sub_10000BB9C(v11);
  }
  (*(void (**)(CLKappaFeaturesAlgGravityAutoCorrelation *))(*(void *)this + 312))(this);
}

void sub_1002A9708(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v4) {
    sub_10000BB9C(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v5) {
    sub_10000BB9C(v5);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_1002A9740@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgGravityAutoCorrelation::CLKappaFeaturesAlgGravityAutoCorrelation(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 8) = off_10039A008;
  *((void *)this + 9) = off_10039A0D0;
  *((void *)this + 10) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003B6108);
  *(void *)uint64_t v2 = off_1003B5BE8;
  *(void *)(v2 + 64) = off_1003B5E98;
  *(void *)(v2 + 72) = off_1003B5FD8;
  *(void *)(v2 + 80) = off_1003B60B8;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  float v3 = (std::__shared_weak_count *)operator new(0x68uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)off_1003B6760;
  *(_OWORD *)&v3[1].__shared_owners_ = 0u;
  v3[2].std::__shared_count = 0u;
  *(_OWORD *)&v3[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[3].__shared_owners_ = 0u;
  v3[4].__vftable = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1003A1728;
  v3[1].__shared_weak_owners_ = 0x3D4CCCCD00000064;
  v3[2].__vftable = (std::__shared_weak_count_vtbl *)0x3E99999A00000006;
  v3[3].__vftable = 0;
  v3[3].__shared_owners_ = 0;
  LODWORD(v3[3].__shared_weak_owners_) = 0x7FFFFFFF;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v3 + 1;
  *((void *)this + 2) = v3;
  if (v4)
  {
    sub_10000BB9C(v4);
    float v3 = (std::__shared_weak_count *)*((void *)this + 2);
    int v7 = (std::__shared_weak_count *)*((void *)this + 1);
    long long v8 = v3;
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    int v7 = v3 + 1;
    long long v8 = v3;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_1002A9740((uint64_t)&v7, &v9);
  long long v5 = v9;
  long long v9 = 0uLL;
  int v6 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v5;
  if (v6)
  {
    sub_10000BB9C(v6);
    if (*((void *)&v9 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  if (v8) {
    sub_10000BB9C(v8);
  }
  (*(void (**)(CLKappaFeaturesAlgGravityAutoCorrelation *))(*(void *)this + 312))(this);
}

void sub_1002A9A24(_Unwind_Exception *a1)
{
  float v3 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v3) {
    sub_10000BB9C(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B6108);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgGravityAutoCorrelation::resetConfiguration(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  id v22 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgGravityAutoCorrelationConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 1125515264;
  LODWORD(v4) = 1120403456;
  LODWORD(v5) = 20.0;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v22 withMinValue:v5 maxValue:v3 defaultValue:v4];
  LODWORD(v23) = (int)v6;

  int v7 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v8) = 1017370378;
  LODWORD(v9) = 1028443341;
  LODWORD(v10) = 0.5;
  [v7 algorithmThresholdNumber:1 inArrayForKey:v22 withMinValue:v8 maxValue:v10 defaultValue:v9];
  DWORD1(v23) = v11;

  long long v12 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v13) = 1.0;
  LODWORD(v14) = 20.0;
  LODWORD(v15) = 6.0;
  [v12 algorithmThresholdNumber:2 inArrayForKey:v22 withMinValue:v13 maxValue:v14 defaultValue:v15];
  DWORD2(v23) = (int)v16;

  uint64_t v17 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v18) = 1036831949;
  LODWORD(v19) = 1050253722;
  LODWORD(v20) = 1.0;
  [v17 algorithmThresholdNumber:3 inArrayForKey:v22 withMinValue:v18 maxValue:v20 defaultValue:v19];
  HIDWORD(v23) = v21;

  CLKappaFeaturesAlgGravityAutoCorrelation::setConfig((uint64_t)this, &v23);
}

void sub_1002A9BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgGravityAutoCorrelation::setConfig(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(*(void *)(a1 + 32) + 16) = *a2;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B6730);
  }
  double v3 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(v5 + 16);
    double v7 = *(float *)(v5 + 20);
    int v8 = *(_DWORD *)(v5 + 24);
    double v9 = *(float *)(v5 + 28);
    v10[0] = 67109888;
    v10[1] = v6;
    __int16 v11 = 2048;
    double v12 = v7;
    __int16 v13 = 1024;
    int v14 = v8;
    __int16 v15 = 2048;
    double v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[GravityAC] config, %d, %f, %d, %f", (uint8_t *)v10, 0x22u);
  }
  return result;
}

uint64_t CLKappaFeaturesAlgGravityAutoCorrelation::reset(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4));
  uint64_t v3 = *((void *)this + 4);
  *(void *)(v3 + 32) = 0;
  *(_WORD *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0x7FFFFFFFLL;
  *(_DWORD *)(v3 + 72) = 0;
  return result;
}

void CLKappaFeaturesAlgGravityAutoCorrelation::epochFinalize(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  uint64_t v1 = __chkstk_darwin(this);
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = *(void *)(v1 + 32);
  *(void *)(v5 + 32) = 0;
  *(_WORD *)(v5 + 40) = 0;
  *(void *)(v5 + 48) = 0;
  *(void *)(v5 + 56) = 0;
  *(void *)(v5 + 64) = 0x7FFFFFFFLL;
  *(_DWORD *)(v5 + 72) = 0;
  id v6 = *(id *)(*(void *)(v1 + 48) + 72);
  int v7 = [v6 count];
  *(_DWORD *)(*(void *)(v4 + 32) + 72) = v7;
  if (v7 < 0x2EE) {
    goto LABEL_122;
  }
  __int16 v100 = [v6 objectAtIndex:0];
  int v8 = [v6 objectAtIndex:v7 - 1];
  *(void *)(*(void *)(v4 + 32) + 48) = [v100 timestamp];
  *(void *)(*(void *)(v4 + 32) + 56) = [v8 timestamp];
  uint64_t v115 = 0x40000000000;
  uint64_t v113 = 0x40000000000;
  uint64_t v111 = 0x40000000000;
  if (v7 < 1) {
    goto LABEL_30;
  }
  uint64_t v97 = v4;
  uint64_t v98 = v3;
  uint64_t v99 = v8;
  for (uint64_t i = 0; i != v7; ++i)
  {
    double v10 = [v6 objectAtIndex:i v97, v98, v99];
    unsigned int v11 = *(_DWORD *)[v10 c_struct];
    unsigned int v12 = *((_DWORD *)[v10 c_struct] + 1);
    unsigned int v13 = *((_DWORD *)[v10 c_struct] + 2);
    v14.i32[0] = *((_DWORD *)[v10 c_struct] + 3);
    v102[0].i64[0] = __PAIR64__(v12, v11);
    v102[0].i64[1] = __PAIR64__(v14.u32[0], v13);
    CMOQuaternion::normalize(v102, v14);
    float v15 = CMOQuaternion::gravity((CMOQuaternion *)v102);
    unsigned int v18 = WORD1(v115);
    unint64_t v19 = HIDWORD(v115);
    uint64_t v20 = (unsigned __int16)v115;
    if ((unsigned __int16)v115 + (unint64_t)WORD1(v115) >= HIDWORD(v115)) {
      uint64_t v21 = HIDWORD(v115);
    }
    else {
      uint64_t v21 = 0;
    }
    *(float *)&v116[(unsigned __int16)v115 + (unint64_t)WORD1(v115) - v21] = v15;
    if (v19 <= v18)
    {
      if (v20 + 1 < v19) {
        LOWORD(v19) = 0;
      }
      LOWORD(v115) = v20 + 1 - v19;
    }
    else
    {
      WORD1(v115) = v18 + 1;
    }
    unsigned int v22 = WORD1(v113);
    unint64_t v23 = HIDWORD(v113);
    uint64_t v24 = (unsigned __int16)v113;
    if ((unsigned __int16)v113 + (unint64_t)WORD1(v113) >= HIDWORD(v113)) {
      uint64_t v25 = HIDWORD(v113);
    }
    else {
      uint64_t v25 = 0;
    }
    v114[(unsigned __int16)v113 + (unint64_t)WORD1(v113) - v25] = v16;
    if (v23 <= v22)
    {
      if (v24 + 1 < v23) {
        LOWORD(v23) = 0;
      }
      LOWORD(v113) = v24 + 1 - v23;
    }
    else
    {
      WORD1(v113) = v22 + 1;
    }
    unsigned int v26 = WORD1(v111);
    unint64_t v27 = HIDWORD(v111);
    uint64_t v28 = (unsigned __int16)v111;
    if ((unsigned __int16)v111 + (unint64_t)WORD1(v111) >= HIDWORD(v111)) {
      uint64_t v29 = HIDWORD(v111);
    }
    else {
      uint64_t v29 = 0;
    }
    v112[(unsigned __int16)v111 + (unint64_t)WORD1(v111) - v29] = v17;
    if (v27 <= v26)
    {
      if (v28 + 1 < v27) {
        LOWORD(v27) = 0;
      }
      LOWORD(v11CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v28 + 1 - v27;
    }
    else
    {
      WORD1(v11CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v26 + 1;
    }
  }
  uint64_t v3 = v98;
  int v8 = v99;
  uint64_t v4 = v97;
  if (v7 <= 1023)
  {
LABEL_30:
    uint64_t v30 = (unsigned __int16)v111;
    uint64_t v31 = (unsigned __int16)v113;
    uint64_t v32 = (unsigned __int16)v115;
    unint64_t v33 = HIDWORD(v115);
    unint64_t v34 = HIDWORD(v113);
    unint64_t v35 = HIDWORD(v111);
    unsigned __int16 v36 = WORD1(v115);
    unsigned __int16 v37 = WORD1(v113);
    int v38 = v7 - 1024;
    unsigned __int16 v39 = WORD1(v111);
    do
    {
      unint64_t v40 = v32 + v36;
      if (v40 >= v33) {
        unint64_t v41 = v33;
      }
      else {
        unint64_t v41 = 0;
      }
      v116[v40 - v41] = 0;
      if (v33 <= v36)
      {
        unint64_t v42 = v32 + 1;
        if (v42 >= v33) {
          __int16 v43 = v33;
        }
        else {
          __int16 v43 = 0;
        }
        unsigned __int16 v44 = v42 - v43;
        uint64_t v32 = v44;
        LOWORD(v115) = v44;
      }
      else
      {
        WORD1(v115) = ++v36;
      }
      unint64_t v45 = v31 + v37;
      if (v45 >= v34) {
        unint64_t v46 = v34;
      }
      else {
        unint64_t v46 = 0;
      }
      v114[v45 - v46] = 0;
      if (v34 <= v37)
      {
        unint64_t v47 = v31 + 1;
        if (v47 >= v34) {
          __int16 v48 = v34;
        }
        else {
          __int16 v48 = 0;
        }
        unsigned __int16 v49 = v47 - v48;
        uint64_t v31 = v49;
        LOWORD(v113) = v49;
      }
      else
      {
        WORD1(v113) = ++v37;
      }
      unint64_t v50 = v30 + v39;
      if (v50 >= v35) {
        unint64_t v51 = v35;
      }
      else {
        unint64_t v51 = 0;
      }
      v112[v50 - v51] = 0;
      if (v35 <= v39)
      {
        unint64_t v52 = v30 + 1;
        if (v52 >= v35) {
          __int16 v53 = v35;
        }
        else {
          __int16 v53 = 0;
        }
        unsigned __int16 v54 = v52 - v53;
        uint64_t v30 = v54;
        LOWORD(v11CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v54;
      }
      else
      {
        WORD1(v11CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = ++v39;
      }
    }
    while (!__CFADD__(v38++, 1));
  }
  CMFourierTransformSafety::CMFourierTransformSafety((CMFourierTransformSafety *)v102);
  CMFourierTransformSafety::forward_wide((uint64_t)v102);
  CMFourierTransformSafety::forward_wide((uint64_t)v102);
  CMFourierTransformSafety::forward_wide((uint64_t)v102);
  uint64_t v56 = 0;
  unint64_t v57 = 0;
  int v58 = 0;
  unint64_t v59 = 0;
  int v60 = 0;
  unint64_t v61 = 0;
  unsigned __int16 v62 = 0;
  uint64_t v109 = 0x40000000000;
  uint64_t v107 = 0x40000000000;
  int v105 = 1024;
  LOWORD(v63) = 0;
  __int16 v64 = 0;
  LOWORD(v65) = 0;
  __int16 v66 = 0;
  do
  {
    unint64_t v67 = v57 + (unsigned __int16)v58;
    if (v67 >= 0x400) {
      uint64_t v68 = -1024;
    }
    else {
      uint64_t v68 = 0;
    }
    *(float *)&v110[v68 + v67] = *(float *)&v110[v56 + 3072] * *(float *)&v110[v56 + 3072];
    if (v57 > 0x3FF)
    {
      if ((unsigned __int16)v58 >= 0x3FFu) {
        int v69 = -1024;
      }
      else {
        int v69 = 0;
      }
      int v63 = v58 + v69 + 1;
      int v58 = v63;
    }
    else
    {
      __int16 v64 = ++v57;
    }
    unint64_t v70 = v59 + (unsigned __int16)v60;
    if (v70 >= 0x400) {
      uint64_t v71 = -1024;
    }
    else {
      uint64_t v71 = 0;
    }
    *(float *)&v108[v71 + v70] = *(float *)&v110[v56 + 2048] * *(float *)&v110[v56 + 2048];
    if (v59 > 0x3FF)
    {
      if ((unsigned __int16)v60 >= 0x3FFu) {
        int v72 = -1024;
      }
      else {
        int v72 = 0;
      }
      int v65 = v60 + v72 + 1;
      int v60 = v65;
    }
    else
    {
      __int16 v66 = ++v59;
    }
    unint64_t v73 = v61 + v62;
    if (v73 >= 0x400) {
      uint64_t v74 = -1024;
    }
    else {
      uint64_t v74 = 0;
    }
    *(float *)&v106[v74 + v73] = *(float *)&v110[v56 + 1024] * *(float *)&v110[v56 + 1024];
    if (v61 > 0x3FF)
    {
      if (v62 >= 0x3FFu) {
        __int16 v75 = -1024;
      }
      else {
        __int16 v75 = 0;
      }
      v62 += v75 + 1;
    }
    else
    {
      ++v61;
    }
    ++v56;
  }
  while (v56 != 1024);
  LOWORD(v109) = v63;
  WORD1(v109) = v64;
  LOWORD(v107) = v65;
  WORD1(v107) = v66;
  __int16 v104 = v61;
  unsigned __int16 v103 = v62;
  CMFourierTransformSafety::CMFourierTransformSafety((CMFourierTransformSafety *)v101);
  CMFourierTransformSafety::forward_real((uint64_t)v101);
  CMFourierTransformSafety::forward_real((uint64_t)v101);
  CMFourierTransformSafety::forward_real((uint64_t)v101);
  uint64_t v76 = 0;
  float32x4_t v77 = (float32x4_t)vdupq_n_s32(0x3A800000u);
  do
  {
    *(float32x4_t *)((char *)&v102[v76 + 521] + 8) = vmulq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)((char *)&v102[v76 + 1289] + 8), *(float32x4_t *)((char *)&v102[v76 + 1033] + 8)), *(float32x4_t *)((char *)&v102[v76 + 777] + 8)), v77);
    ++v76;
  }
  while (v76 != 256);
  int v78 = 0;
  int v79 = 0;
  int v80 = 0;
  char v81 = 0;
  int v82 = 0;
  float v83 = -3.4028e38;
  float v84 = 3.4028e38;
  uint64_t v85 = 111;
  float v86 = 3.4028e38;
  while (1)
  {
    float v87 = v102[521].f32[v85 + 2];
    v82 |= v87 >= v86;
    if (v82)
    {
      if (v87 <= v83) {
        goto LABEL_98;
      }
      float v83 = v102[521].f32[v85 + 2];
      int v79 = v85;
    }
    else
    {
      float v86 = v102[521].f32[v85 + 2];
      int v80 = v85;
    }
    if ((v81 & 1) == 0)
    {
      char v81 = 0;
      goto LABEL_102;
    }
LABEL_98:
    if (v87 >= v84) {
      break;
    }
    char v81 = 1;
    float v84 = v102[521].f32[v85 + 2];
    int v78 = v85;
LABEL_102:
    if (++v85 == 399)
    {
      float v88 = 0.0;
      int v89 = 0x7FFFFFFF;
      goto LABEL_114;
    }
  }
  int v90 = v79 - v80;
  int v91 = v78 - v79;
  float v92 = (float)(v84 + v86) * -0.5;
  if (v80 <= v90) {
    int v93 = v90;
  }
  else {
    int v93 = v80;
  }
  if (v93 <= v91) {
    int v93 = v91;
  }
  if (v90 < v80) {
    int v80 = v90;
  }
  float v88 = v83 + v92;
  if (v91 < v80) {
    int v80 = v91;
  }
  int v89 = v93 - v80;
LABEL_114:
  uint64_t v94 = *(void *)(v4 + 32);
  if (v88 <= *(float *)(v94 + 20) || v89 >= *(_DWORD *)(v94 + 16))
  {
    char v96 = 0;
    BOOL v95 = 0;
  }
  else
  {
    BOOL v95 = v88 > *(float *)(v94 + 28) && v89 < *(_DWORD *)(v94 + 24);
    char v96 = 1;
  }
  *(void *)(v94 + 32) = v3;
  *(unsigned char *)(v94 + 40) = v96;
  *(unsigned char *)(v94 + 4CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v95;
  *(float *)(v94 + 68) = v88;
  *(_DWORD *)(v94 + 64) = v89;

LABEL_122:
}

void sub_1002AA550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void virtual thunk to'CLKappaFeaturesAlgGravityAutoCorrelation::epochFinalize(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
}

uint64_t CLKappaFeaturesAlgGravityAutoCorrelation::epochReset(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

uint64_t virtual thunk to'CLKappaFeaturesAlgGravityAutoCorrelation::epochReset(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 56) + 32) + 24))();
}

void sub_1002AA630(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003B5BE8;
  *((void *)this + 8) = off_1003B5E98;
  *((void *)this + 9) = off_1003B5FD8;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = off_1003B60B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003B6108);
}

void sub_1002AA72C(CLKappaAlgBlock *this)
{
  *(void *)this = off_1003B5BE8;
  *((void *)this + 8) = off_1003B5E98;
  *((void *)this + 9) = off_1003B5FD8;
  *((void *)this + 10) = off_1003B60B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(this, (uint64_t *)off_1003B6108);

  operator delete();
}

void sub_1002AA814(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    sub_10000BB9C(v4);
  }
}

void sub_1002AA840(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B5BE8;
  *((void *)v1 + 8) = off_1003B5E98;
  *((void *)v1 + 9) = off_1003B5FD8;
  *((void *)v1 + 10) = off_1003B60B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B6108);
}

void sub_1002AA924(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B5BE8;
  *((void *)v1 + 8) = off_1003B5E98;
  *((void *)v1 + 9) = off_1003B5FD8;
  *((void *)v1 + 10) = off_1003B60B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B6108);

  operator delete();
}

void sub_1002AAA1C(void *a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 32);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 7);
  *((void *)v2 + 6) = v4;
  *((void *)v2 + 7) = v3;
  if (v5) {
    sub_10000BB9C(v5);
  }
}

void sub_1002AAA5C(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B5BE8;
  *((void *)v1 + 8) = off_1003B5E98;
  *((void *)v1 + 9) = off_1003B5FD8;
  *((void *)v1 + 10) = off_1003B60B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B6108);
}

void sub_1002AAB40(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B5BE8;
  *((void *)v1 + 8) = off_1003B5E98;
  *((void *)v1 + 9) = off_1003B5FD8;
  *((void *)v1 + 10) = off_1003B60B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B6108);

  operator delete();
}

void sub_1002AAC38(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B5BE8;
  *((void *)v1 + 8) = off_1003B5E98;
  *((void *)v1 + 9) = off_1003B5FD8;
  *((void *)v1 + 10) = off_1003B60B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }

  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B6108);
}

void sub_1002AAD1C(void *a1)
{
  uint64_t v1 = (CLKappaAlgBlock *)((char *)a1 + *(void *)(*a1 - 24));
  *(void *)uint64_t v1 = off_1003B5BE8;
  *((void *)v1 + 8) = off_1003B5E98;
  *((void *)v1 + 9) = off_1003B5FD8;
  *((void *)v1 + 10) = off_1003B60B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v2) {
    sub_10000BB9C(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B6108);

  operator delete();
}

void sub_1002AAE14(id a1)
{
  qword_1003DB6A8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "Alg");

  _objc_release_x1();
}

void sub_1002AAE58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003B6760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002AAE78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003B6760;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002AAECC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

id sub_1002AB0C8()
{
  if (qword_1003DB6D0 != -1) {
    dispatch_once(&qword_1003DB6D0, &stru_1003B67F0);
  }
  uint64_t v0 = (void *)qword_1003DB6D8;

  return v0;
}

void sub_1002AB474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002AB6CC(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

__CFString *sub_1002AB6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(a2)
  {
    case 4:
      [*(id *)(a1 + 32) resetSession];
LABEL_9:
      uint64_t v3 = 0;
      break;
    case 3:
      if (a3 == 1)
      {
        uint64_t v3 = (__CFString *)objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 24));
        break;
      }
      goto LABEL_9;
    case 1:
      uint64_t v3 = @"idle";
      break;
    default:
      uint64_t v3 = 0;
      break;
  }

  return v3;
}

__CFString *sub_1002AB764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  switch(a2)
  {
    case 1:
      uint64_t v4 = @"reading";
      break;
    case 3:
      uint64_t v4 = 0;
      switch(a3)
      {
        case 1:
          if (qword_1003DB6D0 != -1) {
            dispatch_once(&qword_1003DB6D0, &stru_1003B67F0);
          }
          int v7 = qword_1003DB6D8;
          if (os_log_type_enabled((os_log_t)qword_1003DB6D8, OS_LOG_TYPE_INFO))
          {
            v10[0] = 67109120;
            v10[1] = 600;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "reset timeout to  %u sec", (uint8_t *)v10, 8u);
          }
          [*(id *)(*(void *)(a1 + 32) + 112) setNextFireDelay:600.0];
          uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 24);
          goto LABEL_18;
        case 2:
        case 3:
          goto LABEL_4;
        case 4:
          uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 32);
          goto LABEL_18;
        case 6:
          if (qword_1003DB6D0 != -1) {
            dispatch_once(&qword_1003DB6D0, &stru_1003B67F0);
          }
          double v9 = qword_1003DB6D8;
          if (os_log_type_enabled((os_log_t)qword_1003DB6D8, OS_LOG_TYPE_INFO))
          {
            LOWORD(v10[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "forcefully aborting session", (uint8_t *)v10, 2u);
          }
LABEL_4:
          uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 16);
LABEL_18:
          uint64_t v4 = objc_retainBlock(v5);
          break;
        default:
          goto LABEL_19;
      }
      break;
    case 4:
      [*(id *)(a1 + 32) start];
      goto LABEL_11;
    case 6:
      if (qword_1003DB6D0 != -1) {
        dispatch_once(&qword_1003DB6D0, &stru_1003B67F0);
      }
      id v6 = qword_1003DB6D8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6D8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "stop trigger timer", (uint8_t *)v10, 2u);
      }
      [*(id *)(*(void *)(a1 + 32) + 112) setNextFireDelay:1.79769313e308];
LABEL_11:
      uint64_t v4 = 0;
      break;
    default:
      break;
  }
LABEL_19:

  return v4;
}

__CFString *sub_1002ABA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  switch(a2)
  {
    case 1:
      uint64_t v4 = @"waitForSOS";
      goto LABEL_31;
    case 3:
      if (a3 == 5 || a3 == 2) {
        goto LABEL_29;
      }
      if (a3 != 1) {
        goto LABEL_24;
      }
      if (!*(unsigned char *)(*(void *)(a1 + 32) + 216)) {
        goto LABEL_29;
      }
      if (qword_1003DB6D0 != -1) {
        dispatch_once(&qword_1003DB6D0, &stru_1003B67F0);
      }
      uint64_t v5 = qword_1003DB6D8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)unsigned int v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "ignoring trigger in wait state while waiting for SOS resolution", v13, 2u);
      }
      id v6 = *(void **)(*(void *)(a1 + 32) + 32);
      goto LABEL_30;
    case 4:
      if (*(unsigned char *)(*(void *)(a1 + 32) + 216))
      {
        if (qword_1003DB6D0 != -1) {
          dispatch_once(&qword_1003DB6D0, &stru_1003B67F0);
        }
        int v7 = qword_1003DB6D8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6D8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "wait for 30s for SOS resolution", buf, 2u);
        }
        int v8 = *(void **)(*(void *)(a1 + 32) + 112);
        double v9 = 30.0;
LABEL_23:
        [v8 setNextFireDelay:v9 interval:1.79769313e308];
LABEL_24:
        uint64_t v4 = 0;
      }
      else
      {
        if (qword_1003DB6D0 != -1) {
          dispatch_once(&qword_1003DB6D0, &stru_1003B67F0);
        }
        unsigned int v11 = qword_1003DB6D8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)int v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "SOSInProgress false while in wait state", v16, 2u);
        }
LABEL_29:
        id v6 = *(void **)(*(void *)(a1 + 32) + 16);
LABEL_30:
        uint64_t v4 = objc_retainBlock(v6);
      }
LABEL_31:
      return v4;
    case 6:
      if (qword_1003DB6D0 != -1) {
        dispatch_once(&qword_1003DB6D0, &stru_1003B67F0);
      }
      double v10 = qword_1003DB6D8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)float32x4_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "cancel sos timeout timer", v14, 2u);
      }
      int v8 = *(void **)(*(void *)(a1 + 32) + 112);
      double v9 = 1.79769313e308;
      goto LABEL_23;
    default:
      goto LABEL_31;
  }
}

id sub_1002ABCB0(uint64_t a1)
{
  if (qword_1003DB6D0 != -1) {
    dispatch_once(&qword_1003DB6D0, &stru_1003B67F0);
  }
  uint64_t v2 = qword_1003DB6D8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Trigger timeout expired", v4, 2u);
  }
  return [*(id *)(*(void *)(a1 + 32) + 8) signal:2 data:0];
}

void sub_1002AC270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002AC3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002ACE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10000BB9C(a14);
  }
  if (v14) {
    sub_10000BB9C(v14);
  }
  _Unwind_Resume(a1);
}

void sub_1002ACF5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "1002AD3B0: call analysis failed (funcsize=47)"

void sub_1002ADF78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "1002AE1F0: call analysis failed (funcsize=90)"

id sub_1002AE214(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 216))
  {
    uint64_t v2 = 4;
  }
  else
  {
    [*(id *)(v1 + 80) feedDetectionDecision:0 uuid:0 forMode:2];
    uint64_t v1 = *(void *)(a1 + 32);
    uint64_t v2 = 3;
  }
  uint64_t v4 = *(void **)(v1 + 8);

  return [v4 signal:v2 data:0];
}

void sub_1002AE384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002AE744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002AE9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002AEE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002AF7EC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1002AF8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_1002AF974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

#error "1002AF9B4: call analysis failed (funcsize=12)"

void sub_1002AFA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_1002AFBBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002AFC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_1002AFD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

#error "1002AFD48: call analysis failed (funcsize=12)"

void sub_1002AFDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_1002AFE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_1002AFF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

id sub_1002AFF38()
{
  if (qword_1003DB6C0 != -1) {
    dispatch_once(&qword_1003DB6C0, &stru_1003B6810);
  }
  uint64_t v0 = (void *)qword_1003DB6C8;

  return v0;
}

#error "1002AFFB8: call analysis failed (funcsize=12)"

void sub_1002B004C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_1002B00F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_1002B0194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_1002B0238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_1002B07C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002B09A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002B0F7C(_Unwind_Exception *exception_object)
{
}

#error "1002B11B0: call analysis failed (funcsize=140)"

void sub_1002B142C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002B14BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002B170C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002B17E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002B1A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002B1B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002B1D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002B1F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002B227C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  uint64_t v21 = a12;
  a12 = 0;
  if (v21) {
    sub_1002B4BE0((uint64_t)&a12, v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B2B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27)
{
  _Unwind_Resume(a1);
}

id sub_1002B2CD8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1002B2F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002B37E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  _Unwind_Resume(a1);
}

id sub_1002B39A4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1002B3A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002B3E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002B3E74()
{
}

void sub_1002B3F54(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v7 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained updateMartyUserInfoWithInfo:v8];
    [v7 uploadUserInfoToCoreAnalyticsWithHandler:v5];
    [v7 clearCAStats];
  }
}

void sub_1002B3FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002B4810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002B4AB8(id a1)
{
  qword_1003DB6D8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "MartyDetection");

  _objc_release_x1();
}

void sub_1002B4AFC(id a1)
{
  qword_1003DB6C8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "KappaDetection");

  _objc_release_x1();
}

void sub_1002B4B40(id a1)
{
  qword_1003DB758 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "CoreAnalytics");

  _objc_release_x1();
}

void sub_1002B4B84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    operator delete();
  }
}

void sub_1002B4BE0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    operator delete();
  }
}

void sub_1002B4C3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_signpost_emit_with_name_impl(a1, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &a9, 0x26u);
}

void sub_1002B4C68(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x26u);
}

void sub_1002B4C88(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_INFO, a4, &a9, 0x26u);
}

BOOL sub_1002B4CA8(NSObject *a1)
{
  *uint64_t v1 = a1;
  return os_log_type_enabled(a1, OS_LOG_TYPE_INFO);
}

void sub_1002B4CC4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_INFO, a4, a5, 0x26u);
}

void sub_1002B4CDC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x26u);
}

BOOL sub_1002B4CF4(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_FAULT);
}

#error "1002B4DB8: call analysis failed (funcsize=58)"

uint64_t sub_1002B4E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1002B4D34();
  a25 = v27;
  a26 = v28;
  uint64_t v29 = sub_1002AB0C8();
  if (sub_10029AD20(v29))
  {
    sub_10000BDD8();
    sub_1002B4CDC((void *)&_mh_execute_header, v26, v30, "{\"msg%{public}.0s\":\"flow controller is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  uint64_t v31 = sub_1002AB0C8();
  if (os_signpost_enabled(v31))
  {
    sub_10000BDD8();
    sub_1002A3B2C((void *)&_mh_execute_header, v31, v32, v33, "flow controller is null", "{\"msg%{public}.0s\":\"flow controller is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  unint64_t v34 = sub_1002AB0C8();
  if (sub_10029AD08(v34))
  {
    sub_10000BDD8();
    sub_1002B4CC4((void *)&_mh_execute_header, v31, v35, "{\"msg%{public}.0s\":\"flow controller is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

uint64_t sub_1002B4F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1002B4D34();
  a25 = v27;
  a26 = v28;
  uint64_t v29 = sub_1002AB0C8();
  if (sub_10029AD20(v29))
  {
    sub_10000BDD8();
    sub_1002B4CDC((void *)&_mh_execute_header, v26, v30, "{\"msg%{public}.0s\":\"flow controller is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  uint64_t v31 = sub_1002AB0C8();
  if (os_signpost_enabled(v31))
  {
    sub_10000BDD8();
    sub_1002A3B2C((void *)&_mh_execute_header, v31, v32, v33, "flow controller is null", "{\"msg%{public}.0s\":\"flow controller is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  unint64_t v34 = sub_1002AB0C8();
  if (sub_10029AD08(v34))
  {
    sub_10000BDD8();
    sub_1002B4CC4((void *)&_mh_execute_header, v31, v35, "{\"msg%{public}.0s\":\"flow controller is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

#error "1002B514C: call analysis failed (funcsize=58)"

#error "1002B5260: call analysis failed (funcsize=58)"

#error "1002B5374: call analysis failed (funcsize=58)"

#error "1002B5488: call analysis failed (funcsize=58)"

uint64_t sub_1002B552C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1002B4D34();
  a25 = v27;
  a26 = v28;
  uint64_t v29 = sub_1002AB0C8();
  if (sub_10029AD20(v29))
  {
    sub_10000BDD8();
    sub_1002B4CDC((void *)&_mh_execute_header, v26, v30, "{\"msg%{public}.0s\":\"CSSPUAccel is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  uint64_t v31 = sub_1002AB0C8();
  if (os_signpost_enabled(v31))
  {
    sub_10000BDD8();
    sub_1002A3B2C((void *)&_mh_execute_header, v31, v32, v33, "CSSPUAccel is null", "{\"msg%{public}.0s\":\"CSSPUAccel is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  unint64_t v34 = sub_1002AB0C8();
  if (sub_10029AD08(v34))
  {
    sub_10000BDD8();
    sub_1002B4CC4((void *)&_mh_execute_header, v31, v35, "{\"msg%{public}.0s\":\"CSSPUAccel is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

#error "1002B56DC: call analysis failed (funcsize=58)"

#error "1002B57F0: call analysis failed (funcsize=58)"

#error "1002B5904: call analysis failed (funcsize=58)"

#error "1002B5A18: call analysis failed (funcsize=58)"

uint64_t sub_1002B5ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1002B4D34();
  a25 = v27;
  a26 = v28;
  uint64_t v29 = sub_1002AB0C8();
  if (sub_10029AD20(v29))
  {
    sub_10000BDD8();
    sub_1002B4CDC((void *)&_mh_execute_header, v26, v30, "{\"msg%{public}.0s\":\"CSSPUMag is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  uint64_t v31 = sub_1002AB0C8();
  if (os_signpost_enabled(v31))
  {
    sub_10000BDD8();
    sub_1002A3B2C((void *)&_mh_execute_header, v31, v32, v33, "CSSPUMag is null", "{\"msg%{public}.0s\":\"CSSPUMag is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  unint64_t v34 = sub_1002AB0C8();
  if (sub_10029AD08(v34))
  {
    sub_10000BDD8();
    sub_1002B4CC4((void *)&_mh_execute_header, v31, v35, "{\"msg%{public}.0s\":\"CSSPUMag is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

#error "1002B5C6C: call analysis failed (funcsize=58)"

#error "1002B5D80: call analysis failed (funcsize=58)"

#error "1002B5E94: call analysis failed (funcsize=58)"

uint64_t sub_1002B5F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1002B4D34();
  a25 = v27;
  a26 = v28;
  uint64_t v29 = sub_1002AB0C8();
  if (sub_10029AD20(v29))
  {
    sub_10000BDD8();
    sub_1002B4CDC((void *)&_mh_execute_header, v26, v30, "{\"msg%{public}.0s\":\"CSSignificantUserInteraction is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  uint64_t v31 = sub_1002AB0C8();
  if (os_signpost_enabled(v31))
  {
    sub_10000BDD8();
    sub_1002A3B2C((void *)&_mh_execute_header, v31, v32, v33, "CSSignificantUserInteraction is null", "{\"msg%{public}.0s\":\"CSSignificantUserInteraction is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  unint64_t v34 = sub_1002AB0C8();
  if (sub_10029AD08(v34))
  {
    sub_10000BDD8();
    sub_1002B4CC4((void *)&_mh_execute_header, v31, v35, "{\"msg%{public}.0s\":\"CSSignificantUserInteraction is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

#error "1002B60E8: call analysis failed (funcsize=58)"

#error "1002B61FC: call analysis failed (funcsize=58)"

#error "1002B6310: call analysis failed (funcsize=58)"

#error "1002B6424: call analysis failed (funcsize=58)"

#error "1002B6538: call analysis failed (funcsize=58)"

uint64_t sub_1002B65DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1002B4D34();
  a25 = v27;
  a26 = v28;
  uint64_t v29 = sub_1002AB0C8();
  if (sub_10029AD20(v29))
  {
    sub_10000BDD8();
    sub_1002B4CDC((void *)&_mh_execute_header, v26, v30, "{\"msg%{public}.0s\":\"flow controller is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  uint64_t v31 = sub_1002AB0C8();
  if (os_signpost_enabled(v31))
  {
    sub_10000BDD8();
    sub_1002A3B2C((void *)&_mh_execute_header, v31, v32, v33, "flow controller is null", "{\"msg%{public}.0s\":\"flow controller is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  unint64_t v34 = sub_1002AB0C8();
  if (sub_10029AD08(v34))
  {
    sub_10000BDD8();
    sub_1002B4CC4((void *)&_mh_execute_header, v31, v35, "{\"msg%{public}.0s\":\"flow controller is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a13);
  }

  uint64_t v36 = abort_report_np();
  return sub_1002B6714(v36);
}

#error "1002B6784: call analysis failed (funcsize=58)"

uint64_t CSFastpathGlue::open(CSFastpathGlue *this, int a2, io_service_t a3)
{
  *((void *)this + 2) = 0;
  uint64_t v5 = (void *)((char *)this + 16);
  *(_DWORD *)this = a2;
  id v6 = (IOCFPlugInInterface ***)((char *)this + 8);
  CFUUIDRef v7 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x53u, 0xEAu, 0x67u, 0x34u, 0xC7u, 0xEu, 0x46u, 0x35u, 0x9Cu, 0xF5u, 0x4Fu, 0xAFu, 5u, 0xB4u, 0xF2u, 0x30u);
  CFUUIDRef v8 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  uint64_t v9 = IOCreatePlugInInterfaceForService(a3, v7, v8, v6, &theScore);
  if (!v9)
  {
    unsigned int v11 = *v6;
    QueryInterface = (**v6)->QueryInterface;
    CFUUIDRef v13 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0xA6u, 0x7Au, 0x69u, 0x95u, 0x23u, 0x6Bu, 0x44u, 0xDEu, 0x97u, 0xB5u, 0x27u, 0xB9u, 0xB1u, 0xE6u, 0x6Fu, 0x2Fu);
    CFUUIDBytes v14 = CFUUIDGetUUIDBytes(v13);
    ((void (*)(IOCFPlugInInterface **, void, void, void *))QueryInterface)(v11, *(void *)&v14.byte0, *(void *)&v14.byte8, v5);
    if (*v5)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*v5 + 64))(*v5);
      if (v9)
      {
        if (qword_1003DB6B0 != -1) {
          dispatch_once(&qword_1003DB6B0, &stru_1003B6870);
        }
        float v15 = qword_1003DB6B8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          int v19 = v9;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "error: failed to open AOP, error 0x%x", buf, 8u);
        }
        *uint64_t v5 = 0;
      }
      else
      {
        *((_DWORD *)this + 6) = (*(uint64_t (**)(void))(**((void **)this + 2) + 88))(*((void *)this + 2));
      }
    }
    else
    {
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B6870);
      }
      int v16 = qword_1003DB6B8;
      if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        int v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "error: failed to query fastpath interface, error 0x%x", buf, 8u);
      }
      return 0;
    }
  }
  return v9;
}

uint64_t CSFastpathGlue::close(CSFastpathGlue *this)
{
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 72))(result);
    uint64_t result = *((void *)this + 1);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)result + 24))(result);
      uint64_t result = IODestroyPlugInInterface(*((IOCFPlugInInterface ***)this + 1));
    }
    *((void *)this + 2) = 0;
  }
  return result;
}

uint64_t CSFastpathGlue::reset(uint64_t this)
{
  *(void *)(this + 32) = 0;
  return this;
}

BOOL CSFastpathGlue::setupForReading(CSFastpathGlue *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3 = **((void **)this + 2);
  if (*((void *)this + 4))
  {
    int v4 = (*(uint64_t (**)(void))(v3 + 104))();
    if (v4)
    {
      int v5 = v4;
      if (qword_1003DB6B0 != -1) {
        dispatch_once(&qword_1003DB6B0, &stru_1003B6870);
      }
      id v6 = qword_1003DB6B8;
      BOOL result = os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT);
      if (result)
      {
        int v11 = 67109120;
        int v12 = v5;
        CFUUIDRef v8 = "error: Read error 0x%x";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, v8, (uint8_t *)&v11, 8u);
        return 0;
      }
      return result;
    }
    return 1;
  }
  int v9 = (*(uint64_t (**)(void))(v3 + 112))();
  if (!v9) {
    return 1;
  }
  int v10 = v9;
  if (qword_1003DB6B0 != -1) {
    dispatch_once(&qword_1003DB6B0, &stru_1003B6870);
  }
  id v6 = qword_1003DB6B8;
  BOOL result = os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT);
  if (result)
  {
    int v11 = 67109120;
    int v12 = v10;
    CFUUIDRef v8 = "error: ReadLast error 0x%x";
    goto LABEL_12;
  }
  return result;
}

uint64_t CSFastpathGlue::read(CSFastpathGlue *this, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *((void *)this + 2);
  if (!v4) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 96))(v4);
  __chkstk_darwin();
  CFUUIDRef v8 = &v22[-v7];
  if (!CSFastpathGlue::setupForReading(this, a3, &v22[-v7])) {
    return 0;
  }
  uint64_t v24 = 0;
  uint64_t v9 = 0;
  if (a3)
  {
    while ((*(unsigned int (**)(void, void *, char *, const void **, void, void))(**((void **)this + 2) + 128))(*((void *)this + 2), v8, (char *)this + 40, &v24, 0, 0))
    {
      memcpy(a2, v24, *((unsigned int *)this + 6));
      int v23 = 0;
      (*(void (**)(void, void *, void, int *))(**((void **)this + 2) + 136))(*((void *)this + 2), v8, *((void *)this + 5), &v23);
      if (v23)
      {
        if (qword_1003DB6B0 != -1) {
          dispatch_once(&qword_1003DB6B0, &stru_1003B6870);
        }
        int v11 = qword_1003DB6B8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_ERROR))
        {
          int v12 = *(_DWORD *)this;
          uint64_t v14 = v8[10];
          uint64_t v13 = v8[11];
          uint64_t v16 = v8[3];
          uint64_t v15 = v8[4];
          uint64_t v17 = v8[2];
          uint64_t v19 = v8[8];
          uint64_t v18 = v8[9];
          uint64_t v20 = v8[7];
          *(_DWORD *)long long buf = 67111168;
          int v26 = v12;
          __int16 v27 = 2048;
          uint64_t v28 = v14;
          __int16 v29 = 2048;
          uint64_t v30 = v13;
          __int16 v31 = 2048;
          uint64_t v32 = v16;
          __int16 v33 = 2048;
          uint64_t v34 = v15;
          __int16 v35 = 2048;
          uint64_t v36 = v17;
          __int16 v37 = 2048;
          uint64_t v38 = v19;
          __int16 v39 = 2048;
          uint64_t v40 = v18;
          __int16 v41 = 2048;
          uint64_t v42 = v20;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "interface %0x corrupt count %zd offset %zd, desc read/write [%llu/%llu/%zd, %llu/%llu/%zd", buf, 0x58u);
          if (qword_1003DB6B0 != -1) {
            dispatch_once(&qword_1003DB6B0, &stru_1003B6870);
          }
        }
        uint64_t v21 = qword_1003DB6B8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 67109376;
          int v26 = v9;
          __int16 v27 = 1024;
          LODWORD(v28) = 1;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Read %u, corrupt %u", buf, 0xEu);
        }
        return v9;
      }
      uint64_t v9 = (v9 + 1);
      a2 += *((unsigned int *)this + 6);
      if (a3 == v9) {
        return a3;
      }
    }
  }
  return v9;
}

uint64_t CSFastpathGlue::readInChunks(int *a1, char *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *((void *)a1 + 2);
  if (!v6) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 96))(v6);
  __chkstk_darwin();
  int v12 = &v31[-v11];
  if (!CSFastpathGlue::setupForReading((CSFastpathGlue *)a1, a4, &v31[-v11])) {
    return 0;
  }
  __int16 v33 = 0;
  uint64_t v13 = 0;
  if (a4)
  {
    uint64_t v14 = a2;
    while ((*(unsigned int (**)(void, void *, int *, const void **, void, void))(**((void **)a1 + 2) + 128))(*((void *)a1 + 2), v12, a1 + 10, &v33, 0, 0))
    {
      memcpy(v14, v33, a1[6]);
      int v32 = 0;
      (*(void (**)(void, void *, void, int *))(**((void **)a1 + 2) + 136))(*((void *)a1 + 2), v12, *((void *)a1 + 5), &v32);
      if (v32)
      {
        if (qword_1003DB6B0 != -1) {
          dispatch_once(&qword_1003DB6B0, &stru_1003B6870);
        }
        uint64_t v17 = qword_1003DB6B8;
        if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_ERROR))
        {
          int v18 = *a1;
          uint64_t v20 = v12[10];
          uint64_t v19 = v12[11];
          uint64_t v22 = v12[3];
          uint64_t v21 = v12[4];
          uint64_t v23 = v12[2];
          uint64_t v25 = v12[8];
          uint64_t v24 = v12[9];
          uint64_t v26 = v12[7];
          *(_DWORD *)long long buf = 67111168;
          int v35 = v18;
          __int16 v36 = 2048;
          uint64_t v37 = v20;
          __int16 v38 = 2048;
          uint64_t v39 = v19;
          __int16 v40 = 2048;
          uint64_t v41 = v22;
          __int16 v42 = 2048;
          uint64_t v43 = v21;
          __int16 v44 = 2048;
          uint64_t v45 = v23;
          __int16 v46 = 2048;
          uint64_t v47 = v25;
          __int16 v48 = 2048;
          uint64_t v49 = v24;
          __int16 v50 = 2048;
          uint64_t v51 = v26;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "interface %0x corrupt count %zd offset %zd, desc read/write [%llu/%llu/%zd, %llu/%llu/%zd", buf, 0x58u);
        }
        char v16 = 0;
        int v15 = 1;
        goto LABEL_20;
      }
      uint64_t v13 = (v13 + 1);
      if (v13 % a3)
      {
        v14 += a1[6];
      }
      else
      {
        sub_1002B72D0(a5, (uint64_t)a2, a3);
        bzero(a2, a1[6] * a3);
        uint64_t v14 = a2;
      }
      if (a4 == v13)
      {
        int v15 = 0;
        char v16 = 1;
        uint64_t v13 = a4;
        goto LABEL_20;
      }
    }
  }
  int v15 = 0;
  char v16 = 1;
LABEL_20:
  unsigned int v27 = v13 % a3;
  BOOL v28 = v13 >= a3 || v13 == 0;
  if (!v28 || v27)
  {
    sub_1002B72D0(a5, (uint64_t)a2, v27);
    bzero(a2, a1[6] * a3);
  }
  if ((v16 & 1) == 0)
  {
    if (qword_1003DB6B0 != -1) {
      dispatch_once(&qword_1003DB6B0, &stru_1003B6870);
    }
    __int16 v29 = qword_1003DB6B8;
    if (os_log_type_enabled((os_log_t)qword_1003DB6B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      int v35 = v13;
      __int16 v36 = 1024;
      LODWORD(v37) = v15;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Read %u, corrupt %u", buf, 0xEu);
    }
  }
  return v13;
}

uint64_t sub_1002B72D0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a2;
  int v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_1002B735C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void sub_1002B732C(id a1)
{
  qword_1003DB6B8 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "AOP");
}

void sub_1002B735C()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  *exceptiouint64_t n = &off_1003B68B8;
}

void sub_1002B73AC(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

void SafetySOSEventDetected::SafetySOSEventDetected(SafetySOSEventDetected *this)
{
  *(void *)this = off_1003B68E0;
  *((_DWORD *)this + 3) = 0;
}

{
  *(void *)this = off_1003B68E0;
  *((_DWORD *)this + 3) = 0;
}

void SafetySOSEventDetected::~SafetySOSEventDetected(SafetySOSEventDetected *this)
{
  PB::Base::~Base(this);

  operator delete();
}

void SafetySOSEventDetected::SafetySOSEventDetected(SafetySOSEventDetected *this, const SafetySOSEventDetected *a2)
{
  *(void *)this = off_1003B68E0;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((_DWORD *)this + 2) = v2;
  }
}

{
  int v2;

  *(void *)this = off_1003B68E0;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((_DWORD *)this + 2) = v2;
  }
}

uint64_t SafetySOSEventDetected::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = off_1003B68E0;
    int v3 = *(unsigned char *)(a2 + 12) & 1;
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = off_1003B68E0;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t swap(uint64_t result, SafetySOSEventDetected *a2)
{
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v2;
  int v3 = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v3;
  return result;
}

uint64_t SafetySOSEventDetected::SafetySOSEventDetected(uint64_t result, uint64_t a2)
{
  *(void *)BOOL result = off_1003B68E0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)BOOL result = off_1003B68E0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t SafetySOSEventDetected::formatText(SafetySOSEventDetected *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "mode", *((_DWORD *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t SafetySOSEventDetected::readFrom(SafetySOSEventDetected *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)a2 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t SafetySOSEventDetected::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  }
  return this;
}

BOOL SafetySOSEventDetected::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t SafetySOSEventDetected::hash_value(SafetySOSEventDetected *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

void KappaCompanionUUID::KappaCompanionUUID(KappaCompanionUUID *this)
{
  *(void *)this = off_1003B6930;
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
}

{
  *(void *)this = off_1003B6930;
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
}

void KappaCompanionUUID::~KappaCompanionUUID(KappaCompanionUUID *this)
{
  *(void *)this = off_1003B6930;
  uint64_t v4 = *((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *unint64_t v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  KappaCompanionUUID::~KappaCompanionUUID(this);

  operator delete();
}

void KappaCompanionUUID::KappaCompanionUUID(KappaCompanionUUID *this, const KappaCompanionUUID *a2)
{
  *(void *)this = off_1003B6930;
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
}

const KappaCompanionUUID *KappaCompanionUUID::operator=(const KappaCompanionUUID *a1, const KappaCompanionUUID *a2)
{
  if (a1 != a2)
  {
    KappaCompanionUUID::KappaCompanionUUID((KappaCompanionUUID *)&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v6;
    uint64_t v6 = v3;
    KappaCompanionUUID::~KappaCompanionUUID((KappaCompanionUUID *)&v5);
  }
  return a1;
}

uint64_t swap(uint64_t result, KappaCompanionUUID *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)(result + 8) = *((void *)a2 + 1);
  *((void *)a2 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v2;
  return result;
}

void *KappaCompanionUUID::KappaCompanionUUID(void *a1, uint64_t a2)
{
  *a1 = off_1003B6930;
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *v3;
  *uint64_t v3 = v4;
  if (v5) {
    sub_100012E84((uint64_t)v3, v5);
  }
  return a1;
}

uint64_t KappaCompanionUUID::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    KappaCompanionUUID::KappaCompanionUUID(&v5, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v6;
    uint64_t v6 = v3;
    KappaCompanionUUID::~KappaCompanionUUID((KappaCompanionUUID *)&v5);
  }
  return a1;
}

uint64_t KappaCompanionUUID::formatText(KappaCompanionUUID *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t KappaCompanionUUID::readFrom(KappaCompanionUUID *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t KappaCompanionUUID::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t KappaCompanionUUID::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  unint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t KappaCompanionUUID::hash_value(KappaCompanionUUID *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return sub_100012EE0((uint64_t)&v3, v1);
  }
  else {
    return 0;
  }
}

void sub_1002B81AC(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1002B82D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002B8370(uint64_t a1, void *a2)
{
  char v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    if (qword_1003DB750 != -1) {
      dispatch_once(&qword_1003DB750, &stru_1003B69E8);
    }
    int v8 = qword_1003DB758;
    if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      unsigned int v15 = "com.apple.anomalydetectiond.CoreAnalytics.UserInfo";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Running activity %s", buf, 0xCu);
    }
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(v9 + 24);
    if (v10)
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      void v12[2] = sub_1002B867C;
      void v12[3] = &unk_1003B69A0;
      v12[4] = v9;
      int v13 = v3;
      (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v12);
    }
    if (xpc_activity_get_state(v3) == 2 && !xpc_activity_set_state(v3, 4))
    {
      if (qword_1003DB750 != -1) {
        dispatch_once(&qword_1003DB750, &stru_1003B69E8);
      }
      uint64_t v7 = (id)qword_1003DB758;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        xpc_activity_state_t v11 = xpc_activity_get_state(v3);
        *(_DWORD *)long long buf = 134349056;
        unsigned int v15 = (const char *)v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to mark activity as CONTINUE. Current state is %{public}ld", buf, 0xCu);
      }
      goto LABEL_8;
    }
  }
  else if (!state)
  {
    if (qword_1003DB750 != -1) {
      dispatch_once(&qword_1003DB750, &stru_1003B69E8);
    }
    uint64_t v5 = qword_1003DB758;
    if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(const char **)(*(void *)(a1 + 32) + 8);
      *(_DWORD *)long long buf = 134217984;
      unsigned int v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Configuring UserInfo with cadence %llu", buf, 0xCu);
    }
    uint64_t v7 = xpc_activity_copy_criteria(v3);
    xpc_dictionary_set_int64(v7, XPC_ACTIVITY_INTERVAL, *(void *)(*(void *)(a1 + 32) + 8));
    xpc_activity_set_criteria(v3, v7);
LABEL_8:
  }
}

void sub_1002B8638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002B867C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (qword_1003DB750 != -1) {
    dispatch_once(&qword_1003DB750, &stru_1003B69E8);
  }
  uint64_t v6 = qword_1003DB758;
  if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Kappa handler executed with result: %d", buf, 8u);
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v7)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    _DWORD v10[2] = sub_1002B88B0;
    float v10[3] = &unk_1003B6978;
    char v12 = a2;
    id v11 = *(id *)(a1 + 40);
    (*(void (**)(uint64_t, id, void *))(v7 + 16))(v7, v5, v10);
  }
  if (a2)
  {
    if (qword_1003DB750 != -1) {
      dispatch_once(&qword_1003DB750, &stru_1003B69E8);
    }
    int v8 = qword_1003DB758;
    if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v9 = "Kappa handler executed successfully";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v9, buf, 2u);
    }
  }
  else
  {
    if (qword_1003DB750 != -1) {
      dispatch_once(&qword_1003DB750, &stru_1003B69E8);
    }
    int v8 = qword_1003DB758;
    if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v9 = "CoreAnalytics Kappa upload failed";
      goto LABEL_16;
    }
  }
}

void sub_1002B8890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1002B88B0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    if (qword_1003DB750 != -1) {
      dispatch_once(&qword_1003DB750, &stru_1003B69E8);
    }
    uint64_t v6 = qword_1003DB758;
    if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_INFO))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Marty handler executed successfully", (uint8_t *)&v14, 2u);
    }
    if (*(unsigned char *)(a1 + 40))
    {
      xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      if ((state == 4 || state == 2) && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
      {
        if (qword_1003DB750 != -1) {
          dispatch_once(&qword_1003DB750, &stru_1003B69E8);
        }
        int v8 = (id)qword_1003DB758;
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
          goto LABEL_28;
        }
        xpc_activity_state_t v9 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
        int v14 = 134349056;
        xpc_activity_state_t v15 = v9;
        uint64_t v10 = "Failed to mark activity as DONE. Current state is %{public}ld";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, v10, (uint8_t *)&v14, 0xCu);
LABEL_28:

        goto LABEL_29;
      }
      goto LABEL_29;
    }
  }
  else
  {
    if (qword_1003DB750 != -1) {
      dispatch_once(&qword_1003DB750, &stru_1003B69E8);
    }
    id v11 = qword_1003DB758;
    if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_INFO))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CoreAnalytics Marty upload failed", (uint8_t *)&v14, 2u);
    }
  }
  if (qword_1003DB750 != -1) {
    dispatch_once(&qword_1003DB750, &stru_1003B69E8);
  }
  char v12 = qword_1003DB758;
  if (os_log_type_enabled((os_log_t)qword_1003DB758, OS_LOG_TYPE_INFO))
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "At least one CoreAnalytics uploader failed to complete. Will retry later.", (uint8_t *)&v14, 2u);
  }
  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 3))
  {
    if (qword_1003DB750 != -1) {
      dispatch_once(&qword_1003DB750, &stru_1003B69E8);
    }
    int v8 = (id)qword_1003DB758;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
      goto LABEL_28;
    }
    xpc_activity_state_t v13 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
    int v14 = 134349056;
    xpc_activity_state_t v15 = v13;
    uint64_t v10 = "Failed to mark activity as DEFER. Current state is %{public}ld";
    goto LABEL_27;
  }
LABEL_29:
}

void sub_1002B8B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002B8BE4(id a1)
{
  qword_1003DB758 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "CoreAnalytics");

  _objc_release_x1();
}

double CLKappaEstimatesAlgCrashResult::reset(CLKappaEstimatesAlgCrashResult *this)
{
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 88) = 0;
  *((void *)this + 23) = 0;
  double result = 0.0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 0;
  return result;
}

void CLKappaEstimatesAlgCrashResult::log(CLKappaEstimatesAlgCrashResult *this)
{
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B7600);
  }
  unint64_t v2 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEFAULT))
  {
    double v3 = *((float *)this + 50);
    double v4 = *((float *)this + 51);
    int v49 = 134363904;
    double v5 = *((float *)this + 52);
    double v54 = v3;
    double v68 = v4;
    double v6 = *((float *)this + 54);
    double v7 = *((float *)this + 55);
    double v70 = v5;
    double v8 = *((float *)this + 56);
    double v72 = v6;
    double v74 = v7;
    double v9 = *((float *)this + 4);
    double v10 = *((float *)this + 5);
    double v76 = v8;
    double v90 = v9;
    LODWORD(v8) = *((_DWORD *)this + 7);
    double v11 = *((float *)this + 6);
    double v92 = v10;
    double v94 = v11;
    double v12 = *((float *)this + 9);
    double v96 = *((float *)this + 8);
    double v98 = v12;
    double v13 = *((float *)this + 11);
    double v100 = *((float *)this + 10);
    double v102 = *(float *)&v8;
    double v14 = *((float *)this + 16);
    double v15 = *((float *)this + 17);
    double v104 = v13;
    double v106 = v14;
    double v16 = *((float *)this + 18);
    double v17 = *((float *)this + 19);
    double v108 = v15;
    double v110 = v16;
    double v18 = *((float *)this + 20);
    double v19 = *((float *)this + 21);
    double v112 = v17;
    double v114 = v18;
    double v20 = *((float *)this + 22);
    double v21 = *((float *)this + 23);
    double v116 = v19;
    double v118 = v20;
    double v22 = *((float *)this + 24);
    double v23 = *((float *)this + 25);
    double v120 = v21;
    double v122 = v22;
    double v24 = *((float *)this + 26);
    double v25 = *((float *)this + 27);
    double v124 = v23;
    double v126 = v24;
    double v26 = *((float *)this + 12);
    double v27 = *((float *)this + 13);
    double v128 = v25;
    double v130 = v26;
    double v28 = *((float *)this + 14);
    double v29 = *((float *)this + 15);
    double v132 = v27;
    double v134 = v28;
    double v30 = *((float *)this + 28);
    double v31 = *((float *)this + 29);
    double v136 = v29;
    double v138 = v30;
    LODWORD(v29) = *((_DWORD *)this + 31);
    double v32 = *((float *)this + 30);
    double v140 = v31;
    double v142 = v32;
    double v33 = *((float *)this + 35);
    double v144 = *((float *)this + 34);
    double v146 = v33;
    LODWORD(v33) = *((_DWORD *)this + 37);
    double v148 = *((float *)this + 36);
    double v150 = *(float *)&v29;
    double v152 = *(float *)&v33;
    double v34 = *((float *)this + 33);
    double v154 = *((float *)this + 32);
    double v156 = v34;
    double v35 = *((float *)this + 39);
    double v158 = *((float *)this + 38);
    double v160 = v35;
    LODWORD(v35) = *((_DWORD *)this + 41);
    double v162 = *((float *)this + 40);
    double v164 = *(float *)&v35;
    double v166 = *((float *)this + 42);
    int v36 = *((unsigned __int8 *)this + 176);
    int v37 = *((unsigned __int8 *)this + 212);
    int v38 = *((unsigned __int8 *)this + 213);
    int v39 = *((unsigned __int8 *)this + 214);
    int v40 = *((unsigned __int8 *)this + 215);
    int v41 = *((unsigned __int8 *)this + 192);
    int v42 = *((_DWORD *)this + 49);
    int v43 = *((unsigned __int8 *)this + 240);
    int v44 = *((unsigned __int8 *)this + 241);
    int v45 = *((unsigned __int8 *)this + 242);
    int v46 = *((unsigned __int8 *)this + 177);
    int v47 = *((_DWORD *)this + 61);
    int v48 = *((unsigned __int8 *)this + 248);
    uint64_t v50 = *((void *)this + 23);
    __int16 v51 = 1026;
    int v52 = v36;
    __int16 v53 = 2050;
    __int16 v55 = 1026;
    int v56 = v37;
    __int16 v57 = 1026;
    int v58 = v38;
    __int16 v59 = 1026;
    int v60 = v39;
    __int16 v61 = 1026;
    int v62 = v40;
    __int16 v63 = 1026;
    int v64 = v41;
    __int16 v65 = 1026;
    int v66 = v42;
    __int16 v67 = 2050;
    __int16 v69 = 2050;
    __int16 v71 = 2050;
    __int16 v73 = 2050;
    __int16 v75 = 2050;
    __int16 v77 = 1026;
    int v78 = v43;
    __int16 v79 = 1026;
    int v80 = v44;
    __int16 v81 = 1026;
    int v82 = v45;
    __int16 v83 = 1026;
    int v84 = v46;
    __int16 v85 = 1026;
    int v86 = v47;
    __int16 v87 = 1026;
    int v88 = v48;
    __int16 v89 = 2050;
    __int16 v91 = 2050;
    __int16 v93 = 2050;
    __int16 v95 = 2050;
    __int16 v97 = 2050;
    __int16 v99 = 2050;
    __int16 v101 = 2050;
    __int16 v103 = 2050;
    __int16 v105 = 2050;
    __int16 v107 = 2050;
    __int16 v109 = 2050;
    __int16 v111 = 2050;
    __int16 v113 = 2050;
    __int16 v115 = 2050;
    __int16 v117 = 2050;
    __int16 v119 = 2050;
    __int16 v121 = 2050;
    __int16 v123 = 2050;
    __int16 v125 = 2050;
    __int16 v127 = 2050;
    __int16 v129 = 2050;
    __int16 v131 = 2050;
    __int16 v133 = 2050;
    __int16 v135 = 2050;
    __int16 v137 = 2050;
    __int16 v139 = 2050;
    __int16 v141 = 2050;
    __int16 v143 = 2050;
    __int16 v145 = 2050;
    __int16 v147 = 2050;
    __int16 v149 = 2050;
    __int16 v151 = 2050;
    __int16 v153 = 2050;
    __int16 v155 = 2050;
    __int16 v157 = 2050;
    __int16 v159 = 2050;
    __int16 v161 = 2050;
    __int16 v163 = 2050;
    __int16 v165 = 2050;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[C] AlgBlock summary,A,%{public}llu,B,%{public}d,C,%{public}f,D,%{public}d,E,%{public}d,F,%{public}d,G,%{public}d,H,%{public}d,I,%{public}d,J,%{public}f,K,%{public}f,L,%{public}f,M,%{public}f,N,%{public}f,O,%{public}d,P,%{public}d,Q,%{public}d,R,%{public}d,S,%{public}d,T,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,config-5,%{public}f,config-6,%{public}f,config-7,%{public}f,config-8,%{public}f,config-9,%{public}f,config-10,%{public}f,config-11,%{public}f,config-12,%{public}f,config-13,%{public}f,config-14,%{public}f,config-15,%{public}f,config-16,%{public}f,config-17,%{public}f,config-18,%{public}f,config-19,%{public}f,config-20,%{public}f,config-21,%{public}f,config-22,%{public}f,config-23,%{public}f,config-24,%{public}f,config-25,%{public}f,config-26,%{public}f,config-27,%{public}f,config-28,%{public}f,config-29,%{public}f,config-30,%{public}f,config-31,%{public}f,config-32,%{public}f,config-33,%{public}f,config-34,%{public}f,config-35,%{public}f,config-36,%{public}f,config-37,%{public}f,config-38,%{public}f,config-39,%{public}f\n", (uint8_t *)&v49, 0x21Cu);
  }
}

void CLKappaEstimatesAlgCrash::CLKappaEstimatesAlgCrash(CLKappaEstimatesAlgCrash *this, uint64_t *a2)
{
  CLKappaAlgBlock::CLKappaAlgBlock((CLKappaAlgBlock *)this, a2 + 1);
  uint64_t v4 = *a2;
  *double v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 152)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = a2[9];
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)((char *)this + 46) = 0;
  *(void *)&long long v6 = 0x80000000800000;
  *((void *)&v6 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0x80000000800000;
  *(_OWORD *)((char *)this + 56) = v6;
  *((void *)this + 9) = 0x80000000800000;
  *((_WORD *)this + 40) = 0;
  *((unsigned char *)this + 82) = 0;
  *(void *)((char *)this + 84) = 0x80000000800000;
  *(void *)((char *)this + 92) = 0xFFFFFFFFLL;
  *((unsigned char *)this + 100) = 0;
  *((_DWORD *)this + 26) = -1;
  double v7 = (std::__shared_weak_count *)operator new(0x120uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_1003B7630;
  sub_1002BB8F0((uint64_t)&v7[1]);
  double v8 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v7 + 1;
  *((void *)this + 2) = v7;
  if (v8)
  {
    sub_10000BB9C(v8);
    double v7 = (std::__shared_weak_count *)*((void *)this + 2);
    double v11 = (std::__shared_weak_count *)*((void *)this + 1);
    double v12 = v7;
    if (!v7) {
      goto LABEL_6;
    }
  }
  else
  {
    double v11 = v7 + 1;
    double v12 = v7;
  }
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_1002B9338((uint64_t)&v11, &v13);
  long long v9 = v13;
  long long v13 = 0uLL;
  double v10 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v9;
  if (v10)
  {
    sub_10000BB9C(v10);
    if (*((void *)&v13 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (v12) {
    sub_10000BB9C(v12);
  }
  (*(void (**)(CLKappaEstimatesAlgCrash *))(*(void *)this + 312))(this);
}

void sub_1002B930C(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v4) {
    sub_10000BB9C(v4);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_1002B9338@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaEstimatesAlgCrash::CLKappaEstimatesAlgCrash(CLKappaEstimatesAlgCrash *this)
{
  *(void *)this = off_100399F60;
  *((void *)this + 14) = off_10039A008;
  *((void *)this + 15) = off_10039A0D0;
  *((void *)this + 16) = off_10039A180;
  CLKappaAlgBlock::CLKappaAlgBlock((CLKappaAlgBlock *)this, (uint64_t *)off_1003B6FD8);
  *(void *)uint64_t v2 = off_1003B6AB8;
  *(void *)(v2 + 112) = off_1003B6D68;
  *(void *)(v2 + 120) = off_1003B6EA8;
  *(void *)(v2 + 128) = off_1003B6F88;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 46) = 0;
  *(void *)&long long v3 = 0x80000000800000;
  *((void *)&v3 + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0x80000000800000;
  *(_OWORD *)(v2 + 56) = v3;
  *(void *)(v2 + 72) = 0x80000000800000;
  *(_WORD *)(v2 + 80) = 0;
  *(unsigned char *)(v2 + 82) = 0;
  *(void *)(v2 + 84) = 0x80000000800000;
  *(void *)(v2 + 92) = 0xFFFFFFFFLL;
  *(unsigned char *)(v2 + 100) = 0;
  *(_DWORD *)(v2 + 104) = -1;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x120uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1003B7630;
  sub_1002BB8F0((uint64_t)&v4[1]);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = v4 + 1;
  *((void *)this + 2) = v4;
  if (v5)
  {
    sub_10000BB9C(v5);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
    double v8 = (std::__shared_weak_count *)*((void *)this + 1);
    long long v9 = v4;
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    double v8 = v4 + 1;
    long long v9 = v4;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  sub_1002B9338((uint64_t)&v8, &v10);
  long long v6 = v10;
  long long v10 = 0uLL;
  double v7 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v6;
  if (v7)
  {
    sub_10000BB9C(v7);
    if (*((void *)&v10 + 1)) {
      sub_10000BB9C(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  if (v9) {
    sub_10000BB9C(v9);
  }
  (*(void (**)(CLKappaEstimatesAlgCrash *))(*(void *)this + 312))(this);
}

void sub_1002B95FC(_Unwind_Exception *a1)
{
  long long v3 = (std::__shared_weak_count *)*((void *)v1 + 5);
  if (v3) {
    sub_10000BB9C(v3);
  }
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003B6FD8);
  _Unwind_Resume(a1);
}

void CLKappaEstimatesAlgCrash::resetConfiguration(CLKappaEstimatesAlgCrash *this)
{
  id v178 = +[CSPersistentConfiguration configBaseKey:"FeaturesAlgCrashConfig" forFeatureMode:*((unsigned __int8 *)this + 24)];
  uint64_t v2 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v3) = 0.5;
  LODWORD(v4) = 3.0;
  LODWORD(v5) = 1193033728;
  [v2 algorithmThresholdNumber:0 inArrayForKey:v178 withMinValue:v3 maxValue:v5 defaultValue:v4];
  LODWORD(v179) = v6;

  double v7 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v8) = 0.5;
  LODWORD(v9) = 9.0;
  LODWORD(v10) = 1193033728;
  [v7 algorithmThresholdNumber:1 inArrayForKey:v178 withMinValue:v8 maxValue:v10 defaultValue:v9];
  DWORD1(v179) = v11;

  double v12 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v13) = 0.5;
  LODWORD(v14) = 1193033728;
  LODWORD(v15) = 1193033728;
  [v12 algorithmThresholdNumber:2 inArrayForKey:v178 withMinValue:v13 maxValue:v14 defaultValue:v15];
  DWORD2(v179) = v16;

  double v17 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v18) = 1117782016;
  LODWORD(v19) = 9.0;
  [v17 algorithmThresholdNumber:6 inArrayForKey:v178 withMinValue:0.0 maxValue:v18 defaultValue:v19];
  HIDWORD(v179) = v20;

  double v21 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v22) = 0.5;
  LODWORD(v23) = 3.0;
  LODWORD(v24) = 1193033728;
  [v21 algorithmThresholdNumber:3 inArrayForKey:v178 withMinValue:v22 maxValue:v24 defaultValue:v23];
  int v180 = v25;

  double v26 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v27) = 0.5;
  LODWORD(v28) = 1193033728;
  LODWORD(v29) = 1193033728;
  [v26 algorithmThresholdNumber:4 inArrayForKey:v178 withMinValue:v27 maxValue:v28 defaultValue:v29];
  int v181 = v30;

  double v31 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v32) = 0.5;
  LODWORD(v33) = 1193033728;
  LODWORD(v34) = 1193033728;
  [v31 algorithmThresholdNumber:5 inArrayForKey:v178 withMinValue:v32 maxValue:v33 defaultValue:v34];
  int v182 = v35;

  int v36 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v37) = 1117782016;
  LODWORD(v38) = 15.0;
  [v36 algorithmThresholdNumber:7 inArrayForKey:v178 withMinValue:0.0 maxValue:v37 defaultValue:v38];
  int v183 = v39;

  int v40 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v4CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0.5;
  LODWORD(v42) = 3.0;
  LODWORD(v43) = 1193033728;
  [v40 algorithmThresholdNumber:20 inArrayForKey:v178 withMinValue:v41 maxValue:v43 defaultValue:v42];
  int v184 = v44;

  int v45 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v46) = 0.5;
  LODWORD(v47) = 1193033728;
  LODWORD(v48) = 1193033728;
  [v45 algorithmThresholdNumber:21 inArrayForKey:v178 withMinValue:v46 maxValue:v47 defaultValue:v48];
  int v185 = v49;

  uint64_t v50 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v5CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0.5;
  LODWORD(v52) = 1193033728;
  LODWORD(v53) = 1193033728;
  [v50 algorithmThresholdNumber:22 inArrayForKey:v178 withMinValue:v51 maxValue:v52 defaultValue:v53];
  int v186 = v54;

  __int16 v55 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v56) = 1117782016;
  LODWORD(v57) = 15.0;
  [v55 algorithmThresholdNumber:23 inArrayForKey:v178 withMinValue:0.0 maxValue:v56 defaultValue:v57];
  int v187 = v58;

  __int16 v59 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v60) = 1120403456;
  LODWORD(v6CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 8.5;
  [v59 algorithmThresholdNumber:8 inArrayForKey:v178 withMinValue:0.0 maxValue:v60 defaultValue:v61];
  int v188 = v62;

  __int16 v63 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v64) = 20.0;
  LODWORD(v65) = 0.375;
  [v63 algorithmThresholdNumber:9 inArrayForKey:v178 withMinValue:0.0 maxValue:v64 defaultValue:v65];
  int v189 = v66;

  __int16 v67 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v68) = 1148846080;
  LODWORD(v69) = 1112014848;
  [v67 algorithmThresholdNumber:10 inArrayForKey:v178 withMinValue:0.0 maxValue:v68 defaultValue:v69];
  int v190 = v70;

  __int16 v71 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v72) = 1148846080;
  LODWORD(v73) = 1120403456;
  [v71 algorithmThresholdNumber:11 inArrayForKey:v178 withMinValue:0.0 maxValue:v72 defaultValue:v73];
  int v191 = v74;

  __int16 v75 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v76) = 1120403456;
  LODWORD(v77) = 8.5;
  [v75 algorithmThresholdNumber:12 inArrayForKey:v178 withMinValue:0.0 maxValue:v76 defaultValue:v77];
  int v192 = v78;

  __int16 v79 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v80) = 20.0;
  LODWORD(v8CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 0.375;
  [v79 algorithmThresholdNumber:13 inArrayForKey:v178 withMinValue:0.0 maxValue:v80 defaultValue:v81];
  int v193 = v82;

  __int16 v83 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v84) = 1148846080;
  LODWORD(v85) = 17.0;
  [v83 algorithmThresholdNumber:14 inArrayForKey:v178 withMinValue:0.0 maxValue:v84 defaultValue:v85];
  int v194 = v86;

  __int16 v87 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v88) = 1148846080;
  LODWORD(v89) = 1114636288;
  [v87 algorithmThresholdNumber:15 inArrayForKey:v178 withMinValue:0.0 maxValue:v88 defaultValue:v89];
  int v195 = v90;

  __int16 v91 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v92) = 1120403456;
  LODWORD(v93) = 8.5;
  [v91 algorithmThresholdNumber:16 inArrayForKey:v178 withMinValue:0.0 maxValue:v92 defaultValue:v93];
  int v196 = v94;

  __int16 v95 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v96) = 20.0;
  LODWORD(v97) = 0.375;
  [v95 algorithmThresholdNumber:17 inArrayForKey:v178 withMinValue:0.0 maxValue:v96 defaultValue:v97];
  int v197 = v98;

  __int16 v99 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v100) = *(_DWORD *)"ff&?33s?";
  LODWORD(v10CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 2.0;
  [v99 algorithmThresholdNumber:18 inArrayForKey:v178 withMinValue:0.0 maxValue:v101 defaultValue:v100];
  int v198 = v102;

  __int16 v103 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v104) = 1061997773;
  LODWORD(v105) = 2.0;
  [v103 algorithmThresholdNumber:19 inArrayForKey:v178 withMinValue:0.0 maxValue:v105 defaultValue:v104];
  int v199 = v106;

  __int16 v107 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v108) = 0.5;
  LODWORD(v109) = 7.0;
  LODWORD(v110) = 1193033728;
  [v107 algorithmThresholdNumber:24 inArrayForKey:v178 withMinValue:v108 maxValue:v110 defaultValue:v109];
  int v200 = v111;

  double v112 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v113) = 0.5;
  LODWORD(v114) = 13.0;
  LODWORD(v115) = 1193033728;
  [v112 algorithmThresholdNumber:25 inArrayForKey:v178 withMinValue:v113 maxValue:v115 defaultValue:v114];
  int v201 = v116;

  __int16 v117 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v118) = 0.5;
  LODWORD(v119) = 1193033728;
  LODWORD(v120) = 1193033728;
  [v117 algorithmThresholdNumber:26 inArrayForKey:v178 withMinValue:v118 maxValue:v119 defaultValue:v120];
  int v202 = v121;

  double v122 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v123) = 0.5;
  LODWORD(v124) = 7.0;
  LODWORD(v125) = 1193033728;
  [v122 algorithmThresholdNumber:27 inArrayForKey:v178 withMinValue:v123 maxValue:v125 defaultValue:v124];
  int v206 = v126;

  __int16 v127 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v128) = 0.5;
  LODWORD(v129) = 1193033728;
  LODWORD(v130) = 1193033728;
  [v127 algorithmThresholdNumber:28 inArrayForKey:v178 withMinValue:v128 maxValue:v129 defaultValue:v130];
  int v207 = v131;

  double v132 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v133) = 0.5;
  LODWORD(v134) = 1193033728;
  LODWORD(v135) = 1193033728;
  [v132 algorithmThresholdNumber:29 inArrayForKey:v178 withMinValue:v133 maxValue:v134 defaultValue:v135];
  int v208 = v136;

  __int16 v137 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v138) = 1114636288;
  LODWORD(v139) = 19.0;
  [v137 algorithmThresholdNumber:30 inArrayForKey:v178 withMinValue:0.0 maxValue:v138 defaultValue:v139];
  int v203 = v140;

  __int16 v141 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v142) = 1114636288;
  LODWORD(v143) = 19.0;
  [v141 algorithmThresholdNumber:31 inArrayForKey:v178 withMinValue:0.0 maxValue:v142 defaultValue:v143];
  int v209 = v144;

  __int16 v145 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v146) = 1112014848;
  LODWORD(v147) = 7.0;
  [v145 algorithmThresholdNumber:32 inArrayForKey:v178 withMinValue:0.0 maxValue:v146 defaultValue:v147];
  int v204 = v148;

  __int16 v149 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v150) = 1120403456;
  LODWORD(v15CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = 1148846080;
  LODWORD(v152) = *(_DWORD *)"";
  [v149 algorithmThresholdNumber:33 inArrayForKey:v178 withMinValue:v150 maxValue:v152 defaultValue:v151];
  int v205 = v153;

  double v154 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v155) = 1112014848;
  LODWORD(v156) = 7.0;
  [v154 algorithmThresholdNumber:34 inArrayForKey:v178 withMinValue:0.0 maxValue:v155 defaultValue:v156];
  int v210 = v157;

  double v158 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v159) = 1120403456;
  LODWORD(v160) = 1148846080;
  LODWORD(v16CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = *(_DWORD *)"";
  [v158 algorithmThresholdNumber:35 inArrayForKey:v178 withMinValue:v159 maxValue:v161 defaultValue:v160];
  int v211 = v162;

  __int16 v163 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v164) = 1148846080;
  LODWORD(v165) = 1123024896;
  LODWORD(v166) = -1138501878;
  [v163 algorithmThresholdNumber:36 inArrayForKey:v178 withMinValue:v166 maxValue:v164 defaultValue:v165];
  int v212 = v167;

  double v168 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v169) = 1148846080;
  LODWORD(v170) = 1138819072;
  LODWORD(v17CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1) = -1138501878;
  [v168 algorithmThresholdNumber:37 inArrayForKey:v178 withMinValue:v171 maxValue:v169 defaultValue:v170];
  int v213 = v172;

  double v173 = +[CSPersistentConfiguration sharedConfiguration];
  LODWORD(v174) = 1120403456;
  LODWORD(v175) = 7.0;
  LODWORD(v176) = -1138501878;
  [v173 algorithmThresholdNumber:38 inArrayForKey:v178 withMinValue:v176 maxValue:v174 defaultValue:v175];
  int v214 = v177;

  CLKappaEstimatesAlgCrash::setConfig((uint64_t)this, &v179);
}

void sub_1002B9EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double CLKappaEstimatesAlgCrash::setConfig(uint64_t a1, _OWORD *a2)
{
  double v3 = *(_OWORD **)(a1 + 32);
  long long v4 = a2[1];
  v3[1] = *a2;
  v3[2] = v4;
  long long v5 = a2[2];
  long long v6 = a2[3];
  long long v7 = a2[5];
  v3[5] = a2[4];
  void v3[6] = v7;
  v3[3] = v5;
  v3[4] = v6;
  long long v8 = a2[6];
  long long v9 = a2[7];
  long long v10 = a2[8];
  *(_OWORD *)((char *)v3 + 156) = *(_OWORD *)((char *)a2 + 140);
  v3[8] = v9;
  float v3[9] = v10;
  v3[7] = v8;
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B7600);
  }
  int v11 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v12 = *(float **)(a1 + 32);
    double v13 = v12[4];
    double v14 = v12[5];
    double v15 = v12[6];
    double v16 = v12[7];
    int v65 = 134218752;
    double v66 = v13;
    __int16 v67 = 2048;
    double v68 = v14;
    __int16 v69 = 2048;
    double v70 = v15;
    __int16 v71 = 2048;
    double v72 = v16;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[C] config-1,%f,config-2,%f,config-3,%f,config-7,%f", (uint8_t *)&v65, 0x2Au);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B7600);
  }
  double v17 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v18 = *(float **)(a1 + 32);
    double v19 = v18[8];
    double v20 = v18[9];
    double v21 = v18[10];
    double v22 = v18[11];
    int v65 = 134218752;
    double v66 = v19;
    __int16 v67 = 2048;
    double v68 = v20;
    __int16 v69 = 2048;
    double v70 = v21;
    __int16 v71 = 2048;
    double v72 = v22;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[C] config-4,%f,config-5,%f,config-6,%f,config-8,%f", (uint8_t *)&v65, 0x2Au);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B7600);
  }
  double v23 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v24 = *(float **)(a1 + 32);
    double v25 = v24[16];
    double v26 = v24[17];
    double v27 = v24[18];
    double v28 = v24[19];
    double v29 = v24[20];
    double v30 = v24[21];
    double v31 = v24[22];
    double v32 = v24[23];
    double v33 = v24[24];
    double v34 = v24[25];
    double v35 = v24[26];
    double v36 = v24[27];
    int v65 = 134220800;
    double v66 = v25;
    __int16 v67 = 2048;
    double v68 = v26;
    __int16 v69 = 2048;
    double v70 = v27;
    __int16 v71 = 2048;
    double v72 = v28;
    __int16 v73 = 2048;
    double v74 = v29;
    __int16 v75 = 2048;
    double v76 = v30;
    __int16 v77 = 2048;
    double v78 = v31;
    __int16 v79 = 2048;
    double v80 = v32;
    __int16 v81 = 2048;
    double v82 = v33;
    __int16 v83 = 2048;
    double v84 = v34;
    __int16 v85 = 2048;
    double v86 = v35;
    __int16 v87 = 2048;
    double v88 = v36;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "[C] config-9,%f,config-10,%f,config-11,%f,config-12,%f,config-13,%f,config-14,%f,config-15,%f,config-16,%f,config-17,%f,config-18,%f,config-19,%f,config-20,%f", (uint8_t *)&v65, 0x7Au);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B7600);
  }
  double v37 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v38 = *(float **)(a1 + 32);
    double v39 = v38[12];
    double v40 = v38[13];
    double v41 = v38[14];
    double v42 = v38[15];
    int v65 = 134218752;
    double v66 = v39;
    __int16 v67 = 2048;
    double v68 = v40;
    __int16 v69 = 2048;
    double v70 = v41;
    __int16 v71 = 2048;
    double v72 = v42;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "[C] config-21,%f,config-22,%f,config-23,%f,config-24,%f", (uint8_t *)&v65, 0x2Au);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B7600);
  }
  double v43 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    int v44 = *(float **)(a1 + 32);
    double v45 = v44[28];
    double v46 = v44[29];
    double v47 = v44[30];
    double v48 = v44[31];
    double v49 = v44[32];
    double v50 = v44[33];
    int v65 = 134219264;
    double v66 = v45;
    __int16 v67 = 2048;
    double v68 = v46;
    __int16 v69 = 2048;
    double v70 = v47;
    __int16 v71 = 2048;
    double v72 = v48;
    __int16 v73 = 2048;
    double v74 = v49;
    __int16 v75 = 2048;
    double v76 = v50;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "[C] config-25,%f,config-26,%f,config-27,%f,config-28,%f,config-29,%f,config-30,%f", (uint8_t *)&v65, 0x3Eu);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B7600);
  }
  double v51 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v52 = *(float **)(a1 + 32);
    double v53 = v52[34];
    double v54 = v52[35];
    double v55 = v52[36];
    double v56 = v52[37];
    double v57 = v52[38];
    double v58 = v52[39];
    int v65 = 134219264;
    double v66 = v53;
    __int16 v67 = 2048;
    double v68 = v54;
    __int16 v69 = 2048;
    double v70 = v55;
    __int16 v71 = 2048;
    double v72 = v56;
    __int16 v73 = 2048;
    double v74 = v57;
    __int16 v75 = 2048;
    double v76 = v58;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "[C] config-31,%f,config-32,%f,config-33,%f,config-34,%f,config-35,%f,config-36,%f", (uint8_t *)&v65, 0x3Eu);
  }
  if (qword_1003DB6A0 != -1) {
    dispatch_once(&qword_1003DB6A0, &stru_1003B7600);
  }
  __int16 v59 = qword_1003DB6A8;
  if (os_log_type_enabled((os_log_t)qword_1003DB6A8, OS_LOG_TYPE_DEBUG))
  {
    double v61 = *(float **)(a1 + 32);
    double v62 = v61[40];
    double v63 = v61[41];
    double v64 = v61[42];
    int v65 = 134218496;
    double v66 = v62;
    __int16 v67 = 2048;
    double v68 = v63;
    __int16 v69 = 2048;
    double v70 = v64;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "[C] config-37,%f,config-38,%f,config-39,%f", (uint8_t *)&v65, 0x20u);
  }
  return result;
}